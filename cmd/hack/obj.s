
hack:	file format Mach-O 64-bit x86-64

Disassembly of section __TEXT,__text:
_runtime.text:
 1001000:	ff 20 	jmp	qword ptr [rax]
 1001002:	47 6f 	outsd	dx, dword ptr [rsi]
 1001004:	20 62 75 	and	byte ptr [rdx + 117], ah
 1001007:	69 6c 64 20 49 44 3a 20 	imul	ebp, dword ptr [rsp + 2*riz + 32], 540689481
 100100f:	22 48 51 	and	cl, byte ptr [rax + 81]
 1001012:	34 72 	xor	al, 114
 1001014:	51 	push	rcx
 1001015:	53 	push	rbx
 1001016:	53 	push	rbx
 1001017:	6a 51 	push	81
 1001019:	4a 46  <unknown>
 100101b:	76 4b 	jbe	75 <_runtime.text+0x68>
 100101d:	6a 69 	push	105
 100101f:	68 69 73 32 4d 	push	1295151977
 1001024:	2f  <unknown>
 1001025:	61  <unknown>
 1001026:	55 	push	rbp
 1001027:	61  <unknown>
 1001028:	32 6d 79 	xor	ch, byte ptr [rbp + 121]
 100102b:	6a 49 	push	73
 100102d:	48 79 38 	jns	56 <_runtime.text+0x68>
 1001030:	4b 68 45 41 51 4a 	push	1246839109
 1001036:	59 	pop	rcx
 1001037:	4a 76 2f 	jbe	47 <_runtime.text+0x69>
 100103a:	72 45 	jb	69 <_internal/cpu.Initialize+0x11>
 100103c:	73 66 	jae	102 <_internal/cpu.Initialize+0x34>
 100103e:	45 4c  <unknown>
 1001040:	7a 68 	jp	104 <_internal/cpu.Initialize+0x3a>
 1001042:	46 6a 2d 	push	45
 1001045:	48 79 5f 	jns	95 <_internal/cpu.Initialize+0x37>
 1001048:	4a 4e  <unknown>
 100104a:	4e 69 31 71 2f 7a 6d 	imul	r14, qword ptr [rcx], 1836724081
 1001051:	30 5f 61 	xor	byte ptr [rdi + 97], bl
 1001054:	67 67 5f 	pop	rdi
 1001057:	5a 	pop	rdx
 1001058:	63 7a 72 	movsxd	edi, dword ptr [rdx + 114]
 100105b:	4e 66 	data16
 100105d:	4e 67  <unknown>
 100105f:	5a 	pop	rdx
 1001060:	63 70 45 	movsxd	esi, dword ptr [rax + 69]
 1001063:	22 0a 	and	cl, byte ptr [rdx]
 1001065:	20 ff 	and	bh, bh
 1001067:	cc 	int3
 1001068:	cc 	int3
 1001069:	cc 	int3
 100106a:	cc 	int3
 100106b:	cc 	int3
 100106c:	cc 	int3
 100106d:	cc 	int3
 100106e:	cc 	int3
 100106f:	cc 	int3

_internal/cpu.Initialize:
 1001070:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1001079:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100107d:	76 35 	jbe	53 <_internal/cpu.Initialize+0x44>
 100107f:	48 83 ec 18 	sub	rsp, 24
 1001083:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1001088:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 100108d:	e8 5e 07 00 00 	call	1886 <_internal/cpu.doinit>
 1001092:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1001097:	48 89 04 24 	mov	qword ptr [rsp], rax
 100109b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10010a0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10010a5:	e8 16 00 00 00 	call	22 <_internal/cpu.processOptions>
 10010aa:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10010af:	48 83 c4 18 	add	rsp, 24
 10010b3:	c3 	ret
 10010b4:	e8 17 fb 04 00 	call	326423 <_runtime.morestack_noctxt>
 10010b9:	eb b5 	jmp	-75 <_internal/cpu.Initialize>
 10010bb:	cc 	int3
 10010bc:	cc 	int3
 10010bd:	cc 	int3
 10010be:	cc 	int3
 10010bf:	cc 	int3

_internal/cpu.processOptions:
 10010c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10010c9:	48 8d 44 24 b0 	lea	rax, [rsp - 80]
 10010ce:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10010d2:	0f 86 cd 06 00 00 	jbe	1741 <_internal/cpu.processOptions+0x6e5>
 10010d8:	48 81 ec d0 00 00 00 	sub	rsp, 208
 10010df:	48 89 ac 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rbp
 10010e7:	48 8d ac 24 c8 00 00 00 	lea	rbp, [rsp + 200]
 10010ef:	48 8b 84 24 e0 00 00 00 	mov	rax, qword ptr [rsp + 224]
 10010f7:	48 8b 8c 24 d8 00 00 00 	mov	rcx, qword ptr [rsp + 216]
 10010ff:	48 85 c0 	test	rax, rax
 1001102:	0f 84 72 04 00 00 	je	1138 <_internal/cpu.processOptions+0x4ba>
 1001108:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100110d:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1001112:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1001116:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100111b:	c6 44 24 10 2c 	mov	byte ptr [rsp + 16], 44
 1001120:	e8 8b 06 00 00 	call	1675 <_internal/cpu.indexByte>
 1001125:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 100112a:	48 85 c9 	test	rcx, rcx
 100112d:	0f 8d 05 04 00 00 	jge	1029 <_internal/cpu.processOptions+0x478>
 1001133:	31 c0 	xor	eax, eax
 1001135:	31 c9 	xor	ecx, ecx
 1001137:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100113c:	48 83 fa 04 	cmp	rdx, 4
 1001140:	7c bd 	jl	-67 <_internal/cpu.processOptions+0x3f>
 1001142:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1001147:	81 3b 63 70 75 2e 	cmp	dword ptr [rbx], 779448419
 100114d:	75 b0 	jne	-80 <_internal/cpu.processOptions+0x3f>
 100114f:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1001154:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1001159:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 1001161:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1001165:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100116a:	c6 44 24 10 3d 	mov	byte ptr [rsp + 16], 61
 100116f:	e8 3c 06 00 00 	call	1596 <_internal/cpu.indexByte>
 1001174:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1001179:	48 85 c9 	test	rcx, rcx
 100117c:	0f 8c 50 03 00 00 	jl	848 <_internal/cpu.processOptions+0x412>
 1001182:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1001187:	48 39 d1 	cmp	rcx, rdx
 100118a:	0f 87 02 06 00 00 	ja	1538 <_internal/cpu.processOptions+0x6d2>
 1001190:	48 83 f9 04 	cmp	rcx, 4
 1001194:	0f 82 ee 05 00 00 	jb	1518 <_internal/cpu.processOptions+0x6c8>
 100119a:	48 8d 59 fc 	lea	rbx, [rcx - 4]
 100119e:	48 89 de 	mov	rsi, rbx
 10011a1:	48 f7 db 	neg	rbx
 10011a4:	48 c1 fb 3f 	sar	rbx, 63
 10011a8:	48 83 e3 04 	and	rbx, 4
 10011ac:	48 8b 7c 24 70 	mov	rdi, qword ptr [rsp + 112]
 10011b1:	4c 8d 04 1f 	lea	r8, [rdi + rbx]
 10011b5:	48 8d 41 01 	lea	rax, [rcx + 1]
 10011b9:	48 39 d0 	cmp	rax, rdx
 10011bc:	0f 87 be 05 00 00 	ja	1470 <_internal/cpu.processOptions+0x6c0>
 10011c2:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 10011c7:	4c 89 44 24 68 	mov	qword ptr [rsp + 104], r8
 10011cc:	48 29 c2 	sub	rdx, rax
 10011cf:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10011d4:	49 89 d1 	mov	r9, rdx
 10011d7:	48 f7 da 	neg	rdx
 10011da:	48 c1 fa 3f 	sar	rdx, 63
 10011de:	48 21 d0 	and	rax, rdx
 10011e1:	48 8d 14 07 	lea	rdx, [rdi + rax]
 10011e5:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 10011ea:	49 83 f9 02 	cmp	r9, 2
 10011ee:	0f 85 ac 02 00 00 	jne	684 <_internal/cpu.processOptions+0x3e0>
 10011f4:	44 0f b7 14 07 	movzx	r10d, word ptr [rdi + rax]
 10011f9:	66 41 81 fa 6f 6e 	cmp	r10w, 28271
 10011ff:	0f 85 04 02 00 00 	jne	516 <_internal/cpu.processOptions+0x349>
 1001205:	b8 01 00 00 00 	mov	eax, 1
 100120a:	48 83 f9 07 	cmp	rcx, 7
 100120e:	0f 85 aa 00 00 00 	jne	170 <_internal/cpu.processOptions+0x1fe>
 1001214:	0f b7 14 1f 	movzx	edx, word ptr [rdi + rbx]
 1001218:	66 81 fa 61 6c 	cmp	dx, 27745
 100121d:	0f 85 9b 00 00 00 	jne	155 <_internal/cpu.processOptions+0x1fe>
 1001223:	0f b6 54 1f 02 	movzx	edx, byte ptr [rdi + rbx + 2]
 1001228:	80 fa 6c 	cmp	dl, 108
 100122b:	0f 85 8d 00 00 00 	jne	141 <_internal/cpu.processOptions+0x1fe>
 1001231:	48 8b 15 b0 d0 0c 00 	mov	rdx, qword ptr [rip + 839856]
 1001238:	31 c9 	xor	ecx, ecx
 100123a:	eb 09 	jmp	9 <_internal/cpu.processOptions+0x185>
 100123c:	41 88 74 08 19 	mov	byte ptr [r8 + rcx + 25], sil
 1001241:	48 8d 4b 01 	lea	rcx, [rbx + 1]
 1001245:	48 39 d1 	cmp	rcx, rdx
 1001248:	7d 62 	jge	98 <_internal/cpu.processOptions+0x1ec>
 100124a:	48 8b 1d 97 d0 0c 00 	mov	rbx, qword ptr [rip + 839831]
 1001251:	48 8b 35 88 d0 0c 00 	mov	rsi, qword ptr [rip + 839816]
 1001258:	48 39 d9 	cmp	rcx, rbx
 100125b:	0f 83 14 05 00 00 	jae	1300 <_internal/cpu.processOptions+0x6b5>
 1001261:	48 89 cb 	mov	rbx, rcx
 1001264:	48 c1 e1 05 	shl	rcx, 5
 1001268:	c6 44 0e 18 01 	mov	byte ptr [rsi + rcx + 24], 1
 100126d:	84 c0 	test	al, al
 100126f:	74 1d 	je	29 <_internal/cpu.processOptions+0x1ce>
 1001271:	be 01 00 00 00 	mov	esi, 1
 1001276:	48 8b 3d 6b d0 0c 00 	mov	rdi, qword ptr [rip + 839787]
 100127d:	4c 8b 05 5c d0 0c 00 	mov	r8, qword ptr [rip + 839772]
 1001284:	48 39 fb 	cmp	rbx, rdi
 1001287:	72 b3 	jb	-77 <_internal/cpu.processOptions+0x17c>
 1001289:	e9 d1 04 00 00 	jmp	1233 <_internal/cpu.processOptions+0x69f>
 100128e:	48 8b 35 4b d0 0c 00 	mov	rsi, qword ptr [rip + 839755]
 1001295:	48 8b 3d 4c d0 0c 00 	mov	rdi, qword ptr [rip + 839756]
 100129c:	48 39 fb 	cmp	rbx, rdi
 100129f:	0f 83 c5 04 00 00 	jae	1221 <_internal/cpu.processOptions+0x6aa>
 10012a5:	0f b6 74 0e 1a 	movzx	esi, byte ptr [rsi + rcx + 26]
 10012aa:	eb ca 	jmp	-54 <_internal/cpu.processOptions+0x1b6>
 10012ac:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10012b1:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 10012b9:	e9 41 fe ff ff 	jmp	-447 <_internal/cpu.processOptions+0x3f>
 10012be:	88 44 24 27 	mov	byte ptr [rsp + 39], al
 10012c2:	48 8b 15 1f d0 0c 00 	mov	rdx, qword ptr [rip + 839711]
 10012c9:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 10012ce:	31 c9 	xor	ecx, ecx
 10012d0:	eb 04 	jmp	4 <_internal/cpu.processOptions+0x216>
 10012d2:	48 8d 4b 01 	lea	rcx, [rbx + 1]
 10012d6:	48 39 d1 	cmp	rcx, rdx
 10012d9:	0f 8d c4 00 00 00 	jge	196 <_internal/cpu.processOptions+0x2e3>
 10012df:	48 8b 1d 02 d0 0c 00 	mov	rbx, qword ptr [rip + 839682]
 10012e6:	48 8b 3d f3 cf 0c 00 	mov	rdi, qword ptr [rip + 839667]
 10012ed:	48 39 d9 	cmp	rcx, rbx
 10012f0:	0f 83 5e 04 00 00 	jae	1118 <_internal/cpu.processOptions+0x694>
 10012f6:	48 89 cb 	mov	rbx, rcx
 10012f9:	48 c1 e1 05 	shl	rcx, 5
 10012fd:	4c 8b 4c 0f 08 	mov	r9, qword ptr [rdi + rcx + 8]
 1001302:	48 8b 3c 0f 	mov	rdi, qword ptr [rdi + rcx]
 1001306:	49 39 f1 	cmp	r9, rsi
 1001309:	75 c7 	jne	-57 <_internal/cpu.processOptions+0x212>
 100130b:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 1001310:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1001315:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1001319:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 100131e:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 1001323:	e8 c8 0d 00 00 	call	3528 <_runtime.memequal>
 1001328:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 100132d:	75 1b 	jne	27 <_internal/cpu.processOptions+0x28a>
 100132f:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 1001334:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1001339:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 100133e:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 1001343:	4c 8b 44 24 68 	mov	r8, qword ptr [rsp + 104]
 1001348:	eb 88 	jmp	-120 <_internal/cpu.processOptions+0x212>
 100134a:	48 8b 0d 97 cf 0c 00 	mov	rcx, qword ptr [rip + 839575]
 1001351:	48 8b 15 88 cf 0c 00 	mov	rdx, qword ptr [rip + 839560]
 1001358:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100135d:	48 39 c8 	cmp	rax, rcx
 1001360:	0f 83 e9 03 00 00 	jae	1001 <_internal/cpu.processOptions+0x68f>
 1001366:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 100136b:	c6 44 1a 18 01 	mov	byte ptr [rdx + rbx + 24], 1
 1001370:	48 8b 0d 71 cf 0c 00 	mov	rcx, qword ptr [rip + 839537]
 1001377:	48 8b 15 62 cf 0c 00 	mov	rdx, qword ptr [rip + 839522]
 100137e:	48 39 c8 	cmp	rax, rcx
 1001381:	0f 83 c3 03 00 00 	jae	963 <_internal/cpu.processOptions+0x68a>
 1001387:	0f b6 74 24 27 	movzx	esi, byte ptr [rsp + 39]
 100138c:	40 88 74 1a 19 	mov	byte ptr [rdx + rbx + 25], sil
 1001391:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1001396:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 100139e:	e9 5c fd ff ff 	jmp	-676 <_internal/cpu.processOptions+0x3f>
 10013a3:	e8 f8 90 02 00 	call	168184 <_runtime.printlock>
 10013a8:	48 8d 05 42 43 07 00 	lea	rax, [rip + 475970]
 10013af:	48 89 04 24 	mov	qword ptr [rsp], rax
 10013b3:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 10013bc:	e8 1f 9a 02 00 	call	170527 <_runtime.printstring>
 10013c1:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10013c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10013ca:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10013cf:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10013d4:	e8 07 9a 02 00 	call	170503 <_runtime.printstring>
 10013d9:	48 8d 05 9c 18 07 00 	lea	rax, [rip + 465052]
 10013e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10013e4:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10013ed:	e8 ee 99 02 00 	call	170478 <_runtime.printstring>
 10013f2:	e8 29 91 02 00 	call	168233 <_runtime.printunlock>
 10013f7:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10013fc:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1001404:	e9 f6 fc ff ff 	jmp	-778 <_internal/cpu.processOptions+0x3f>
 1001409:	e8 92 90 02 00 	call	168082 <_runtime.printlock>
 100140e:	48 8d 05 7d 26 07 00 	lea	rax, [rip + 468605]
 1001415:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001419:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1001422:	e8 b9 99 02 00 	call	170425 <_runtime.printstring>
 1001427:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100142c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001430:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1001435:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100143a:	e8 a1 99 02 00 	call	170401 <_runtime.printstring>
 100143f:	48 8d 05 18 47 07 00 	lea	rax, [rip + 476952]
 1001446:	48 89 04 24 	mov	qword ptr [rsp], rax
 100144a:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 1001453:	e8 88 99 02 00 	call	170376 <_runtime.printstring>
 1001458:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100145d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001461:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1001466:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100146b:	e8 70 99 02 00 	call	170352 <_runtime.printstring>
 1001470:	48 8d 05 05 18 07 00 	lea	rax, [rip + 464901]
 1001477:	48 89 04 24 	mov	qword ptr [rsp], rax
 100147b:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1001484:	e8 57 99 02 00 	call	170327 <_runtime.printstring>
 1001489:	e8 92 90 02 00 	call	168082 <_runtime.printunlock>
 100148e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1001493:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 100149b:	e9 5f fc ff ff 	jmp	-929 <_internal/cpu.processOptions+0x3f>
 10014a0:	49 83 f9 03 	cmp	r9, 3
 10014a4:	0f 85 5f ff ff ff 	jne	-161 <_internal/cpu.processOptions+0x349>
 10014aa:	44 0f b7 14 07 	movzx	r10d, word ptr [rdi + rax]
 10014af:	66 41 81 fa 6f 66 	cmp	r10w, 26223
 10014b5:	0f 85 4e ff ff ff 	jne	-178 <_internal/cpu.processOptions+0x349>
 10014bb:	44 0f b6 54 07 02 	movzx	r10d, byte ptr [rdi + rax + 2]
 10014c1:	41 80 fa 66 	cmp	r10b, 102
 10014c5:	0f 85 3e ff ff ff 	jne	-194 <_internal/cpu.processOptions+0x349>
 10014cb:	31 c0 	xor	eax, eax
 10014cd:	e9 38 fd ff ff 	jmp	-712 <_internal/cpu.processOptions+0x14a>
 10014d2:	e8 c9 8f 02 00 	call	167881 <_runtime.printlock>
 10014d7:	48 8d 05 80 48 07 00 	lea	rax, [rip + 477312]
 10014de:	48 89 04 24 	mov	qword ptr [rsp], rax
 10014e2:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 10014eb:	e8 f0 98 02 00 	call	170224 <_runtime.printstring>
 10014f0:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10014f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10014f9:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10014fe:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1001503:	e8 d8 98 02 00 	call	170200 <_runtime.printstring>
 1001508:	48 8d 05 6d 17 07 00 	lea	rax, [rip + 464749]
 100150f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001513:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 100151c:	e8 bf 98 02 00 	call	170175 <_runtime.printstring>
 1001521:	e8 fa 8f 02 00 	call	167930 <_runtime.printunlock>
 1001526:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100152b:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1001533:	e9 c7 fb ff ff 	jmp	-1081 <_internal/cpu.processOptions+0x3f>
 1001538:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100153d:	48 39 d1 	cmp	rcx, rdx
 1001540:	0f 87 59 02 00 00 	ja	601 <_internal/cpu.processOptions+0x6df>
 1001546:	48 8d 41 01 	lea	rax, [rcx + 1]
 100154a:	48 39 d0 	cmp	rax, rdx
 100154d:	0f 87 44 02 00 00 	ja	580 <_internal/cpu.processOptions+0x6d7>
 1001553:	48 29 c2 	sub	rdx, rax
 1001556:	48 89 d3 	mov	rbx, rdx
 1001559:	48 f7 da 	neg	rdx
 100155c:	48 c1 fa 3f 	sar	rdx, 63
 1001560:	48 21 d0 	and	rax, rdx
 1001563:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 1001568:	48 8d 3c 06 	lea	rdi, [rsi + rax]
 100156c:	48 89 d8 	mov	rax, rbx
 100156f:	48 89 ca 	mov	rdx, rcx
 1001572:	48 89 f9 	mov	rcx, rdi
 1001575:	e9 c2 fb ff ff 	jmp	-1086 <_internal/cpu.processOptions+0x7c>
 100157a:	48 8b 05 67 cd 0c 00 	mov	rax, qword ptr [rip + 839015]
 1001581:	48 8b 0d 58 cd 0c 00 	mov	rcx, qword ptr [rip + 839000]
 1001588:	48 85 c0 	test	rax, rax
 100158b:	0f 8e 8f 00 00 00 	jle	143 <_internal/cpu.processOptions+0x560>
 1001591:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1001596:	31 d2 	xor	edx, edx
 1001598:	eb 04 	jmp	4 <_internal/cpu.processOptions+0x4de>
 100159a:	48 83 c1 20 	add	rcx, 32
 100159e:	0f 10 01 	movups	xmm0, xmmword ptr [rcx]
 10015a1:	0f 11 84 24 a8 00 00 00 	movups	xmmword ptr [rsp + 168], xmm0
 10015a9:	0f 10 41 10 	movups	xmm0, xmmword ptr [rcx + 16]
 10015ad:	0f 11 84 24 b8 00 00 00 	movups	xmmword ptr [rsp + 184], xmm0
 10015b5:	0f 10 84 24 a8 00 00 00 	movups	xmm0, xmmword ptr [rsp + 168]
 10015bd:	0f 11 84 24 88 00 00 00 	movups	xmmword ptr [rsp + 136], xmm0
 10015c5:	0f 10 84 24 b8 00 00 00 	movups	xmm0, xmmword ptr [rsp + 184]
 10015cd:	0f 11 84 24 98 00 00 00 	movups	xmmword ptr [rsp + 152], xmm0
 10015d5:	80 bc 24 a0 00 00 00 00 	cmp	byte ptr [rsp + 160], 0
 10015dd:	74 35 	je	53 <_internal/cpu.processOptions+0x554>
 10015df:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 10015e4:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 10015e9:	0f b6 9c 24 a1 00 00 00 	movzx	ebx, byte ptr [rsp + 161]
 10015f1:	84 db 	test	bl, bl
 10015f3:	74 13 	je	19 <_internal/cpu.processOptions+0x548>
 10015f5:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 10015fd:	80 3e 00 	cmp	byte ptr [rsi], 0
 1001600:	0f 84 bc 00 00 00 	je	188 <_internal/cpu.processOptions+0x602>
 1001606:	84 db 	test	bl, bl
 1001608:	74 26 	je	38 <_internal/cpu.processOptions+0x570>
 100160a:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 1001612:	88 1e 	mov	byte ptr [rsi], bl
 1001614:	48 ff c2 	inc	rdx
 1001617:	48 39 c2 	cmp	rdx, rax
 100161a:	0f 8c 7a ff ff ff 	jl	-134 <_internal/cpu.processOptions+0x4da>
 1001620:	48 8b ac 24 c8 00 00 00 	mov	rbp, qword ptr [rsp + 200]
 1001628:	48 81 c4 d0 00 00 00 	add	rsp, 208
 100162f:	c3 	ret
 1001630:	80 bc 24 a2 00 00 00 00 	cmp	byte ptr [rsp + 162], 0
 1001638:	74 d0 	je	-48 <_internal/cpu.processOptions+0x54a>
 100163a:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1001642:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 100164a:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 1001652:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1001657:	e8 44 8e 02 00 	call	167492 <_runtime.printlock>
 100165c:	48 8d 05 46 37 07 00 	lea	rax, [rip + 472902]
 1001663:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001667:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 1001670:	e8 6b 97 02 00 	call	169835 <_runtime.printstring>
 1001675:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100167d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001681:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1001686:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100168b:	e8 50 97 02 00 	call	169808 <_runtime.printstring>
 1001690:	48 8d 05 9e 33 07 00 	lea	rax, [rip + 471966]
 1001697:	48 89 04 24 	mov	qword ptr [rsp], rax
 100169b:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 10016a4:	e8 37 97 02 00 	call	169783 <_runtime.printstring>
 10016a9:	e8 72 8e 02 00 	call	167538 <_runtime.printunlock>
 10016ae:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10016b3:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10016b8:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10016bd:	e9 52 ff ff ff 	jmp	-174 <_internal/cpu.processOptions+0x554>
 10016c2:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 10016ca:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 10016d2:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 10016da:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10016df:	e8 bc 8d 02 00 	call	167356 <_runtime.printlock>
 10016e4:	48 8d 05 e3 34 07 00 	lea	rax, [rip + 472291]
 10016eb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10016ef:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 10016f8:	e8 e3 96 02 00 	call	169699 <_runtime.printstring>
 10016fd:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1001705:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001709:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100170e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1001713:	e8 c8 96 02 00 	call	169672 <_runtime.printstring>
 1001718:	48 8d 05 a9 30 07 00 	lea	rax, [rip + 471209]
 100171f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001723:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 100172c:	e8 af 96 02 00 	call	169647 <_runtime.printstring>
 1001731:	e8 ea 8d 02 00 	call	167402 <_runtime.printunlock>
 1001736:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100173b:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1001740:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1001745:	e9 ca fe ff ff 	jmp	-310 <_internal/cpu.processOptions+0x554>
 100174a:	e8 01 1c 05 00 	call	334849 <_runtime.panicIndex>
 100174f:	e8 fc 1b 05 00 	call	334844 <_runtime.panicIndex>
 1001754:	48 89 c8 	mov	rax, rcx
 1001757:	48 89 d9 	mov	rcx, rbx
 100175a:	e8 f1 1b 05 00 	call	334833 <_runtime.panicIndex>
 100175f:	48 89 d8 	mov	rax, rbx
 1001762:	48 89 f9 	mov	rcx, rdi
 1001765:	e8 e6 1b 05 00 	call	334822 <_runtime.panicIndex>
 100176a:	48 89 d8 	mov	rax, rbx
 100176d:	48 89 f9 	mov	rcx, rdi
 1001770:	e8 db 1b 05 00 	call	334811 <_runtime.panicIndex>
 1001775:	48 89 c8 	mov	rax, rcx
 1001778:	48 89 d9 	mov	rcx, rbx
 100177b:	e8 d0 1b 05 00 	call	334800 <_runtime.panicIndex>
 1001780:	48 89 d1 	mov	rcx, rdx
 1001783:	e8 28 1c 05 00 	call	334888 <_runtime.panicSliceB>
 1001788:	b8 04 00 00 00 	mov	eax, 4
 100178d:	e8 1e 1c 05 00 	call	334878 <_runtime.panicSliceB>
 1001792:	e8 d9 1b 05 00 	call	334809 <_runtime.panicSliceAlen>
 1001797:	48 89 d1 	mov	rcx, rdx
 100179a:	e8 11 1c 05 00 	call	334865 <_runtime.panicSliceB>
 100179f:	e8 cc 1b 05 00 	call	334796 <_runtime.panicSliceAlen>
 10017a4:	90 	nop
 10017a5:	e8 26 f4 04 00 	call	324646 <_runtime.morestack_noctxt>
 10017aa:	e9 11 f9 ff ff 	jmp	-1775 <_internal/cpu.processOptions>
 10017af:	cc 	int3

_internal/cpu.indexByte:
 10017b0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10017b5:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 10017ba:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 10017bf:	31 db 	xor	ebx, ebx
 10017c1:	eb 03 	jmp	3 <_internal/cpu.indexByte+0x16>
 10017c3:	48 ff c3 	inc	rbx
 10017c6:	48 39 c3 	cmp	rbx, rax
 10017c9:	7d 0f 	jge	15 <_internal/cpu.indexByte+0x2a>
 10017cb:	0f b6 34 1a 	movzx	esi, byte ptr [rdx + rbx]
 10017cf:	40 38 ce 	cmp	sil, cl
 10017d2:	75 ef 	jne	-17 <_internal/cpu.indexByte+0x13>
 10017d4:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 10017d9:	c3 	ret
 10017da:	48 c7 44 24 20 ff ff ff ff 	mov	qword ptr [rsp + 32], -1
 10017e3:	c3 	ret
 10017e4:	cc 	int3
 10017e5:	cc 	int3
 10017e6:	cc 	int3
 10017e7:	cc 	int3
 10017e8:	cc 	int3
 10017e9:	cc 	int3
 10017ea:	cc 	int3
 10017eb:	cc 	int3
 10017ec:	cc 	int3
 10017ed:	cc 	int3
 10017ee:	cc 	int3
 10017ef:	cc 	int3

_internal/cpu.doinit:
 10017f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10017f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10017fd:	0f 86 d1 03 00 00 	jbe	977 <_internal/cpu.doinit+0x3e4>
 1001803:	48 83 ec 38 	sub	rsp, 56
 1001807:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100180c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1001811:	48 8d 05 e8 ed 05 00 	lea	rax, [rip + 388584]
 1001818:	48 89 04 24 	mov	qword ptr [rsp], rax
 100181c:	e8 df 8b 00 00 	call	35807 <_runtime.newobject>
 1001821:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 1001826:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 100182b:	48 8d 35 2e 37 08 00 	lea	rsi, [rip + 538414]
 1001832:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1001837:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 100183c:	e8 cb 1e 05 00 	call	335563 <_runtime.duffcopy+0x1dc>
 1001841:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1001845:	83 3d b4 60 0f 00 00 	cmp	dword ptr [rip + 1007796], 0
 100184c:	0f 85 64 02 00 00 	jne	612 <_internal/cpu.doinit+0x2c6>
 1001852:	48 8d 0d 28 64 0f 00 	lea	rcx, [rip + 1008680]
 1001859:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100185e:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1001862:	48 8d 0d 17 64 0f 00 	lea	rcx, [rip + 1008663]
 1001869:	48 89 48 30 	mov	qword ptr [rax + 48], rcx
 100186d:	48 8d 0d 0e 64 0f 00 	lea	rcx, [rip + 1008654]
 1001874:	48 89 48 50 	mov	qword ptr [rax + 80], rcx
 1001878:	48 8d 0d 04 64 0f 00 	lea	rcx, [rip + 1008644]
 100187f:	48 89 48 70 	mov	qword ptr [rax + 112], rcx
 1001883:	48 8d 0d fa 63 0f 00 	lea	rcx, [rip + 1008634]
 100188a:	48 89 88 90 00 00 00 	mov	qword ptr [rax + 144], rcx
 1001891:	48 8d 0d ed 63 0f 00 	lea	rcx, [rip + 1008621]
 1001898:	48 89 88 b0 00 00 00 	mov	qword ptr [rax + 176], rcx
 100189f:	48 8d 0d e0 63 0f 00 	lea	rcx, [rip + 1008608]
 10018a6:	48 89 88 d0 00 00 00 	mov	qword ptr [rax + 208], rcx
 10018ad:	48 8d 0d d3 63 0f 00 	lea	rcx, [rip + 1008595]
 10018b4:	48 89 88 f0 00 00 00 	mov	qword ptr [rax + 240], rcx
 10018bb:	48 8d 0d c7 63 0f 00 	lea	rcx, [rip + 1008583]
 10018c2:	48 89 88 10 01 00 00 	mov	qword ptr [rax + 272], rcx
 10018c9:	48 8d 0d ba 63 0f 00 	lea	rcx, [rip + 1008570]
 10018d0:	48 89 88 30 01 00 00 	mov	qword ptr [rax + 304], rcx
 10018d7:	48 8d 0d ae 63 0f 00 	lea	rcx, [rip + 1008558]
 10018de:	48 89 88 50 01 00 00 	mov	qword ptr [rax + 336], rcx
 10018e5:	48 8d 0d a2 63 0f 00 	lea	rcx, [rip + 1008546]
 10018ec:	48 89 88 70 01 00 00 	mov	qword ptr [rax + 368], rcx
 10018f3:	48 8d 0d 95 63 0f 00 	lea	rcx, [rip + 1008533]
 10018fa:	48 89 88 90 01 00 00 	mov	qword ptr [rax + 400], rcx
 1001901:	48 8d 0d 85 63 0f 00 	lea	rcx, [rip + 1008517]
 1001908:	48 89 88 b0 01 00 00 	mov	qword ptr [rax + 432], rcx
 100190f:	48 8d 0d 75 63 0f 00 	lea	rcx, [rip + 1008501]
 1001916:	48 89 88 d0 01 00 00 	mov	qword ptr [rax + 464], rcx
 100191d:	48 c7 05 c0 c9 0c 00 0f 00 00 00 	mov	qword ptr [rip + 838080], 15
 1001928:	48 c7 05 bd c9 0c 00 0f 00 00 00 	mov	qword ptr [rip + 838077], 15
 1001933:	83 3d c6 5f 0f 00 00 	cmp	dword ptr [rip + 1007558], 0
 100193a:	0f 85 65 01 00 00 	jne	357 <_internal/cpu.doinit+0x2b5>
 1001940:	48 89 05 99 c9 0c 00 	mov	qword ptr [rip + 838041], rax
 1001947:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 100194f:	e8 8c 02 00 00 	call	652 <_internal/cpu.cpuid>
 1001954:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 1001958:	83 f8 01 	cmp	eax, 1
 100195b:	0f 82 3a 01 00 00 	jb	314 <_internal/cpu.doinit+0x2ab>
 1001961:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 1001965:	48 c7 04 24 01 00 00 00 	mov	qword ptr [rsp], 1
 100196d:	e8 6e 02 00 00 	call	622 <_internal/cpu.cpuid>
 1001972:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1001976:	8b 4c 24 14 	mov	ecx, dword ptr [rsp + 20]
 100197a:	0f ba e1 1a 	bt	ecx, 26
 100197e:	0f 92 05 06 63 0f 00 	setb	byte ptr [rip + 1008390]
 1001985:	0f ba e0 00 	bt	eax, 0
 1001989:	0f 92 05 fc 62 0f 00 	setb	byte ptr [rip + 1008380]
 1001990:	0f ba e0 01 	bt	eax, 1
 1001994:	0f 92 05 ee 62 0f 00 	setb	byte ptr [rip + 1008366]
 100199b:	0f ba e0 09 	bt	eax, 9
 100199f:	0f 92 05 e7 62 0f 00 	setb	byte ptr [rip + 1008359]
 10019a6:	0f ba e0 0c 	bt	eax, 12
 10019aa:	0f 92 05 d6 62 0f 00 	setb	byte ptr [rip + 1008342]
 10019b1:	0f ba e0 13 	bt	eax, 19
 10019b5:	0f 92 05 d2 62 0f 00 	setb	byte ptr [rip + 1008338]
 10019bc:	0f ba e0 14 	bt	eax, 20
 10019c0:	0f 92 05 c8 62 0f 00 	setb	byte ptr [rip + 1008328]
 10019c7:	0f ba e0 17 	bt	eax, 23
 10019cb:	0f 92 05 b8 62 0f 00 	setb	byte ptr [rip + 1008312]
 10019d2:	0f ba e0 19 	bt	eax, 25
 10019d6:	0f 92 05 a3 62 0f 00 	setb	byte ptr [rip + 1008291]
 10019dd:	0f ba e0 1b 	bt	eax, 27
 10019e1:	0f 92 c1 	setb	cl
 10019e4:	88 0d 9e 62 0f 00 	mov	byte ptr [rip + 1008286], cl
 10019ea:	0f 82 83 00 00 00 	jb	131 <_internal/cpu.doinit+0x283>
 10019f0:	31 c9 	xor	ecx, ecx
 10019f2:	0f ba e0 1c 	bt	eax, 28
 10019f6:	0f 92 c0 	setb	al
 10019f9:	21 c8 	and	eax, ecx
 10019fb:	88 05 81 62 0f 00 	mov	byte ptr [rip + 1008257], al
 1001a01:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 1001a05:	83 f8 07 	cmp	eax, 7
 1001a08:	73 0a 	jae	10 <_internal/cpu.doinit+0x224>
 1001a0a:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1001a0f:	48 83 c4 38 	add	rsp, 56
 1001a13:	c3 	ret
 1001a14:	88 4c 24 1f 	mov	byte ptr [rsp + 31], cl
 1001a18:	48 c7 04 24 07 00 00 00 	mov	qword ptr [rsp], 7
 1001a20:	e8 bb 01 00 00 	call	443 <_internal/cpu.cpuid>
 1001a25:	8b 44 24 0c 	mov	eax, dword ptr [rsp + 12]
 1001a29:	0f ba e0 03 	bt	eax, 3
 1001a2d:	0f 92 05 50 62 0f 00 	setb	byte ptr [rip + 1008208]
 1001a34:	0f ba e0 05 	bt	eax, 5
 1001a38:	0f 92 c1 	setb	cl
 1001a3b:	0f b6 54 24 1f 	movzx	edx, byte ptr [rsp + 31]
 1001a40:	21 ca 	and	edx, ecx
 1001a42:	88 15 3b 62 0f 00 	mov	byte ptr [rip + 1008187], dl
 1001a48:	0f ba e0 08 	bt	eax, 8
 1001a4c:	0f 92 05 32 62 0f 00 	setb	byte ptr [rip + 1008178]
 1001a53:	0f ba e0 09 	bt	eax, 9
 1001a57:	0f 92 05 28 62 0f 00 	setb	byte ptr [rip + 1008168]
 1001a5e:	0f ba e0 13 	bt	eax, 19
 1001a62:	0f 92 05 18 62 0f 00 	setb	byte ptr [rip + 1008152]
 1001a69:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1001a6e:	48 83 c4 38 	add	rsp, 56
 1001a72:	c3 	ret
 1001a73:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 1001a77:	e8 84 01 00 00 	call	388 <_internal/cpu.xgetbv>
 1001a7c:	8b 04 24 	mov	eax, dword ptr [rsp]
 1001a7f:	0f ba e0 01 	bt	eax, 1
 1001a83:	73 12 	jae	18 <_internal/cpu.doinit+0x2a7>
 1001a85:	0f ba e0 02 	bt	eax, 2
 1001a89:	0f 92 c0 	setb	al
 1001a8c:	89 c1 	mov	ecx, eax
 1001a8e:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 1001a92:	e9 5b ff ff ff 	jmp	-165 <_internal/cpu.doinit+0x202>
 1001a97:	31 c0 	xor	eax, eax
 1001a99:	eb f1 	jmp	-15 <_internal/cpu.doinit+0x29c>
 1001a9b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1001aa0:	48 83 c4 38 	add	rsp, 56
 1001aa4:	c3 	ret
 1001aa5:	48 8d 3d 34 c8 0c 00 	lea	rdi, [rip + 837684]
 1001aac:	e8 2f 0f 05 00 	call	331567 <_runtime.gcWriteBarrier>
 1001ab1:	e9 91 fe ff ff 	jmp	-367 <_internal/cpu.doinit+0x157>
 1001ab6:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1001abb:	48 8d 79 10 	lea	rdi, [rcx + 16]
 1001abf:	48 8d 05 bb 61 0f 00 	lea	rax, [rip + 1008059]
 1001ac6:	e8 15 0f 05 00 	call	331541 <_runtime.gcWriteBarrier>
 1001acb:	48 8d 79 30 	lea	rdi, [rcx + 48]
 1001acf:	48 8d 05 aa 61 0f 00 	lea	rax, [rip + 1008042]
 1001ad6:	e8 05 0f 05 00 	call	331525 <_runtime.gcWriteBarrier>
 1001adb:	48 8d 79 50 	lea	rdi, [rcx + 80]
 1001adf:	48 8d 05 9c 61 0f 00 	lea	rax, [rip + 1008028]
 1001ae6:	e8 f5 0e 05 00 	call	331509 <_runtime.gcWriteBarrier>
 1001aeb:	48 8d 79 70 	lea	rdi, [rcx + 112]
 1001aef:	48 8d 05 8d 61 0f 00 	lea	rax, [rip + 1008013]
 1001af6:	e8 e5 0e 05 00 	call	331493 <_runtime.gcWriteBarrier>
 1001afb:	48 8d b9 90 00 00 00 	lea	rdi, [rcx + 144]
 1001b02:	48 8d 05 7b 61 0f 00 	lea	rax, [rip + 1007995]
 1001b09:	e8 d2 0e 05 00 	call	331474 <_runtime.gcWriteBarrier>
 1001b0e:	48 8d b9 b0 00 00 00 	lea	rdi, [rcx + 176]
 1001b15:	48 8d 05 69 61 0f 00 	lea	rax, [rip + 1007977]
 1001b1c:	e8 bf 0e 05 00 	call	331455 <_runtime.gcWriteBarrier>
 1001b21:	48 8d b9 d0 00 00 00 	lea	rdi, [rcx + 208]
 1001b28:	48 8d 05 57 61 0f 00 	lea	rax, [rip + 1007959]
 1001b2f:	e8 ac 0e 05 00 	call	331436 <_runtime.gcWriteBarrier>
 1001b34:	48 8d b9 f0 00 00 00 	lea	rdi, [rcx + 240]
 1001b3b:	48 8d 05 45 61 0f 00 	lea	rax, [rip + 1007941]
 1001b42:	e8 99 0e 05 00 	call	331417 <_runtime.gcWriteBarrier>
 1001b47:	48 8d b9 10 01 00 00 	lea	rdi, [rcx + 272]
 1001b4e:	48 8d 05 34 61 0f 00 	lea	rax, [rip + 1007924]
 1001b55:	e8 86 0e 05 00 	call	331398 <_runtime.gcWriteBarrier>
 1001b5a:	48 8d b9 30 01 00 00 	lea	rdi, [rcx + 304]
 1001b61:	48 8d 05 22 61 0f 00 	lea	rax, [rip + 1007906]
 1001b68:	e8 73 0e 05 00 	call	331379 <_runtime.gcWriteBarrier>
 1001b6d:	48 8d b9 50 01 00 00 	lea	rdi, [rcx + 336]
 1001b74:	48 8d 05 11 61 0f 00 	lea	rax, [rip + 1007889]
 1001b7b:	e8 60 0e 05 00 	call	331360 <_runtime.gcWriteBarrier>
 1001b80:	48 8d b9 70 01 00 00 	lea	rdi, [rcx + 368]
 1001b87:	48 8d 05 00 61 0f 00 	lea	rax, [rip + 1007872]
 1001b8e:	e8 4d 0e 05 00 	call	331341 <_runtime.gcWriteBarrier>
 1001b93:	48 8d b9 90 01 00 00 	lea	rdi, [rcx + 400]
 1001b9a:	48 8d 05 ee 60 0f 00 	lea	rax, [rip + 1007854]
 1001ba1:	e8 3a 0e 05 00 	call	331322 <_runtime.gcWriteBarrier>
 1001ba6:	48 8d b9 b0 01 00 00 	lea	rdi, [rcx + 432]
 1001bad:	48 8d 05 d9 60 0f 00 	lea	rax, [rip + 1007833]
 1001bb4:	e8 27 0e 05 00 	call	331303 <_runtime.gcWriteBarrier>
 1001bb9:	48 8d b9 d0 01 00 00 	lea	rdi, [rcx + 464]
 1001bc0:	48 8d 05 c4 60 0f 00 	lea	rax, [rip + 1007812]
 1001bc7:	e8 14 0e 05 00 	call	331284 <_runtime.gcWriteBarrier>
 1001bcc:	48 89 c8 	mov	rax, rcx
 1001bcf:	e9 49 fd ff ff 	jmp	-695 <_internal/cpu.doinit+0x12d>
 1001bd4:	e8 f7 ef 04 00 	call	323575 <_runtime.morestack_noctxt>
 1001bd9:	e9 12 fc ff ff 	jmp	-1006 <_internal/cpu.doinit>
 1001bde:	cc 	int3
 1001bdf:	cc 	int3

_internal/cpu.cpuid:
 1001be0:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 1001be4:	8b 4c 24 0c 	mov	ecx, dword ptr [rsp + 12]
 1001be8:	0f a2 	cpuid
 1001bea:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 1001bee:	89 5c 24 14 	mov	dword ptr [rsp + 20], ebx
 1001bf2:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 1001bf6:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 1001bfa:	c3 	ret
 1001bfb:	cc 	int3
 1001bfc:	cc 	int3
 1001bfd:	cc 	int3
 1001bfe:	cc 	int3
 1001bff:	cc 	int3

_internal/cpu.xgetbv:
 1001c00:	b9 00 00 00 00 	mov	ecx, 0
 1001c05:	0f 01 d0 	xgetbv
 1001c08:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 1001c0c:	89 54 24 0c 	mov	dword ptr [rsp + 12], edx
 1001c10:	c3 	ret
 1001c11:	cc 	int3
 1001c12:	cc 	int3
 1001c13:	cc 	int3
 1001c14:	cc 	int3
 1001c15:	cc 	int3
 1001c16:	cc 	int3
 1001c17:	cc 	int3
 1001c18:	cc 	int3
 1001c19:	cc 	int3
 1001c1a:	cc 	int3
 1001c1b:	cc 	int3
 1001c1c:	cc 	int3
 1001c1d:	cc 	int3
 1001c1e:	cc 	int3
 1001c1f:	cc 	int3

_type..eq.internal/cpu.CacheLinePad:
 1001c20:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 1001c25:	c3 	ret
 1001c26:	cc 	int3
 1001c27:	cc 	int3
 1001c28:	cc 	int3
 1001c29:	cc 	int3
 1001c2a:	cc 	int3
 1001c2b:	cc 	int3
 1001c2c:	cc 	int3
 1001c2d:	cc 	int3
 1001c2e:	cc 	int3
 1001c2f:	cc 	int3

_type..eq.internal/cpu.arm:
 1001c30:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1001c35:	0f b6 48 40 	movzx	ecx, byte ptr [rax + 64]
 1001c39:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1001c3e:	38 4a 40 	cmp	byte ptr [rdx + 64], cl
 1001c41:	75 0f 	jne	15 <_type..eq.internal/cpu.arm+0x22>
 1001c43:	0f b6 4a 41 	movzx	ecx, byte ptr [rdx + 65]
 1001c47:	38 48 41 	cmp	byte ptr [rax + 65], cl
 1001c4a:	0f 94 c0 	sete	al
 1001c4d:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1001c51:	c3 	ret
 1001c52:	31 c0 	xor	eax, eax
 1001c54:	eb f7 	jmp	-9 <_type..eq.internal/cpu.arm+0x1d>
 1001c56:	cc 	int3
 1001c57:	cc 	int3
 1001c58:	cc 	int3
 1001c59:	cc 	int3
 1001c5a:	cc 	int3
 1001c5b:	cc 	int3
 1001c5c:	cc 	int3
 1001c5d:	cc 	int3
 1001c5e:	cc 	int3
 1001c5f:	cc 	int3

_type..eq.internal/cpu.arm64:
 1001c60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1001c69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1001c6d:	76 4a 	jbe	74 <_type..eq.internal/cpu.arm64+0x59>
 1001c6f:	48 83 ec 28 	sub	rsp, 40
 1001c73:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1001c78:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1001c7d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1001c82:	48 83 c0 40 	add	rax, 64
 1001c86:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001c8a:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1001c8f:	48 83 c0 40 	add	rax, 64
 1001c93:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1001c98:	48 c7 44 24 10 18 00 00 00 	mov	qword ptr [rsp + 16], 24
 1001ca1:	e8 4a 04 00 00 	call	1098 <_runtime.memequal>
 1001ca6:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1001cab:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1001caf:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1001cb4:	48 83 c4 28 	add	rsp, 40
 1001cb8:	c3 	ret
 1001cb9:	e8 12 ef 04 00 	call	323346 <_runtime.morestack_noctxt>
 1001cbe:	eb a0 	jmp	-96 <_type..eq.internal/cpu.arm64>

_type..eq.internal/cpu.option:
 1001cc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1001cc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1001ccd:	0f 86 88 00 00 00 	jbe	136 <_type..eq.internal/cpu.option+0x9b>
 1001cd3:	48 83 ec 28 	sub	rsp, 40
 1001cd7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1001cdc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1001ce1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1001ce6:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1001cea:	48 8b 10 	mov	rdx, qword ptr [rax]
 1001ced:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1001cf2:	48 8b 33 	mov	rsi, qword ptr [rbx]
 1001cf5:	48 39 4b 08 	cmp	qword ptr [rbx + 8], rcx
 1001cf9:	74 3c 	je	60 <_type..eq.internal/cpu.option+0x77>
 1001cfb:	31 c9 	xor	ecx, ecx
 1001cfd:	84 c9 	test	cl, cl
 1001cff:	75 10 	jne	16 <_type..eq.internal/cpu.option+0x51>
 1001d01:	31 c0 	xor	eax, eax
 1001d03:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1001d07:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1001d0c:	48 83 c4 28 	add	rsp, 40
 1001d10:	c3 	ret
 1001d11:	48 83 c0 10 	add	rax, 16
 1001d15:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001d19:	48 8d 43 10 	lea	rax, [rbx + 16]
 1001d1d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1001d22:	48 c7 44 24 10 0b 00 00 00 	mov	qword ptr [rsp + 16], 11
 1001d2b:	e8 c0 03 00 00 	call	960 <_runtime.memequal>
 1001d30:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1001d35:	eb cc 	jmp	-52 <_type..eq.internal/cpu.option+0x43>
 1001d37:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1001d3b:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1001d40:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1001d45:	e8 a6 03 00 00 	call	934 <_runtime.memequal>
 1001d4a:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1001d4f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1001d54:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1001d59:	eb a2 	jmp	-94 <_type..eq.internal/cpu.option+0x3d>
 1001d5b:	e8 70 ee 04 00 	call	323184 <_runtime.morestack_noctxt>
 1001d60:	e9 5b ff ff ff 	jmp	-165 <_type..eq.internal/cpu.option>
 1001d65:	cc 	int3
 1001d66:	cc 	int3
 1001d67:	cc 	int3
 1001d68:	cc 	int3
 1001d69:	cc 	int3
 1001d6a:	cc 	int3
 1001d6b:	cc 	int3
 1001d6c:	cc 	int3
 1001d6d:	cc 	int3
 1001d6e:	cc 	int3
 1001d6f:	cc 	int3

_type..eq.internal/cpu.x86:
 1001d70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1001d79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1001d7d:	76 41 	jbe	65 <_type..eq.internal/cpu.x86+0x50>
 1001d7f:	48 83 ec 20 	sub	rsp, 32
 1001d83:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1001d88:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1001d8d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1001d92:	48 83 c0 40 	add	rax, 64
 1001d96:	48 89 04 24 	mov	qword ptr [rsp], rax
 1001d9a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1001d9f:	48 83 c0 40 	add	rax, 64
 1001da3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1001da8:	e8 73 07 00 00 	call	1907 <_runtime.memequal128>
 1001dad:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 1001db2:	88 44 24 38 	mov	byte ptr [rsp + 56], al
 1001db6:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1001dbb:	48 83 c4 20 	add	rsp, 32
 1001dbf:	c3 	ret
 1001dc0:	e8 0b ee 04 00 	call	323083 <_runtime.morestack_noctxt>
 1001dc5:	eb a9 	jmp	-87 <_type..eq.internal/cpu.x86>
 1001dc7:	cc 	int3
 1001dc8:	cc 	int3
 1001dc9:	cc 	int3
 1001dca:	cc 	int3
 1001dcb:	cc 	int3
 1001dcc:	cc 	int3
 1001dcd:	cc 	int3
 1001dce:	cc 	int3
 1001dcf:	cc 	int3

_type..eq.[15]internal/cpu.option:
 1001dd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1001dd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1001ddd:	76 6e 	jbe	110 <_type..eq.[15]internal/cpu.option+0x7d>
 1001ddf:	48 83 ec 28 	sub	rsp, 40
 1001de3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1001de8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1001ded:	31 c0 	xor	eax, eax
 1001def:	eb 09 	jmp	9 <_type..eq.[15]internal/cpu.option+0x2a>
 1001df1:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1001df6:	48 8d 41 01 	lea	rax, [rcx + 1]
 1001dfa:	48 83 f8 0f 	cmp	rax, 15
 1001dfe:	7d 3e 	jge	62 <_type..eq.[15]internal/cpu.option+0x6e>
 1001e00:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1001e05:	48 c1 e0 05 	shl	rax, 5
 1001e09:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1001e0e:	48 8d 1c 10 	lea	rbx, [rax + rdx]
 1001e12:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1001e16:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1001e1b:	48 01 d8 	add	rax, rbx
 1001e1e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1001e23:	e8 98 fe ff ff 	call	-360 <_type..eq.internal/cpu.option>
 1001e28:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 1001e2d:	75 c2 	jne	-62 <_type..eq.[15]internal/cpu.option+0x21>
 1001e2f:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 1001e34:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1001e39:	48 83 c4 28 	add	rsp, 40
 1001e3d:	c3 	ret
 1001e3e:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 1001e43:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1001e48:	48 83 c4 28 	add	rsp, 40
 1001e4c:	c3 	ret
 1001e4d:	e8 7e ed 04 00 	call	322942 <_runtime.morestack_noctxt>
 1001e52:	e9 79 ff ff ff 	jmp	-135 <_type..eq.[15]internal/cpu.option>
 1001e57:	cc 	int3
 1001e58:	cc 	int3
 1001e59:	cc 	int3
 1001e5a:	cc 	int3
 1001e5b:	cc 	int3
 1001e5c:	cc 	int3
 1001e5d:	cc 	int3
 1001e5e:	cc 	int3
 1001e5f:	cc 	int3

_internal/bytealg.init.0:
 1001e60:	80 3d 1c 5e 0f 00 00 	cmp	byte ptr [rip + 1007132], 0
 1001e67:	74 0c 	je	12 <_internal/bytealg.init.0+0x15>
 1001e69:	48 c7 05 5c 59 0f 00 3f 00 00 00 	mov	qword ptr [rip + 1005916], 63
 1001e74:	c3 	ret
 1001e75:	48 c7 05 50 59 0f 00 1f 00 00 00 	mov	qword ptr [rip + 1005904], 31
 1001e80:	eb f2 	jmp	-14 <_internal/bytealg.init.0+0x14>
 1001e82:	cc 	int3
 1001e83:	cc 	int3
 1001e84:	cc 	int3
 1001e85:	cc 	int3
 1001e86:	cc 	int3
 1001e87:	cc 	int3
 1001e88:	cc 	int3
 1001e89:	cc 	int3
 1001e8a:	cc 	int3
 1001e8b:	cc 	int3
 1001e8c:	cc 	int3
 1001e8d:	cc 	int3
 1001e8e:	cc 	int3
 1001e8f:	cc 	int3

_runtime.cmpstring:
 1001e90:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 1001e95:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 1001e9a:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 1001e9f:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1001ea4:	4c 8d 4c 24 28 	lea	r9, [rsp + 40]
 1001ea9:	e9 02 00 00 00 	jmp	2 <_cmpbody>
 1001eae:	cc 	int3
 1001eaf:	cc 	int3

_cmpbody:
 1001eb0:	48 39 fe 	cmp	rsi, rdi
 1001eb3:	0f 84 2b 01 00 00 	je	299 <_cmpbody+0x134>
 1001eb9:	48 39 d3 	cmp	rbx, rdx
 1001ebc:	49 89 d0 	mov	r8, rdx
 1001ebf:	4c 0f 4c c3 	cmovl	r8, rbx
 1001ec3:	49 83 f8 08 	cmp	r8, 8
 1001ec7:	0f 82 bc 00 00 00 	jb	188 <_cmpbody+0xd9>
 1001ecd:	49 83 f8 3f 	cmp	r8, 63
 1001ed1:	76 12 	jbe	18 <_cmpbody+0x35>
 1001ed3:	80 3d a9 5d 0f 00 01 	cmp	byte ptr [rip + 1007017], 1
 1001eda:	0f 84 ad 01 00 00 	je	429 <_cmpbody+0x1dd>
 1001ee0:	e9 17 01 00 00 	jmp	279 <_cmpbody+0x14c>
 1001ee5:	49 83 f8 10 	cmp	r8, 16
 1001ee9:	76 5e 	jbe	94 <_cmpbody+0x99>
 1001eeb:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1001eef:	f3 0f 6f 0f 	movdqu	xmm1, xmmword ptr [rdi]
 1001ef3:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1001ef7:	66 0f d7 c1 	pmovmskb	eax, xmm1
 1001efb:	48 35 ff ff 00 00 	xor	rax, 65535
 1001f01:	75 2a 	jne	42 <_cmpbody+0x7d>
 1001f03:	48 83 c6 10 	add	rsi, 16
 1001f07:	48 83 c7 10 	add	rdi, 16
 1001f0b:	49 83 e8 10 	sub	r8, 16
 1001f0f:	eb d4 	jmp	-44 <_cmpbody+0x35>
 1001f11:	48 83 c6 30 	add	rsi, 48
 1001f15:	48 83 c7 30 	add	rdi, 48
 1001f19:	eb 12 	jmp	18 <_cmpbody+0x7d>
 1001f1b:	48 83 c6 20 	add	rsi, 32
 1001f1f:	48 83 c7 20 	add	rdi, 32
 1001f23:	eb 08 	jmp	8 <_cmpbody+0x7d>
 1001f25:	48 83 c6 10 	add	rsi, 16
 1001f29:	48 83 c7 10 	add	rdi, 16
 1001f2d:	48 0f bc d8 	bsf	rbx, rax
 1001f31:	48 31 c0 	xor	rax, rax
 1001f34:	8a 0c 1e 	mov	cl, byte ptr [rsi + rbx]
 1001f37:	3a 0c 1f 	cmp	cl, byte ptr [rdi + rbx]
 1001f3a:	0f 97 c0 	seta	al
 1001f3d:	48 8d 04 45 ff ff ff ff 	lea	rax, [2*rax - 1]
 1001f45:	49 89 01 	mov	qword ptr [r9], rax
 1001f48:	c3 	ret
 1001f49:	49 83 f8 08 	cmp	r8, 8
 1001f4d:	76 0b 	jbe	11 <_cmpbody+0xaa>
 1001f4f:	48 8b 06 	mov	rax, qword ptr [rsi]
 1001f52:	48 8b 0f 	mov	rcx, qword ptr [rdi]
 1001f55:	48 39 c8 	cmp	rax, rcx
 1001f58:	75 0f 	jne	15 <_cmpbody+0xb9>
 1001f5a:	4a 8b 44 06 f8 	mov	rax, qword ptr [rsi + r8 - 8]
 1001f5f:	4a 8b 4c 07 f8 	mov	rcx, qword ptr [rdi + r8 - 8]
 1001f64:	48 39 c8 	cmp	rax, rcx
 1001f67:	74 7b 	je	123 <_cmpbody+0x134>
 1001f69:	48 0f c8 	bswap	rax
 1001f6c:	48 0f c9 	bswap	rcx
 1001f6f:	48 31 c1 	xor	rcx, rax
 1001f72:	48 0f bd c9 	bsr	rcx, rcx
 1001f76:	48 d3 e8 	shr	rax, cl
 1001f79:	48 83 e0 01 	and	rax, 1
 1001f7d:	48 8d 04 45 ff ff ff ff 	lea	rax, [2*rax - 1]
 1001f85:	49 89 01 	mov	qword ptr [r9], rax
 1001f88:	c3 	ret
 1001f89:	4a 8d 0c c5 00 00 00 00 	lea	rcx, [8*r8]
 1001f91:	48 f7 d9 	neg	rcx
 1001f94:	74 4e 	je	78 <_cmpbody+0x134>
 1001f96:	40 80 fe f8 	cmp	sil, -8
 1001f9a:	77 05 	ja	5 <_cmpbody+0xf1>
 1001f9c:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1001f9f:	eb 08 	jmp	8 <_cmpbody+0xf9>
 1001fa1:	4a 8b 74 06 f8 	mov	rsi, qword ptr [rsi + r8 - 8]
 1001fa6:	48 d3 ee 	shr	rsi, cl
 1001fa9:	48 d3 e6 	shl	rsi, cl
 1001fac:	40 80 ff f8 	cmp	dil, -8
 1001fb0:	77 05 	ja	5 <_cmpbody+0x107>
 1001fb2:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1001fb5:	eb 08 	jmp	8 <_cmpbody+0x10f>
 1001fb7:	4a 8b 7c 07 f8 	mov	rdi, qword ptr [rdi + r8 - 8]
 1001fbc:	48 d3 ef 	shr	rdi, cl
 1001fbf:	48 d3 e7 	shl	rdi, cl
 1001fc2:	48 0f ce 	bswap	rsi
 1001fc5:	48 0f cf 	bswap	rdi
 1001fc8:	48 31 f7 	xor	rdi, rsi
 1001fcb:	74 17 	je	23 <_cmpbody+0x134>
 1001fcd:	48 0f bd cf 	bsr	rcx, rdi
 1001fd1:	48 d3 ee 	shr	rsi, cl
 1001fd4:	48 83 e6 01 	and	rsi, 1
 1001fd8:	48 8d 04 75 ff ff ff ff 	lea	rax, [2*rsi - 1]
 1001fe0:	49 89 01 	mov	qword ptr [r9], rax
 1001fe3:	c3 	ret
 1001fe4:	48 31 c0 	xor	rax, rax
 1001fe7:	48 31 c9 	xor	rcx, rcx
 1001fea:	48 39 d3 	cmp	rbx, rdx
 1001fed:	0f 9f c0 	setg	al
 1001ff0:	0f 94 c1 	sete	cl
 1001ff3:	48 8d 44 41 ff 	lea	rax, [rcx + 2*rax - 1]
 1001ff8:	49 89 01 	mov	qword ptr [r9], rax
 1001ffb:	c3 	ret
 1001ffc:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1002000:	f3 0f 6f 0f 	movdqu	xmm1, xmmword ptr [rdi]
 1002004:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1002008:	66 0f d7 c1 	pmovmskb	eax, xmm1
 100200c:	48 35 ff ff 00 00 	xor	rax, 65535
 1002012:	0f 85 15 ff ff ff 	jne	-235 <_cmpbody+0x7d>
 1002018:	f3 0f 6f 46 10 	movdqu	xmm0, xmmword ptr [rsi + 16]
 100201d:	f3 0f 6f 4f 10 	movdqu	xmm1, xmmword ptr [rdi + 16]
 1002022:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1002026:	66 0f d7 c1 	pmovmskb	eax, xmm1
 100202a:	48 35 ff ff 00 00 	xor	rax, 65535
 1002030:	0f 85 ef fe ff ff 	jne	-273 <_cmpbody+0x75>
 1002036:	f3 0f 6f 46 20 	movdqu	xmm0, xmmword ptr [rsi + 32]
 100203b:	f3 0f 6f 4f 20 	movdqu	xmm1, xmmword ptr [rdi + 32]
 1002040:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1002044:	66 0f d7 c1 	pmovmskb	eax, xmm1
 1002048:	48 35 ff ff 00 00 	xor	rax, 65535
 100204e:	0f 85 c7 fe ff ff 	jne	-313 <_cmpbody+0x6b>
 1002054:	f3 0f 6f 46 30 	movdqu	xmm0, xmmword ptr [rsi + 48]
 1002059:	f3 0f 6f 4f 30 	movdqu	xmm1, xmmword ptr [rdi + 48]
 100205e:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1002062:	66 0f d7 c1 	pmovmskb	eax, xmm1
 1002066:	48 35 ff ff 00 00 	xor	rax, 65535
 100206c:	0f 85 9f fe ff ff 	jne	-353 <_cmpbody+0x61>
 1002072:	48 83 c6 40 	add	rsi, 64
 1002076:	48 83 c7 40 	add	rdi, 64
 100207a:	49 83 e8 40 	sub	r8, 64
 100207e:	49 83 f8 40 	cmp	r8, 64
 1002082:	0f 86 5d fe ff ff 	jbe	-419 <_cmpbody+0x35>
 1002088:	e9 6f ff ff ff 	jmp	-145 <_cmpbody+0x14c>
 100208d:	c5 fe 6f 16 	vmovdqu	ymm2, ymmword ptr [rsi]
 1002091:	c5 fe 6f 1f 	vmovdqu	ymm3, ymmword ptr [rdi]
 1002095:	c5 fe 6f 66 20 	vmovdqu	ymm4, ymmword ptr [rsi + 32]
 100209a:	c5 fe 6f 6f 20 	vmovdqu	ymm5, ymmword ptr [rdi + 32]
 100209f:	c5 e5 74 c2 	vpcmpeqb	ymm0, ymm3, ymm2
 10020a3:	c5 fd d7 c0 	vpmovmskb	eax, ymm0
 10020a7:	35 ff ff ff ff 	xor	eax, 4294967295
 10020ac:	75 23 	jne	35 <_cmpbody+0x221>
 10020ae:	c5 d5 74 f4 	vpcmpeqb	ymm6, ymm5, ymm4
 10020b2:	c5 fd d7 c6 	vpmovmskb	eax, ymm6
 10020b6:	35 ff ff ff ff 	xor	eax, 4294967295
 10020bb:	75 1c 	jne	28 <_cmpbody+0x229>
 10020bd:	48 83 c6 40 	add	rsi, 64
 10020c1:	48 83 c7 40 	add	rdi, 64
 10020c5:	49 83 e8 40 	sub	r8, 64
 10020c9:	49 83 f8 40 	cmp	r8, 64
 10020cd:	72 12 	jb	18 <_cmpbody+0x231>
 10020cf:	eb bc 	jmp	-68 <_cmpbody+0x1dd>
 10020d1:	c5 f8 77 	vzeroupper
 10020d4:	e9 54 fe ff ff 	jmp	-428 <_cmpbody+0x7d>
 10020d9:	c5 f8 77 	vzeroupper
 10020dc:	e9 3a fe ff ff 	jmp	-454 <_cmpbody+0x6b>
 10020e1:	c5 f8 77 	vzeroupper
 10020e4:	e9 fc fd ff ff 	jmp	-516 <_cmpbody+0x35>
 10020e9:	cc 	int3
 10020ea:	cc 	int3
 10020eb:	cc 	int3
 10020ec:	cc 	int3
 10020ed:	cc 	int3
 10020ee:	cc 	int3
 10020ef:	cc 	int3

_runtime.memequal:
 10020f0:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 10020f5:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 10020fa:	48 39 fe 	cmp	rsi, rdi
 10020fd:	74 0f 	je	15 <_runtime.memequal+0x1e>
 10020ff:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 1002104:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1002109:	e9 42 00 00 00 	jmp	66 <_memeqbody>
 100210e:	c6 44 24 20 01 	mov	byte ptr [rsp + 32], 1
 1002113:	c3 	ret
 1002114:	cc 	int3
 1002115:	cc 	int3
 1002116:	cc 	int3
 1002117:	cc 	int3
 1002118:	cc 	int3
 1002119:	cc 	int3
 100211a:	cc 	int3
 100211b:	cc 	int3
 100211c:	cc 	int3
 100211d:	cc 	int3
 100211e:	cc 	int3
 100211f:	cc 	int3

_runtime.memequal_varlen:
 1002120:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 1002125:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 100212a:	48 39 fe 	cmp	rsi, rdi
 100212d:	74 0e 	je	14 <_runtime.memequal_varlen+0x1d>
 100212f:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 1002133:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 1002138:	e9 13 00 00 00 	jmp	19 <_memeqbody>
 100213d:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 1002142:	c3 	ret
 1002143:	cc 	int3
 1002144:	cc 	int3
 1002145:	cc 	int3
 1002146:	cc 	int3
 1002147:	cc 	int3
 1002148:	cc 	int3
 1002149:	cc 	int3
 100214a:	cc 	int3
 100214b:	cc 	int3
 100214c:	cc 	int3
 100214d:	cc 	int3
 100214e:	cc 	int3
 100214f:	cc 	int3

_memeqbody:
 1002150:	48 83 fb 08 	cmp	rbx, 8
 1002154:	0f 82 f3 00 00 00 	jb	243 <_memeqbody+0xfd>
 100215a:	48 83 fb 40 	cmp	rbx, 64
 100215e:	0f 82 b7 00 00 00 	jb	183 <_memeqbody+0xcb>
 1002164:	80 3d 18 5b 0f 00 01 	cmp	byte ptr [rip + 1006360], 1
 100216b:	74 68 	je	104 <_memeqbody+0x85>
 100216d:	48 83 fb 40 	cmp	rbx, 64
 1002171:	0f 82 a4 00 00 00 	jb	164 <_memeqbody+0xcb>
 1002177:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 100217b:	f3 0f 6f 0f 	movdqu	xmm1, xmmword ptr [rdi]
 100217f:	f3 0f 6f 56 10 	movdqu	xmm2, xmmword ptr [rsi + 16]
 1002184:	f3 0f 6f 5f 10 	movdqu	xmm3, xmmword ptr [rdi + 16]
 1002189:	f3 0f 6f 66 20 	movdqu	xmm4, xmmword ptr [rsi + 32]
 100218e:	f3 0f 6f 6f 20 	movdqu	xmm5, xmmword ptr [rdi + 32]
 1002193:	f3 0f 6f 76 30 	movdqu	xmm6, xmmword ptr [rsi + 48]
 1002198:	f3 0f 6f 7f 30 	movdqu	xmm7, xmmword ptr [rdi + 48]
 100219d:	66 0f 74 c1 	pcmpeqb	xmm0, xmm1
 10021a1:	66 0f 74 d3 	pcmpeqb	xmm2, xmm3
 10021a5:	66 0f 74 e5 	pcmpeqb	xmm4, xmm5
 10021a9:	66 0f 74 f7 	pcmpeqb	xmm6, xmm7
 10021ad:	66 0f db c2 	pand	xmm0, xmm2
 10021b1:	66 0f db e6 	pand	xmm4, xmm6
 10021b5:	66 0f db c4 	pand	xmm0, xmm4
 10021b9:	66 0f d7 d0 	pmovmskb	edx, xmm0
 10021bd:	48 83 c6 40 	add	rsi, 64
 10021c1:	48 83 c7 40 	add	rdi, 64
 10021c5:	48 83 eb 40 	sub	rbx, 64
 10021c9:	81 fa ff ff 00 00 	cmp	edx, 65535
 10021cf:	74 9c 	je	-100 <_memeqbody+0x1d>
 10021d1:	c6 00 00 	mov	byte ptr [rax], 0
 10021d4:	c3 	ret
 10021d5:	48 83 fb 40 	cmp	rbx, 64
 10021d9:	72 3d 	jb	61 <_memeqbody+0xc8>
 10021db:	c5 fe 6f 06 	vmovdqu	ymm0, ymmword ptr [rsi]
 10021df:	c5 fe 6f 0f 	vmovdqu	ymm1, ymmword ptr [rdi]
 10021e3:	c5 fe 6f 56 20 	vmovdqu	ymm2, ymmword ptr [rsi + 32]
 10021e8:	c5 fe 6f 5f 20 	vmovdqu	ymm3, ymmword ptr [rdi + 32]
 10021ed:	c5 fd 74 e1 	vpcmpeqb	ymm4, ymm0, ymm1
 10021f1:	c5 e5 74 ea 	vpcmpeqb	ymm5, ymm3, ymm2
 10021f5:	c5 d5 db f4 	vpand	ymm6, ymm5, ymm4
 10021f9:	c5 fd d7 d6 	vpmovmskb	edx, ymm6
 10021fd:	48 83 c6 40 	add	rsi, 64
 1002201:	48 83 c7 40 	add	rdi, 64
 1002205:	48 83 eb 40 	sub	rbx, 64
 1002209:	81 fa ff ff ff ff 	cmp	edx, 4294967295
 100220f:	74 c4 	je	-60 <_memeqbody+0x85>
 1002211:	c5 f8 77 	vzeroupper
 1002214:	c6 00 00 	mov	byte ptr [rax], 0
 1002217:	c3 	ret
 1002218:	c5 f8 77 	vzeroupper
 100221b:	48 83 fb 08 	cmp	rbx, 8
 100221f:	76 1b 	jbe	27 <_memeqbody+0xec>
 1002221:	48 8b 0e 	mov	rcx, qword ptr [rsi]
 1002224:	48 8b 17 	mov	rdx, qword ptr [rdi]
 1002227:	48 83 c6 08 	add	rsi, 8
 100222b:	48 83 c7 08 	add	rdi, 8
 100222f:	48 83 eb 08 	sub	rbx, 8
 1002233:	48 39 d1 	cmp	rcx, rdx
 1002236:	74 e3 	je	-29 <_memeqbody+0xcb>
 1002238:	c6 00 00 	mov	byte ptr [rax], 0
 100223b:	c3 	ret
 100223c:	48 8b 4c 1e f8 	mov	rcx, qword ptr [rsi + rbx - 8]
 1002241:	48 8b 54 1f f8 	mov	rdx, qword ptr [rdi + rbx - 8]
 1002246:	48 39 d1 	cmp	rcx, rdx
 1002249:	0f 94 00 	sete	byte ptr [rax]
 100224c:	c3 	ret
 100224d:	48 83 fb 00 	cmp	rbx, 0
 1002251:	74 37 	je	55 <_memeqbody+0x13a>
 1002253:	48 8d 0c dd 00 00 00 00 	lea	rcx, [8*rbx]
 100225b:	48 f7 d9 	neg	rcx
 100225e:	40 80 fe f8 	cmp	sil, -8
 1002262:	77 05 	ja	5 <_memeqbody+0x119>
 1002264:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1002267:	eb 08 	jmp	8 <_memeqbody+0x121>
 1002269:	48 8b 74 1e f8 	mov	rsi, qword ptr [rsi + rbx - 8]
 100226e:	48 d3 ee 	shr	rsi, cl
 1002271:	40 80 ff f8 	cmp	dil, -8
 1002275:	77 05 	ja	5 <_memeqbody+0x12c>
 1002277:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 100227a:	eb 08 	jmp	8 <_memeqbody+0x134>
 100227c:	48 8b 7c 1f f8 	mov	rdi, qword ptr [rdi + rbx - 8]
 1002281:	48 d3 ef 	shr	rdi, cl
 1002284:	48 29 f7 	sub	rdi, rsi
 1002287:	48 d3 e7 	shl	rdi, cl
 100228a:	0f 94 00 	sete	byte ptr [rax]
 100228d:	c3 	ret
 100228e:	cc 	int3
 100228f:	cc 	int3

_internal/bytealg.IndexByteString:
 1002290:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 1002295:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 100229a:	8a 44 24 18 	mov	al, byte ptr [rsp + 24]
 100229e:	4c 8d 44 24 20 	lea	r8, [rsp + 32]
 10022a3:	e9 08 00 00 00 	jmp	8 <_indexbytebody>
 10022a8:	cc 	int3
 10022a9:	cc 	int3
 10022aa:	cc 	int3
 10022ab:	cc 	int3
 10022ac:	cc 	int3
 10022ad:	cc 	int3
 10022ae:	cc 	int3
 10022af:	cc 	int3

_indexbytebody:
 10022b0:	66 48 0f 6e c0 	movq	xmm0, rax
 10022b5:	66 0f 60 c0 	punpcklbw	xmm0, xmm0
 10022b9:	66 0f 60 c0 	punpcklbw	xmm0, xmm0
 10022bd:	66 0f 70 c0 00 	pshufd	xmm0, xmm0, 0
 10022c2:	48 83 fb 10 	cmp	rbx, 16
 10022c6:	7c 54 	jl	84 <_indexbytebody+0x6c>
 10022c8:	48 89 f7 	mov	rdi, rsi
 10022cb:	48 83 fb 20 	cmp	rbx, 32
 10022cf:	0f 87 8d 00 00 00 	ja	141 <_indexbytebody+0xb2>
 10022d5:	48 8d 44 1e f0 	lea	rax, [rsi + rbx - 16]
 10022da:	eb 15 	jmp	21 <_indexbytebody+0x41>
 10022dc:	f3 0f 6f 0f 	movdqu	xmm1, xmmword ptr [rdi]
 10022e0:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 10022e4:	66 0f d7 d1 	pmovmskb	edx, xmm1
 10022e8:	0f bc d2 	bsf	edx, edx
 10022eb:	75 25 	jne	37 <_indexbytebody+0x62>
 10022ed:	48 83 c7 10 	add	rdi, 16
 10022f1:	48 39 c7 	cmp	rdi, rax
 10022f4:	72 e6 	jb	-26 <_indexbytebody+0x2c>
 10022f6:	48 89 c7 	mov	rdi, rax
 10022f9:	f3 0f 6f 08 	movdqu	xmm1, xmmword ptr [rax]
 10022fd:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1002301:	66 0f d7 d1 	pmovmskb	edx, xmm1
 1002305:	0f bc d2 	bsf	edx, edx
 1002308:	75 08 	jne	8 <_indexbytebody+0x62>
 100230a:	49 c7 00 ff ff ff ff 	mov	qword ptr [r8], -1
 1002311:	c3 	ret
 1002312:	48 29 f7 	sub	rdi, rsi
 1002315:	48 01 d7 	add	rdi, rdx
 1002318:	49 89 38 	mov	qword ptr [r8], rdi
 100231b:	c3 	ret
 100231c:	48 85 db 	test	rbx, rbx
 100231f:	74 e9 	je	-23 <_indexbytebody+0x5a>
 1002321:	48 8d 46 10 	lea	rax, [rsi + 16]
 1002325:	66 a9 f0 0f 	test	ax, 4080
 1002329:	74 19 	je	25 <_indexbytebody+0x94>
 100232b:	f3 0f 6f 0e 	movdqu	xmm1, xmmword ptr [rsi]
 100232f:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 1002333:	66 0f d7 d1 	pmovmskb	edx, xmm1
 1002337:	0f bc d2 	bsf	edx, edx
 100233a:	74 ce 	je	-50 <_indexbytebody+0x5a>
 100233c:	39 da 	cmp	edx, ebx
 100233e:	73 ca 	jae	-54 <_indexbytebody+0x5a>
 1002340:	49 89 10 	mov	qword ptr [r8], rdx
 1002343:	c3 	ret
 1002344:	f3 0f 6f 4c 1e f0 	movdqu	xmm1, xmmword ptr [rsi + rbx - 16]
 100234a:	66 0f 74 c8 	pcmpeqb	xmm1, xmm0
 100234e:	66 0f d7 d1 	pmovmskb	edx, xmm1
 1002352:	89 d9 	mov	ecx, ebx
 1002354:	d3 e2 	shl	edx, cl
 1002356:	c1 ea 10 	shr	edx, 16
 1002359:	0f bc d2 	bsf	edx, edx
 100235c:	74 ac 	je	-84 <_indexbytebody+0x5a>
 100235e:	49 89 10 	mov	qword ptr [r8], rdx
 1002361:	c3 	ret
 1002362:	80 3d 1a 59 0f 00 01 	cmp	byte ptr [rip + 1005850], 1
 1002369:	0f 85 66 ff ff ff 	jne	-154 <_indexbytebody+0x25>
 100236f:	66 48 0f 6e c0 	movq	xmm0, rax
 1002374:	4c 8d 5c 1e e0 	lea	r11, [rsi + rbx - 32]
 1002379:	c4 e2 7d 78 c8 	vpbroadcastb	ymm1, xmm0
 100237e:	c5 fe 6f 17 	vmovdqu	ymm2, ymmword ptr [rdi]
 1002382:	c5 ed 74 d9 	vpcmpeqb	ymm3, ymm2, ymm1
 1002386:	c4 e2 7d 17 db 	vptest	ymm3, ymm3
 100238b:	75 26 	jne	38 <_indexbytebody+0x103>
 100238d:	48 83 c7 20 	add	rdi, 32
 1002391:	4c 39 df 	cmp	rdi, r11
 1002394:	7c e8 	jl	-24 <_indexbytebody+0xce>
 1002396:	4c 89 df 	mov	rdi, r11
 1002399:	c5 fe 6f 17 	vmovdqu	ymm2, ymmword ptr [rdi]
 100239d:	c5 ed 74 d9 	vpcmpeqb	ymm3, ymm2, ymm1
 10023a1:	c4 e2 7d 17 db 	vptest	ymm3, ymm3
 10023a6:	75 0b 	jne	11 <_indexbytebody+0x103>
 10023a8:	c5 f8 77 	vzeroupper
 10023ab:	49 c7 00 ff ff ff ff 	mov	qword ptr [r8], -1
 10023b2:	c3 	ret
 10023b3:	c5 fd d7 d3 	vpmovmskb	edx, ymm3
 10023b7:	0f bc d2 	bsf	edx, edx
 10023ba:	48 29 f7 	sub	rdi, rsi
 10023bd:	48 01 fa 	add	rdx, rdi
 10023c0:	49 89 10 	mov	qword ptr [r8], rdx
 10023c3:	c5 f8 77 	vzeroupper
 10023c6:	c3 	ret
 10023c7:	cc 	int3
 10023c8:	cc 	int3
 10023c9:	cc 	int3
 10023ca:	cc 	int3
 10023cb:	cc 	int3
 10023cc:	cc 	int3
 10023cd:	cc 	int3
 10023ce:	cc 	int3
 10023cf:	cc 	int3

_runtime.memhash128:
 10023d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10023d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10023dd:	76 43 	jbe	67 <_runtime.memhash128+0x52>
 10023df:	48 83 ec 28 	sub	rsp, 40
 10023e3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10023e8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10023ed:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10023f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10023f6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10023fb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1002400:	48 c7 44 24 10 10 00 00 00 	mov	qword ptr [rsp + 16], 16
 1002409:	e8 52 ff 04 00 	call	327506 <_runtime.memhash>
 100240e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1002413:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1002418:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 100241d:	48 83 c4 28 	add	rsp, 40
 1002421:	c3 	ret
 1002422:	e8 a9 e7 04 00 	call	321449 <_runtime.morestack_noctxt>
 1002427:	eb a7 	jmp	-89 <_runtime.memhash128>
 1002429:	cc 	int3
 100242a:	cc 	int3
 100242b:	cc 	int3
 100242c:	cc 	int3
 100242d:	cc 	int3
 100242e:	cc 	int3
 100242f:	cc 	int3

_runtime.strhashFallback:
 1002430:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1002439:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100243d:	76 46 	jbe	70 <_runtime.strhashFallback+0x55>
 100243f:	48 83 ec 28 	sub	rsp, 40
 1002443:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1002448:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 100244d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1002452:	48 8b 08 	mov	rcx, qword ptr [rax]
 1002455:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1002459:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100245d:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1002462:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1002467:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100246c:	e8 8f 49 00 00 	call	18831 <_runtime.memhashFallback>
 1002471:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1002476:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100247b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002480:	48 83 c4 28 	add	rsp, 40
 1002484:	c3 	ret
 1002485:	e8 46 e7 04 00 	call	321350 <_runtime.morestack_noctxt>
 100248a:	eb a4 	jmp	-92 <_runtime.strhashFallback>
 100248c:	cc 	int3
 100248d:	cc 	int3
 100248e:	cc 	int3
 100248f:	cc 	int3

_runtime.memequal0:
 1002490:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 1002495:	c3 	ret
 1002496:	cc 	int3
 1002497:	cc 	int3
 1002498:	cc 	int3
 1002499:	cc 	int3
 100249a:	cc 	int3
 100249b:	cc 	int3
 100249c:	cc 	int3
 100249d:	cc 	int3
 100249e:	cc 	int3
 100249f:	cc 	int3

_runtime.memequal8:
 10024a0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10024a5:	0f b6 00 	movzx	eax, byte ptr [rax]
 10024a8:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10024ad:	38 01 	cmp	byte ptr [rcx], al
 10024af:	0f 94 44 24 18 	sete	byte ptr [rsp + 24]
 10024b4:	c3 	ret
 10024b5:	cc 	int3
 10024b6:	cc 	int3
 10024b7:	cc 	int3
 10024b8:	cc 	int3
 10024b9:	cc 	int3
 10024ba:	cc 	int3
 10024bb:	cc 	int3
 10024bc:	cc 	int3
 10024bd:	cc 	int3
 10024be:	cc 	int3
 10024bf:	cc 	int3

_runtime.memequal16:
 10024c0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10024c5:	0f b7 00 	movzx	eax, word ptr [rax]
 10024c8:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10024cd:	66 39 01 	cmp	word ptr [rcx], ax
 10024d0:	0f 94 44 24 18 	sete	byte ptr [rsp + 24]
 10024d5:	c3 	ret
 10024d6:	cc 	int3
 10024d7:	cc 	int3
 10024d8:	cc 	int3
 10024d9:	cc 	int3
 10024da:	cc 	int3
 10024db:	cc 	int3
 10024dc:	cc 	int3
 10024dd:	cc 	int3
 10024de:	cc 	int3
 10024df:	cc 	int3

_runtime.memequal32:
 10024e0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10024e5:	8b 00 	mov	eax, dword ptr [rax]
 10024e7:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10024ec:	39 01 	cmp	dword ptr [rcx], eax
 10024ee:	0f 94 44 24 18 	sete	byte ptr [rsp + 24]
 10024f3:	c3 	ret
 10024f4:	cc 	int3
 10024f5:	cc 	int3
 10024f6:	cc 	int3
 10024f7:	cc 	int3
 10024f8:	cc 	int3
 10024f9:	cc 	int3
 10024fa:	cc 	int3
 10024fb:	cc 	int3
 10024fc:	cc 	int3
 10024fd:	cc 	int3
 10024fe:	cc 	int3
 10024ff:	cc 	int3

_runtime.memequal64:
 1002500:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1002505:	48 8b 00 	mov	rax, qword ptr [rax]
 1002508:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100250d:	48 39 01 	cmp	qword ptr [rcx], rax
 1002510:	0f 94 44 24 18 	sete	byte ptr [rsp + 24]
 1002515:	c3 	ret
 1002516:	cc 	int3
 1002517:	cc 	int3
 1002518:	cc 	int3
 1002519:	cc 	int3
 100251a:	cc 	int3
 100251b:	cc 	int3
 100251c:	cc 	int3
 100251d:	cc 	int3
 100251e:	cc 	int3
 100251f:	cc 	int3

_runtime.memequal128:
 1002520:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1002525:	48 8b 08 	mov	rcx, qword ptr [rax]
 1002528:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 100252d:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1002530:	75 10 	jne	16 <_runtime.memequal128+0x22>
 1002532:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 1002536:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 100253a:	0f 94 c0 	sete	al
 100253d:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1002541:	c3 	ret
 1002542:	31 c0 	xor	eax, eax
 1002544:	eb f7 	jmp	-9 <_runtime.memequal128+0x1d>
 1002546:	cc 	int3
 1002547:	cc 	int3
 1002548:	cc 	int3
 1002549:	cc 	int3
 100254a:	cc 	int3
 100254b:	cc 	int3
 100254c:	cc 	int3
 100254d:	cc 	int3
 100254e:	cc 	int3
 100254f:	cc 	int3

_runtime.f32equal:
 1002550:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1002555:	f3 0f 10 00 	movss	xmm0, dword ptr [rax]
 1002559:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100255e:	f3 0f 10 08 	movss	xmm1, dword ptr [rax]
 1002562:	0f 2e c1 	ucomiss	xmm0, xmm1
 1002565:	0f 94 c1 	sete	cl
 1002568:	0f 9b c0 	setnp	al
 100256b:	21 c1 	and	ecx, eax
 100256d:	88 4c 24 18 	mov	byte ptr [rsp + 24], cl
 1002571:	c3 	ret
 1002572:	cc 	int3
 1002573:	cc 	int3
 1002574:	cc 	int3
 1002575:	cc 	int3
 1002576:	cc 	int3
 1002577:	cc 	int3
 1002578:	cc 	int3
 1002579:	cc 	int3
 100257a:	cc 	int3
 100257b:	cc 	int3
 100257c:	cc 	int3
 100257d:	cc 	int3
 100257e:	cc 	int3
 100257f:	cc 	int3

_runtime.f64equal:
 1002580:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1002585:	f2 0f 10 00 	movsd	xmm0, qword ptr [rax]
 1002589:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100258e:	f2 0f 10 08 	movsd	xmm1, qword ptr [rax]
 1002592:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 1002596:	0f 94 c1 	sete	cl
 1002599:	0f 9b c0 	setnp	al
 100259c:	21 c1 	and	ecx, eax
 100259e:	88 4c 24 18 	mov	byte ptr [rsp + 24], cl
 10025a2:	c3 	ret
 10025a3:	cc 	int3
 10025a4:	cc 	int3
 10025a5:	cc 	int3
 10025a6:	cc 	int3
 10025a7:	cc 	int3
 10025a8:	cc 	int3
 10025a9:	cc 	int3
 10025aa:	cc 	int3
 10025ab:	cc 	int3
 10025ac:	cc 	int3
 10025ad:	cc 	int3
 10025ae:	cc 	int3
 10025af:	cc 	int3

_runtime.c64equal:
 10025b0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10025b5:	f3 0f 10 40 04 	movss	xmm0, dword ptr [rax + 4]
 10025ba:	f3 0f 10 08 	movss	xmm1, dword ptr [rax]
 10025be:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10025c3:	f3 0f 10 50 04 	movss	xmm2, dword ptr [rax + 4]
 10025c8:	f3 0f 10 18 	movss	xmm3, dword ptr [rax]
 10025cc:	0f 2e cb 	ucomiss	xmm1, xmm3
 10025cf:	0f 94 c1 	sete	cl
 10025d2:	0f 9b c0 	setnp	al
 10025d5:	21 c1 	and	ecx, eax
 10025d7:	0f 2e c2 	ucomiss	xmm0, xmm2
 10025da:	0f 94 c2 	sete	dl
 10025dd:	0f 9b c0 	setnp	al
 10025e0:	21 c2 	and	edx, eax
 10025e2:	21 d1 	and	ecx, edx
 10025e4:	88 4c 24 18 	mov	byte ptr [rsp + 24], cl
 10025e8:	c3 	ret
 10025e9:	cc 	int3
 10025ea:	cc 	int3
 10025eb:	cc 	int3
 10025ec:	cc 	int3
 10025ed:	cc 	int3
 10025ee:	cc 	int3
 10025ef:	cc 	int3

_runtime.c128equal:
 10025f0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10025f5:	f2 0f 10 40 08 	movsd	xmm0, qword ptr [rax + 8]
 10025fa:	f2 0f 10 08 	movsd	xmm1, qword ptr [rax]
 10025fe:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1002603:	f2 0f 10 50 08 	movsd	xmm2, qword ptr [rax + 8]
 1002608:	f2 0f 10 18 	movsd	xmm3, qword ptr [rax]
 100260c:	66 0f 2e cb 	ucomisd	xmm1, xmm3
 1002610:	0f 94 c1 	sete	cl
 1002613:	0f 9b c0 	setnp	al
 1002616:	21 c1 	and	ecx, eax
 1002618:	66 0f 2e c2 	ucomisd	xmm0, xmm2
 100261c:	0f 94 c2 	sete	dl
 100261f:	0f 9b c0 	setnp	al
 1002622:	21 c2 	and	edx, eax
 1002624:	21 d1 	and	ecx, edx
 1002626:	88 4c 24 18 	mov	byte ptr [rsp + 24], cl
 100262a:	c3 	ret
 100262b:	cc 	int3
 100262c:	cc 	int3
 100262d:	cc 	int3
 100262e:	cc 	int3
 100262f:	cc 	int3

_runtime.strequal:
 1002630:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1002639:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100263d:	76 52 	jbe	82 <_runtime.strequal+0x61>
 100263f:	48 83 ec 28 	sub	rsp, 40
 1002643:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1002648:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 100264d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1002652:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1002656:	48 8b 00 	mov	rax, qword ptr [rax]
 1002659:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100265e:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1002661:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 1002665:	74 10 	je	16 <_runtime.strequal+0x47>
 1002667:	31 c0 	xor	eax, eax
 1002669:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 100266d:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002672:	48 83 c4 28 	add	rsp, 40
 1002676:	c3 	ret
 1002677:	48 89 04 24 	mov	qword ptr [rsp], rax
 100267b:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1002680:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1002685:	e8 66 fa ff ff 	call	-1434 <_runtime.memequal>
 100268a:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 100268f:	eb d8 	jmp	-40 <_runtime.strequal+0x39>
 1002691:	e8 3a e5 04 00 	call	320826 <_runtime.morestack_noctxt>
 1002696:	eb 98 	jmp	-104 <_runtime.strequal>
 1002698:	cc 	int3
 1002699:	cc 	int3
 100269a:	cc 	int3
 100269b:	cc 	int3
 100269c:	cc 	int3
 100269d:	cc 	int3
 100269e:	cc 	int3
 100269f:	cc 	int3

_runtime.interequal:
 10026a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10026a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10026ad:	76 52 	jbe	82 <_runtime.interequal+0x61>
 10026af:	48 83 ec 28 	sub	rsp, 40
 10026b3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10026b8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10026bd:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10026c2:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 10026c6:	48 8b 00 	mov	rax, qword ptr [rax]
 10026c9:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10026ce:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 10026d2:	48 39 02 	cmp	qword ptr [rdx], rax
 10026d5:	74 10 	je	16 <_runtime.interequal+0x47>
 10026d7:	31 c0 	xor	eax, eax
 10026d9:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10026dd:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10026e2:	48 83 c4 28 	add	rsp, 40
 10026e6:	c3 	ret
 10026e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10026eb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10026f0:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 10026f5:	e8 96 01 00 00 	call	406 <_runtime.ifaceeq>
 10026fa:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 10026ff:	eb d8 	jmp	-40 <_runtime.interequal+0x39>
 1002701:	e8 ca e4 04 00 	call	320714 <_runtime.morestack_noctxt>
 1002706:	eb 98 	jmp	-104 <_runtime.interequal>
 1002708:	cc 	int3
 1002709:	cc 	int3
 100270a:	cc 	int3
 100270b:	cc 	int3
 100270c:	cc 	int3
 100270d:	cc 	int3
 100270e:	cc 	int3
 100270f:	cc 	int3

_runtime.nilinterequal:
 1002710:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1002719:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100271d:	76 52 	jbe	82 <_runtime.nilinterequal+0x61>
 100271f:	48 83 ec 28 	sub	rsp, 40
 1002723:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1002728:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 100272d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1002732:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1002736:	48 8b 00 	mov	rax, qword ptr [rax]
 1002739:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100273e:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 1002742:	48 39 02 	cmp	qword ptr [rdx], rax
 1002745:	74 10 	je	16 <_runtime.nilinterequal+0x47>
 1002747:	31 c0 	xor	eax, eax
 1002749:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 100274d:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002752:	48 83 c4 28 	add	rsp, 40
 1002756:	c3 	ret
 1002757:	48 89 04 24 	mov	qword ptr [rsp], rax
 100275b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1002760:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1002765:	e8 16 00 00 00 	call	22 <_runtime.efaceeq>
 100276a:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 100276f:	eb d8 	jmp	-40 <_runtime.nilinterequal+0x39>
 1002771:	e8 5a e4 04 00 	call	320602 <_runtime.morestack_noctxt>
 1002776:	eb 98 	jmp	-104 <_runtime.nilinterequal>
 1002778:	cc 	int3
 1002779:	cc 	int3
 100277a:	cc 	int3
 100277b:	cc 	int3
 100277c:	cc 	int3
 100277d:	cc 	int3
 100277e:	cc 	int3
 100277f:	cc 	int3

_runtime.efaceeq:
 1002780:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1002789:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100278d:	0f 86 f1 00 00 00 	jbe	241 <_runtime.efaceeq+0x104>
 1002793:	48 83 ec 40 	sub	rsp, 64
 1002797:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 100279c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10027a1:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10027a6:	48 85 c0 	test	rax, rax
 10027a9:	74 58 	je	88 <_runtime.efaceeq+0x83>
 10027ab:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 10027af:	48 85 d2 	test	rdx, rdx
 10027b2:	74 5e 	je	94 <_runtime.efaceeq+0x92>
 10027b4:	0f b6 40 17 	movzx	eax, byte ptr [rax + 23]
 10027b8:	a8 20 	test	al, 32
 10027ba:	74 1c 	je	28 <_runtime.efaceeq+0x58>
 10027bc:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10027c1:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10027c6:	48 39 c8 	cmp	rax, rcx
 10027c9:	0f 94 44 24 60 	sete	byte ptr [rsp + 96]
 10027ce:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10027d3:	48 83 c4 40 	add	rsp, 64
 10027d7:	c3 	ret
 10027d8:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10027dd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10027e1:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10027e6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10027eb:	48 8b 02 	mov	rax, qword ptr [rdx]
 10027ee:	ff d0 	call	rax
 10027f0:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 10027f5:	88 44 24 60 	mov	byte ptr [rsp + 96], al
 10027f9:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10027fe:	48 83 c4 40 	add	rsp, 64
 1002802:	c3 	ret
 1002803:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 1002808:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 100280d:	48 83 c4 40 	add	rsp, 64
 1002811:	c3 	ret
 1002812:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002816:	e8 85 88 04 00 	call	297093 <_runtime.(*_type).string>
 100281b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1002820:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1002825:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 100282d:	48 8d 15 7d 2a 07 00 	lea	rdx, [rip + 469629]
 1002834:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1002839:	48 c7 44 24 10 1c 00 00 00 	mov	qword ptr [rsp + 16], 28
 1002842:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1002847:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100284c:	e8 bf e1 03 00 	call	254399 <_runtime.concatstring2>
 1002851:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1002856:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100285b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100285f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1002864:	e8 17 54 00 00 	call	21527 <_runtime.convTstring>
 1002869:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100286e:	48 8d 0d cb 0e 06 00 	lea	rcx, [rip + 397003]
 1002875:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1002879:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100287e:	e8 3d 5d 02 00 	call	154941 <_runtime.gopanic>
 1002883:	90 	nop
 1002884:	e8 47 e3 04 00 	call	320327 <_runtime.morestack_noctxt>
 1002889:	e9 f2 fe ff ff 	jmp	-270 <_runtime.efaceeq>
 100288e:	cc 	int3
 100288f:	cc 	int3

_runtime.ifaceeq:
 1002890:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1002899:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100289d:	0f 86 f5 00 00 00 	jbe	245 <_runtime.ifaceeq+0x108>
 10028a3:	48 83 ec 40 	sub	rsp, 64
 10028a7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 10028ac:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10028b1:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10028b6:	48 85 c0 	test	rax, rax
 10028b9:	74 5c 	je	92 <_runtime.ifaceeq+0x87>
 10028bb:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 10028bf:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 10028c3:	48 85 d2 	test	rdx, rdx
 10028c6:	74 5e 	je	94 <_runtime.ifaceeq+0x96>
 10028c8:	0f b6 40 17 	movzx	eax, byte ptr [rax + 23]
 10028cc:	a8 20 	test	al, 32
 10028ce:	74 1c 	je	28 <_runtime.ifaceeq+0x5c>
 10028d0:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10028d5:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10028da:	48 39 c8 	cmp	rax, rcx
 10028dd:	0f 94 44 24 60 	sete	byte ptr [rsp + 96]
 10028e2:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10028e7:	48 83 c4 40 	add	rsp, 64
 10028eb:	c3 	ret
 10028ec:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10028f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10028f5:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10028fa:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10028ff:	48 8b 02 	mov	rax, qword ptr [rdx]
 1002902:	ff d0 	call	rax
 1002904:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 1002909:	88 44 24 60 	mov	byte ptr [rsp + 96], al
 100290d:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1002912:	48 83 c4 40 	add	rsp, 64
 1002916:	c3 	ret
 1002917:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 100291c:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1002921:	48 83 c4 40 	add	rsp, 64
 1002925:	c3 	ret
 1002926:	48 89 04 24 	mov	qword ptr [rsp], rax
 100292a:	e8 71 87 04 00 	call	296817 <_runtime.(*_type).string>
 100292f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1002934:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1002939:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1002941:	48 8d 15 69 29 07 00 	lea	rdx, [rip + 469353]
 1002948:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100294d:	48 c7 44 24 10 1c 00 00 00 	mov	qword ptr [rsp + 16], 28
 1002956:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100295b:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1002960:	e8 ab e0 03 00 	call	254123 <_runtime.concatstring2>
 1002965:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100296a:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100296f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1002973:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1002978:	e8 03 53 00 00 	call	21251 <_runtime.convTstring>
 100297d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1002982:	48 8d 0d b7 0d 06 00 	lea	rcx, [rip + 396727]
 1002989:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100298d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1002992:	e8 29 5c 02 00 	call	154665 <_runtime.gopanic>
 1002997:	90 	nop
 1002998:	e8 33 e2 04 00 	call	320051 <_runtime.morestack_noctxt>
 100299d:	e9 ee fe ff ff 	jmp	-274 <_runtime.ifaceeq>
 10029a2:	cc 	int3
 10029a3:	cc 	int3
 10029a4:	cc 	int3
 10029a5:	cc 	int3
 10029a6:	cc 	int3
 10029a7:	cc 	int3
 10029a8:	cc 	int3
 10029a9:	cc 	int3
 10029aa:	cc 	int3
 10029ab:	cc 	int3
 10029ac:	cc 	int3
 10029ad:	cc 	int3
 10029ae:	cc 	int3
 10029af:	cc 	int3

_runtime.alginit:
 10029b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10029b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10029bd:	0f 86 a9 00 00 00 	jbe	169 <_runtime.alginit+0xbc>
 10029c3:	48 83 ec 20 	sub	rsp, 32
 10029c7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10029cc:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10029d1:	80 3d a8 52 0f 00 00 	cmp	byte ptr [rip + 1004200], 0
 10029d8:	74 12 	je	18 <_runtime.alginit+0x3c>
 10029da:	80 3d ac 52 0f 00 00 	cmp	byte ptr [rip + 1004204], 0
 10029e1:	74 09 	je	9 <_runtime.alginit+0x3c>
 10029e3:	80 3d a4 52 0f 00 00 	cmp	byte ptr [rip + 1004196], 0
 10029ea:	75 4c 	jne	76 <_runtime.alginit+0x88>
 10029ec:	48 8d 05 2d 4f 0f 00 	lea	rax, [rip + 1003309]
 10029f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10029f7:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 1002a00:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 1002a09:	e8 82 3a 02 00 	call	146050 <_runtime.getRandomData>
 1002a0e:	48 83 0d 0a 4f 0f 00 01 	or	qword ptr [rip + 1003274], 1
 1002a16:	48 83 0d 0a 4f 0f 00 01 	or	qword ptr [rip + 1003274], 1
 1002a1e:	48 83 0d 0a 4f 0f 00 01 	or	qword ptr [rip + 1003274], 1
 1002a26:	48 83 0d 0a 4f 0f 00 01 	or	qword ptr [rip + 1003274], 1
 1002a2e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1002a33:	48 83 c4 20 	add	rsp, 32
 1002a37:	c3 	ret
 1002a38:	90 	nop
 1002a39:	c6 05 31 4d 0f 00 01 	mov	byte ptr [rip + 1002801], 1
 1002a40:	48 8d 05 59 50 0f 00 	lea	rax, [rip + 1003609]
 1002a47:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002a4b:	48 c7 44 24 08 80 00 00 00 	mov	qword ptr [rsp + 8], 128
 1002a54:	48 c7 44 24 10 80 00 00 00 	mov	qword ptr [rsp + 16], 128
 1002a5d:	e8 2e 3a 02 00 	call	145966 <_runtime.getRandomData>
 1002a62:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1002a67:	48 83 c4 20 	add	rsp, 32
 1002a6b:	c3 	ret
 1002a6c:	e8 5f e1 04 00 	call	319839 <_runtime.morestack_noctxt>
 1002a71:	e9 3a ff ff ff 	jmp	-198 <_runtime.alginit>
 1002a76:	cc 	int3
 1002a77:	cc 	int3
 1002a78:	cc 	int3
 1002a79:	cc 	int3
 1002a7a:	cc 	int3
 1002a7b:	cc 	int3
 1002a7c:	cc 	int3
 1002a7d:	cc 	int3
 1002a7e:	cc 	int3
 1002a7f:	cc 	int3

_runtime.atomicwb:
 1002a80:	48 83 ec 18 	sub	rsp, 24
 1002a84:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1002a89:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1002a8e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1002a97:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1002a9b:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1002aa2:	84 00 	test	byte ptr [rax], al
 1002aa4:	48 8b 88 48 17 00 00 	mov	rcx, qword ptr [rax + 5960]
 1002aab:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1002ab0:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1002ab3:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1002ab8:	48 89 f7 	mov	rdi, rsi
 1002abb:	48 89 19 	mov	qword ptr [rcx], rbx
 1002abe:	48 89 71 08 	mov	qword ptr [rcx + 8], rsi
 1002ac2:	48 8b 88 48 17 00 00 	mov	rcx, qword ptr [rax + 5960]
 1002ac9:	48 83 c1 10 	add	rcx, 16
 1002acd:	48 89 88 48 17 00 00 	mov	qword ptr [rax + 5960], rcx
 1002ad4:	48 39 88 50 17 00 00 	cmp	qword ptr [rax + 5968], rcx
 1002adb:	74 0a 	je	10 <_runtime.atomicwb+0x67>
 1002add:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1002ae2:	48 83 c4 18 	add	rsp, 24
 1002ae6:	c3 	ret
 1002ae7:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1002aeb:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1002af0:	e8 7b 28 02 00 	call	141435 <_runtime.wbBufFlush>
 1002af5:	eb e6 	jmp	-26 <_runtime.atomicwb+0x5d>
 1002af7:	cc 	int3
 1002af8:	cc 	int3
 1002af9:	cc 	int3
 1002afa:	cc 	int3
 1002afb:	cc 	int3
 1002afc:	cc 	int3
 1002afd:	cc 	int3
 1002afe:	cc 	int3
 1002aff:	cc 	int3

_runtime.atomicstorep:
 1002b00:	48 83 ec 18 	sub	rsp, 24
 1002b04:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1002b09:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1002b0e:	80 3d eb 4d 0f 00 00 	cmp	byte ptr [rip + 1002987], 0
 1002b15:	75 17 	jne	23 <_runtime.atomicstorep+0x2e>
 1002b17:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1002b1c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1002b21:	48 87 01 	xchg	qword ptr [rcx], rax
 1002b24:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1002b29:	48 83 c4 18 	add	rsp, 24
 1002b2d:	c3 	ret
 1002b2e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1002b33:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002b37:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1002b3c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1002b41:	e8 3a ff ff ff 	call	-198 <_runtime.atomicwb>
 1002b46:	eb cf 	jmp	-49 <_runtime.atomicstorep+0x17>
 1002b48:	cc 	int3
 1002b49:	cc 	int3
 1002b4a:	cc 	int3
 1002b4b:	cc 	int3
 1002b4c:	cc 	int3
 1002b4d:	cc 	int3
 1002b4e:	cc 	int3
 1002b4f:	cc 	int3

_runtime.cgocall:
 1002b50:	48 83 ec 30 	sub	rsp, 48
 1002b54:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1002b59:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1002b5e:	80 3d 05 4c 0f 00 00 	cmp	byte ptr [rip + 1002501], 0
 1002b65:	0f 84 ae 00 00 00 	je	174 <_runtime.cgocall+0xc9>
 1002b6b:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1002b70:	48 85 c0 	test	rax, rax
 1002b73:	0f 84 87 00 00 00 	je	135 <_runtime.cgocall+0xb0>
 1002b79:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1002b82:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1002b86:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1002b8b:	48 ff 80 30 01 00 00 	inc	qword ptr [rax + 304]
 1002b92:	ff 80 38 01 00 00 	inc	dword ptr [rax + 312]
 1002b98:	48 8b 88 40 01 00 00 	mov	rcx, qword ptr [rax + 320]
 1002b9f:	48 c7 01 00 00 00 00 	mov	qword ptr [rcx], 0
 1002ba6:	e8 b5 f8 02 00 	call	194741 <_runtime.entersyscall>
 1002bab:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1002bb0:	c6 80 18 01 00 00 01 	mov	byte ptr [rax + 280], 1
 1002bb7:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1002bbc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1002bc0:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1002bc5:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1002bca:	e8 81 f6 04 00 	call	325249 <_runtime.asmcgocall>
 1002bcf:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1002bd3:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 1002bd7:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1002bdc:	c6 81 18 01 00 00 00 	mov	byte ptr [rcx + 280], 0
 1002be3:	ff 89 38 01 00 00 	dec	dword ptr [rcx + 312]
 1002be9:	e8 52 fc 02 00 	call	195666 <_runtime.exitsyscall>
 1002bee:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1002bf2:	89 44 24 48 	mov	dword ptr [rsp + 72], eax
 1002bf6:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002bfb:	48 83 c4 30 	add	rsp, 48
 1002bff:	c3 	ret
 1002c00:	48 8d 05 ca 07 07 00 	lea	rax, [rip + 460746]
 1002c07:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002c0b:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1002c14:	e8 47 61 02 00 	call	155975 <_runtime.throw>
 1002c19:	48 8d 05 6c 13 07 00 	lea	rax, [rip + 463724]
 1002c20:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002c24:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1002c2d:	e8 2e 61 02 00 	call	155950 <_runtime.throw>
 1002c32:	90 	nop
 1002c33:	cc 	int3
 1002c34:	cc 	int3
 1002c35:	cc 	int3
 1002c36:	cc 	int3
 1002c37:	cc 	int3
 1002c38:	cc 	int3
 1002c39:	cc 	int3
 1002c3a:	cc 	int3
 1002c3b:	cc 	int3
 1002c3c:	cc 	int3
 1002c3d:	cc 	int3
 1002c3e:	cc 	int3
 1002c3f:	cc 	int3

_runtime.cgoIsGoPointer:
 1002c40:	48 83 ec 18 	sub	rsp, 24
 1002c44:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1002c49:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1002c4e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1002c53:	48 85 c0 	test	rax, rax
 1002c56:	0f 84 9b 00 00 00 	je	155 <_runtime.cgoIsGoPointer+0xb7>
 1002c5c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002c60:	e8 eb 9f 01 00 	call	106475 <_runtime.inHeapOrStack>
 1002c65:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002c6a:	75 7c 	jne	124 <_runtime.cgoIsGoPointer+0xa8>
 1002c6c:	48 8b 05 ed b5 0c 00 	mov	rax, qword ptr [rip + 833005]
 1002c73:	48 85 c0 	test	rax, rax
 1002c76:	74 6a 	je	106 <_runtime.cgoIsGoPointer+0xa2>
 1002c78:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1002c7c:	48 8b 00 	mov	rax, qword ptr [rax]
 1002c7f:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1002c84:	31 db 	xor	ebx, ebx
 1002c86:	eb 06 	jmp	6 <_runtime.cgoIsGoPointer+0x4e>
 1002c88:	48 ff c3 	inc	rbx
 1002c8b:	4c 89 c2 	mov	rdx, r8
 1002c8e:	48 39 cb 	cmp	rbx, rcx
 1002c91:	7d 40 	jge	64 <_runtime.cgoIsGoPointer+0x93>
 1002c93:	48 8b 34 d8 	mov	rsi, qword ptr [rax + 8*rbx]
 1002c97:	48 8b be 88 00 00 00 	mov	rdi, qword ptr [rsi + 136]
 1002c9e:	49 89 d0 	mov	r8, rdx
 1002ca1:	48 39 96 80 00 00 00 	cmp	qword ptr [rsi + 128], rdx
 1002ca8:	77 05 	ja	5 <_runtime.cgoIsGoPointer+0x6f>
 1002caa:	48 39 fa 	cmp	rdx, rdi
 1002cad:	72 15 	jb	21 <_runtime.cgoIsGoPointer+0x84>
 1002caf:	48 8b be 98 00 00 00 	mov	rdi, qword ptr [rsi + 152]
 1002cb6:	48 39 96 90 00 00 00 	cmp	qword ptr [rsi + 144], rdx
 1002cbd:	77 c9 	ja	-55 <_runtime.cgoIsGoPointer+0x48>
 1002cbf:	48 39 fa 	cmp	rdx, rdi
 1002cc2:	73 c4 	jae	-60 <_runtime.cgoIsGoPointer+0x48>
 1002cc4:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1002cc9:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1002cce:	48 83 c4 18 	add	rsp, 24
 1002cd2:	c3 	ret
 1002cd3:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 1002cd8:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1002cdd:	48 83 c4 18 	add	rsp, 24
 1002ce1:	c3 	ret
 1002ce2:	31 c9 	xor	ecx, ecx
 1002ce4:	31 c0 	xor	eax, eax
 1002ce6:	eb 97 	jmp	-105 <_runtime.cgoIsGoPointer+0x3f>
 1002ce8:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1002ced:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1002cf2:	48 83 c4 18 	add	rsp, 24
 1002cf6:	c3 	ret
 1002cf7:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 1002cfc:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1002d01:	48 83 c4 18 	add	rsp, 24
 1002d05:	c3 	ret
 1002d06:	cc 	int3
 1002d07:	cc 	int3
 1002d08:	cc 	int3
 1002d09:	cc 	int3
 1002d0a:	cc 	int3
 1002d0b:	cc 	int3
 1002d0c:	cc 	int3
 1002d0d:	cc 	int3
 1002d0e:	cc 	int3
 1002d0f:	cc 	int3

_runtime.cgoCheckWriteBarrier:
 1002d10:	48 83 ec 30 	sub	rsp, 48
 1002d14:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1002d19:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1002d1e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1002d23:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002d27:	e8 14 ff ff ff 	call	-236 <_runtime.cgoIsGoPointer>
 1002d2c:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002d31:	0f 84 c0 00 00 00 	je	192 <_runtime.cgoCheckWriteBarrier+0xe7>
 1002d37:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1002d3c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002d40:	e8 fb fe ff ff 	call	-261 <_runtime.cgoIsGoPointer>
 1002d45:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002d4a:	0f 85 9d 00 00 00 	jne	157 <_runtime.cgoCheckWriteBarrier+0xdd>
 1002d50:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1002d59:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1002d5d:	48 39 01 	cmp	qword ptr [rcx], rax
 1002d60:	75 0a 	jne	10 <_runtime.cgoCheckWriteBarrier+0x5c>
 1002d62:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002d67:	48 83 c4 30 	add	rsp, 48
 1002d6b:	c3 	ret
 1002d6c:	48 39 41 50 	cmp	qword ptr [rcx + 80], rax
 1002d70:	74 f0 	je	-16 <_runtime.cgoCheckWriteBarrier+0x52>
 1002d72:	83 b9 f0 00 00 00 00 	cmp	dword ptr [rcx + 240], 0
 1002d79:	75 68 	jne	104 <_runtime.cgoCheckWriteBarrier+0xd3>
 1002d7b:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1002d80:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002d84:	e8 47 7d 00 00 	call	32071 <_runtime.inPersistentAlloc>
 1002d89:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002d8e:	74 0a 	je	10 <_runtime.cgoCheckWriteBarrier+0x8a>
 1002d90:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002d95:	48 83 c4 30 	add	rsp, 48
 1002d99:	c3 	ret
 1002d9a:	0f 57 c0 	xorps	xmm0, xmm0
 1002d9d:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1002da2:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1002dab:	48 8d 05 de a6 04 00 	lea	rax, [rip + 304862]
 1002db2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1002db7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1002dbc:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1002dc1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1002dc6:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1002dcb:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1002dd0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002dd4:	e8 a7 dc 04 00 	call	318631 <_runtime.systemstack>
 1002dd9:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002dde:	48 83 c4 30 	add	rsp, 48
 1002de2:	c3 	ret
 1002de3:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002de8:	48 83 c4 30 	add	rsp, 48
 1002dec:	c3 	ret
 1002ded:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002df2:	48 83 c4 30 	add	rsp, 48
 1002df6:	c3 	ret
 1002df7:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1002dfc:	48 83 c4 30 	add	rsp, 48
 1002e00:	c3 	ret
 1002e01:	cc 	int3
 1002e02:	cc 	int3
 1002e03:	cc 	int3
 1002e04:	cc 	int3
 1002e05:	cc 	int3
 1002e06:	cc 	int3
 1002e07:	cc 	int3
 1002e08:	cc 	int3
 1002e09:	cc 	int3
 1002e0a:	cc 	int3
 1002e0b:	cc 	int3
 1002e0c:	cc 	int3
 1002e0d:	cc 	int3
 1002e0e:	cc 	int3
 1002e0f:	cc 	int3

_runtime.cgoCheckMemmove:
 1002e10:	48 83 ec 28 	sub	rsp, 40
 1002e14:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1002e19:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1002e1e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1002e23:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 1002e28:	74 74 	je	116 <_runtime.cgoCheckMemmove+0x8e>
 1002e2a:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1002e2f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002e33:	e8 08 fe ff ff 	call	-504 <_runtime.cgoIsGoPointer>
 1002e38:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002e3d:	74 55 	je	85 <_runtime.cgoCheckMemmove+0x84>
 1002e3f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1002e44:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002e48:	e8 f3 fd ff ff 	call	-525 <_runtime.cgoIsGoPointer>
 1002e4d:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002e52:	74 0a 	je	10 <_runtime.cgoCheckMemmove+0x4e>
 1002e54:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002e59:	48 83 c4 28 	add	rsp, 40
 1002e5d:	c3 	ret
 1002e5e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1002e63:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002e67:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1002e6c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1002e71:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1002e76:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1002e7b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1002e80:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1002e85:	e8 f6 00 00 00 	call	246 <_runtime.cgoCheckTypedBlock>
 1002e8a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002e8f:	48 83 c4 28 	add	rsp, 40
 1002e93:	c3 	ret
 1002e94:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002e99:	48 83 c4 28 	add	rsp, 40
 1002e9d:	c3 	ret
 1002e9e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1002ea3:	48 83 c4 28 	add	rsp, 40
 1002ea7:	c3 	ret
 1002ea8:	cc 	int3
 1002ea9:	cc 	int3
 1002eaa:	cc 	int3
 1002eab:	cc 	int3
 1002eac:	cc 	int3
 1002ead:	cc 	int3
 1002eae:	cc 	int3
 1002eaf:	cc 	int3

_runtime.cgoCheckSliceCopy:
 1002eb0:	48 83 ec 38 	sub	rsp, 56
 1002eb4:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1002eb9:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1002ebe:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1002ec3:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 1002ec8:	0f 84 a8 00 00 00 	je	168 <_runtime.cgoCheckSliceCopy+0xc6>
 1002ece:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1002ed3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002ed7:	e8 64 fd ff ff 	call	-668 <_runtime.cgoIsGoPointer>
 1002edc:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002ee1:	0f 84 85 00 00 00 	je	133 <_runtime.cgoCheckSliceCopy+0xbc>
 1002ee7:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1002eec:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002ef0:	e8 4b fd ff ff 	call	-693 <_runtime.cgoIsGoPointer>
 1002ef5:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1002efa:	75 66 	jne	102 <_runtime.cgoCheckSliceCopy+0xb2>
 1002efc:	31 c0 	xor	eax, eax
 1002efe:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1002f03:	eb 49 	jmp	73 <_runtime.cgoCheckSliceCopy+0x9e>
 1002f05:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1002f0a:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1002f0f:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1002f14:	48 8b 10 	mov	rdx, qword ptr [rax]
 1002f17:	48 89 04 24 	mov	qword ptr [rsp], rax
 1002f1b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1002f20:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1002f29:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1002f2e:	e8 4d 00 00 00 	call	77 <_runtime.cgoCheckTypedBlock>
 1002f33:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1002f38:	48 ff c0 	inc	rax
 1002f3b:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1002f40:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1002f43:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1002f48:	48 01 da 	add	rdx, rbx
 1002f4b:	48 89 d1 	mov	rcx, rdx
 1002f4e:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1002f53:	48 39 d0 	cmp	rax, rdx
 1002f56:	7c ad 	jl	-83 <_runtime.cgoCheckSliceCopy+0x55>
 1002f58:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1002f5d:	48 83 c4 38 	add	rsp, 56
 1002f61:	c3 	ret
 1002f62:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1002f67:	48 83 c4 38 	add	rsp, 56
 1002f6b:	c3 	ret
 1002f6c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1002f71:	48 83 c4 38 	add	rsp, 56
 1002f75:	c3 	ret
 1002f76:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1002f7b:	48 83 c4 38 	add	rsp, 56
 1002f7f:	c3 	ret

_runtime.cgoCheckTypedBlock:
 1002f80:	48 83 c4 80 	add	rsp, -128
 1002f84:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 1002f89:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 1002f8e:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1002f96:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 1002f9a:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 1002fa2:	48 39 f3 	cmp	rbx, rsi
 1002fa5:	0f 86 28 03 00 00 	jbe	808 <_runtime.cgoCheckTypedBlock+0x353>
 1002fab:	48 29 f3 	sub	rbx, rsi
 1002fae:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 1002fb6:	48 39 df 	cmp	rdi, rbx
 1002fb9:	48 0f 47 fb 	cmova	rdi, rbx
 1002fbd:	0f b6 5a 17 	movzx	ebx, byte ptr [rdx + 23]
 1002fc1:	f6 c3 40 	test	bl, 64
 1002fc4:	0f 84 db 02 00 00 	je	731 <_runtime.cgoCheckTypedBlock+0x325>
 1002fca:	48 8b 1d 8f b2 0c 00 	mov	rbx, qword ptr [rip + 832143]
 1002fd1:	48 85 db 	test	rbx, rbx
 1002fd4:	0f 84 c1 02 00 00 	je	705 <_runtime.cgoCheckTypedBlock+0x31b>
 1002fda:	4c 8b 43 08 	mov	r8, qword ptr [rbx + 8]
 1002fde:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 1002fe1:	4c 8b 8c 24 90 00 00 00 	mov	r9, qword ptr [rsp + 144]
 1002fe9:	31 c0 	xor	eax, eax
 1002feb:	eb 06 	jmp	6 <_runtime.cgoCheckTypedBlock+0x73>
 1002fed:	48 ff c0 	inc	rax
 1002ff0:	4d 89 e9 	mov	r9, r13
 1002ff3:	4c 39 c0 	cmp	rax, r8
 1002ff6:	0f 8d ab 00 00 00 	jge	171 <_runtime.cgoCheckTypedBlock+0x127>
 1002ffc:	4c 8b 14 c3 	mov	r10, qword ptr [rbx + 8*rax]
 1003000:	4d 8b 9a 80 00 00 00 	mov	r11, qword ptr [r10 + 128]
 1003007:	4d 8b a2 88 00 00 00 	mov	r12, qword ptr [r10 + 136]
 100300e:	4d 89 cd 	mov	r13, r9
 1003011:	4d 39 cb 	cmp	r11, r9
 1003014:	77 05 	ja	5 <_runtime.cgoCheckTypedBlock+0x9b>
 1003016:	4d 39 e1 	cmp	r9, r12
 1003019:	72 52 	jb	82 <_runtime.cgoCheckTypedBlock+0xed>
 100301b:	4d 8b 9a 90 00 00 00 	mov	r11, qword ptr [r10 + 144]
 1003022:	4d 8b a2 98 00 00 00 	mov	r12, qword ptr [r10 + 152]
 1003029:	4d 39 cb 	cmp	r11, r9
 100302c:	77 bf 	ja	-65 <_runtime.cgoCheckTypedBlock+0x6d>
 100302e:	4d 39 e1 	cmp	r9, r12
 1003031:	73 ba 	jae	-70 <_runtime.cgoCheckTypedBlock+0x6d>
 1003033:	4c 89 d8 	mov	rax, r11
 1003036:	4d 29 cb 	sub	r11, r9
 1003039:	49 8b 8a a8 01 00 00 	mov	rcx, qword ptr [r10 + 424]
 1003040:	4b 8d 14 2b 	lea	rdx, [r11 + r13]
 1003044:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1003048:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100304d:	49 29 c1 	sub	r9, rax
 1003050:	49 8d 04 31 	lea	rax, [r9 + rsi]
 1003054:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1003059:	48 89 7c 24 18 	mov	qword ptr [rsp + 24], rdi
 100305e:	e8 ad 02 00 00 	call	685 <_runtime.cgoCheckBits>
 1003063:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1003068:	48 83 ec 80 	sub	rsp, -128
 100306c:	c3 	ret
 100306d:	4c 89 d8 	mov	rax, r11
 1003070:	4d 29 cb 	sub	r11, r9
 1003073:	49 8b 8a 98 01 00 00 	mov	rcx, qword ptr [r10 + 408]
 100307a:	4b 8d 14 2b 	lea	rdx, [r11 + r13]
 100307e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1003082:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1003087:	49 29 c1 	sub	r9, rax
 100308a:	49 8d 04 31 	lea	rax, [r9 + rsi]
 100308e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1003093:	48 89 7c 24 18 	mov	qword ptr [rsp + 24], rdi
 1003098:	e8 73 02 00 00 	call	627 <_runtime.cgoCheckBits>
 100309d:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 10030a2:	48 83 ec 80 	sub	rsp, -128
 10030a6:	c3 	ret
 10030a7:	48 8b 1d 22 23 0f 00 	mov	rbx, qword ptr [rip + 992034]
 10030ae:	84 03 	test	byte ptr [rbx], al
 10030b0:	4d 89 c8 	mov	r8, r9
 10030b3:	90 	nop
 10030b4:	49 ba 00 00 00 00 00 80 00 00 	movabs	r10, 140737488355328
 10030be:	4b 8d 04 0a 	lea	rax, [r10 + r9]
 10030c2:	48 c1 e8 1a 	shr	rax, 26
 10030c6:	48 3d 00 00 40 00 	cmp	rax, 4194304
 10030cc:	0f 83 2e 02 00 00 	jae	558 <_runtime.cgoCheckTypedBlock+0x380>
 10030d2:	48 8b 1c c3 	mov	rbx, qword ptr [rbx + 8*rax]
 10030d6:	49 c1 e9 0d 	shr	r9, 13
 10030da:	49 81 e1 ff 1f 00 00 	and	r9, 8191
 10030e1:	4e 8b 8c cb 00 00 20 00 	mov	r9, qword ptr [rbx + 8*r9 + 2097152]
 10030e9:	84 03 	test	byte ptr [rbx], al
 10030eb:	41 8a 59 63 	mov	bl, byte ptr [r9 + 99]
 10030ef:	80 fb 02 	cmp	bl, 2
 10030f2:	0f 84 55 01 00 00 	je	341 <_runtime.cgoCheckTypedBlock+0x2cd>
 10030f8:	48 8b 15 d1 22 0f 00 	mov	rdx, qword ptr [rip + 991953]
 10030ff:	84 02 	test	byte ptr [rdx], al
 1003101:	4c 89 c3 	mov	rbx, r8
 1003104:	90 	nop
 1003105:	4b 8d 04 10 	lea	rax, [r8 + r10]
 1003109:	48 c1 e8 1a 	shr	rax, 26
 100310d:	48 3d 00 00 40 00 	cmp	rax, 4194304
 1003113:	0f 83 dd 01 00 00 	jae	477 <_runtime.cgoCheckTypedBlock+0x376>
 1003119:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 100311d:	48 85 c9 	test	rcx, rcx
 1003120:	0f 84 19 01 00 00 	je	281 <_runtime.cgoCheckTypedBlock+0x2bf>
 1003126:	4c 89 c2 	mov	rdx, r8
 1003129:	49 c1 e8 05 	shr	r8, 5
 100312d:	49 81 e0 ff ff 1f 00 	and	r8, 2097151
 1003134:	49 01 c8 	add	r8, rcx
 1003137:	48 c1 ea 03 	shr	rdx, 3
 100313b:	48 83 e2 03 	and	rdx, 3
 100313f:	48 81 c1 ff ff 1f 00 	add	rcx, 2097151
 1003146:	48 89 bc 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdi
 100314e:	45 31 c9 	xor	r9d, r9d
 1003151:	eb 04 	jmp	4 <_runtime.cgoCheckTypedBlock+0x1d7>
 1003153:	49 83 c1 08 	add	r9, 8
 1003157:	4c 8d 14 37 	lea	r10, [rdi + rsi]
 100315b:	4d 39 d1 	cmp	r9, r10
 100315e:	0f 83 d1 00 00 00 	jae	209 <_runtime.cgoCheckTypedBlock+0x2b5>
 1003164:	4c 89 4c 24 38 	mov	qword ptr [rsp + 56], r9
 1003169:	45 0f b6 10 	movzx	r10d, byte ptr [r8]
 100316d:	49 39 f1 	cmp	r9, rsi
 1003170:	72 06 	jb	6 <_runtime.cgoCheckTypedBlock+0x1f8>
 1003172:	41 0f a3 d2 	bt	r10d, edx
 1003176:	72 5f 	jb	95 <_runtime.cgoCheckTypedBlock+0x257>
 1003178:	83 fa 03 	cmp	edx, 3
 100317b:	73 04 	jae	4 <_runtime.cgoCheckTypedBlock+0x201>
 100317d:	ff c2 	inc	edx
 100317f:	eb d2 	jmp	-46 <_runtime.cgoCheckTypedBlock+0x1d3>
 1003181:	49 39 c8 	cmp	r8, rcx
 1003184:	74 07 	je	7 <_runtime.cgoCheckTypedBlock+0x20d>
 1003186:	49 ff c0 	inc	r8
 1003189:	31 d2 	xor	edx, edx
 100318b:	eb c6 	jmp	-58 <_runtime.cgoCheckTypedBlock+0x1d3>
 100318d:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1003191:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 1003195:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 1003199:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100319e:	e8 3d a9 00 00 	call	43325 <_runtime.heapBits.nextArena>
 10031a3:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10031a8:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 10031ac:	8b 54 24 20 	mov	edx, dword ptr [rsp + 32]
 10031b0:	4c 8b 44 24 18 	mov	r8, qword ptr [rsp + 24]
 10031b5:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 10031bd:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 10031c5:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 10031cd:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 10031d2:	e9 7c ff ff ff 	jmp	-132 <_runtime.cgoCheckTypedBlock+0x1d3>
 10031d7:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 10031db:	89 54 24 30 	mov	dword ptr [rsp + 48], edx
 10031df:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 10031e4:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10031e9:	49 8b 04 19 	mov	rax, qword ptr [r9 + rbx]
 10031ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10031f1:	e8 4a fa ff ff 	call	-1462 <_runtime.cgoIsGoPointer>
 10031f6:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 10031fb:	0f 85 dc 00 00 00 	jne	220 <_runtime.cgoCheckTypedBlock+0x35d>
 1003201:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 1003205:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 100320a:	8b 54 24 30 	mov	edx, dword ptr [rsp + 48]
 100320e:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1003216:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 100321e:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 1003226:	4c 8b 44 24 48 	mov	r8, qword ptr [rsp + 72]
 100322b:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 1003230:	e9 43 ff ff ff 	jmp	-189 <_runtime.cgoCheckTypedBlock+0x1f8>
 1003235:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100323a:	48 83 ec 80 	sub	rsp, -128
 100323e:	c3 	ret
 100323f:	31 c9 	xor	ecx, ecx
 1003241:	31 c0 	xor	eax, eax
 1003243:	31 d2 	xor	edx, edx
 1003245:	45 31 c0 	xor	r8d, r8d
 1003248:	e9 f9 fe ff ff 	jmp	-263 <_runtime.cgoCheckTypedBlock+0x1c6>
 100324d:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 1003256:	0f 57 c0 	xorps	xmm0, xmm0
 1003259:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 100325e:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 1003263:	48 8d 05 e6 a2 04 00 	lea	rax, [rip + 303846]
 100326a:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 100326f:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1003274:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 1003279:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 100327e:	48 89 7c 24 70 	mov	qword ptr [rsp + 112], rdi
 1003283:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1003288:	48 89 04 24 	mov	qword ptr [rsp], rax
 100328c:	e8 ef d7 04 00 	call	317423 <_runtime.systemstack>
 1003291:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1003296:	48 83 ec 80 	sub	rsp, -128
 100329a:	c3 	ret
 100329b:	45 31 c0 	xor	r8d, r8d
 100329e:	31 db 	xor	ebx, ebx
 10032a0:	e9 3c fd ff ff 	jmp	-708 <_runtime.cgoCheckTypedBlock+0x61>
 10032a5:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 10032a9:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 10032b1:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10032b5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10032ba:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10032bf:	48 89 7c 24 18 	mov	qword ptr [rsp + 24], rdi
 10032c4:	e8 47 00 00 00 	call	71 <_runtime.cgoCheckBits>
 10032c9:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 10032ce:	48 83 ec 80 	sub	rsp, -128
 10032d2:	c3 	ret
 10032d3:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 10032d8:	48 83 ec 80 	sub	rsp, -128
 10032dc:	c3 	ret
 10032dd:	48 8d 05 be 2f 07 00 	lea	rax, [rip + 470974]
 10032e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10032e8:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 10032f1:	e8 6a 5a 02 00 	call	154218 <_runtime.throw>
 10032f6:	b9 00 00 40 00 	mov	ecx, 4194304
 10032fb:	e8 60 00 05 00 	call	327776 <_runtime.panicIndexU>
 1003300:	b9 00 00 40 00 	mov	ecx, 4194304
 1003305:	e8 56 00 05 00 	call	327766 <_runtime.panicIndexU>
 100330a:	90 	nop
 100330b:	cc 	int3
 100330c:	cc 	int3
 100330d:	cc 	int3
 100330e:	cc 	int3
 100330f:	cc 	int3

_runtime.cgoCheckBits:
 1003310:	48 83 ec 40 	sub	rsp, 64
 1003314:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1003319:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 100331e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1003323:	48 89 c1 	mov	rcx, rax
 1003326:	48 c1 e8 06 	shr	rax, 6
 100332a:	48 89 c2 	mov	rdx, rax
 100332d:	48 c1 e0 06 	shl	rax, 6
 1003331:	90 	nop
 1003332:	90 	nop
 1003333:	48 29 c1 	sub	rcx, rax
 1003336:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 100333b:	48 01 cb 	add	rbx, rcx
 100333e:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 1003343:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 1003348:	48 01 f2 	add	rdx, rsi
 100334b:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1003350:	48 01 f0 	add	rax, rsi
 1003353:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1003358:	31 f6 	xor	esi, esi
 100335a:	31 ff 	xor	edi, edi
 100335c:	eb 04 	jmp	4 <_runtime.cgoCheckBits+0x52>
 100335e:	48 83 c6 08 	add	rsi, 8
 1003362:	48 39 de 	cmp	rsi, rbx
 1003365:	73 6b 	jae	107 <_runtime.cgoCheckBits+0xc2>
 1003367:	48 f7 c6 3f 00 00 00 	test	rsi, 63
 100336e:	75 5e 	jne	94 <_runtime.cgoCheckBits+0xbe>
 1003370:	0f b6 3a 	movzx	edi, byte ptr [rdx]
 1003373:	90 	nop
 1003374:	48 ff c2 	inc	rdx
 1003377:	48 85 c9 	test	rcx, rcx
 100337a:	76 06 	jbe	6 <_runtime.cgoCheckBits+0x72>
 100337c:	48 83 c1 f8 	add	rcx, -8
 1003380:	eb dc 	jmp	-36 <_runtime.cgoCheckBits+0x4e>
 1003382:	0f ba e7 00 	bt	edi, 0
 1003386:	73 d6 	jae	-42 <_runtime.cgoCheckBits+0x4e>
 1003388:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 100338d:	89 7c 24 14 	mov	dword ptr [rsp + 20], edi
 1003391:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1003396:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100339b:	48 8b 0c 06 	mov	rcx, qword ptr [rsi + rax]
 100339f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10033a3:	e8 98 f8 ff ff 	call	-1896 <_runtime.cgoIsGoPointer>
 10033a8:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 10033ad:	75 2d 	jne	45 <_runtime.cgoCheckBits+0xcc>
 10033af:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10033b4:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10033b9:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 10033be:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 10033c3:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 10033c8:	8b 7c 24 14 	mov	edi, dword ptr [rsp + 20]
 10033cc:	eb 90 	jmp	-112 <_runtime.cgoCheckBits+0x4e>
 10033ce:	d1 ef 	shr	edi
 10033d0:	eb a5 	jmp	-91 <_runtime.cgoCheckBits+0x67>
 10033d2:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10033d7:	48 83 c4 40 	add	rsp, 64
 10033db:	c3 	ret
 10033dc:	48 8d 05 bf 2e 07 00 	lea	rax, [rip + 470719]
 10033e3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10033e7:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 10033f0:	e8 6b 59 02 00 	call	153963 <_runtime.throw>
 10033f5:	90 	nop
 10033f6:	cc 	int3
 10033f7:	cc 	int3
 10033f8:	cc 	int3
 10033f9:	cc 	int3
 10033fa:	cc 	int3
 10033fb:	cc 	int3
 10033fc:	cc 	int3
 10033fd:	cc 	int3
 10033fe:	cc 	int3
 10033ff:	cc 	int3

_runtime.cgoCheckUsingType:
 1003400:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1003409:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 100340d:	0f 86 3c 02 00 00 	jbe	572 <_runtime.cgoCheckUsingType+0x24f>
 1003413:	48 83 ec 70 	sub	rsp, 112
 1003417:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 100341c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1003421:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1003426:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 100342a:	48 85 c9 	test	rcx, rcx
 100342d:	0f 84 f8 01 00 00 	je	504 <_runtime.cgoCheckUsingType+0x22b>
 1003433:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 100343b:	48 39 d1 	cmp	rcx, rdx
 100343e:	0f 86 dd 01 00 00 	jbe	477 <_runtime.cgoCheckUsingType+0x221>
 1003444:	48 29 d1 	sub	rcx, rdx
 1003447:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 100344f:	48 39 cb 	cmp	rbx, rcx
 1003452:	48 0f 47 d9 	cmova	rbx, rcx
 1003456:	0f b6 48 17 	movzx	ecx, byte ptr [rax + 23]
 100345a:	f6 c1 40 	test	cl, 64
 100345d:	0f 84 90 01 00 00 	je	400 <_runtime.cgoCheckUsingType+0x1f3>
 1003463:	83 e1 1f 	and	ecx, 31
 1003466:	80 f9 11 	cmp	cl, 17
 1003469:	0f 85 ab 00 00 00 	jne	171 <_runtime.cgoCheckUsingType+0x11a>
 100346f:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1003477:	31 f6 	xor	esi, esi
 1003479:	eb 09 	jmp	9 <_runtime.cgoCheckUsingType+0x84>
 100347b:	48 ff c6 	inc	rsi
 100347e:	48 29 fb 	sub	rbx, rdi
 1003481:	4c 89 c2 	mov	rdx, r8
 1003484:	48 39 70 40 	cmp	qword ptr [rax + 64], rsi
 1003488:	0f 86 82 00 00 00 	jbe	130 <_runtime.cgoCheckUsingType+0x110>
 100348e:	48 8b 78 30 	mov	rdi, qword ptr [rax + 48]
 1003492:	48 39 17 	cmp	qword ptr [rdi], rdx
 1003495:	77 2c 	ja	44 <_runtime.cgoCheckUsingType+0xc3>
 1003497:	48 8b 78 30 	mov	rdi, qword ptr [rax + 48]
 100349b:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 100349e:	48 39 fa 	cmp	rdx, rdi
 10034a1:	49 89 d0 	mov	r8, rdx
 10034a4:	48 0f 47 d7 	cmova	rdx, rdi
 10034a8:	49 89 f9 	mov	r9, rdi
 10034ab:	48 29 d7 	sub	rdi, rdx
 10034ae:	49 29 d0 	sub	r8, rdx
 10034b1:	4c 01 c9 	add	rcx, r9
 10034b4:	48 39 fb 	cmp	rbx, rdi
 10034b7:	77 c2 	ja	-62 <_runtime.cgoCheckUsingType+0x7b>
 10034b9:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 10034be:	48 83 c4 70 	add	rsp, 112
 10034c2:	c3 	ret
 10034c3:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 10034c8:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 10034d0:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 10034d5:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10034da:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 10034de:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10034e3:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10034e8:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 10034ed:	e8 0e ff ff ff 	call	-242 <_runtime.cgoCheckUsingType>
 10034f2:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10034f7:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10034fc:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1003501:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1003509:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 100350e:	eb 87 	jmp	-121 <_runtime.cgoCheckUsingType+0x97>
 1003510:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 1003515:	48 83 c4 70 	add	rsp, 112
 1003519:	c3 	ret
 100351a:	80 f9 19 	cmp	cl, 25
 100351d:	0f 85 12 01 00 00 	jne	274 <_runtime.cgoCheckUsingType+0x235>
 1003523:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 1003527:	48 8b 40 38 	mov	rax, qword ptr [rax + 56]
 100352b:	48 85 c9 	test	rcx, rcx
 100352e:	7e e0 	jle	-32 <_runtime.cgoCheckUsingType+0x110>
 1003530:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1003535:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 100353d:	31 ff 	xor	edi, edi
 100353f:	eb 0d 	jmp	13 <_runtime.cgoCheckUsingType+0x14e>
 1003541:	48 83 c0 18 	add	rax, 24
 1003545:	48 89 f7 	mov	rdi, rsi
 1003548:	48 89 d6 	mov	rsi, rdx
 100354b:	4c 89 ca 	mov	rdx, r9
 100354e:	4c 8b 40 08 	mov	r8, qword ptr [rax + 8]
 1003552:	49 39 10 	cmp	qword ptr [r8], rdx
 1003555:	77 38 	ja	56 <_runtime.cgoCheckUsingType+0x18f>
 1003557:	4d 8b 00 	mov	r8, qword ptr [r8]
 100355a:	4c 39 c2 	cmp	rdx, r8
 100355d:	49 89 d1 	mov	r9, rdx
 1003560:	49 0f 47 d0 	cmova	rdx, r8
 1003564:	90 	nop
 1003565:	4d 89 c2 	mov	r10, r8
 1003568:	49 29 d0 	sub	r8, rdx
 100356b:	49 29 d1 	sub	r9, rdx
 100356e:	4a 8d 14 16 	lea	rdx, [rsi + r10]
 1003572:	4c 39 c3 	cmp	rbx, r8
 1003575:	76 0e 	jbe	14 <_runtime.cgoCheckUsingType+0x185>
 1003577:	48 8d 77 01 	lea	rsi, [rdi + 1]
 100357b:	4c 29 c3 	sub	rbx, r8
 100357e:	48 39 ce 	cmp	rsi, rcx
 1003581:	7c be 	jl	-66 <_runtime.cgoCheckUsingType+0x141>
 1003583:	eb 8b 	jmp	-117 <_runtime.cgoCheckUsingType+0x110>
 1003585:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 100358a:	48 83 c4 70 	add	rsp, 112
 100358e:	c3 	ret
 100358f:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1003594:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1003599:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 100359e:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 10035a6:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 10035ab:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 10035b0:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10035b4:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 10035b9:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10035be:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 10035c3:	e8 38 fe ff ff 	call	-456 <_runtime.cgoCheckUsingType>
 10035c8:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10035cd:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10035d2:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10035d7:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 10035df:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 10035e4:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 10035e9:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 10035ee:	e9 64 ff ff ff 	jmp	-156 <_runtime.cgoCheckUsingType+0x157>
 10035f3:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 10035f7:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 10035ff:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1003603:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003608:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100360d:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1003612:	e8 f9 fc ff ff 	call	-775 <_runtime.cgoCheckBits>
 1003617:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 100361c:	48 83 c4 70 	add	rsp, 112
 1003620:	c3 	ret
 1003621:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 1003626:	48 83 c4 70 	add	rsp, 112
 100362a:	c3 	ret
 100362b:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 1003630:	48 83 c4 70 	add	rsp, 112
 1003634:	c3 	ret
 1003635:	48 8d 05 4f ff 06 00 	lea	rax, [rip + 458575]
 100363c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003640:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1003649:	e8 12 57 02 00 	call	153362 <_runtime.throw>
 100364e:	90 	nop
 100364f:	e8 ac d0 03 00 	call	250028 <_runtime.morestackc>
 1003654:	e9 a7 fd ff ff 	jmp	-601 <_runtime.cgoCheckUsingType>
 1003659:	cc 	int3
 100365a:	cc 	int3
 100365b:	cc 	int3
 100365c:	cc 	int3
 100365d:	cc 	int3
 100365e:	cc 	int3
 100365f:	cc 	int3

_runtime.makechan:
 1003660:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1003669:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100366d:	0f 86 09 02 00 00 	jbe	521 <_runtime.makechan+0x21c>
 1003673:	48 83 ec 40 	sub	rsp, 64
 1003677:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 100367c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1003681:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1003686:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 100368a:	48 8b 01 	mov	rax, qword ptr [rcx]
 100368d:	48 3d 00 00 01 00 	cmp	rax, 65536
 1003693:	0f 83 c9 01 00 00 	jae	457 <_runtime.makechan+0x202>
 1003699:	80 79 15 08 	cmp	byte ptr [rcx + 21], 8
 100369d:	0f 87 a6 01 00 00 	ja	422 <_runtime.makechan+0x1e9>
 10036a3:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10036a8:	48 f7 e2 	mul	rdx
 10036ab:	0f 80 7c 01 00 00 	jo	380 <_runtime.makechan+0x1cd>
 10036b1:	48 ba a0 ff ff ff ff ff 00 00 	movabs	rdx, 281474976710560
 10036bb:	48 39 d0 	cmp	rax, rdx
 10036be:	0f 87 69 01 00 00 	ja	361 <_runtime.makechan+0x1cd>
 10036c4:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10036c9:	48 85 d2 	test	rdx, rdx
 10036cc:	0f 8c 5b 01 00 00 	jl	347 <_runtime.makechan+0x1cd>
 10036d2:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 10036d7:	48 85 c0 	test	rax, rax
 10036da:	0f 84 02 01 00 00 	je	258 <_runtime.makechan+0x182>
 10036e0:	48 83 79 08 00 	cmp	qword ptr [rcx + 8], 0
 10036e5:	0f 85 8c 00 00 00 	jne	140 <_runtime.makechan+0x117>
 10036eb:	48 83 c0 60 	add	rax, 96
 10036ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10036f3:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10036fc:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 1003701:	e8 aa 61 00 00 	call	25002 <_runtime.mallocgc>
 1003706:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100370b:	84 00 	test	byte ptr [rax], al
 100370d:	48 8d 48 60 	lea	rcx, [rax + 96]
 1003711:	83 3d e8 41 0f 00 00 	cmp	dword ptr [rip + 999912], 0
 1003718:	75 49 	jne	73 <_runtime.makechan+0x103>
 100371a:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 100371e:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1003723:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1003726:	66 89 50 18 	mov	word ptr [rax + 24], dx
 100372a:	83 3d cf 41 0f 00 00 	cmp	dword ptr [rip + 999887], 0
 1003731:	75 1c 	jne	28 <_runtime.makechan+0xef>
 1003733:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 1003737:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 100373c:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1003740:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1003745:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 100374a:	48 83 c4 40 	add	rsp, 64
 100374e:	c3 	ret
 100374f:	48 8d 78 20 	lea	rdi, [rax + 32]
 1003753:	48 89 c2 	mov	rdx, rax
 1003756:	48 89 c8 	mov	rax, rcx
 1003759:	e8 82 f2 04 00 	call	324226 <_runtime.gcWriteBarrier>
 100375e:	48 89 d0 	mov	rax, rdx
 1003761:	eb d4 	jmp	-44 <_runtime.makechan+0xd7>
 1003763:	48 8d 78 10 	lea	rdi, [rax + 16]
 1003767:	48 89 c2 	mov	rdx, rax
 100376a:	48 89 c8 	mov	rax, rcx
 100376d:	e8 6e f2 04 00 	call	324206 <_runtime.gcWriteBarrier>
 1003772:	48 89 d0 	mov	rax, rdx
 1003775:	eb a7 	jmp	-89 <_runtime.makechan+0xbe>
 1003777:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100377c:	48 8d 05 bd b2 06 00 	lea	rax, [rip + 438973]
 1003783:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003787:	e8 74 6c 00 00 	call	27764 <_runtime.newobject>
 100378c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1003791:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1003796:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100379b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100379f:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10037a4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10037a9:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10037ae:	e8 fd 60 00 00 	call	24829 <_runtime.mallocgc>
 10037b3:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10037b8:	83 3d 41 41 0f 00 00 	cmp	dword ptr [rip + 999745], 0
 10037bf:	75 11 	jne	17 <_runtime.makechan+0x172>
 10037c1:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10037c6:	48 89 41 10 	mov	qword ptr [rcx + 16], rax
 10037ca:	48 89 c8 	mov	rax, rcx
 10037cd:	e9 4c ff ff ff 	jmp	-180 <_runtime.makechan+0xbe>
 10037d2:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10037d7:	48 8d 79 10 	lea	rdi, [rcx + 16]
 10037db:	e8 00 f2 04 00 	call	324096 <_runtime.gcWriteBarrier>
 10037e0:	eb e8 	jmp	-24 <_runtime.makechan+0x16a>
 10037e2:	48 c7 04 24 60 00 00 00 	mov	qword ptr [rsp], 96
 10037ea:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10037f3:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10037f8:	e8 b3 60 00 00 	call	24755 <_runtime.mallocgc>
 10037fd:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1003802:	84 00 	test	byte ptr [rax], al
 1003804:	48 8d 78 10 	lea	rdi, [rax + 16]
 1003808:	83 3d f1 40 0f 00 00 	cmp	dword ptr [rip + 999665], 0
 100380f:	75 09 	jne	9 <_runtime.makechan+0x1ba>
 1003811:	48 89 78 10 	mov	qword ptr [rax + 16], rdi
 1003815:	e9 04 ff ff ff 	jmp	-252 <_runtime.makechan+0xbe>
 100381a:	48 89 c1 	mov	rcx, rax
 100381d:	48 89 f8 	mov	rax, rdi
 1003820:	e8 bb f1 04 00 	call	324027 <_runtime.gcWriteBarrier>
 1003825:	48 89 c8 	mov	rax, rcx
 1003828:	e9 f1 fe ff ff 	jmp	-271 <_runtime.makechan+0xbe>
 100382d:	48 8d 05 cc ff 05 00 	lea	rax, [rip + 393164]
 1003834:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003838:	48 8d 05 91 01 08 00 	lea	rax, [rip + 524689]
 100383f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003844:	e8 77 4d 02 00 	call	150903 <_runtime.gopanic>
 1003849:	48 8d 05 47 10 07 00 	lea	rax, [rip + 462919]
 1003850:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003854:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 100385d:	e8 fe 54 02 00 	call	152830 <_runtime.throw>
 1003862:	48 8d 05 85 2d 07 00 	lea	rax, [rip + 470405]
 1003869:	48 89 04 24 	mov	qword ptr [rsp], rax
 100386d:	48 c7 44 24 08 26 00 00 00 	mov	qword ptr [rsp + 8], 38
 1003876:	e8 e5 54 02 00 	call	152805 <_runtime.throw>
 100387b:	90 	nop
 100387c:	e8 4f d3 04 00 	call	316239 <_runtime.morestack_noctxt>
 1003881:	e9 da fd ff ff 	jmp	-550 <_runtime.makechan>
 1003886:	cc 	int3
 1003887:	cc 	int3
 1003888:	cc 	int3
 1003889:	cc 	int3
 100388a:	cc 	int3
 100388b:	cc 	int3
 100388c:	cc 	int3
 100388d:	cc 	int3
 100388e:	cc 	int3
 100388f:	cc 	int3

_runtime.chansend1:
 1003890:	48 83 ec 30 	sub	rsp, 48
 1003894:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1003899:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100389e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10038a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10038a7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10038ac:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10038b1:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10038b6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10038bb:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10038c0:	e8 0b 00 00 00 	call	11 <_runtime.chansend>
 10038c5:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10038ca:	48 83 c4 30 	add	rsp, 48
 10038ce:	c3 	ret
 10038cf:	cc 	int3

_runtime.chansend:
 10038d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10038d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10038dd:	0f 86 f8 05 00 00 	jbe	1528 <_runtime.chansend+0x60b>
 10038e3:	48 83 ec 78 	sub	rsp, 120
 10038e7:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 10038ec:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 10038f1:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10038f9:	48 85 c0 	test	rax, rax
 10038fc:	0f 84 09 05 00 00 	je	1289 <_runtime.chansend+0x53b>
 1003902:	0f b6 8c 24 90 00 00 00 	movzx	ecx, byte ptr [rsp + 144]
 100390a:	84 c9 	test	cl, cl
 100390c:	75 32 	jne	50 <_runtime.chansend+0x70>
 100390e:	83 78 1c 00 	cmp	dword ptr [rax + 28], 0
 1003912:	75 2c 	jne	44 <_runtime.chansend+0x70>
 1003914:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1003918:	48 85 d2 	test	rdx, rdx
 100391b:	75 0a 	jne	10 <_runtime.chansend+0x57>
 100391d:	48 83 78 38 00 	cmp	qword ptr [rax + 56], 0
 1003922:	74 0a 	je	10 <_runtime.chansend+0x5e>
 1003924:	48 85 d2 	test	rdx, rdx
 1003927:	76 17 	jbe	23 <_runtime.chansend+0x70>
 1003929:	48 39 10 	cmp	qword ptr [rax], rdx
 100392c:	75 12 	jne	18 <_runtime.chansend+0x70>
 100392e:	c6 84 24 a0 00 00 00 00 	mov	byte ptr [rsp + 160], 0
 1003936:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 100393b:	48 83 c4 78 	add	rsp, 120
 100393f:	c3 	ret
 1003940:	48 83 3d b0 3e 0f 00 00 	cmp	qword ptr [rip + 999088], 0
 1003948:	0f 87 a7 04 00 00 	ja	1191 <_runtime.chansend+0x525>
 100394e:	31 d2 	xor	edx, edx
 1003950:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1003955:	48 8d 48 58 	lea	rcx, [rax + 88]
 1003959:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100395e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1003962:	e8 c9 47 00 00 	call	18377 <_runtime.lock>
 1003967:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100396f:	83 78 1c 00 	cmp	dword ptr [rax + 28], 0
 1003973:	0f 85 02 05 00 00 	jne	1282 <_runtime.chansend+0x5ab>
 1003979:	48 8d 48 38 	lea	rcx, [rax + 56]
 100397d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1003981:	e8 2a 13 00 00 	call	4906 <_runtime.(*waitq).dequeue>
 1003986:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100398b:	48 85 c0 	test	rax, rax
 100398e:	0f 85 00 04 00 00 	jne	1024 <_runtime.chansend+0x4c4>
 1003994:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100399c:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 10039a0:	48 39 08 	cmp	qword ptr [rax], rcx
 10039a3:	0f 82 78 03 00 00 	jb	888 <_runtime.chansend+0x451>
 10039a9:	0f b6 8c 24 90 00 00 00 	movzx	ecx, byte ptr [rsp + 144]
 10039b1:	84 c9 	test	cl, cl
 10039b3:	75 20 	jne	32 <_runtime.chansend+0x105>
 10039b5:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10039ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 10039be:	e8 4d 49 00 00 	call	18765 <_runtime.unlock>
 10039c3:	c6 84 24 a0 00 00 00 00 	mov	byte ptr [rsp + 160], 0
 10039cb:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 10039d0:	48 83 c4 78 	add	rsp, 120
 10039d4:	c3 	ret
 10039d5:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10039de:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10039e3:	e8 08 7f 02 00 	call	163592 <_runtime.acquireSudog>
 10039e8:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10039ec:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 10039f4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10039f9:	48 85 c9 	test	rcx, rcx
 10039fc:	74 08 	je	8 <_runtime.chansend+0x136>
 10039fe:	48 c7 40 30 ff ff ff ff 	mov	qword ptr [rax + 48], -1
 1003a06:	83 3d f3 3e 0f 00 00 	cmp	dword ptr [rip + 999155], 0
 1003a0d:	0f 85 cf 02 00 00 	jne	719 <_runtime.chansend+0x412>
 1003a13:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1003a1b:	48 89 50 20 	mov	qword ptr [rax + 32], rdx
 1003a1f:	48 c7 40 48 00 00 00 00 	mov	qword ptr [rax + 72], 0
 1003a27:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1003a2c:	48 89 18 	mov	qword ptr [rax], rbx
 1003a2f:	c6 40 08 00 	mov	byte ptr [rax + 8], 0
 1003a33:	48 8d 78 58 	lea	rdi, [rax + 88]
 1003a37:	83 3d c2 3e 0f 00 00 	cmp	dword ptr [rip + 999106], 0
 1003a3e:	0f 85 7e 02 00 00 	jne	638 <_runtime.chansend+0x3f2>
 1003a44:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 1003a4c:	48 89 70 58 	mov	qword ptr [rax + 88], rsi
 1003a50:	84 03 	test	byte ptr [rbx], al
 1003a52:	4c 8d 83 38 01 00 00 	lea	r8, [rbx + 312]
 1003a59:	4c 8d 8b 88 00 00 00 	lea	r9, [rbx + 136]
 1003a60:	83 3d 99 3e 0f 00 00 	cmp	dword ptr [rip + 999065], 0
 1003a67:	0f 85 32 02 00 00 	jne	562 <_runtime.chansend+0x3cf>
 1003a6d:	48 89 83 38 01 00 00 	mov	qword ptr [rbx + 312], rax
 1003a74:	48 c7 83 88 00 00 00 00 00 00 00 	mov	qword ptr [rbx + 136], 0
 1003a7f:	90 	nop
 1003a80:	83 3d 79 3e 0f 00 00 	cmp	dword ptr [rip + 999033], 0
 1003a87:	0f 85 f3 01 00 00 	jne	499 <_runtime.chansend+0x3b0>
 1003a8d:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 1003a95:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1003a9a:	48 89 7c 24 50 	mov	qword ptr [rsp + 80], rdi
 1003a9f:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 1003aa4:	4c 89 4c 24 40 	mov	qword ptr [rsp + 64], r9
 1003aa9:	4c 8d 56 50 	lea	r10, [rsi + 80]
 1003aad:	4c 8b 5e 50 	mov	r11, qword ptr [rsi + 80]
 1003ab1:	4d 85 db 	test	r11, r11
 1003ab4:	0f 84 78 01 00 00 	je	376 <_runtime.chansend+0x362>
 1003aba:	83 3d 3f 3e 0f 00 00 	cmp	dword ptr [rip + 998975], 0
 1003ac1:	0f 85 3a 01 00 00 	jne	314 <_runtime.chansend+0x331>
 1003ac7:	4c 89 58 18 	mov	qword ptr [rax + 24], r11
 1003acb:	49 89 43 10 	mov	qword ptr [r11 + 16], rax
 1003acf:	48 89 46 50 	mov	qword ptr [rsi + 80], rax
 1003ad3:	48 8d 05 9e 3c 07 00 	lea	rax, [rip + 474270]
 1003ada:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003ade:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1003ae3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003ae8:	66 c7 44 24 10 0f 16 	mov	word ptr [rsp + 16], 5647
 1003aef:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1003af8:	e8 43 7c 02 00 	call	162883 <_runtime.gopark>
 1003afd:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1003b02:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1003b07:	48 39 81 38 01 00 00 	cmp	qword ptr [rcx + 312], rax
 1003b0e:	0f 85 4e 03 00 00 	jne	846 <_runtime.chansend+0x592>
 1003b14:	83 3d e5 3d 0f 00 00 	cmp	dword ptr [rip + 998885], 0
 1003b1b:	0f 85 c9 00 00 00 	jne	201 <_runtime.chansend+0x31a>
 1003b21:	48 c7 81 38 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 312], 0
 1003b2c:	c6 81 b8 00 00 00 00 	mov	byte ptr [rcx + 184], 0
 1003b33:	48 83 b9 88 00 00 00 00 	cmp	qword ptr [rcx + 136], 0
 1003b3b:	0f 84 92 00 00 00 	je	146 <_runtime.chansend+0x303>
 1003b41:	83 3d b8 3d 0f 00 00 	cmp	dword ptr [rip + 998840], 0
 1003b48:	75 75 	jne	117 <_runtime.chansend+0x2ef>
 1003b4a:	48 c7 81 88 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 136], 0
 1003b55:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1003b59:	48 85 c9 	test	rcx, rcx
 1003b5c:	7f 40 	jg	64 <_runtime.chansend+0x2ce>
 1003b5e:	83 3d 9b 3d 0f 00 00 	cmp	dword ptr [rip + 998811], 0
 1003b65:	75 23 	jne	35 <_runtime.chansend+0x2ba>
 1003b67:	48 c7 40 58 00 00 00 00 	mov	qword ptr [rax + 88], 0
 1003b6f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003b73:	e8 08 81 02 00 	call	164104 <_runtime.releaseSudog>
 1003b78:	c6 84 24 a0 00 00 00 01 	mov	byte ptr [rsp + 160], 1
 1003b80:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1003b85:	48 83 c4 78 	add	rsp, 120
 1003b89:	c3 	ret
 1003b8a:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 1003b8f:	48 89 c1 	mov	rcx, rax
 1003b92:	31 c0 	xor	eax, eax
 1003b94:	e8 47 ee 04 00 	call	323143 <_runtime.gcWriteBarrier>
 1003b99:	48 89 c8 	mov	rax, rcx
 1003b9c:	eb d1 	jmp	-47 <_runtime.chansend+0x29f>
 1003b9e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1003ba3:	48 29 c1 	sub	rcx, rax
 1003ba6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1003baa:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1003bb3:	e8 58 04 02 00 	call	132184 <_runtime.blockevent>
 1003bb8:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1003bbd:	eb 9f 	jmp	-97 <_runtime.chansend+0x28e>
 1003bbf:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 1003bc4:	48 89 c1 	mov	rcx, rax
 1003bc7:	31 c0 	xor	eax, eax
 1003bc9:	e8 12 ee 04 00 	call	323090 <_runtime.gcWriteBarrier>
 1003bce:	48 89 c8 	mov	rax, rcx
 1003bd1:	eb 82 	jmp	-126 <_runtime.chansend+0x285>
 1003bd3:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1003bdb:	83 78 1c 00 	cmp	dword ptr [rax + 28], 0
 1003bdf:	0f 84 48 02 00 00 	je	584 <_runtime.chansend+0x55d>
 1003be5:	e9 5c 02 00 00 	jmp	604 <_runtime.chansend+0x576>
 1003bea:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 1003bef:	48 89 c2 	mov	rdx, rax
 1003bf2:	31 c0 	xor	eax, eax
 1003bf4:	e8 e7 ed 04 00 	call	323047 <_runtime.gcWriteBarrier>
 1003bf9:	48 89 d0 	mov	rax, rdx
 1003bfc:	e9 2b ff ff ff 	jmp	-213 <_runtime.chansend+0x25c>
 1003c01:	4c 8d 60 18 	lea	r12, [rax + 24]
 1003c05:	49 89 fd 	mov	r13, rdi
 1003c08:	4c 89 e7 	mov	rdi, r12
 1003c0b:	49 89 c6 	mov	r14, rax
 1003c0e:	4c 89 d8 	mov	rax, r11
 1003c11:	e8 ca ed 04 00 	call	323018 <_runtime.gcWriteBarrier>
 1003c16:	48 8d 78 10 	lea	rdi, [rax + 16]
 1003c1a:	4c 89 f0 	mov	rax, r14
 1003c1d:	e8 be ed 04 00 	call	323006 <_runtime.gcWriteBarrier>
 1003c22:	4c 89 d7 	mov	rdi, r10
 1003c25:	e8 b6 ed 04 00 	call	322998 <_runtime.gcWriteBarrier>
 1003c2a:	4c 89 ef 	mov	rdi, r13
 1003c2d:	e9 a1 fe ff ff 	jmp	-351 <_runtime.chansend+0x203>
 1003c32:	83 3d c7 3c 0f 00 00 	cmp	dword ptr [rip + 998599], 0
 1003c39:	75 15 	jne	21 <_runtime.chansend+0x380>
 1003c3b:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 1003c43:	48 89 46 48 	mov	qword ptr [rsi + 72], rax
 1003c47:	48 89 46 50 	mov	qword ptr [rsi + 80], rax
 1003c4b:	e9 83 fe ff ff 	jmp	-381 <_runtime.chansend+0x203>
 1003c50:	4c 8d 58 18 	lea	r11, [rax + 24]
 1003c54:	49 89 fc 	mov	r12, rdi
 1003c57:	4c 89 df 	mov	rdi, r11
 1003c5a:	49 89 c5 	mov	r13, rax
 1003c5d:	31 c0 	xor	eax, eax
 1003c5f:	e8 7c ed 04 00 	call	322940 <_runtime.gcWriteBarrier>
 1003c64:	48 8d 7e 48 	lea	rdi, [rsi + 72]
 1003c68:	4c 89 e8 	mov	rax, r13
 1003c6b:	e8 70 ed 04 00 	call	322928 <_runtime.gcWriteBarrier>
 1003c70:	4c 89 d7 	mov	rdi, r10
 1003c73:	e8 68 ed 04 00 	call	322920 <_runtime.gcWriteBarrier>
 1003c78:	4c 89 e7 	mov	rdi, r12
 1003c7b:	e9 53 fe ff ff 	jmp	-429 <_runtime.chansend+0x203>
 1003c80:	4c 8d 50 10 	lea	r10, [rax + 16]
 1003c84:	49 89 fb 	mov	r11, rdi
 1003c87:	4c 89 d7 	mov	rdi, r10
 1003c8a:	49 89 c4 	mov	r12, rax
 1003c8d:	31 c0 	xor	eax, eax
 1003c8f:	e8 4c ed 04 00 	call	322892 <_runtime.gcWriteBarrier>
 1003c94:	4c 89 e0 	mov	rax, r12
 1003c97:	4c 89 df 	mov	rdi, r11
 1003c9a:	e9 f6 fd ff ff 	jmp	-522 <_runtime.chansend+0x1c5>
 1003c9f:	49 89 fa 	mov	r10, rdi
 1003ca2:	4c 89 c7 	mov	rdi, r8
 1003ca5:	e8 36 ed 04 00 	call	322870 <_runtime.gcWriteBarrier>
 1003caa:	4c 89 cf 	mov	rdi, r9
 1003cad:	49 89 c3 	mov	r11, rax
 1003cb0:	31 c0 	xor	eax, eax
 1003cb2:	e8 29 ed 04 00 	call	322857 <_runtime.gcWriteBarrier>
 1003cb7:	4c 89 d8 	mov	rax, r11
 1003cba:	4c 89 d7 	mov	rdi, r10
 1003cbd:	e9 bd fd ff ff 	jmp	-579 <_runtime.chansend+0x1af>
 1003cc2:	48 89 c6 	mov	rsi, rax
 1003cc5:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1003ccd:	e8 0e ed 04 00 	call	322830 <_runtime.gcWriteBarrier>
 1003cd2:	48 89 f0 	mov	rax, rsi
 1003cd5:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 1003cdd:	e9 6e fd ff ff 	jmp	-658 <_runtime.chansend+0x180>
 1003ce2:	48 8d 78 20 	lea	rdi, [rax + 32]
 1003ce6:	48 89 c2 	mov	rdx, rax
 1003ce9:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1003cf1:	e8 ea ec 04 00 	call	322794 <_runtime.gcWriteBarrier>
 1003cf6:	48 8d 7a 48 	lea	rdi, [rdx + 72]
 1003cfa:	48 89 c3 	mov	rbx, rax
 1003cfd:	31 c0 	xor	eax, eax
 1003cff:	e8 dc ec 04 00 	call	322780 <_runtime.gcWriteBarrier>
 1003d04:	48 89 d7 	mov	rdi, rdx
 1003d07:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1003d0c:	e8 cf ec 04 00 	call	322767 <_runtime.gcWriteBarrier>
 1003d11:	48 89 f8 	mov	rax, rdi
 1003d14:	48 89 da 	mov	rdx, rbx
 1003d17:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1003d1c:	e9 0e fd ff ff 	jmp	-754 <_runtime.chansend+0x15f>
 1003d21:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 1003d25:	48 8b 50 20 	mov	rdx, qword ptr [rax + 32]
 1003d29:	0f b7 58 18 	movzx	ebx, word ptr [rax + 24]
 1003d2d:	48 0f af cb 	imul	rcx, rbx
 1003d31:	48 03 48 10 	add	rcx, qword ptr [rax + 16]
 1003d35:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1003d39:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1003d3e:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1003d46:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1003d4b:	e8 90 93 00 00 	call	37776 <_runtime.typedmemmove>
 1003d50:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1003d58:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 1003d5c:	48 ff c1 	inc	rcx
 1003d5f:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 1003d63:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1003d67:	75 08 	jne	8 <_runtime.chansend+0x4a1>
 1003d69:	48 c7 40 28 00 00 00 00 	mov	qword ptr [rax + 40], 0
 1003d71:	48 ff 00 	inc	qword ptr [rax]
 1003d74:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1003d79:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003d7d:	e8 8e 45 00 00 	call	17806 <_runtime.unlock>
 1003d82:	c6 84 24 a0 00 00 00 01 	mov	byte ptr [rsp + 160], 1
 1003d8a:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1003d8f:	48 83 c4 78 	add	rsp, 120
 1003d93:	c3 	ret
 1003d94:	0f 57 c0 	xorps	xmm0, xmm0
 1003d97:	0f 11 44 24 60 	movups	xmmword ptr [rsp + 96], xmm0
 1003d9c:	48 8d 0d 0d 98 04 00 	lea	rcx, [rip + 301069]
 1003da3:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1003da8:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1003db0:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1003db5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1003db9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003dbe:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1003dc6:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1003dcb:	48 8d 44 24 60 	lea	rax, [rsp + 96]
 1003dd0:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1003dd5:	48 c7 44 24 20 03 00 00 00 	mov	qword ptr [rsp + 32], 3
 1003dde:	e8 0d 01 00 00 	call	269 <_runtime.send>
 1003de3:	c6 84 24 a0 00 00 00 01 	mov	byte ptr [rsp + 160], 1
 1003deb:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1003df0:	48 83 c4 78 	add	rsp, 120
 1003df4:	c3 	ret
 1003df5:	e8 46 e5 04 00 	call	320838 <_runtime.cputicks>
 1003dfa:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 1003dfe:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1003e06:	e9 45 fb ff ff 	jmp	-1211 <_runtime.chansend+0x80>
 1003e0b:	0f b6 84 24 90 00 00 00 	movzx	eax, byte ptr [rsp + 144]
 1003e13:	84 c0 	test	al, al
 1003e15:	0f 85 8a 00 00 00 	jne	138 <_runtime.chansend+0x5d5>
 1003e1b:	c6 84 24 a0 00 00 00 00 	mov	byte ptr [rsp + 160], 0
 1003e23:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1003e28:	48 83 c4 78 	add	rsp, 120
 1003e2c:	c3 	ret
 1003e2d:	48 8d 05 30 0e 07 00 	lea	rax, [rip + 462384]
 1003e34:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003e38:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 1003e41:	e8 1a 4f 02 00 	call	151322 <_runtime.throw>
 1003e46:	48 8d 05 b3 f9 05 00 	lea	rax, [rip + 391603]
 1003e4d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003e51:	48 8d 05 f8 fb 07 00 	lea	rax, [rip + 523256]
 1003e58:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003e5d:	e8 5e 47 02 00 	call	149342 <_runtime.gopanic>
 1003e62:	48 8d 05 c6 10 07 00 	lea	rax, [rip + 463046]
 1003e69:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003e6d:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1003e76:	e8 e5 4e 02 00 	call	151269 <_runtime.throw>
 1003e7b:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1003e80:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003e84:	e8 87 44 00 00 	call	17543 <_runtime.unlock>
 1003e89:	48 8d 05 70 f9 05 00 	lea	rax, [rip + 391536]
 1003e90:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003e94:	48 8d 05 75 fb 07 00 	lea	rax, [rip + 523125]
 1003e9b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003ea0:	e8 1b 47 02 00 	call	149275 <_runtime.gopanic>
 1003ea5:	0f 57 c0 	xorps	xmm0, xmm0
 1003ea8:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 1003eac:	66 c7 44 24 10 04 10 	mov	word ptr [rsp + 16], 4100
 1003eb3:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1003ebc:	e8 7f 78 02 00 	call	161919 <_runtime.gopark>
 1003ec1:	48 8d 05 98 f5 06 00 	lea	rax, [rip + 456088]
 1003ec8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003ecc:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1003ed5:	e8 86 4e 02 00 	call	151174 <_runtime.throw>
 1003eda:	90 	nop
 1003edb:	e8 f0 cc 04 00 	call	314608 <_runtime.morestack_noctxt>
 1003ee0:	e9 eb f9 ff ff 	jmp	-1557 <_runtime.chansend>
 1003ee5:	cc 	int3
 1003ee6:	cc 	int3
 1003ee7:	cc 	int3
 1003ee8:	cc 	int3
 1003ee9:	cc 	int3
 1003eea:	cc 	int3
 1003eeb:	cc 	int3
 1003eec:	cc 	int3
 1003eed:	cc 	int3
 1003eee:	cc 	int3
 1003eef:	cc 	int3

_runtime.send:
 1003ef0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1003ef9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1003efd:	0f 86 fe 00 00 00 	jbe	254 <_runtime.send+0x111>
 1003f03:	48 83 ec 28 	sub	rsp, 40
 1003f07:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1003f0c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1003f11:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1003f16:	48 83 78 20 00 	cmp	qword ptr [rax + 32], 0
 1003f1b:	0f 85 8c 00 00 00 	jne	140 <_runtime.send+0xbd>
 1003f21:	48 8b 08 	mov	rcx, qword ptr [rax]
 1003f24:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1003f29:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1003f2e:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1003f31:	ff d3 	call	rbx
 1003f33:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1003f38:	84 00 	test	byte ptr [rax], al
 1003f3a:	83 3d bf 39 0f 00 00 	cmp	dword ptr [rip + 997823], 0
 1003f41:	75 4c 	jne	76 <_runtime.send+0x9f>
 1003f43:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1003f48:	48 89 88 88 00 00 00 	mov	qword ptr [rax + 136], rcx
 1003f4f:	48 83 79 30 00 	cmp	qword ptr [rcx + 48], 0
 1003f54:	75 20 	jne	32 <_runtime.send+0x86>
 1003f56:	48 89 04 24 	mov	qword ptr [rsp], rax
 1003f5a:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1003f5f:	48 ff c0 	inc	rax
 1003f62:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003f67:	e8 14 79 02 00 	call	162068 <_runtime.goready>
 1003f6c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1003f71:	48 83 c4 28 	add	rsp, 40
 1003f75:	c3 	ret
 1003f76:	e8 c5 e3 04 00 	call	320453 <_runtime.cputicks>
 1003f7b:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1003f7f:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1003f84:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 1003f88:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1003f8d:	eb c7 	jmp	-57 <_runtime.send+0x66>
 1003f8f:	48 8d b8 88 00 00 00 	lea	rdi, [rax + 136]
 1003f96:	48 89 c1 	mov	rcx, rax
 1003f99:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1003f9e:	e8 3d ea 04 00 	call	322109 <_runtime.gcWriteBarrier>
 1003fa3:	48 89 c8 	mov	rax, rcx
 1003fa6:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1003fab:	eb a2 	jmp	-94 <_runtime.send+0x5f>
 1003fad:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1003fb2:	48 8b 49 20 	mov	rcx, qword ptr [rcx + 32]
 1003fb6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1003fba:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1003fbf:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1003fc4:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1003fc9:	e8 42 00 00 00 	call	66 <_runtime.sendDirect>
 1003fce:	83 3d 2b 39 0f 00 00 	cmp	dword ptr [rip + 997675], 0
 1003fd5:	75 12 	jne	18 <_runtime.send+0xf9>
 1003fd7:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1003fdc:	48 c7 40 20 00 00 00 00 	mov	qword ptr [rax + 32], 0
 1003fe4:	e9 38 ff ff ff 	jmp	-200 <_runtime.send+0x31>
 1003fe9:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1003fee:	48 8d 79 20 	lea	rdi, [rcx + 32]
 1003ff2:	31 c0 	xor	eax, eax
 1003ff4:	e8 e7 e9 04 00 	call	322023 <_runtime.gcWriteBarrier>
 1003ff9:	48 89 c8 	mov	rax, rcx
 1003ffc:	e9 20 ff ff ff 	jmp	-224 <_runtime.send+0x31>
 1004001:	e8 ca cb 04 00 	call	314314 <_runtime.morestack_noctxt>
 1004006:	e9 e5 fe ff ff 	jmp	-283 <_runtime.send>
 100400b:	cc 	int3
 100400c:	cc 	int3
 100400d:	cc 	int3
 100400e:	cc 	int3
 100400f:	cc 	int3

_runtime.sendDirect:
 1004010:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1004019:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100401d:	76 70 	jbe	112 <_runtime.sendDirect+0x7f>
 100401f:	48 83 ec 30 	sub	rsp, 48
 1004023:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1004028:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100402d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004032:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 1004036:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100403b:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1004040:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1004043:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1004047:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100404c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1004051:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1004056:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 100405b:	e8 f0 a4 00 00 	call	42224 <_runtime.typeBitsBulkBarrier>
 1004060:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1004065:	48 8b 00 	mov	rax, qword ptr [rax]
 1004068:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100406d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1004071:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1004076:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100407b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1004080:	e8 cb fa 04 00 	call	326347 <_runtime.memmove>
 1004085:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100408a:	48 83 c4 30 	add	rsp, 48
 100408e:	c3 	ret
 100408f:	e8 3c cb 04 00 	call	314172 <_runtime.morestack_noctxt>
 1004094:	e9 77 ff ff ff 	jmp	-137 <_runtime.sendDirect>
 1004099:	cc 	int3
 100409a:	cc 	int3
 100409b:	cc 	int3
 100409c:	cc 	int3
 100409d:	cc 	int3
 100409e:	cc 	int3
 100409f:	cc 	int3

_runtime.recvDirect:
 10040a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10040a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10040ad:	76 70 	jbe	112 <_runtime.recvDirect+0x7f>
 10040af:	48 83 ec 30 	sub	rsp, 48
 10040b3:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10040b8:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10040bd:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10040c2:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 10040c6:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10040cb:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10040d0:	48 8b 11 	mov	rdx, qword ptr [rcx]
 10040d3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10040d7:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 10040dc:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10040e1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10040e6:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10040eb:	e8 60 a4 00 00 	call	42080 <_runtime.typeBitsBulkBarrier>
 10040f0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10040f5:	48 8b 00 	mov	rax, qword ptr [rax]
 10040f8:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10040fd:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1004101:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1004106:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100410b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1004110:	e8 3b fa 04 00 	call	326203 <_runtime.memmove>
 1004115:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100411a:	48 83 c4 30 	add	rsp, 48
 100411e:	c3 	ret
 100411f:	e8 ac ca 04 00 	call	314028 <_runtime.morestack_noctxt>
 1004124:	e9 77 ff ff ff 	jmp	-137 <_runtime.recvDirect>
 1004129:	cc 	int3
 100412a:	cc 	int3
 100412b:	cc 	int3
 100412c:	cc 	int3
 100412d:	cc 	int3
 100412e:	cc 	int3
 100412f:	cc 	int3

_runtime.closechan:
 1004130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1004139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100413d:	0f 86 5b 02 00 00 	jbe	603 <_runtime.closechan+0x26e>
 1004143:	48 83 ec 38 	sub	rsp, 56
 1004147:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100414c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1004151:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004156:	48 85 c0 	test	rax, rax
 1004159:	0f 84 22 02 00 00 	je	546 <_runtime.closechan+0x251>
 100415f:	48 8d 48 58 	lea	rcx, [rax + 88]
 1004163:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1004168:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100416c:	e8 bf 3f 00 00 	call	16319 <_runtime.lock>
 1004171:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004176:	83 78 1c 00 	cmp	dword ptr [rax + 28], 0
 100417a:	0f 85 d7 01 00 00 	jne	471 <_runtime.closechan+0x227>
 1004180:	c7 40 1c 01 00 00 00 	mov	dword ptr [rax + 28], 1
 1004187:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1004190:	eb 18 	jmp	24 <_runtime.closechan+0x7a>
 1004192:	90 	nop
 1004193:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 1004198:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 100419f:	90 	nop
 10041a0:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10041a5:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10041aa:	48 8d 48 38 	lea	rcx, [rax + 56]
 10041ae:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10041b2:	e8 f9 0a 00 00 	call	2809 <_runtime.(*waitq).dequeue>
 10041b7:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10041bc:	48 85 c0 	test	rax, rax
 10041bf:	0f 84 ae 00 00 00 	je	174 <_runtime.closechan+0x143>
 10041c5:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10041ca:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 10041ce:	48 85 c9 	test	rcx, rcx
 10041d1:	75 49 	jne	73 <_runtime.closechan+0xec>
 10041d3:	48 83 78 30 00 	cmp	qword ptr [rax + 48], 0
 10041d8:	75 2b 	jne	43 <_runtime.closechan+0xd5>
 10041da:	48 8b 08 	mov	rcx, qword ptr [rax]
 10041dd:	84 01 	test	byte ptr [rcx], al
 10041df:	83 3d 1a 37 0f 00 00 	cmp	dword ptr [rip + 997146], 0
 10041e6:	75 0d 	jne	13 <_runtime.closechan+0xc5>
 10041e8:	48 c7 81 88 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 136], 0
 10041f3:	eb 9d 	jmp	-99 <_runtime.closechan+0x62>
 10041f5:	48 8d b9 88 00 00 00 	lea	rdi, [rcx + 136]
 10041fc:	31 c0 	xor	eax, eax
 10041fe:	e8 dd e7 04 00 	call	321501 <_runtime.gcWriteBarrier>
 1004203:	eb 8d 	jmp	-115 <_runtime.closechan+0x62>
 1004205:	e8 36 e1 04 00 	call	319798 <_runtime.cputicks>
 100420a:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 100420e:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1004213:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 1004217:	48 89 c8 	mov	rax, rcx
 100421a:	eb be 	jmp	-66 <_runtime.closechan+0xaa>
 100421c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004221:	48 8b 50 20 	mov	rdx, qword ptr [rax + 32]
 1004225:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1004229:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100422e:	e8 4d 91 00 00 	call	37197 <_runtime.typedmemclr>
 1004233:	83 3d c6 36 0f 00 00 	cmp	dword ptr [rip + 997062], 0
 100423a:	75 12 	jne	18 <_runtime.closechan+0x11e>
 100423c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1004241:	48 c7 41 20 00 00 00 00 	mov	qword ptr [rcx + 32], 0
 1004249:	48 89 c8 	mov	rax, rcx
 100424c:	eb 85 	jmp	-123 <_runtime.closechan+0xa3>
 100424e:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1004253:	48 8d 79 20 	lea	rdi, [rcx + 32]
 1004257:	31 c0 	xor	eax, eax
 1004259:	e8 82 e7 04 00 	call	321410 <_runtime.gcWriteBarrier>
 100425e:	eb e9 	jmp	-23 <_runtime.closechan+0x119>
 1004260:	90 	nop
 1004261:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1004266:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 100426d:	90 	nop
 100426e:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1004273:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004278:	48 8d 48 48 	lea	rcx, [rax + 72]
 100427c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1004280:	e8 2b 0a 00 00 	call	2603 <_runtime.(*waitq).dequeue>
 1004285:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100428a:	48 85 c0 	test	rax, rax
 100428d:	74 72 	je	114 <_runtime.closechan+0x1d1>
 100428f:	83 3d 6a 36 0f 00 00 	cmp	dword ptr [rip + 996970], 0
 1004296:	75 56 	jne	86 <_runtime.closechan+0x1be>
 1004298:	48 c7 40 20 00 00 00 00 	mov	qword ptr [rax + 32], 0
 10042a0:	48 83 78 30 00 	cmp	qword ptr [rax + 48], 0
 10042a5:	75 2b 	jne	43 <_runtime.closechan+0x1a2>
 10042a7:	48 8b 08 	mov	rcx, qword ptr [rax]
 10042aa:	84 01 	test	byte ptr [rcx], al
 10042ac:	83 3d 4d 36 0f 00 00 	cmp	dword ptr [rip + 996941], 0
 10042b3:	75 0d 	jne	13 <_runtime.closechan+0x192>
 10042b5:	48 c7 81 88 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 136], 0
 10042c0:	eb 9e 	jmp	-98 <_runtime.closechan+0x130>
 10042c2:	48 8d b9 88 00 00 00 	lea	rdi, [rcx + 136]
 10042c9:	31 c0 	xor	eax, eax
 10042cb:	e8 10 e7 04 00 	call	321296 <_runtime.gcWriteBarrier>
 10042d0:	eb 8e 	jmp	-114 <_runtime.closechan+0x130>
 10042d2:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10042d7:	e8 64 e0 04 00 	call	319588 <_runtime.cputicks>
 10042dc:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10042e0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10042e5:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 10042e9:	48 89 c8 	mov	rax, rcx
 10042ec:	eb b9 	jmp	-71 <_runtime.closechan+0x177>
 10042ee:	48 8d 78 20 	lea	rdi, [rax + 32]
 10042f2:	48 89 c1 	mov	rcx, rax
 10042f5:	31 c0 	xor	eax, eax
 10042f7:	e8 e4 e6 04 00 	call	321252 <_runtime.gcWriteBarrier>
 10042fc:	48 89 c8 	mov	rax, rcx
 10042ff:	eb 9f 	jmp	-97 <_runtime.closechan+0x170>
 1004301:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1004306:	48 89 04 24 	mov	qword ptr [rsp], rax
 100430a:	e8 01 40 00 00 	call	16385 <_runtime.unlock>
 100430f:	eb 1d 	jmp	29 <_runtime.closechan+0x1fe>
 1004311:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 100431c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004320:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1004329:	e8 52 75 02 00 	call	161106 <_runtime.goready>
 100432e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1004333:	48 85 c0 	test	rax, rax
 1004336:	74 15 	je	21 <_runtime.closechan+0x21d>
 1004338:	90 	nop
 1004339:	90 	nop
 100433a:	48 85 c0 	test	rax, rax
 100433d:	74 d2 	je	-46 <_runtime.closechan+0x1e1>
 100433f:	48 8b 88 a0 00 00 00 	mov	rcx, qword ptr [rax + 160]
 1004346:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100434b:	eb c4 	jmp	-60 <_runtime.closechan+0x1e1>
 100434d:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1004352:	48 83 c4 38 	add	rsp, 56
 1004356:	c3 	ret
 1004357:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100435c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004360:	e8 ab 3f 00 00 	call	16299 <_runtime.unlock>
 1004365:	48 8d 05 94 f4 05 00 	lea	rax, [rip + 390292]
 100436c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004370:	48 8d 05 19 f7 07 00 	lea	rax, [rip + 522009]
 1004377:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100437c:	e8 3f 42 02 00 	call	148031 <_runtime.gopanic>
 1004381:	48 8d 05 78 f4 05 00 	lea	rax, [rip + 390264]
 1004388:	48 89 04 24 	mov	qword ptr [rsp], rax
 100438c:	48 8d 05 ed f6 07 00 	lea	rax, [rip + 521965]
 1004393:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1004398:	e8 23 42 02 00 	call	148003 <_runtime.gopanic>
 100439d:	90 	nop
 100439e:	e8 2d c8 04 00 	call	313389 <_runtime.morestack_noctxt>
 10043a3:	e9 88 fd ff ff 	jmp	-632 <_runtime.closechan>
 10043a8:	cc 	int3
 10043a9:	cc 	int3
 10043aa:	cc 	int3
 10043ab:	cc 	int3
 10043ac:	cc 	int3
 10043ad:	cc 	int3
 10043ae:	cc 	int3
 10043af:	cc 	int3

_runtime.chanrecv1:
 10043b0:	48 83 ec 28 	sub	rsp, 40
 10043b4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10043b9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10043be:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10043c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10043c7:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10043cc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10043d1:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10043d6:	e8 15 00 00 00 	call	21 <_runtime.chanrecv>
 10043db:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10043e0:	48 83 c4 28 	add	rsp, 40
 10043e4:	c3 	ret
 10043e5:	cc 	int3
 10043e6:	cc 	int3
 10043e7:	cc 	int3
 10043e8:	cc 	int3
 10043e9:	cc 	int3
 10043ea:	cc 	int3
 10043eb:	cc 	int3
 10043ec:	cc 	int3
 10043ed:	cc 	int3
 10043ee:	cc 	int3
 10043ef:	cc 	int3

_runtime.chanrecv:
 10043f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10043f9:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 10043fe:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1004402:	0f 86 92 06 00 00 	jbe	1682 <_runtime.chanrecv+0x6aa>
 1004408:	48 81 ec 88 00 00 00 	sub	rsp, 136
 100440f:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1004417:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 100441f:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1004427:	48 85 c0 	test	rax, rax
 100442a:	0f 84 ef 05 00 00 	je	1519 <_runtime.chanrecv+0x62f>
 1004430:	0f b6 8c 24 a0 00 00 00 	movzx	ecx, byte ptr [rsp + 160]
 1004438:	84 c9 	test	cl, cl
 100443a:	0f 84 ab 05 00 00 	je	1451 <_runtime.chanrecv+0x5fb>
 1004440:	31 d2 	xor	edx, edx
 1004442:	84 d2 	test	dl, dl
 1004444:	0f 84 9a 05 00 00 	je	1434 <_runtime.chanrecv+0x5f4>
 100444a:	8b 50 1c 	mov	edx, dword ptr [rax + 28]
 100444d:	85 d2 	test	edx, edx
 100444f:	0f 94 c2 	sete	dl
 1004452:	84 d2 	test	dl, dl
 1004454:	0f 85 6a 05 00 00 	jne	1386 <_runtime.chanrecv+0x5d4>
 100445a:	48 83 3d 96 33 0f 00 00 	cmp	qword ptr [rip + 996246], 0
 1004462:	0f 87 46 05 00 00 	ja	1350 <_runtime.chanrecv+0x5be>
 1004468:	31 d2 	xor	edx, edx
 100446a:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 100446f:	48 8d 48 58 	lea	rcx, [rax + 88]
 1004473:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1004478:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100447c:	e8 af 3c 00 00 	call	15535 <_runtime.lock>
 1004481:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1004489:	83 78 1c 00 	cmp	dword ptr [rax + 28], 0
 100448d:	74 0a 	je	10 <_runtime.chanrecv+0xa9>
 100448f:	48 83 38 00 	cmp	qword ptr [rax], 0
 1004493:	0f 84 be 04 00 00 	je	1214 <_runtime.chanrecv+0x567>
 1004499:	48 8d 48 48 	lea	rcx, [rax + 72]
 100449d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10044a1:	e8 0a 08 00 00 	call	2058 <_runtime.(*waitq).dequeue>
 10044a6:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10044ab:	48 85 c0 	test	rax, rax
 10044ae:	0f 85 34 04 00 00 	jne	1076 <_runtime.chanrecv+0x4f8>
 10044b4:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10044bc:	48 83 38 00 	cmp	qword ptr [rax], 0
 10044c0:	0f 86 af 00 00 00 	jbe	175 <_runtime.chanrecv+0x185>
 10044c6:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10044ca:	0f b7 50 18 	movzx	edx, word ptr [rax + 24]
 10044ce:	48 0f af ca 	imul	rcx, rdx
 10044d2:	48 03 48 10 	add	rcx, qword ptr [rax + 16]
 10044d6:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 10044de:	48 85 d2 	test	rdx, rdx
 10044e1:	75 64 	jne	100 <_runtime.chanrecv+0x157>
 10044e3:	48 8b 50 20 	mov	rdx, qword ptr [rax + 32]
 10044e7:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10044eb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10044f0:	e8 8b 8e 00 00 	call	36491 <_runtime.typedmemclr>
 10044f5:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10044fd:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1004501:	48 ff c1 	inc	rcx
 1004504:	48 89 48 30 	mov	qword ptr [rax + 48], rcx
 1004508:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 100450c:	75 08 	jne	8 <_runtime.chanrecv+0x126>
 100450e:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 1004516:	48 ff 08 	dec	qword ptr [rax]
 1004519:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100451e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004522:	e8 e9 3d 00 00 	call	15849 <_runtime.unlock>
 1004527:	c6 84 24 a8 00 00 00 01 	mov	byte ptr [rsp + 168], 1
 100452f:	c6 84 24 a9 00 00 00 01 	mov	byte ptr [rsp + 169], 1
 1004537:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 100453f:	48 81 c4 88 00 00 00 	add	rsp, 136
 1004546:	c3 	ret
 1004547:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 100454c:	48 8b 58 20 	mov	rbx, qword ptr [rax + 32]
 1004550:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1004554:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1004559:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100455e:	e8 7d 8b 00 00 	call	35709 <_runtime.typedmemmove>
 1004563:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 100456b:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1004570:	e9 6e ff ff ff 	jmp	-146 <_runtime.chanrecv+0xf3>
 1004575:	0f b6 8c 24 a0 00 00 00 	movzx	ecx, byte ptr [rsp + 160]
 100457d:	84 c9 	test	cl, cl
 100457f:	75 2e 	jne	46 <_runtime.chanrecv+0x1bf>
 1004581:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1004586:	48 89 04 24 	mov	qword ptr [rsp], rax
 100458a:	e8 81 3d 00 00 	call	15745 <_runtime.unlock>
 100458f:	c6 84 24 a8 00 00 00 00 	mov	byte ptr [rsp + 168], 0
 1004597:	c6 84 24 a9 00 00 00 00 	mov	byte ptr [rsp + 169], 0
 100459f:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 10045a7:	48 81 c4 88 00 00 00 	add	rsp, 136
 10045ae:	c3 	ret
 10045af:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10045b8:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10045bd:	e8 2e 73 02 00 	call	160558 <_runtime.acquireSudog>
 10045c2:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10045c6:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 10045ce:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10045d3:	48 85 c9 	test	rcx, rcx
 10045d6:	74 08 	je	8 <_runtime.chanrecv+0x1f0>
 10045d8:	48 c7 40 30 ff ff ff ff 	mov	qword ptr [rax + 48], -1
 10045e0:	83 3d 19 33 0f 00 00 	cmp	dword ptr [rip + 996121], 0
 10045e7:	0f 85 d4 02 00 00 	jne	724 <_runtime.chanrecv+0x4d1>
 10045ed:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 10045f5:	48 89 50 20 	mov	qword ptr [rax + 32], rdx
 10045f9:	48 c7 40 48 00 00 00 00 	mov	qword ptr [rax + 72], 0
 1004601:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1004606:	84 02 	test	byte ptr [rdx], al
 1004608:	48 8d ba 38 01 00 00 	lea	rdi, [rdx + 312]
 100460f:	83 3d ea 32 0f 00 00 	cmp	dword ptr [rip + 996074], 0
 1004616:	0f 85 87 02 00 00 	jne	647 <_runtime.chanrecv+0x4b3>
 100461c:	48 89 82 38 01 00 00 	mov	qword ptr [rdx + 312], rax
 1004623:	48 89 10 	mov	qword ptr [rax], rdx
 1004626:	c6 40 08 00 	mov	byte ptr [rax + 8], 0
 100462a:	48 8d 58 58 	lea	rbx, [rax + 88]
 100462e:	48 8d b2 88 00 00 00 	lea	rsi, [rdx + 136]
 1004635:	83 3d c4 32 0f 00 00 	cmp	dword ptr [rip + 996036], 0
 100463c:	0f 85 30 02 00 00 	jne	560 <_runtime.chanrecv+0x482>
 1004642:	4c 8b 84 24 90 00 00 00 	mov	r8, qword ptr [rsp + 144]
 100464a:	4c 89 40 58 	mov	qword ptr [rax + 88], r8
 100464e:	48 c7 82 88 00 00 00 00 00 00 00 	mov	qword ptr [rdx + 136], 0
 1004659:	90 	nop
 100465a:	83 3d 9f 32 0f 00 00 	cmp	dword ptr [rip + 995999], 0
 1004661:	0f 85 ec 01 00 00 	jne	492 <_runtime.chanrecv+0x463>
 1004667:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 100466f:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1004674:	48 89 7c 24 60 	mov	qword ptr [rsp + 96], rdi
 1004679:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 100467e:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 1004683:	4d 8d 48 40 	lea	r9, [r8 + 64]
 1004687:	4d 8b 50 40 	mov	r10, qword ptr [r8 + 64]
 100468b:	4d 85 d2 	test	r10, r10
 100468e:	0f 84 71 01 00 00 	je	369 <_runtime.chanrecv+0x415>
 1004694:	83 3d 65 32 0f 00 00 	cmp	dword ptr [rip + 995941], 0
 100469b:	0f 85 33 01 00 00 	jne	307 <_runtime.chanrecv+0x3e4>
 10046a1:	4c 89 50 18 	mov	qword ptr [rax + 24], r10
 10046a5:	49 89 42 10 	mov	qword ptr [r10 + 16], rax
 10046a9:	49 89 40 40 	mov	qword ptr [r8 + 64], rax
 10046ad:	48 8d 05 c4 30 07 00 	lea	rax, [rip + 471236]
 10046b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10046b8:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10046bd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10046c2:	66 c7 44 24 10 0e 17 	mov	word ptr [rsp + 16], 5902
 10046c9:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 10046d2:	e8 69 70 02 00 	call	159849 <_runtime.gopark>
 10046d7:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10046dc:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10046e1:	48 39 81 38 01 00 00 	cmp	qword ptr [rcx + 312], rax
 10046e8:	0f 85 5d 03 00 00 	jne	861 <_runtime.chanrecv+0x65b>
 10046ee:	83 3d 0b 32 0f 00 00 	cmp	dword ptr [rip + 995851], 0
 10046f5:	0f 85 c2 00 00 00 	jne	194 <_runtime.chanrecv+0x3cd>
 10046fb:	48 c7 81 38 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 312], 0
 1004706:	c6 81 b8 00 00 00 00 	mov	byte ptr [rcx + 184], 0
 100470d:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 1004711:	48 85 d2 	test	rdx, rdx
 1004714:	7f 7e 	jg	126 <_runtime.chanrecv+0x3a4>
 1004716:	48 8b 91 88 00 00 00 	mov	rdx, qword ptr [rcx + 136]
 100471d:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1004722:	48 83 fa 00 	cmp	rdx, 0
 1004726:	83 3d d3 31 0f 00 00 	cmp	dword ptr [rip + 995795], 0
 100472d:	75 45 	jne	69 <_runtime.chanrecv+0x384>
 100472f:	48 c7 81 88 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 136], 0
 100473a:	48 c7 40 58 00 00 00 00 	mov	qword ptr [rax + 88], 0
 1004742:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004746:	e8 35 75 02 00 	call	161077 <_runtime.releaseSudog>
 100474b:	c6 84 24 a8 00 00 00 01 	mov	byte ptr [rsp + 168], 1
 1004753:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1004758:	48 83 f8 00 	cmp	rax, 0
 100475c:	0f 95 84 24 a9 00 00 00 	setne	byte ptr [rsp + 169]
 1004764:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 100476c:	48 81 c4 88 00 00 00 	add	rsp, 136
 1004773:	c3 	ret
 1004774:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 1004779:	48 89 c1 	mov	rcx, rax
 100477c:	31 c0 	xor	eax, eax
 100477e:	e8 5d e2 04 00 	call	320093 <_runtime.gcWriteBarrier>
 1004783:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1004788:	31 c0 	xor	eax, eax
 100478a:	e8 51 e2 04 00 	call	320081 <_runtime.gcWriteBarrier>
 100478f:	48 89 c8 	mov	rax, rcx
 1004792:	eb ae 	jmp	-82 <_runtime.chanrecv+0x352>
 1004794:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1004799:	48 29 c2 	sub	rdx, rax
 100479c:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10047a0:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10047a9:	e8 62 f8 01 00 	call	129122 <_runtime.blockevent>
 10047ae:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10047b3:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10047b8:	e9 59 ff ff ff 	jmp	-167 <_runtime.chanrecv+0x326>
 10047bd:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 10047c2:	48 89 c2 	mov	rdx, rax
 10047c5:	31 c0 	xor	eax, eax
 10047c7:	e8 14 e2 04 00 	call	320020 <_runtime.gcWriteBarrier>
 10047cc:	48 89 d0 	mov	rax, rdx
 10047cf:	e9 32 ff ff ff 	jmp	-206 <_runtime.chanrecv+0x316>
 10047d4:	4c 8d 40 18 	lea	r8, [rax + 24]
 10047d8:	49 89 fb 	mov	r11, rdi
 10047db:	4c 89 c7 	mov	rdi, r8
 10047de:	49 89 c4 	mov	r12, rax
 10047e1:	4c 89 d0 	mov	rax, r10
 10047e4:	e8 f7 e1 04 00 	call	319991 <_runtime.gcWriteBarrier>
 10047e9:	48 8d 78 10 	lea	rdi, [rax + 16]
 10047ed:	4c 89 e0 	mov	rax, r12
 10047f0:	e8 eb e1 04 00 	call	319979 <_runtime.gcWriteBarrier>
 10047f5:	4c 89 cf 	mov	rdi, r9
 10047f8:	e8 e3 e1 04 00 	call	319971 <_runtime.gcWriteBarrier>
 10047fd:	4c 89 df 	mov	rdi, r11
 1004800:	e9 a8 fe ff ff 	jmp	-344 <_runtime.chanrecv+0x2bd>
 1004805:	83 3d f4 30 0f 00 00 	cmp	dword ptr [rip + 995572], 0
 100480c:	75 15 	jne	21 <_runtime.chanrecv+0x433>
 100480e:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 1004816:	49 89 40 38 	mov	qword ptr [r8 + 56], rax
 100481a:	49 89 40 40 	mov	qword ptr [r8 + 64], rax
 100481e:	e9 8a fe ff ff 	jmp	-374 <_runtime.chanrecv+0x2bd>
 1004823:	4c 8d 50 18 	lea	r10, [rax + 24]
 1004827:	49 89 fb 	mov	r11, rdi
 100482a:	4c 89 d7 	mov	rdi, r10
 100482d:	49 89 c4 	mov	r12, rax
 1004830:	31 c0 	xor	eax, eax
 1004832:	e8 a9 e1 04 00 	call	319913 <_runtime.gcWriteBarrier>
 1004837:	49 8d 78 38 	lea	rdi, [r8 + 56]
 100483b:	4c 89 e0 	mov	rax, r12
 100483e:	e8 9d e1 04 00 	call	319901 <_runtime.gcWriteBarrier>
 1004843:	4c 89 cf 	mov	rdi, r9
 1004846:	e8 95 e1 04 00 	call	319893 <_runtime.gcWriteBarrier>
 100484b:	4c 89 df 	mov	rdi, r11
 100484e:	e9 5a fe ff ff 	jmp	-422 <_runtime.chanrecv+0x2bd>
 1004853:	4c 8d 48 10 	lea	r9, [rax + 16]
 1004857:	49 89 fa 	mov	r10, rdi
 100485a:	4c 89 cf 	mov	rdi, r9
 100485d:	49 89 c3 	mov	r11, rax
 1004860:	31 c0 	xor	eax, eax
 1004862:	e8 79 e1 04 00 	call	319865 <_runtime.gcWriteBarrier>
 1004867:	4c 89 d8 	mov	rax, r11
 100486a:	4c 89 d7 	mov	rdi, r10
 100486d:	e9 fd fd ff ff 	jmp	-515 <_runtime.chanrecv+0x27f>
 1004872:	49 89 f8 	mov	r8, rdi
 1004875:	48 89 df 	mov	rdi, rbx
 1004878:	49 89 c1 	mov	r9, rax
 100487b:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1004883:	e8 58 e1 04 00 	call	319832 <_runtime.gcWriteBarrier>
 1004888:	48 89 f7 	mov	rdi, rsi
 100488b:	49 89 c2 	mov	r10, rax
 100488e:	31 c0 	xor	eax, eax
 1004890:	e8 4b e1 04 00 	call	319819 <_runtime.gcWriteBarrier>
 1004895:	4c 89 c8 	mov	rax, r9
 1004898:	4c 89 c7 	mov	rdi, r8
 100489b:	4d 89 d0 	mov	r8, r10
 100489e:	e9 b6 fd ff ff 	jmp	-586 <_runtime.chanrecv+0x269>
 10048a3:	e8 38 e1 04 00 	call	319800 <_runtime.gcWriteBarrier>
 10048a8:	48 89 fb 	mov	rbx, rdi
 10048ab:	48 89 c7 	mov	rdi, rax
 10048ae:	48 89 d0 	mov	rax, rdx
 10048b1:	e8 2a e1 04 00 	call	319786 <_runtime.gcWriteBarrier>
 10048b6:	48 89 f8 	mov	rax, rdi
 10048b9:	48 89 df 	mov	rdi, rbx
 10048bc:	e9 65 fd ff ff 	jmp	-667 <_runtime.chanrecv+0x236>
 10048c1:	48 8d 78 20 	lea	rdi, [rax + 32]
 10048c5:	48 89 c2 	mov	rdx, rax
 10048c8:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 10048d0:	e8 0b e1 04 00 	call	319755 <_runtime.gcWriteBarrier>
 10048d5:	48 8d 7a 48 	lea	rdi, [rdx + 72]
 10048d9:	31 c0 	xor	eax, eax
 10048db:	e8 00 e1 04 00 	call	319744 <_runtime.gcWriteBarrier>
 10048e0:	48 89 d0 	mov	rax, rdx
 10048e3:	e9 19 fd ff ff 	jmp	-743 <_runtime.chanrecv+0x211>
 10048e8:	0f 57 c0 	xorps	xmm0, xmm0
 10048eb:	0f 11 44 24 70 	movups	xmmword ptr [rsp + 112], xmm0
 10048f0:	48 8d 0d 09 8d 04 00 	lea	rcx, [rip + 298249]
 10048f7:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 10048fc:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 1004904:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 1004909:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100490d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1004912:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 100491a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100491f:	48 8d 44 24 70 	lea	rax, [rsp + 112]
 1004924:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1004929:	48 c7 44 24 20 03 00 00 00 	mov	qword ptr [rsp + 32], 3
 1004932:	e8 79 01 00 00 	call	377 <_runtime.recv>
 1004937:	c6 84 24 a8 00 00 00 01 	mov	byte ptr [rsp + 168], 1
 100493f:	c6 84 24 a9 00 00 00 01 	mov	byte ptr [rsp + 169], 1
 1004947:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 100494f:	48 81 c4 88 00 00 00 	add	rsp, 136
 1004956:	c3 	ret
 1004957:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100495c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004960:	e8 ab 39 00 00 	call	14763 <_runtime.unlock>
 1004965:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 100496d:	48 85 c0 	test	rax, rax
 1004970:	75 20 	jne	32 <_runtime.chanrecv+0x5a2>
 1004972:	c6 84 24 a8 00 00 00 01 	mov	byte ptr [rsp + 168], 1
 100497a:	c6 84 24 a9 00 00 00 00 	mov	byte ptr [rsp + 169], 0
 1004982:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 100498a:	48 81 c4 88 00 00 00 	add	rsp, 136
 1004991:	c3 	ret
 1004992:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 100499a:	48 8b 49 20 	mov	rcx, qword ptr [rcx + 32]
 100499e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10049a2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10049a7:	e8 d4 89 00 00 	call	35284 <_runtime.typedmemclr>
 10049ac:	eb c4 	jmp	-60 <_runtime.chanrecv+0x582>
 10049ae:	e8 8d d9 04 00 	call	317837 <_runtime.cputicks>
 10049b3:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 10049b7:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10049bf:	e9 a6 fa ff ff 	jmp	-1370 <_runtime.chanrecv+0x7a>
 10049c4:	c6 84 24 a8 00 00 00 00 	mov	byte ptr [rsp + 168], 0
 10049cc:	c6 84 24 a9 00 00 00 00 	mov	byte ptr [rsp + 169], 0
 10049d4:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 10049dc:	48 81 c4 88 00 00 00 	add	rsp, 136
 10049e3:	c3 	ret
 10049e4:	31 d2 	xor	edx, edx
 10049e6:	e9 67 fa ff ff 	jmp	-1433 <_runtime.chanrecv+0x62>
 10049eb:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 10049ef:	48 85 d2 	test	rdx, rdx
 10049f2:	75 0a 	jne	10 <_runtime.chanrecv+0x60e>
 10049f4:	48 83 78 48 00 	cmp	qword ptr [rax + 72], 0
 10049f9:	74 1a 	je	26 <_runtime.chanrecv+0x625>
 10049fb:	48 85 d2 	test	rdx, rdx
 10049fe:	76 0e 	jbe	14 <_runtime.chanrecv+0x61e>
 1004a00:	48 8b 10 	mov	rdx, qword ptr [rax]
 1004a03:	48 85 d2 	test	rdx, rdx
 1004a06:	0f 94 c2 	sete	dl
 1004a09:	e9 34 fa ff ff 	jmp	-1484 <_runtime.chanrecv+0x52>
 1004a0e:	31 d2 	xor	edx, edx
 1004a10:	e9 2d fa ff ff 	jmp	-1491 <_runtime.chanrecv+0x52>
 1004a15:	ba 01 00 00 00 	mov	edx, 1
 1004a1a:	e9 23 fa ff ff 	jmp	-1501 <_runtime.chanrecv+0x52>
 1004a1f:	0f b6 84 24 a0 00 00 00 	movzx	eax, byte ptr [rsp + 160]
 1004a27:	84 c0 	test	al, al
 1004a29:	75 39 	jne	57 <_runtime.chanrecv+0x674>
 1004a2b:	c6 84 24 a8 00 00 00 00 	mov	byte ptr [rsp + 168], 0
 1004a33:	c6 84 24 a9 00 00 00 00 	mov	byte ptr [rsp + 169], 0
 1004a3b:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1004a43:	48 81 c4 88 00 00 00 	add	rsp, 136
 1004a4a:	c3 	ret
 1004a4b:	48 8d 05 dd 04 07 00 	lea	rax, [rip + 459997]
 1004a52:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004a56:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1004a5f:	e8 fc 42 02 00 	call	148220 <_runtime.throw>
 1004a64:	0f 57 c0 	xorps	xmm0, xmm0
 1004a67:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 1004a6b:	66 c7 44 24 10 03 10 	mov	word ptr [rsp + 16], 4099
 1004a72:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1004a7b:	e8 c0 6c 02 00 	call	158912 <_runtime.gopark>
 1004a80:	48 8d 05 d9 e9 06 00 	lea	rax, [rip + 453081]
 1004a87:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004a8b:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1004a94:	e8 c7 42 02 00 	call	148167 <_runtime.throw>
 1004a99:	90 	nop
 1004a9a:	e8 31 c1 04 00 	call	311601 <_runtime.morestack_noctxt>
 1004a9f:	e9 4c f9 ff ff 	jmp	-1716 <_runtime.chanrecv>
 1004aa4:	cc 	int3
 1004aa5:	cc 	int3
 1004aa6:	cc 	int3
 1004aa7:	cc 	int3
 1004aa8:	cc 	int3
 1004aa9:	cc 	int3
 1004aaa:	cc 	int3
 1004aab:	cc 	int3
 1004aac:	cc 	int3
 1004aad:	cc 	int3
 1004aae:	cc 	int3
 1004aaf:	cc 	int3

_runtime.recv:
 1004ab0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1004ab9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1004abd:	0f 86 92 01 00 00 	jbe	402 <_runtime.recv+0x1a5>
 1004ac3:	48 83 ec 30 	sub	rsp, 48
 1004ac7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1004acc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1004ad1:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1004ad6:	48 83 79 08 00 	cmp	qword ptr [rcx + 8], 0
 1004adb:	0f 85 e7 00 00 00 	jne	231 <_runtime.recv+0x118>
 1004ae1:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1004ae6:	48 85 db 	test	rbx, rbx
 1004ae9:	0f 85 b8 00 00 00 	jne	184 <_runtime.recv+0xf7>
 1004aef:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1004af4:	84 01 	test	byte ptr [rcx], al
 1004af6:	83 3d 03 2e 0f 00 00 	cmp	dword ptr [rip + 994819], 0
 1004afd:	0f 85 94 00 00 00 	jne	148 <_runtime.recv+0xe7>
 1004b03:	48 c7 41 20 00 00 00 00 	mov	qword ptr [rcx + 32], 0
 1004b0b:	48 8b 01 	mov	rax, qword ptr [rcx]
 1004b0e:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1004b13:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1004b18:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1004b1b:	ff d3 	call	rbx
 1004b1d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1004b22:	84 00 	test	byte ptr [rax], al
 1004b24:	83 3d d5 2d 0f 00 00 	cmp	dword ptr [rip + 994773], 0
 1004b2b:	75 4c 	jne	76 <_runtime.recv+0xc9>
 1004b2d:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1004b32:	48 89 88 88 00 00 00 	mov	qword ptr [rax + 136], rcx
 1004b39:	48 83 79 30 00 	cmp	qword ptr [rcx + 48], 0
 1004b3e:	75 20 	jne	32 <_runtime.recv+0xb0>
 1004b40:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004b44:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1004b49:	48 ff c0 	inc	rax
 1004b4c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1004b51:	e8 2a 6d 02 00 	call	159018 <_runtime.goready>
 1004b56:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1004b5b:	48 83 c4 30 	add	rsp, 48
 1004b5f:	c3 	ret
 1004b60:	e8 db d7 04 00 	call	317403 <_runtime.cputicks>
 1004b65:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1004b69:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1004b6e:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 1004b72:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1004b77:	eb c7 	jmp	-57 <_runtime.recv+0x90>
 1004b79:	48 8d b8 88 00 00 00 	lea	rdi, [rax + 136]
 1004b80:	48 89 c1 	mov	rcx, rax
 1004b83:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004b88:	e8 53 de 04 00 	call	319059 <_runtime.gcWriteBarrier>
 1004b8d:	48 89 c8 	mov	rax, rcx
 1004b90:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1004b95:	eb a2 	jmp	-94 <_runtime.recv+0x89>
 1004b97:	48 8d 79 20 	lea	rdi, [rcx + 32]
 1004b9b:	31 c0 	xor	eax, eax
 1004b9d:	e8 3e de 04 00 	call	319038 <_runtime.gcWriteBarrier>
 1004ba2:	e9 64 ff ff ff 	jmp	-156 <_runtime.recv+0x5b>
 1004ba7:	48 8b 41 20 	mov	rax, qword ptr [rcx + 32]
 1004bab:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004baf:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1004bb4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1004bb9:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1004bbe:	e8 dd f4 ff ff 	call	-2851 <_runtime.recvDirect>
 1004bc3:	e9 27 ff ff ff 	jmp	-217 <_runtime.recv+0x3f>
 1004bc8:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1004bcc:	0f b7 51 18 	movzx	edx, word ptr [rcx + 24]
 1004bd0:	48 0f af c2 	imul	rax, rdx
 1004bd4:	48 03 41 10 	add	rax, qword ptr [rcx + 16]
 1004bd8:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1004bdd:	48 85 d2 	test	rdx, rdx
 1004be0:	75 4b 	jne	75 <_runtime.recv+0x17d>
 1004be2:	48 8b 51 20 	mov	rdx, qword ptr [rcx + 32]
 1004be6:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1004beb:	48 8b 73 20 	mov	rsi, qword ptr [rbx + 32]
 1004bef:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1004bf3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1004bf8:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1004bfd:	e8 de 84 00 00 	call	34014 <_runtime.typedmemmove>
 1004c02:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1004c07:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1004c0b:	48 ff c1 	inc	rcx
 1004c0e:	48 89 48 30 	mov	qword ptr [rax + 48], rcx
 1004c12:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1004c16:	75 08 	jne	8 <_runtime.recv+0x170>
 1004c18:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 1004c20:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1004c24:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 1004c28:	e9 c2 fe ff ff 	jmp	-318 <_runtime.recv+0x3f>
 1004c2d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1004c32:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1004c36:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1004c3a:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1004c3f:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1004c44:	e8 97 84 00 00 	call	33943 <_runtime.typedmemmove>
 1004c49:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1004c4e:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1004c53:	eb 8d 	jmp	-115 <_runtime.recv+0x132>
 1004c55:	e8 76 bf 04 00 	call	311158 <_runtime.morestack_noctxt>
 1004c5a:	e9 51 fe ff ff 	jmp	-431 <_runtime.recv>
 1004c5f:	cc 	int3

_runtime.chanparkcommit:
 1004c60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1004c69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1004c6d:	76 37 	jbe	55 <_runtime.chanparkcommit+0x46>
 1004c6f:	48 83 ec 10 	sub	rsp, 16
 1004c73:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1004c78:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1004c7d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1004c82:	c6 80 b8 00 00 00 01 	mov	byte ptr [rax + 184], 1
 1004c89:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1004c8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004c92:	e8 79 36 00 00 	call	13945 <_runtime.unlock>
 1004c97:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1004c9c:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1004ca1:	48 83 c4 10 	add	rsp, 16
 1004ca5:	c3 	ret
 1004ca6:	e8 25 bf 04 00 	call	311077 <_runtime.morestack_noctxt>
 1004cab:	eb b3 	jmp	-77 <_runtime.chanparkcommit>
 1004cad:	cc 	int3
 1004cae:	cc 	int3
 1004caf:	cc 	int3

_runtime.(*waitq).dequeue:
 1004cb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1004cb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1004cbd:	0f 86 df 00 00 00 	jbe	223 <_runtime.(*waitq).dequeue+0xf2>
 1004cc3:	48 83 ec 08 	sub	rsp, 8
 1004cc7:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1004ccb:	48 8d 2c 24 	lea	rbp, [rsp]
 1004ccf:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1004cd4:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1004cd7:	48 85 d2 	test	rdx, rdx
 1004cda:	0f 84 b0 00 00 00 	je	176 <_runtime.(*waitq).dequeue+0xe0>
 1004ce0:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 1004ce4:	48 85 db 	test	rbx, rbx
 1004ce7:	74 7b 	je	123 <_runtime.(*waitq).dequeue+0xb4>
 1004ce9:	83 3d 10 2c 0f 00 00 	cmp	dword ptr [rip + 994320], 0
 1004cf0:	75 4c 	jne	76 <_runtime.(*waitq).dequeue+0x8e>
 1004cf2:	48 c7 43 18 00 00 00 00 	mov	qword ptr [rbx + 24], 0
 1004cfa:	48 89 19 	mov	qword ptr [rcx], rbx
 1004cfd:	48 c7 42 10 00 00 00 00 	mov	qword ptr [rdx + 16], 0
 1004d05:	80 7a 08 00 	cmp	byte ptr [rdx + 8], 0
 1004d09:	74 2a 	je	42 <_runtime.(*waitq).dequeue+0x85>
 1004d0b:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1004d0e:	31 c0 	xor	eax, eax
 1004d10:	be 01 00 00 00 	mov	esi, 1
 1004d15:	f0 	lock
 1004d16:	0f b1 b3 68 01 00 00 	cmpxchg	dword ptr [rbx + 360], esi
 1004d1d:	0f 94 c3 	sete	bl
 1004d20:	83 f3 01 	xor	ebx, 1
 1004d23:	84 db 	test	bl, bl
 1004d25:	75 ad 	jne	-83 <_runtime.(*waitq).dequeue+0x24>
 1004d27:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1004d2c:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1004d30:	48 83 c4 08 	add	rsp, 8
 1004d34:	c3 	ret
 1004d35:	be 01 00 00 00 	mov	esi, 1
 1004d3a:	31 db 	xor	ebx, ebx
 1004d3c:	eb e5 	jmp	-27 <_runtime.(*waitq).dequeue+0x73>
 1004d3e:	48 8d 7b 18 	lea	rdi, [rbx + 24]
 1004d42:	31 c0 	xor	eax, eax
 1004d44:	e8 97 dc 04 00 	call	318615 <_runtime.gcWriteBarrier>
 1004d49:	48 89 cf 	mov	rdi, rcx
 1004d4c:	48 89 d8 	mov	rax, rbx
 1004d4f:	e8 8c dc 04 00 	call	318604 <_runtime.gcWriteBarrier>
 1004d54:	48 8d 5a 10 	lea	rbx, [rdx + 16]
 1004d58:	48 89 df 	mov	rdi, rbx
 1004d5b:	31 c0 	xor	eax, eax
 1004d5d:	e8 7e dc 04 00 	call	318590 <_runtime.gcWriteBarrier>
 1004d62:	eb a1 	jmp	-95 <_runtime.(*waitq).dequeue+0x55>
 1004d64:	83 3d 95 2b 0f 00 00 	cmp	dword ptr [rip + 994197], 0
 1004d6b:	75 08 	jne	8 <_runtime.(*waitq).dequeue+0xc5>
 1004d6d:	0f 57 c0 	xorps	xmm0, xmm0
 1004d70:	0f 11 01 	movups	xmmword ptr [rcx], xmm0
 1004d73:	eb 90 	jmp	-112 <_runtime.(*waitq).dequeue+0x55>
 1004d75:	48 89 cf 	mov	rdi, rcx
 1004d78:	31 c0 	xor	eax, eax
 1004d7a:	e8 61 dc 04 00 	call	318561 <_runtime.gcWriteBarrier>
 1004d7f:	48 8d 59 08 	lea	rbx, [rcx + 8]
 1004d83:	48 89 df 	mov	rdi, rbx
 1004d86:	e8 55 dc 04 00 	call	318549 <_runtime.gcWriteBarrier>
 1004d8b:	e9 75 ff ff ff 	jmp	-139 <_runtime.(*waitq).dequeue+0x55>
 1004d90:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1004d99:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1004d9d:	48 83 c4 08 	add	rsp, 8
 1004da1:	c3 	ret
 1004da2:	e8 29 be 04 00 	call	310825 <_runtime.morestack_noctxt>
 1004da7:	e9 04 ff ff ff 	jmp	-252 <_runtime.(*waitq).dequeue>
 1004dac:	cc 	int3
 1004dad:	cc 	int3
 1004dae:	cc 	int3
 1004daf:	cc 	int3

_runtime.init.0:
 1004db0:	8b 05 06 2a 0f 00 	mov	eax, dword ptr [rip + 993798]
 1004db6:	25 f0 3f ff 0f 	and	eax, 268386288
 1004dbb:	80 3d a6 29 0f 00 00 	cmp	byte ptr [rip + 993702], 0
 1004dc2:	74 23 	je	35 <_runtime.init.0+0x37>
 1004dc4:	3d a0 06 02 00 	cmp	eax, 132768
 1004dc9:	75 1c 	jne	28 <_runtime.init.0+0x37>
 1004dcb:	b8 01 00 00 00 	mov	eax, 1
 1004dd0:	80 3d ab 2e 0f 00 00 	cmp	byte ptr [rip + 994987], 0
 1004dd7:	74 0a 	je	10 <_runtime.init.0+0x33>
 1004dd9:	83 f0 01 	xor	eax, 1
 1004ddc:	88 05 8e 29 0f 00 	mov	byte ptr [rip + 993678], al
 1004de2:	c3 	ret
 1004de3:	31 c0 	xor	eax, eax
 1004de5:	eb f5 	jmp	-11 <_runtime.init.0+0x2c>
 1004de7:	3d d0 06 02 00 	cmp	eax, 132816
 1004dec:	74 dd 	je	-35 <_runtime.init.0+0x1b>
 1004dee:	3d a0 06 03 00 	cmp	eax, 198304
 1004df3:	74 d6 	je	-42 <_runtime.init.0+0x1b>
 1004df5:	3d e0 06 03 00 	cmp	eax, 198368
 1004dfa:	0f 94 c0 	sete	al
 1004dfd:	eb d1 	jmp	-47 <_runtime.init.0+0x20>
 1004dff:	cc 	int3

_runtime.(*cpuProfile).add:
 1004e00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1004e09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1004e0d:	0f 86 16 01 00 00 	jbe	278 <_runtime.(*cpuProfile).add+0x129>
 1004e13:	48 83 ec 58 	sub	rsp, 88
 1004e17:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 1004e1c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1004e21:	eb 0d 	jmp	13 <_runtime.(*cpuProfile).add+0x30>
 1004e23:	90 	nop
 1004e24:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1004e2b:	e8 b0 e3 03 00 	call	254896 <_runtime.usleep>
 1004e30:	31 c0 	xor	eax, eax
 1004e32:	48 8d 0d 6f 2a 0f 00 	lea	rcx, [rip + 993903]
 1004e39:	ba 01 00 00 00 	mov	edx, 1
 1004e3e:	f0 	lock
 1004e3f:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 1004e42:	0f 94 c3 	sete	bl
 1004e45:	84 db 	test	bl, bl
 1004e47:	74 da 	je	-38 <_runtime.(*cpuProfile).add+0x23>
 1004e49:	83 3d 5c 2a 0f 00 00 	cmp	dword ptr [rip + 993884], 0
 1004e50:	0f 84 9d 00 00 00 	je	157 <_runtime.(*cpuProfile).add+0xf3>
 1004e56:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1004e5b:	84 00 	test	byte ptr [rax], al
 1004e5d:	48 83 b8 58 1f 00 00 00 	cmp	qword ptr [rax + 8024], 0
 1004e65:	0f 8e 9d 00 00 00 	jle	157 <_runtime.(*cpuProfile).add+0x108>
 1004e6b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1004e6f:	e8 cc 01 00 00 	call	460 <_runtime.(*cpuProfile).addExtra>
 1004e74:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1004e7d:	48 c7 44 24 48 01 00 00 00 	mov	qword ptr [rsp + 72], 1
 1004e86:	e8 35 e4 03 00 	call	255029 <_runtime.nanotime1>
 1004e8b:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1004e90:	84 00 	test	byte ptr [rax], al
 1004e92:	48 8b 0d 57 a2 0c 00 	mov	rcx, qword ptr [rip + 827991]
 1004e99:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 1004e9d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1004ea1:	48 05 58 01 00 00 	add	rax, 344
 1004ea7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1004eac:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1004eb1:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1004eb6:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1004ebb:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1004ec4:	48 c7 44 24 28 01 00 00 00 	mov	qword ptr [rsp + 40], 1
 1004ecd:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1004ed2:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1004ed7:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1004edc:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1004ee1:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1004ee9:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1004eee:	e8 8d 2c 03 00 	call	208013 <_runtime.(*profBuf).write>
 1004ef3:	31 c0 	xor	eax, eax
 1004ef5:	48 8d 0d ac 29 0f 00 	lea	rcx, [rip + 993708]
 1004efc:	87 01 	xchg	dword ptr [rcx], eax
 1004efe:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1004f03:	48 83 c4 58 	add	rsp, 88
 1004f07:	c3 	ret
 1004f08:	48 83 b8 60 1f 00 00 00 	cmp	qword ptr [rax + 8032], 0
 1004f10:	0f 87 55 ff ff ff 	ja	-171 <_runtime.(*cpuProfile).add+0x6b>
 1004f16:	48 83 b8 68 1f 00 00 00 	cmp	qword ptr [rax + 8040], 0
 1004f1e:	0f 87 47 ff ff ff 	ja	-185 <_runtime.(*cpuProfile).add+0x6b>
 1004f24:	e9 4b ff ff ff 	jmp	-181 <_runtime.(*cpuProfile).add+0x74>
 1004f29:	e8 a2 bc 04 00 	call	310434 <_runtime.morestack_noctxt>
 1004f2e:	e9 cd fe ff ff 	jmp	-307 <_runtime.(*cpuProfile).add>
 1004f33:	cc 	int3
 1004f34:	cc 	int3
 1004f35:	cc 	int3
 1004f36:	cc 	int3
 1004f37:	cc 	int3
 1004f38:	cc 	int3
 1004f39:	cc 	int3
 1004f3a:	cc 	int3
 1004f3b:	cc 	int3
 1004f3c:	cc 	int3
 1004f3d:	cc 	int3
 1004f3e:	cc 	int3
 1004f3f:	cc 	int3

_runtime.(*cpuProfile).addNonGo:
 1004f40:	48 83 ec 20 	sub	rsp, 32
 1004f44:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1004f49:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1004f4e:	eb 0d 	jmp	13 <_runtime.(*cpuProfile).addNonGo+0x1d>
 1004f50:	90 	nop
 1004f51:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1004f58:	e8 83 e2 03 00 	call	254595 <_runtime.usleep>
 1004f5d:	31 c0 	xor	eax, eax
 1004f5f:	48 8d 15 42 29 0f 00 	lea	rdx, [rip + 993602]
 1004f66:	bb 01 00 00 00 	mov	ebx, 1
 1004f6b:	f0 	lock
 1004f6c:	0f b1 1a 	cmpxchg	dword ptr [rdx], ebx
 1004f6f:	40 0f 94 c6 	sete	sil
 1004f73:	40 84 f6 	test	sil, sil
 1004f76:	74 d8 	je	-40 <_runtime.(*cpuProfile).addNonGo+0x10>
 1004f78:	48 8b 05 b9 c0 0c 00 	mov	rax, qword ptr [rip + 835769]
 1004f7f:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1004f84:	48 8d 34 03 	lea	rsi, [rbx + rax]
 1004f88:	48 8d 76 01 	lea	rsi, [rsi + 1]
 1004f8c:	48 81 fe e8 03 00 00 	cmp	rsi, 1000
 1004f93:	0f 8d 93 00 00 00 	jge	147 <_runtime.(*cpuProfile).addNonGo+0xec>
 1004f99:	48 3d e8 03 00 00 	cmp	rax, 1000
 1004f9f:	0f 83 90 00 00 00 	jae	144 <_runtime.(*cpuProfile).addNonGo+0xf5>
 1004fa5:	48 8d 4b 01 	lea	rcx, [rbx + 1]
 1004fa9:	48 8d 35 48 a1 0c 00 	lea	rsi, [rip + 827720]
 1004fb0:	48 89 0c c6 	mov	qword ptr [rsi + 8*rax], rcx
 1004fb4:	48 8d 88 19 fc ff ff 	lea	rcx, [rax - 999]
 1004fbb:	48 89 cf 	mov	rdi, rcx
 1004fbe:	48 f7 d9 	neg	rcx
 1004fc1:	48 39 d9 	cmp	rcx, rbx
 1004fc4:	48 0f 4f cb 	cmovg	rcx, rbx
 1004fc8:	48 c1 ff 3f 	sar	rdi, 63
 1004fcc:	48 ff c0 	inc	rax
 1004fcf:	48 c1 e0 03 	shl	rax, 3
 1004fd3:	48 21 f8 	and	rax, rdi
 1004fd6:	48 01 f0 	add	rax, rsi
 1004fd9:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 1004fde:	48 39 f0 	cmp	rax, rsi
 1004fe1:	75 24 	jne	36 <_runtime.(*cpuProfile).addNonGo+0xc7>
 1004fe3:	48 8b 05 4e c0 0c 00 	mov	rax, qword ptr [rip + 835662]
 1004fea:	48 8d 04 18 	lea	rax, [rax + rbx]
 1004fee:	48 8d 40 01 	lea	rax, [rax + 1]
 1004ff2:	48 89 05 3f c0 0c 00 	mov	qword ptr [rip + 835647], rax
 1004ff9:	31 c0 	xor	eax, eax
 1004ffb:	87 02 	xchg	dword ptr [rdx], eax
 1004ffd:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1005002:	48 83 c4 20 	add	rsp, 32
 1005006:	c3 	ret
 1005007:	48 89 04 24 	mov	qword ptr [rsp], rax
 100500b:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1005010:	48 c1 e1 03 	shl	rcx, 3
 1005014:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1005019:	e8 32 eb 04 00 	call	322354 <_runtime.memmove>
 100501e:	48 8d 15 83 28 0f 00 	lea	rdx, [rip + 993411]
 1005025:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 100502a:	eb b7 	jmp	-73 <_runtime.(*cpuProfile).addNonGo+0xa3>
 100502c:	48 ff 05 0d c0 0c 00 	inc	qword ptr [rip + 835597]
 1005033:	eb c4 	jmp	-60 <_runtime.(*cpuProfile).addNonGo+0xb9>
 1005035:	b9 e8 03 00 00 	mov	ecx, 1000
 100503a:	e8 11 e3 04 00 	call	320273 <_runtime.panicIndex>
 100503f:	90 	nop

_runtime.(*cpuProfile).addExtra:
 1005040:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1005049:	48 8d 44 24 f0 	lea	rax, [rsp - 16]
 100504e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1005052:	0f 86 aa 02 00 00 	jbe	682 <_runtime.(*cpuProfile).addExtra+0x2c2>
 1005058:	48 81 ec 90 00 00 00 	sub	rsp, 144
 100505f:	48 89 ac 24 88 00 00 00 	mov	qword ptr [rsp + 136], rbp
 1005067:	48 8d ac 24 88 00 00 00 	lea	rbp, [rsp + 136]
 100506f:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 1005078:	48 c7 44 24 60 01 00 00 00 	mov	qword ptr [rsp + 96], 1
 1005081:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 1005089:	31 c0 	xor	eax, eax
 100508b:	e9 80 00 00 00 	jmp	128 <_runtime.(*cpuProfile).addExtra+0xd0>
 1005090:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1005095:	48 8b 73 10 	mov	rsi, qword ptr [rbx + 16]
 1005099:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100509d:	0f 57 c0 	xorps	xmm0, xmm0
 10050a0:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 10050a5:	48 8d 74 24 60 	lea	rsi, [rsp + 96]
 10050aa:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 10050af:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 10050b8:	48 c7 44 24 28 01 00 00 00 	mov	qword ptr [rsp + 40], 1
 10050c1:	48 8d b0 19 fc ff ff 	lea	rsi, [rax - 999]
 10050c8:	48 89 f7 	mov	rdi, rsi
 10050cb:	48 c1 fe 3f 	sar	rsi, 63
 10050cf:	49 89 d0 	mov	r8, rdx
 10050d2:	48 c1 e2 03 	shl	rdx, 3
 10050d6:	48 21 f2 	and	rdx, rsi
 10050d9:	48 8d 14 13 	lea	rdx, [rbx + rdx]
 10050dd:	48 8d 52 18 	lea	rdx, [rdx + 24]
 10050e1:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 10050e6:	4c 29 c1 	sub	rcx, r8
 10050e9:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 10050ee:	48 f7 df 	neg	rdi
 10050f1:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 10050f6:	e8 85 2a 03 00 	call	207493 <_runtime.(*profBuf).write>
 10050fb:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1005100:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 1005108:	48 8b 4c c3 18 	mov	rcx, qword ptr [rbx + 8*rax + 24]
 100510d:	48 01 c8 	add	rax, rcx
 1005110:	84 03 	test	byte ptr [rbx], al
 1005112:	48 39 83 58 1f 00 00 	cmp	qword ptr [rbx + 8024], rax
 1005119:	7e 34 	jle	52 <_runtime.(*cpuProfile).addExtra+0x10f>
 100511b:	48 3d e8 03 00 00 	cmp	rax, 1000
 1005121:	0f 83 d0 01 00 00 	jae	464 <_runtime.(*cpuProfile).addExtra+0x2b7>
 1005127:	48 8b 74 c3 18 	mov	rsi, qword ptr [rbx + 8*rax + 24]
 100512c:	48 8d 0c 06 	lea	rcx, [rsi + rax]
 1005130:	48 81 f9 e8 03 00 00 	cmp	rcx, 1000
 1005137:	0f 87 b0 01 00 00 	ja	432 <_runtime.(*cpuProfile).addExtra+0x2ad>
 100513d:	48 8d 50 01 	lea	rdx, [rax + 1]
 1005141:	48 39 ca 	cmp	rdx, rcx
 1005144:	0f 86 46 ff ff ff 	jbe	-186 <_runtime.(*cpuProfile).addExtra+0x50>
 100514a:	e9 96 01 00 00 	jmp	406 <_runtime.(*cpuProfile).addExtra+0x2a5>
 100514f:	48 c7 83 58 1f 00 00 00 00 00 00 	mov	qword ptr [rbx + 8024], 0
 100515a:	48 83 bb 60 1f 00 00 00 	cmp	qword ptr [rbx + 8032], 0
 1005162:	0f 87 cd 00 00 00 	ja	205 <_runtime.(*cpuProfile).addExtra+0x1f5>
 1005168:	48 83 bb 68 1f 00 00 00 	cmp	qword ptr [rbx + 8040], 0
 1005170:	77 10 	ja	16 <_runtime.(*cpuProfile).addExtra+0x142>
 1005172:	48 8b ac 24 88 00 00 00 	mov	rbp, qword ptr [rsp + 136]
 100517a:	48 81 c4 90 00 00 00 	add	rsp, 144
 1005181:	c3 	ret
 1005182:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 100518b:	48 8b 83 68 1f 00 00 	mov	rax, qword ptr [rbx + 8040]
 1005192:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1005197:	48 8d 05 62 25 07 00 	lea	rax, [rip + 468322]
 100519e:	84 00 	test	byte ptr [rax], al
 10051a0:	48 8d 05 61 25 07 00 	lea	rax, [rip + 468321]
 10051a7:	84 00 	test	byte ptr [rax], al
 10051a9:	48 8b 05 50 25 07 00 	mov	rax, qword ptr [rip + 468304]
 10051b0:	48 8b 0d 51 25 07 00 	mov	rcx, qword ptr [rip + 468305]
 10051b7:	0f 57 c0 	xorps	xmm0, xmm0
 10051ba:	0f 11 44 24 78 	movups	xmmword ptr [rsp + 120], xmm0
 10051bf:	48 ff c0 	inc	rax
 10051c2:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 10051c7:	48 8d 41 01 	lea	rax, [rcx + 1]
 10051cb:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 10051d3:	48 8b 43 10 	mov	rax, qword ptr [rbx + 16]
 10051d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10051db:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 10051e0:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 10051e5:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10051ea:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 10051f3:	48 c7 44 24 28 01 00 00 00 	mov	qword ptr [rsp + 40], 1
 10051fc:	48 8d 44 24 78 	lea	rax, [rsp + 120]
 1005201:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1005206:	48 c7 44 24 38 02 00 00 00 	mov	qword ptr [rsp + 56], 2
 100520f:	48 c7 44 24 40 02 00 00 00 	mov	qword ptr [rsp + 64], 2
 1005218:	e8 63 29 03 00 	call	207203 <_runtime.(*profBuf).write>
 100521d:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1005225:	48 c7 80 68 1f 00 00 00 00 00 00 	mov	qword ptr [rax + 8040], 0
 1005230:	e9 3d ff ff ff 	jmp	-195 <_runtime.(*cpuProfile).addExtra+0x132>
 1005235:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 100523e:	48 8b 83 60 1f 00 00 	mov	rax, qword ptr [rbx + 8032]
 1005245:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100524a:	48 8d 05 a7 24 07 00 	lea	rax, [rip + 468135]
 1005251:	84 00 	test	byte ptr [rax], al
 1005253:	48 8d 05 8e 24 07 00 	lea	rax, [rip + 468110]
 100525a:	84 00 	test	byte ptr [rax], al
 100525c:	48 8b 05 95 24 07 00 	mov	rax, qword ptr [rip + 468117]
 1005263:	48 8b 0d 7e 24 07 00 	mov	rcx, qword ptr [rip + 468094]
 100526a:	0f 57 c0 	xorps	xmm0, xmm0
 100526d:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 1005272:	48 ff c0 	inc	rax
 1005275:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 100527a:	48 8d 41 01 	lea	rax, [rcx + 1]
 100527e:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1005283:	48 8b 43 10 	mov	rax, qword ptr [rbx + 16]
 1005287:	48 89 04 24 	mov	qword ptr [rsp], rax
 100528b:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1005290:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 1005295:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100529a:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 10052a3:	48 c7 44 24 28 01 00 00 00 	mov	qword ptr [rsp + 40], 1
 10052ac:	48 8d 44 24 68 	lea	rax, [rsp + 104]
 10052b1:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10052b6:	48 c7 44 24 38 02 00 00 00 	mov	qword ptr [rsp + 56], 2
 10052bf:	48 c7 44 24 40 02 00 00 00 	mov	qword ptr [rsp + 64], 2
 10052c8:	e8 b3 28 03 00 	call	207027 <_runtime.(*profBuf).write>
 10052cd:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 10052d5:	48 c7 83 60 1f 00 00 00 00 00 00 	mov	qword ptr [rbx + 8032], 0
 10052e0:	e9 83 fe ff ff 	jmp	-381 <_runtime.(*cpuProfile).addExtra+0x128>
 10052e5:	48 89 d0 	mov	rax, rdx
 10052e8:	e8 c3 e0 04 00 	call	319683 <_runtime.panicSliceB>
 10052ed:	ba e8 03 00 00 	mov	edx, 1000
 10052f2:	e8 79 e0 04 00 	call	319609 <_runtime.panicSliceAlen>
 10052f7:	b9 e8 03 00 00 	mov	ecx, 1000
 10052fc:	e8 4f e0 04 00 	call	319567 <_runtime.panicIndex>
 1005301:	90 	nop
 1005302:	e8 c9 b8 04 00 	call	309449 <_runtime.morestack_noctxt>
 1005307:	e9 34 fd ff ff 	jmp	-716 <_runtime.(*cpuProfile).addExtra>
 100530c:	cc 	int3
 100530d:	cc 	int3
 100530e:	cc 	int3
 100530f:	cc 	int3

_runtime.debugCallCheck:
 1005310:	48 83 ec 38 	sub	rsp, 56
 1005314:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1005319:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 100531e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1005327:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 100532b:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 1005332:	0f 85 91 00 00 00 	jne	145 <_runtime.debugCallCheck+0xb9>
 1005338:	48 8d 4c 24 40 	lea	rcx, [rsp + 64]
 100533d:	48 39 08 	cmp	qword ptr [rax], rcx
 1005340:	73 06 	jae	6 <_runtime.debugCallCheck+0x38>
 1005342:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1005346:	73 1f 	jae	31 <_runtime.debugCallCheck+0x57>
 1005348:	48 8d 05 78 01 07 00 	lea	rax, [rip + 459128]
 100534f:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1005354:	48 c7 44 24 50 1d 00 00 00 	mov	qword ptr [rsp + 80], 29
 100535d:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1005362:	48 83 c4 38 	add	rsp, 56
 1005366:	c3 	ret
 1005367:	0f 57 c0 	xorps	xmm0, xmm0
 100536a:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 100536f:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1005374:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 100537d:	48 8d 05 cc 82 04 00 	lea	rax, [rip + 295628]
 1005384:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1005389:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 100538e:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1005393:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1005398:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100539d:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 10053a2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10053a6:	e8 d5 b6 04 00 	call	308949 <_runtime.systemstack>
 10053ab:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10053b0:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10053b5:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10053ba:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 10053bf:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10053c4:	48 83 c4 38 	add	rsp, 56
 10053c8:	c3 	ret
 10053c9:	48 8d 05 f7 00 07 00 	lea	rax, [rip + 458999]
 10053d0:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10053d5:	48 c7 44 24 50 1d 00 00 00 	mov	qword ptr [rsp + 80], 29
 10053de:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10053e3:	48 83 c4 38 	add	rsp, 56
 10053e7:	c3 	ret
 10053e8:	cc 	int3
 10053e9:	cc 	int3
 10053ea:	cc 	int3
 10053eb:	cc 	int3
 10053ec:	cc 	int3
 10053ed:	cc 	int3
 10053ee:	cc 	int3
 10053ef:	cc 	int3

_runtime.debugCallWrap:
 10053f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10053f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10053fd:	0f 86 9c 00 00 00 	jbe	156 <_runtime.debugCallWrap+0xaf>
 1005403:	48 83 ec 38 	sub	rsp, 56
 1005407:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100540c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1005411:	0f 57 c0 	xorps	xmm0, xmm0
 1005414:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1005419:	c6 44 24 0f 00 	mov	byte ptr [rsp + 15], 0
 100541e:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1005427:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1005430:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1005435:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100543a:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 100543f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1005444:	c6 44 24 0e 00 	mov	byte ptr [rsp + 14], 0
 1005449:	48 8d 05 48 23 07 00 	lea	rax, [rip + 467784]
 1005450:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1005455:	48 8d 44 24 0e 	lea	rax, [rsp + 14]
 100545a:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100545f:	c6 44 24 0f 01 	mov	byte ptr [rsp + 15], 1
 1005464:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1005469:	48 8b 02 	mov	rax, qword ptr [rdx]
 100546c:	ff d0 	call	rax
 100546e:	c6 44 24 0e 01 	mov	byte ptr [rsp + 14], 1
 1005473:	c6 44 24 0f 00 	mov	byte ptr [rsp + 15], 0
 1005478:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100547d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1005481:	e8 da 85 04 00 	call	296410 <_runtime.debugCallWrap.func1>
 1005486:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100548b:	48 83 c4 38 	add	rsp, 56
 100548f:	c3 	ret
 1005490:	e8 7b 26 02 00 	call	140923 <_runtime.deferreturn>
 1005495:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100549a:	48 83 c4 38 	add	rsp, 56
 100549e:	c3 	ret
 100549f:	e8 2c b7 04 00 	call	309036 <_runtime.morestack_noctxt>
 10054a4:	e9 47 ff ff ff 	jmp	-185 <_runtime.debugCallWrap>
 10054a9:	cc 	int3
 10054aa:	cc 	int3
 10054ab:	cc 	int3
 10054ac:	cc 	int3
 10054ad:	cc 	int3
 10054ae:	cc 	int3
 10054af:	cc 	int3

_runtime.gogetenv:
 10054b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10054b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10054bd:	0f 86 2d 01 00 00 	jbe	301 <_runtime.gogetenv+0x140>
 10054c3:	48 83 ec 50 	sub	rsp, 80
 10054c7:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 10054cc:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 10054d1:	48 8b 15 b0 8e 0c 00 	mov	rdx, qword ptr [rip + 822960]
 10054d8:	48 8b 1d a1 8e 0c 00 	mov	rbx, qword ptr [rip + 822945]
 10054df:	48 85 db 	test	rbx, rbx
 10054e2:	0f 84 ee 00 00 00 	je	238 <_runtime.gogetenv+0x126>
 10054e8:	48 85 d2 	test	rdx, rdx
 10054eb:	7e 41 	jle	65 <_runtime.gogetenv+0x7e>
 10054ed:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10054f2:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 10054f7:	31 c0 	xor	eax, eax
 10054f9:	eb 07 	jmp	7 <_runtime.gogetenv+0x52>
 10054fb:	48 83 c3 10 	add	rbx, 16
 10054ff:	48 89 f8 	mov	rax, rdi
 1005502:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1005506:	48 8b 3b 	mov	rdi, qword ptr [rbx]
 1005509:	48 39 f1 	cmp	rcx, rsi
 100550c:	0f 8e b7 00 00 00 	jle	183 <_runtime.gogetenv+0x119>
 1005512:	44 0f b6 04 37 	movzx	r8d, byte ptr [rdi + rsi]
 1005517:	41 80 f8 3d 	cmp	r8b, 61
 100551b:	74 57 	je	87 <_runtime.gogetenv+0xc4>
 100551d:	45 31 c0 	xor	r8d, r8d
 1005520:	45 84 c0 	test	r8b, r8b
 1005523:	75 1b 	jne	27 <_runtime.gogetenv+0x90>
 1005525:	48 8d 78 01 	lea	rdi, [rax + 1]
 1005529:	48 39 d7 	cmp	rdi, rdx
 100552c:	7c cd 	jl	-51 <_runtime.gogetenv+0x4b>
 100552e:	0f 57 c0 	xorps	xmm0, xmm0
 1005531:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 1005536:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100553b:	48 83 c4 50 	add	rsp, 80
 100553f:	c3 	ret
 1005540:	48 8d 46 01 	lea	rax, [rsi + 1]
 1005544:	48 39 c8 	cmp	rax, rcx
 1005547:	0f 87 84 00 00 00 	ja	132 <_runtime.gogetenv+0x121>
 100554d:	48 29 c1 	sub	rcx, rax
 1005550:	48 89 ca 	mov	rdx, rcx
 1005553:	48 f7 d9 	neg	rcx
 1005556:	48 c1 f9 3f 	sar	rcx, 63
 100555a:	48 21 c8 	and	rax, rcx
 100555d:	48 01 f8 	add	rax, rdi
 1005560:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1005565:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 100556a:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100556f:	48 83 c4 50 	add	rsp, 80
 1005573:	c3 	ret
 1005574:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 1005579:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100557e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1005583:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1005588:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 100558c:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1005591:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005596:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100559b:	e8 50 cb ff ff 	call	-13488 <_runtime.memequal>
 10055a0:	44 0f b6 44 24 18 	movzx	r8d, byte ptr [rsp + 24]
 10055a6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10055ab:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10055b0:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 10055b5:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 10055ba:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 10055bf:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 10055c4:	e9 57 ff ff ff 	jmp	-169 <_runtime.gogetenv+0x70>
 10055c9:	45 31 c0 	xor	r8d, r8d
 10055cc:	e9 4f ff ff ff 	jmp	-177 <_runtime.gogetenv+0x70>
 10055d1:	e8 da dd 04 00 	call	318938 <_runtime.panicSliceB>
 10055d6:	48 8d 05 c1 ef 06 00 	lea	rax, [rip + 454593]
 10055dd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10055e1:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 10055ea:	e8 71 37 02 00 	call	145265 <_runtime.throw>
 10055ef:	90 	nop
 10055f0:	e8 db b5 04 00 	call	308699 <_runtime.morestack_noctxt>
 10055f5:	e9 b6 fe ff ff 	jmp	-330 <_runtime.gogetenv>
 10055fa:	cc 	int3
 10055fb:	cc 	int3
 10055fc:	cc 	int3
 10055fd:	cc 	int3
 10055fe:	cc 	int3
 10055ff:	cc 	int3

_runtime.(*TypeAssertionError).Error:
 1005600:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1005609:	48 8d 84 24 70 ff ff ff 	lea	rax, [rsp - 144]
 1005611:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1005615:	0f 86 c8 04 00 00 	jbe	1224 <_runtime.(*TypeAssertionError).Error+0x4e3>
 100561b:	48 81 ec 10 01 00 00 	sub	rsp, 272
 1005622:	48 89 ac 24 08 01 00 00 	mov	qword ptr [rsp + 264], rbp
 100562a:	48 8d ac 24 08 01 00 00 	lea	rbp, [rsp + 264]
 1005632:	48 8b 84 24 18 01 00 00 	mov	rax, qword ptr [rsp + 280]
 100563a:	48 8b 08 	mov	rcx, qword ptr [rax]
 100563d:	48 85 c9 	test	rcx, rcx
 1005640:	0f 85 7d 04 00 00 	jne	1149 <_runtime.(*TypeAssertionError).Error+0x4c3>
 1005646:	b9 09 00 00 00 	mov	ecx, 9
 100564b:	48 8d 15 10 db 06 00 	lea	rdx, [rip + 449296]
 1005652:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1005657:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 100565f:	48 8b 58 10 	mov	rbx, qword ptr [rax + 16]
 1005663:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1005667:	e8 34 5a 04 00 	call	285236 <_runtime.(*_type).string>
 100566c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1005671:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1005676:	48 8b 94 24 18 01 00 00 	mov	rdx, qword ptr [rsp + 280]
 100567e:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 1005682:	48 85 db 	test	rbx, rbx
 1005685:	0f 84 b6 03 00 00 	je	950 <_runtime.(*TypeAssertionError).Error+0x441>
 100568b:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 1005693:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1005698:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100569c:	e8 ff 59 04 00 	call	285183 <_runtime.(*_type).string>
 10056a1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10056a6:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10056ab:	48 8b 94 24 18 01 00 00 	mov	rdx, qword ptr [rsp + 280]
 10056b3:	48 83 7a 20 00 	cmp	qword ptr [rdx + 32], 0
 10056b8:	0f 85 75 02 00 00 	jne	629 <_runtime.(*TypeAssertionError).Error+0x333>
 10056be:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 10056c3:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 10056cb:	48 8d bc 24 a8 00 00 00 	lea	rdi, [rsp + 168]
 10056d3:	0f 57 c0 	xorps	xmm0, xmm0
 10056d6:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 10056da:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 10056df:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 10056e4:	e8 18 de 04 00 	call	319000 <_runtime.duffzero+0x111>
 10056e9:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 10056ed:	48 8d 15 d6 ee 06 00 	lea	rdx, [rip + 454358]
 10056f4:	48 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdx
 10056fc:	48 c7 84 24 b0 00 00 00 16 00 00 00 	mov	qword ptr [rsp + 176], 22
 1005708:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1005710:	48 89 94 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rdx
 1005718:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 100571d:	48 89 94 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rdx
 1005725:	48 8d 15 af d5 06 00 	lea	rdx, [rip + 447919]
 100572c:	48 89 94 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rdx
 1005734:	48 c7 84 24 d0 00 00 00 04 00 00 00 	mov	qword ptr [rsp + 208], 4
 1005740:	48 89 8c 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rcx
 1005748:	48 89 84 24 e0 00 00 00 	mov	qword ptr [rsp + 224], rax
 1005750:	48 8d 15 09 d7 06 00 	lea	rdx, [rip + 448265]
 1005757:	48 89 94 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rdx
 100575f:	48 c7 84 24 f0 00 00 00 06 00 00 00 	mov	qword ptr [rsp + 240], 6
 100576b:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1005773:	48 89 94 24 f8 00 00 00 	mov	qword ptr [rsp + 248], rdx
 100577b:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1005780:	48 89 9c 24 00 01 00 00 	mov	qword ptr [rsp + 256], rbx
 1005788:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1005790:	48 8d b4 24 a8 00 00 00 	lea	rsi, [rsp + 168]
 1005798:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100579d:	48 c7 44 24 10 06 00 00 00 	mov	qword ptr [rsp + 16], 6
 10057a6:	48 c7 44 24 18 06 00 00 00 	mov	qword ptr [rsp + 24], 6
 10057af:	e8 7c af 03 00 	call	241532 <_runtime.concatstrings>
 10057b4:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10057b9:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10057be:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 10057c3:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 10057c8:	48 39 da 	cmp	rdx, rbx
 10057cb:	74 20 	je	32 <_runtime.(*TypeAssertionError).Error+0x1ed>
 10057cd:	48 89 8c 24 20 01 00 00 	mov	qword ptr [rsp + 288], rcx
 10057d5:	48 89 84 24 28 01 00 00 	mov	qword ptr [rsp + 296], rax
 10057dd:	48 8b ac 24 08 01 00 00 	mov	rbp, qword ptr [rsp + 264]
 10057e5:	48 81 c4 10 01 00 00 	add	rsp, 272
 10057ec:	c3 	ret
 10057ed:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 10057f2:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 10057fa:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1005802:	48 89 04 24 	mov	qword ptr [rsp], rax
 1005806:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 100580e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005813:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1005818:	e8 d3 c8 ff ff 	call	-14125 <_runtime.memequal>
 100581d:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1005822:	75 0f 	jne	15 <_runtime.(*TypeAssertionError).Error+0x233>
 1005824:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1005829:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1005831:	eb 9a 	jmp	-102 <_runtime.(*TypeAssertionError).Error+0x1cd>
 1005833:	48 8b 84 24 18 01 00 00 	mov	rax, qword ptr [rsp + 280]
 100583b:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 100583f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1005843:	e8 c8 59 04 00 	call	285128 <_runtime.(*_type).pkgpath>
 1005848:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100584d:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1005852:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1005857:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 100585f:	48 8b 94 24 18 01 00 00 	mov	rdx, qword ptr [rsp + 280]
 1005867:	48 8b 52 10 	mov	rdx, qword ptr [rdx + 16]
 100586b:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100586f:	e8 9c 59 04 00 	call	285084 <_runtime.(*_type).pkgpath>
 1005874:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1005879:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 100587e:	74 51 	je	81 <_runtime.(*TypeAssertionError).Error+0x2d1>
 1005880:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1005888:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1005890:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005895:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100589a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100589f:	48 8d 05 58 02 07 00 	lea	rax, [rip + 459352]
 10058a6:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10058ab:	48 c7 44 24 20 20 00 00 00 	mov	qword ptr [rsp + 32], 32
 10058b4:	e8 57 b1 03 00 	call	242007 <_runtime.concatstring2>
 10058b9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10058be:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10058c3:	48 89 c2 	mov	rdx, rax
 10058c6:	48 89 c8 	mov	rax, rcx
 10058c9:	48 89 d1 	mov	rcx, rdx
 10058cc:	e9 fc fe ff ff 	jmp	-260 <_runtime.(*TypeAssertionError).Error+0x1cd>
 10058d1:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 10058d9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10058dd:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10058e2:	e8 09 c8 ff ff 	call	-14327 <_runtime.memequal>
 10058e7:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10058ec:	74 92 	je	-110 <_runtime.(*TypeAssertionError).Error+0x280>
 10058ee:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 10058f6:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10058fe:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005903:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1005908:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100590d:	48 8d 05 83 fd 06 00 	lea	rax, [rip + 458115]
 1005914:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1005919:	48 c7 44 24 20 1e 00 00 00 	mov	qword ptr [rsp + 32], 30
 1005922:	e8 e9 b0 03 00 	call	241897 <_runtime.concatstring2>
 1005927:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100592c:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1005931:	eb 90 	jmp	-112 <_runtime.(*TypeAssertionError).Error+0x2c3>
 1005933:	48 8d bc 24 a8 00 00 00 	lea	rdi, [rsp + 168]
 100593b:	0f 57 c0 	xorps	xmm0, xmm0
 100593e:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 1005942:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1005947:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 100594c:	e8 b0 db 04 00 	call	318384 <_runtime.duffzero+0x111>
 1005951:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1005955:	48 8d 1d 6e ec 06 00 	lea	rbx, [rip + 453742]
 100595c:	48 89 9c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbx
 1005964:	48 c7 84 24 b0 00 00 00 16 00 00 00 	mov	qword ptr [rsp + 176], 22
 1005970:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 1005978:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 1005980:	48 8d 05 40 d6 06 00 	lea	rax, [rip + 448064]
 1005987:	48 89 84 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rax
 100598f:	48 c7 84 24 d0 00 00 00 08 00 00 00 	mov	qword ptr [rsp + 208], 8
 100599b:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 10059a3:	48 89 84 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rax
 10059ab:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10059b0:	48 89 84 24 e0 00 00 00 	mov	qword ptr [rsp + 224], rax
 10059b8:	48 8d 05 b6 e2 06 00 	lea	rax, [rip + 451254]
 10059bf:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 10059c7:	48 c7 84 24 f0 00 00 00 11 00 00 00 	mov	qword ptr [rsp + 240], 17
 10059d3:	48 8b 42 18 	mov	rax, qword ptr [rdx + 24]
 10059d7:	48 8b 4a 20 	mov	rcx, qword ptr [rdx + 32]
 10059db:	48 89 84 24 f8 00 00 00 	mov	qword ptr [rsp + 248], rax
 10059e3:	48 89 8c 24 00 01 00 00 	mov	qword ptr [rsp + 256], rcx
 10059eb:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 10059f3:	48 8d 84 24 a8 00 00 00 	lea	rax, [rsp + 168]
 10059fb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005a00:	48 c7 44 24 10 06 00 00 00 	mov	qword ptr [rsp + 16], 6
 1005a09:	48 c7 44 24 18 06 00 00 00 	mov	qword ptr [rsp + 24], 6
 1005a12:	e8 19 ad 03 00 	call	240921 <_runtime.concatstrings>
 1005a17:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1005a1c:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1005a21:	48 89 84 24 20 01 00 00 	mov	qword ptr [rsp + 288], rax
 1005a29:	48 89 8c 24 28 01 00 00 	mov	qword ptr [rsp + 296], rcx
 1005a31:	48 8b ac 24 08 01 00 00 	mov	rbp, qword ptr [rsp + 264]
 1005a39:	48 81 c4 10 01 00 00 	add	rsp, 272
 1005a40:	c3 	ret
 1005a41:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1005a49:	48 8d 15 7a eb 06 00 	lea	rdx, [rip + 453498]
 1005a50:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1005a55:	48 c7 44 24 10 16 00 00 00 	mov	qword ptr [rsp + 16], 22
 1005a5e:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1005a66:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1005a6b:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1005a70:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1005a75:	48 8d 15 06 dc 06 00 	lea	rdx, [rip + 449542]
 1005a7c:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1005a81:	48 c7 44 24 30 0d 00 00 00 	mov	qword ptr [rsp + 48], 13
 1005a8a:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1005a8f:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1005a94:	e8 e7 af 03 00 	call	241639 <_runtime.concatstring4>
 1005a99:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1005a9e:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1005aa3:	48 89 8c 24 20 01 00 00 	mov	qword ptr [rsp + 288], rcx
 1005aab:	48 89 84 24 28 01 00 00 	mov	qword ptr [rsp + 296], rax
 1005ab3:	48 8b ac 24 08 01 00 00 	mov	rbp, qword ptr [rsp + 264]
 1005abb:	48 81 c4 10 01 00 00 	add	rsp, 272
 1005ac2:	c3 	ret
 1005ac3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1005ac7:	e8 d4 55 04 00 	call	284116 <_runtime.(*_type).string>
 1005acc:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1005ad1:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1005ad6:	48 8b 84 24 18 01 00 00 	mov	rax, qword ptr [rsp + 280]
 1005ade:	e9 6f fb ff ff 	jmp	-1169 <_runtime.(*TypeAssertionError).Error+0x52>
 1005ae3:	e8 e8 b0 04 00 	call	307432 <_runtime.morestack_noctxt>
 1005ae8:	e9 13 fb ff ff 	jmp	-1261 <_runtime.(*TypeAssertionError).Error>
 1005aed:	cc 	int3
 1005aee:	cc 	int3
 1005aef:	cc 	int3

_runtime.itoa:
 1005af0:	48 83 ec 18 	sub	rsp, 24
 1005af4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1005af9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1005afe:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1005b03:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 1005b07:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1005b0c:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1005b11:	eb 11 	jmp	17 <_runtime.itoa+0x34>
 1005b13:	4c 8d 46 30 	lea	r8, [rsi + 48]
 1005b17:	44 88 04 3b 	mov	byte ptr [rbx + rdi], r8b
 1005b1b:	48 ff cf 	dec	rdi
 1005b1e:	48 89 d6 	mov	rsi, rdx
 1005b21:	48 89 fa 	mov	rdx, rdi
 1005b24:	48 83 fe 0a 	cmp	rsi, 10
 1005b28:	72 25 	jb	37 <_runtime.itoa+0x5f>
 1005b2a:	48 b8 cd cc cc cc cc cc cc cc 	movabs	rax, -3689348814741910323
 1005b34:	48 89 d7 	mov	rdi, rdx
 1005b37:	48 f7 e6 	mul	rsi
 1005b3a:	48 c1 ea 03 	shr	rdx, 3
 1005b3e:	4c 8d 04 92 	lea	r8, [rdx + 4*rdx]
 1005b42:	49 d1 e0 	shl	r8
 1005b45:	4c 29 c6 	sub	rsi, r8
 1005b48:	48 39 cf 	cmp	rdi, rcx
 1005b4b:	72 c6 	jb	-58 <_runtime.itoa+0x23>
 1005b4d:	eb 48 	jmp	72 <_runtime.itoa+0xa7>
 1005b4f:	48 39 ca 	cmp	rdx, rcx
 1005b52:	73 3b 	jae	59 <_runtime.itoa+0x9f>
 1005b54:	48 8d 46 30 	lea	rax, [rsi + 48]
 1005b58:	88 04 13 	mov	byte ptr [rbx + rdx], al
 1005b5b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1005b60:	48 29 d0 	sub	rax, rdx
 1005b63:	48 89 c6 	mov	rsi, rax
 1005b66:	48 f7 d8 	neg	rax
 1005b69:	48 c1 f8 3f 	sar	rax, 63
 1005b6d:	48 21 d0 	and	rax, rdx
 1005b70:	48 01 d8 	add	rax, rbx
 1005b73:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1005b78:	48 29 d1 	sub	rcx, rdx
 1005b7b:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1005b80:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 1005b85:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1005b8a:	48 83 c4 18 	add	rsp, 24
 1005b8e:	c3 	ret
 1005b8f:	48 89 d0 	mov	rax, rdx
 1005b92:	e8 b9 d7 04 00 	call	317369 <_runtime.panicIndex>
 1005b97:	48 89 f8 	mov	rax, rdi
 1005b9a:	e8 b1 d7 04 00 	call	317361 <_runtime.panicIndex>
 1005b9f:	90 	nop

_runtime.errorString.Error:
 1005ba0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1005ba9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1005bad:	76 62 	jbe	98 <_runtime.errorString.Error+0x71>
 1005baf:	48 83 ec 40 	sub	rsp, 64
 1005bb3:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1005bb8:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1005bbd:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1005bc5:	48 8d 05 ee dd 06 00 	lea	rax, [rip + 450030]
 1005bcc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005bd1:	48 c7 44 24 10 0f 00 00 00 	mov	qword ptr [rsp + 16], 15
 1005bda:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1005bdf:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1005be4:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1005be9:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1005bee:	e8 1d ae 03 00 	call	241181 <_runtime.concatstring2>
 1005bf3:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1005bf8:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1005bfd:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1005c02:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1005c07:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1005c0c:	48 83 c4 40 	add	rsp, 64
 1005c10:	c3 	ret
 1005c11:	e8 ba af 04 00 	call	307130 <_runtime.morestack_noctxt>
 1005c16:	eb 88 	jmp	-120 <_runtime.errorString.Error>
 1005c18:	cc 	int3
 1005c19:	cc 	int3
 1005c1a:	cc 	int3
 1005c1b:	cc 	int3
 1005c1c:	cc 	int3
 1005c1d:	cc 	int3
 1005c1e:	cc 	int3
 1005c1f:	cc 	int3

_runtime.plainError.Error:
 1005c20:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1005c25:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1005c2a:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1005c2f:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1005c34:	c3 	ret
 1005c35:	cc 	int3
 1005c36:	cc 	int3
 1005c37:	cc 	int3
 1005c38:	cc 	int3
 1005c39:	cc 	int3
 1005c3a:	cc 	int3
 1005c3b:	cc 	int3
 1005c3c:	cc 	int3
 1005c3d:	cc 	int3
 1005c3e:	cc 	int3
 1005c3f:	cc 	int3

_runtime.appendIntStr:
 1005c40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1005c49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1005c4d:	0f 86 08 02 00 00 	jbe	520 <_runtime.appendIntStr+0x21b>
 1005c53:	48 83 ec 78 	sub	rsp, 120
 1005c57:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 1005c5c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 1005c61:	0f b6 84 24 a0 00 00 00 	movzx	eax, byte ptr [rsp + 160]
 1005c69:	84 c0 	test	al, al
 1005c6b:	0f 84 e0 01 00 00 	je	480 <_runtime.appendIntStr+0x211>
 1005c71:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1005c79:	48 85 c0 	test	rax, rax
 1005c7c:	0f 8d b2 01 00 00 	jge	434 <_runtime.appendIntStr+0x1f4>
 1005c82:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1005c8a:	48 8d 51 01 	lea	rdx, [rcx + 1]
 1005c8e:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1005c96:	48 39 da 	cmp	rdx, rbx
 1005c99:	0f 87 41 01 00 00 	ja	321 <_runtime.appendIntStr+0x1a0>
 1005c9f:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 1005ca7:	c6 04 0e 2d 	mov	byte ptr [rsi + rcx], 45
 1005cab:	48 f7 d8 	neg	rax
 1005cae:	48 89 b4 24 80 00 00 00 	mov	qword ptr [rsp + 128], rsi
 1005cb6:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 1005cbe:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 1005cc6:	48 c7 44 24 54 00 00 00 00 	mov	qword ptr [rsp + 84], 0
 1005ccf:	0f 57 c0 	xorps	xmm0, xmm0
 1005cd2:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 1005cd7:	48 8d 4c 24 54 	lea	rcx, [rsp + 84]
 1005cdc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1005ce0:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1005ce9:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 1005cf2:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1005cf7:	e8 f4 fd ff ff 	call	-524 <_runtime.itoa>
 1005cfc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1005d01:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1005d09:	48 8d 14 01 	lea	rdx, [rcx + rax]
 1005d0d:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 1005d12:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1005d17:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1005d1f:	48 39 f2 	cmp	rdx, rsi
 1005d22:	77 65 	ja	101 <_runtime.appendIntStr+0x149>
 1005d24:	48 8b bc 24 80 00 00 00 	mov	rdi, qword ptr [rsp + 128]
 1005d2c:	48 89 bc 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdi
 1005d34:	48 89 b4 24 90 00 00 00 	mov	qword ptr [rsp + 144], rsi
 1005d3c:	48 01 f9 	add	rcx, rdi
 1005d3f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1005d43:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1005d48:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1005d4d:	e8 fe dd 04 00 	call	318974 <_runtime.memmove>
 1005d52:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1005d5a:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 1005d62:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1005d67:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 1005d6f:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1005d77:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1005d7f:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1005d84:	48 83 c4 78 	add	rsp, 120
 1005d88:	c3 	ret
 1005d89:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1005d8e:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 1005d93:	48 8d 05 46 a3 05 00 	lea	rax, [rip + 369478]
 1005d9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1005d9e:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1005da6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1005dab:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1005db0:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1005db5:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1005dba:	e8 61 6e 03 00 	call	224865 <_runtime.growslice>
 1005dbf:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1005dc4:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 1005dc9:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1005dce:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1005dd6:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1005ddb:	e9 4c ff ff ff 	jmp	-180 <_runtime.appendIntStr+0xec>
 1005de0:	48 8d 05 f9 a2 05 00 	lea	rax, [rip + 369401]
 1005de7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1005deb:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 1005df3:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1005df8:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1005dfd:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1005e02:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1005e07:	e8 14 6e 03 00 	call	224788 <_runtime.growslice>
 1005e0c:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1005e11:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1005e16:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1005e1b:	48 8d 50 01 	lea	rdx, [rax + 1]
 1005e1f:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1005e27:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1005e2f:	e9 73 fe ff ff 	jmp	-397 <_runtime.appendIntStr+0x67>
 1005e34:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 1005e3c:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1005e44:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1005e4c:	e9 5d fe ff ff 	jmp	-419 <_runtime.appendIntStr+0x6e>
 1005e51:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1005e59:	eb d9 	jmp	-39 <_runtime.appendIntStr+0x1f4>
 1005e5b:	e8 70 ad 04 00 	call	306544 <_runtime.morestack_noctxt>
 1005e60:	e9 db fd ff ff 	jmp	-549 <_runtime.appendIntStr>
 1005e65:	cc 	int3
 1005e66:	cc 	int3
 1005e67:	cc 	int3
 1005e68:	cc 	int3
 1005e69:	cc 	int3
 1005e6a:	cc 	int3
 1005e6b:	cc 	int3
 1005e6c:	cc 	int3
 1005e6d:	cc 	int3
 1005e6e:	cc 	int3
 1005e6f:	cc 	int3

_runtime.boundsError.Error:
 1005e70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1005e79:	48 8d 44 24 a0 	lea	rax, [rsp - 96]
 1005e7e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1005e82:	0f 86 d4 02 00 00 	jbe	724 <_runtime.boundsError.Error+0x2ec>
 1005e88:	48 81 ec e0 00 00 00 	sub	rsp, 224
 1005e8f:	48 89 ac 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rbp
 1005e97:	48 8d ac 24 d8 00 00 00 	lea	rbp, [rsp + 216]
 1005e9f:	0f b6 84 24 f9 00 00 00 	movzx	eax, byte ptr [rsp + 249]
 1005ea7:	48 83 f8 08 	cmp	rax, 8
 1005eab:	0f 83 a0 02 00 00 	jae	672 <_runtime.boundsError.Error+0x2e1>
 1005eb1:	48 c1 e0 04 	shl	rax, 4
 1005eb5:	48 8d 15 e4 6a 0c 00 	lea	rdx, [rip + 813796]
 1005ebc:	48 8b 5c 10 08 	mov	rbx, qword ptr [rax + rdx + 8]
 1005ec1:	48 8b 14 10 	mov	rdx, qword ptr [rax + rdx]
 1005ec5:	0f b6 b4 24 f8 00 00 00 	movzx	esi, byte ptr [rsp + 248]
 1005ecd:	40 84 f6 	test	sil, sil
 1005ed0:	0f 84 5e 02 00 00 	je	606 <_runtime.boundsError.Error+0x2c4>
 1005ed6:	4c 8b 84 24 e8 00 00 00 	mov	r8, qword ptr [rsp + 232]
 1005ede:	4d 85 c0 	test	r8, r8
 1005ee1:	0f 8d 3f 02 00 00 	jge	575 <_runtime.boundsError.Error+0x2b6>
 1005ee7:	48 8d 15 32 6b 0c 00 	lea	rdx, [rip + 813874]
 1005eee:	48 8b 1c 10 	mov	rbx, qword ptr [rax + rdx]
 1005ef2:	48 8b 54 10 08 	mov	rdx, qword ptr [rax + rdx + 8]
 1005ef7:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 1005efc:	48 89 9c 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rbx
 1005f04:	48 c7 44 24 6c 00 00 00 00 	mov	qword ptr [rsp + 108], 0
 1005f0d:	48 8d 7c 24 70 	lea	rdi, [rsp + 112]
 1005f12:	0f 57 c0 	xorps	xmm0, xmm0
 1005f15:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 1005f19:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1005f1e:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1005f23:	e8 d9 d5 04 00 	call	316889 <_runtime.duffzero+0x111>
 1005f28:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1005f2c:	49 b9 72 75 6e 74 69 6d 65 20 	movabs	r9, 2334392281553859954
 1005f36:	4c 89 4c 24 6c 	mov	qword ptr [rsp + 108], r9
 1005f3b:	49 b9 20 65 72 72 6f 72 3a 20 	movabs	r9, 2322294380849947936
 1005f45:	4c 89 4c 24 73 	mov	qword ptr [rsp + 115], r9
 1005f4a:	31 c0 	xor	eax, eax
 1005f4c:	48 8d 4c 24 6c 	lea	rcx, [rsp + 108]
 1005f51:	bf 0f 00 00 00 	mov	edi, 15
 1005f56:	41 b9 64 00 00 00 	mov	r9d, 100
 1005f5c:	eb 06 	jmp	6 <_runtime.boundsError.Error+0xf4>
 1005f5e:	48 ff c0 	inc	rax
 1005f61:	4c 89 df 	mov	rdi, r11
 1005f64:	48 39 d0 	cmp	rax, rdx
 1005f67:	0f 8d 73 01 00 00 	jge	371 <_runtime.boundsError.Error+0x270>
 1005f6d:	0f 83 d6 01 00 00 	jae	470 <_runtime.boundsError.Error+0x2d9>
 1005f73:	44 0f b6 14 03 	movzx	r10d, byte ptr [rbx + rax]
 1005f78:	41 80 fa 25 	cmp	r10b, 37
 1005f7c:	0f 84 84 00 00 00 	je	132 <_runtime.boundsError.Error+0x196>
 1005f82:	4c 8d 5f 01 	lea	r11, [rdi + 1]
 1005f86:	4d 39 cb 	cmp	r11, r9
 1005f89:	77 06 	ja	6 <_runtime.boundsError.Error+0x121>
 1005f8b:	44 88 14 39 	mov	byte ptr [rcx + rdi], r10b
 1005f8f:	eb cd 	jmp	-51 <_runtime.boundsError.Error+0xee>
 1005f91:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1005f96:	44 88 54 24 47 	mov	byte ptr [rsp + 71], r10b
 1005f9b:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 1005fa0:	48 8d 05 39 a1 05 00 	lea	rax, [rip + 368953]
 1005fa7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1005fab:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1005fb0:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 1005fb5:	4c 89 4c 24 18 	mov	qword ptr [rsp + 24], r9
 1005fba:	4c 89 5c 24 20 	mov	qword ptr [rsp + 32], r11
 1005fbf:	e8 5c 6c 03 00 	call	224348 <_runtime.growslice>
 1005fc4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1005fc9:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1005fce:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 1005fd3:	4c 8d 58 01 	lea	r11, [rax + 1]
 1005fd7:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1005fdc:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1005fe1:	48 8b 9c 24 d0 00 00 00 	mov	rbx, qword ptr [rsp + 208]
 1005fe9:	0f b6 b4 24 f8 00 00 00 	movzx	esi, byte ptr [rsp + 248]
 1005ff1:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1005ff6:	4c 8b 84 24 e8 00 00 00 	mov	r8, qword ptr [rsp + 232]
 1005ffe:	44 0f b6 54 24 47 	movzx	r10d, byte ptr [rsp + 71]
 1006004:	eb 85 	jmp	-123 <_runtime.boundsError.Error+0x11b>
 1006006:	4c 8d 50 01 	lea	r10, [rax + 1]
 100600a:	49 39 d2 	cmp	r10, rdx
 100600d:	0f 83 2b 01 00 00 	jae	299 <_runtime.boundsError.Error+0x2ce>
 1006013:	4c 89 54 24 60 	mov	qword ptr [rsp + 96], r10
 1006018:	44 0f b6 5c 18 01 	movzx	r11d, byte ptr [rax + rbx + 1]
 100601e:	41 80 fb 78 	cmp	r11b, 120
 1006022:	74 69 	je	105 <_runtime.boundsError.Error+0x21d>
 1006024:	41 80 fb 79 	cmp	r11b, 121
 1006028:	74 0b 	je	11 <_runtime.boundsError.Error+0x1c5>
 100602a:	4c 89 d0 	mov	rax, r10
 100602d:	49 89 fb 	mov	r11, rdi
 1006030:	e9 29 ff ff ff 	jmp	-215 <_runtime.boundsError.Error+0xee>
 1006035:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006039:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 100603e:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 1006043:	48 8b 84 24 f0 00 00 00 	mov	rax, qword ptr [rsp + 240]
 100604b:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1006050:	c6 44 24 20 01 	mov	byte ptr [rsp + 32], 1
 1006055:	e8 e6 fb ff ff 	call	-1050 <_runtime.appendIntStr>
 100605a:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 100605f:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 1006064:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1006069:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 100606e:	48 8b 9c 24 d0 00 00 00 	mov	rbx, qword ptr [rsp + 208]
 1006076:	0f b6 b4 24 f8 00 00 00 	movzx	esi, byte ptr [rsp + 248]
 100607e:	4c 8b 84 24 e8 00 00 00 	mov	r8, qword ptr [rsp + 232]
 1006086:	4c 8b 54 24 60 	mov	r10, qword ptr [rsp + 96]
 100608b:	eb 9d 	jmp	-99 <_runtime.boundsError.Error+0x1ba>
 100608d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006091:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1006096:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 100609b:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 10060a0:	40 88 74 24 20 	mov	byte ptr [rsp + 32], sil
 10060a5:	e8 96 fb ff ff 	call	-1130 <_runtime.appendIntStr>
 10060aa:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10060af:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 10060b4:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 10060b9:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10060be:	48 8b 9c 24 d0 00 00 00 	mov	rbx, qword ptr [rsp + 208]
 10060c6:	0f b6 b4 24 f8 00 00 00 	movzx	esi, byte ptr [rsp + 248]
 10060ce:	4c 8b 84 24 e8 00 00 00 	mov	r8, qword ptr [rsp + 232]
 10060d6:	4c 8b 54 24 60 	mov	r10, qword ptr [rsp + 96]
 10060db:	e9 4a ff ff ff 	jmp	-182 <_runtime.boundsError.Error+0x1ba>
 10060e0:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 10060e8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10060ed:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 10060f2:	4c 89 4c 24 18 	mov	qword ptr [rsp + 24], r9
 10060f7:	e8 04 aa 03 00 	call	240132 <_runtime.slicebytetostring>
 10060fc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1006101:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1006106:	48 89 8c 24 00 01 00 00 	mov	qword ptr [rsp + 256], rcx
 100610e:	48 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], rax
 1006116:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 100611e:	48 81 c4 e0 00 00 00 	add	rsp, 224
 1006125:	c3 	ret
 1006126:	48 89 d0 	mov	rax, rdx
 1006129:	48 89 da 	mov	rdx, rbx
 100612c:	48 89 c3 	mov	rbx, rax
 100612f:	e9 c3 fd ff ff 	jmp	-573 <_runtime.boundsError.Error+0x87>
 1006134:	4c 8b 84 24 e8 00 00 00 	mov	r8, qword ptr [rsp + 232]
 100613c:	eb e8 	jmp	-24 <_runtime.boundsError.Error+0x2b6>
 100613e:	4c 89 d0 	mov	rax, r10
 1006141:	48 89 d1 	mov	rcx, rdx
 1006144:	e8 07 d2 04 00 	call	315911 <_runtime.panicIndex>
 1006149:	48 89 d1 	mov	rcx, rdx
 100614c:	e8 ff d1 04 00 	call	315903 <_runtime.panicIndex>
 1006151:	b9 08 00 00 00 	mov	ecx, 8
 1006156:	e8 f5 d1 04 00 	call	315893 <_runtime.panicIndex>
 100615b:	90 	nop
 100615c:	e8 6f aa 04 00 	call	305775 <_runtime.morestack_noctxt>
 1006161:	e9 0a fd ff ff 	jmp	-758 <_runtime.boundsError.Error>
 1006166:	cc 	int3
 1006167:	cc 	int3
 1006168:	cc 	int3
 1006169:	cc 	int3
 100616a:	cc 	int3
 100616b:	cc 	int3
 100616c:	cc 	int3
 100616d:	cc 	int3
 100616e:	cc 	int3
 100616f:	cc 	int3

_runtime.printany:
 1006170:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1006179:	48 8d 44 24 d0 	lea	rax, [rsp - 48]
 100617e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1006182:	0f 86 fd 07 00 00 	jbe	2045 <_runtime.printany+0x815>
 1006188:	48 81 ec b0 00 00 00 	sub	rsp, 176
 100618f:	48 89 ac 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbp
 1006197:	48 8d ac 24 a8 00 00 00 	lea	rbp, [rsp + 168]
 100619f:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 10061a7:	48 85 c0 	test	rax, rax
 10061aa:	0f 84 ad 07 00 00 	je	1965 <_runtime.printany+0x7ed>
 10061b0:	8b 48 10 	mov	ecx, dword ptr [rax + 16]
 10061b3:	81 f9 6d 54 1a b3 	cmp	ecx, 3004847213
 10061b9:	0f 87 1b 04 00 00 	ja	1051 <_runtime.printany+0x46a>
 10061bf:	81 f9 8c 02 25 79 	cmp	ecx, 2032468620
 10061c5:	0f 87 6f 02 00 00 	ja	623 <_runtime.printany+0x2ca>
 10061cb:	81 f9 fb 7f a2 2e 	cmp	ecx, 782401531
 10061d1:	0f 87 84 01 00 00 	ja	388 <_runtime.printany+0x1eb>
 10061d7:	81 f9 c5 06 ff 13 	cmp	ecx, 335480517
 10061dd:	0f 85 0d 01 00 00 	jne	269 <_runtime.printany+0x180>
 10061e3:	48 8d 0d b6 95 05 00 	lea	rcx, [rip + 366006]
 10061ea:	48 39 c1 	cmp	rcx, rax
 10061ed:	0f 85 eb 00 00 00 	jne	235 <_runtime.printany+0x16e>
 10061f3:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10061fb:	0f b6 11 	movzx	edx, byte ptr [rcx]
 10061fe:	0f 84 bd 00 00 00 	je	189 <_runtime.printany+0x151>
 1006204:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 100620c:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 1006214:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 100621c:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1006220:	e8 7b 4e 04 00 	call	282235 <_runtime.(*_type).string>
 1006225:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100622a:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100622f:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1006234:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 100623c:	e8 5f 42 02 00 	call	148063 <_runtime.printlock>
 1006241:	48 8d 05 11 ca 06 00 	lea	rax, [rip + 444945]
 1006248:	48 89 04 24 	mov	qword ptr [rsp], rax
 100624c:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1006255:	e8 86 4b 02 00 	call	150406 <_runtime.printstring>
 100625a:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1006262:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006266:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100626b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006270:	e8 6b 4b 02 00 	call	150379 <_runtime.printstring>
 1006275:	48 8d 05 f4 c9 06 00 	lea	rax, [rip + 444916]
 100627c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006280:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1006289:	e8 52 4b 02 00 	call	150354 <_runtime.printstring>
 100628e:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1006296:	48 89 04 24 	mov	qword ptr [rsp], rax
 100629a:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 10062a2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10062a7:	e8 94 4c 02 00 	call	150676 <_runtime.printeface>
 10062ac:	e8 6f 42 02 00 	call	148079 <_runtime.printunlock>
 10062b1:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 10062b9:	48 81 c4 b0 00 00 00 	add	rsp, 176
 10062c0:	c3 	ret
 10062c1:	88 54 24 1d 	mov	byte ptr [rsp + 29], dl
 10062c5:	e8 d6 41 02 00 	call	147926 <_runtime.printlock>
 10062ca:	0f b6 44 24 1d 	movzx	eax, byte ptr [rsp + 29]
 10062cf:	88 04 24 	mov	byte ptr [rsp], al
 10062d2:	e8 a9 44 02 00 	call	148649 <_runtime.printbool>
 10062d7:	e8 44 42 02 00 	call	148036 <_runtime.printunlock>
 10062dc:	eb d3 	jmp	-45 <_runtime.printany+0x141>
 10062de:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10062e6:	ba 00 00 00 00 	mov	edx, 0
 10062eb:	e9 0e ff ff ff 	jmp	-242 <_runtime.printany+0x8e>
 10062f0:	81 f9 fb 7f a2 2e 	cmp	ecx, 782401531
 10062f6:	75 56 	jne	86 <_runtime.printany+0x1de>
 10062f8:	48 8d 0d 21 96 05 00 	lea	rcx, [rip + 366113]
 10062ff:	48 39 c1 	cmp	rcx, rax
 1006302:	75 3d 	jne	61 <_runtime.printany+0x1d1>
 1006304:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100630c:	f2 0f 10 01 	movsd	xmm0, qword ptr [rcx]
 1006310:	0f 85 ee fe ff ff 	jne	-274 <_runtime.printany+0x94>
 1006316:	f2 0f 11 84 24 80 00 00 00 	movsd	qword ptr [rsp + 128], xmm0
 100631f:	e8 7c 41 02 00 	call	147836 <_runtime.printlock>
 1006324:	f2 0f 10 84 24 80 00 00 00 	movsd	xmm0, qword ptr [rsp + 128]
 100632d:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1006332:	e8 b9 44 02 00 	call	148665 <_runtime.printfloat>
 1006337:	e8 e4 41 02 00 	call	147940 <_runtime.printunlock>
 100633c:	e9 70 ff ff ff 	jmp	-144 <_runtime.printany+0x141>
 1006341:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006349:	0f 57 c0 	xorps	xmm0, xmm0
 100634c:	eb c2 	jmp	-62 <_runtime.printany+0x1a0>
 100634e:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006356:	e9 a9 fe ff ff 	jmp	-343 <_runtime.printany+0x94>
 100635b:	81 f9 5f 42 3e 66 	cmp	ecx, 1715356255
 1006361:	75 50 	jne	80 <_runtime.printany+0x243>
 1006363:	48 8d 0d 76 9d 05 00 	lea	rcx, [rip + 367990]
 100636a:	48 39 c1 	cmp	rcx, rax
 100636d:	75 35 	jne	53 <_runtime.printany+0x234>
 100636f:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006377:	0f b6 11 	movzx	edx, byte ptr [rcx]
 100637a:	0f 85 84 fe ff ff 	jne	-380 <_runtime.printany+0x94>
 1006380:	88 54 24 1e 	mov	byte ptr [rsp + 30], dl
 1006384:	e8 17 41 02 00 	call	147735 <_runtime.printlock>
 1006389:	0f b6 44 24 1e 	movzx	eax, byte ptr [rsp + 30]
 100638e:	0f b6 c0 	movzx	eax, al
 1006391:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006395:	e8 86 47 02 00 	call	149382 <_runtime.printuint>
 100639a:	e8 81 41 02 00 	call	147841 <_runtime.printunlock>
 100639f:	e9 0d ff ff ff 	jmp	-243 <_runtime.printany+0x141>
 10063a4:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10063ac:	ba 00 00 00 00 	mov	edx, 0
 10063b1:	eb c7 	jmp	-57 <_runtime.printany+0x20a>
 10063b3:	81 f9 8c 02 25 79 	cmp	ecx, 2032468620
 10063b9:	75 72 	jne	114 <_runtime.printany+0x2bd>
 10063bb:	48 8d 0d de 94 05 00 	lea	rcx, [rip + 365790]
 10063c2:	48 39 c1 	cmp	rcx, rax
 10063c5:	75 56 	jne	86 <_runtime.printany+0x2ad>
 10063c7:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10063cf:	f3 0f 10 01 	movss	xmm0, dword ptr [rcx]
 10063d3:	f3 0f 10 49 04 	movss	xmm1, dword ptr [rcx + 4]
 10063d8:	0f 85 26 fe ff ff 	jne	-474 <_runtime.printany+0x94>
 10063de:	f3 0f 11 4c 24 28 	movss	dword ptr [rsp + 40], xmm1
 10063e4:	f3 0f 11 44 24 24 	movss	dword ptr [rsp + 36], xmm0
 10063ea:	e8 b1 40 02 00 	call	147633 <_runtime.printlock>
 10063ef:	f3 0f 10 44 24 24 	movss	xmm0, dword ptr [rsp + 36]
 10063f5:	f3 0f 5a c0 	cvtss2sd	xmm0, xmm0
 10063f9:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 10063fe:	f3 0f 10 44 24 28 	movss	xmm0, dword ptr [rsp + 40]
 1006404:	f3 0f 5a c0 	cvtss2sd	xmm0, xmm0
 1006408:	f2 0f 11 44 24 08 	movsd	qword ptr [rsp + 8], xmm0
 100640e:	e8 7d 46 02 00 	call	149117 <_runtime.printcomplex>
 1006413:	e8 08 41 02 00 	call	147720 <_runtime.printunlock>
 1006418:	e9 94 fe ff ff 	jmp	-364 <_runtime.printany+0x141>
 100641d:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006425:	0f 57 c9 	xorps	xmm1, xmm1
 1006428:	0f 57 c0 	xorps	xmm0, xmm0
 100642b:	eb ab 	jmp	-85 <_runtime.printany+0x268>
 100642d:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006435:	e9 ca fd ff ff 	jmp	-566 <_runtime.printany+0x94>
 100643a:	81 f9 ff 9b 3f 96 	cmp	ecx, 2520751103
 1006440:	0f 87 b9 00 00 00 	ja	185 <_runtime.printany+0x38f>
 1006446:	81 f9 2e 8d 31 86 	cmp	ecx, 2251394350
 100644c:	75 4e 	jne	78 <_runtime.printany+0x32c>
 100644e:	48 8d 0d 4b 9c 05 00 	lea	rcx, [rip + 367691]
 1006455:	48 39 c1 	cmp	rcx, rax
 1006458:	75 33 	jne	51 <_runtime.printany+0x31d>
 100645a:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006462:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1006465:	0f 85 99 fd ff ff 	jne	-615 <_runtime.printany+0x94>
 100646b:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 1006470:	e8 2b 40 02 00 	call	147499 <_runtime.printlock>
 1006475:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 100647a:	48 89 04 24 	mov	qword ptr [rsp], rax
 100647e:	e8 9d 46 02 00 	call	149149 <_runtime.printuint>
 1006483:	e8 98 40 02 00 	call	147608 <_runtime.printunlock>
 1006488:	e9 24 fe ff ff 	jmp	-476 <_runtime.printany+0x141>
 100648d:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006495:	ba 00 00 00 00 	mov	edx, 0
 100649a:	eb c9 	jmp	-55 <_runtime.printany+0x2f5>
 100649c:	81 f9 ff 9b 3f 96 	cmp	ecx, 2520751103
 10064a2:	75 4e 	jne	78 <_runtime.printany+0x382>
 10064a4:	48 8d 0d f5 95 05 00 	lea	rcx, [rip + 366069]
 10064ab:	48 39 c1 	cmp	rcx, rax
 10064ae:	75 33 	jne	51 <_runtime.printany+0x373>
 10064b0:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10064b8:	48 8b 11 	mov	rdx, qword ptr [rcx]
 10064bb:	0f 85 43 fd ff ff 	jne	-701 <_runtime.printany+0x94>
 10064c1:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 10064c6:	e8 d5 3f 02 00 	call	147413 <_runtime.printlock>
 10064cb:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10064d0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10064d4:	e8 47 47 02 00 	call	149319 <_runtime.printint>
 10064d9:	e8 42 40 02 00 	call	147522 <_runtime.printunlock>
 10064de:	e9 ce fd ff ff 	jmp	-562 <_runtime.printany+0x141>
 10064e3:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10064eb:	ba 00 00 00 00 	mov	edx, 0
 10064f0:	eb c9 	jmp	-55 <_runtime.printany+0x34b>
 10064f2:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10064fa:	e9 05 fd ff ff 	jmp	-763 <_runtime.printany+0x94>
 10064ff:	81 f9 d3 3e c2 b0 	cmp	ecx, 2965520083
 1006505:	75 54 	jne	84 <_runtime.printany+0x3eb>
 1006507:	48 8d 0d d2 93 05 00 	lea	rcx, [rip + 365522]
 100650e:	48 39 c1 	cmp	rcx, rax
 1006511:	75 3b 	jne	59 <_runtime.printany+0x3de>
 1006513:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100651b:	f3 0f 10 01 	movss	xmm0, dword ptr [rcx]
 100651f:	0f 85 df fc ff ff 	jne	-801 <_runtime.printany+0x94>
 1006525:	f3 0f 11 44 24 2c 	movss	dword ptr [rsp + 44], xmm0
 100652b:	e8 70 3f 02 00 	call	147312 <_runtime.printlock>
 1006530:	f3 0f 10 44 24 2c 	movss	xmm0, dword ptr [rsp + 44]
 1006536:	f3 0f 5a c0 	cvtss2sd	xmm0, xmm0
 100653a:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 100653f:	e8 ac 42 02 00 	call	148140 <_runtime.printfloat>
 1006544:	e8 d7 3f 02 00 	call	147415 <_runtime.printunlock>
 1006549:	e9 63 fd ff ff 	jmp	-669 <_runtime.printany+0x141>
 100654e:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006556:	0f 57 c0 	xorps	xmm0, xmm0
 1006559:	eb c4 	jmp	-60 <_runtime.printany+0x3af>
 100655b:	81 f9 6d 54 1a b3 	cmp	ecx, 3004847213
 1006561:	75 6a 	jne	106 <_runtime.printany+0x45d>
 1006563:	48 8d 0d f6 92 05 00 	lea	rcx, [rip + 365302]
 100656a:	48 39 c1 	cmp	rcx, rax
 100656d:	75 4e 	jne	78 <_runtime.printany+0x44d>
 100656f:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006577:	f2 0f 10 41 08 	movsd	xmm0, qword ptr [rcx + 8]
 100657c:	f2 0f 10 09 	movsd	xmm1, qword ptr [rcx]
 1006580:	0f 85 7e fc ff ff 	jne	-898 <_runtime.printany+0x94>
 1006586:	f2 0f 11 44 24 50 	movsd	qword ptr [rsp + 80], xmm0
 100658c:	f2 0f 11 4c 24 40 	movsd	qword ptr [rsp + 64], xmm1
 1006592:	e8 09 3f 02 00 	call	147209 <_runtime.printlock>
 1006597:	f2 0f 10 44 24 40 	movsd	xmm0, qword ptr [rsp + 64]
 100659d:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 10065a2:	f2 0f 10 44 24 50 	movsd	xmm0, qword ptr [rsp + 80]
 10065a8:	f2 0f 11 44 24 08 	movsd	qword ptr [rsp + 8], xmm0
 10065ae:	e8 dd 44 02 00 	call	148701 <_runtime.printcomplex>
 10065b3:	e8 68 3f 02 00 	call	147304 <_runtime.printunlock>
 10065b8:	e9 f4 fc ff ff 	jmp	-780 <_runtime.printany+0x141>
 10065bd:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10065c5:	0f 57 c0 	xorps	xmm0, xmm0
 10065c8:	0f 57 c9 	xorps	xmm1, xmm1
 10065cb:	eb b3 	jmp	-77 <_runtime.printany+0x410>
 10065cd:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10065d5:	e9 2a fc ff ff 	jmp	-982 <_runtime.printany+0x94>
 10065da:	81 f9 3d e8 4a d0 	cmp	ecx, 3494570045
 10065e0:	0f 87 7e 01 00 00 	ja	382 <_runtime.printany+0x5f4>
 10065e6:	81 f9 92 d7 4a bd 	cmp	ecx, 3175798674
 10065ec:	0f 87 b9 00 00 00 	ja	185 <_runtime.printany+0x53b>
 10065f2:	81 f9 02 41 ad bb 	cmp	ecx, 3148693762
 10065f8:	75 4e 	jne	78 <_runtime.printany+0x4d8>
 10065fa:	48 8d 0d 5f 94 05 00 	lea	rcx, [rip + 365663]
 1006601:	48 39 c1 	cmp	rcx, rax
 1006604:	75 33 	jne	51 <_runtime.printany+0x4c9>
 1006606:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100660e:	8b 11 	mov	edx, dword ptr [rcx]
 1006610:	0f 85 ee fb ff ff 	jne	-1042 <_runtime.printany+0x94>
 1006616:	89 54 24 30 	mov	dword ptr [rsp + 48], edx
 100661a:	e8 81 3e 02 00 	call	147073 <_runtime.printlock>
 100661f:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 1006623:	48 63 c0 	movsxd	rax, eax
 1006626:	48 89 04 24 	mov	qword ptr [rsp], rax
 100662a:	e8 f1 45 02 00 	call	148977 <_runtime.printint>
 100662f:	e8 ec 3e 02 00 	call	147180 <_runtime.printunlock>
 1006634:	e9 78 fc ff ff 	jmp	-904 <_runtime.printany+0x141>
 1006639:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006641:	ba 00 00 00 00 	mov	edx, 0
 1006646:	eb c8 	jmp	-56 <_runtime.printany+0x4a0>
 1006648:	81 f9 92 d7 4a bd 	cmp	ecx, 3175798674
 100664e:	75 4e 	jne	78 <_runtime.printany+0x52e>
 1006650:	48 8d 0d c9 9a 05 00 	lea	rcx, [rip + 367305]
 1006657:	48 39 c1 	cmp	rcx, rax
 100665a:	75 33 	jne	51 <_runtime.printany+0x51f>
 100665c:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006664:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1006667:	0f 85 97 fb ff ff 	jne	-1129 <_runtime.printany+0x94>
 100666d:	48 89 54 24 78 	mov	qword ptr [rsp + 120], rdx
 1006672:	e8 29 3e 02 00 	call	146985 <_runtime.printlock>
 1006677:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 100667c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006680:	e8 9b 44 02 00 	call	148635 <_runtime.printuint>
 1006685:	e8 96 3e 02 00 	call	147094 <_runtime.printunlock>
 100668a:	e9 22 fc ff ff 	jmp	-990 <_runtime.printany+0x141>
 100668f:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006697:	ba 00 00 00 00 	mov	edx, 0
 100669c:	eb c9 	jmp	-55 <_runtime.printany+0x4f7>
 100669e:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10066a6:	e9 59 fb ff ff 	jmp	-1191 <_runtime.printany+0x94>
 10066ab:	81 f9 27 c0 06 cc 	cmp	ecx, 3422994471
 10066b1:	75 51 	jne	81 <_runtime.printany+0x594>
 10066b3:	48 8d 0d 26 94 05 00 	lea	rcx, [rip + 365606]
 10066ba:	48 39 c1 	cmp	rcx, rax
 10066bd:	75 36 	jne	54 <_runtime.printany+0x585>
 10066bf:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10066c7:	0f b6 11 	movzx	edx, byte ptr [rcx]
 10066ca:	0f 85 34 fb ff ff 	jne	-1228 <_runtime.printany+0x94>
 10066d0:	88 54 24 1f 	mov	byte ptr [rsp + 31], dl
 10066d4:	e8 c7 3d 02 00 	call	146887 <_runtime.printlock>
 10066d9:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 10066de:	48 0f be c0 	movsx	rax, al
 10066e2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10066e6:	e8 35 45 02 00 	call	148789 <_runtime.printint>
 10066eb:	e8 30 3e 02 00 	call	146992 <_runtime.printunlock>
 10066f0:	e9 bc fb ff ff 	jmp	-1092 <_runtime.printany+0x141>
 10066f5:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10066fd:	ba 00 00 00 00 	mov	edx, 0
 1006702:	eb c6 	jmp	-58 <_runtime.printany+0x55a>
 1006704:	81 f9 3d e8 4a d0 	cmp	ecx, 3494570045
 100670a:	75 4b 	jne	75 <_runtime.printany+0x5e7>
 100670c:	48 8d 0d 4d 99 05 00 	lea	rcx, [rip + 366925]
 1006713:	48 39 c1 	cmp	rcx, rax
 1006716:	75 30 	jne	48 <_runtime.printany+0x5d8>
 1006718:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006720:	8b 11 	mov	edx, dword ptr [rcx]
 1006722:	0f 85 dc fa ff ff 	jne	-1316 <_runtime.printany+0x94>
 1006728:	89 54 24 34 	mov	dword ptr [rsp + 52], edx
 100672c:	e8 6f 3d 02 00 	call	146799 <_runtime.printlock>
 1006731:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 1006735:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006739:	e8 e2 43 02 00 	call	148450 <_runtime.printuint>
 100673e:	e8 dd 3d 02 00 	call	146909 <_runtime.printunlock>
 1006743:	e9 69 fb ff ff 	jmp	-1175 <_runtime.printany+0x141>
 1006748:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006750:	ba 00 00 00 00 	mov	edx, 0
 1006755:	eb cb 	jmp	-53 <_runtime.printany+0x5b2>
 1006757:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100675f:	e9 a0 fa ff ff 	jmp	-1376 <_runtime.printany+0x94>
 1006764:	81 f9 b4 5c ff e0 	cmp	ecx, 3774831796
 100676a:	0f 87 d7 00 00 00 	ja	215 <_runtime.printany+0x6d7>
 1006770:	81 f9 12 77 b8 d5 	cmp	ecx, 3585636114
 1006776:	75 4e 	jne	78 <_runtime.printany+0x656>
 1006778:	48 8d 0d 61 98 05 00 	lea	rcx, [rip + 366689]
 100677f:	48 39 c1 	cmp	rcx, rax
 1006782:	75 33 	jne	51 <_runtime.printany+0x647>
 1006784:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100678c:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100678f:	0f 85 6f fa ff ff 	jne	-1425 <_runtime.printany+0x94>
 1006795:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 100679a:	e8 01 3d 02 00 	call	146689 <_runtime.printlock>
 100679f:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10067a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10067a8:	e8 73 43 02 00 	call	148339 <_runtime.printuint>
 10067ad:	e8 6e 3d 02 00 	call	146798 <_runtime.printunlock>
 10067b2:	e9 fa fa ff ff 	jmp	-1286 <_runtime.printany+0x141>
 10067b7:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10067bf:	ba 00 00 00 00 	mov	edx, 0
 10067c4:	eb c9 	jmp	-55 <_runtime.printany+0x61f>
 10067c6:	81 f9 b4 5c ff e0 	cmp	ecx, 3774831796
 10067cc:	75 6c 	jne	108 <_runtime.printany+0x6ca>
 10067ce:	48 8d 0d cb 97 05 00 	lea	rcx, [rip + 366539]
 10067d5:	48 39 c1 	cmp	rcx, rax
 10067d8:	75 4c 	jne	76 <_runtime.printany+0x6b6>
 10067da:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10067e2:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 10067e6:	48 8b 19 	mov	rbx, qword ptr [rcx]
 10067e9:	0f 85 15 fa ff ff 	jne	-1515 <_runtime.printany+0x94>
 10067ef:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 10067f4:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 10067fc:	e8 9f 3c 02 00 	call	146591 <_runtime.printlock>
 1006801:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1006809:	48 89 04 24 	mov	qword ptr [rsp], rax
 100680d:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1006812:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006817:	e8 c4 45 02 00 	call	148932 <_runtime.printstring>
 100681c:	e8 ff 3c 02 00 	call	146687 <_runtime.printunlock>
 1006821:	e9 8b fa ff ff 	jmp	-1397 <_runtime.printany+0x141>
 1006826:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100682e:	ba 00 00 00 00 	mov	edx, 0
 1006833:	bb 00 00 00 00 	mov	ebx, 0
 1006838:	eb af 	jmp	-81 <_runtime.printany+0x679>
 100683a:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006842:	e9 bd f9 ff ff 	jmp	-1603 <_runtime.printany+0x94>
 1006847:	81 f9 ce 80 d5 ec 	cmp	ecx, 3973415118
 100684d:	75 52 	jne	82 <_runtime.printany+0x731>
 100684f:	48 8d 0d ca 91 05 00 	lea	rcx, [rip + 365002]
 1006856:	48 39 c1 	cmp	rcx, rax
 1006859:	75 37 	jne	55 <_runtime.printany+0x722>
 100685b:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006863:	0f b7 11 	movzx	edx, word ptr [rcx]
 1006866:	0f 85 98 f9 ff ff 	jne	-1640 <_runtime.printany+0x94>
 100686c:	66 89 54 24 20 	mov	word ptr [rsp + 32], dx
 1006871:	e8 2a 3c 02 00 	call	146474 <_runtime.printlock>
 1006876:	0f b7 44 24 20 	movzx	eax, word ptr [rsp + 32]
 100687b:	48 0f bf c0 	movsx	rax, ax
 100687f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006883:	e8 98 43 02 00 	call	148376 <_runtime.printint>
 1006888:	e8 93 3c 02 00 	call	146579 <_runtime.printunlock>
 100688d:	e9 1f fa ff ff 	jmp	-1505 <_runtime.printany+0x141>
 1006892:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100689a:	ba 00 00 00 00 	mov	edx, 0
 100689f:	eb c5 	jmp	-59 <_runtime.printany+0x6f6>
 10068a1:	81 f9 a0 0e f2 ef 	cmp	ecx, 4025618080
 10068a7:	75 51 	jne	81 <_runtime.printany+0x78a>
 10068a9:	48 8d 0d 70 97 05 00 	lea	rcx, [rip + 366448]
 10068b0:	48 39 c1 	cmp	rcx, rax
 10068b3:	75 36 	jne	54 <_runtime.printany+0x77b>
 10068b5:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10068bd:	0f b7 11 	movzx	edx, word ptr [rcx]
 10068c0:	0f 85 3e f9 ff ff 	jne	-1730 <_runtime.printany+0x94>
 10068c6:	66 89 54 24 22 	mov	word ptr [rsp + 34], dx
 10068cb:	e8 d0 3b 02 00 	call	146384 <_runtime.printlock>
 10068d0:	0f b7 44 24 22 	movzx	eax, word ptr [rsp + 34]
 10068d5:	0f b7 c0 	movzx	eax, ax
 10068d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10068dc:	e8 3f 42 02 00 	call	148031 <_runtime.printuint>
 10068e1:	e8 3a 3c 02 00 	call	146490 <_runtime.printunlock>
 10068e6:	e9 c6 f9 ff ff 	jmp	-1594 <_runtime.printany+0x141>
 10068eb:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10068f3:	ba 00 00 00 00 	mov	edx, 0
 10068f8:	eb c6 	jmp	-58 <_runtime.printany+0x750>
 10068fa:	81 f9 fa 71 53 f7 	cmp	ecx, 4149441018
 1006900:	75 4e 	jne	78 <_runtime.printany+0x7e0>
 1006902:	48 8d 0d d7 90 05 00 	lea	rcx, [rip + 364759]
 1006909:	48 39 c1 	cmp	rcx, rax
 100690c:	75 33 	jne	51 <_runtime.printany+0x7d1>
 100690e:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006916:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1006919:	0f 85 e5 f8 ff ff 	jne	-1819 <_runtime.printany+0x94>
 100691f:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1006924:	e8 77 3b 02 00 	call	146295 <_runtime.printlock>
 1006929:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100692e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006932:	e8 e9 42 02 00 	call	148201 <_runtime.printint>
 1006937:	e8 e4 3b 02 00 	call	146404 <_runtime.printunlock>
 100693c:	e9 70 f9 ff ff 	jmp	-1680 <_runtime.printany+0x141>
 1006941:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006949:	ba 00 00 00 00 	mov	edx, 0
 100694e:	eb c9 	jmp	-55 <_runtime.printany+0x7a9>
 1006950:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 1006958:	e9 a7 f8 ff ff 	jmp	-1881 <_runtime.printany+0x94>
 100695d:	e8 3e 3b 02 00 	call	146238 <_runtime.printlock>
 1006962:	48 8d 05 5d c3 06 00 	lea	rax, [rip + 443229]
 1006969:	48 89 04 24 	mov	qword ptr [rsp], rax
 100696d:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1006976:	e8 65 44 02 00 	call	148581 <_runtime.printstring>
 100697b:	e8 a0 3b 02 00 	call	146336 <_runtime.printunlock>
 1006980:	e9 2c f9 ff ff 	jmp	-1748 <_runtime.printany+0x141>
 1006985:	e8 46 a2 04 00 	call	303686 <_runtime.morestack_noctxt>
 100698a:	e9 e1 f7 ff ff 	jmp	-2079 <_runtime.printany>
 100698f:	cc 	int3

_runtime.panicwrap:
 1006990:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1006999:	48 8d 84 24 50 ff ff ff 	lea	rax, [rsp - 176]
 10069a1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10069a5:	0f 86 30 04 00 00 	jbe	1072 <_runtime.panicwrap+0x44b>
 10069ab:	48 81 ec 30 01 00 00 	sub	rsp, 304
 10069b2:	48 89 ac 24 28 01 00 00 	mov	qword ptr [rsp + 296], rbp
 10069ba:	48 8d ac 24 28 01 00 00 	lea	rbp, [rsp + 296]
 10069c2:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 10069ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 10069ce:	e8 9d b1 03 00 	call	242077 <_runtime.findfunc>
 10069d3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10069d8:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10069dd:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10069e1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10069e6:	e8 d5 b8 03 00 	call	243925 <_runtime.funcname>
 10069eb:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10069f0:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10069f5:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10069fa:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 1006a02:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006a06:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006a0b:	c6 44 24 10 28 	mov	byte ptr [rsp + 16], 40
 1006a10:	e8 7b b8 ff ff 	call	-18309 <_internal/bytealg.IndexByteString>
 1006a15:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1006a1a:	48 85 c0 	test	rax, rax
 1006a1d:	0f 8c 65 03 00 00 	jl	869 <_runtime.panicwrap+0x3f8>
 1006a23:	48 8d 48 ff 	lea	rcx, [rax - 1]
 1006a27:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1006a2c:	48 39 d1 	cmp	rcx, rdx
 1006a2f:	0f 87 4e 03 00 00 	ja	846 <_runtime.panicwrap+0x3f3>
 1006a35:	48 8d 58 02 	lea	rbx, [rax + 2]
 1006a39:	48 39 d3 	cmp	rbx, rdx
 1006a3c:	7c 0d 	jl	13 <_runtime.panicwrap+0xbb>
 1006a3e:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1006a46:	e9 e1 02 00 00 	jmp	737 <_runtime.panicwrap+0x39c>
 1006a4b:	0f 87 2a 03 00 00 	ja	810 <_runtime.panicwrap+0x3eb>
 1006a51:	48 39 d9 	cmp	rcx, rbx
 1006a54:	0f 87 16 03 00 00 	ja	790 <_runtime.panicwrap+0x3e0>
 1006a5a:	48 89 d8 	mov	rax, rbx
 1006a5d:	48 29 cb 	sub	rbx, rcx
 1006a60:	48 89 de 	mov	rsi, rbx
 1006a63:	48 f7 db 	neg	rbx
 1006a66:	48 c1 fb 3f 	sar	rbx, 63
 1006a6a:	48 21 cb 	and	rbx, rcx
 1006a6d:	48 83 fe 03 	cmp	rsi, 3
 1006a71:	74 0d 	je	13 <_runtime.panicwrap+0xf0>
 1006a73:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1006a7b:	e9 ac 02 00 00 	jmp	684 <_runtime.panicwrap+0x39c>
 1006a80:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1006a88:	0f b7 3c 1e 	movzx	edi, word ptr [rsi + rbx]
 1006a8c:	66 81 ff 2e 28 	cmp	di, 10286
 1006a91:	0f 85 95 02 00 00 	jne	661 <_runtime.panicwrap+0x39c>
 1006a97:	0f b6 5c 1e 02 	movzx	ebx, byte ptr [rsi + rbx + 2]
 1006a9c:	80 fb 2a 	cmp	bl, 42
 1006a9f:	0f 85 87 02 00 00 	jne	647 <_runtime.panicwrap+0x39c>
 1006aa5:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1006aaa:	48 29 c2 	sub	rdx, rax
 1006aad:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1006ab2:	48 89 d1 	mov	rcx, rdx
 1006ab5:	48 f7 da 	neg	rdx
 1006ab8:	48 c1 fa 3f 	sar	rdx, 63
 1006abc:	48 21 d0 	and	rax, rdx
 1006abf:	48 01 f0 	add	rax, rsi
 1006ac2:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1006aca:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006ace:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1006ad3:	c6 44 24 10 29 	mov	byte ptr [rsp + 16], 41
 1006ad8:	e8 b3 b7 ff ff 	call	-18509 <_internal/bytealg.IndexByteString>
 1006add:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1006ae2:	48 85 c0 	test	rax, rax
 1006ae5:	0f 8c ef 01 00 00 	jl	495 <_runtime.panicwrap+0x34a>
 1006aeb:	48 8d 48 02 	lea	rcx, [rax + 2]
 1006aef:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1006af4:	48 39 d1 	cmp	rcx, rdx
 1006af7:	7c 0d 	jl	13 <_runtime.panicwrap+0x176>
 1006af9:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1006b01:	e9 86 01 00 00 	jmp	390 <_runtime.panicwrap+0x2fc>
 1006b06:	0f 87 c9 01 00 00 	ja	457 <_runtime.panicwrap+0x345>
 1006b0c:	48 39 c8 	cmp	rax, rcx
 1006b0f:	0f 87 bb 01 00 00 	ja	443 <_runtime.panicwrap+0x340>
 1006b15:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1006b1d:	0f b7 34 03 	movzx	esi, word ptr [rbx + rax]
 1006b21:	66 81 fe 29 2e 	cmp	si, 11817
 1006b26:	0f 85 60 01 00 00 	jne	352 <_runtime.panicwrap+0x2fc>
 1006b2c:	48 8d bc 24 98 00 00 00 	lea	rdi, [rsp + 152]
 1006b34:	0f 57 c0 	xorps	xmm0, xmm0
 1006b37:	48 8d 7f d0 	lea	rdi, [rdi - 48]
 1006b3b:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1006b40:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1006b45:	e8 a8 c9 04 00 	call	313768 <_runtime.duffzero+0x102>
 1006b4a:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1006b4e:	48 8d 35 4b cc 06 00 	lea	rsi, [rip + 445515]
 1006b55:	48 89 b4 24 98 00 00 00 	mov	qword ptr [rsp + 152], rsi
 1006b5d:	48 c7 84 24 a0 00 00 00 0d 00 00 00 	mov	qword ptr [rsp + 160], 13
 1006b69:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1006b71:	48 89 b4 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rsi
 1006b79:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1006b7e:	48 89 b4 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rsi
 1006b86:	48 8d 35 d1 c0 06 00 	lea	rsi, [rip + 442577]
 1006b8d:	48 89 b4 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rsi
 1006b95:	48 c7 84 24 c0 00 00 00 01 00 00 00 	mov	qword ptr [rsp + 192], 1
 1006ba1:	48 89 9c 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rbx
 1006ba9:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 1006bb1:	48 89 b4 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rsi
 1006bb9:	48 c7 84 24 e0 00 00 00 01 00 00 00 	mov	qword ptr [rsp + 224], 1
 1006bc5:	48 29 ca 	sub	rdx, rcx
 1006bc8:	48 89 d6 	mov	rsi, rdx
 1006bcb:	48 f7 da 	neg	rdx
 1006bce:	48 c1 fa 3f 	sar	rdx, 63
 1006bd2:	48 21 d1 	and	rcx, rdx
 1006bd5:	48 01 d9 	add	rcx, rbx
 1006bd8:	48 89 8c 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rcx
 1006be0:	48 89 b4 24 f0 00 00 00 	mov	qword ptr [rsp + 240], rsi
 1006be8:	48 8d 0d 18 d3 06 00 	lea	rcx, [rip + 447256]
 1006bef:	48 89 8c 24 f8 00 00 00 	mov	qword ptr [rsp + 248], rcx
 1006bf7:	48 c7 84 24 00 01 00 00 13 00 00 00 	mov	qword ptr [rsp + 256], 19
 1006c03:	48 89 9c 24 08 01 00 00 	mov	qword ptr [rsp + 264], rbx
 1006c0b:	48 89 84 24 10 01 00 00 	mov	qword ptr [rsp + 272], rax
 1006c13:	48 8d 05 e5 c3 06 00 	lea	rax, [rip + 443365]
 1006c1a:	48 89 84 24 18 01 00 00 	mov	qword ptr [rsp + 280], rax
 1006c22:	48 c7 84 24 20 01 00 00 08 00 00 00 	mov	qword ptr [rsp + 288], 8
 1006c2e:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1006c36:	48 8d 84 24 98 00 00 00 	lea	rax, [rsp + 152]
 1006c3e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006c43:	48 c7 44 24 10 09 00 00 00 	mov	qword ptr [rsp + 16], 9
 1006c4c:	48 c7 44 24 18 09 00 00 00 	mov	qword ptr [rsp + 24], 9
 1006c55:	e8 d6 9a 03 00 	call	236246 <_runtime.concatstrings>
 1006c5a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1006c5f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1006c64:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006c68:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006c6d:	e8 0e 10 00 00 	call	4110 <_runtime.convTstring>
 1006c72:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1006c77:	48 8d 0d 82 cb 05 00 	lea	rcx, [rip + 379778]
 1006c7e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006c82:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006c87:	e8 34 19 02 00 	call	137524 <_runtime.gopanic>
 1006c8c:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1006c94:	48 8d 05 c7 00 07 00 	lea	rax, [rip + 458951]
 1006c9b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006ca0:	48 c7 44 24 10 2e 00 00 00 	mov	qword ptr [rsp + 16], 46
 1006ca9:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1006cae:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1006cb3:	e8 58 9d 03 00 	call	236888 <_runtime.concatstring2>
 1006cb8:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1006cbd:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1006cc2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006cc6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006ccb:	e8 90 20 02 00 	call	139408 <_runtime.throw>
 1006cd0:	e8 db c6 04 00 	call	313051 <_runtime.panicSliceB>
 1006cd5:	e8 96 c6 04 00 	call	312982 <_runtime.panicSliceAlen>
 1006cda:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1006cdf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006ce3:	48 8d 05 99 d3 06 00 	lea	rax, [rip + 447385]
 1006cea:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006cef:	48 c7 44 24 10 13 00 00 00 	mov	qword ptr [rsp + 16], 19
 1006cf8:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1006d00:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1006d05:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1006d0a:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1006d0f:	e8 fc 9c 03 00 	call	236796 <_runtime.concatstring2>
 1006d14:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1006d19:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1006d1e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006d22:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006d27:	e8 34 20 02 00 	call	139316 <_runtime.throw>
 1006d2c:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1006d34:	48 8d 05 13 03 07 00 	lea	rax, [rip + 459539]
 1006d3b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006d40:	48 c7 44 24 10 31 00 00 00 	mov	qword ptr [rsp + 16], 49
 1006d49:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1006d4e:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1006d53:	e8 b8 9c 03 00 	call	236728 <_runtime.concatstring2>
 1006d58:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1006d5d:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1006d62:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006d66:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006d6b:	e8 f0 1f 02 00 	call	139248 <_runtime.throw>
 1006d70:	48 89 c8 	mov	rax, rcx
 1006d73:	48 89 d9 	mov	rcx, rbx
 1006d76:	e8 35 c6 04 00 	call	312885 <_runtime.panicSliceB>
 1006d7b:	48 89 d9 	mov	rcx, rbx
 1006d7e:	e8 ed c5 04 00 	call	312813 <_runtime.panicSliceAlen>
 1006d83:	e8 e8 c5 04 00 	call	312808 <_runtime.panicSliceAlen>
 1006d88:	48 8d 44 24 68 	lea	rax, [rsp + 104]
 1006d8d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1006d91:	48 8d 05 d8 d2 06 00 	lea	rax, [rip + 447192]
 1006d98:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006d9d:	48 c7 44 24 10 13 00 00 00 	mov	qword ptr [rsp + 16], 19
 1006da6:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1006dae:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1006db3:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1006db8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1006dbd:	e8 4e 9c 03 00 	call	236622 <_runtime.concatstring2>
 1006dc2:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1006dc7:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1006dcc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1006dd0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1006dd5:	e8 86 1f 02 00 	call	139142 <_runtime.throw>
 1006dda:	90 	nop
 1006ddb:	e8 f0 9d 04 00 	call	302576 <_runtime.morestack_noctxt>
 1006de0:	e9 ab fb ff ff 	jmp	-1109 <_runtime.panicwrap>
 1006de5:	cc 	int3
 1006de6:	cc 	int3
 1006de7:	cc 	int3
 1006de8:	cc 	int3
 1006de9:	cc 	int3
 1006dea:	cc 	int3
 1006deb:	cc 	int3
 1006dec:	cc 	int3
 1006ded:	cc 	int3
 1006dee:	cc 	int3
 1006def:	cc 	int3

_runtime.float64frombits:
 1006df0:	f2 0f 10 44 24 08 	movsd	xmm0, qword ptr [rsp + 8]
 1006df6:	f2 0f 11 44 24 10 	movsd	qword ptr [rsp + 16], xmm0
 1006dfc:	c3 	ret
 1006dfd:	cc 	int3
 1006dfe:	cc 	int3
 1006dff:	cc 	int3

_runtime.memhashFallback:
 1006e00:	48 8b 05 19 0b 0f 00 	mov	rax, qword ptr [rip + 985881]
 1006e07:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1006e0c:	48 0f af c1 	imul	rax, rcx
 1006e10:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 1006e15:	48 01 d0 	add	rax, rdx
 1006e18:	48 8b 5c 24 08 	mov	rbx, qword ptr [rsp + 8]
 1006e1d:	e9 8f 00 00 00 	jmp	143 <_runtime.memhashFallback+0xb1>
 1006e22:	4c 8b 0b 	mov	r9, qword ptr [rbx]
 1006e25:	4c 31 c8 	xor	rax, r9
 1006e28:	49 b9 41 15 f0 79 90 ec 38 ea 	movabs	r9, -1569244364873394879
 1006e32:	49 0f af c1 	imul	rax, r9
 1006e36:	48 c1 c0 1f 	rol	rax, 31
 1006e3a:	49 ba 99 13 da 96 0d a3 23 27 	movabs	r10, 2820277070424839065
 1006e44:	49 0f af c2 	imul	rax, r10
 1006e48:	4c 8b 5b 08 	mov	r11, qword ptr [rbx + 8]
 1006e4c:	4c 31 de 	xor	rsi, r11
 1006e4f:	49 0f af f2 	imul	rsi, r10
 1006e53:	48 c1 c6 1f 	rol	rsi, 31
 1006e57:	49 bb d7 d2 76 f8 ad 8e cf 83 	movabs	r11, -8948777056712863017
 1006e61:	49 0f af f3 	imul	rsi, r11
 1006e65:	4c 8b 63 10 	mov	r12, qword ptr [rbx + 16]
 1006e69:	4c 31 e7 	xor	rdi, r12
 1006e6c:	49 0f af fb 	imul	rdi, r11
 1006e70:	48 c1 c7 1f 	rol	rdi, 31
 1006e74:	49 bc 93 f6 3d 64 7b c2 cf db 	movabs	r12, -2607651824005679469
 1006e7e:	49 0f af fc 	imul	rdi, r12
 1006e82:	4c 8b 6b 18 	mov	r13, qword ptr [rbx + 24]
 1006e86:	4d 31 e8 	xor	r8, r13
 1006e89:	4d 0f af c4 	imul	r8, r12
 1006e8d:	49 c1 c0 1f 	rol	r8, 31
 1006e91:	4d 0f af c1 	imul	r8, r9
 1006e95:	90 	nop
 1006e96:	48 83 c1 e0 	add	rcx, -32
 1006e9a:	48 83 c3 20 	add	rbx, 32
 1006e9e:	48 83 f9 20 	cmp	rcx, 32
 1006ea2:	0f 83 7a ff ff ff 	jae	-134 <_runtime.memhashFallback+0x22>
 1006ea8:	48 31 f0 	xor	rax, rsi
 1006eab:	48 31 f8 	xor	rax, rdi
 1006eae:	4c 31 c0 	xor	rax, r8
 1006eb1:	48 85 c9 	test	rcx, rcx
 1006eb4:	0f 84 b2 00 00 00 	je	178 <_runtime.memhashFallback+0x16c>
 1006eba:	48 83 f9 04 	cmp	rcx, 4
 1006ebe:	0f 82 52 01 00 00 	jb	338 <_runtime.memhashFallback+0x216>
 1006ec4:	48 83 f9 08 	cmp	rcx, 8
 1006ec8:	0f 86 0a 01 00 00 	jbe	266 <_runtime.memhashFallback+0x1d8>
 1006ece:	48 83 f9 10 	cmp	rcx, 16
 1006ed2:	0f 86 bc 00 00 00 	jbe	188 <_runtime.memhashFallback+0x194>
 1006ed8:	48 83 f9 20 	cmp	rcx, 32
 1006edc:	76 23 	jbe	35 <_runtime.memhashFallback+0x101>
 1006ede:	48 8b 35 43 0a 0f 00 	mov	rsi, qword ptr [rip + 985667]
 1006ee5:	48 0f af f2 	imul	rsi, rdx
 1006ee9:	48 8b 3d 40 0a 0f 00 	mov	rdi, qword ptr [rip + 985664]
 1006ef0:	48 0f af fa 	imul	rdi, rdx
 1006ef4:	4c 8b 05 3d 0a 0f 00 	mov	r8, qword ptr [rip + 985661]
 1006efb:	4c 0f af c2 	imul	r8, rdx
 1006eff:	eb 9d 	jmp	-99 <_runtime.memhashFallback+0x9e>
 1006f01:	48 89 da 	mov	rdx, rbx
 1006f04:	48 8d 34 19 	lea	rsi, [rcx + rbx]
 1006f08:	48 8d 76 f0 	lea	rsi, [rsi - 16]
 1006f0c:	48 8d 0c 19 	lea	rcx, [rcx + rbx]
 1006f10:	48 8d 49 f8 	lea	rcx, [rcx - 8]
 1006f14:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1006f17:	48 31 d8 	xor	rax, rbx
 1006f1a:	48 bb 41 15 f0 79 90 ec 38 ea 	movabs	rbx, -1569244364873394879
 1006f24:	48 0f af c3 	imul	rax, rbx
 1006f28:	48 c1 c0 1f 	rol	rax, 31
 1006f2c:	48 bf 99 13 da 96 0d a3 23 27 	movabs	rdi, 2820277070424839065
 1006f36:	48 0f af c7 	imul	rax, rdi
 1006f3a:	48 33 42 08 	xor	rax, qword ptr [rdx + 8]
 1006f3e:	48 0f af c3 	imul	rax, rbx
 1006f42:	48 c1 c0 1f 	rol	rax, 31
 1006f46:	48 0f af c7 	imul	rax, rdi
 1006f4a:	48 33 06 	xor	rax, qword ptr [rsi]
 1006f4d:	90 	nop
 1006f4e:	90 	nop
 1006f4f:	48 0f af c3 	imul	rax, rbx
 1006f53:	48 c1 c0 1f 	rol	rax, 31
 1006f57:	48 0f af c7 	imul	rax, rdi
 1006f5b:	48 33 01 	xor	rax, qword ptr [rcx]
 1006f5e:	90 	nop
 1006f5f:	90 	nop
 1006f60:	48 0f af c3 	imul	rax, rbx
 1006f64:	48 c1 c0 1f 	rol	rax, 31
 1006f68:	48 0f af c7 	imul	rax, rdi
 1006f6c:	48 89 c1 	mov	rcx, rax
 1006f6f:	48 c1 e8 1d 	shr	rax, 29
 1006f73:	48 31 c1 	xor	rcx, rax
 1006f76:	48 b8 d7 d2 76 f8 ad 8e cf 83 	movabs	rax, -8948777056712863017
 1006f80:	48 0f af c8 	imul	rcx, rax
 1006f84:	48 89 c8 	mov	rax, rcx
 1006f87:	48 c1 e9 20 	shr	rcx, 32
 1006f8b:	48 31 c1 	xor	rcx, rax
 1006f8e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1006f93:	c3 	ret
 1006f94:	48 89 da 	mov	rdx, rbx
 1006f97:	48 8d 0c 19 	lea	rcx, [rcx + rbx]
 1006f9b:	48 8d 49 f8 	lea	rcx, [rcx - 8]
 1006f9f:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1006fa2:	48 31 d0 	xor	rax, rdx
 1006fa5:	48 ba 41 15 f0 79 90 ec 38 ea 	movabs	rdx, -1569244364873394879
 1006faf:	48 0f af c2 	imul	rax, rdx
 1006fb3:	48 c1 c0 1f 	rol	rax, 31
 1006fb7:	48 bb 99 13 da 96 0d a3 23 27 	movabs	rbx, 2820277070424839065
 1006fc1:	48 0f af c3 	imul	rax, rbx
 1006fc5:	48 33 01 	xor	rax, qword ptr [rcx]
 1006fc8:	90 	nop
 1006fc9:	90 	nop
 1006fca:	48 0f af c2 	imul	rax, rdx
 1006fce:	48 c1 c0 1f 	rol	rax, 31
 1006fd2:	48 0f af c3 	imul	rax, rbx
 1006fd6:	eb 94 	jmp	-108 <_runtime.memhashFallback+0x16c>
 1006fd8:	48 89 da 	mov	rdx, rbx
 1006fdb:	48 8d 0c 19 	lea	rcx, [rcx + rbx]
 1006fdf:	48 8d 49 fc 	lea	rcx, [rcx - 4]
 1006fe3:	8b 12 	mov	edx, dword ptr [rdx]
 1006fe5:	48 31 d0 	xor	rax, rdx
 1006fe8:	8b 09 	mov	ecx, dword ptr [rcx]
 1006fea:	48 c1 e1 20 	shl	rcx, 32
 1006fee:	48 31 c8 	xor	rax, rcx
 1006ff1:	48 b9 41 15 f0 79 90 ec 38 ea 	movabs	rcx, -1569244364873394879
 1006ffb:	48 0f af c1 	imul	rax, rcx
 1006fff:	48 c1 c0 1f 	rol	rax, 31
 1007003:	48 b9 99 13 da 96 0d a3 23 27 	movabs	rcx, 2820277070424839065
 100700d:	48 0f af c1 	imul	rax, rcx
 1007011:	e9 56 ff ff ff 	jmp	-170 <_runtime.memhashFallback+0x16c>
 1007016:	48 89 da 	mov	rdx, rbx
 1007019:	48 8d 1c 19 	lea	rbx, [rcx + rbx]
 100701d:	48 8d 5b ff 	lea	rbx, [rbx - 1]
 1007021:	0f b6 32 	movzx	esi, byte ptr [rdx]
 1007024:	48 31 f0 	xor	rax, rsi
 1007027:	48 d1 e9 	shr	rcx
 100702a:	0f b6 0c 0a 	movzx	ecx, byte ptr [rdx + rcx]
 100702e:	48 c1 e1 08 	shl	rcx, 8
 1007032:	48 31 c8 	xor	rax, rcx
 1007035:	0f b6 0b 	movzx	ecx, byte ptr [rbx]
 1007038:	48 c1 e1 10 	shl	rcx, 16
 100703c:	48 31 c8 	xor	rax, rcx
 100703f:	48 b9 41 15 f0 79 90 ec 38 ea 	movabs	rcx, -1569244364873394879
 1007049:	48 0f af c1 	imul	rax, rcx
 100704d:	48 c1 c0 1f 	rol	rax, 31
 1007051:	48 b9 99 13 da 96 0d a3 23 27 	movabs	rcx, 2820277070424839065
 100705b:	48 0f af c1 	imul	rax, rcx
 100705f:	e9 08 ff ff ff 	jmp	-248 <_runtime.memhashFallback+0x16c>
 1007064:	cc 	int3
 1007065:	cc 	int3
 1007066:	cc 	int3
 1007067:	cc 	int3
 1007068:	cc 	int3
 1007069:	cc 	int3
 100706a:	cc 	int3
 100706b:	cc 	int3
 100706c:	cc 	int3
 100706d:	cc 	int3
 100706e:	cc 	int3
 100706f:	cc 	int3

_runtime.memhash32Fallback:
 1007070:	48 8b 05 a9 08 0f 00 	mov	rax, qword ptr [rip + 985257]
 1007077:	90 	nop
 1007078:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100707d:	8b 09 	mov	ecx, dword ptr [rcx]
 100707f:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 1007084:	48 8d 04 82 	lea	rax, [rdx + 4*rax]
 1007088:	48 31 c8 	xor	rax, rcx
 100708b:	48 c1 e1 20 	shl	rcx, 32
 100708f:	48 31 c1 	xor	rcx, rax
 1007092:	48 b8 41 15 f0 79 90 ec 38 ea 	movabs	rax, -1569244364873394879
 100709c:	48 0f af c1 	imul	rax, rcx
 10070a0:	48 c1 c0 1f 	rol	rax, 31
 10070a4:	48 b9 99 13 da 96 0d a3 23 27 	movabs	rcx, 2820277070424839065
 10070ae:	48 0f af c8 	imul	rcx, rax
 10070b2:	48 89 c8 	mov	rax, rcx
 10070b5:	48 c1 e9 1d 	shr	rcx, 29
 10070b9:	48 31 c8 	xor	rax, rcx
 10070bc:	48 b9 d7 d2 76 f8 ad 8e cf 83 	movabs	rcx, -8948777056712863017
 10070c6:	48 0f af c8 	imul	rcx, rax
 10070ca:	48 89 c8 	mov	rax, rcx
 10070cd:	48 c1 e9 20 	shr	rcx, 32
 10070d1:	48 31 c8 	xor	rax, rcx
 10070d4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10070d9:	c3 	ret
 10070da:	cc 	int3
 10070db:	cc 	int3
 10070dc:	cc 	int3
 10070dd:	cc 	int3
 10070de:	cc 	int3
 10070df:	cc 	int3

_runtime.memhash64Fallback:
 10070e0:	48 8b 05 39 08 0f 00 	mov	rax, qword ptr [rip + 985145]
 10070e7:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10070ec:	48 8b 09 	mov	rcx, qword ptr [rcx]
 10070ef:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 10070f4:	48 8d 04 c2 	lea	rax, [rdx + 8*rax]
 10070f8:	48 31 c1 	xor	rcx, rax
 10070fb:	48 b8 41 15 f0 79 90 ec 38 ea 	movabs	rax, -1569244364873394879
 1007105:	48 0f af c1 	imul	rax, rcx
 1007109:	48 c1 c0 1f 	rol	rax, 31
 100710d:	48 b9 99 13 da 96 0d a3 23 27 	movabs	rcx, 2820277070424839065
 1007117:	48 0f af c8 	imul	rcx, rax
 100711b:	48 89 c8 	mov	rax, rcx
 100711e:	48 c1 e9 1d 	shr	rcx, 29
 1007122:	48 31 c8 	xor	rax, rcx
 1007125:	48 b9 d7 d2 76 f8 ad 8e cf 83 	movabs	rcx, -8948777056712863017
 100712f:	48 0f af c8 	imul	rcx, rax
 1007133:	48 89 c8 	mov	rax, rcx
 1007136:	48 c1 e9 20 	shr	rcx, 32
 100713a:	48 31 c8 	xor	rax, rcx
 100713d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1007142:	c3 	ret
 1007143:	cc 	int3
 1007144:	cc 	int3
 1007145:	cc 	int3
 1007146:	cc 	int3
 1007147:	cc 	int3
 1007148:	cc 	int3
 1007149:	cc 	int3
 100714a:	cc 	int3
 100714b:	cc 	int3
 100714c:	cc 	int3
 100714d:	cc 	int3
 100714e:	cc 	int3
 100714f:	cc 	int3

_runtime.getitab:
 1007150:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007159:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100715d:	0f 86 6a 03 00 00 	jbe	874 <_runtime.getitab+0x37d>
 1007163:	48 83 ec 48 	sub	rsp, 72
 1007167:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 100716c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1007171:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1007176:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 100717a:	48 83 78 40 00 	cmp	qword ptr [rax + 64], 0
 100717f:	0f 84 2e 03 00 00 	je	814 <_runtime.getitab+0x363>
 1007185:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 100718a:	0f b6 5a 14 	movzx	ebx, byte ptr [rdx + 20]
 100718e:	f6 c3 01 	test	bl, 1
 1007191:	0f 85 da 00 00 00 	jne	218 <_runtime.getitab+0x121>
 1007197:	0f b6 5c 24 60 	movzx	ebx, byte ptr [rsp + 96]
 100719c:	84 db 	test	bl, bl
 100719e:	74 13 	je	19 <_runtime.getitab+0x63>
 10071a0:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 10071a9:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10071ae:	48 83 c4 48 	add	rsp, 72
 10071b2:	c3 	ret
 10071b3:	8b 09 	mov	ecx, dword ptr [rcx]
 10071b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10071b9:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 10071bd:	e8 5e 41 04 00 	call	278878 <_runtime.resolveNameOff>
 10071c2:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10071c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10071cb:	e8 20 4b 04 00 	call	281376 <_runtime.name.name>
 10071d0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10071d5:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10071da:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10071df:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 10071e4:	48 8d 15 55 35 06 00 	lea	rdx, [rip + 406869]
 10071eb:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10071ef:	e8 0c 32 00 00 	call	12812 <_runtime.newobject>
 10071f4:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10071f9:	83 3d 00 07 0f 00 00 	cmp	dword ptr [rip + 984832], 0
 1007200:	75 4b 	jne	75 <_runtime.getitab+0xfd>
 1007202:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1007207:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 100720b:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1007210:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1007214:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1007219:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 100721d:	83 3d dc 06 0f 00 00 	cmp	dword ptr [rip + 984796], 0
 1007224:	75 11 	jne	17 <_runtime.getitab+0xe7>
 1007226:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100722b:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 100722f:	48 89 c1 	mov	rcx, rax
 1007232:	e9 67 02 00 00 	jmp	615 <_runtime.getitab+0x34e>
 1007237:	48 8d 78 18 	lea	rdi, [rax + 24]
 100723b:	48 89 c1 	mov	rcx, rax
 100723e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1007243:	e8 98 b7 04 00 	call	309144 <_runtime.gcWriteBarrier>
 1007248:	e9 51 02 00 00 	jmp	593 <_runtime.getitab+0x34e>
 100724d:	48 8d 78 08 	lea	rdi, [rax + 8]
 1007251:	48 89 c1 	mov	rcx, rax
 1007254:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1007259:	e8 82 b7 04 00 	call	309122 <_runtime.gcWriteBarrier>
 100725e:	48 8d 79 10 	lea	rdi, [rcx + 16]
 1007262:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1007267:	e8 74 b7 04 00 	call	309108 <_runtime.gcWriteBarrier>
 100726c:	48 89 c8 	mov	rax, rcx
 100726f:	eb a3 	jmp	-93 <_runtime.getitab+0xc4>
 1007271:	48 8b 0d d8 54 0c 00 	mov	rcx, qword ptr [rip + 808152]
 1007278:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100727c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1007281:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1007286:	e8 55 02 00 00 	call	597 <_runtime.(*itabTableType).find>
 100728b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1007290:	48 85 c0 	test	rax, rax
 1007293:	0f 84 e0 00 00 00 	je	224 <_runtime.getitab+0x229>
 1007299:	48 83 78 18 00 	cmp	qword ptr [rax + 24], 0
 100729e:	0f 85 c6 00 00 00 	jne	198 <_runtime.getitab+0x21a>
 10072a4:	0f b6 4c 24 60 	movzx	ecx, byte ptr [rsp + 96]
 10072a9:	84 c9 	test	cl, cl
 10072ab:	74 13 	je	19 <_runtime.getitab+0x170>
 10072ad:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 10072b6:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10072bb:	48 83 c4 48 	add	rsp, 72
 10072bf:	c3 	ret
 10072c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10072c4:	e8 27 04 00 00 	call	1063 <_runtime.(*itab).init>
 10072c9:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10072ce:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10072d3:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10072d8:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10072dd:	48 8d 15 5c 34 06 00 	lea	rdx, [rip + 406620]
 10072e4:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10072e8:	e8 13 31 00 00 	call	12563 <_runtime.newobject>
 10072ed:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10072f2:	83 3d 07 06 0f 00 00 	cmp	dword ptr [rip + 984583], 0
 10072f9:	75 4b 	jne	75 <_runtime.getitab+0x1f6>
 10072fb:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1007300:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1007304:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1007309:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 100730d:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1007312:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 1007316:	83 3d e3 05 0f 00 00 	cmp	dword ptr [rip + 984547], 0
 100731d:	75 11 	jne	17 <_runtime.getitab+0x1e0>
 100731f:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1007324:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 1007328:	48 89 c1 	mov	rcx, rax
 100732b:	e9 59 01 00 00 	jmp	345 <_runtime.getitab+0x339>
 1007330:	48 8d 78 18 	lea	rdi, [rax + 24]
 1007334:	48 89 c1 	mov	rcx, rax
 1007337:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100733c:	e8 9f b6 04 00 	call	308895 <_runtime.gcWriteBarrier>
 1007341:	e9 43 01 00 00 	jmp	323 <_runtime.getitab+0x339>
 1007346:	48 8d 78 08 	lea	rdi, [rax + 8]
 100734a:	48 89 c1 	mov	rcx, rax
 100734d:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1007352:	e8 89 b6 04 00 	call	308873 <_runtime.gcWriteBarrier>
 1007357:	48 8d 79 10 	lea	rdi, [rcx + 16]
 100735b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1007360:	e8 7b b6 04 00 	call	308859 <_runtime.gcWriteBarrier>
 1007365:	48 89 c8 	mov	rax, rcx
 1007368:	eb a3 	jmp	-93 <_runtime.getitab+0x1bd>
 100736a:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 100736f:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1007374:	48 83 c4 48 	add	rsp, 72
 1007378:	c3 	ret
 1007379:	48 8d 05 d0 04 0f 00 	lea	rax, [rip + 984272]
 1007380:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007384:	e8 a7 0d 00 00 	call	3495 <_runtime.lock>
 1007389:	48 8b 05 c0 53 0c 00 	mov	rax, qword ptr [rip + 807872]
 1007390:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007394:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1007399:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100739e:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10073a3:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10073a8:	e8 33 01 00 00 	call	307 <_runtime.(*itabTableType).find>
 10073ad:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10073b2:	48 85 c0 	test	rax, rax
 10073b5:	74 1f 	je	31 <_runtime.getitab+0x286>
 10073b7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10073bc:	48 8d 05 8d 04 0f 00 	lea	rax, [rip + 984205]
 10073c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10073c7:	e8 44 0f 00 00 	call	3908 <_runtime.unlock>
 10073cc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10073d1:	e9 c3 fe ff ff 	jmp	-317 <_runtime.getitab+0x149>
 10073d6:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10073db:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 10073df:	48 ff c9 	dec	rcx
 10073e2:	48 c1 e1 03 	shl	rcx, 3
 10073e6:	48 83 c1 20 	add	rcx, 32
 10073ea:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10073ee:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10073f7:	48 8d 0d c2 12 0f 00 	lea	rcx, [rip + 987842]
 10073fe:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1007403:	e8 08 33 00 00 	call	13064 <_runtime.persistentalloc>
 1007408:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 100740d:	84 07 	test	byte ptr [rdi], al
 100740f:	83 3d ea 04 0f 00 00 	cmp	dword ptr [rip + 984298], 0
 1007416:	75 4e 	jne	78 <_runtime.getitab+0x316>
 1007418:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100741d:	48 89 07 	mov	qword ptr [rdi], rax
 1007420:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1007425:	48 89 4f 08 	mov	qword ptr [rdi + 8], rcx
 1007429:	48 89 7c 24 30 	mov	qword ptr [rsp + 48], rdi
 100742e:	c7 47 10 00 00 00 00 	mov	dword ptr [rdi + 16], 0
 1007435:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1007439:	e8 b2 02 00 00 	call	690 <_runtime.(*itab).init>
 100743e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1007443:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007447:	e8 f4 00 00 00 	call	244 <_runtime.itabAdd>
 100744c:	48 8d 05 fd 03 0f 00 	lea	rax, [rip + 984061]
 1007453:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007457:	e8 b4 0e 00 00 	call	3764 <_runtime.unlock>
 100745c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1007461:	e9 33 fe ff ff 	jmp	-461 <_runtime.getitab+0x149>
 1007466:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100746b:	e8 70 b5 04 00 	call	308592 <_runtime.gcWriteBarrier>
 1007470:	48 8d 4f 08 	lea	rcx, [rdi + 8]
 1007474:	48 89 fa 	mov	rdx, rdi
 1007477:	48 89 cf 	mov	rdi, rcx
 100747a:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100747f:	e8 5c b5 04 00 	call	308572 <_runtime.gcWriteBarrier>
 1007484:	48 89 d7 	mov	rdi, rdx
 1007487:	eb a0 	jmp	-96 <_runtime.getitab+0x2d9>
 1007489:	48 8d 05 70 c5 05 00 	lea	rax, [rip + 378224]
 1007490:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007494:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1007499:	e8 22 11 02 00 	call	135458 <_runtime.gopanic>
 100749e:	48 8d 05 5b c5 05 00 	lea	rax, [rip + 378203]
 10074a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10074a9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10074ae:	e8 0d 11 02 00 	call	135437 <_runtime.gopanic>
 10074b3:	48 8d 05 4c e5 06 00 	lea	rax, [rip + 451916]
 10074ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 10074be:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 10074c7:	e8 94 18 02 00 	call	137364 <_runtime.throw>
 10074cc:	90 	nop
 10074cd:	e8 fe 96 04 00 	call	300798 <_runtime.morestack_noctxt>
 10074d2:	e9 79 fc ff ff 	jmp	-903 <_runtime.getitab>
 10074d7:	cc 	int3
 10074d8:	cc 	int3
 10074d9:	cc 	int3
 10074da:	cc 	int3
 10074db:	cc 	int3
 10074dc:	cc 	int3
 10074dd:	cc 	int3
 10074de:	cc 	int3
 10074df:	cc 	int3

_runtime.(*itabTableType).find:
 10074e0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10074e5:	48 8b 08 	mov	rcx, qword ptr [rax]
 10074e8:	48 ff c9 	dec	rcx
 10074eb:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 10074f0:	8b 5a 10 	mov	ebx, dword ptr [rdx + 16]
 10074f3:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 10074f8:	33 5e 10 	xor	ebx, dword ptr [rsi + 16]
 10074fb:	48 21 cb 	and	rbx, rcx
 10074fe:	bf 01 00 00 00 	mov	edi, 1
 1007503:	eb 0d 	jmp	13 <_runtime.(*itabTableType).find+0x32>
 1007505:	4c 8d 47 01 	lea	r8, [rdi + 1]
 1007509:	48 01 fb 	add	rbx, rdi
 100750c:	48 21 cb 	and	rbx, rcx
 100750f:	4c 89 c7 	mov	rdi, r8
 1007512:	90 	nop
 1007513:	4c 8d 04 d8 	lea	r8, [rax + 8*rbx]
 1007517:	4d 8d 40 10 	lea	r8, [r8 + 16]
 100751b:	4d 8b 00 	mov	r8, qword ptr [r8]
 100751e:	4d 85 c0 	test	r8, r8
 1007521:	74 11 	je	17 <_runtime.(*itabTableType).find+0x54>
 1007523:	49 39 10 	cmp	qword ptr [r8], rdx
 1007526:	75 dd 	jne	-35 <_runtime.(*itabTableType).find+0x25>
 1007528:	49 39 70 08 	cmp	qword ptr [r8 + 8], rsi
 100752c:	75 d7 	jne	-41 <_runtime.(*itabTableType).find+0x25>
 100752e:	4c 89 44 24 20 	mov	qword ptr [rsp + 32], r8
 1007533:	c3 	ret
 1007534:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 100753d:	c3 	ret
 100753e:	cc 	int3
 100753f:	cc 	int3

_runtime.itabAdd:
 1007540:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007549:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100754d:	0f 86 2f 01 00 00 	jbe	303 <_runtime.itabAdd+0x142>
 1007553:	48 83 ec 48 	sub	rsp, 72
 1007557:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 100755c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1007561:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 100756a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 100756e:	83 b8 f0 00 00 00 00 	cmp	dword ptr [rax + 240], 0
 1007575:	0f 85 ed 00 00 00 	jne	237 <_runtime.itabAdd+0x128>
 100757b:	48 8b 05 ce 51 0c 00 	mov	rax, qword ptr [rip + 807374]
 1007582:	48 8b 08 	mov	rcx, qword ptr [rax]
 1007585:	48 89 ca 	mov	rdx, rcx
 1007588:	48 c1 e9 02 	shr	rcx, 2
 100758c:	48 8d 0c 49 	lea	rcx, [rcx + 2*rcx]
 1007590:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1007594:	73 1d 	jae	29 <_runtime.itabAdd+0x73>
 1007596:	48 89 04 24 	mov	qword ptr [rsp], rax
 100759a:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100759f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10075a4:	e8 e7 00 00 00 	call	231 <_runtime.(*itabTableType).add>
 10075a9:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10075ae:	48 83 c4 48 	add	rsp, 72
 10075b2:	c3 	ret
 10075b3:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10075b8:	48 8d 04 12 	lea	rax, [rdx + rdx]
 10075bc:	48 8d 40 02 	lea	rax, [rax + 2]
 10075c0:	48 c1 e0 03 	shl	rax, 3
 10075c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10075c8:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10075d1:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10075d6:	e8 d5 22 00 00 	call	8917 <_runtime.mallocgc>
 10075db:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10075e0:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10075e5:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10075ea:	48 8b 11 	mov	rdx, qword ptr [rcx]
 10075ed:	48 d1 e2 	shl	rdx
 10075f0:	48 89 10 	mov	qword ptr [rax], rdx
 10075f3:	0f 57 c0 	xorps	xmm0, xmm0
 10075f6:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 10075fb:	48 8d 15 3e e4 04 00 	lea	rdx, [rip + 320574]
 1007602:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1007607:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100760c:	48 8d 54 24 30 	lea	rdx, [rsp + 48]
 1007611:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1007615:	e8 46 08 00 00 	call	2118 <_runtime.iterate_itabs>
 100761a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100761f:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1007623:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1007628:	48 39 41 08 	cmp	qword ptr [rcx + 8], rax
 100762c:	75 21 	jne	33 <_runtime.itabAdd+0x10f>
 100762e:	48 8d 05 1b 51 0c 00 	lea	rax, [rip + 807195]
 1007635:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007639:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100763e:	e8 bd b4 ff ff 	call	-19267 <_runtime.atomicstorep>
 1007643:	48 8b 05 06 51 0c 00 	mov	rax, qword ptr [rip + 807174]
 100764a:	e9 47 ff ff ff 	jmp	-185 <_runtime.itabAdd+0x56>
 100764f:	48 8d 05 0b f0 06 00 	lea	rax, [rip + 454667]
 1007656:	48 89 04 24 	mov	qword ptr [rsp], rax
 100765a:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 1007663:	e8 f8 16 02 00 	call	136952 <_runtime.throw>
 1007668:	48 8d 05 00 c3 06 00 	lea	rax, [rip + 443136]
 100766f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007673:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 100767c:	e8 df 16 02 00 	call	136927 <_runtime.throw>
 1007681:	90 	nop
 1007682:	e8 49 95 04 00 	call	300361 <_runtime.morestack_noctxt>
 1007687:	e9 b4 fe ff ff 	jmp	-332 <_runtime.itabAdd>
 100768c:	cc 	int3
 100768d:	cc 	int3
 100768e:	cc 	int3
 100768f:	cc 	int3

_runtime.(*itabTableType).add:
 1007690:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007695:	48 8b 08 	mov	rcx, qword ptr [rax]
 1007698:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 100769c:	48 8b 5c 24 08 	mov	rbx, qword ptr [rsp + 8]
 10076a1:	48 8b 33 	mov	rsi, qword ptr [rbx]
 10076a4:	48 ff ce 	dec	rsi
 10076a7:	8b 49 10 	mov	ecx, dword ptr [rcx + 16]
 10076aa:	33 4a 10 	xor	ecx, dword ptr [rdx + 16]
 10076ad:	48 21 f1 	and	rcx, rsi
 10076b0:	ba 01 00 00 00 	mov	edx, 1
 10076b5:	eb 0d 	jmp	13 <_runtime.(*itabTableType).add+0x34>
 10076b7:	48 8d 7a 01 	lea	rdi, [rdx + 1]
 10076bb:	48 01 d1 	add	rcx, rdx
 10076be:	48 21 f1 	and	rcx, rsi
 10076c1:	48 89 fa 	mov	rdx, rdi
 10076c4:	90 	nop
 10076c5:	48 8b 7c cb 10 	mov	rdi, qword ptr [rbx + 8*rcx + 16]
 10076ca:	4c 8d 04 cb 	lea	r8, [rbx + 8*rcx]
 10076ce:	4d 8d 40 10 	lea	r8, [r8 + 16]
 10076d2:	48 39 c7 	cmp	rdi, rax
 10076d5:	74 0d 	je	13 <_runtime.(*itabTableType).add+0x54>
 10076d7:	48 85 ff 	test	rdi, rdi
 10076da:	75 db 	jne	-37 <_runtime.(*itabTableType).add+0x27>
 10076dc:	49 87 00 	xchg	qword ptr [r8], rax
 10076df:	48 ff 43 08 	inc	qword ptr [rbx + 8]
 10076e3:	c3 	ret
 10076e4:	c3 	ret
 10076e5:	cc 	int3
 10076e6:	cc 	int3
 10076e7:	cc 	int3
 10076e8:	cc 	int3
 10076e9:	cc 	int3
 10076ea:	cc 	int3
 10076eb:	cc 	int3
 10076ec:	cc 	int3
 10076ed:	cc 	int3
 10076ee:	cc 	int3
 10076ef:	cc 	int3

_runtime.(*itab).init:
 10076f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10076f9:	48 8d 44 24 d0 	lea	rax, [rsp - 48]
 10076fe:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1007702:	0f 86 74 04 00 00 	jbe	1140 <_runtime.(*itab).init+0x48c>
 1007708:	48 81 ec b0 00 00 00 	sub	rsp, 176
 100770f:	48 89 ac 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbp
 1007717:	48 8d ac 24 a8 00 00 00 	lea	rbp, [rsp + 168]
 100771f:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1007727:	48 8b 08 	mov	rcx, qword ptr [rax]
 100772a:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 100772f:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1007733:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1007738:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100773c:	e8 1f 3a 04 00 	call	277023 <_runtime.(*_type).uncommon>
 1007741:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1007746:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 100774b:	48 8b 51 40 	mov	rdx, qword ptr [rcx + 64]
 100774f:	0f b7 58 04 	movzx	ebx, word ptr [rax + 4]
 1007753:	8b 70 08 	mov	esi, dword ptr [rax + 8]
 1007756:	48 01 c6 	add	rsi, rax
 1007759:	48 81 fb 00 00 01 00 	cmp	rbx, 65536
 1007760:	0f 87 08 04 00 00 	ja	1032 <_runtime.(*itab).init+0x47e>
 1007766:	48 81 fa 00 00 01 00 	cmp	rdx, 65536
 100776d:	0f 87 f1 03 00 00 	ja	1009 <_runtime.(*itab).init+0x474>
 1007773:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 100777b:	48 89 b4 24 98 00 00 00 	mov	qword ptr [rsp + 152], rsi
 1007783:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1007788:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 100778d:	31 ff 	xor	edi, edi
 100778f:	45 31 c0 	xor	r8d, r8d
 1007792:	45 31 c9 	xor	r9d, r9d
 1007795:	e9 5a 01 00 00 	jmp	346 <_runtime.(*itab).init+0x204>
 100779a:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 100779f:	49 8d 78 01 	lea	rdi, [r8 + 1]
 10077a3:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 10077a8:	4c 8b 8c 24 98 00 00 00 	mov	r9, qword ptr [rsp + 152]
 10077b0:	4c 8b 54 24 50 	mov	r10, qword ptr [rsp + 80]
 10077b5:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10077ba:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10077bf:	4c 89 c2 	mov	rdx, r8
 10077c2:	4c 89 cb 	mov	rbx, r9
 10077c5:	4c 89 d6 	mov	rsi, r10
 10077c8:	48 39 f7 	cmp	rdi, rsi
 10077cb:	0f 8d fb 02 00 00 	jge	763 <_runtime.(*itab).init+0x3dc>
 10077d1:	0f 83 77 03 00 00 	jae	887 <_runtime.(*itab).init+0x45e>
 10077d7:	48 89 7c 24 30 	mov	qword ptr [rsp + 48], rdi
 10077dc:	48 c1 e7 04 	shl	rdi, 4
 10077e0:	48 89 7c 24 48 	mov	qword ptr [rsp + 72], rdi
 10077e5:	8b 0c 3b 	mov	ecx, dword ptr [rbx + rdi]
 10077e8:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10077ec:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 10077f0:	e8 2b 3b 04 00 	call	277291 <_runtime.resolveNameOff>
 10077f5:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10077fa:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 1007802:	8b 54 01 04 	mov	edx, dword ptr [rcx + rax + 4]
 1007806:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 100780b:	48 89 9c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rbx
 1007813:	48 8b 74 24 58 	mov	rsi, qword ptr [rsp + 88]
 1007818:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100781c:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 1007820:	e8 fb 3d 04 00 	call	278011 <_runtime.resolveTypeOff>
 1007825:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100782a:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 100782f:	0f 84 48 02 00 00 	je	584 <_runtime.(*itab).init+0x38d>
 1007835:	31 c9 	xor	ecx, ecx
 1007837:	84 c9 	test	cl, cl
 1007839:	0f 84 5b ff ff ff 	je	-165 <_runtime.(*itab).init+0xaa>
 100783f:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1007847:	48 89 04 24 	mov	qword ptr [rsp], rax
 100784b:	e8 70 45 04 00 	call	279920 <_runtime.name.pkgPath>
 1007850:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007855:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100785a:	48 85 c0 	test	rax, rax
 100785d:	0f 84 e1 01 00 00 	je	481 <_runtime.(*itab).init+0x354>
 1007863:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 100786b:	0f b6 12 	movzx	edx, byte ptr [rdx]
 100786e:	f6 c2 01 	test	dl, 1
 1007871:	0f 84 95 01 00 00 	je	405 <_runtime.(*itab).init+0x31c>
 1007877:	b8 01 00 00 00 	mov	eax, 1
 100787c:	84 c0 	test	al, al
 100787e:	75 0a 	jne	10 <_runtime.(*itab).init+0x19a>
 1007880:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1007885:	e9 10 ff ff ff 	jmp	-240 <_runtime.(*itab).init+0xaa>
 100788a:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100788f:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 1007897:	8b 44 01 08 	mov	eax, dword ptr [rcx + rax + 8]
 100789b:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 10078a0:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10078a4:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 10078a8:	e8 c3 40 04 00 	call	278723 <_runtime.(*_type).textOff>
 10078ad:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10078b2:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10078b7:	48 85 c9 	test	rcx, rcx
 10078ba:	0f 85 1a 01 00 00 	jne	282 <_runtime.(*itab).init+0x2ea>
 10078c0:	48 8d 79 01 	lea	rdi, [rcx + 1]
 10078c4:	4c 8b 54 24 20 	mov	r10, qword ptr [rsp + 32]
 10078c9:	4c 8b 5c 24 70 	mov	r11, qword ptr [rsp + 112]
 10078ce:	4c 8b 64 24 30 	mov	r12, qword ptr [rsp + 48]
 10078d3:	4c 89 d9 	mov	rcx, r11
 10078d6:	4c 89 d2 	mov	rdx, r10
 10078d9:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 10078de:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 10078e6:	4d 89 e0 	mov	r8, r12
 10078e9:	49 89 c1 	mov	r9, rax
 10078ec:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 10078f4:	48 39 d7 	cmp	rdi, rdx
 10078f7:	0f 8d 2a 02 00 00 	jge	554 <_runtime.(*itab).init+0x437>
 10078fd:	4c 8b 51 40 	mov	r10, qword ptr [rcx + 64]
 1007901:	4c 8b 59 38 	mov	r11, qword ptr [rcx + 56]
 1007905:	4c 39 d7 	cmp	rdi, r10
 1007908:	0f 83 4b 02 00 00 	jae	587 <_runtime.(*itab).init+0x469>
 100790e:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1007913:	4c 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], r11
 100791b:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 1007920:	4c 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], r9
 1007928:	41 8b 44 fb 04 	mov	eax, dword ptr [r11 + 8*rdi + 4]
 100792d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1007931:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 1007935:	e8 e6 3c 04 00 	call	277734 <_runtime.resolveTypeOff>
 100793a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100793f:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 1007947:	8b 0c c1 	mov	ecx, dword ptr [rcx + 8*rax]
 100794a:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 100794f:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 1007954:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1007959:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100795d:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 1007961:	e8 ba 39 04 00 	call	276922 <_runtime.resolveNameOff>
 1007966:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100796b:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1007973:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007977:	e8 74 43 04 00 	call	279412 <_runtime.name.name>
 100797c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007981:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1007986:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100798b:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 1007990:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1007998:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100799c:	e8 1f 44 04 00 	call	279583 <_runtime.name.pkgPath>
 10079a1:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10079a6:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10079ab:	48 85 c9 	test	rcx, rcx
 10079ae:	0f 84 52 01 00 00 	je	338 <_runtime.(*itab).init+0x416>
 10079b4:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 10079b9:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 10079be:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 10079c3:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 10079cb:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 10079d0:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 10079d5:	e9 ee fd ff ff 	jmp	-530 <_runtime.(*itab).init+0xd8>
 10079da:	48 8b 94 24 b8 00 00 00 	mov	rdx, qword ptr [rsp + 184]
 10079e2:	48 8d 3c ca 	lea	rdi, [rdx + 8*rcx]
 10079e6:	48 8d 7f 18 	lea	rdi, [rdi + 24]
 10079ea:	83 3d 0f ff 0e 00 00 	cmp	dword ptr [rip + 982799], 0
 10079f1:	75 12 	jne	18 <_runtime.(*itab).init+0x315>
 10079f3:	48 89 44 ca 18 	mov	qword ptr [rdx + 8*rcx + 24], rax
 10079f8:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1007a00:	e9 bb fe ff ff 	jmp	-325 <_runtime.(*itab).init+0x1d0>
 1007a05:	e8 d6 af 04 00 	call	307158 <_runtime.gcWriteBarrier>
 1007a0a:	eb ec 	jmp	-20 <_runtime.(*itab).init+0x308>
 1007a0c:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1007a11:	48 39 c2 	cmp	rdx, rax
 1007a14:	74 07 	je	7 <_runtime.(*itab).init+0x32d>
 1007a16:	31 c0 	xor	eax, eax
 1007a18:	e9 5f fe ff ff 	jmp	-417 <_runtime.(*itab).init+0x18c>
 1007a1d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1007a21:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1007a26:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1007a2b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1007a30:	e8 bb a6 ff ff 	call	-22853 <_runtime.memequal>
 1007a35:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1007a3a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1007a3f:	e9 38 fe ff ff 	jmp	-456 <_runtime.(*itab).init+0x18c>
 1007a44:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1007a4c:	8b 08 	mov	ecx, dword ptr [rax]
 1007a4e:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1007a53:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1007a57:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 1007a5b:	e8 c0 38 04 00 	call	276672 <_runtime.resolveNameOff>
 1007a60:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007a65:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007a69:	e8 82 42 04 00 	call	279170 <_runtime.name.name>
 1007a6e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007a73:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1007a78:	e9 e6 fd ff ff 	jmp	-538 <_runtime.(*itab).init+0x173>
 1007a7d:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1007a85:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007a89:	e8 62 42 04 00 	call	279138 <_runtime.name.name>
 1007a8e:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1007a93:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1007a98:	48 39 4c 24 10 	cmp	qword ptr [rsp + 16], rcx
 1007a9d:	74 0e 	je	14 <_runtime.(*itab).init+0x3bd>
 1007a9f:	31 c0 	xor	eax, eax
 1007aa1:	89 c1 	mov	ecx, eax
 1007aa3:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1007aa8:	e9 8a fd ff ff 	jmp	-630 <_runtime.(*itab).init+0x147>
 1007aad:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007ab1:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1007ab6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1007abb:	e8 30 a6 ff ff 	call	-22992 <_runtime.memequal>
 1007ac0:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1007ac5:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1007aca:	eb d5 	jmp	-43 <_runtime.(*itab).init+0x3b1>
 1007acc:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1007ad4:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 1007adc:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1007ae1:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 1007ae9:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1007aee:	48 89 84 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rax
 1007af6:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 1007afe:	48 81 c4 b0 00 00 00 	add	rsp, 176
 1007b05:	c3 	ret
 1007b06:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1007b0b:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1007b0f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1007b13:	e8 d8 41 04 00 	call	279000 <_runtime.name.name>
 1007b18:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1007b1d:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1007b22:	e9 8d fe ff ff 	jmp	-371 <_runtime.(*itab).init+0x2c4>
 1007b27:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1007b2f:	4c 89 48 18 	mov	qword ptr [rax + 24], r9
 1007b33:	0f 57 c0 	xorps	xmm0, xmm0
 1007b36:	0f 11 84 24 c0 00 00 00 	movups	xmmword ptr [rsp + 192], xmm0
 1007b3e:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 1007b46:	48 81 c4 b0 00 00 00 	add	rsp, 176
 1007b4d:	c3 	ret
 1007b4e:	48 89 f8 	mov	rax, rdi
 1007b51:	48 89 f1 	mov	rcx, rsi
 1007b54:	e8 f7 b7 04 00 	call	309239 <_runtime.panicIndex>
 1007b59:	48 89 f8 	mov	rax, rdi
 1007b5c:	4c 89 d1 	mov	rcx, r10
 1007b5f:	e8 ec b7 04 00 	call	309228 <_runtime.panicIndex>
 1007b64:	bb 00 00 01 00 	mov	ebx, 65536
 1007b69:	e8 62 b8 04 00 	call	309346 <_runtime.panicSlice3Alen>
 1007b6e:	48 89 da 	mov	rdx, rbx
 1007b71:	bb 00 00 01 00 	mov	ebx, 65536
 1007b76:	e8 55 b8 04 00 	call	309333 <_runtime.panicSlice3Alen>
 1007b7b:	90 	nop
 1007b7c:	e8 4f 90 04 00 	call	299087 <_runtime.morestack_noctxt>
 1007b81:	e9 6a fb ff ff 	jmp	-1174 <_runtime.(*itab).init>
 1007b86:	cc 	int3
 1007b87:	cc 	int3
 1007b88:	cc 	int3
 1007b89:	cc 	int3
 1007b8a:	cc 	int3
 1007b8b:	cc 	int3
 1007b8c:	cc 	int3
 1007b8d:	cc 	int3
 1007b8e:	cc 	int3
 1007b8f:	cc 	int3

_runtime.itabsinit:
 1007b90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007b99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1007b9d:	0f 86 cc 00 00 00 	jbe	204 <_runtime.itabsinit+0xdf>
 1007ba3:	48 83 ec 40 	sub	rsp, 64
 1007ba7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1007bac:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1007bb1:	48 8d 05 98 fc 0e 00 	lea	rax, [rip + 982168]
 1007bb8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007bbc:	e8 6f 05 00 00 	call	1391 <_runtime.lock>
 1007bc1:	48 8b 05 98 66 0c 00 	mov	rax, qword ptr [rip + 812696]
 1007bc8:	48 85 c0 	test	rax, rax
 1007bcb:	0f 84 95 00 00 00 	je	149 <_runtime.itabsinit+0xd6>
 1007bd1:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1007bd5:	48 8b 00 	mov	rax, qword ptr [rax]
 1007bd8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1007bdd:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1007be2:	31 d2 	xor	edx, edx
 1007be4:	eb 3c 	jmp	60 <_runtime.itabsinit+0x92>
 1007be6:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 1007beb:	48 8b 04 fb 	mov	rax, qword ptr [rbx + 8*rdi]
 1007bef:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007bf3:	e8 48 f9 ff ff 	call	-1720 <_runtime.itabAdd>
 1007bf8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007bfd:	48 8d 78 01 	lea	rdi, [rax + 1]
 1007c01:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1007c06:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1007c0b:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1007c10:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1007c15:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 1007c1a:	48 39 f7 	cmp	rdi, rsi
 1007c1d:	7c c7 	jl	-57 <_runtime.itabsinit+0x56>
 1007c1f:	48 ff c2 	inc	rdx
 1007c22:	48 39 ca 	cmp	rdx, rcx
 1007c25:	7d 25 	jge	37 <_runtime.itabsinit+0xbc>
 1007c27:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1007c2c:	48 8b 1c d0 	mov	rbx, qword ptr [rax + 8*rdx]
 1007c30:	48 8b b3 10 01 00 00 	mov	rsi, qword ptr [rbx + 272]
 1007c37:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1007c3c:	48 8b 9b 08 01 00 00 	mov	rbx, qword ptr [rbx + 264]
 1007c43:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1007c48:	31 ff 	xor	edi, edi
 1007c4a:	eb ce 	jmp	-50 <_runtime.itabsinit+0x8a>
 1007c4c:	48 8d 05 fd fb 0e 00 	lea	rax, [rip + 982013]
 1007c53:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007c57:	e8 b4 06 00 00 	call	1716 <_runtime.unlock>
 1007c5c:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1007c61:	48 83 c4 40 	add	rsp, 64
 1007c65:	c3 	ret
 1007c66:	31 c9 	xor	ecx, ecx
 1007c68:	31 c0 	xor	eax, eax
 1007c6a:	e9 69 ff ff ff 	jmp	-151 <_runtime.itabsinit+0x48>
 1007c6f:	e8 5c 8f 04 00 	call	298844 <_runtime.morestack_noctxt>
 1007c74:	e9 17 ff ff ff 	jmp	-233 <_runtime.itabsinit>
 1007c79:	cc 	int3
 1007c7a:	cc 	int3
 1007c7b:	cc 	int3
 1007c7c:	cc 	int3
 1007c7d:	cc 	int3
 1007c7e:	cc 	int3
 1007c7f:	cc 	int3

_runtime.convTstring:
 1007c80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007c89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1007c8d:	76 7c 	jbe	124 <_runtime.convTstring+0x8b>
 1007c8f:	48 83 ec 28 	sub	rsp, 40
 1007c93:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1007c98:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1007c9d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1007ca2:	48 85 c0 	test	rax, rax
 1007ca5:	75 16 	jne	22 <_runtime.convTstring+0x3d>
 1007ca7:	48 8d 05 72 05 0f 00 	lea	rax, [rip + 984434]
 1007cae:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1007cb3:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1007cb8:	48 83 c4 28 	add	rsp, 40
 1007cbc:	c3 	ret
 1007cbd:	48 c7 04 24 10 00 00 00 	mov	qword ptr [rsp], 16
 1007cc5:	48 8b 05 b4 65 0c 00 	mov	rax, qword ptr [rip + 812468]
 1007ccc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1007cd1:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 1007cd6:	e8 d5 1b 00 00 	call	7125 <_runtime.mallocgc>
 1007cdb:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 1007ce0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1007ce5:	48 89 47 08 	mov	qword ptr [rdi + 8], rax
 1007ce9:	83 3d 10 fc 0e 00 00 	cmp	dword ptr [rip + 982032], 0
 1007cf0:	75 0d 	jne	13 <_runtime.convTstring+0x7f>
 1007cf2:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1007cf7:	48 89 07 	mov	qword ptr [rdi], rax
 1007cfa:	48 89 f8 	mov	rax, rdi
 1007cfd:	eb af 	jmp	-81 <_runtime.convTstring+0x2e>
 1007cff:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1007d04:	e8 d7 ac 04 00 	call	306391 <_runtime.gcWriteBarrier>
 1007d09:	eb ef 	jmp	-17 <_runtime.convTstring+0x7a>
 1007d0b:	e8 c0 8e 04 00 	call	298688 <_runtime.morestack_noctxt>
 1007d10:	e9 6b ff ff ff 	jmp	-149 <_runtime.convTstring>
 1007d15:	cc 	int3
 1007d16:	cc 	int3
 1007d17:	cc 	int3
 1007d18:	cc 	int3
 1007d19:	cc 	int3
 1007d1a:	cc 	int3
 1007d1b:	cc 	int3
 1007d1c:	cc 	int3
 1007d1d:	cc 	int3
 1007d1e:	cc 	int3
 1007d1f:	cc 	int3

_runtime.convT2Enoptr:
 1007d20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007d29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1007d2d:	76 71 	jbe	113 <_runtime.convT2Enoptr+0x80>
 1007d2f:	48 83 ec 30 	sub	rsp, 48
 1007d33:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1007d38:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1007d3d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1007d42:	48 8b 08 	mov	rcx, qword ptr [rax]
 1007d45:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1007d49:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1007d4e:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1007d53:	e8 58 1b 00 00 	call	7000 <_runtime.mallocgc>
 1007d58:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1007d5d:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1007d62:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1007d67:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1007d6a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007d6e:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1007d73:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1007d78:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1007d7d:	e8 ce bd 04 00 	call	310734 <_runtime.memmove>
 1007d82:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1007d87:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1007d8c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1007d91:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1007d96:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1007d9b:	48 83 c4 30 	add	rsp, 48
 1007d9f:	c3 	ret
 1007da0:	e8 2b 8e 04 00 	call	298539 <_runtime.morestack_noctxt>
 1007da5:	e9 76 ff ff ff 	jmp	-138 <_runtime.convT2Enoptr>
 1007daa:	cc 	int3
 1007dab:	cc 	int3
 1007dac:	cc 	int3
 1007dad:	cc 	int3
 1007dae:	cc 	int3
 1007daf:	cc 	int3

_runtime.assertE2I2:
 1007db0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007db9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1007dbd:	0f 86 86 00 00 00 	jbe	134 <_runtime.assertE2I2+0x99>
 1007dc3:	48 83 ec 28 	sub	rsp, 40
 1007dc7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1007dcc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1007dd1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1007dd6:	48 85 c0 	test	rax, rax
 1007dd9:	74 57 	je	87 <_runtime.assertE2I2+0x82>
 1007ddb:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1007de0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1007de4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1007de9:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 1007dee:	e8 5d f3 ff ff 	call	-3235 <_runtime.getitab>
 1007df3:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1007df8:	48 85 c0 	test	rax, rax
 1007dfb:	74 1e 	je	30 <_runtime.assertE2I2+0x6b>
 1007dfd:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1007e02:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1007e07:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1007e0c:	c6 44 24 58 01 	mov	byte ptr [rsp + 88], 1
 1007e11:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1007e16:	48 83 c4 28 	add	rsp, 40
 1007e1a:	c3 	ret
 1007e1b:	0f 57 c0 	xorps	xmm0, xmm0
 1007e1e:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 1007e23:	c6 44 24 58 00 	mov	byte ptr [rsp + 88], 0
 1007e28:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1007e2d:	48 83 c4 28 	add	rsp, 40
 1007e31:	c3 	ret
 1007e32:	0f 57 c0 	xorps	xmm0, xmm0
 1007e35:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 1007e3a:	c6 44 24 58 00 	mov	byte ptr [rsp + 88], 0
 1007e3f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1007e44:	48 83 c4 28 	add	rsp, 40
 1007e48:	c3 	ret
 1007e49:	e8 82 8d 04 00 	call	298370 <_runtime.morestack_noctxt>
 1007e4e:	e9 5d ff ff ff 	jmp	-163 <_runtime.assertE2I2>
 1007e53:	cc 	int3
 1007e54:	cc 	int3
 1007e55:	cc 	int3
 1007e56:	cc 	int3
 1007e57:	cc 	int3
 1007e58:	cc 	int3
 1007e59:	cc 	int3
 1007e5a:	cc 	int3
 1007e5b:	cc 	int3
 1007e5c:	cc 	int3
 1007e5d:	cc 	int3
 1007e5e:	cc 	int3
 1007e5f:	cc 	int3

_runtime.iterate_itabs:
 1007e60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007e69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1007e6d:	76 59 	jbe	89 <_runtime.iterate_itabs+0x68>
 1007e6f:	48 83 ec 20 	sub	rsp, 32
 1007e73:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1007e78:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1007e7d:	48 8b 05 cc 48 0c 00 	mov	rax, qword ptr [rip + 805068]
 1007e84:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1007e89:	31 c9 	xor	ecx, ecx
 1007e8b:	eb 03 	jmp	3 <_runtime.iterate_itabs+0x30>
 1007e8d:	48 ff c1 	inc	rcx
 1007e90:	48 39 08 	cmp	qword ptr [rax], rcx
 1007e93:	76 29 	jbe	41 <_runtime.iterate_itabs+0x5e>
 1007e95:	48 8b 5c c8 10 	mov	rbx, qword ptr [rax + 8*rcx + 16]
 1007e9a:	48 85 db 	test	rbx, rbx
 1007e9d:	74 ee 	je	-18 <_runtime.iterate_itabs+0x2d>
 1007e9f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1007ea4:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1007ea8:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1007ead:	48 8b 02 	mov	rax, qword ptr [rdx]
 1007eb0:	ff d0 	call	rax
 1007eb2:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007eb7:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1007ebc:	eb cf 	jmp	-49 <_runtime.iterate_itabs+0x2d>
 1007ebe:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1007ec3:	48 83 c4 20 	add	rsp, 32
 1007ec7:	c3 	ret
 1007ec8:	e8 03 8d 04 00 	call	298243 <_runtime.morestack_noctxt>
 1007ecd:	eb 91 	jmp	-111 <_runtime.iterate_itabs>
 1007ecf:	cc 	int3

_runtime.(*lfstack).push:
 1007ed0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1007ed9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1007edd:	0f 86 3d 01 00 00 	jbe	317 <_runtime.(*lfstack).push+0x150>
 1007ee3:	48 83 ec 30 	sub	rsp, 48
 1007ee7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1007eec:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1007ef1:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1007ef6:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 1007efa:	48 ff c2 	inc	rdx
 1007efd:	48 89 51 08 	mov	qword ptr [rcx + 8], rdx
 1007f01:	90 	nop
 1007f02:	48 89 cb 	mov	rbx, rcx
 1007f05:	48 c1 e1 10 	shl	rcx, 16
 1007f09:	48 89 d6 	mov	rsi, rdx
 1007f0c:	48 81 e2 ff ff 07 00 	and	rdx, 524287
 1007f13:	48 09 d1 	or	rcx, rdx
 1007f16:	48 89 ca 	mov	rdx, rcx
 1007f19:	48 c1 f9 13 	sar	rcx, 19
 1007f1d:	48 c1 e1 03 	shl	rcx, 3
 1007f21:	48 39 d9 	cmp	rcx, rbx
 1007f24:	75 26 	jne	38 <_runtime.(*lfstack).push+0x7c>
 1007f26:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1007f2b:	48 8b 31 	mov	rsi, qword ptr [rcx]
 1007f2e:	48 89 33 	mov	qword ptr [rbx], rsi
 1007f31:	48 89 f0 	mov	rax, rsi
 1007f34:	f0 	lock
 1007f35:	48 0f b1 11 	cmpxchg	qword ptr [rcx], rdx
 1007f39:	40 0f 94 c6 	sete	sil
 1007f3d:	40 84 f6 	test	sil, sil
 1007f40:	74 e9 	je	-23 <_runtime.(*lfstack).push+0x5b>
 1007f42:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1007f47:	48 83 c4 30 	add	rsp, 48
 1007f4b:	c3 	ret
 1007f4c:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1007f51:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1007f56:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1007f5b:	e8 40 25 02 00 	call	140608 <_runtime.printlock>
 1007f60:	48 8d 05 1a ed 06 00 	lea	rax, [rip + 453914]
 1007f67:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007f6b:	48 c7 44 24 08 2c 00 00 00 	mov	qword ptr [rsp + 8], 44
 1007f74:	e8 67 2e 02 00 	call	142951 <_runtime.printstring>
 1007f79:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1007f7e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007f82:	e8 19 2e 02 00 	call	142873 <_runtime.printpointer>
 1007f87:	48 8d 05 f4 ad 06 00 	lea	rax, [rip + 437748]
 1007f8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007f92:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1007f9b:	e8 40 2e 02 00 	call	142912 <_runtime.printstring>
 1007fa0:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1007fa5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007fa9:	e8 e2 2c 02 00 	call	142562 <_runtime.printhex>
 1007fae:	48 8d 05 42 b0 06 00 	lea	rax, [rip + 438338]
 1007fb5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007fb9:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1007fc2:	e8 19 2e 02 00 	call	142873 <_runtime.printstring>
 1007fc7:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1007fcc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007fd0:	e8 bb 2c 02 00 	call	142523 <_runtime.printhex>
 1007fd5:	48 8d 05 9c b0 06 00 	lea	rax, [rip + 438428]
 1007fdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007fe0:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1007fe9:	e8 f2 2d 02 00 	call	142834 <_runtime.printstring>
 1007fee:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1007ff3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1007ff7:	e8 a4 2d 02 00 	call	142756 <_runtime.printpointer>
 1007ffc:	e8 2f 27 02 00 	call	141103 <_runtime.printnl>
 1008001:	e8 1a 25 02 00 	call	140570 <_runtime.printunlock>
 1008006:	48 8d 05 d2 b5 06 00 	lea	rax, [rip + 439762]
 100800d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008011:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 100801a:	e8 41 0d 02 00 	call	134465 <_runtime.throw>
 100801f:	90 	nop
 1008020:	e8 ab 8b 04 00 	call	297899 <_runtime.morestack_noctxt>
 1008025:	e9 a6 fe ff ff 	jmp	-346 <_runtime.(*lfstack).push>
 100802a:	cc 	int3
 100802b:	cc 	int3
 100802c:	cc 	int3
 100802d:	cc 	int3
 100802e:	cc 	int3
 100802f:	cc 	int3

_runtime.(*lfstack).pop:
 1008030:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1008035:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1008038:	48 85 d2 	test	rdx, rdx
 100803b:	74 21 	je	33 <_runtime.(*lfstack).pop+0x2e>
 100803d:	48 89 d0 	mov	rax, rdx
 1008040:	48 c1 fa 13 	sar	rdx, 19
 1008044:	48 c1 e2 03 	shl	rdx, 3
 1008048:	90 	nop
 1008049:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100804c:	f0 	lock
 100804d:	48 0f b1 19 	cmpxchg	qword ptr [rcx], rbx
 1008051:	0f 94 c3 	sete	bl
 1008054:	84 db 	test	bl, bl
 1008056:	74 dd 	je	-35 <_runtime.(*lfstack).pop+0x5>
 1008058:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100805d:	c3 	ret
 100805e:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1008067:	c3 	ret
 1008068:	cc 	int3
 1008069:	cc 	int3
 100806a:	cc 	int3
 100806b:	cc 	int3
 100806c:	cc 	int3
 100806d:	cc 	int3
 100806e:	cc 	int3
 100806f:	cc 	int3

_runtime.lfnodeValidate:
 1008070:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008079:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100807d:	0f 86 96 00 00 00 	jbe	150 <_runtime.lfnodeValidate+0xa9>
 1008083:	48 83 ec 20 	sub	rsp, 32
 1008087:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100808c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1008091:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1008096:	48 89 c1 	mov	rcx, rax
 1008099:	48 c1 e0 10 	shl	rax, 16
 100809d:	48 0d ff ff 07 00 	or	rax, 524287
 10080a3:	48 c1 f8 13 	sar	rax, 19
 10080a7:	48 c1 e0 03 	shl	rax, 3
 10080ab:	48 39 c8 	cmp	rax, rcx
 10080ae:	75 0a 	jne	10 <_runtime.lfnodeValidate+0x4a>
 10080b0:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10080b5:	48 83 c4 20 	add	rsp, 32
 10080b9:	c3 	ret
 10080ba:	e8 e1 23 02 00 	call	140257 <_runtime.printlock>
 10080bf:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10080c4:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10080c9:	e8 d2 23 02 00 	call	140242 <_runtime.printlock>
 10080ce:	48 8d 05 10 d3 06 00 	lea	rax, [rip + 447248]
 10080d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10080d9:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 10080e2:	e8 f9 2c 02 00 	call	142585 <_runtime.printstring>
 10080e7:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10080ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10080f0:	e8 9b 2b 02 00 	call	142235 <_runtime.printhex>
 10080f5:	e8 36 26 02 00 	call	140854 <_runtime.printnl>
 10080fa:	e8 21 24 02 00 	call	140321 <_runtime.printunlock>
 10080ff:	48 8d 05 5f bd 06 00 	lea	rax, [rip + 441695]
 1008106:	48 89 04 24 	mov	qword ptr [rsp], rax
 100810a:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 1008113:	e8 48 0c 02 00 	call	134216 <_runtime.throw>
 1008118:	90 	nop
 1008119:	e8 b2 8a 04 00 	call	297650 <_runtime.morestack_noctxt>
 100811e:	e9 4d ff ff ff 	jmp	-179 <_runtime.lfnodeValidate>
 1008123:	cc 	int3
 1008124:	cc 	int3
 1008125:	cc 	int3
 1008126:	cc 	int3
 1008127:	cc 	int3
 1008128:	cc 	int3
 1008129:	cc 	int3
 100812a:	cc 	int3
 100812b:	cc 	int3
 100812c:	cc 	int3
 100812d:	cc 	int3
 100812e:	cc 	int3
 100812f:	cc 	int3

_runtime.lock:
 1008130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100813d:	0f 86 b6 01 00 00 	jbe	438 <_runtime.lock+0x1c9>
 1008143:	48 83 ec 30 	sub	rsp, 48
 1008147:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100814c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1008151:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100815a:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 100815e:	8b 9a 08 01 00 00 	mov	ebx, dword ptr [rdx + 264]
 1008164:	85 db 	test	ebx, ebx
 1008166:	0f 8c 73 01 00 00 	jl	371 <_runtime.lock+0x1af>
 100816c:	ff c3 	inc	ebx
 100816e:	89 9a 08 01 00 00 	mov	dword ptr [rdx + 264], ebx
 1008174:	31 c0 	xor	eax, eax
 1008176:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100817b:	bb 01 00 00 00 	mov	ebx, 1
 1008180:	f0 	lock
 1008181:	48 0f b1 1a 	cmpxchg	qword ptr [rdx], rbx
 1008185:	0f 94 c3 	sete	bl
 1008188:	84 db 	test	bl, bl
 100818a:	0f 85 45 01 00 00 	jne	325 <_runtime.lock+0x1a5>
 1008190:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1008195:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1008199:	48 89 04 24 	mov	qword ptr [rsp], rax
 100819d:	e8 6e de 01 00 	call	122478 <_runtime.semacreate>
 10081a2:	83 3d ff f5 0e 00 01 	cmp	dword ptr [rip + 980479], 1
 10081a9:	b8 00 00 00 00 	mov	eax, 0
 10081ae:	b9 04 00 00 00 	mov	ecx, 4
 10081b3:	48 0f 4f c1 	cmovg	rax, rcx
 10081b7:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10081bc:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10081c1:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10081c6:	31 db 	xor	ebx, ebx
 10081c8:	eb 3f 	jmp	63 <_runtime.lock+0xd9>
 10081ca:	48 89 f0 	mov	rax, rsi
 10081cd:	48 8b 71 30 	mov	rsi, qword ptr [rcx + 48]
 10081d1:	49 89 d8 	mov	r8, rbx
 10081d4:	48 83 e3 fe 	and	rbx, -2
 10081d8:	48 89 9e 78 02 00 00 	mov	qword ptr [rsi + 632], rbx
 10081df:	48 8b 59 30 	mov	rbx, qword ptr [rcx + 48]
 10081e3:	48 83 cb 01 	or	rbx, 1
 10081e7:	48 89 c6 	mov	rsi, rax
 10081ea:	4c 89 c0 	mov	rax, r8
 10081ed:	f0 	lock
 10081ee:	48 0f b1 1a 	cmpxchg	qword ptr [rdx], rbx
 10081f2:	0f 94 c3 	sete	bl
 10081f5:	84 db 	test	bl, bl
 10081f7:	75 53 	jne	83 <_runtime.lock+0x11c>
 10081f9:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 10081fc:	0f ba e3 00 	bt	ebx, 0
 1008200:	72 c8 	jb	-56 <_runtime.lock+0x9a>
 1008202:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 1008206:	48 89 f8 	mov	rax, rdi
 1008209:	48 8b 32 	mov	rsi, qword ptr [rdx]
 100820c:	0f ba e6 00 	bt	esi, 0
 1008210:	0f 82 b1 00 00 00 	jb	177 <_runtime.lock+0x197>
 1008216:	48 89 f3 	mov	rbx, rsi
 1008219:	48 83 ce 01 	or	rsi, 1
 100821d:	48 89 c7 	mov	rdi, rax
 1008220:	48 89 d8 	mov	rax, rbx
 1008223:	f0 	lock
 1008224:	48 0f b1 32 	cmpxchg	qword ptr [rdx], rsi
 1008228:	40 0f 94 c6 	sete	sil
 100822c:	40 84 f6 	test	sil, sil
 100822f:	0f 85 88 00 00 00 	jne	136 <_runtime.lock+0x18d>
 1008235:	31 c0 	xor	eax, eax
 1008237:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100823c:	48 39 f8 	cmp	rax, rdi
 100823f:	7c 57 	jl	87 <_runtime.lock+0x168>
 1008241:	48 8d 77 01 	lea	rsi, [rdi + 1]
 1008245:	48 39 f0 	cmp	rax, rsi
 1008248:	7d 83 	jge	-125 <_runtime.lock+0x9d>
 100824a:	eb 27 	jmp	39 <_runtime.lock+0x143>
 100824c:	41 0f ba e0 00 	bt	r8d, 0
 1008251:	73 af 	jae	-81 <_runtime.lock+0xd2>
 1008253:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 100825b:	e8 60 de 01 00 	call	122464 <_runtime.semasleep>
 1008260:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1008265:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100826a:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 100826f:	31 f6 	xor	esi, esi
 1008271:	eb 8f 	jmp	-113 <_runtime.lock+0xd2>
 1008273:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 100827a:	e8 61 af 03 00 	call	241505 <_runtime.usleep>
 100827f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1008284:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1008289:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 100828e:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 1008293:	e9 6a ff ff ff 	jmp	-150 <_runtime.lock+0xd2>
 1008298:	c7 04 24 1e 00 00 00 	mov	dword ptr [rsp], 30
 100829f:	e8 2c 9f 04 00 	call	302892 <_runtime.procyield>
 10082a4:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10082a9:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10082ae:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 10082b3:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 10082b8:	e9 45 ff ff ff 	jmp	-187 <_runtime.lock+0xd2>
 10082bd:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10082c2:	48 83 c4 30 	add	rsp, 48
 10082c6:	c3 	ret
 10082c7:	48 89 c7 	mov	rdi, rax
 10082ca:	48 89 d8 	mov	rax, rbx
 10082cd:	48 89 f3 	mov	rbx, rsi
 10082d0:	e9 62 ff ff ff 	jmp	-158 <_runtime.lock+0x107>
 10082d5:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10082da:	48 83 c4 30 	add	rsp, 48
 10082de:	c3 	ret
 10082df:	48 8d 05 46 ca 06 00 	lea	rax, [rip + 444998]
 10082e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10082ea:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 10082f3:	e8 68 0a 02 00 	call	133736 <_runtime.throw>
 10082f8:	90 	nop
 10082f9:	e8 d2 88 04 00 	call	297170 <_runtime.morestack_noctxt>
 10082fe:	e9 2d fe ff ff 	jmp	-467 <_runtime.lock>
 1008303:	cc 	int3
 1008304:	cc 	int3
 1008305:	cc 	int3
 1008306:	cc 	int3
 1008307:	cc 	int3
 1008308:	cc 	int3
 1008309:	cc 	int3
 100830a:	cc 	int3
 100830b:	cc 	int3
 100830c:	cc 	int3
 100830d:	cc 	int3
 100830e:	cc 	int3
 100830f:	cc 	int3

_runtime.unlock:
 1008310:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008319:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100831d:	0f 86 be 00 00 00 	jbe	190 <_runtime.unlock+0xd1>
 1008323:	48 83 ec 20 	sub	rsp, 32
 1008327:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100832c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1008331:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100833a:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 100833f:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1008342:	48 83 fb 01 	cmp	rbx, 1
 1008346:	75 4a 	jne	74 <_runtime.unlock+0x82>
 1008348:	b8 01 00 00 00 	mov	eax, 1
 100834d:	31 db 	xor	ebx, ebx
 100834f:	f0 	lock
 1008350:	48 0f b1 1a 	cmpxchg	qword ptr [rdx], rbx
 1008354:	40 0f 94 c6 	sete	sil
 1008358:	40 84 f6 	test	sil, sil
 100835b:	74 e2 	je	-30 <_runtime.unlock+0x2f>
 100835d:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1008361:	ff 88 08 01 00 00 	dec	dword ptr [rax + 264]
 1008367:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 100836b:	8b 80 08 01 00 00 	mov	eax, dword ptr [rax + 264]
 1008371:	85 c0 	test	eax, eax
 1008373:	7c 52 	jl	82 <_runtime.unlock+0xb7>
 1008375:	75 11 	jne	17 <_runtime.unlock+0x78>
 1008377:	80 b9 b1 00 00 00 00 	cmp	byte ptr [rcx + 177], 0
 100837e:	74 08 	je	8 <_runtime.unlock+0x78>
 1008380:	48 c7 41 10 de fa ff ff 	mov	qword ptr [rcx + 16], -1314
 1008388:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100838d:	48 83 c4 20 	add	rsp, 32
 1008391:	c3 	ret
 1008392:	48 89 d8 	mov	rax, rbx
 1008395:	48 83 e3 fe 	and	rbx, -2
 1008399:	48 8b b3 78 02 00 00 	mov	rsi, qword ptr [rbx + 632]
 10083a0:	f0 	lock
 10083a1:	48 0f b1 32 	cmpxchg	qword ptr [rdx], rsi
 10083a5:	40 0f 94 c6 	sete	sil
 10083a9:	40 84 f6 	test	sil, sil
 10083ac:	75 04 	jne	4 <_runtime.unlock+0xa2>
 10083ae:	31 db 	xor	ebx, ebx
 10083b0:	eb 8d 	jmp	-115 <_runtime.unlock+0x2f>
 10083b2:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10083b7:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10083bb:	e8 90 de 01 00 	call	122512 <_runtime.semawakeup>
 10083c0:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10083c5:	eb 96 	jmp	-106 <_runtime.unlock+0x4d>
 10083c7:	48 8d 05 62 cd 06 00 	lea	rax, [rip + 445794]
 10083ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10083d2:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 10083db:	e8 80 09 02 00 	call	133504 <_runtime.throw>
 10083e0:	90 	nop
 10083e1:	e8 ea 87 04 00 	call	296938 <_runtime.morestack_noctxt>
 10083e6:	e9 25 ff ff ff 	jmp	-219 <_runtime.unlock>
 10083eb:	cc 	int3
 10083ec:	cc 	int3
 10083ed:	cc 	int3
 10083ee:	cc 	int3
 10083ef:	cc 	int3

_runtime.notewakeup:
 10083f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10083f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10083fd:	76 66 	jbe	102 <_runtime.notewakeup+0x75>
 10083ff:	48 83 ec 18 	sub	rsp, 24
 1008403:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1008408:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 100840d:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1008412:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1008415:	48 89 d0 	mov	rax, rdx
 1008418:	bb 01 00 00 00 	mov	ebx, 1
 100841d:	f0 	lock
 100841e:	48 0f b1 19 	cmpxchg	qword ptr [rcx], rbx
 1008422:	40 0f 94 c6 	sete	sil
 1008426:	40 84 f6 	test	sil, sil
 1008429:	74 e7 	je	-25 <_runtime.notewakeup+0x22>
 100842b:	48 85 d2 	test	rdx, rdx
 100842e:	75 0a 	jne	10 <_runtime.notewakeup+0x4a>
 1008430:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1008435:	48 83 c4 18 	add	rsp, 24
 1008439:	c3 	ret
 100843a:	48 83 fa 01 	cmp	rdx, 1
 100843e:	74 0b 	je	11 <_runtime.notewakeup+0x5b>
 1008440:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1008444:	e8 07 de 01 00 	call	122375 <_runtime.semawakeup>
 1008449:	eb e5 	jmp	-27 <_runtime.notewakeup+0x40>
 100844b:	48 8d 05 27 ca 06 00 	lea	rax, [rip + 444967]
 1008452:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008456:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 100845f:	e8 fc 08 02 00 	call	133372 <_runtime.throw>
 1008464:	90 	nop
 1008465:	e8 66 87 04 00 	call	296806 <_runtime.morestack_noctxt>
 100846a:	eb 84 	jmp	-124 <_runtime.notewakeup>
 100846c:	cc 	int3
 100846d:	cc 	int3
 100846e:	cc 	int3
 100846f:	cc 	int3

_runtime.notesleep:
 1008470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008479:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100847d:	0f 86 17 01 00 00 	jbe	279 <_runtime.notesleep+0x12a>
 1008483:	48 83 ec 30 	sub	rsp, 48
 1008487:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100848c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1008491:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 100849a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 100849e:	48 39 01 	cmp	qword ptr [rcx], rax
 10084a1:	0f 85 d9 00 00 00 	jne	217 <_runtime.notesleep+0x110>
 10084a7:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10084ac:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10084b0:	e8 5b db 01 00 	call	121691 <_runtime.semacreate>
 10084b5:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10084ba:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10084be:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10084c3:	48 89 c2 	mov	rdx, rax
 10084c6:	31 c0 	xor	eax, eax
 10084c8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10084cd:	f0 	lock
 10084ce:	48 0f b1 0b 	cmpxchg	qword ptr [rbx], rcx
 10084d2:	0f 94 c0 	sete	al
 10084d5:	84 c0 	test	al, al
 10084d7:	74 7e 	je	126 <_runtime.notesleep+0xe7>
 10084d9:	48 8b 42 30 	mov	rax, qword ptr [rdx + 48]
 10084dd:	c6 80 15 01 00 00 01 	mov	byte ptr [rax + 277], 1
 10084e4:	48 8b 05 5d 42 0c 00 	mov	rax, qword ptr [rip + 803421]
 10084eb:	48 83 38 00 	cmp	qword ptr [rax], 0
 10084ef:	75 35 	jne	53 <_runtime.notesleep+0xb6>
 10084f1:	eb 50 	jmp	80 <_runtime.notesleep+0xd3>
 10084f3:	48 c7 04 24 80 96 98 00 	mov	qword ptr [rsp], 10000000
 10084fb:	e8 c0 db 01 00 	call	121792 <_runtime.semasleep>
 1008500:	48 8b 05 41 42 0c 00 	mov	rax, qword ptr [rip + 803393]
 1008507:	48 8b 00 	mov	rax, qword ptr [rax]
 100850a:	48 89 04 24 	mov	qword ptr [rsp], rax
 100850e:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1008517:	e8 34 9d 04 00 	call	302388 <_runtime.asmcgocall>
 100851c:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1008521:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1008526:	48 8b 03 	mov	rax, qword ptr [rbx]
 1008529:	48 85 c0 	test	rax, rax
 100852c:	74 c5 	je	-59 <_runtime.notesleep+0x83>
 100852e:	48 8b 42 30 	mov	rax, qword ptr [rdx + 48]
 1008532:	c6 80 15 01 00 00 00 	mov	byte ptr [rax + 277], 0
 1008539:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100853e:	48 83 c4 30 	add	rsp, 48
 1008542:	c3 	ret
 1008543:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 100854b:	e8 70 db 01 00 	call	121712 <_runtime.semasleep>
 1008550:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1008555:	eb d7 	jmp	-41 <_runtime.notesleep+0xbe>
 1008557:	48 83 3b 01 	cmp	qword ptr [rbx], 1
 100855b:	75 0a 	jne	10 <_runtime.notesleep+0xf7>
 100855d:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1008562:	48 83 c4 30 	add	rsp, 48
 1008566:	c3 	ret
 1008567:	48 8d 05 cd cf 06 00 	lea	rax, [rip + 446413]
 100856e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008572:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 100857b:	e8 e0 07 02 00 	call	133088 <_runtime.throw>
 1008580:	48 8d 05 8a ba 06 00 	lea	rax, [rip + 440970]
 1008587:	48 89 04 24 	mov	qword ptr [rsp], rax
 100858b:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1008594:	e8 c7 07 02 00 	call	133063 <_runtime.throw>
 1008599:	90 	nop
 100859a:	e8 31 86 04 00 	call	296497 <_runtime.morestack_noctxt>
 100859f:	e9 cc fe ff ff 	jmp	-308 <_runtime.notesleep>
 10085a4:	cc 	int3
 10085a5:	cc 	int3
 10085a6:	cc 	int3
 10085a7:	cc 	int3
 10085a8:	cc 	int3
 10085a9:	cc 	int3
 10085aa:	cc 	int3
 10085ab:	cc 	int3
 10085ac:	cc 	int3
 10085ad:	cc 	int3
 10085ae:	cc 	int3
 10085af:	cc 	int3

_runtime.notetsleep_internal:
 10085b0:	48 83 ec 28 	sub	rsp, 40
 10085b4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10085b9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10085be:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10085c7:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 10085cb:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10085d0:	31 c0 	xor	eax, eax
 10085d2:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10085d7:	f0 	lock
 10085d8:	48 0f b1 13 	cmpxchg	qword ptr [rbx], rdx
 10085dc:	0f 94 c2 	sete	dl
 10085df:	84 d2 	test	dl, dl
 10085e1:	0f 84 d0 01 00 00 	je	464 <_runtime.notetsleep_internal+0x207>
 10085e7:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10085ec:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10085f1:	48 85 c0 	test	rax, rax
 10085f4:	7d 78 	jge	120 <_runtime.notetsleep_internal+0xbe>
 10085f6:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 10085fa:	c6 80 15 01 00 00 01 	mov	byte ptr [rax + 277], 1
 1008601:	48 8b 05 40 41 0c 00 	mov	rax, qword ptr [rip + 803136]
 1008608:	48 83 38 00 	cmp	qword ptr [rax], 0
 100860c:	75 1e 	jne	30 <_runtime.notetsleep_internal+0x7c>
 100860e:	eb 4f 	jmp	79 <_runtime.notetsleep_internal+0xaf>
 1008610:	48 8b 05 31 41 0c 00 	mov	rax, qword ptr [rip + 803121]
 1008617:	48 8b 00 	mov	rax, qword ptr [rax]
 100861a:	48 89 04 24 	mov	qword ptr [rsp], rax
 100861e:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1008627:	e8 24 9c 04 00 	call	302116 <_runtime.asmcgocall>
 100862c:	48 c7 04 24 80 96 98 00 	mov	qword ptr [rsp], 10000000
 1008634:	e8 87 da 01 00 	call	121479 <_runtime.semasleep>
 1008639:	83 7c 24 08 00 	cmp	dword ptr [rsp + 8], 0
 100863e:	7c d0 	jl	-48 <_runtime.notetsleep_internal+0x60>
 1008640:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1008645:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1008649:	c6 80 15 01 00 00 00 	mov	byte ptr [rax + 277], 0
 1008650:	c6 44 24 50 01 	mov	byte ptr [rsp + 80], 1
 1008655:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 100865a:	48 83 c4 28 	add	rsp, 40
 100865e:	c3 	ret
 100865f:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 1008667:	e8 54 da 01 00 	call	121428 <_runtime.semasleep>
 100866c:	eb d2 	jmp	-46 <_runtime.notetsleep_internal+0x90>
 100866e:	e8 4d ac 03 00 	call	240717 <_runtime.nanotime1>
 1008673:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1008677:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100867c:	48 01 c8 	add	rax, rcx
 100867f:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1008684:	eb 03 	jmp	3 <_runtime.notetsleep_internal+0xd9>
 1008686:	48 89 d0 	mov	rax, rdx
 1008689:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100868e:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1008692:	c6 83 15 01 00 00 01 	mov	byte ptr [rbx + 277], 1
 1008699:	48 8b 1d a8 40 0c 00 	mov	rbx, qword ptr [rip + 802984]
 10086a0:	48 83 3b 00 	cmp	qword ptr [rbx], 0
 10086a4:	74 0e 	je	14 <_runtime.notetsleep_internal+0x104>
 10086a6:	48 81 f9 80 96 98 00 	cmp	rcx, 10000000
 10086ad:	7e 05 	jle	5 <_runtime.notetsleep_internal+0x104>
 10086af:	b9 80 96 98 00 	mov	ecx, 10000000
 10086b4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10086b8:	e8 03 da 01 00 	call	121347 <_runtime.semasleep>
 10086bd:	83 7c 24 08 00 	cmp	dword ptr [rsp + 8], 0
 10086c2:	0f 8d d0 00 00 00 	jge	208 <_runtime.notetsleep_internal+0x1e8>
 10086c8:	48 8b 05 79 40 0c 00 	mov	rax, qword ptr [rip + 802937]
 10086cf:	48 8b 00 	mov	rax, qword ptr [rax]
 10086d2:	48 85 c0 	test	rax, rax
 10086d5:	0f 85 a6 00 00 00 	jne	166 <_runtime.notetsleep_internal+0x1d1>
 10086db:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10086e0:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10086e4:	c6 81 15 01 00 00 00 	mov	byte ptr [rcx + 277], 0
 10086eb:	e8 d0 ab 03 00 	call	240592 <_runtime.nanotime1>
 10086f0:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10086f4:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10086f9:	48 89 ca 	mov	rdx, rcx
 10086fc:	48 29 c1 	sub	rcx, rax
 10086ff:	48 85 c9 	test	rcx, rcx
 1008702:	7f 82 	jg	-126 <_runtime.notetsleep_internal+0xd6>
 1008704:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1008709:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100870e:	48 8b 19 	mov	rbx, qword ptr [rcx]
 1008711:	48 8b 72 30 	mov	rsi, qword ptr [rdx + 48]
 1008715:	48 89 f7 	mov	rdi, rsi
 1008718:	48 39 de 	cmp	rsi, rbx
 100871b:	75 20 	jne	32 <_runtime.notetsleep_internal+0x18d>
 100871d:	48 89 d8 	mov	rax, rbx
 1008720:	31 f6 	xor	esi, esi
 1008722:	f0 	lock
 1008723:	48 0f b1 31 	cmpxchg	qword ptr [rcx], rsi
 1008727:	0f 94 c3 	sete	bl
 100872a:	84 db 	test	bl, bl
 100872c:	74 e0 	je	-32 <_runtime.notetsleep_internal+0x15e>
 100872e:	c6 44 24 50 00 	mov	byte ptr [rsp + 80], 0
 1008733:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1008738:	48 83 c4 28 	add	rsp, 40
 100873c:	c3 	ret
 100873d:	48 83 fb 01 	cmp	rbx, 1
 1008741:	0f 85 9e 00 00 00 	jne	158 <_runtime.notetsleep_internal+0x235>
 1008747:	c6 87 15 01 00 00 01 	mov	byte ptr [rdi + 277], 1
 100874e:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 1008756:	e8 65 d9 01 00 	call	121189 <_runtime.semasleep>
 100875b:	83 7c 24 08 00 	cmp	dword ptr [rsp + 8], 0
 1008760:	7c 6a 	jl	106 <_runtime.notetsleep_internal+0x21c>
 1008762:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1008767:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 100876b:	c6 80 15 01 00 00 00 	mov	byte ptr [rax + 277], 0
 1008772:	c6 44 24 50 01 	mov	byte ptr [rsp + 80], 1
 1008777:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 100877c:	48 83 c4 28 	add	rsp, 40
 1008780:	c3 	ret
 1008781:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008785:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100878e:	e8 bd 9a 04 00 	call	301757 <_runtime.asmcgocall>
 1008793:	e9 43 ff ff ff 	jmp	-189 <_runtime.notetsleep_internal+0x12b>
 1008798:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100879d:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10087a1:	c6 80 15 01 00 00 00 	mov	byte ptr [rax + 277], 0
 10087a8:	c6 44 24 50 01 	mov	byte ptr [rsp + 80], 1
 10087ad:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10087b2:	48 83 c4 28 	add	rsp, 40
 10087b6:	c3 	ret
 10087b7:	48 83 3b 01 	cmp	qword ptr [rbx], 1
 10087bb:	75 41 	jne	65 <_runtime.notetsleep_internal+0x24e>
 10087bd:	c6 44 24 50 01 	mov	byte ptr [rsp + 80], 1
 10087c2:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10087c7:	48 83 c4 28 	add	rsp, 40
 10087cb:	c3 	ret
 10087cc:	48 8d 05 d5 e9 06 00 	lea	rax, [rip + 453077]
 10087d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10087d7:	48 c7 44 24 08 32 00 00 00 	mov	qword ptr [rsp + 8], 50
 10087e0:	e8 7b 05 02 00 	call	132475 <_runtime.throw>
 10087e5:	48 8d 05 93 e8 06 00 	lea	rax, [rip + 452755]
 10087ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10087f0:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 10087f9:	e8 62 05 02 00 	call	132450 <_runtime.throw>
 10087fe:	48 8d 05 54 d0 06 00 	lea	rax, [rip + 446548]
 1008805:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008809:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1008812:	e8 49 05 02 00 	call	132425 <_runtime.throw>
 1008817:	90 	nop
 1008818:	cc 	int3
 1008819:	cc 	int3
 100881a:	cc 	int3
 100881b:	cc 	int3
 100881c:	cc 	int3
 100881d:	cc 	int3
 100881e:	cc 	int3
 100881f:	cc 	int3

_runtime.notetsleep:
 1008820:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008829:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100882d:	76 76 	jbe	118 <_runtime.notetsleep+0x85>
 100882f:	48 83 ec 30 	sub	rsp, 48
 1008833:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1008838:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100883d:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1008846:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 100884a:	48 39 01 	cmp	qword ptr [rcx], rax
 100884d:	75 3c 	jne	60 <_runtime.notetsleep+0x6b>
 100884f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1008853:	e8 b8 d7 01 00 	call	120760 <_runtime.semacreate>
 1008858:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100885d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008861:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1008866:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100886b:	0f 57 c0 	xorps	xmm0, xmm0
 100886e:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1008873:	e8 38 fd ff ff 	call	-712 <_runtime.notetsleep_internal>
 1008878:	0f b6 44 24 20 	movzx	eax, byte ptr [rsp + 32]
 100887d:	88 44 24 48 	mov	byte ptr [rsp + 72], al
 1008881:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1008886:	48 83 c4 30 	add	rsp, 48
 100888a:	c3 	ret
 100888b:	48 8d 05 f2 b9 06 00 	lea	rax, [rip + 440818]
 1008892:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008896:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 100889f:	e8 bc 04 02 00 	call	132284 <_runtime.throw>
 10088a4:	90 	nop
 10088a5:	e8 26 83 04 00 	call	295718 <_runtime.morestack_noctxt>
 10088aa:	e9 71 ff ff ff 	jmp	-143 <_runtime.notetsleep>
 10088af:	cc 	int3

_runtime.notetsleepg:
 10088b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10088b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10088bd:	0f 86 89 00 00 00 	jbe	137 <_runtime.notetsleepg+0x9c>
 10088c3:	48 83 ec 38 	sub	rsp, 56
 10088c7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 10088cc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 10088d1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10088da:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10088de:	48 39 01 	cmp	qword ptr [rcx], rax
 10088e1:	74 4f 	je	79 <_runtime.notetsleepg+0x82>
 10088e3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10088e7:	e8 24 d7 01 00 	call	120612 <_runtime.semacreate>
 10088ec:	e8 0f 9d 02 00 	call	171279 <_runtime.entersyscallblock>
 10088f1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10088f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10088fa:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10088ff:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1008904:	0f 57 c0 	xorps	xmm0, xmm0
 1008907:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 100890c:	e8 9f fc ff ff 	call	-865 <_runtime.notetsleep_internal>
 1008911:	0f b6 44 24 20 	movzx	eax, byte ptr [rsp + 32]
 1008916:	88 44 24 2f 	mov	byte ptr [rsp + 47], al
 100891a:	e8 21 9f 02 00 	call	171809 <_runtime.exitsyscall>
 100891f:	0f b6 44 24 2f 	movzx	eax, byte ptr [rsp + 47]
 1008924:	88 44 24 50 	mov	byte ptr [rsp + 80], al
 1008928:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100892d:	48 83 c4 38 	add	rsp, 56
 1008931:	c3 	ret
 1008932:	48 8d 05 e6 b3 06 00 	lea	rax, [rip + 439270]
 1008939:	48 89 04 24 	mov	qword ptr [rsp], rax
 100893d:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1008946:	e8 15 04 02 00 	call	132117 <_runtime.throw>
 100894b:	90 	nop
 100894c:	e8 7f 82 04 00 	call	295551 <_runtime.morestack_noctxt>
 1008951:	e9 5a ff ff ff 	jmp	-166 <_runtime.notetsleepg>
 1008956:	cc 	int3
 1008957:	cc 	int3
 1008958:	cc 	int3
 1008959:	cc 	int3
 100895a:	cc 	int3
 100895b:	cc 	int3
 100895c:	cc 	int3
 100895d:	cc 	int3
 100895e:	cc 	int3
 100895f:	cc 	int3

_runtime.mallocinit:
 1008960:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008969:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100896d:	0f 86 88 03 00 00 	jbe	904 <_runtime.mallocinit+0x39b>
 1008973:	48 83 ec 28 	sub	rsp, 40
 1008977:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 100897c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1008981:	66 83 3d 7b 2b 0c 00 10 	cmp	word ptr [rip + 797563], 16
 1008989:	0f 85 52 03 00 00 	jne	850 <_runtime.mallocinit+0x381>
 100898f:	e8 1c ea 01 00 	call	125468 <_runtime.testdefersizes>
 1008994:	31 c0 	xor	eax, eax
 1008996:	eb 1c 	jmp	28 <_runtime.mallocinit+0x54>
 1008998:	48 8d 14 40 	lea	rdx, [rax + 2*rax]
 100899c:	48 8d 1d 5d 2b 0c 00 	lea	rbx, [rip + 797533]
 10089a3:	0f b7 34 43 	movzx	esi, word ptr [rbx + 2*rax]
 10089a7:	48 8d 3d 4a 0d 0f 00 	lea	rdi, [rip + 986442]
 10089ae:	89 34 d7 	mov	dword ptr [rdi + 8*rdx], esi
 10089b1:	48 ff c0 	inc	rax
 10089b4:	48 83 f8 43 	cmp	rax, 67
 10089b8:	7c de 	jl	-34 <_runtime.mallocinit+0x38>
 10089ba:	48 8b 05 d7 ee 0e 00 	mov	rax, qword ptr [rip + 978647]
 10089c1:	48 85 c0 	test	rax, rax
 10089c4:	0f 84 fe 02 00 00 	je	766 <_runtime.mallocinit+0x368>
 10089ca:	48 3d 00 00 08 00 	cmp	rax, 524288
 10089d0:	0f 87 67 02 00 00 	ja	615 <_runtime.mallocinit+0x2dd>
 10089d6:	48 3d 00 10 00 00 	cmp	rax, 4096
 10089dc:	0f 82 d0 01 00 00 	jb	464 <_runtime.mallocinit+0x252>
 10089e2:	48 8d 50 ff 	lea	rdx, [rax - 1]
 10089e6:	48 85 d0 	test	rax, rdx
 10089e9:	0f 85 5e 01 00 00 	jne	350 <_runtime.mallocinit+0x1ed>
 10089ef:	48 8b 05 9a ee 0e 00 	mov	rax, qword ptr [rip + 978586]
 10089f6:	48 8d 50 ff 	lea	rdx, [rax - 1]
 10089fa:	48 85 d0 	test	rax, rdx
 10089fd:	0f 85 e5 00 00 00 	jne	229 <_runtime.mallocinit+0x188>
 1008a03:	48 3d 00 00 40 00 	cmp	rax, 4194304
 1008a09:	76 0b 	jbe	11 <_runtime.mallocinit+0xb6>
 1008a0b:	48 c7 05 7a ee 0e 00 00 00 00 00 	mov	qword ptr [rip + 978554], 0
 1008a16:	48 83 3d 72 ee 0e 00 00 	cmp	qword ptr [rip + 978546], 0
 1008a1e:	75 0d 	jne	13 <_runtime.mallocinit+0xcd>
 1008a20:	eb 2d 	jmp	45 <_runtime.mallocinit+0xef>
 1008a22:	48 8d 41 01 	lea	rax, [rcx + 1]
 1008a26:	48 89 05 5b ee 0e 00 	mov	qword ptr [rip + 978523], rax
 1008a2d:	48 8b 0d 54 ee 0e 00 	mov	rcx, qword ptr [rip + 978516]
 1008a34:	48 83 f9 40 	cmp	rcx, 64
 1008a38:	48 19 c0 	sbb	rax, rax
 1008a3b:	ba 01 00 00 00 	mov	edx, 1
 1008a40:	48 d3 e2 	shl	rdx, cl
 1008a43:	48 21 c2 	and	rdx, rax
 1008a46:	48 39 15 43 ee 0e 00 	cmp	qword ptr [rip + 978499], rdx
 1008a4d:	75 d3 	jne	-45 <_runtime.mallocinit+0xc2>
 1008a4f:	48 8d 05 aa c5 0d 00 	lea	rax, [rip + 902570]
 1008a56:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008a5a:	e8 01 43 01 00 	call	82689 <_runtime.(*mheap).init>
 1008a5f:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1008a68:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1008a6d:	e8 ae 77 00 00 	call	30638 <_runtime.allocmcache>
 1008a72:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1008a77:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1008a7b:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 1008a7f:	48 89 88 60 01 00 00 	mov	qword ptr [rax + 352], rcx
 1008a86:	b8 7f 00 00 00 	mov	eax, 127
 1008a8b:	eb 4c 	jmp	76 <_runtime.mallocinit+0x179>
 1008a8d:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1008a92:	48 8d 05 67 ec 0e 00 	lea	rax, [rip + 978023]
 1008a99:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008a9d:	e8 ae 88 00 00 	call	34990 <_runtime.(*fixalloc).alloc>
 1008aa2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1008aa7:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1008aac:	48 89 ca 	mov	rdx, rcx
 1008aaf:	48 c1 e1 28 	shl	rcx, 40
 1008ab3:	48 bb 00 00 00 00 c0 00 00 00 	movabs	rbx, 824633720832
 1008abd:	48 09 d9 	or	rcx, rbx
 1008ac0:	48 89 08 	mov	qword ptr [rax], rcx
 1008ac3:	48 8b 0d 26 c9 0e 00 	mov	rcx, qword ptr [rip + 968998]
 1008aca:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1008ace:	48 89 05 1b c9 0e 00 	mov	qword ptr [rip + 968987], rax
 1008ad5:	48 8d 42 ff 	lea	rax, [rdx - 1]
 1008ad9:	48 85 c0 	test	rax, rax
 1008adc:	7d af 	jge	-81 <_runtime.mallocinit+0x12d>
 1008ade:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1008ae3:	48 83 c4 28 	add	rsp, 40
 1008ae7:	c3 	ret
 1008ae8:	e8 b3 19 02 00 	call	137651 <_runtime.printlock>
 1008aed:	48 8d 05 fc be 06 00 	lea	rax, [rip + 442108]
 1008af4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008af8:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1008b01:	e8 da 22 02 00 	call	139994 <_runtime.printstring>
 1008b06:	48 8b 05 83 ed 0e 00 	mov	rax, qword ptr [rip + 978307]
 1008b0d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008b11:	e8 0a 20 02 00 	call	139274 <_runtime.printuint>
 1008b16:	48 8d 05 4f bc 06 00 	lea	rax, [rip + 441423]
 1008b1d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008b21:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1008b2a:	e8 b1 22 02 00 	call	139953 <_runtime.printstring>
 1008b2f:	e8 ec 19 02 00 	call	137708 <_runtime.printunlock>
 1008b34:	48 8d 05 10 c1 06 00 	lea	rax, [rip + 442640]
 1008b3b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008b3f:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 1008b48:	e8 13 02 02 00 	call	131603 <_runtime.throw>
 1008b4d:	e8 4e 19 02 00 	call	137550 <_runtime.printlock>
 1008b52:	48 8d 05 8a b3 06 00 	lea	rax, [rip + 439178]
 1008b59:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008b5d:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 1008b66:	e8 75 22 02 00 	call	139893 <_runtime.printstring>
 1008b6b:	48 8b 05 26 ed 0e 00 	mov	rax, qword ptr [rip + 978214]
 1008b72:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008b76:	e8 a5 1f 02 00 	call	139173 <_runtime.printuint>
 1008b7b:	48 8d 05 ea bb 06 00 	lea	rax, [rip + 441322]
 1008b82:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008b86:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1008b8f:	e8 4c 22 02 00 	call	139852 <_runtime.printstring>
 1008b94:	e8 87 19 02 00 	call	137607 <_runtime.printunlock>
 1008b99:	48 8d 05 cc b5 06 00 	lea	rax, [rip + 439756]
 1008ba0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008ba4:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1008bad:	e8 ae 01 02 00 	call	131502 <_runtime.throw>
 1008bb2:	e8 e9 18 02 00 	call	137449 <_runtime.printlock>
 1008bb7:	48 8d 05 25 b3 06 00 	lea	rax, [rip + 439077]
 1008bbe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008bc2:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 1008bcb:	e8 10 22 02 00 	call	139792 <_runtime.printstring>
 1008bd0:	48 8b 05 c1 ec 0e 00 	mov	rax, qword ptr [rip + 978113]
 1008bd7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008bdb:	e8 40 1f 02 00 	call	139072 <_runtime.printuint>
 1008be0:	48 8d 05 23 d8 06 00 	lea	rax, [rip + 448547]
 1008be7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008beb:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 1008bf4:	e8 e7 21 02 00 	call	139751 <_runtime.printstring>
 1008bf9:	48 c7 04 24 00 10 00 00 	mov	qword ptr [rsp], 4096
 1008c01:	e8 1a 20 02 00 	call	139290 <_runtime.printint>
 1008c06:	48 8d 05 65 a0 06 00 	lea	rax, [rip + 434277]
 1008c0d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008c11:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1008c1a:	e8 c1 21 02 00 	call	139713 <_runtime.printstring>
 1008c1f:	e8 fc 18 02 00 	call	137468 <_runtime.printunlock>
 1008c24:	48 8d 05 41 b5 06 00 	lea	rax, [rip + 439617]
 1008c2b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008c2f:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1008c38:	e8 23 01 02 00 	call	131363 <_runtime.throw>
 1008c3d:	e8 5e 18 02 00 	call	137310 <_runtime.printlock>
 1008c42:	48 8d 05 9a b2 06 00 	lea	rax, [rip + 438938]
 1008c49:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008c4d:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 1008c56:	e8 85 21 02 00 	call	139653 <_runtime.printstring>
 1008c5b:	48 8b 05 36 ec 0e 00 	mov	rax, qword ptr [rip + 977974]
 1008c62:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008c66:	e8 b5 1e 02 00 	call	138933 <_runtime.printuint>
 1008c6b:	48 8d 05 0c d6 06 00 	lea	rax, [rip + 448012]
 1008c72:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008c76:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 1008c7f:	e8 5c 21 02 00 	call	139612 <_runtime.printstring>
 1008c84:	48 c7 04 24 00 00 08 00 	mov	qword ptr [rsp], 524288
 1008c8c:	e8 8f 1f 02 00 	call	139151 <_runtime.printint>
 1008c91:	48 8d 05 da 9f 06 00 	lea	rax, [rip + 434138]
 1008c98:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008c9c:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1008ca5:	e8 36 21 02 00 	call	139574 <_runtime.printstring>
 1008caa:	e8 71 18 02 00 	call	137329 <_runtime.printunlock>
 1008caf:	48 8d 05 b6 b4 06 00 	lea	rax, [rip + 439478]
 1008cb6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008cba:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1008cc3:	e8 98 00 02 00 	call	131224 <_runtime.throw>
 1008cc8:	48 8d 05 12 cb 06 00 	lea	rax, [rip + 445202]
 1008ccf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008cd3:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1008cdc:	e8 7f 00 02 00 	call	131199 <_runtime.throw>
 1008ce1:	48 8d 05 d1 af 06 00 	lea	rax, [rip + 438225]
 1008ce8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008cec:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1008cf5:	e8 66 00 02 00 	call	131174 <_runtime.throw>
 1008cfa:	90 	nop
 1008cfb:	e8 d0 7e 04 00 	call	294608 <_runtime.morestack_noctxt>
 1008d00:	e9 5b fc ff ff 	jmp	-933 <_runtime.mallocinit>
 1008d05:	cc 	int3
 1008d06:	cc 	int3
 1008d07:	cc 	int3
 1008d08:	cc 	int3
 1008d09:	cc 	int3
 1008d0a:	cc 	int3
 1008d0b:	cc 	int3
 1008d0c:	cc 	int3
 1008d0d:	cc 	int3
 1008d0e:	cc 	int3
 1008d0f:	cc 	int3

_runtime.(*mheap).sysAlloc:
 1008d10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1008d19:	48 8d 44 24 e0 	lea	rax, [rsp - 32]
 1008d1e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1008d22:	0f 86 d4 07 00 00 	jbe	2004 <_runtime.(*mheap).sysAlloc+0x7ec>
 1008d28:	48 81 ec a0 00 00 00 	sub	rsp, 160
 1008d2f:	48 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], rbp
 1008d37:	48 8d ac 24 98 00 00 00 	lea	rbp, [rsp + 152]
 1008d3f:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1008d47:	84 00 	test	byte ptr [rax], al
 1008d49:	90 	nop
 1008d4a:	48 8d 88 f8 03 01 00 	lea	rcx, [rax + 66552]
 1008d51:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1008d55:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 1008d5d:	48 81 c1 ff ff ff 03 	add	rcx, 67108863
 1008d64:	48 81 e1 00 00 00 fc 	and	rcx, -67108864
 1008d6b:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1008d70:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1008d75:	48 c7 44 24 10 00 00 00 04 	mov	qword ptr [rsp + 16], 67108864
 1008d7e:	48 8d 15 d3 f8 0e 00 	lea	rdx, [rip + 981203]
 1008d85:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1008d8a:	e8 81 1d 00 00 	call	7553 <_runtime.(*linearAlloc).alloc>
 1008d8f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1008d94:	48 85 c0 	test	rax, rax
 1008d97:	0f 85 02 06 00 00 	jne	1538 <_runtime.(*mheap).sysAlloc+0x68f>
 1008d9d:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 1008da5:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1008daa:	eb 35 	jmp	53 <_runtime.(*mheap).sysAlloc+0xd1>
 1008dac:	48 8b 73 10 	mov	rsi, qword ptr [rbx + 16]
 1008db0:	48 89 b1 f0 03 01 00 	mov	qword ptr [rcx + 66544], rsi
 1008db7:	90 	nop
 1008db8:	48 8b b1 30 27 01 00 	mov	rsi, qword ptr [rcx + 75568]
 1008dbf:	48 2b b1 00 27 01 00 	sub	rsi, qword ptr [rcx + 75520]
 1008dc6:	48 89 b1 30 27 01 00 	mov	qword ptr [rcx + 75568], rsi
 1008dcd:	48 8b b1 18 27 01 00 	mov	rsi, qword ptr [rcx + 75544]
 1008dd4:	48 89 33 	mov	qword ptr [rbx], rsi
 1008dd7:	48 89 99 18 27 01 00 	mov	qword ptr [rcx + 75544], rbx
 1008dde:	4c 89 c0 	mov	rax, r8
 1008de1:	48 8b 99 f0 03 01 00 	mov	rbx, qword ptr [rcx + 66544]
 1008de8:	48 85 db 	test	rbx, rbx
 1008deb:	0f 84 a1 05 00 00 	je	1441 <_runtime.(*mheap).sysAlloc+0x682>
 1008df1:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 1008df9:	48 8b 03 	mov	rax, qword ptr [rbx]
 1008dfc:	0f b6 73 08 	movzx	esi, byte ptr [rbx + 8]
 1008e00:	48 89 c7 	mov	rdi, rax
 1008e03:	48 29 d0 	sub	rax, rdx
 1008e06:	48 85 f6 	test	rsi, rsi
 1008e09:	48 0f 45 f8 	cmovne	rdi, rax
 1008e0d:	48 8d 04 3a 	lea	rax, [rdx + rdi]
 1008e11:	48 39 f8 	cmp	rax, rdi
 1008e14:	0f 83 e4 04 00 00 	jae	1252 <_runtime.(*mheap).sysAlloc+0x5ee>
 1008e1a:	31 f6 	xor	esi, esi
 1008e1c:	49 89 f0 	mov	r8, rsi
 1008e1f:	48 39 f7 	cmp	rdi, rsi
 1008e22:	74 46 	je	70 <_runtime.(*mheap).sysAlloc+0x15a>
 1008e24:	4d 85 c0 	test	r8, r8
 1008e27:	74 83 	je	-125 <_runtime.(*mheap).sysAlloc+0x9c>
 1008e29:	4c 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], r8
 1008e31:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1008e35:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1008e3a:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1008e43:	e8 08 81 00 00 	call	33032 <_runtime.sysFree>
 1008e48:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 1008e50:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1008e55:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1008e5d:	4c 8b 84 24 88 00 00 00 	mov	r8, qword ptr [rsp + 136]
 1008e65:	e9 42 ff ff ff 	jmp	-190 <_runtime.(*mheap).sysAlloc+0x9c>
 1008e6a:	0f b6 73 08 	movzx	esi, byte ptr [rbx + 8]
 1008e6e:	48 85 f6 	test	rsi, rsi
 1008e71:	48 0f 45 c7 	cmovne	rax, rdi
 1008e75:	48 89 03 	mov	qword ptr [rbx], rax
 1008e78:	48 89 d0 	mov	rax, rdx
 1008e7b:	48 85 d2 	test	rdx, rdx
 1008e7e:	0f 84 86 03 00 00 	je	902 <_runtime.(*mheap).sysAlloc+0x4fa>
 1008e84:	4c 89 c0 	mov	rax, r8
 1008e87:	4a 8d 1c 02 	lea	rbx, [rdx + r8]
 1008e8b:	4c 39 c3 	cmp	rbx, r8
 1008e8e:	0f 83 0b 03 00 00 	jae	779 <_runtime.(*mheap).sysAlloc+0x48f>
 1008e94:	be 1c 00 00 00 	mov	esi, 28
 1008e99:	48 8d 3d 29 c5 06 00 	lea	rdi, [rip + 443689]
 1008ea0:	48 85 f6 	test	rsi, rsi
 1008ea3:	0f 85 97 05 00 00 	jne	1431 <_runtime.(*mheap).sysAlloc+0x730>
 1008ea9:	49 f7 c0 ff ff ff 03 	test	r8, 67108863
 1008eb0:	0f 85 71 05 00 00 	jne	1393 <_runtime.(*mheap).sysAlloc+0x717>
 1008eb6:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1008ebe:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 1008ec3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008ec7:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1008ecc:	48 8d 0d 85 f7 0e 00 	lea	rcx, [rip + 980869]
 1008ed3:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1008ed8:	e8 c3 80 00 00 	call	32963 <_runtime.sysMap>
 1008edd:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1008ee5:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1008eea:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1008ef2:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1008ef7:	48 89 c2 	mov	rdx, rax
 1008efa:	48 bb 00 00 00 00 00 80 00 00 	movabs	rbx, 140737488355328
 1008f04:	48 01 c3 	add	rbx, rax
 1008f07:	48 c1 eb 1a 	shr	rbx, 26
 1008f0b:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1008f13:	eb 30 	jmp	48 <_runtime.(*mheap).sysAlloc+0x235>
 1008f15:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1008f1a:	48 89 3c f2 	mov	qword ptr [rdx + 8*rsi], rdi
 1008f1e:	4c 8b 84 24 80 00 00 00 	mov	r8, qword ptr [rsp + 128]
 1008f26:	49 87 00 	xchg	qword ptr [r8], rax
 1008f29:	48 ff c7 	inc	rdi
 1008f2c:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 1008f31:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 1008f39:	4c 89 c1 	mov	rcx, r8
 1008f3c:	4c 89 ca 	mov	rdx, r9
 1008f3f:	48 89 de 	mov	rsi, rbx
 1008f42:	48 89 fb 	mov	rbx, rdi
 1008f45:	48 89 d7 	mov	rdi, rdx
 1008f48:	48 01 ca 	add	rdx, rcx
 1008f4b:	49 b8 ff ff ff ff ff 7f 00 00 	movabs	r8, 140737488355327
 1008f55:	4c 01 c2 	add	rdx, r8
 1008f58:	48 c1 ea 1a 	shr	rdx, 26
 1008f5c:	48 39 d3 	cmp	rbx, rdx
 1008f5f:	0f 87 1a 02 00 00 	ja	538 <_runtime.(*mheap).sysAlloc+0x46f>
 1008f65:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1008f6a:	48 8b 96 d0 03 01 00 	mov	rdx, qword ptr [rsi + 66512]
 1008f71:	48 85 d2 	test	rdx, rdx
 1008f74:	0f 84 a5 01 00 00 	je	421 <_runtime.(*mheap).sysAlloc+0x40f>
 1008f7a:	84 02 	test	byte ptr [rdx], al
 1008f7c:	48 81 fb 00 00 40 00 	cmp	rbx, 4194304
 1008f83:	0f 83 5f 04 00 00 	jae	1119 <_runtime.(*mheap).sysAlloc+0x6d8>
 1008f89:	48 8b 04 da 	mov	rax, qword ptr [rdx + 8*rbx]
 1008f8d:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 1008f91:	48 85 c0 	test	rax, rax
 1008f94:	0f 85 5b 04 00 00 	jne	1115 <_runtime.(*mheap).sysAlloc+0x6e5>
 1008f9a:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 1008fa2:	48 8d 86 d8 03 01 00 	lea	rax, [rsi + 66520]
 1008fa9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1008fad:	48 c7 44 24 08 08 08 21 00 	mov	qword ptr [rsp + 8], 2164744
 1008fb6:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 1008fbf:	48 8d 05 f2 f6 0e 00 	lea	rax, [rip + 980722]
 1008fc6:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1008fcb:	e8 40 1b 00 00 	call	6976 <_runtime.(*linearAlloc).alloc>
 1008fd0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1008fd5:	48 85 c0 	test	rax, rax
 1008fd8:	0f 84 0c 01 00 00 	je	268 <_runtime.(*mheap).sysAlloc+0x3da>
 1008fde:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 1008fe6:	48 8b b3 20 04 01 00 	mov	rsi, qword ptr [rbx + 66592]
 1008fed:	48 39 b3 18 04 01 00 	cmp	qword ptr [rbx + 66584], rsi
 1008ff4:	74 37 	je	55 <_runtime.(*mheap).sysAlloc+0x31d>
 1008ff6:	48 8b 93 20 04 01 00 	mov	rdx, qword ptr [rbx + 66592]
 1008ffd:	48 8b b3 18 04 01 00 	mov	rsi, qword ptr [rbx + 66584]
 1009004:	48 8d 4e 01 	lea	rcx, [rsi + 1]
 1009008:	48 39 d1 	cmp	rcx, rdx
 100900b:	0f 87 a0 03 00 00 	ja	928 <_runtime.(*mheap).sysAlloc+0x6a1>
 1009011:	48 89 8b 18 04 01 00 	mov	qword ptr [rbx + 66584], rcx
 1009018:	48 8b 93 10 04 01 00 	mov	rdx, qword ptr [rbx + 66576]
 100901f:	48 39 ce 	cmp	rsi, rcx
 1009022:	0f 82 ed fe ff ff 	jb	-275 <_runtime.(*mheap).sysAlloc+0x205>
 1009028:	e9 7c 03 00 00 	jmp	892 <_runtime.(*mheap).sysAlloc+0x699>
 100902d:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1009032:	48 c1 e6 04 	shl	rsi, 4
 1009036:	48 85 f6 	test	rsi, rsi
 1009039:	0f 85 a3 00 00 00 	jne	163 <_runtime.(*mheap).sysAlloc+0x3d2>
 100903f:	48 8b 0d 52 e8 0e 00 	mov	rcx, qword ptr [rip + 976978]
 1009046:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 100904b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100904f:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1009058:	48 8d 05 59 f6 0e 00 	lea	rax, [rip + 980569]
 100905f:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1009064:	e8 a7 16 00 00 	call	5799 <_runtime.persistentalloc>
 1009069:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100906e:	48 85 c0 	test	rax, rax
 1009071:	0f 84 3f 03 00 00 	je	831 <_runtime.(*mheap).sysAlloc+0x6a6>
 1009077:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 100907f:	48 8b b3 18 04 01 00 	mov	rsi, qword ptr [rbx + 66584]
 1009086:	48 8b bb 10 04 01 00 	mov	rdi, qword ptr [rbx + 66576]
 100908d:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 1009092:	49 c1 e8 03 	shr	r8, 3
 1009096:	4c 89 83 20 04 01 00 	mov	qword ptr [rbx + 66592], r8
 100909d:	48 89 83 10 04 01 00 	mov	qword ptr [rbx + 66576], rax
 10090a4:	4c 8b 83 18 04 01 00 	mov	r8, qword ptr [rbx + 66584]
 10090ab:	49 39 f0 	cmp	r8, rsi
 10090ae:	4c 0f 4f c6 	cmovg	r8, rsi
 10090b2:	48 39 f8 	cmp	rax, rdi
 10090b5:	75 0a 	jne	10 <_runtime.(*mheap).sysAlloc+0x3b1>
 10090b7:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10090bc:	e9 35 ff ff ff 	jmp	-203 <_runtime.(*mheap).sysAlloc+0x2e6>
 10090c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10090c5:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 10090ca:	49 c1 e0 03 	shl	r8, 3
 10090ce:	4c 89 44 24 10 	mov	qword ptr [rsp + 16], r8
 10090d3:	e8 78 aa 04 00 	call	305784 <_runtime.memmove>
 10090d8:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 10090e0:	eb d5 	jmp	-43 <_runtime.(*mheap).sysAlloc+0x3a7>
 10090e2:	48 89 f1 	mov	rcx, rsi
 10090e5:	e9 5c ff ff ff 	jmp	-164 <_runtime.(*mheap).sysAlloc+0x336>
 10090ea:	48 c7 04 24 08 08 21 00 	mov	qword ptr [rsp], 2164744
 10090f2:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 10090fb:	48 8d 05 b6 f5 0e 00 	lea	rax, [rip + 980406]
 1009102:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1009107:	e8 04 16 00 00 	call	5636 <_runtime.persistentalloc>
 100910c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1009111:	48 85 c0 	test	rax, rax
 1009114:	0f 85 c4 fe ff ff 	jne	-316 <_runtime.(*mheap).sysAlloc+0x2ce>
 100911a:	e9 b0 02 00 00 	jmp	688 <_runtime.(*mheap).sysAlloc+0x6bf>
 100911f:	48 c7 04 24 00 00 00 02 	mov	qword ptr [rsp], 33554432
 1009127:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1009130:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1009139:	e8 d2 15 00 00 	call	5586 <_runtime.persistentalloc>
 100913e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1009143:	48 85 c0 	test	rax, rax
 1009146:	0f 84 c2 02 00 00 	je	706 <_runtime.(*mheap).sysAlloc+0x6fe>
 100914c:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1009154:	48 89 c2 	mov	rdx, rax
 1009157:	48 87 86 d0 03 01 00 	xchg	qword ptr [rsi + 66512], rax
 100915e:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1009163:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1009168:	48 8b bc 24 88 00 00 00 	mov	rdi, qword ptr [rsp + 136]
 1009170:	49 b8 ff ff ff ff ff 7f 00 00 	movabs	r8, 140737488355327
 100917a:	e9 fb fd ff ff 	jmp	-517 <_runtime.(*mheap).sysAlloc+0x26a>
 100917f:	48 89 bc 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rdi
 1009187:	48 89 8c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rcx
 100918f:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 1009197:	48 81 c4 a0 00 00 00 	add	rsp, 160
 100919e:	c3 	ret
 100919f:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 10091a9:	49 8d 3c 30 	lea	rdi, [r8 + rsi]
 10091ad:	48 c1 ef 1a 	shr	rdi, 26
 10091b1:	48 81 ff 00 00 40 00 	cmp	rdi, 4194304
 10091b8:	72 15 	jb	21 <_runtime.(*mheap).sysAlloc+0x4bf>
 10091ba:	48 8d 3d 21 cc 06 00 	lea	rdi, [rip + 445473]
 10091c1:	41 b9 21 00 00 00 	mov	r9d, 33
 10091c7:	4c 89 ce 	mov	rsi, r9
 10091ca:	e9 d1 fc ff ff 	jmp	-815 <_runtime.(*mheap).sysAlloc+0x190>
 10091cf:	49 ba ff ff ff ff ff 7f 00 00 	movabs	r10, 140737488355327
 10091d9:	4d 8d 1c 1a 	lea	r11, [r10 + rbx]
 10091dd:	49 c1 eb 1a 	shr	r11, 26
 10091e1:	49 81 fb 00 00 40 00 	cmp	r11, 4194304
 10091e8:	41 b9 00 00 00 00 	mov	r9d, 0
 10091ee:	41 bb 20 00 00 00 	mov	r11d, 32
 10091f4:	4d 0f 43 cb 	cmovae	r9, r11
 10091f8:	bf 00 00 00 00 	mov	edi, 0
 10091fd:	4c 8d 1d 7a c9 06 00 	lea	r11, [rip + 444794]
 1009204:	49 0f 43 fb 	cmovae	rdi, r11
 1009208:	eb bd 	jmp	-67 <_runtime.(*mheap).sysAlloc+0x4b7>
 100920a:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1009212:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1009217:	48 c7 44 24 10 00 00 00 04 	mov	qword ptr [rsp + 16], 67108864
 1009220:	e8 eb 02 00 00 	call	747 <_runtime.sysReserveAligned>
 1009225:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100922a:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100922f:	48 85 c0 	test	rax, rax
 1009232:	0f 84 9e 00 00 00 	je	158 <_runtime.(*mheap).sysAlloc+0x5c6>
 1009238:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1009240:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1009245:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 100924d:	48 8d 88 00 27 01 00 	lea	rcx, [rax + 75520]
 1009254:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 1009259:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100925d:	e8 ee 80 00 00 	call	33006 <_runtime.(*fixalloc).alloc>
 1009262:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1009267:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 100926f:	48 89 08 	mov	qword ptr [rax], rcx
 1009272:	c6 40 08 01 	mov	byte ptr [rax + 8], 1
 1009276:	48 8b 0d 73 c1 0e 00 	mov	rcx, qword ptr [rip + 967027]
 100927d:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1009281:	48 89 05 68 c1 0e 00 	mov	qword ptr [rip + 967016], rax
 1009288:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 100928d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009291:	e8 ba 80 00 00 	call	32954 <_runtime.(*fixalloc).alloc>
 1009296:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100929b:	4c 8b 84 24 88 00 00 00 	mov	r8, qword ptr [rsp + 136]
 10092a3:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 10092a8:	4a 8d 1c 02 	lea	rbx, [rdx + r8]
 10092ac:	48 89 18 	mov	qword ptr [rax], rbx
 10092af:	48 8b 1d 3a c1 0e 00 	mov	rbx, qword ptr [rip + 966970]
 10092b6:	48 89 58 10 	mov	qword ptr [rax + 16], rbx
 10092ba:	48 89 05 2f c1 0e 00 	mov	qword ptr [rip + 966959], rax
 10092c1:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 10092c9:	4c 8b 84 24 88 00 00 00 	mov	r8, qword ptr [rsp + 136]
 10092d1:	e9 ae fb ff ff 	jmp	-1106 <_runtime.(*mheap).sysAlloc+0x174>
 10092d6:	48 c7 84 24 b8 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 184], 0
 10092e2:	48 c7 84 24 c0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 192], 0
 10092ee:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 10092f6:	48 81 c4 a0 00 00 00 	add	rsp, 160
 10092fd:	c3 	ret
 10092fe:	48 be ff ff ff ff ff 7f 00 00 	movabs	rsi, 140737488355327
 1009308:	4c 8d 04 06 	lea	r8, [rsi + rax]
 100930c:	49 c1 e8 1a 	shr	r8, 26
 1009310:	49 81 f8 00 00 40 00 	cmp	r8, 4194304
 1009317:	72 0b 	jb	11 <_runtime.(*mheap).sysAlloc+0x614>
 1009319:	45 31 c0 	xor	r8d, r8d
 100931c:	4c 89 c6 	mov	rsi, r8
 100931f:	e9 f8 fa ff ff 	jmp	-1288 <_runtime.(*mheap).sysAlloc+0x10c>
 1009324:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1009329:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 100932e:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1009332:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1009337:	48 b9 00 00 00 00 02 10 00 00 	movabs	rcx, 17600775979008
 1009341:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1009346:	b9 ff ff ff ff 	mov	ecx, 4294967295
 100934b:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1009350:	e8 db 9b 03 00 	call	236507 <_runtime.mmap>
 1009355:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100935a:	48 83 7c 24 28 00 	cmp	qword ptr [rsp + 40], 0
 1009360:	74 02 	je	2 <_runtime.(*mheap).sysAlloc+0x654>
 1009362:	31 c0 	xor	eax, eax
 1009364:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 100936c:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1009371:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1009379:	48 be ff ff ff ff ff 7f 00 00 	movabs	rsi, 140737488355327
 1009383:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1009388:	49 89 c0 	mov	r8, rax
 100938b:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1009390:	eb 8a 	jmp	-118 <_runtime.(*mheap).sysAlloc+0x60c>
 1009392:	49 89 c0 	mov	r8, rax
 1009395:	48 89 d0 	mov	rax, rdx
 1009398:	31 d2 	xor	edx, edx
 100939a:	e9 dc fa ff ff 	jmp	-1316 <_runtime.(*mheap).sysAlloc+0x16b>
 100939f:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10093a4:	e9 41 fb ff ff 	jmp	-1215 <_runtime.(*mheap).sysAlloc+0x1da>
 10093a9:	48 89 f0 	mov	rax, rsi
 10093ac:	e8 9f 9f 04 00 	call	303007 <_runtime.panicIndex>
 10093b1:	e8 da 9f 04 00 	call	303066 <_runtime.panicSliceAcap>
 10093b6:	48 8d 05 de cc 06 00 	lea	rax, [rip + 445662]
 10093bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10093c1:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 10093ca:	e8 91 f9 01 00 	call	129425 <_runtime.throw>
 10093cf:	48 8d 05 7f d8 06 00 	lea	rax, [rip + 448639]
 10093d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10093da:	48 c7 44 24 08 2c 00 00 00 	mov	qword ptr [rsp + 8], 44
 10093e3:	e8 78 f9 01 00 	call	129400 <_runtime.throw>
 10093e8:	48 89 d8 	mov	rax, rbx
 10093eb:	b9 00 00 40 00 	mov	ecx, 4194304
 10093f0:	e8 6b 9f 04 00 	call	302955 <_runtime.panicIndexU>
 10093f5:	48 8d 05 1d b8 06 00 	lea	rax, [rip + 440349]
 10093fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009400:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 1009409:	e8 52 f9 01 00 	call	129362 <_runtime.throw>
 100940e:	48 8d 05 9a d2 06 00 	lea	rax, [rip + 447130]
 1009415:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009419:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 1009422:	e8 39 f9 01 00 	call	129337 <_runtime.throw>
 1009427:	48 8d 05 7a ca 06 00 	lea	rax, [rip + 445050]
 100942e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009432:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 100943b:	e8 20 f9 01 00 	call	129312 <_runtime.throw>
 1009440:	4c 89 44 24 40 	mov	qword ptr [rsp + 64], r8
 1009445:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 100944a:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 100944f:	48 89 7c 24 70 	mov	qword ptr [rsp + 112], rdi
 1009454:	e8 47 10 02 00 	call	135239 <_runtime.printlock>
 1009459:	48 8d 05 cc ca 06 00 	lea	rax, [rip + 445132]
 1009460:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009464:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 100946d:	e8 6e 19 02 00 	call	137582 <_runtime.printstring>
 1009472:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1009477:	48 89 04 24 	mov	qword ptr [rsp], rax
 100947b:	e8 10 18 02 00 	call	137232 <_runtime.printhex>
 1009480:	48 8d 05 ed 97 06 00 	lea	rax, [rip + 432109]
 1009487:	48 89 04 24 	mov	qword ptr [rsp], rax
 100948b:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1009494:	e8 47 19 02 00 	call	137543 <_runtime.printstring>
 1009499:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100949e:	48 89 04 24 	mov	qword ptr [rsp], rax
 10094a2:	e8 e9 17 02 00 	call	137193 <_runtime.printhex>
 10094a7:	48 8d 05 41 c4 06 00 	lea	rax, [rip + 443457]
 10094ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10094b2:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 10094bb:	e8 20 19 02 00 	call	137504 <_runtime.printstring>
 10094c0:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10094c5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10094c9:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10094ce:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10094d3:	e8 08 19 02 00 	call	137480 <_runtime.printstring>
 10094d8:	e8 53 12 02 00 	call	135763 <_runtime.printnl>
 10094dd:	e8 3e 10 02 00 	call	135230 <_runtime.printunlock>
 10094e2:	48 8d 05 4b d8 06 00 	lea	rax, [rip + 448587]
 10094e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10094ed:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 10094f6:	e8 65 f8 01 00 	call	129125 <_runtime.throw>
 10094fb:	90 	nop
 10094fc:	e8 cf 76 04 00 	call	292559 <_runtime.morestack_noctxt>
 1009501:	e9 0a f8 ff ff 	jmp	-2038 <_runtime.(*mheap).sysAlloc>
 1009506:	cc 	int3
 1009507:	cc 	int3
 1009508:	cc 	int3
 1009509:	cc 	int3
 100950a:	cc 	int3
 100950b:	cc 	int3
 100950c:	cc 	int3
 100950d:	cc 	int3
 100950e:	cc 	int3
 100950f:	cc 	int3

_runtime.sysReserveAligned:
 1009510:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1009519:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100951d:	0f 86 44 01 00 00 	jbe	324 <_runtime.sysReserveAligned+0x157>
 1009523:	48 83 ec 50 	sub	rsp, 80
 1009527:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 100952c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1009531:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1009536:	48 89 04 24 	mov	qword ptr [rsp], rax
 100953a:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100953f:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1009544:	48 8d 14 01 	lea	rdx, [rcx + rax]
 1009548:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 100954d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1009552:	48 bb 00 00 00 00 02 10 00 00 	movabs	rbx, 17600775979008
 100955c:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1009561:	bb ff ff ff ff 	mov	ebx, 4294967295
 1009566:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 100956b:	e8 c0 99 03 00 	call	235968 <_runtime.mmap>
 1009570:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1009575:	48 83 7c 24 28 00 	cmp	qword ptr [rsp + 40], 0
 100957b:	b9 00 00 00 00 	mov	ecx, 0
 1009580:	48 0f 45 c1 	cmovne	rax, rcx
 1009584:	48 89 c1 	mov	rcx, rax
 1009587:	48 85 c0 	test	rax, rax
 100958a:	0f 84 bb 00 00 00 	je	187 <_runtime.sysReserveAligned+0x13b>
 1009590:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 1009595:	48 8d 5a ff 	lea	rbx, [rdx - 1]
 1009599:	48 85 d8 	test	rax, rbx
 100959c:	0f 84 90 00 00 00 	je	144 <_runtime.sysReserveAligned+0x122>
 10095a2:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10095a7:	90 	nop
 10095a8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10095ac:	48 8d 0c 10 	lea	rcx, [rax + rdx]
 10095b0:	48 8d 49 ff 	lea	rcx, [rcx - 1]
 10095b4:	48 f7 da 	neg	rdx
 10095b7:	48 21 ca 	and	rdx, rcx
 10095ba:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 10095bf:	48 29 c2 	sub	rdx, rax
 10095c2:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10095c7:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10095d0:	e8 7b 79 00 00 	call	31099 <_runtime.sysFree>
 10095d5:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10095da:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10095df:	48 8d 14 01 	lea	rdx, [rcx + rax]
 10095e3:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10095e8:	48 01 c3 	add	rbx, rax
 10095eb:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 10095f0:	48 01 f3 	add	rbx, rsi
 10095f3:	48 29 d3 	sub	rbx, rdx
 10095f6:	48 85 db 	test	rbx, rbx
 10095f9:	77 14 	ja	20 <_runtime.sysReserveAligned+0xff>
 10095fb:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1009600:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1009605:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100960a:	48 83 c4 50 	add	rsp, 80
 100960e:	c3 	ret
 100960f:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1009613:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1009618:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1009621:	e8 2a 79 00 00 	call	31018 <_runtime.sysFree>
 1009626:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100962b:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1009630:	eb c9 	jmp	-55 <_runtime.sysReserveAligned+0xeb>
 1009632:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1009637:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100963c:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1009641:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1009646:	48 83 c4 50 	add	rsp, 80
 100964a:	c3 	ret
 100964b:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 1009654:	48 c7 44 24 78 00 00 00 00 	mov	qword ptr [rsp + 120], 0
 100965d:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1009662:	48 83 c4 50 	add	rsp, 80
 1009666:	c3 	ret
 1009667:	e8 64 75 04 00 	call	292196 <_runtime.morestack_noctxt>
 100966c:	e9 9f fe ff ff 	jmp	-353 <_runtime.sysReserveAligned>
 1009671:	cc 	int3
 1009672:	cc 	int3
 1009673:	cc 	int3
 1009674:	cc 	int3
 1009675:	cc 	int3
 1009676:	cc 	int3
 1009677:	cc 	int3
 1009678:	cc 	int3
 1009679:	cc 	int3
 100967a:	cc 	int3
 100967b:	cc 	int3
 100967c:	cc 	int3
 100967d:	cc 	int3
 100967e:	cc 	int3
 100967f:	cc 	int3

_runtime.(*mcache).nextFree:
 1009680:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1009689:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100968d:	0f 86 0f 02 00 00 	jbe	527 <_runtime.(*mcache).nextFree+0x222>
 1009693:	48 83 ec 30 	sub	rsp, 48
 1009697:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100969c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10096a1:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10096a6:	84 02 	test	byte ptr [rdx], al
 10096a8:	0f b6 44 24 40 	movzx	eax, byte ptr [rsp + 64]
 10096ad:	48 3d 86 00 00 00 	cmp	rax, 134
 10096b3:	0f 83 de 01 00 00 	jae	478 <_runtime.(*mcache).nextFree+0x217>
 10096b9:	48 8b 4c c2 28 	mov	rcx, qword ptr [rdx + 8*rax + 40]
 10096be:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10096c3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10096c7:	e8 94 3d 00 00 	call	15764 <_runtime.(*mspan).nextFreeIndex>
 10096cc:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10096d1:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10096d6:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 10096da:	48 39 d0 	cmp	rax, rdx
 10096dd:	0f 85 94 00 00 00 	jne	148 <_runtime.(*mcache).nextFree+0xf7>
 10096e3:	0f b7 41 60 	movzx	eax, word ptr [rcx + 96]
 10096e7:	48 39 d0 	cmp	rax, rdx
 10096ea:	0f 85 27 01 00 00 	jne	295 <_runtime.(*mcache).nextFree+0x197>
 10096f0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10096f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10096f9:	0f b6 4c 24 40 	movzx	ecx, byte ptr [rsp + 64]
 10096fe:	88 4c 24 08 	mov	byte ptr [rsp + 8], cl
 1009702:	e8 39 6c 00 00 	call	27705 <_runtime.(*mcache).refill>
 1009707:	0f b6 44 24 40 	movzx	eax, byte ptr [rsp + 64]
 100970c:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1009711:	48 8b 44 c1 28 	mov	rax, qword ptr [rcx + 8*rax + 40]
 1009716:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100971b:	48 89 04 24 	mov	qword ptr [rsp], rax
 100971f:	e8 3c 3d 00 00 	call	15676 <_runtime.(*mspan).nextFreeIndex>
 1009724:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1009729:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100972e:	ba 01 00 00 00 	mov	edx, 1
 1009733:	48 39 41 38 	cmp	qword ptr [rcx + 56], rax
 1009737:	0f 86 c1 00 00 00 	jbe	193 <_runtime.(*mcache).nextFree+0x17e>
 100973d:	48 8b 59 68 	mov	rbx, qword ptr [rcx + 104]
 1009741:	48 0f af c3 	imul	rax, rbx
 1009745:	48 03 41 18 	add	rax, qword ptr [rcx + 24]
 1009749:	0f b7 59 60 	movzx	ebx, word ptr [rcx + 96]
 100974d:	ff c3 	inc	ebx
 100974f:	66 89 59 60 	mov	word ptr [rcx + 96], bx
 1009753:	0f b7 f3 	movzx	esi, bx
 1009756:	48 8b 79 38 	mov	rdi, qword ptr [rcx + 56]
 100975a:	48 39 fe 	cmp	rsi, rdi
 100975d:	77 1c 	ja	28 <_runtime.(*mcache).nextFree+0xfb>
 100975f:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1009764:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1009769:	88 54 24 58 	mov	byte ptr [rsp + 88], dl
 100976d:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1009772:	48 83 c4 30 	add	rsp, 48
 1009776:	c3 	ret
 1009777:	31 d2 	xor	edx, edx
 1009779:	eb b8 	jmp	-72 <_runtime.(*mcache).nextFree+0xb3>
 100977b:	66 89 5c 24 16 	mov	word ptr [rsp + 22], bx
 1009780:	48 89 7c 24 18 	mov	qword ptr [rsp + 24], rdi
 1009785:	e8 16 0d 02 00 	call	134422 <_runtime.printlock>
 100978a:	48 8d 05 31 a1 06 00 	lea	rax, [rip + 434481]
 1009791:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009795:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 100979e:	e8 3d 16 02 00 	call	136765 <_runtime.printstring>
 10097a3:	0f b7 44 24 16 	movzx	eax, word ptr [rsp + 22]
 10097a8:	0f b7 c0 	movzx	eax, ax
 10097ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10097af:	e8 6c 13 02 00 	call	136044 <_runtime.printuint>
 10097b4:	48 8d 05 b3 9b 06 00 	lea	rax, [rip + 433075]
 10097bb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10097bf:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 10097c8:	e8 13 16 02 00 	call	136723 <_runtime.printstring>
 10097cd:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10097d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10097d6:	e8 45 13 02 00 	call	136005 <_runtime.printuint>
 10097db:	e8 50 0f 02 00 	call	134992 <_runtime.printnl>
 10097e0:	e8 3b 0d 02 00 	call	134459 <_runtime.printunlock>
 10097e5:	48 8d 05 91 b1 06 00 	lea	rax, [rip + 438673]
 10097ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10097f0:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 10097f9:	e8 62 f5 01 00 	call	128354 <_runtime.throw>
 10097fe:	48 8d 05 83 ad 06 00 	lea	rax, [rip + 437635]
 1009805:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009809:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1009812:	e8 49 f5 01 00 	call	128329 <_runtime.throw>
 1009817:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 100981c:	66 89 44 24 16 	mov	word ptr [rsp + 22], ax
 1009821:	e8 7a 0c 02 00 	call	134266 <_runtime.printlock>
 1009826:	48 8d 05 39 b1 06 00 	lea	rax, [rip + 438585]
 100982d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009831:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 100983a:	e8 a1 15 02 00 	call	136609 <_runtime.printstring>
 100983f:	0f b7 44 24 16 	movzx	eax, word ptr [rsp + 22]
 1009844:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009848:	e8 d3 12 02 00 	call	135891 <_runtime.printuint>
 100984d:	48 8d 05 1a 9b 06 00 	lea	rax, [rip + 432922]
 1009854:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009858:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1009861:	e8 7a 15 02 00 	call	136570 <_runtime.printstring>
 1009866:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100986b:	48 89 04 24 	mov	qword ptr [rsp], rax
 100986f:	e8 ac 12 02 00 	call	135852 <_runtime.printuint>
 1009874:	e8 b7 0e 02 00 	call	134839 <_runtime.printnl>
 1009879:	e8 a2 0c 02 00 	call	134306 <_runtime.printunlock>
 100987e:	48 8d 05 2b d8 06 00 	lea	rax, [rip + 448555]
 1009885:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009889:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 1009892:	e8 c9 f4 01 00 	call	128201 <_runtime.throw>
 1009897:	b9 86 00 00 00 	mov	ecx, 134
 100989c:	e8 af 9a 04 00 	call	301743 <_runtime.panicIndex>
 10098a1:	90 	nop
 10098a2:	e8 29 73 04 00 	call	291625 <_runtime.morestack_noctxt>
 10098a7:	e9 d4 fd ff ff 	jmp	-556 <_runtime.(*mcache).nextFree>
 10098ac:	cc 	int3
 10098ad:	cc 	int3
 10098ae:	cc 	int3
 10098af:	cc 	int3

_runtime.mallocgc:
 10098b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10098b9:	48 8d 44 24 e8 	lea	rax, [rsp - 24]
 10098be:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10098c2:	0f 86 9e 09 00 00 	jbe	2462 <_runtime.mallocgc+0x9b6>
 10098c8:	48 81 ec 98 00 00 00 	sub	rsp, 152
 10098cf:	48 89 ac 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbp
 10098d7:	48 8d ac 24 90 00 00 00 	lea	rbp, [rsp + 144]
 10098df:	83 3d b6 de 0e 00 02 	cmp	dword ptr [rip + 974518], 2
 10098e6:	0f 84 60 09 00 00 	je	2400 <_runtime.mallocgc+0x99c>
 10098ec:	48 8b 94 24 a0 00 00 00 	mov	rdx, qword ptr [rsp + 160]
 10098f4:	48 85 d2 	test	rdx, rdx
 10098f7:	0f 84 d3 08 00 00 	je	2259 <_runtime.mallocgc+0x920>
 10098fd:	83 3d 68 e1 0e 00 00 	cmp	dword ptr [rip + 975208], 0
 1009904:	0f 84 80 00 00 00 	je	128 <_runtime.mallocgc+0xda>
 100990a:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1009912:	48 85 c0 	test	rax, rax
 1009915:	74 6c 	je	108 <_runtime.mallocgc+0xd3>
 1009917:	48 f7 c2 07 00 00 00 	test	rdx, 7
 100991e:	75 3c 	jne	60 <_runtime.mallocgc+0xac>
 1009920:	b8 08 00 00 00 	mov	eax, 8
 1009925:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1009929:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100992e:	48 8d 05 8b ed 0e 00 	lea	rax, [rip + 978315]
 1009935:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100993a:	e8 d1 0d 00 00 	call	3537 <_runtime.persistentalloc>
 100993f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1009944:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 100994c:	48 8b ac 24 90 00 00 00 	mov	rbp, qword ptr [rsp + 144]
 1009954:	48 81 c4 98 00 00 00 	add	rsp, 152
 100995b:	c3 	ret
 100995c:	48 f7 c2 03 00 00 00 	test	rdx, 3
 1009963:	75 07 	jne	7 <_runtime.mallocgc+0xbc>
 1009965:	b8 04 00 00 00 	mov	eax, 4
 100996a:	eb b9 	jmp	-71 <_runtime.mallocgc+0x75>
 100996c:	48 f7 c2 01 00 00 00 	test	rdx, 1
 1009973:	b8 01 00 00 00 	mov	eax, 1
 1009978:	b9 02 00 00 00 	mov	ecx, 2
 100997d:	48 0f 44 c1 	cmove	rax, rcx
 1009981:	eb a2 	jmp	-94 <_runtime.mallocgc+0x75>
 1009983:	b8 10 00 00 00 	mov	eax, 16
 1009988:	eb 9b 	jmp	-101 <_runtime.mallocgc+0x75>
 100998a:	83 3d ff dd 0e 00 00 	cmp	dword ptr [rip + 974335], 0
 1009991:	0f 84 32 08 00 00 	je	2098 <_runtime.mallocgc+0x919>
 1009997:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 10099a0:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 10099a4:	48 8b b6 c0 00 00 00 	mov	rsi, qword ptr [rsi + 192]
 10099ab:	48 85 f6 	test	rsi, rsi
 10099ae:	0f 84 0d 08 00 00 	je	2061 <_runtime.mallocgc+0x911>
 10099b4:	48 8b 9e 70 01 00 00 	mov	rbx, qword ptr [rsi + 368]
 10099bb:	48 29 d3 	sub	rbx, rdx
 10099be:	48 89 9e 70 01 00 00 	mov	qword ptr [rsi + 368], rbx
 10099c5:	48 85 db 	test	rbx, rbx
 10099c8:	0f 8c db 07 00 00 	jl	2011 <_runtime.mallocgc+0x8f9>
 10099ce:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 10099d7:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 10099db:	90 	nop
 10099dc:	ff 83 08 01 00 00 	inc	dword ptr [rbx + 264]
 10099e2:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 10099e6:	84 02 	test	byte ptr [rdx], al
 10099e8:	83 bb f0 00 00 00 00 	cmp	dword ptr [rbx + 240], 0
 10099ef:	0f 85 3e 08 00 00 	jne	2110 <_runtime.mallocgc+0x983>
 10099f5:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 10099fe:	48 39 53 50 	cmp	qword ptr [rbx + 80], rdx
 1009a02:	0f 84 12 08 00 00 	je	2066 <_runtime.mallocgc+0x96a>
 1009a08:	c7 83 f0 00 00 00 01 00 00 00 	mov	dword ptr [rbx + 240], 1
 1009a12:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1009a1b:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 1009a1f:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 1009a27:	90 	nop
 1009a28:	48 8b 92 60 01 00 00 	mov	rdx, qword ptr [rdx + 352]
 1009a2f:	4c 8b 84 24 a8 00 00 00 	mov	r8, qword ptr [rsp + 168]
 1009a37:	4d 85 c0 	test	r8, r8
 1009a3a:	0f 84 5e 07 00 00 	je	1886 <_runtime.mallocgc+0x8ee>
 1009a40:	49 83 78 08 00 	cmp	qword ptr [r8 + 8], 0
 1009a45:	41 0f 94 c1 	sete	r9b
 1009a49:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1009a4e:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1009a53:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 1009a58:	44 88 4c 24 2f 	mov	byte ptr [rsp + 47], r9b
 1009a5d:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 1009a62:	48 81 ff 00 80 00 00 	cmp	rdi, 32768
 1009a69:	0f 87 72 06 00 00 	ja	1650 <_runtime.mallocgc+0x831>
 1009a6f:	45 84 c9 	test	r9b, r9b
 1009a72:	0f 84 84 04 00 00 	je	1156 <_runtime.mallocgc+0x64c>
 1009a78:	48 83 ff 10 	cmp	rdi, 16
 1009a7c:	0f 83 7a 04 00 00 	jae	1146 <_runtime.mallocgc+0x64c>
 1009a82:	48 8b 42 18 	mov	rax, qword ptr [rdx + 24]
 1009a86:	48 f7 c7 07 00 00 00 	test	rdi, 7
 1009a8d:	0f 85 3d 04 00 00 	jne	1085 <_runtime.mallocgc+0x620>
 1009a93:	90 	nop
 1009a94:	48 83 c0 07 	add	rax, 7
 1009a98:	48 83 e0 f8 	and	rax, -8
 1009a9c:	4c 8d 14 38 	lea	r10, [rax + rdi]
 1009aa0:	49 83 fa 10 	cmp	r10, 16
 1009aa4:	77 65 	ja	101 <_runtime.mallocgc+0x25b>
 1009aa6:	4c 8b 5a 10 	mov	r11, qword ptr [rdx + 16]
 1009aaa:	4d 85 db 	test	r11, r11
 1009aad:	74 5c 	je	92 <_runtime.mallocgc+0x25b>
 1009aaf:	4c 01 d8 	add	rax, r11
 1009ab2:	4c 89 52 18 	mov	qword ptr [rdx + 24], r10
 1009ab6:	48 ff 42 20 	inc	qword ptr [rdx + 32]
 1009aba:	c7 83 f0 00 00 00 00 00 00 00 	mov	dword ptr [rbx + 240], 0
 1009ac4:	90 	nop
 1009ac5:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1009ace:	8b 93 08 01 00 00 	mov	edx, dword ptr [rbx + 264]
 1009ad4:	8d 72 ff 	lea	esi, [rdx - 1]
 1009ad7:	89 b3 08 01 00 00 	mov	dword ptr [rbx + 264], esi
 1009add:	83 fa 01 	cmp	edx, 1
 1009ae0:	75 11 	jne	17 <_runtime.mallocgc+0x243>
 1009ae2:	80 b9 b1 00 00 00 00 	cmp	byte ptr [rcx + 177], 0
 1009ae9:	74 08 	je	8 <_runtime.mallocgc+0x243>
 1009aeb:	48 c7 41 10 de fa ff ff 	mov	qword ptr [rcx + 16], -1314
 1009af3:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1009afb:	48 8b ac 24 90 00 00 00 	mov	rbp, qword ptr [rsp + 144]
 1009b03:	48 81 c4 98 00 00 00 	add	rsp, 152
 1009b0a:	c3 	ret
 1009b0b:	48 8b 42 50 	mov	rax, qword ptr [rdx + 80]
 1009b0f:	4c 8b 50 40 	mov	r10, qword ptr [rax + 64]
 1009b13:	4d 0f bc da 	bsf	r11, r10
 1009b17:	41 bc 40 00 00 00 	mov	r12d, 64
 1009b1d:	4d 0f 44 dc 	cmove	r11, r12
 1009b21:	49 83 fb 40 	cmp	r11, 64
 1009b25:	0f 8d 9e 03 00 00 	jge	926 <_runtime.mallocgc+0x619>
 1009b2b:	4c 8b 60 30 	mov	r12, qword ptr [rax + 48]
 1009b2f:	4f 8d 2c 1c 	lea	r13, [r12 + r11]
 1009b33:	4c 8b 70 38 	mov	r14, qword ptr [rax + 56]
 1009b37:	4d 39 f5 	cmp	r13, r14
 1009b3a:	0f 83 89 03 00 00 	jae	905 <_runtime.mallocgc+0x619>
 1009b40:	4f 8d 24 1c 	lea	r12, [r12 + r11]
 1009b44:	4d 8d 64 24 01 	lea	r12, [r12 + 1]
 1009b49:	49 f7 c4 3f 00 00 00 	test	r12, 63
 1009b50:	0f 85 39 03 00 00 	jne	825 <_runtime.mallocgc+0x5df>
 1009b56:	4d 39 f4 	cmp	r12, r14
 1009b59:	0f 84 30 03 00 00 	je	816 <_runtime.mallocgc+0x5df>
 1009b5f:	31 c0 	xor	eax, eax
 1009b61:	48 85 c0 	test	rax, rax
 1009b64:	0f 84 e6 02 00 00 	je	742 <_runtime.mallocgc+0x5a0>
 1009b6a:	31 c9 	xor	ecx, ecx
 1009b6c:	0f 57 c0 	xorps	xmm0, xmm0
 1009b6f:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 1009b72:	4c 8b 52 18 	mov	r10, qword ptr [rdx + 24]
 1009b76:	4c 39 94 24 a0 00 00 00 	cmp	qword ptr [rsp + 160], r10
 1009b7e:	0f 83 b9 02 00 00 	jae	697 <_runtime.mallocgc+0x58d>
 1009b84:	49 89 c2 	mov	r10, rax
 1009b87:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 1009b8b:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1009b93:	48 89 42 18 	mov	qword ptr [rdx + 24], rax
 1009b97:	48 c7 84 24 a0 00 00 00 10 00 00 00 	mov	qword ptr [rsp + 160], 16
 1009ba3:	4c 89 54 24 40 	mov	qword ptr [rsp + 64], r10
 1009ba8:	88 4c 24 2e 	mov	byte ptr [rsp + 46], cl
 1009bac:	45 84 c9 	test	r9b, r9b
 1009baf:	0f 84 04 02 00 00 	je	516 <_runtime.mallocgc+0x509>
 1009bb5:	31 c0 	xor	eax, eax
 1009bb7:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1009bbc:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1009bc1:	e8 1a 86 04 00 	call	296474 <_runtime.publicationBarrier>
 1009bc6:	83 3d cf db 0e 00 00 	cmp	dword ptr [rip + 973775], 0
 1009bcd:	0f 85 bc 01 00 00 	jne	444 <_runtime.mallocgc+0x4df>
 1009bd3:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1009bd8:	c7 80 f0 00 00 00 00 00 00 00 	mov	dword ptr [rax + 240], 0
 1009be2:	90 	nop
 1009be3:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1009bec:	8b 90 08 01 00 00 	mov	edx, dword ptr [rax + 264]
 1009bf2:	8d 5a ff 	lea	ebx, [rdx - 1]
 1009bf5:	89 98 08 01 00 00 	mov	dword ptr [rax + 264], ebx
 1009bfb:	83 fa 01 	cmp	edx, 1
 1009bfe:	75 11 	jne	17 <_runtime.mallocgc+0x361>
 1009c00:	80 b9 b1 00 00 00 00 	cmp	byte ptr [rcx + 177], 0
 1009c07:	74 08 	je	8 <_runtime.mallocgc+0x361>
 1009c09:	48 c7 41 10 de fa ff ff 	mov	qword ptr [rcx + 16], -1314
 1009c11:	83 3d 28 de 0e 00 00 	cmp	dword ptr [rip + 974376], 0
 1009c18:	0f 85 44 01 00 00 	jne	324 <_runtime.mallocgc+0x4b2>
 1009c1e:	48 8b 05 63 15 0c 00 	mov	rax, qword ptr [rip + 791907]
 1009c25:	48 85 c0 	test	rax, rax
 1009c28:	7e 29 	jle	41 <_runtime.mallocgc+0x3a3>
 1009c2a:	48 83 f8 01 	cmp	rax, 1
 1009c2e:	0f 84 b0 00 00 00 	je	176 <_runtime.mallocgc+0x434>
 1009c34:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1009c3c:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1009c41:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1009c44:	48 39 d0 	cmp	rax, rdx
 1009c47:	0f 83 97 00 00 00 	jae	151 <_runtime.mallocgc+0x434>
 1009c4d:	48 29 c2 	sub	rdx, rax
 1009c50:	48 89 11 	mov	qword ptr [rcx], rdx
 1009c53:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1009c58:	48 85 c0 	test	rax, rax
 1009c5b:	74 17 	je	23 <_runtime.mallocgc+0x3c4>
 1009c5d:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 1009c65:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1009c6a:	48 29 d1 	sub	rcx, rdx
 1009c6d:	48 29 88 70 01 00 00 	sub	qword ptr [rax + 368], rcx
 1009c74:	0f b6 44 24 2e 	movzx	eax, byte ptr [rsp + 46]
 1009c79:	84 c0 	test	al, al
 1009c7b:	74 18 	je	24 <_runtime.mallocgc+0x3e5>
 1009c7d:	80 3d 6c fa 0e 00 00 	cmp	byte ptr [rip + 981612], 0
 1009c84:	74 09 	je	9 <_runtime.mallocgc+0x3df>
 1009c86:	83 3d 2b db 0e 00 00 	cmp	dword ptr [rip + 973611], 0
 1009c8d:	74 39 	je	57 <_runtime.mallocgc+0x418>
 1009c8f:	31 c0 	xor	eax, eax
 1009c91:	84 c0 	test	al, al
 1009c93:	75 1d 	jne	29 <_runtime.mallocgc+0x402>
 1009c95:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1009c9a:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1009ca2:	48 8b ac 24 90 00 00 00 	mov	rbp, qword ptr [rsp + 144]
 1009caa:	48 81 c4 98 00 00 00 	add	rsp, 152
 1009cb1:	c3 	ret
 1009cb2:	0f 57 c0 	xorps	xmm0, xmm0
 1009cb5:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 1009cb9:	c7 44 24 10 00 00 00 00 	mov	dword ptr [rsp + 16], 0
 1009cc1:	e8 2a 8d 00 00 	call	36138 <_runtime.gcStart>
 1009cc6:	eb cd 	jmp	-51 <_runtime.mallocgc+0x3e5>
 1009cc8:	83 3d cd da 0e 00 00 	cmp	dword ptr [rip + 973517], 0
 1009ccf:	75 be 	jne	-66 <_runtime.mallocgc+0x3df>
 1009cd1:	48 8b 0d 90 00 0f 00 	mov	rcx, qword ptr [rip + 983184]
 1009cd8:	48 39 0d 91 00 0f 00 	cmp	qword ptr [rip + 983185], rcx
 1009cdf:	0f 93 c0 	setae	al
 1009ce2:	eb ad 	jmp	-83 <_runtime.mallocgc+0x3e1>
 1009ce4:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1009ced:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1009cf1:	90 	nop
 1009cf2:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1009cf8:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1009cfc:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1009d01:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009d05:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1009d0a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1009d0f:	48 8b 94 24 a0 00 00 00 	mov	rdx, qword ptr [rsp + 160]
 1009d17:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1009d1c:	e8 0f 08 00 00 	call	2063 <_runtime.profilealloc>
 1009d21:	90 	nop
 1009d22:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1009d2b:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1009d30:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 1009d36:	8d 5a ff 	lea	ebx, [rdx - 1]
 1009d39:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 1009d3f:	83 fa 01 	cmp	edx, 1
 1009d42:	0f 85 0b ff ff ff 	jne	-245 <_runtime.mallocgc+0x3a3>
 1009d48:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1009d4f:	0f 84 fe fe ff ff 	je	-258 <_runtime.mallocgc+0x3a3>
 1009d55:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1009d5d:	e9 f1 fe ff ff 	jmp	-271 <_runtime.mallocgc+0x3a3>
 1009d62:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1009d67:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009d6b:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 1009d73:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1009d78:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 1009d80:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1009d85:	e8 26 a6 01 00 	call	108070 <_runtime.tracealloc>
 1009d8a:	e9 8f fe ff ff 	jmp	-369 <_runtime.mallocgc+0x36e>
 1009d8f:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1009d94:	48 89 04 24 	mov	qword ptr [rsp], rax
 1009d98:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1009da0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1009da5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1009daa:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1009daf:	e8 ec e9 00 00 	call	59884 <_runtime.gcmarknewobject>
 1009db4:	e9 1a fe ff ff 	jmp	-486 <_runtime.mallocgc+0x323>
 1009db9:	4c 39 05 70 44 0c 00 	cmp	qword ptr [rip + 803952], r8
 1009dc0:	4c 89 14 24 	mov	qword ptr [rsp], r10
 1009dc4:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 1009dcc:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1009dd1:	b9 48 00 00 00 	mov	ecx, 72
 1009dd6:	48 0f 44 f9 	cmove	rdi, rcx
 1009dda:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1009ddf:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 1009de4:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 1009de9:	e8 22 4e 00 00 	call	20002 <_runtime.heapBitsSetType>
 1009dee:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1009df6:	48 8b 08 	mov	rcx, qword ptr [rax]
 1009df9:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1009dfe:	48 39 ca 	cmp	rdx, rcx
 1009e01:	76 2e 	jbe	46 <_runtime.mallocgc+0x581>
 1009e03:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 1009e07:	48 89 d6 	mov	rsi, rdx
 1009e0a:	48 29 ca 	sub	rdx, rcx
 1009e0d:	48 8d 0c 1a 	lea	rcx, [rdx + rbx]
 1009e11:	48 85 db 	test	rbx, rbx
 1009e14:	ba 00 00 00 00 	mov	edx, 0
 1009e19:	48 0f 45 d1 	cmovne	rdx, rcx
 1009e1d:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1009e22:	48 01 51 08 	add	qword ptr [rcx + 8], rdx
 1009e26:	48 89 d0 	mov	rax, rdx
 1009e29:	48 89 f7 	mov	rdi, rsi
 1009e2c:	e9 86 fd ff ff 	jmp	-634 <_runtime.mallocgc+0x307>
 1009e31:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1009e35:	48 89 d6 	mov	rsi, rdx
 1009e38:	48 89 ca 	mov	rdx, rcx
 1009e3b:	eb e0 	jmp	-32 <_runtime.mallocgc+0x56d>
 1009e3d:	48 83 7a 10 00 	cmp	qword ptr [rdx + 16], 0
 1009e42:	0f 84 3c fd ff ff 	je	-708 <_runtime.mallocgc+0x2d4>
 1009e48:	49 89 c2 	mov	r10, rax
 1009e4b:	e9 47 fd ff ff 	jmp	-697 <_runtime.mallocgc+0x2e7>
 1009e50:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1009e54:	c6 44 24 08 05 	mov	byte ptr [rsp + 8], 5
 1009e59:	e8 22 f8 ff ff 	call	-2014 <_runtime.(*mcache).nextFree>
 1009e5e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1009e63:	0f b6 4c 24 20 	movzx	ecx, byte ptr [rsp + 32]
 1009e68:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1009e6d:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1009e72:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 1009e77:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1009e7c:	4c 8b 84 24 a8 00 00 00 	mov	r8, qword ptr [rsp + 168]
 1009e84:	44 0f b6 4c 24 2f 	movzx	r9d, byte ptr [rsp + 47]
 1009e8a:	e9 dd fc ff ff 	jmp	-803 <_runtime.mallocgc+0x2bc>
 1009e8f:	49 8d 4b 01 	lea	rcx, [r11 + 1]
 1009e93:	48 83 f9 40 	cmp	rcx, 64
 1009e97:	4d 19 db 	sbb	r11, r11
 1009e9a:	49 d3 ea 	shr	r10, cl
 1009e9d:	4d 21 da 	and	r10, r11
 1009ea0:	4c 89 50 40 	mov	qword ptr [rax + 64], r10
 1009ea4:	4c 89 60 30 	mov	qword ptr [rax + 48], r12
 1009ea8:	44 0f b7 50 60 	movzx	r10d, word ptr [rax + 96]
 1009ead:	41 ff c2 	inc	r10d
 1009eb0:	66 44 89 50 60 	mov	word ptr [rax + 96], r10w
 1009eb5:	4c 8b 50 68 	mov	r10, qword ptr [rax + 104]
 1009eb9:	4d 0f af d5 	imul	r10, r13
 1009ebd:	4c 03 50 18 	add	r10, qword ptr [rax + 24]
 1009ec1:	4c 89 d0 	mov	rax, r10
 1009ec4:	e9 98 fc ff ff 	jmp	-872 <_runtime.mallocgc+0x2b1>
 1009ec9:	31 c0 	xor	eax, eax
 1009ecb:	e9 91 fc ff ff 	jmp	-879 <_runtime.mallocgc+0x2b1>
 1009ed0:	48 f7 c7 03 00 00 00 	test	rdi, 3
 1009ed7:	75 0d 	jne	13 <_runtime.mallocgc+0x636>
 1009ed9:	48 83 c0 03 	add	rax, 3
 1009edd:	48 83 e0 fc 	and	rax, -4
 1009ee1:	e9 b6 fb ff ff 	jmp	-1098 <_runtime.mallocgc+0x1ec>
 1009ee6:	0f ba e7 00 	bt	edi, 0
 1009eea:	0f 82 ac fb ff ff 	jb	-1108 <_runtime.mallocgc+0x1ec>
 1009ef0:	48 ff c0 	inc	rax
 1009ef3:	48 83 e0 fe 	and	rax, -2
 1009ef7:	e9 a0 fb ff ff 	jmp	-1120 <_runtime.mallocgc+0x1ec>
 1009efc:	48 81 ff f8 03 00 00 	cmp	rdi, 1016
 1009f03:	0f 87 b0 01 00 00 	ja	432 <_runtime.mallocgc+0x809>
 1009f09:	48 8d 47 07 	lea	rax, [rdi + 7]
 1009f0d:	48 c1 e8 03 	shr	rax, 3
 1009f11:	48 3d 81 00 00 00 	cmp	rax, 129
 1009f17:	0f 83 f3 02 00 00 	jae	755 <_runtime.mallocgc+0x960>
 1009f1d:	4c 8d 15 3c 15 0c 00 	lea	r10, [rip + 791868]
 1009f24:	46 0f b6 14 10 	movzx	r10d, byte ptr [rax + r10]
 1009f29:	49 83 fa 43 	cmp	r10, 67
 1009f2d:	0f 83 c6 02 00 00 	jae	710 <_runtime.mallocgc+0x949>
 1009f33:	4c 8d 1d c6 15 0c 00 	lea	r11, [rip + 792006]
 1009f3a:	47 0f b7 1c 53 	movzx	r11d, word ptr [r11 + 2*r10]
 1009f3f:	4c 89 9c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], r11
 1009f47:	84 02 	test	byte ptr [rdx], al
 1009f49:	90 	nop
 1009f4a:	41 d1 e2 	shl	r10d
 1009f4d:	45 0f b6 d9 	movzx	r11d, r9b
 1009f51:	45 09 da 	or	r10d, r11d
 1009f54:	41 0f b6 c2 	movzx	eax, r10b
 1009f58:	48 3d 86 00 00 00 	cmp	rax, 134
 1009f5e:	0f 83 8b 02 00 00 	jae	651 <_runtime.mallocgc+0x93f>
 1009f64:	48 8b 44 c2 28 	mov	rax, qword ptr [rdx + 8*rax + 40]
 1009f69:	4c 8b 58 40 	mov	r11, qword ptr [rax + 64]
 1009f6d:	4d 0f bc e3 	bsf	r12, r11
 1009f71:	41 bd 40 00 00 00 	mov	r13d, 64
 1009f77:	4d 0f 44 e5 	cmove	r12, r13
 1009f7b:	49 83 fc 40 	cmp	r12, 64
 1009f7f:	0f 8d 2d 01 00 00 	jge	301 <_runtime.mallocgc+0x802>
 1009f85:	4c 8b 68 30 	mov	r13, qword ptr [rax + 48]
 1009f89:	4f 8d 74 25 00 	lea	r14, [r13 + r12]
 1009f8e:	4c 8b 78 38 	mov	r15, qword ptr [rax + 56]
 1009f92:	4d 39 fe 	cmp	r14, r15
 1009f95:	0f 83 17 01 00 00 	jae	279 <_runtime.mallocgc+0x802>
 1009f9b:	4f 8d 6c 25 00 	lea	r13, [r13 + r12]
 1009fa0:	4d 8d 6d 01 	lea	r13, [r13 + 1]
 1009fa4:	49 f7 c5 3f 00 00 00 	test	r13, 63
 1009fab:	0f 85 c9 00 00 00 	jne	201 <_runtime.mallocgc+0x7ca>
 1009fb1:	4d 39 fd 	cmp	r13, r15
 1009fb4:	0f 84 c0 00 00 00 	je	192 <_runtime.mallocgc+0x7ca>
 1009fba:	31 c9 	xor	ecx, ecx
 1009fbc:	48 85 c9 	test	rcx, rcx
 1009fbf:	74 74 	je	116 <_runtime.mallocgc+0x785>
 1009fc1:	45 31 d2 	xor	r10d, r10d
 1009fc4:	44 0f b6 9c 24 b0 00 00 00 	movzx	r11d, byte ptr [rsp + 176]
 1009fcd:	45 84 db 	test	r11b, r11b
 1009fd0:	74 06 	je	6 <_runtime.mallocgc+0x728>
 1009fd2:	80 78 64 00 	cmp	byte ptr [rax + 100], 0
 1009fd6:	75 0e 	jne	14 <_runtime.mallocgc+0x736>
 1009fd8:	48 89 c8 	mov	rax, rcx
 1009fdb:	44 89 d1 	mov	ecx, r10d
 1009fde:	49 89 c2 	mov	r10, rax
 1009fe1:	e9 bd fb ff ff 	jmp	-1091 <_runtime.mallocgc+0x2f3>
 1009fe6:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1009feb:	44 88 54 24 2e 	mov	byte ptr [rsp + 46], r10b
 1009ff0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1009ff4:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1009ffc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a001:	e8 ba 98 04 00 	call	301242 <_runtime.memclrNoHeapPointers>
 100a006:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 100a00b:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 100a010:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100a015:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100a01a:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 100a01f:	4c 8b 84 24 a8 00 00 00 	mov	r8, qword ptr [rsp + 168]
 100a027:	44 0f b6 4c 24 2f 	movzx	r9d, byte ptr [rsp + 47]
 100a02d:	44 0f b6 54 24 2e 	movzx	r10d, byte ptr [rsp + 46]
 100a033:	eb a3 	jmp	-93 <_runtime.mallocgc+0x728>
 100a035:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100a039:	44 88 54 24 08 	mov	byte ptr [rsp + 8], r10b
 100a03e:	e8 3d f6 ff ff 	call	-2499 <_runtime.(*mcache).nextFree>
 100a043:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 100a048:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100a04d:	44 0f b6 54 24 20 	movzx	r10d, byte ptr [rsp + 32]
 100a053:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 100a058:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100a05d:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100a062:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 100a067:	4c 8b 84 24 a8 00 00 00 	mov	r8, qword ptr [rsp + 168]
 100a06f:	44 0f b6 4c 24 2f 	movzx	r9d, byte ptr [rsp + 47]
 100a075:	e9 4a ff ff ff 	jmp	-182 <_runtime.mallocgc+0x714>
 100a07a:	49 8d 4c 24 01 	lea	rcx, [r12 + 1]
 100a07f:	48 83 f9 40 	cmp	rcx, 64
 100a083:	4d 19 e4 	sbb	r12, r12
 100a086:	49 d3 eb 	shr	r11, cl
 100a089:	4d 21 e3 	and	r11, r12
 100a08c:	4c 89 58 40 	mov	qword ptr [rax + 64], r11
 100a090:	4c 89 68 30 	mov	qword ptr [rax + 48], r13
 100a094:	44 0f b7 58 60 	movzx	r11d, word ptr [rax + 96]
 100a099:	41 ff c3 	inc	r11d
 100a09c:	66 44 89 58 60 	mov	word ptr [rax + 96], r11w
 100a0a1:	48 8b 48 68 	mov	rcx, qword ptr [rax + 104]
 100a0a5:	49 0f af ce 	imul	rcx, r14
 100a0a9:	48 03 48 18 	add	rcx, qword ptr [rax + 24]
 100a0ad:	e9 0a ff ff ff 	jmp	-246 <_runtime.mallocgc+0x70c>
 100a0b2:	31 c9 	xor	ecx, ecx
 100a0b4:	e9 03 ff ff ff 	jmp	-253 <_runtime.mallocgc+0x70c>
 100a0b9:	48 8d 87 7f fc ff ff 	lea	rax, [rdi - 897]
 100a0c0:	48 c1 e8 07 	shr	rax, 7
 100a0c4:	48 3d f9 00 00 00 	cmp	rax, 249
 100a0ca:	0f 83 36 01 00 00 	jae	310 <_runtime.mallocgc+0x956>
 100a0d0:	4c 8d 1d c9 14 0c 00 	lea	r11, [rip + 791753]
 100a0d7:	46 0f b6 14 18 	movzx	r10d, byte ptr [rax + r11]
 100a0dc:	e9 48 fe ff ff 	jmp	-440 <_runtime.mallocgc+0x679>
 100a0e1:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 100a0ea:	0f 57 c0 	xorps	xmm0, xmm0
 100a0ed:	0f 11 44 24 70 	movups	xmmword ptr [rsp + 112], xmm0
 100a0f2:	0f 11 84 24 80 00 00 00 	movups	xmmword ptr [rsp + 128], xmm0
 100a0fa:	48 8d 05 bf 39 04 00 	lea	rax, [rip + 276927]
 100a101:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 100a106:	48 8d 84 24 a0 00 00 00 	lea	rax, [rsp + 160]
 100a10e:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 100a113:	0f b6 84 24 b0 00 00 00 	movzx	eax, byte ptr [rsp + 176]
 100a11b:	88 84 24 80 00 00 00 	mov	byte ptr [rsp + 128], al
 100a122:	44 88 8c 24 81 00 00 00 	mov	byte ptr [rsp + 129], r9b
 100a12a:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 100a12f:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 100a137:	48 8d 44 24 70 	lea	rax, [rsp + 112]
 100a13c:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a140:	e8 3b 69 04 00 	call	289083 <_runtime.systemstack>
 100a145:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100a14a:	48 c7 40 30 01 00 00 00 	mov	qword ptr [rax + 48], 1
 100a152:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100a157:	66 c7 40 60 01 00 	mov	word ptr [rax + 96], 1
 100a15d:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100a162:	4c 8b 50 18 	mov	r10, qword ptr [rax + 24]
 100a166:	48 8b 40 68 	mov	rax, qword ptr [rax + 104]
 100a16a:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 100a172:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 100a177:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100a17c:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100a181:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 100a186:	4c 8b 84 24 a8 00 00 00 	mov	r8, qword ptr [rsp + 168]
 100a18e:	44 0f b6 4c 24 2f 	movzx	r9d, byte ptr [rsp + 47]
 100a194:	b9 01 00 00 00 	mov	ecx, 1
 100a199:	e9 05 fa ff ff 	jmp	-1531 <_runtime.mallocgc+0x2f3>
 100a19e:	41 b9 01 00 00 00 	mov	r9d, 1
 100a1a4:	e9 a0 f8 ff ff 	jmp	-1888 <_runtime.mallocgc+0x199>
 100a1a9:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 100a1ae:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100a1b2:	e8 59 b9 00 00 	call	47449 <_runtime.gcAssistAlloc>
 100a1b7:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100a1bc:	e9 0d f8 ff ff 	jmp	-2035 <_runtime.mallocgc+0x11e>
 100a1c1:	48 89 de 	mov	rsi, rbx
 100a1c4:	e9 eb f7 ff ff 	jmp	-2069 <_runtime.mallocgc+0x104>
 100a1c9:	31 f6 	xor	esi, esi
 100a1cb:	e9 fe f7 ff ff 	jmp	-2050 <_runtime.mallocgc+0x11e>
 100a1d0:	48 8d 05 11 d7 0e 00 	lea	rax, [rip + 972561]
 100a1d7:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 100a1df:	48 8b ac 24 90 00 00 00 	mov	rbp, qword ptr [rsp + 144]
 100a1e7:	48 81 c4 98 00 00 00 	add	rsp, 152
 100a1ee:	c3 	ret
 100a1ef:	b9 86 00 00 00 	mov	ecx, 134
 100a1f4:	e8 57 91 04 00 	call	299351 <_runtime.panicIndex>
 100a1f9:	44 89 d0 	mov	eax, r10d
 100a1fc:	b9 43 00 00 00 	mov	ecx, 67
 100a201:	e8 4a 91 04 00 	call	299338 <_runtime.panicIndex>
 100a206:	b9 f9 00 00 00 	mov	ecx, 249
 100a20b:	e8 50 91 04 00 	call	299344 <_runtime.panicIndexU>
 100a210:	b9 81 00 00 00 	mov	ecx, 129
 100a215:	e8 46 91 04 00 	call	299334 <_runtime.panicIndexU>
 100a21a:	48 8d 05 3b a0 06 00 	lea	rax, [rip + 434235]
 100a221:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a225:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 100a22e:	e8 2d eb 01 00 	call	125741 <_runtime.throw>
 100a233:	48 8d 05 35 97 06 00 	lea	rax, [rip + 431925]
 100a23a:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a23e:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 100a247:	e8 14 eb 01 00 	call	125716 <_runtime.throw>
 100a24c:	48 8d 05 f1 ce 06 00 	lea	rax, [rip + 446193]
 100a253:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a257:	48 c7 44 24 08 32 00 00 00 	mov	qword ptr [rsp + 8], 50
 100a260:	e8 fb ea 01 00 	call	125691 <_runtime.throw>
 100a265:	90 	nop
 100a266:	e8 65 69 04 00 	call	289125 <_runtime.morestack_noctxt>
 100a26b:	e9 40 f6 ff ff 	jmp	-2496 <_runtime.mallocgc>

_runtime.largeAlloc:
 100a270:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100a279:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100a27d:	0f 86 6c 01 00 00 	jbe	364 <_runtime.largeAlloc+0x17f>
 100a283:	48 83 ec 38 	sub	rsp, 56
 100a287:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100a28c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 100a291:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100a296:	48 8d 88 00 20 00 00 	lea	rcx, [rax + 8192]
 100a29d:	48 39 c1 	cmp	rcx, rax
 100a2a0:	0f 82 2f 01 00 00 	jb	303 <_runtime.largeAlloc+0x165>
 100a2a6:	48 89 c1 	mov	rcx, rax
 100a2a9:	48 c1 e8 0d 	shr	rax, 13
 100a2ad:	48 8d 50 01 	lea	rdx, [rax + 1]
 100a2b1:	48 f7 c1 ff 1f 00 00 	test	rcx, 8191
 100a2b8:	48 0f 45 c2 	cmovne	rax, rdx
 100a2bc:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100a2c1:	48 89 c2 	mov	rdx, rax
 100a2c4:	48 c1 e0 0d 	shl	rax, 13
 100a2c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a2cc:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100a2d1:	e8 fa 16 01 00 	call	71418 <_runtime.deductSweepCredit>
 100a2d6:	48 8d 05 23 ad 0d 00 	lea	rax, [rip + 896291]
 100a2dd:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a2e1:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100a2e6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a2eb:	0f b6 44 24 49 	movzx	eax, byte ptr [rsp + 73]
 100a2f0:	88 44 24 10 	mov	byte ptr [rsp + 16], al
 100a2f4:	0f b6 44 24 48 	movzx	eax, byte ptr [rsp + 72]
 100a2f9:	88 44 24 11 	mov	byte ptr [rsp + 17], al
 100a2fd:	e8 1e 34 01 00 	call	78878 <_runtime.(*mheap).alloc>
 100a302:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100a307:	48 85 c0 	test	rax, rax
 100a30a:	0f 84 ac 00 00 00 	je	172 <_runtime.largeAlloc+0x14c>
 100a310:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 100a314:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 100a319:	48 01 da 	add	rdx, rbx
 100a31c:	48 89 50 70 	mov	qword ptr [rax + 112], rdx
 100a320:	48 8b 15 a9 b0 0e 00 	mov	rdx, qword ptr [rip + 962729]
 100a327:	84 02 	test	byte ptr [rdx], al
 100a329:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 100a32d:	90 	nop
 100a32e:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 100a338:	48 01 de 	add	rsi, rbx
 100a33b:	48 c1 ee 1a 	shr	rsi, 26
 100a33f:	48 81 fe 00 00 40 00 	cmp	rsi, 4194304
 100a346:	73 67 	jae	103 <_runtime.largeAlloc+0x13f>
 100a348:	48 8b 0c f2 	mov	rcx, qword ptr [rdx + 8*rsi]
 100a34c:	48 85 c9 	test	rcx, rcx
 100a34f:	74 54 	je	84 <_runtime.largeAlloc+0x135>
 100a351:	48 89 da 	mov	rdx, rbx
 100a354:	48 c1 eb 05 	shr	rbx, 5
 100a358:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 100a35f:	48 01 cb 	add	rbx, rcx
 100a362:	48 c1 ea 03 	shr	rdx, 3
 100a366:	48 83 e2 03 	and	rdx, 3
 100a36a:	48 81 c1 ff ff 1f 00 	add	rcx, 2097151
 100a371:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100a376:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100a37a:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 100a37e:	89 74 24 0c 	mov	dword ptr [rsp + 12], esi
 100a382:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100a387:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100a38c:	e8 6f 44 00 00 	call	17519 <_runtime.heapBits.initSpan>
 100a391:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100a396:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 100a39b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100a3a0:	48 83 c4 38 	add	rsp, 56
 100a3a4:	c3 	ret
 100a3a5:	31 c9 	xor	ecx, ecx
 100a3a7:	31 f6 	xor	esi, esi
 100a3a9:	31 d2 	xor	edx, edx
 100a3ab:	31 db 	xor	ebx, ebx
 100a3ad:	eb c2 	jmp	-62 <_runtime.largeAlloc+0x101>
 100a3af:	48 89 f0 	mov	rax, rsi
 100a3b2:	b9 00 00 40 00 	mov	ecx, 4194304
 100a3b7:	e8 a4 8f 04 00 	call	298916 <_runtime.panicIndexU>
 100a3bc:	48 8d 05 c3 93 06 00 	lea	rax, [rip + 431043]
 100a3c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a3c7:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 100a3d0:	e8 8b e9 01 00 	call	125323 <_runtime.throw>
 100a3d5:	48 8d 05 aa 93 06 00 	lea	rax, [rip + 431018]
 100a3dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a3e0:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 100a3e9:	e8 72 e9 01 00 	call	125298 <_runtime.throw>
 100a3ee:	90 	nop
 100a3ef:	e8 dc 67 04 00 	call	288732 <_runtime.morestack_noctxt>
 100a3f4:	e9 77 fe ff ff 	jmp	-393 <_runtime.largeAlloc>
 100a3f9:	cc 	int3
 100a3fa:	cc 	int3
 100a3fb:	cc 	int3
 100a3fc:	cc 	int3
 100a3fd:	cc 	int3
 100a3fe:	cc 	int3
 100a3ff:	cc 	int3

_runtime.newobject:
 100a400:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100a409:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100a40d:	76 3d 	jbe	61 <_runtime.newobject+0x4c>
 100a40f:	48 83 ec 28 	sub	rsp, 40
 100a413:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 100a418:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 100a41d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100a422:	48 8b 08 	mov	rcx, qword ptr [rax]
 100a425:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100a429:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a42e:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100a433:	e8 78 f4 ff ff 	call	-2952 <_runtime.mallocgc>
 100a438:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100a43d:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100a442:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 100a447:	48 83 c4 28 	add	rsp, 40
 100a44b:	c3 	ret
 100a44c:	e8 7f 67 04 00 	call	288639 <_runtime.morestack_noctxt>
 100a451:	eb ad 	jmp	-83 <_runtime.newobject>
 100a453:	cc 	int3
 100a454:	cc 	int3
 100a455:	cc 	int3
 100a456:	cc 	int3
 100a457:	cc 	int3
 100a458:	cc 	int3
 100a459:	cc 	int3
 100a45a:	cc 	int3
 100a45b:	cc 	int3
 100a45c:	cc 	int3
 100a45d:	cc 	int3
 100a45e:	cc 	int3
 100a45f:	cc 	int3

_runtime.newarray:
 100a460:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100a469:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100a46d:	0f 86 b0 00 00 00 	jbe	176 <_runtime.newarray+0xc3>
 100a473:	48 83 ec 28 	sub	rsp, 40
 100a477:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 100a47c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 100a481:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100a486:	48 83 f8 01 	cmp	rax, 1
 100a48a:	74 4b 	je	75 <_runtime.newarray+0x77>
 100a48c:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100a491:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100a494:	48 89 c3 	mov	rbx, rax
 100a497:	48 f7 e2 	mul	rdx
 100a49a:	70 6a 	jo	106 <_runtime.newarray+0xa6>
 100a49c:	48 ba 00 00 00 00 00 00 01 00 	movabs	rdx, 281474976710656
 100a4a6:	48 39 d0 	cmp	rax, rdx
 100a4a9:	77 5b 	ja	91 <_runtime.newarray+0xa6>
 100a4ab:	48 85 db 	test	rbx, rbx
 100a4ae:	7c 56 	jl	86 <_runtime.newarray+0xa6>
 100a4b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a4b4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100a4b9:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100a4be:	e8 ed f3 ff ff 	call	-3091 <_runtime.mallocgc>
 100a4c3:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100a4c8:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100a4cd:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 100a4d2:	48 83 c4 28 	add	rsp, 40
 100a4d6:	c3 	ret
 100a4d7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100a4dc:	48 8b 08 	mov	rcx, qword ptr [rax]
 100a4df:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100a4e3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a4e8:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100a4ed:	e8 be f3 ff ff 	call	-3138 <_runtime.mallocgc>
 100a4f2:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100a4f7:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100a4fc:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 100a501:	48 83 c4 28 	add	rsp, 40
 100a505:	c3 	ret
 100a506:	48 8d 05 f3 92 05 00 	lea	rax, [rip + 365299]
 100a50d:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a511:	48 8d 05 88 95 07 00 	lea	rax, [rip + 497032]
 100a518:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a51d:	e8 9e e0 01 00 	call	123038 <_runtime.gopanic>
 100a522:	90 	nop
 100a523:	e8 a8 66 04 00 	call	288424 <_runtime.morestack_noctxt>
 100a528:	e9 33 ff ff ff 	jmp	-205 <_runtime.newarray>
 100a52d:	cc 	int3
 100a52e:	cc 	int3
 100a52f:	cc 	int3

_runtime.profilealloc:
 100a530:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100a539:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100a53d:	76 54 	jbe	84 <_runtime.profilealloc+0x63>
 100a53f:	48 83 ec 18 	sub	rsp, 24
 100a543:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 100a548:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 100a54d:	48 8b 05 34 0c 0c 00 	mov	rax, qword ptr [rip + 789556]
 100a554:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a558:	e8 43 00 00 00 	call	67 <_runtime.fastexprand>
 100a55d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100a562:	48 8b 80 60 01 00 00 	mov	rax, qword ptr [rax + 352]
 100a569:	48 63 4c 24 08 	movsxd	rcx, dword ptr [rsp + 8]
 100a56e:	48 89 08 	mov	qword ptr [rax], rcx
 100a571:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100a576:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a57a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100a57f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a584:	e8 07 98 01 00 	call	104455 <_runtime.mProf_Malloc>
 100a589:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100a58e:	48 83 c4 18 	add	rsp, 24
 100a592:	c3 	ret
 100a593:	e8 38 66 04 00 	call	288312 <_runtime.morestack_noctxt>
 100a598:	eb 96 	jmp	-106 <_runtime.profilealloc>
 100a59a:	cc 	int3
 100a59b:	cc 	int3
 100a59c:	cc 	int3
 100a59d:	cc 	int3
 100a59e:	cc 	int3
 100a59f:	cc 	int3

_runtime.fastexprand:
 100a5a0:	48 83 ec 18 	sub	rsp, 24
 100a5a4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 100a5a9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 100a5ae:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100a5b3:	48 81 fa 00 00 00 07 	cmp	rdx, 117440512
 100a5ba:	0f 8e 1a 01 00 00 	jle	282 <_runtime.fastexprand+0x13a>
 100a5c0:	b8 00 00 00 07 	mov	eax, 117440512
 100a5c5:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 100a5ce:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 100a5d2:	8b 9a 20 01 00 00 	mov	ebx, dword ptr [rdx + 288]
 100a5d8:	8b b2 24 01 00 00 	mov	esi, dword ptr [rdx + 292]
 100a5de:	89 b2 20 01 00 00 	mov	dword ptr [rdx + 288], esi
 100a5e4:	89 df 	mov	edi, ebx
 100a5e6:	c1 e3 11 	shl	ebx, 17
 100a5e9:	31 fb 	xor	ebx, edi
 100a5eb:	89 f7 	mov	edi, esi
 100a5ed:	31 de 	xor	esi, ebx
 100a5ef:	c1 eb 07 	shr	ebx, 7
 100a5f2:	31 f3 	xor	ebx, esi
 100a5f4:	89 fe 	mov	esi, edi
 100a5f6:	c1 ef 10 	shr	edi, 16
 100a5f9:	31 df 	xor	edi, ebx
 100a5fb:	89 ba 24 01 00 00 	mov	dword ptr [rdx + 292], edi
 100a601:	8d 14 37 	lea	edx, [rdi + rsi]
 100a604:	81 e2 ff ff ff 03 	and	edx, 67108863
 100a60a:	ff c2 	inc	edx
 100a60c:	0f 57 c0 	xorps	xmm0, xmm0
 100a60f:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 100a614:	90 	nop
 100a615:	66 48 0f 7e c2 	movq	rdx, xmm0
 100a61a:	48 89 d3 	mov	rbx, rdx
 100a61d:	48 c1 ea 2f 	shr	rdx, 47
 100a621:	48 83 e2 1f 	and	rdx, 31
 100a625:	48 8d 72 01 	lea	rsi, [rdx + 1]
 100a629:	48 83 fe 21 	cmp	rsi, 33
 100a62d:	0f 83 c6 00 00 00 	jae	198 <_runtime.fastexprand+0x159>
 100a633:	48 89 d9 	mov	rcx, rbx
 100a636:	48 c1 eb 34 	shr	rbx, 52
 100a63a:	48 81 e3 ff 07 00 00 	and	rbx, 2047
 100a641:	48 81 c3 01 fc ff ff 	add	rbx, -1023
 100a648:	48 c1 e9 1b 	shr	rcx, 27
 100a64c:	48 81 e1 ff ff 0f 00 	and	rcx, 1048575
 100a653:	48 8d 35 46 14 0c 00 	lea	rsi, [rip + 791622]
 100a65a:	f2 0f 10 04 d6 	movsd	xmm0, qword ptr [rsi + 8*rdx]
 100a65f:	f2 0f 10 4c d6 08 	movsd	xmm1, qword ptr [rsi + 8*rdx + 8]
 100a665:	0f 57 d2 	xorps	xmm2, xmm2
 100a668:	f2 48 0f 2a d3 	cvtsi2sd	xmm2, rbx
 100a66d:	f2 0f 58 d0 	addsd	xmm2, xmm0
 100a671:	f2 0f 5c c8 	subsd	xmm1, xmm0
 100a675:	0f 57 c0 	xorps	xmm0, xmm0
 100a678:	f2 48 0f 2a c1 	cvtsi2sd	xmm0, rcx
 100a67d:	f2 0f 59 c1 	mulsd	xmm0, xmm1
 100a681:	f2 0f 10 0d 4f 90 07 00 	movsd	xmm1, qword ptr [rip + 495695]
 100a689:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 100a68d:	f2 0f 58 d1 	addsd	xmm2, xmm1
 100a691:	f2 0f 10 05 b7 90 07 00 	movsd	xmm0, qword ptr [rip + 495799]
 100a699:	f2 0f 5c d0 	subsd	xmm2, xmm0
 100a69d:	0f 57 c0 	xorps	xmm0, xmm0
 100a6a0:	66 0f 2e d0 	ucomisd	xmm2, xmm0
 100a6a4:	76 2f 	jbe	47 <_runtime.fastexprand+0x135>
 100a6a6:	0f 57 c0 	xorps	xmm0, xmm0
 100a6a9:	0f 57 c9 	xorps	xmm1, xmm1
 100a6ac:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 100a6b1:	f2 0f 10 15 d7 90 07 00 	movsd	xmm2, qword ptr [rip + 495831]
 100a6b9:	f2 0f 59 ca 	mulsd	xmm1, xmm2
 100a6bd:	f2 0f 59 c1 	mulsd	xmm0, xmm1
 100a6c1:	f2 0f 2c c0 	cvttsd2si	eax, xmm0
 100a6c5:	ff c0 	inc	eax
 100a6c7:	89 44 24 28 	mov	dword ptr [rsp + 40], eax
 100a6cb:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100a6d0:	48 83 c4 18 	add	rsp, 24
 100a6d4:	c3 	ret
 100a6d5:	0f 10 c2 	movups	xmm0, xmm2
 100a6d8:	eb cf 	jmp	-49 <_runtime.fastexprand+0x109>
 100a6da:	48 85 d2 	test	rdx, rdx
 100a6dd:	74 08 	je	8 <_runtime.fastexprand+0x147>
 100a6df:	48 89 d0 	mov	rax, rdx
 100a6e2:	e9 de fe ff ff 	jmp	-290 <_runtime.fastexprand+0x25>
 100a6e7:	c7 44 24 28 00 00 00 00 	mov	dword ptr [rsp + 40], 0
 100a6ef:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100a6f4:	48 83 c4 18 	add	rsp, 24
 100a6f8:	c3 	ret
 100a6f9:	48 89 f0 	mov	rax, rsi
 100a6fc:	b9 21 00 00 00 	mov	ecx, 33
 100a701:	e8 5a 8c 04 00 	call	298074 <_runtime.panicIndexU>
 100a706:	90 	nop
 100a707:	cc 	int3
 100a708:	cc 	int3
 100a709:	cc 	int3
 100a70a:	cc 	int3
 100a70b:	cc 	int3
 100a70c:	cc 	int3
 100a70d:	cc 	int3
 100a70e:	cc 	int3
 100a70f:	cc 	int3

_runtime.persistentalloc:
 100a710:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100a719:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100a71d:	0f 86 83 00 00 00 	jbe	131 <_runtime.persistentalloc+0x96>
 100a723:	48 83 ec 40 	sub	rsp, 64
 100a727:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 100a72c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 100a731:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100a73a:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 100a743:	0f 57 c0 	xorps	xmm0, xmm0
 100a746:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 100a74b:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 100a750:	48 8d 05 d9 33 04 00 	lea	rax, [rip + 275417]
 100a757:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100a75c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100a761:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100a766:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100a76b:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100a770:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100a775:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100a77a:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 100a77f:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100a784:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 100a789:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a78d:	e8 ee 62 04 00 	call	287470 <_runtime.systemstack>
 100a792:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100a797:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 100a79c:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 100a7a1:	48 83 c4 40 	add	rsp, 64
 100a7a5:	c3 	ret
 100a7a6:	e8 25 64 04 00 	call	287781 <_runtime.morestack_noctxt>
 100a7ab:	e9 60 ff ff ff 	jmp	-160 <_runtime.persistentalloc>

_runtime.persistentalloc1:
 100a7b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100a7b9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 100a7bd:	0f 86 fc 02 00 00 	jbe	764 <_runtime.persistentalloc1+0x30f>
 100a7c3:	48 83 ec 50 	sub	rsp, 80
 100a7c7:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 100a7cc:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 100a7d1:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100a7d6:	48 85 c0 	test	rax, rax
 100a7d9:	0f 84 c6 02 00 00 	je	710 <_runtime.persistentalloc1+0x2f5>
 100a7df:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100a7e4:	48 85 c9 	test	rcx, rcx
 100a7e7:	0f 84 63 02 00 00 	je	611 <_runtime.persistentalloc1+0x2a0>
 100a7ed:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 100a7f1:	48 85 d1 	test	rcx, rdx
 100a7f4:	0f 85 92 02 00 00 	jne	658 <_runtime.persistentalloc1+0x2dc>
 100a7fa:	48 81 f9 00 20 00 00 	cmp	rcx, 8192
 100a801:	0f 87 6c 02 00 00 	ja	620 <_runtime.persistentalloc1+0x2c3>
 100a807:	48 3d 00 00 01 00 	cmp	rax, 65536
 100a80d:	0f 83 11 02 00 00 	jae	529 <_runtime.persistentalloc1+0x274>
 100a813:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100a818:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 100a821:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 100a825:	90 	nop
 100a826:	ff 83 08 01 00 00 	inc	dword ptr [rbx + 264]
 100a82c:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 100a830:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 100a835:	48 85 d2 	test	rdx, rdx
 100a838:	0f 84 bb 01 00 00 	je	443 <_runtime.persistentalloc1+0x249>
 100a83e:	48 8b 9a d0 00 00 00 	mov	rbx, qword ptr [rdx + 208]
 100a845:	48 85 db 	test	rbx, rbx
 100a848:	0f 84 ab 01 00 00 	je	427 <_runtime.persistentalloc1+0x249>
 100a84e:	84 03 	test	byte ptr [rbx], al
 100a850:	48 81 c3 50 16 00 00 	add	rbx, 5712
 100a857:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 100a85c:	48 8b 73 08 	mov	rsi, qword ptr [rbx + 8]
 100a860:	48 8d 34 31 	lea	rsi, [rcx + rsi]
 100a864:	48 8d 76 ff 	lea	rsi, [rsi - 1]
 100a868:	48 f7 d9 	neg	rcx
 100a86b:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100a870:	48 21 ce 	and	rsi, rcx
 100a873:	48 89 73 08 	mov	qword ptr [rbx + 8], rsi
 100a877:	48 01 c6 	add	rsi, rax
 100a87a:	48 81 fe 00 00 04 00 	cmp	rsi, 262144
 100a881:	0f 86 60 01 00 00 	jbe	352 <_runtime.persistentalloc1+0x237>
 100a887:	48 c7 04 24 00 00 04 00 	mov	qword ptr [rsp], 262144
 100a88f:	48 8d 05 2a de 0e 00 	lea	rax, [rip + 974378]
 100a896:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a89b:	e8 20 66 00 00 	call	26144 <_runtime.sysAlloc>
 100a8a0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100a8a5:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100a8aa:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100a8af:	48 89 01 	mov	qword ptr [rcx], rax
 100a8b2:	48 83 39 00 	cmp	qword ptr [rcx], 0
 100a8b6:	75 05 	jne	5 <_runtime.persistentalloc1+0x10d>
 100a8b8:	e9 08 01 00 00 	jmp	264 <_runtime.persistentalloc1+0x215>
 100a8bd:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100a8c0:	48 8b 05 a1 39 0c 00 	mov	rax, qword ptr [rip + 801185]
 100a8c7:	48 89 02 	mov	qword ptr [rdx], rax
 100a8ca:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100a8cd:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 100a8d2:	48 8d 1d 8f 39 0c 00 	lea	rbx, [rip + 801167]
 100a8d9:	f0 	lock
 100a8da:	48 0f b1 13 	cmpxchg	qword ptr [rbx], rdx
 100a8de:	0f 94 c2 	sete	dl
 100a8e1:	84 d2 	test	dl, dl
 100a8e3:	74 d8 	je	-40 <_runtime.persistentalloc1+0x10d>
 100a8e5:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100a8ea:	48 83 c0 07 	add	rax, 7
 100a8ee:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100a8f3:	48 21 d0 	and	rax, rdx
 100a8f6:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 100a8fa:	48 8b 01 	mov	rax, qword ptr [rcx]
 100a8fd:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 100a901:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100a906:	48 8d 34 13 	lea	rsi, [rbx + rdx]
 100a90a:	48 89 71 08 	mov	qword ptr [rcx + 8], rsi
 100a90e:	90 	nop
 100a90f:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 100a918:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 100a91d:	44 8b 87 08 01 00 00 	mov	r8d, dword ptr [rdi + 264]
 100a924:	45 8d 48 ff 	lea	r9d, [r8 - 1]
 100a928:	44 89 8f 08 01 00 00 	mov	dword ptr [rdi + 264], r9d
 100a92f:	48 01 d0 	add	rax, rdx
 100a932:	41 83 f8 01 	cmp	r8d, 1
 100a936:	75 11 	jne	17 <_runtime.persistentalloc1+0x199>
 100a938:	80 be b1 00 00 00 00 	cmp	byte ptr [rsi + 177], 0
 100a93f:	74 08 	je	8 <_runtime.persistentalloc1+0x199>
 100a941:	48 c7 46 10 de fa ff ff 	mov	qword ptr [rsi + 16], -1314
 100a949:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100a94e:	48 8d 15 73 3a 0c 00 	lea	rdx, [rip + 801395]
 100a955:	48 39 d1 	cmp	rcx, rdx
 100a958:	74 4f 	je	79 <_runtime.persistentalloc1+0x1f9>
 100a95a:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 100a95f:	48 8d 15 5a dd 0e 00 	lea	rdx, [rip + 974170]
 100a966:	48 39 d1 	cmp	rcx, rdx
 100a969:	75 0f 	jne	15 <_runtime.persistentalloc1+0x1ca>
 100a96b:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 100a970:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100a975:	48 83 c4 50 	add	rsp, 80
 100a979:	c3 	ret
 100a97a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100a97e:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100a983:	e8 d8 a7 01 00 	call	108504 <_runtime.mSysStatInc>
 100a988:	48 8d 05 31 dd 0e 00 	lea	rax, [rip + 974129]
 100a98f:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a993:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100a998:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100a99d:	e8 7e a8 01 00 	call	108670 <_runtime.mSysStatDec>
 100a9a2:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100a9a7:	eb c2 	jmp	-62 <_runtime.persistentalloc1+0x1bb>
 100a9a9:	48 8d 05 10 3a 0c 00 	lea	rax, [rip + 801296]
 100a9b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a9b4:	e8 57 d9 ff ff 	call	-9897 <_runtime.unlock>
 100a9b9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100a9be:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100a9c3:	eb 95 	jmp	-107 <_runtime.persistentalloc1+0x1aa>
 100a9c5:	48 8d 05 fc 39 0c 00 	lea	rax, [rip + 801276]
 100a9cc:	48 39 c1 	cmp	rcx, rax
 100a9cf:	0f 85 85 00 00 00 	jne	133 <_runtime.persistentalloc1+0x2aa>
 100a9d5:	48 8d 05 e4 39 0c 00 	lea	rax, [rip + 801252]
 100a9dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 100a9e0:	e8 2b d9 ff ff 	call	-9941 <_runtime.unlock>
 100a9e5:	eb 73 	jmp	115 <_runtime.persistentalloc1+0x2aa>
 100a9e7:	48 83 3b 00 	cmp	qword ptr [rbx], 0
 100a9eb:	0f 84 96 fe ff ff 	je	-362 <_runtime.persistentalloc1+0xd7>
 100a9f1:	48 89 d9 	mov	rcx, rbx
 100a9f4:	e9 01 ff ff ff 	jmp	-255 <_runtime.persistentalloc1+0x14a>
 100a9f9:	48 8d 05 c0 39 0c 00 	lea	rax, [rip + 801216]
 100aa00:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aa04:	e8 27 d7 ff ff 	call	-10457 <_runtime.lock>
 100aa09:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100aa0e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 100aa13:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100aa18:	48 8d 1d a9 39 0c 00 	lea	rbx, [rip + 801193]
 100aa1f:	e9 33 fe ff ff 	jmp	-461 <_runtime.persistentalloc1+0xa7>
 100aa24:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aa28:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100aa2d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100aa32:	e8 89 64 00 00 	call	25737 <_runtime.sysAlloc>
 100aa37:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100aa3c:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100aa41:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 100aa46:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100aa4b:	48 83 c4 50 	add	rsp, 80
 100aa4f:	c3 	ret
 100aa50:	b9 08 00 00 00 	mov	ecx, 8
 100aa55:	e9 ad fd ff ff 	jmp	-595 <_runtime.persistentalloc1+0x57>
 100aa5a:	48 8d 05 21 b0 06 00 	lea	rax, [rip + 438305]
 100aa61:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aa65:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 100aa6e:	e8 ed e2 01 00 	call	123629 <_runtime.throw>
 100aa73:	48 8d 05 9b b7 06 00 	lea	rax, [rip + 440219]
 100aa7a:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aa7e:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 100aa87:	e8 d4 e2 01 00 	call	123604 <_runtime.throw>
 100aa8c:	48 8d 05 bf bf 06 00 	lea	rax, [rip + 442303]
 100aa93:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aa97:	48 c7 44 24 08 2a 00 00 00 	mov	qword ptr [rsp + 8], 42
 100aaa0:	e8 bb e2 01 00 	call	123579 <_runtime.throw>
 100aaa5:	48 8d 05 01 a4 06 00 	lea	rax, [rip + 435201]
 100aaac:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aab0:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 100aab9:	e8 a2 e2 01 00 	call	123554 <_runtime.throw>
 100aabe:	90 	nop
 100aabf:	e8 3c 5c 03 00 	call	220220 <_runtime.morestackc>
 100aac4:	e9 e7 fc ff ff 	jmp	-793 <_runtime.persistentalloc1>
 100aac9:	cc 	int3
 100aaca:	cc 	int3
 100aacb:	cc 	int3
 100aacc:	cc 	int3
 100aacd:	cc 	int3
 100aace:	cc 	int3
 100aacf:	cc 	int3

_runtime.inPersistentAlloc:
 100aad0:	48 8b 05 91 37 0c 00 	mov	rax, qword ptr [rip + 800657]
 100aad7:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100aadc:	eb 03 	jmp	3 <_runtime.inPersistentAlloc+0x11>
 100aade:	48 8b 00 	mov	rax, qword ptr [rax]
 100aae1:	48 85 c0 	test	rax, rax
 100aae4:	74 17 	je	23 <_runtime.inPersistentAlloc+0x2d>
 100aae6:	48 39 c1 	cmp	rcx, rax
 100aae9:	72 f3 	jb	-13 <_runtime.inPersistentAlloc+0xe>
 100aaeb:	48 8d 90 00 00 04 00 	lea	rdx, [rax + 262144]
 100aaf2:	48 39 d1 	cmp	rcx, rdx
 100aaf5:	73 e7 	jae	-25 <_runtime.inPersistentAlloc+0xe>
 100aaf7:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100aafc:	c3 	ret
 100aafd:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 100ab02:	c3 	ret
 100ab03:	cc 	int3
 100ab04:	cc 	int3
 100ab05:	cc 	int3
 100ab06:	cc 	int3
 100ab07:	cc 	int3
 100ab08:	cc 	int3
 100ab09:	cc 	int3
 100ab0a:	cc 	int3
 100ab0b:	cc 	int3
 100ab0c:	cc 	int3
 100ab0d:	cc 	int3
 100ab0e:	cc 	int3
 100ab0f:	cc 	int3

_runtime.(*linearAlloc).alloc:
 100ab10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100ab19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100ab1d:	0f 86 e5 00 00 00 	jbe	229 <_runtime.(*linearAlloc).alloc+0xf8>
 100ab23:	48 83 ec 30 	sub	rsp, 48
 100ab27:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100ab2c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100ab31:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100ab36:	48 8b 08 	mov	rcx, qword ptr [rax]
 100ab39:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 100ab3e:	48 8d 0c 0a 	lea	rcx, [rdx + rcx]
 100ab42:	48 8d 49 ff 	lea	rcx, [rcx - 1]
 100ab46:	48 f7 da 	neg	rdx
 100ab49:	48 21 d1 	and	rcx, rdx
 100ab4c:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100ab51:	48 01 ca 	add	rdx, rcx
 100ab54:	48 39 50 10 	cmp	qword ptr [rax + 16], rdx
 100ab58:	0f 82 97 00 00 00 	jb	151 <_runtime.(*linearAlloc).alloc+0xe5>
 100ab5e:	48 89 10 	mov	qword ptr [rax], rdx
 100ab61:	48 8b 1d 30 cd 0e 00 	mov	rbx, qword ptr [rip + 970032]
 100ab68:	48 8b 70 08 	mov	rsi, qword ptr [rax + 8]
 100ab6c:	48 8d 14 1a 	lea	rdx, [rdx + rbx]
 100ab70:	48 8d 52 fe 	lea	rdx, [rdx - 2]
 100ab74:	48 f7 db 	neg	rbx
 100ab77:	48 21 da 	and	rdx, rbx
 100ab7a:	48 39 f2 	cmp	rdx, rsi
 100ab7d:	77 0f 	ja	15 <_runtime.(*linearAlloc).alloc+0x7e>
 100ab7f:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100ab84:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100ab89:	48 83 c4 30 	add	rsp, 48
 100ab8d:	c3 	ret
 100ab8e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100ab93:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 100ab98:	48 89 f0 	mov	rax, rsi
 100ab9b:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100ab9f:	48 29 c2 	sub	rdx, rax
 100aba2:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100aba7:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100abac:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100abb1:	e8 ea 63 00 00 	call	25578 <_runtime.sysMap>
 100abb6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100abbb:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 100abbf:	48 89 ca 	mov	rdx, rcx
 100abc2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100abc6:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 100abcb:	48 29 d1 	sub	rcx, rdx
 100abce:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100abd3:	c7 44 24 10 08 00 00 00 	mov	dword ptr [rsp + 16], 8
 100abdb:	e8 60 84 03 00 	call	230496 <_runtime.madvise>
 100abe0:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100abe5:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100abea:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 100abee:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100abf3:	eb 8a 	jmp	-118 <_runtime.(*linearAlloc).alloc+0x6f>
 100abf5:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 100abfe:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100ac03:	48 83 c4 30 	add	rsp, 48
 100ac07:	c3 	ret
 100ac08:	e8 c3 5f 04 00 	call	286659 <_runtime.morestack_noctxt>
 100ac0d:	e9 fe fe ff ff 	jmp	-258 <_runtime.(*linearAlloc).alloc>
 100ac12:	cc 	int3
 100ac13:	cc 	int3
 100ac14:	cc 	int3
 100ac15:	cc 	int3
 100ac16:	cc 	int3
 100ac17:	cc 	int3
 100ac18:	cc 	int3
 100ac19:	cc 	int3
 100ac1a:	cc 	int3
 100ac1b:	cc 	int3
 100ac1c:	cc 	int3
 100ac1d:	cc 	int3
 100ac1e:	cc 	int3
 100ac1f:	cc 	int3

_runtime.(*hmap).incrnoverflow:
 100ac20:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100ac25:	0f b6 50 09 	movzx	edx, byte ptr [rax + 9]
 100ac29:	80 fa 10 	cmp	dl, 16
 100ac2c:	72 68 	jb	104 <_runtime.(*hmap).incrnoverflow+0x76>
 100ac2e:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 100ac37:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 100ac3b:	8b b3 20 01 00 00 	mov	esi, dword ptr [rbx + 288]
 100ac41:	8b bb 24 01 00 00 	mov	edi, dword ptr [rbx + 292]
 100ac47:	89 bb 20 01 00 00 	mov	dword ptr [rbx + 288], edi
 100ac4d:	41 89 f0 	mov	r8d, esi
 100ac50:	c1 e6 11 	shl	esi, 17
 100ac53:	41 31 f0 	xor	r8d, esi
 100ac56:	89 fe 	mov	esi, edi
 100ac58:	44 31 c7 	xor	edi, r8d
 100ac5b:	41 c1 e8 07 	shr	r8d, 7
 100ac5f:	41 31 f8 	xor	r8d, edi
 100ac62:	89 f7 	mov	edi, esi
 100ac64:	c1 ee 10 	shr	esi, 16
 100ac67:	44 31 c6 	xor	esi, r8d
 100ac6a:	89 b3 24 01 00 00 	mov	dword ptr [rbx + 292], esi
 100ac70:	8d 4a f1 	lea	ecx, [rdx - 15]
 100ac73:	80 f9 20 	cmp	cl, 32
 100ac76:	19 d2 	sbb	edx, edx
 100ac78:	bb 01 00 00 00 	mov	ebx, 1
 100ac7d:	d3 e3 	shl	ebx, cl
 100ac7f:	21 d3 	and	ebx, edx
 100ac81:	8d 53 ff 	lea	edx, [rbx - 1]
 100ac84:	8d 1c 3e 	lea	ebx, [rsi + rdi]
 100ac87:	85 da 	test	edx, ebx
 100ac89:	75 0a 	jne	10 <_runtime.(*hmap).incrnoverflow+0x75>
 100ac8b:	0f b7 48 0a 	movzx	ecx, word ptr [rax + 10]
 100ac8f:	ff c1 	inc	ecx
 100ac91:	66 89 48 0a 	mov	word ptr [rax + 10], cx
 100ac95:	c3 	ret
 100ac96:	0f b7 48 0a 	movzx	ecx, word ptr [rax + 10]
 100ac9a:	ff c1 	inc	ecx
 100ac9c:	66 89 48 0a 	mov	word ptr [rax + 10], cx
 100aca0:	c3 	ret
 100aca1:	cc 	int3
 100aca2:	cc 	int3
 100aca3:	cc 	int3
 100aca4:	cc 	int3
 100aca5:	cc 	int3
 100aca6:	cc 	int3
 100aca7:	cc 	int3
 100aca8:	cc 	int3
 100aca9:	cc 	int3
 100acaa:	cc 	int3
 100acab:	cc 	int3
 100acac:	cc 	int3
 100acad:	cc 	int3
 100acae:	cc 	int3
 100acaf:	cc 	int3

_runtime.(*hmap).newoverflow:
 100acb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100acb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100acbd:	0f 86 b1 02 00 00 	jbe	689 <_runtime.(*hmap).newoverflow+0x2c4>
 100acc3:	48 83 ec 58 	sub	rsp, 88
 100acc7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 100accc:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 100acd1:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100acd6:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 100acda:	48 85 d2 	test	rdx, rdx
 100acdd:	0f 84 63 02 00 00 	je	611 <_runtime.(*hmap).newoverflow+0x296>
 100ace3:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 100ace7:	48 85 db 	test	rbx, rbx
 100acea:	0f 84 56 02 00 00 	je	598 <_runtime.(*hmap).newoverflow+0x296>
 100acf0:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100acf5:	44 0f b7 46 52 	movzx	r8d, word ptr [rsi + 82]
 100acfa:	49 89 d9 	mov	r9, rbx
 100acfd:	49 8d 3c 18 	lea	rdi, [r8 + rbx]
 100ad01:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 100ad05:	84 06 	test	byte ptr [rsi], al
 100ad07:	48 83 3f 00 	cmp	qword ptr [rdi], 0
 100ad0b:	0f 84 11 02 00 00 	je	529 <_runtime.(*hmap).newoverflow+0x272>
 100ad11:	90 	nop
 100ad12:	83 3d e7 cb 0e 00 00 	cmp	dword ptr [rip + 969703], 0
 100ad19:	0f 85 f7 01 00 00 	jne	503 <_runtime.(*hmap).newoverflow+0x266>
 100ad1f:	48 c7 07 00 00 00 00 	mov	qword ptr [rdi], 0
 100ad26:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 100ad2a:	84 02 	test	byte ptr [rdx], al
 100ad2c:	83 3d cd cb 0e 00 00 	cmp	dword ptr [rip + 969677], 0
 100ad33:	0f 85 cd 01 00 00 	jne	461 <_runtime.(*hmap).newoverflow+0x256>
 100ad39:	48 c7 42 10 00 00 00 00 	mov	qword ptr [rdx + 16], 0
 100ad41:	4c 89 4c 24 40 	mov	qword ptr [rsp + 64], r9
 100ad46:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100ad4a:	e8 d1 fe ff ff 	call	-303 <_runtime.(*hmap).incrnoverflow>
 100ad4f:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100ad54:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 100ad58:	48 83 79 08 00 	cmp	qword ptr [rcx + 8], 0
 100ad5d:	0f 85 99 01 00 00 	jne	409 <_runtime.(*hmap).newoverflow+0x24c>
 100ad63:	90 	nop
 100ad64:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100ad69:	48 83 79 28 00 	cmp	qword ptr [rcx + 40], 0
 100ad6e:	0f 84 47 01 00 00 	je	327 <_runtime.(*hmap).newoverflow+0x20b>
 100ad74:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 100ad78:	48 83 3a 00 	cmp	qword ptr [rdx], 0
 100ad7c:	0f 84 f0 00 00 00 	je	240 <_runtime.(*hmap).newoverflow+0x1c2>
 100ad82:	48 8b 49 28 	mov	rcx, qword ptr [rcx + 40]
 100ad86:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100ad89:	84 01 	test	byte ptr [rcx], al
 100ad8b:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 100ad8e:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 100ad92:	48 8b 72 08 	mov	rsi, qword ptr [rdx + 8]
 100ad96:	4c 8d 46 01 	lea	r8, [rsi + 1]
 100ad9a:	49 39 d8 	cmp	r8, rbx
 100ad9d:	77 6c 	ja	108 <_runtime.(*hmap).newoverflow+0x15b>
 100ad9f:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 100ada3:	48 89 5a 08 	mov	qword ptr [rdx + 8], rbx
 100ada7:	48 8d 3c f1 	lea	rdi, [rcx + 8*rsi]
 100adab:	83 3d 4e cb 0e 00 00 	cmp	dword ptr [rip + 969550], 0
 100adb2:	75 42 	jne	66 <_runtime.(*hmap).newoverflow+0x146>
 100adb4:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100adb9:	48 89 14 f1 	mov	qword ptr [rcx + 8*rsi], rdx
 100adbd:	0f b7 48 52 	movzx	ecx, word ptr [rax + 82]
 100adc1:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 100adc6:	48 8d 3c 19 	lea	rdi, [rcx + rbx]
 100adca:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 100adce:	84 07 	test	byte ptr [rdi], al
 100add0:	90 	nop
 100add1:	83 3d 28 cb 0e 00 00 	cmp	dword ptr [rip + 969512], 0
 100add8:	75 12 	jne	18 <_runtime.(*hmap).newoverflow+0x13c>
 100adda:	48 89 17 	mov	qword ptr [rdi], rdx
 100addd:	48 89 54 24 78 	mov	qword ptr [rsp + 120], rdx
 100ade2:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 100ade7:	48 83 c4 58 	add	rsp, 88
 100adeb:	c3 	ret
 100adec:	48 89 d0 	mov	rax, rdx
 100adef:	e8 ec 7b 04 00 	call	293868 <_runtime.gcWriteBarrier>
 100adf4:	eb e7 	jmp	-25 <_runtime.(*hmap).newoverflow+0x12d>
 100adf6:	48 89 c1 	mov	rcx, rax
 100adf9:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100adfe:	e8 dd 7b 04 00 	call	293853 <_runtime.gcWriteBarrier>
 100ae03:	48 89 c2 	mov	rdx, rax
 100ae06:	48 89 c8 	mov	rax, rcx
 100ae09:	eb b2 	jmp	-78 <_runtime.(*hmap).newoverflow+0x10d>
 100ae0b:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 100ae10:	48 8d 05 09 9a 05 00 	lea	rax, [rip + 367113]
 100ae17:	48 89 04 24 	mov	qword ptr [rsp], rax
 100ae1b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100ae20:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100ae25:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 100ae2a:	4c 89 44 24 20 	mov	qword ptr [rsp + 32], r8
 100ae2f:	e8 ec 1d 03 00 	call	204268 <_runtime.growslice>
 100ae34:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100ae39:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100ae3e:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100ae43:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 100ae48:	48 89 57 10 	mov	qword ptr [rdi + 16], rdx
 100ae4c:	83 3d ad ca 0e 00 00 	cmp	dword ptr [rip + 969389], 0
 100ae53:	75 16 	jne	22 <_runtime.(*hmap).newoverflow+0x1bb>
 100ae55:	48 89 07 	mov	qword ptr [rdi], rax
 100ae58:	48 89 fa 	mov	rdx, rdi
 100ae5b:	48 89 ce 	mov	rsi, rcx
 100ae5e:	48 89 c1 	mov	rcx, rax
 100ae61:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100ae66:	e9 34 ff ff ff 	jmp	-204 <_runtime.(*hmap).newoverflow+0xef>
 100ae6b:	e8 70 7b 04 00 	call	293744 <_runtime.gcWriteBarrier>
 100ae70:	eb e6 	jmp	-26 <_runtime.(*hmap).newoverflow+0x1a8>
 100ae72:	48 8d 05 e7 35 05 00 	lea	rax, [rip + 341479]
 100ae79:	48 89 04 24 	mov	qword ptr [rsp], rax
 100ae7d:	e8 7e f5 ff ff 	call	-2690 <_runtime.newobject>
 100ae82:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100ae87:	48 8b 78 28 	mov	rdi, qword ptr [rax + 40]
 100ae8b:	84 07 	test	byte ptr [rdi], al
 100ae8d:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100ae92:	83 3d 67 ca 0e 00 00 	cmp	dword ptr [rip + 969319], 0
 100ae99:	75 10 	jne	16 <_runtime.(*hmap).newoverflow+0x1fb>
 100ae9b:	48 89 0f 	mov	qword ptr [rdi], rcx
 100ae9e:	48 89 c1 	mov	rcx, rax
 100aea1:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100aea6:	e9 d7 fe ff ff 	jmp	-297 <_runtime.(*hmap).newoverflow+0xd2>
 100aeab:	48 89 c2 	mov	rdx, rax
 100aeae:	48 89 c8 	mov	rax, rcx
 100aeb1:	e8 2a 7b 04 00 	call	293674 <_runtime.gcWriteBarrier>
 100aeb6:	48 89 d0 	mov	rax, rdx
 100aeb9:	eb e3 	jmp	-29 <_runtime.(*hmap).newoverflow+0x1ee>
 100aebb:	48 8d 05 7e e6 05 00 	lea	rax, [rip + 386686]
 100aec2:	48 89 04 24 	mov	qword ptr [rsp], rax
 100aec6:	e8 35 f5 ff ff 	call	-2763 <_runtime.newobject>
 100aecb:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100aed0:	83 3d 29 ca 0e 00 00 	cmp	dword ptr [rip + 969257], 0
 100aed7:	75 13 	jne	19 <_runtime.(*hmap).newoverflow+0x23c>
 100aed9:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100aede:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 100aee2:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100aee7:	e9 88 fe ff ff 	jmp	-376 <_runtime.(*hmap).newoverflow+0xc4>
 100aeec:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100aef1:	48 8d 79 28 	lea	rdi, [rcx + 40]
 100aef5:	e8 e6 7a 04 00 	call	293606 <_runtime.gcWriteBarrier>
 100aefa:	eb e6 	jmp	-26 <_runtime.(*hmap).newoverflow+0x232>
 100aefc:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100af01:	e9 b7 fe ff ff 	jmp	-329 <_runtime.(*hmap).newoverflow+0x10d>
 100af06:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 100af0a:	31 c0 	xor	eax, eax
 100af0c:	e8 cf 7a 04 00 	call	293583 <_runtime.gcWriteBarrier>
 100af11:	e9 2b fe ff ff 	jmp	-469 <_runtime.(*hmap).newoverflow+0x91>
 100af16:	31 c0 	xor	eax, eax
 100af18:	e8 c3 7a 04 00 	call	293571 <_runtime.gcWriteBarrier>
 100af1d:	e9 04 fe ff ff 	jmp	-508 <_runtime.(*hmap).newoverflow+0x76>
 100af22:	4b 8d 04 01 	lea	rax, [r9 + r8]
 100af26:	83 3d d3 c9 0e 00 00 	cmp	dword ptr [rip + 969171], 0
 100af2d:	75 09 	jne	9 <_runtime.(*hmap).newoverflow+0x288>
 100af2f:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 100af33:	e9 09 fe ff ff 	jmp	-503 <_runtime.(*hmap).newoverflow+0x91>
 100af38:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 100af3c:	e8 9f 7a 04 00 	call	293535 <_runtime.gcWriteBarrier>
 100af41:	e9 fb fd ff ff 	jmp	-517 <_runtime.(*hmap).newoverflow+0x91>
 100af46:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100af4b:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 100af4f:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100af52:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100af56:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100af5b:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100af60:	e8 4b e9 ff ff 	call	-5813 <_runtime.mallocgc>
 100af65:	4c 8b 4c 24 18 	mov	r9, qword ptr [rsp + 24]
 100af6a:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100af6f:	e9 cd fd ff ff 	jmp	-563 <_runtime.(*hmap).newoverflow+0x91>
 100af74:	e8 57 5c 04 00 	call	285783 <_runtime.morestack_noctxt>
 100af79:	e9 32 fd ff ff 	jmp	-718 <_runtime.(*hmap).newoverflow>
 100af7e:	cc 	int3
 100af7f:	cc 	int3

_runtime.makemap:
 100af80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100af89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100af8d:	0f 86 a7 01 00 00 	jbe	423 <_runtime.makemap+0x1ba>
 100af93:	48 83 ec 40 	sub	rsp, 64
 100af97:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 100af9c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 100afa1:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 100afa6:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 100afaa:	48 8b 03 	mov	rax, qword ptr [rbx]
 100afad:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 100afb2:	48 f7 e3 	mul	rbx
 100afb5:	0f 81 64 01 00 00 	jno	356 <_runtime.makemap+0x19f>
 100afbb:	31 c0 	xor	eax, eax
 100afbd:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 100afc2:	48 85 d2 	test	rdx, rdx
 100afc5:	0f 84 30 01 00 00 	je	304 <_runtime.makemap+0x17b>
 100afcb:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 100afd4:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 100afd8:	8b b3 20 01 00 00 	mov	esi, dword ptr [rbx + 288]
 100afde:	8b bb 24 01 00 00 	mov	edi, dword ptr [rbx + 292]
 100afe4:	89 bb 20 01 00 00 	mov	dword ptr [rbx + 288], edi
 100afea:	41 89 f0 	mov	r8d, esi
 100afed:	c1 e6 11 	shl	esi, 17
 100aff0:	44 31 c6 	xor	esi, r8d
 100aff3:	41 89 f8 	mov	r8d, edi
 100aff6:	31 f7 	xor	edi, esi
 100aff8:	c1 ee 07 	shr	esi, 7
 100affb:	31 fe 	xor	esi, edi
 100affd:	44 89 c7 	mov	edi, r8d
 100b000:	41 c1 e8 10 	shr	r8d, 16
 100b004:	41 31 f0 	xor	r8d, esi
 100b007:	44 89 83 24 01 00 00 	mov	dword ptr [rbx + 292], r8d
 100b00e:	42 8d 1c 07 	lea	ebx, [rdi + r8]
 100b012:	89 5a 0c 	mov	dword ptr [rdx + 12], ebx
 100b015:	31 c9 	xor	ecx, ecx
 100b017:	eb 02 	jmp	2 <_runtime.makemap+0x9b>
 100b019:	ff c1 	inc	ecx
 100b01b:	48 83 f8 08 	cmp	rax, 8
 100b01f:	7e 18 	jle	24 <_runtime.makemap+0xb9>
 100b021:	bb 01 00 00 00 	mov	ebx, 1
 100b026:	48 d3 e3 	shl	rbx, cl
 100b029:	48 d1 eb 	shr	rbx
 100b02c:	48 8d 34 5b 	lea	rsi, [rbx + 2*rbx]
 100b030:	48 8d 1c b3 	lea	rbx, [rbx + 4*rsi]
 100b034:	48 39 d8 	cmp	rax, rbx
 100b037:	77 e0 	ja	-32 <_runtime.makemap+0x99>
 100b039:	88 4a 09 	mov	byte ptr [rdx + 9], cl
 100b03c:	84 c9 	test	cl, cl
 100b03e:	75 0f 	jne	15 <_runtime.makemap+0xcf>
 100b040:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 100b045:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 100b04a:	48 83 c4 40 	add	rsp, 64
 100b04e:	c3 	ret
 100b04f:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 100b054:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100b059:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b05d:	88 4c 24 08 	mov	byte ptr [rsp + 8], cl
 100b061:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 100b06a:	e8 e1 00 00 00 	call	225 <_runtime.makeBucketArray>
 100b06f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100b074:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100b079:	83 3d 80 c8 0e 00 00 	cmp	dword ptr [rip + 968832], 0
 100b080:	75 69 	jne	105 <_runtime.makemap+0x16b>
 100b082:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 100b087:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 100b08b:	48 85 c9 	test	rcx, rcx
 100b08e:	74 b0 	je	-80 <_runtime.makemap+0xc0>
 100b090:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 100b095:	48 8d 05 a4 e4 05 00 	lea	rax, [rip + 386212]
 100b09c:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b0a0:	e8 5b f3 ff ff 	call	-3237 <_runtime.newobject>
 100b0a5:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100b0aa:	83 3d 4f c8 0e 00 00 	cmp	dword ptr [rip + 968783], 0
 100b0b1:	75 1a 	jne	26 <_runtime.makemap+0x14d>
 100b0b3:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100b0b8:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 100b0bc:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100b0c1:	48 89 50 10 	mov	qword ptr [rax + 16], rdx
 100b0c5:	48 89 ca 	mov	rdx, rcx
 100b0c8:	e9 73 ff ff ff 	jmp	-141 <_runtime.makemap+0xc0>
 100b0cd:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100b0d2:	48 8d 79 28 	lea	rdi, [rcx + 40]
 100b0d6:	e8 05 79 04 00 	call	293125 <_runtime.gcWriteBarrier>
 100b0db:	48 8d 78 10 	lea	rdi, [rax + 16]
 100b0df:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100b0e4:	e8 f7 78 04 00 	call	293111 <_runtime.gcWriteBarrier>
 100b0e9:	eb da 	jmp	-38 <_runtime.makemap+0x145>
 100b0eb:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 100b0f0:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 100b0f4:	e8 e7 78 04 00 	call	293095 <_runtime.gcWriteBarrier>
 100b0f9:	eb 90 	jmp	-112 <_runtime.makemap+0x10b>
 100b0fb:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100b100:	48 8d 05 b9 2c 06 00 	lea	rax, [rip + 404665]
 100b107:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b10b:	e8 f0 f2 ff ff 	call	-3344 <_runtime.newobject>
 100b110:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 100b115:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100b11a:	e9 ac fe ff ff 	jmp	-340 <_runtime.makemap+0x4b>
 100b11f:	48 ba 00 00 00 00 00 00 01 00 	movabs	rdx, 281474976710656
 100b129:	48 39 d0 	cmp	rax, rdx
 100b12c:	0f 87 89 fe ff ff 	ja	-375 <_runtime.makemap+0x3b>
 100b132:	48 89 d8 	mov	rax, rbx
 100b135:	e9 83 fe ff ff 	jmp	-381 <_runtime.makemap+0x3d>
 100b13a:	e8 91 5a 04 00 	call	285329 <_runtime.morestack_noctxt>
 100b13f:	e9 3c fe ff ff 	jmp	-452 <_runtime.makemap>
 100b144:	cc 	int3
 100b145:	cc 	int3
 100b146:	cc 	int3
 100b147:	cc 	int3
 100b148:	cc 	int3
 100b149:	cc 	int3
 100b14a:	cc 	int3
 100b14b:	cc 	int3
 100b14c:	cc 	int3
 100b14d:	cc 	int3
 100b14e:	cc 	int3
 100b14f:	cc 	int3

_runtime.makeBucketArray:
 100b150:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100b159:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100b15d:	0f 86 21 02 00 00 	jbe	545 <_runtime.makeBucketArray+0x234>
 100b163:	48 83 ec 30 	sub	rsp, 48
 100b167:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100b16c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100b171:	0f b6 4c 24 40 	movzx	ecx, byte ptr [rsp + 64]
 100b176:	ba 01 00 00 00 	mov	edx, 1
 100b17b:	48 d3 e2 	shl	rdx, cl
 100b17e:	80 f9 04 	cmp	cl, 4
 100b181:	0f 82 bf 01 00 00 	jb	447 <_runtime.makeBucketArray+0x1f6>
 100b187:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 100b18c:	48 8b 73 40 	mov	rsi, qword ptr [rbx + 64]
 100b190:	83 c1 fc 	add	ecx, -4
 100b193:	bf 01 00 00 00 	mov	edi, 1
 100b198:	48 d3 e7 	shl	rdi, cl
 100b19b:	48 01 d7 	add	rdi, rdx
 100b19e:	48 8b 36 	mov	rsi, qword ptr [rsi]
 100b1a1:	49 89 f8 	mov	r8, rdi
 100b1a4:	48 0f af fe 	imul	rdi, rsi
 100b1a8:	48 81 ff 00 80 00 00 	cmp	rdi, 32768
 100b1af:	0f 83 69 01 00 00 	jae	361 <_runtime.makeBucketArray+0x1ce>
 100b1b5:	48 81 ff f8 03 00 00 	cmp	rdi, 1016
 100b1bc:	0f 87 26 01 00 00 	ja	294 <_runtime.makeBucketArray+0x198>
 100b1c2:	48 8d 47 07 	lea	rax, [rdi + 7]
 100b1c6:	48 c1 e8 03 	shr	rax, 3
 100b1ca:	48 3d 81 00 00 00 	cmp	rax, 129
 100b1d0:	0f 83 a3 01 00 00 	jae	419 <_runtime.makeBucketArray+0x229>
 100b1d6:	4c 8d 0d 83 02 0c 00 	lea	r9, [rip + 787075]
 100b1dd:	42 0f b6 04 08 	movzx	eax, byte ptr [rax + r9]
 100b1e2:	48 83 f8 43 	cmp	rax, 67
 100b1e6:	0f 83 83 01 00 00 	jae	387 <_runtime.makeBucketArray+0x21f>
 100b1ec:	48 8d 0d 0d 03 0c 00 	lea	rcx, [rip + 787213]
 100b1f3:	0f b7 0c 41 	movzx	ecx, word ptr [rcx + 2*rax]
 100b1f7:	48 39 f9 	cmp	rcx, rdi
 100b1fa:	0f 84 dd 00 00 00 	je	221 <_runtime.makeBucketArray+0x18d>
 100b200:	48 85 f6 	test	rsi, rsi
 100b203:	0f 84 4d 01 00 00 	je	333 <_runtime.makeBucketArray+0x206>
 100b209:	48 89 c8 	mov	rax, rcx
 100b20c:	48 89 d1 	mov	rcx, rdx
 100b20f:	31 d2 	xor	edx, edx
 100b211:	48 f7 f6 	div	rsi
 100b214:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100b219:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100b21e:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 100b223:	48 85 d2 	test	rdx, rdx
 100b226:	0f 84 95 00 00 00 	je	149 <_runtime.makeBucketArray+0x171>
 100b22c:	48 8b 73 40 	mov	rsi, qword ptr [rbx + 64]
 100b230:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 100b233:	48 0f af f8 	imul	rdi, rax
 100b237:	48 83 7e 08 00 	cmp	qword ptr [rsi + 8], 0
 100b23c:	74 73 	je	115 <_runtime.makeBucketArray+0x161>
 100b23e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100b242:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 100b247:	e8 94 21 00 00 	call	8596 <_runtime.memclrHasPointers>
 100b24c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100b251:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 100b256:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100b25b:	48 39 d1 	cmp	rcx, rdx
 100b25e:	74 4d 	je	77 <_runtime.makeBucketArray+0x15d>
 100b260:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 100b265:	0f b7 5b 52 	movzx	ebx, word ptr [rbx + 82]
 100b269:	48 ff c9 	dec	rcx
 100b26c:	48 0f af cb 	imul	rcx, rbx
 100b270:	48 01 c1 	add	rcx, rax
 100b273:	48 8d 3c 19 	lea	rdi, [rcx + rbx]
 100b277:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 100b27b:	84 07 	test	byte ptr [rdi], al
 100b27d:	48 0f af da 	imul	rbx, rdx
 100b281:	90 	nop
 100b282:	48 8d 0c 18 	lea	rcx, [rax + rbx]
 100b286:	83 3d 73 c6 0e 00 00 	cmp	dword ptr [rip + 968307], 0
 100b28d:	75 17 	jne	23 <_runtime.makeBucketArray+0x156>
 100b28f:	48 89 07 	mov	qword ptr [rdi], rax
 100b292:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 100b297:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100b29c:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100b2a1:	48 83 c4 30 	add	rsp, 48
 100b2a5:	c3 	ret
 100b2a6:	e8 35 77 04 00 	call	292661 <_runtime.gcWriteBarrier>
 100b2ab:	eb e5 	jmp	-27 <_runtime.makeBucketArray+0x142>
 100b2ad:	31 c9 	xor	ecx, ecx
 100b2af:	eb e1 	jmp	-31 <_runtime.makeBucketArray+0x142>
 100b2b1:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100b2b5:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 100b2ba:	e8 01 86 04 00 	call	296449 <_runtime.memclrNoHeapPointers>
 100b2bf:	eb 8b 	jmp	-117 <_runtime.makeBucketArray+0xfc>
 100b2c1:	48 8b 4b 40 	mov	rcx, qword ptr [rbx + 64]
 100b2c5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100b2c9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100b2ce:	e8 8d f1 ff ff 	call	-3699 <_runtime.newarray>
 100b2d3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100b2d8:	e9 74 ff ff ff 	jmp	-140 <_runtime.makeBucketArray+0x101>
 100b2dd:	48 89 d1 	mov	rcx, rdx
 100b2e0:	4c 89 c0 	mov	rax, r8
 100b2e3:	e9 2c ff ff ff 	jmp	-212 <_runtime.makeBucketArray+0xc4>
 100b2e8:	48 8d 87 7f fc ff ff 	lea	rax, [rdi - 897]
 100b2ef:	48 c1 e8 07 	shr	rax, 7
 100b2f3:	48 3d f9 00 00 00 	cmp	rax, 249
 100b2f9:	73 6a 	jae	106 <_runtime.makeBucketArray+0x215>
 100b2fb:	4c 8d 0d 9e 02 0c 00 	lea	r9, [rip + 787102]
 100b302:	42 0f b6 04 08 	movzx	eax, byte ptr [rax + r9]
 100b307:	48 83 f8 43 	cmp	rax, 67
 100b30b:	73 4e 	jae	78 <_runtime.makeBucketArray+0x20b>
 100b30d:	4c 8d 0d ec 01 0c 00 	lea	r9, [rip + 786924]
 100b314:	41 0f b7 0c 41 	movzx	ecx, word ptr [r9 + 2*rax]
 100b319:	e9 d9 fe ff ff 	jmp	-295 <_runtime.makeBucketArray+0xa7>
 100b31e:	48 8d 8f 00 20 00 00 	lea	rcx, [rdi + 8192]
 100b325:	48 39 f9 	cmp	rcx, rdi
 100b328:	73 08 	jae	8 <_runtime.makeBucketArray+0x1e2>
 100b32a:	48 89 f9 	mov	rcx, rdi
 100b32d:	e9 c5 fe ff ff 	jmp	-315 <_runtime.makeBucketArray+0xa7>
 100b332:	90 	nop
 100b333:	48 8d 8f ff 1f 00 00 	lea	rcx, [rdi + 8191]
 100b33a:	48 81 e1 00 e0 ff ff 	and	rcx, -8192
 100b341:	e9 b1 fe ff ff 	jmp	-335 <_runtime.makeBucketArray+0xa7>
 100b346:	48 89 d1 	mov	rcx, rdx
 100b349:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 100b34e:	48 89 c8 	mov	rax, rcx
 100b351:	e9 be fe ff ff 	jmp	-322 <_runtime.makeBucketArray+0xc4>
 100b356:	e8 e5 bf 01 00 	call	114661 <_runtime.panicdivide>
 100b35b:	b9 43 00 00 00 	mov	ecx, 67
 100b360:	e8 eb 7f 04 00 	call	294891 <_runtime.panicIndex>
 100b365:	b9 f9 00 00 00 	mov	ecx, 249
 100b36a:	e8 f1 7f 04 00 	call	294897 <_runtime.panicIndexU>
 100b36f:	b9 43 00 00 00 	mov	ecx, 67
 100b374:	e8 d7 7f 04 00 	call	294871 <_runtime.panicIndex>
 100b379:	b9 81 00 00 00 	mov	ecx, 129
 100b37e:	e8 dd 7f 04 00 	call	294877 <_runtime.panicIndexU>
 100b383:	90 	nop
 100b384:	e8 47 58 04 00 	call	284743 <_runtime.morestack_noctxt>
 100b389:	e9 c2 fd ff ff 	jmp	-574 <_runtime.makeBucketArray>
 100b38e:	cc 	int3
 100b38f:	cc 	int3

_runtime.mapaccess2:
 100b390:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100b399:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100b39d:	0f 86 46 02 00 00 	jbe	582 <_runtime.mapaccess2+0x259>
 100b3a3:	48 83 ec 38 	sub	rsp, 56
 100b3a7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100b3ac:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 100b3b1:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100b3b6:	48 85 c0 	test	rax, rax
 100b3b9:	0f 84 ca 01 00 00 	je	458 <_runtime.mapaccess2+0x1f9>
 100b3bf:	48 83 38 00 	cmp	qword ptr [rax], 0
 100b3c3:	0f 84 c0 01 00 00 	je	448 <_runtime.mapaccess2+0x1f9>
 100b3c9:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 100b3cd:	f6 c1 04 	test	cl, 4
 100b3d0:	0f 85 f9 01 00 00 	jne	505 <_runtime.mapaccess2+0x23f>
 100b3d6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 100b3db:	48 8b 51 48 	mov	rdx, qword ptr [rcx + 72]
 100b3df:	8b 58 0c 	mov	ebx, dword ptr [rax + 12]
 100b3e2:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100b3e7:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100b3eb:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100b3f0:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100b3f3:	ff d3 	call	rbx
 100b3f5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100b3fa:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 100b3ff:	0f b6 59 09 	movzx	ebx, byte ptr [rcx + 9]
 100b403:	48 89 ca 	mov	rdx, rcx
 100b406:	89 d9 	mov	ecx, ebx
 100b408:	be 01 00 00 00 	mov	esi, 1
 100b40d:	48 d3 e6 	shl	rsi, cl
 100b410:	48 8d 4e ff 	lea	rcx, [rsi - 1]
 100b414:	48 89 cb 	mov	rbx, rcx
 100b417:	48 21 c1 	and	rcx, rax
 100b41a:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 100b41f:	0f b7 7e 52 	movzx	edi, word ptr [rsi + 82]
 100b423:	48 0f af cf 	imul	rcx, rdi
 100b427:	48 03 4a 10 	add	rcx, qword ptr [rdx + 16]
 100b42b:	4c 8b 42 18 	mov	r8, qword ptr [rdx + 24]
 100b42f:	4d 85 c0 	test	r8, r8
 100b432:	74 31 	je	49 <_runtime.mapaccess2+0xd5>
 100b434:	44 0f b6 4a 08 	movzx	r9d, byte ptr [rdx + 8]
 100b439:	41 f6 c1 08 	test	r9b, 8
 100b43d:	0f 84 3e 01 00 00 	je	318 <_runtime.mapaccess2+0x1f1>
 100b443:	48 21 c3 	and	rbx, rax
 100b446:	48 0f af df 	imul	rbx, rdi
 100b44a:	49 8d 3c 18 	lea	rdi, [r8 + rbx]
 100b44e:	41 0f b6 1c 18 	movzx	ebx, byte ptr [r8 + rbx]
 100b453:	80 fb 01 	cmp	bl, 1
 100b456:	0f 86 1d 01 00 00 	jbe	285 <_runtime.mapaccess2+0x1e9>
 100b45c:	80 fb 05 	cmp	bl, 5
 100b45f:	0f 83 14 01 00 00 	jae	276 <_runtime.mapaccess2+0x1e9>
 100b465:	48 c1 e8 38 	shr	rax, 56
 100b469:	3c 05 	cmp	al, 5
 100b46b:	73 03 	jae	3 <_runtime.mapaccess2+0xe0>
 100b46d:	83 c0 05 	add	eax, 5
 100b470:	88 44 24 1f 	mov	byte ptr [rsp + 31], al
 100b474:	e9 eb 00 00 00 	jmp	235 <_runtime.mapaccess2+0x1d4>
 100b479:	48 ff c2 	inc	rdx
 100b47c:	48 83 fa 08 	cmp	rdx, 8
 100b480:	0f 83 cf 00 00 00 	jae	207 <_runtime.mapaccess2+0x1c5>
 100b486:	0f b6 1c 0a 	movzx	ebx, byte ptr [rdx + rcx]
 100b48a:	38 d8 	cmp	al, bl
 100b48c:	74 1f 	je	31 <_runtime.mapaccess2+0x11d>
 100b48e:	84 db 	test	bl, bl
 100b490:	75 e7 	jne	-25 <_runtime.mapaccess2+0xe9>
 100b492:	48 8d 05 87 cd 0e 00 	lea	rax, [rip + 970119]
 100b499:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100b49e:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 100b4a3:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100b4a8:	48 83 c4 38 	add	rsp, 56
 100b4ac:	c3 	ret
 100b4ad:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 100b4b2:	0f b6 5e 50 	movzx	ebx, byte ptr [rsi + 80]
 100b4b6:	48 0f af da 	imul	rbx, rdx
 100b4ba:	48 8d 0c 0b 	lea	rcx, [rbx + rcx]
 100b4be:	48 8d 49 08 	lea	rcx, [rcx + 8]
 100b4c2:	8b 5e 54 	mov	ebx, dword ptr [rsi + 84]
 100b4c5:	0f ba e3 00 	bt	ebx, 0
 100b4c9:	73 03 	jae	3 <_runtime.mapaccess2+0x13e>
 100b4cb:	48 8b 09 	mov	rcx, qword ptr [rcx]
 100b4ce:	48 8b 46 30 	mov	rax, qword ptr [rsi + 48]
 100b4d2:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 100b4d6:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100b4db:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b4df:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100b4e4:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 100b4e7:	ff d1 	call	rcx
 100b4e9:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 100b4ee:	75 19 	jne	25 <_runtime.mapaccess2+0x179>
 100b4f0:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 100b4f5:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100b4fa:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100b4ff:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 100b504:	e9 70 ff ff ff 	jmp	-144 <_runtime.mapaccess2+0xe9>
 100b509:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100b50e:	0f b6 48 50 	movzx	ecx, byte ptr [rax + 80]
 100b512:	0f b6 50 51 	movzx	edx, byte ptr [rax + 81]
 100b516:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 100b51b:	48 0f af d3 	imul	rdx, rbx
 100b51f:	48 8d 0c ca 	lea	rcx, [rdx + 8*rcx]
 100b523:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 100b528:	48 8d 0c 11 	lea	rcx, [rcx + rdx]
 100b52c:	48 8d 49 08 	lea	rcx, [rcx + 8]
 100b530:	8b 40 54 	mov	eax, dword ptr [rax + 84]
 100b533:	0f ba e0 01 	bt	eax, 1
 100b537:	73 17 	jae	23 <_runtime.mapaccess2+0x1c0>
 100b539:	48 8b 01 	mov	rax, qword ptr [rcx]
 100b53c:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100b541:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 100b546:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100b54b:	48 83 c4 38 	add	rsp, 56
 100b54f:	c3 	ret
 100b550:	48 89 c8 	mov	rax, rcx
 100b553:	eb e7 	jmp	-25 <_runtime.mapaccess2+0x1ac>
 100b555:	0f b7 5e 52 	movzx	ebx, word ptr [rsi + 82]
 100b559:	48 8d 1c 19 	lea	rbx, [rcx + rbx]
 100b55d:	48 8d 5b f8 	lea	rbx, [rbx - 8]
 100b561:	48 8b 0b 	mov	rcx, qword ptr [rbx]
 100b564:	48 85 c9 	test	rcx, rcx
 100b567:	0f 84 25 ff ff ff 	je	-219 <_runtime.mapaccess2+0x102>
 100b56d:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 100b572:	31 d2 	xor	edx, edx
 100b574:	e9 03 ff ff ff 	jmp	-253 <_runtime.mapaccess2+0xec>
 100b579:	48 89 f9 	mov	rcx, rdi
 100b57c:	e9 e4 fe ff ff 	jmp	-284 <_runtime.mapaccess2+0xd5>
 100b581:	48 d1 eb 	shr	rbx
 100b584:	e9 ba fe ff ff 	jmp	-326 <_runtime.mapaccess2+0xb3>
 100b589:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100b58e:	8b 48 54 	mov	ecx, dword ptr [rax + 84]
 100b591:	0f ba e1 04 	bt	ecx, 4
 100b595:	72 1b 	jb	27 <_runtime.mapaccess2+0x222>
 100b597:	48 8d 05 82 cc 0e 00 	lea	rax, [rip + 969858]
 100b59e:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100b5a3:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 100b5a8:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100b5ad:	48 83 c4 38 	add	rsp, 56
 100b5b1:	c3 	ret
 100b5b2:	48 8b 50 48 	mov	rdx, qword ptr [rax + 72]
 100b5b6:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100b5bb:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b5bf:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100b5c8:	48 8b 02 	mov	rax, qword ptr [rdx]
 100b5cb:	ff d0 	call	rax
 100b5cd:	eb c8 	jmp	-56 <_runtime.mapaccess2+0x207>
 100b5cf:	48 8d 05 2d a8 06 00 	lea	rax, [rip + 436269]
 100b5d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b5da:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 100b5e3:	e8 78 d7 01 00 	call	120696 <_runtime.throw>
 100b5e8:	90 	nop
 100b5e9:	e8 e2 55 04 00 	call	284130 <_runtime.morestack_noctxt>
 100b5ee:	e9 9d fd ff ff 	jmp	-611 <_runtime.mapaccess2>
 100b5f3:	cc 	int3
 100b5f4:	cc 	int3
 100b5f5:	cc 	int3
 100b5f6:	cc 	int3
 100b5f7:	cc 	int3
 100b5f8:	cc 	int3
 100b5f9:	cc 	int3
 100b5fa:	cc 	int3
 100b5fb:	cc 	int3
 100b5fc:	cc 	int3
 100b5fd:	cc 	int3
 100b5fe:	cc 	int3
 100b5ff:	cc 	int3

_runtime.mapassign:
 100b600:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100b609:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100b60d:	0f 86 a7 05 00 00 	jbe	1447 <_runtime.mapassign+0x5ba>
 100b613:	48 83 ec 78 	sub	rsp, 120
 100b617:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 100b61c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 100b621:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100b629:	48 85 c0 	test	rax, rax
 100b62c:	0f 84 6b 05 00 00 	je	1387 <_runtime.mapassign+0x59d>
 100b632:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 100b636:	f6 c1 04 	test	cl, 4
 100b639:	0f 85 45 05 00 00 	jne	1349 <_runtime.mapassign+0x584>
 100b63f:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 100b647:	48 8b 51 48 	mov	rdx, qword ptr [rcx + 72]
 100b64b:	8b 58 0c 	mov	ebx, dword ptr [rax + 12]
 100b64e:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 100b656:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100b65a:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100b65f:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100b662:	ff d3 	call	rbx
 100b664:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100b669:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100b66e:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 100b676:	0f b6 59 08 	movzx	ebx, byte ptr [rcx + 8]
 100b67a:	83 f3 04 	xor	ebx, 4
 100b67d:	88 59 08 	mov	byte ptr [rcx + 8], bl
 100b680:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 100b685:	0f 84 84 04 00 00 	je	1156 <_runtime.mapassign+0x50f>
 100b68b:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100b693:	e9 b0 00 00 00 	jmp	176 <_runtime.mapassign+0x148>
 100b698:	49 ff c2 	inc	r10
 100b69b:	49 83 fa 08 	cmp	r10, 8
 100b69f:	0f 83 06 04 00 00 	jae	1030 <_runtime.mapassign+0x4ab>
 100b6a5:	84 06 	test	byte ptr [rsi], al
 100b6a7:	46 0f b6 1c 16 	movzx	r11d, byte ptr [rsi + r10]
 100b6ac:	4e 8d 24 16 	lea	r12, [rsi + r10]
 100b6b0:	44 38 d8 	cmp	al, r11b
 100b6b3:	0f 84 ef 02 00 00 	je	751 <_runtime.mapassign+0x3a8>
 100b6b9:	41 80 fb 01 	cmp	r11b, 1
 100b6bd:	77 09 	ja	9 <_runtime.mapassign+0xc8>
 100b6bf:	48 85 c9 	test	rcx, rcx
 100b6c2:	0f 84 a5 02 00 00 	je	677 <_runtime.mapassign+0x36d>
 100b6c8:	45 84 db 	test	r11b, r11b
 100b6cb:	75 cb 	jne	-53 <_runtime.mapassign+0x98>
 100b6cd:	48 83 7a 18 00 	cmp	qword ptr [rdx + 24], 0
 100b6d2:	0f 85 8d 02 00 00 	jne	653 <_runtime.mapassign+0x365>
 100b6d8:	4c 8b 12 	mov	r10, qword ptr [rdx]
 100b6db:	49 ff c2 	inc	r10
 100b6de:	44 0f b6 5a 09 	movzx	r11d, byte ptr [rdx + 9]
 100b6e3:	49 83 fa 08 	cmp	r10, 8
 100b6e7:	0f 8e 6d 02 00 00 	jle	621 <_runtime.mapassign+0x35a>
 100b6ed:	49 89 cc 	mov	r12, rcx
 100b6f0:	44 89 d9 	mov	ecx, r11d
 100b6f3:	41 bd 01 00 00 00 	mov	r13d, 1
 100b6f9:	49 d3 e5 	shl	r13, cl
 100b6fc:	49 d1 ed 	shr	r13
 100b6ff:	4f 8d 74 6d 00 	lea	r14, [r13 + 2*r13]
 100b704:	4f 8d 6c b5 00 	lea	r13, [r13 + 4*r14]
 100b709:	4d 39 ea 	cmp	r10, r13
 100b70c:	0f 86 84 00 00 00 	jbe	132 <_runtime.mapassign+0x196>
 100b712:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100b716:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100b71b:	e8 b0 04 00 00 	call	1200 <_runtime.hashGrow>
 100b720:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100b728:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 100b730:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100b735:	48 89 d0 	mov	rax, rdx
 100b738:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 100b740:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100b748:	0f b6 71 09 	movzx	esi, byte ptr [rcx + 9]
 100b74c:	48 89 ca 	mov	rdx, rcx
 100b74f:	89 f1 	mov	ecx, esi
 100b751:	bf 01 00 00 00 	mov	edi, 1
 100b756:	48 d3 e7 	shl	rdi, cl
 100b759:	48 8d 77 ff 	lea	rsi, [rdi - 1]
 100b75d:	48 21 c6 	and	rsi, rax
 100b760:	48 83 7a 18 00 	cmp	qword ptr [rdx + 24], 0
 100b765:	0f 85 6d 03 00 00 	jne	877 <_runtime.mapassign+0x4d8>
 100b76b:	0f b7 7b 52 	movzx	edi, word ptr [rbx + 82]
 100b76f:	48 0f af f7 	imul	rsi, rdi
 100b773:	48 03 72 10 	add	rsi, qword ptr [rdx + 16]
 100b777:	48 89 c7 	mov	rdi, rax
 100b77a:	48 c1 e8 38 	shr	rax, 56
 100b77e:	3c 05 	cmp	al, 5
 100b780:	73 03 	jae	3 <_runtime.mapassign+0x185>
 100b782:	83 c0 05 	add	eax, 5
 100b785:	88 44 24 27 	mov	byte ptr [rsp + 39], al
 100b789:	31 c9 	xor	ecx, ecx
 100b78b:	45 31 c0 	xor	r8d, r8d
 100b78e:	45 31 c9 	xor	r9d, r9d
 100b791:	e9 2d 03 00 00 	jmp	813 <_runtime.mapassign+0x4c3>
 100b796:	44 0f b7 52 0a 	movzx	r10d, word ptr [rdx + 10]
 100b79b:	80 f9 0f 	cmp	cl, 15
 100b79e:	76 05 	jbe	5 <_runtime.mapassign+0x1a5>
 100b7a0:	b9 0f 00 00 00 	mov	ecx, 15
 100b7a5:	83 e1 0f 	and	ecx, 15
 100b7a8:	41 bb 01 00 00 00 	mov	r11d, 1
 100b7ae:	41 d3 e3 	shl	r11d, cl
 100b7b1:	66 45 39 da 	cmp	r10w, r11w
 100b7b5:	0f 83 57 ff ff ff 	jae	-169 <_runtime.mapassign+0x112>
 100b7bb:	4d 85 e4 	test	r12, r12
 100b7be:	0f 84 4e 01 00 00 	je	334 <_runtime.mapassign+0x312>
 100b7c4:	4c 89 4c 24 58 	mov	qword ptr [rsp + 88], r9
 100b7c9:	4c 89 64 24 50 	mov	qword ptr [rsp + 80], r12
 100b7ce:	8b 4b 54 	mov	ecx, dword ptr [rbx + 84]
 100b7d1:	0f ba e1 00 	bt	ecx, 0
 100b7d5:	0f 82 d2 00 00 00 	jb	210 <_runtime.mapassign+0x2ad>
 100b7db:	8b 4b 54 	mov	ecx, dword ptr [rbx + 84]
 100b7de:	0f ba e1 01 	bt	ecx, 1
 100b7e2:	72 79 	jb	121 <_runtime.mapassign+0x25d>
 100b7e4:	48 8b 43 30 	mov	rax, qword ptr [rbx + 48]
 100b7e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b7ec:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 100b7f1:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 100b7f9:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100b7fe:	e8 dd 18 00 00 	call	6365 <_runtime.typedmemmove>
 100b803:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 100b808:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 100b80d:	88 01 	mov	byte ptr [rcx], al
 100b80f:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100b817:	48 ff 00 	inc	qword ptr [rax]
 100b81a:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100b81f:	0f b6 50 08 	movzx	edx, byte ptr [rax + 8]
 100b823:	f6 c2 04 	test	dl, 4
 100b826:	0f 84 3f 03 00 00 	je	831 <_runtime.mapassign+0x56b>
 100b82c:	83 e2 fb 	and	edx, -5
 100b82f:	88 50 08 	mov	byte ptr [rax + 8], dl
 100b832:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100b83a:	8b 40 54 	mov	eax, dword ptr [rax + 84]
 100b83d:	0f ba e0 01 	bt	eax, 1
 100b841:	73 15 	jae	21 <_runtime.mapassign+0x258>
 100b843:	48 8b 01 	mov	rax, qword ptr [rcx]
 100b846:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 100b84e:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 100b853:	48 83 c4 78 	add	rsp, 120
 100b857:	c3 	ret
 100b858:	48 89 c8 	mov	rax, rcx
 100b85b:	eb e9 	jmp	-23 <_runtime.mapassign+0x246>
 100b85d:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 100b862:	48 8b 43 38 	mov	rax, qword ptr [rbx + 56]
 100b866:	48 8b 08 	mov	rcx, qword ptr [rax]
 100b869:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100b86d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100b872:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100b877:	e8 34 e0 ff ff 	call	-8140 <_runtime.mallocgc>
 100b87c:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 100b881:	84 07 	test	byte ptr [rdi], al
 100b883:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100b888:	83 3d 71 c0 0e 00 00 	cmp	dword ptr [rip + 966769], 0
 100b88f:	75 15 	jne	21 <_runtime.mapassign+0x2a6>
 100b891:	48 89 07 	mov	qword ptr [rdi], rax
 100b894:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100b89c:	4c 8b 44 24 48 	mov	r8, qword ptr [rsp + 72]
 100b8a1:	e9 3e ff ff ff 	jmp	-194 <_runtime.mapassign+0x1e4>
 100b8a6:	e8 35 71 04 00 	call	291125 <_runtime.gcWriteBarrier>
 100b8ab:	eb e7 	jmp	-25 <_runtime.mapassign+0x294>
 100b8ad:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 100b8b2:	48 8b 43 30 	mov	rax, qword ptr [rbx + 48]
 100b8b6:	48 8b 08 	mov	rcx, qword ptr [rax]
 100b8b9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100b8bd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100b8c2:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100b8c7:	e8 e4 df ff ff 	call	-8220 <_runtime.mallocgc>
 100b8cc:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 100b8d1:	84 07 	test	byte ptr [rdi], al
 100b8d3:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100b8d8:	83 3d 21 c0 0e 00 00 	cmp	dword ptr [rip + 966689], 0
 100b8df:	75 2a 	jne	42 <_runtime.mapassign+0x30b>
 100b8e1:	48 89 07 	mov	qword ptr [rdi], rax
 100b8e4:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 100b8ec:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100b8f4:	4c 8b 4c 24 58 	mov	r9, qword ptr [rsp + 88]
 100b8f9:	4c 8b 64 24 50 	mov	r12, qword ptr [rsp + 80]
 100b8fe:	49 89 c0 	mov	r8, rax
 100b901:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 100b906:	e9 d0 fe ff ff 	jmp	-304 <_runtime.mapassign+0x1db>
 100b90b:	e8 d0 70 04 00 	call	291024 <_runtime.gcWriteBarrier>
 100b910:	eb d2 	jmp	-46 <_runtime.mapassign+0x2e4>
 100b912:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100b916:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100b91b:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100b920:	e8 8b f3 ff ff 	call	-3189 <_runtime.(*hmap).newoverflow>
 100b925:	4c 8b 64 24 18 	mov	r12, qword ptr [rsp + 24]
 100b92a:	41 84 04 24 	test	byte ptr [r12], al
 100b92e:	90 	nop
 100b92f:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100b937:	0f b6 43 50 	movzx	eax, byte ptr [rbx + 80]
 100b93b:	4d 8d 44 24 08 	lea	r8, [r12 + 8]
 100b940:	4d 8d 0c c4 	lea	r9, [r12 + 8*rax]
 100b944:	4d 8d 49 08 	lea	r9, [r9 + 8]
 100b948:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 100b94d:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 100b955:	e9 6a fe ff ff 	jmp	-406 <_runtime.mapassign+0x1c4>
 100b95a:	49 89 cc 	mov	r12, rcx
 100b95d:	44 89 d9 	mov	ecx, r11d
 100b960:	e9 31 fe ff ff 	jmp	-463 <_runtime.mapassign+0x196>
 100b965:	49 89 cc 	mov	r12, rcx
 100b968:	e9 4e fe ff ff 	jmp	-434 <_runtime.mapassign+0x1bb>
 100b96d:	44 0f b6 6b 50 	movzx	r13d, byte ptr [rbx + 80]
 100b972:	4d 89 d6 	mov	r14, r10
 100b975:	4d 0f af d5 	imul	r10, r13
 100b979:	44 0f b6 7b 51 	movzx	r15d, byte ptr [rbx + 81]
 100b97e:	4d 0f af fe 	imul	r15, r14
 100b982:	4f 8d 2c ef 	lea	r13, [r15 + 8*r13]
 100b986:	49 89 f7 	mov	r15, rsi
 100b989:	4d 8d 04 32 	lea	r8, [r10 + rsi]
 100b98d:	4d 8d 40 08 	lea	r8, [r8 + 8]
 100b991:	4d 8d 4c 35 00 	lea	r9, [r13 + rsi]
 100b996:	4d 8d 49 08 	lea	r9, [r9 + 8]
 100b99a:	4c 89 fe 	mov	rsi, r15
 100b99d:	4d 89 f2 	mov	r10, r14
 100b9a0:	4c 89 e1 	mov	rcx, r12
 100b9a3:	e9 20 fd ff ff 	jmp	-736 <_runtime.mapassign+0xc8>
 100b9a8:	4c 89 54 24 28 	mov	qword ptr [rsp + 40], r10
 100b9ad:	4c 89 4c 24 58 	mov	qword ptr [rsp + 88], r9
 100b9b2:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 100b9b7:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 100b9bc:	44 0f b6 5b 50 	movzx	r11d, byte ptr [rbx + 80]
 100b9c1:	4d 0f af da 	imul	r11, r10
 100b9c5:	49 8d 34 33 	lea	rsi, [r11 + rsi]
 100b9c9:	48 8d 76 08 	lea	rsi, [rsi + 8]
 100b9cd:	44 8b 5b 54 	mov	r11d, dword ptr [rbx + 84]
 100b9d1:	41 0f ba e3 00 	bt	r11d, 0
 100b9d6:	73 03 	jae	3 <_runtime.mapassign+0x3db>
 100b9d8:	48 8b 36 	mov	rsi, qword ptr [rsi]
 100b9db:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 100b9e0:	48 8b 43 30 	mov	rax, qword ptr [rbx + 48]
 100b9e4:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 100b9e8:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 100b9f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 100b9f4:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100b9f9:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 100b9fc:	ff d1 	call	rcx
 100b9fe:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 100ba03:	75 38 	jne	56 <_runtime.mapassign+0x43d>
 100ba05:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 100ba0a:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 100ba12:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100ba1a:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100ba1f:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 100ba24:	4c 8b 54 24 28 	mov	r10, qword ptr [rsp + 40]
 100ba29:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 100ba2e:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 100ba33:	4c 8b 4c 24 58 	mov	r9, qword ptr [rsp + 88]
 100ba38:	e9 5b fc ff ff 	jmp	-933 <_runtime.mapassign+0x98>
 100ba3d:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100ba45:	8b 48 54 	mov	ecx, dword ptr [rax + 84]
 100ba48:	0f ba e1 03 	bt	ecx, 3
 100ba4c:	72 2f 	jb	47 <_runtime.mapassign+0x47d>
 100ba4e:	0f b6 50 50 	movzx	edx, byte ptr [rax + 80]
 100ba52:	0f b6 58 51 	movzx	ebx, byte ptr [rax + 81]
 100ba56:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 100ba5b:	48 0f af f3 	imul	rsi, rbx
 100ba5f:	48 8d 14 d6 	lea	rdx, [rsi + 8*rdx]
 100ba63:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 100ba68:	48 8d 0c 13 	lea	rcx, [rbx + rdx]
 100ba6c:	48 8d 49 08 	lea	rcx, [rcx + 8]
 100ba70:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100ba78:	e9 a2 fd ff ff 	jmp	-606 <_runtime.mapassign+0x21f>
 100ba7d:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 100ba81:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100ba85:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 100ba8a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100ba8f:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 100ba97:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100ba9c:	e8 3f 16 00 00 	call	5695 <_runtime.typedmemmove>
 100baa1:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100baa9:	eb a3 	jmp	-93 <_runtime.mapassign+0x44e>
 100baab:	44 0f b7 53 52 	movzx	r10d, word ptr [rbx + 82]
 100bab0:	49 89 f3 	mov	r11, rsi
 100bab3:	4a 8d 34 16 	lea	rsi, [rsi + r10]
 100bab7:	48 8d 76 f8 	lea	rsi, [rsi - 8]
 100babb:	48 8b 36 	mov	rsi, qword ptr [rsi]
 100babe:	48 85 f6 	test	rsi, rsi
 100bac1:	74 0d 	je	13 <_runtime.mapassign+0x4d0>
 100bac3:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 100bac8:	45 31 d2 	xor	r10d, r10d
 100bacb:	e9 cb fb ff ff 	jmp	-1077 <_runtime.mapassign+0x9b>
 100bad0:	4c 89 de 	mov	rsi, r11
 100bad3:	e9 f5 fb ff ff 	jmp	-1035 <_runtime.mapassign+0xcd>
 100bad8:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 100badd:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100bae1:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100bae6:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100baeb:	e8 00 03 00 00 	call	768 <_runtime.growWork>
 100baf0:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100baf5:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 100bafd:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100bb05:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 100bb0a:	e9 5c fc ff ff 	jmp	-932 <_runtime.mapassign+0x16b>
 100bb0f:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100bb17:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 100bb1b:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100bb1e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100bb22:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100bb27:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100bb2c:	e8 7f dd ff ff 	call	-8833 <_runtime.mallocgc>
 100bb31:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100bb36:	83 3d c3 bd 0e 00 00 	cmp	dword ptr [rip + 966083], 0
 100bb3d:	75 19 	jne	25 <_runtime.mapassign+0x558>
 100bb3f:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 100bb47:	48 89 43 10 	mov	qword ptr [rbx + 16], rax
 100bb4b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100bb50:	48 89 d9 	mov	rcx, rbx
 100bb53:	e9 33 fb ff ff 	jmp	-1229 <_runtime.mapassign+0x8b>
 100bb58:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 100bb60:	48 8d 7b 10 	lea	rdi, [rbx + 16]
 100bb64:	e8 77 6e 04 00 	call	290423 <_runtime.gcWriteBarrier>
 100bb69:	eb e0 	jmp	-32 <_runtime.mapassign+0x54b>
 100bb6b:	48 8d 05 6b 88 06 00 	lea	rax, [rip + 428139]
 100bb72:	48 89 04 24 	mov	qword ptr [rsp], rax
 100bb76:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 100bb7f:	e8 dc d1 01 00 	call	119260 <_runtime.throw>
 100bb84:	48 8d 05 52 88 06 00 	lea	rax, [rip + 428114]
 100bb8b:	48 89 04 24 	mov	qword ptr [rsp], rax
 100bb8f:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 100bb98:	e8 c3 d1 01 00 	call	119235 <_runtime.throw>
 100bb9d:	48 8d 05 5c 7c 05 00 	lea	rax, [rip + 359516]
 100bba4:	48 89 04 24 	mov	qword ptr [rsp], rax
 100bba8:	48 8d 05 01 7f 07 00 	lea	rax, [rip + 491265]
 100bbaf:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100bbb4:	e8 07 ca 01 00 	call	117255 <_runtime.gopanic>
 100bbb9:	90 	nop
 100bbba:	e8 11 50 04 00 	call	282641 <_runtime.morestack_noctxt>
 100bbbf:	e9 3c fa ff ff 	jmp	-1476 <_runtime.mapassign>
 100bbc4:	cc 	int3
 100bbc5:	cc 	int3
 100bbc6:	cc 	int3
 100bbc7:	cc 	int3
 100bbc8:	cc 	int3
 100bbc9:	cc 	int3
 100bbca:	cc 	int3
 100bbcb:	cc 	int3
 100bbcc:	cc 	int3
 100bbcd:	cc 	int3
 100bbce:	cc 	int3
 100bbcf:	cc 	int3

_runtime.hashGrow:
 100bbd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100bbd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100bbdd:	0f 86 fe 01 00 00 	jbe	510 <_runtime.hashGrow+0x211>
 100bbe3:	48 83 ec 48 	sub	rsp, 72
 100bbe7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 100bbec:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 100bbf1:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100bbf6:	48 8b 10 	mov	rdx, qword ptr [rax]
 100bbf9:	48 ff c2 	inc	rdx
 100bbfc:	0f b6 48 09 	movzx	ecx, byte ptr [rax + 9]
 100bc00:	48 83 fa 08 	cmp	rdx, 8
 100bc04:	0f 8e ac 01 00 00 	jle	428 <_runtime.hashGrow+0x1e6>
 100bc0a:	bb 01 00 00 00 	mov	ebx, 1
 100bc0f:	48 d3 e3 	shl	rbx, cl
 100bc12:	48 d1 eb 	shr	rbx
 100bc15:	48 8d 34 5b 	lea	rsi, [rbx + 2*rbx]
 100bc19:	48 8d 1c b3 	lea	rbx, [rbx + 4*rsi]
 100bc1d:	48 39 da 	cmp	rdx, rbx
 100bc20:	0f 86 90 01 00 00 	jbe	400 <_runtime.hashGrow+0x1e6>
 100bc26:	b9 01 00 00 00 	mov	ecx, 1
 100bc2b:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 100bc2f:	48 8b 50 10 	mov	rdx, qword ptr [rax + 16]
 100bc33:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 100bc38:	0f b6 58 09 	movzx	ebx, byte ptr [rax + 9]
 100bc3c:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100bc41:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100bc45:	01 cb 	add	ebx, ecx
 100bc47:	88 5c 24 08 	mov	byte ptr [rsp + 8], bl
 100bc4b:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 100bc54:	e8 f7 f4 ff ff 	call	-2825 <_runtime.makeBucketArray>
 100bc59:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100bc5e:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100bc63:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 100bc68:	0f b6 5a 08 	movzx	ebx, byte ptr [rdx + 8]
 100bc6c:	89 de 	mov	esi, ebx
 100bc6e:	83 e3 fc 	and	ebx, -4
 100bc71:	40 f6 c6 01 	test	sil, 1
 100bc75:	74 03 	je	3 <_runtime.hashGrow+0xaa>
 100bc77:	83 cb 02 	or	ebx, 2
 100bc7a:	0f b6 72 09 	movzx	esi, byte ptr [rdx + 9]
 100bc7e:	44 0f b6 44 24 2f 	movzx	r8d, byte ptr [rsp + 47]
 100bc84:	44 01 c6 	add	esi, r8d
 100bc87:	40 88 72 09 	mov	byte ptr [rdx + 9], sil
 100bc8b:	88 5a 08 	mov	byte ptr [rdx + 8], bl
 100bc8e:	83 3d 6b bc 0e 00 00 	cmp	dword ptr [rip + 965739], 0
 100bc95:	0f 85 f9 00 00 00 	jne	249 <_runtime.hashGrow+0x1c4>
 100bc9b:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 100bca0:	48 89 5a 18 	mov	qword ptr [rdx + 24], rbx
 100bca4:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 100bca8:	48 c7 42 20 00 00 00 00 	mov	qword ptr [rdx + 32], 0
 100bcb0:	66 c7 42 0a 00 00 	mov	word ptr [rdx + 10], 0
 100bcb6:	48 8b 5a 28 	mov	rbx, qword ptr [rdx + 40]
 100bcba:	48 85 db 	test	rbx, rbx
 100bcbd:	74 3e 	je	62 <_runtime.hashGrow+0x12d>
 100bcbf:	48 8b 03 	mov	rax, qword ptr [rbx]
 100bcc2:	48 85 c0 	test	rax, rax
 100bcc5:	74 36 	je	54 <_runtime.hashGrow+0x12d>
 100bcc7:	48 83 7b 08 00 	cmp	qword ptr [rbx + 8], 0
 100bccc:	0f 85 f5 00 00 00 	jne	245 <_runtime.hashGrow+0x1f7>
 100bcd2:	83 3d 27 bc 0e 00 00 	cmp	dword ptr [rip + 965671], 0
 100bcd9:	0f 85 a7 00 00 00 	jne	167 <_runtime.hashGrow+0x1b6>
 100bcdf:	48 89 43 08 	mov	qword ptr [rbx + 8], rax
 100bce3:	48 8b 7a 28 	mov	rdi, qword ptr [rdx + 40]
 100bce7:	84 07 	test	byte ptr [rdi], al
 100bce9:	83 3d 10 bc 0e 00 00 	cmp	dword ptr [rip + 965648], 0
 100bcf0:	0f 85 84 00 00 00 	jne	132 <_runtime.hashGrow+0x1aa>
 100bcf6:	48 c7 07 00 00 00 00 	mov	qword ptr [rdi], 0
 100bcfd:	48 85 c9 	test	rcx, rcx
 100bd00:	74 1a 	je	26 <_runtime.hashGrow+0x14c>
 100bd02:	48 83 7a 28 00 	cmp	qword ptr [rdx + 40], 0
 100bd07:	74 2b 	je	43 <_runtime.hashGrow+0x164>
 100bd09:	48 8b 52 28 	mov	rdx, qword ptr [rdx + 40]
 100bd0d:	84 02 	test	byte ptr [rdx], al
 100bd0f:	83 3d ea bb 0e 00 00 	cmp	dword ptr [rip + 965610], 0
 100bd16:	75 0e 	jne	14 <_runtime.hashGrow+0x156>
 100bd18:	48 89 4a 10 	mov	qword ptr [rdx + 16], rcx
 100bd1c:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 100bd21:	48 83 c4 48 	add	rsp, 72
 100bd25:	c3 	ret
 100bd26:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 100bd2a:	48 89 c8 	mov	rax, rcx
 100bd2d:	e8 ae 6c 04 00 	call	289966 <_runtime.gcWriteBarrier>
 100bd32:	eb e8 	jmp	-24 <_runtime.hashGrow+0x14c>
 100bd34:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 100bd39:	48 8d 05 00 d8 05 00 	lea	rax, [rip + 382976]
 100bd40:	48 89 04 24 	mov	qword ptr [rsp], rax
 100bd44:	e8 b7 e6 ff ff 	call	-6473 <_runtime.newobject>
 100bd49:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100bd4e:	83 3d ab bb 0e 00 00 	cmp	dword ptr [rip + 965547], 0
 100bd55:	75 13 	jne	19 <_runtime.hashGrow+0x19a>
 100bd57:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100bd5c:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 100bd60:	48 89 ca 	mov	rdx, rcx
 100bd63:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100bd68:	eb 9f 	jmp	-97 <_runtime.hashGrow+0x139>
 100bd6a:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100bd6f:	48 8d 79 28 	lea	rdi, [rcx + 40]
 100bd73:	e8 68 6c 04 00 	call	289896 <_runtime.gcWriteBarrier>
 100bd78:	eb e6 	jmp	-26 <_runtime.hashGrow+0x190>
 100bd7a:	31 c0 	xor	eax, eax
 100bd7c:	e8 5f 6c 04 00 	call	289887 <_runtime.gcWriteBarrier>
 100bd81:	e9 77 ff ff ff 	jmp	-137 <_runtime.hashGrow+0x12d>
 100bd86:	48 8d 7b 08 	lea	rdi, [rbx + 8]
 100bd8a:	e8 51 6c 04 00 	call	289873 <_runtime.gcWriteBarrier>
 100bd8f:	e9 4f ff ff ff 	jmp	-177 <_runtime.hashGrow+0x113>
 100bd94:	48 8d 7a 18 	lea	rdi, [rdx + 24]
 100bd98:	48 89 c3 	mov	rbx, rax
 100bd9b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100bda0:	e8 3b 6c 04 00 	call	289851 <_runtime.gcWriteBarrier>
 100bda5:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 100bda9:	48 89 d8 	mov	rax, rbx
 100bdac:	e8 2f 6c 04 00 	call	289839 <_runtime.gcWriteBarrier>
 100bdb1:	e9 f2 fe ff ff 	jmp	-270 <_runtime.hashGrow+0xd8>
 100bdb6:	0f b6 50 08 	movzx	edx, byte ptr [rax + 8]
 100bdba:	83 ca 08 	or	edx, 8
 100bdbd:	88 50 08 	mov	byte ptr [rax + 8], dl
 100bdc0:	31 c9 	xor	ecx, ecx
 100bdc2:	e9 64 fe ff ff 	jmp	-412 <_runtime.hashGrow+0x5b>
 100bdc7:	48 8d 05 3e 88 06 00 	lea	rax, [rip + 428094]
 100bdce:	48 89 04 24 	mov	qword ptr [rsp], rax
 100bdd2:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 100bddb:	e8 80 cf 01 00 	call	118656 <_runtime.throw>
 100bde0:	90 	nop
 100bde1:	e8 ea 4d 04 00 	call	282090 <_runtime.morestack_noctxt>
 100bde6:	e9 e5 fd ff ff 	jmp	-539 <_runtime.hashGrow>
 100bdeb:	cc 	int3
 100bdec:	cc 	int3
 100bded:	cc 	int3
 100bdee:	cc 	int3
 100bdef:	cc 	int3

_runtime.growWork:
 100bdf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100bdf9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100bdfd:	0f 86 87 00 00 00 	jbe	135 <_runtime.growWork+0x9a>
 100be03:	48 83 ec 20 	sub	rsp, 32
 100be07:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100be0c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100be11:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100be16:	0f b6 50 09 	movzx	edx, byte ptr [rax + 9]
 100be1a:	0f b6 58 08 	movzx	ebx, byte ptr [rax + 8]
 100be1e:	f6 c3 08 	test	bl, 8
 100be21:	74 63 	je	99 <_runtime.growWork+0x96>
 100be23:	90 	nop
 100be24:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 100be29:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100be2d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100be32:	89 d1 	mov	ecx, edx
 100be34:	be 01 00 00 00 	mov	esi, 1
 100be39:	48 d3 e6 	shl	rsi, cl
 100be3c:	48 8d 56 ff 	lea	rdx, [rsi - 1]
 100be40:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 100be45:	48 21 d6 	and	rsi, rdx
 100be48:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100be4d:	e8 4e 00 00 00 	call	78 <_runtime.evacuate>
 100be52:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100be57:	48 83 78 18 00 	cmp	qword ptr [rax + 24], 0
 100be5c:	75 0a 	jne	10 <_runtime.growWork+0x78>
 100be5e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100be63:	48 83 c4 20 	add	rsp, 32
 100be67:	c3 	ret
 100be68:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 100be6c:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 100be71:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100be75:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100be7a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100be7f:	e8 1c 00 00 00 	call	28 <_runtime.evacuate>
 100be84:	eb d8 	jmp	-40 <_runtime.growWork+0x6e>
 100be86:	ff ca 	dec	edx
 100be88:	eb 99 	jmp	-103 <_runtime.growWork+0x33>
 100be8a:	e8 41 4d 04 00 	call	281921 <_runtime.morestack_noctxt>
 100be8f:	e9 5c ff ff ff 	jmp	-164 <_runtime.growWork>
 100be94:	cc 	int3
 100be95:	cc 	int3
 100be96:	cc 	int3
 100be97:	cc 	int3
 100be98:	cc 	int3
 100be99:	cc 	int3
 100be9a:	cc 	int3
 100be9b:	cc 	int3
 100be9c:	cc 	int3
 100be9d:	cc 	int3
 100be9e:	cc 	int3
 100be9f:	cc 	int3

_runtime.evacuate:
 100bea0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100bea9:	48 8d 44 24 d0 	lea	rax, [rsp - 48]
 100beae:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 100beb2:	0f 86 ee 05 00 00 	jbe	1518 <_runtime.evacuate+0x606>
 100beb8:	48 81 ec b0 00 00 00 	sub	rsp, 176
 100bebf:	48 89 ac 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbp
 100bec7:	48 8d ac 24 a8 00 00 00 	lea	rbp, [rsp + 168]
 100becf:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100bed7:	0f b7 73 52 	movzx	esi, word ptr [rbx + 82]
 100bedb:	4c 8b 84 24 c8 00 00 00 	mov	r8, qword ptr [rsp + 200]
 100bee3:	49 0f af f0 	imul	rsi, r8
 100bee7:	90 	nop
 100bee8:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 100bef0:	49 03 71 18 	add	rsi, qword ptr [r9 + 24]
 100bef4:	45 0f b6 51 09 	movzx	r10d, byte ptr [r9 + 9]
 100bef9:	45 0f b6 59 08 	movzx	r11d, byte ptr [r9 + 8]
 100befe:	41 f6 c3 08 	test	r11b, 8
 100bf02:	0f 84 6f 05 00 00 	je	1391 <_runtime.evacuate+0x5d7>
 100bf08:	44 89 d1 	mov	ecx, r10d
 100bf0b:	41 bb 01 00 00 00 	mov	r11d, 1
 100bf11:	49 d3 e3 	shl	r11, cl
 100bf14:	44 0f b6 26 	movzx	r12d, byte ptr [rsi]
 100bf18:	41 80 fc 01 	cmp	r12b, 1
 100bf1c:	76 0a 	jbe	10 <_runtime.evacuate+0x88>
 100bf1e:	41 80 fc 05 	cmp	r12b, 5
 100bf22:	0f 82 9e 04 00 00 	jb	1182 <_runtime.evacuate+0x526>
 100bf28:	0f 57 c0 	xorps	xmm0, xmm0
 100bf2b:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 100bf30:	0f 11 44 24 78 	movups	xmmword ptr [rsp + 120], xmm0
 100bf35:	0f 11 84 24 88 00 00 00 	movups	xmmword ptr [rsp + 136], xmm0
 100bf3d:	0f 11 84 24 98 00 00 00 	movups	xmmword ptr [rsp + 152], xmm0
 100bf45:	44 0f b7 63 52 	movzx	r12d, word ptr [rbx + 82]
 100bf4a:	4d 0f af e0 	imul	r12, r8
 100bf4e:	4d 03 61 10 	add	r12, qword ptr [r9 + 16]
 100bf52:	4c 89 64 24 68 	mov	qword ptr [rsp + 104], r12
 100bf57:	4d 8d 6c 24 08 	lea	r13, [r12 + 8]
 100bf5c:	4c 89 6c 24 78 	mov	qword ptr [rsp + 120], r13
 100bf61:	44 0f b6 6b 50 	movzx	r13d, byte ptr [rbx + 80]
 100bf66:	4f 8d 24 ec 	lea	r12, [r12 + 8*r13]
 100bf6a:	4d 8d 64 24 08 	lea	r12, [r12 + 8]
 100bf6f:	4c 89 a4 24 80 00 00 00 	mov	qword ptr [rsp + 128], r12
 100bf77:	45 0f b6 61 08 	movzx	r12d, byte ptr [r9 + 8]
 100bf7c:	41 f6 c4 08 	test	r12b, 8
 100bf80:	0f 84 b0 04 00 00 	je	1200 <_runtime.evacuate+0x596>
 100bf86:	88 4c 24 27 	mov	byte ptr [rsp + 39], cl
 100bf8a:	4c 89 5c 24 40 	mov	qword ptr [rsp + 64], r11
 100bf8f:	e9 fa 03 00 00 	jmp	1018 <_runtime.evacuate+0x4ee>
 100bf94:	48 ff c0 	inc	rax
 100bf97:	44 0f b6 73 50 	movzx	r14d, byte ptr [rbx + 80]
 100bf9c:	44 0f b6 7b 51 	movzx	r15d, byte ptr [rbx + 81]
 100bfa1:	4d 01 f5 	add	r13, r14
 100bfa4:	4d 01 fc 	add	r12, r15
 100bfa7:	48 83 f8 08 	cmp	rax, 8
 100bfab:	0f 8d cb 03 00 00 	jge	971 <_runtime.evacuate+0x4dc>
 100bfb1:	44 0f b6 34 06 	movzx	r14d, byte ptr [rsi + rax]
 100bfb6:	41 80 fe 01 	cmp	r14b, 1
 100bfba:	77 06 	ja	6 <_runtime.evacuate+0x122>
 100bfbc:	c6 04 06 04 	mov	byte ptr [rsi + rax], 4
 100bfc0:	eb d2 	jmp	-46 <_runtime.evacuate+0xf4>
 100bfc2:	41 80 fe 05 	cmp	r14b, 5
 100bfc6:	0f 82 c0 04 00 00 	jb	1216 <_runtime.evacuate+0x5ec>
 100bfcc:	44 8b 7b 54 	mov	r15d, dword ptr [rbx + 84]
 100bfd0:	41 0f ba e7 00 	bt	r15d, 0
 100bfd5:	0f 83 99 03 00 00 	jae	921 <_runtime.evacuate+0x4d4>
 100bfdb:	4d 8b 7d 00 	mov	r15, qword ptr [r13]
 100bfdf:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100bfe4:	4c 89 64 24 48 	mov	qword ptr [rsp + 72], r12
 100bfe9:	4c 89 7c 24 58 	mov	qword ptr [rsp + 88], r15
 100bfee:	4c 89 6c 24 50 	mov	qword ptr [rsp + 80], r13
 100bff3:	4c 89 da 	mov	rdx, r11
 100bff6:	45 0f b6 59 08 	movzx	r11d, byte ptr [r9 + 8]
 100bffb:	41 f6 c3 08 	test	r11b, 8
 100bfff:	0f 84 62 02 00 00 	je	610 <_runtime.evacuate+0x3c7>
 100c005:	31 ff 	xor	edi, edi
 100c007:	44 8d 5f 02 	lea	r11d, [rdi + 2]
 100c00b:	44 88 1c 06 	mov	byte ptr [rsi + rax], r11b
 100c00f:	44 0f b6 df 	movzx	r11d, dil
 100c013:	49 83 fb 02 	cmp	r11, 2
 100c017:	0f 83 62 04 00 00 	jae	1122 <_runtime.evacuate+0x5df>
 100c01d:	49 c1 e3 05 	shl	r11, 5
 100c021:	4c 89 5c 24 38 	mov	qword ptr [rsp + 56], r11
 100c026:	4e 8b 54 1c 70 	mov	r10, qword ptr [rsp + r11 + 112]
 100c02b:	49 83 fa 08 	cmp	r10, 8
 100c02f:	0f 84 9a 01 00 00 	je	410 <_runtime.evacuate+0x32f>
 100c035:	4e 8b 54 1c 68 	mov	r10, qword ptr [rsp + r11 + 104]
 100c03a:	41 84 02 	test	byte ptr [r10], al
 100c03d:	4c 89 c7 	mov	rdi, r8
 100c040:	4e 8b 44 1c 70 	mov	r8, qword ptr [rsp + r11 + 112]
 100c045:	49 83 e0 07 	and	r8, 7
 100c049:	47 88 34 02 	mov	byte ptr [r10 + r8], r14b
 100c04d:	44 8b 43 54 	mov	r8d, dword ptr [rbx + 84]
 100c051:	41 0f ba e0 00 	bt	r8d, 0
 100c056:	0f 83 17 01 00 00 	jae	279 <_runtime.evacuate+0x2d3>
 100c05c:	4e 8b 44 1c 78 	mov	r8, qword ptr [rsp + r11 + 120]
 100c061:	41 84 00 	test	byte ptr [r8], al
 100c064:	83 3d 95 b8 0e 00 00 	cmp	dword ptr [rip + 964757], 0
 100c06b:	0f 85 e6 00 00 00 	jne	230 <_runtime.evacuate+0x2b7>
 100c071:	4d 89 38 	mov	qword ptr [r8], r15
 100c074:	44 8b 43 54 	mov	r8d, dword ptr [rbx + 84]
 100c078:	41 0f ba e0 01 	bt	r8d, 1
 100c07d:	73 79 	jae	121 <_runtime.evacuate+0x258>
 100c07f:	4e 8b 84 1c 80 00 00 00 	mov	r8, qword ptr [rsp + r11 + 128]
 100c087:	41 84 00 	test	byte ptr [r8], al
 100c08a:	4d 8b 14 24 	mov	r10, qword ptr [r12]
 100c08e:	83 3d 6b b8 0e 00 00 	cmp	dword ptr [rip + 964715], 0
 100c095:	75 48 	jne	72 <_runtime.evacuate+0x23f>
 100c097:	4d 89 10 	mov	qword ptr [r8], r10
 100c09a:	4e 8b 74 1c 70 	mov	r14, qword ptr [rsp + r11 + 112]
 100c09f:	49 ff c6 	inc	r14
 100c0a2:	4e 89 74 1c 70 	mov	qword ptr [rsp + r11 + 112], r14
 100c0a7:	4e 8b 74 1c 78 	mov	r14, qword ptr [rsp + r11 + 120]
 100c0ac:	44 0f b6 7b 50 	movzx	r15d, byte ptr [rbx + 80]
 100c0b1:	4d 01 fe 	add	r14, r15
 100c0b4:	4e 89 74 1c 78 	mov	qword ptr [rsp + r11 + 120], r14
 100c0b9:	4e 8b b4 1c 80 00 00 00 	mov	r14, qword ptr [rsp + r11 + 128]
 100c0c1:	44 0f b6 7b 51 	movzx	r15d, byte ptr [rbx + 81]
 100c0c6:	4d 01 fe 	add	r14, r15
 100c0c9:	4e 89 b4 1c 80 00 00 00 	mov	qword ptr [rsp + r11 + 128], r14
 100c0d1:	49 89 f8 	mov	r8, rdi
 100c0d4:	41 89 ca 	mov	r10d, ecx
 100c0d7:	49 89 d3 	mov	r11, rdx
 100c0da:	e9 b5 fe ff ff 	jmp	-331 <_runtime.evacuate+0xf4>
 100c0df:	49 89 fe 	mov	r14, rdi
 100c0e2:	4c 89 c7 	mov	rdi, r8
 100c0e5:	49 89 c7 	mov	r15, rax
 100c0e8:	4c 89 d0 	mov	rax, r10
 100c0eb:	e8 f0 68 04 00 	call	289008 <_runtime.gcWriteBarrier>
 100c0f0:	4c 89 f8 	mov	rax, r15
 100c0f3:	4c 89 f7 	mov	rdi, r14
 100c0f6:	eb a2 	jmp	-94 <_runtime.evacuate+0x1fa>
 100c0f8:	48 8b 43 38 	mov	rax, qword ptr [rbx + 56]
 100c0fc:	4a 8b 8c 1c 80 00 00 00 	mov	rcx, qword ptr [rsp + r11 + 128]
 100c104:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c108:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100c10d:	4c 89 64 24 10 	mov	qword ptr [rsp + 16], r12
 100c112:	e8 c9 0f 00 00 	call	4041 <_runtime.typedmemmove>
 100c117:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100c11c:	0f b6 4c 24 27 	movzx	ecx, byte ptr [rsp + 39]
 100c121:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100c126:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c12e:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 100c133:	48 8b bc 24 c8 00 00 00 	mov	rdi, qword ptr [rsp + 200]
 100c13b:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 100c143:	4c 8b 5c 24 38 	mov	r11, qword ptr [rsp + 56]
 100c148:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100c14d:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 100c152:	e9 43 ff ff ff 	jmp	-189 <_runtime.evacuate+0x1fa>
 100c157:	49 89 fa 	mov	r10, rdi
 100c15a:	4c 89 c7 	mov	rdi, r8
 100c15d:	49 89 c6 	mov	r14, rax
 100c160:	4c 89 f8 	mov	rax, r15
 100c163:	e8 78 68 04 00 	call	288888 <_runtime.gcWriteBarrier>
 100c168:	4c 89 f0 	mov	rax, r14
 100c16b:	4c 89 d7 	mov	rdi, r10
 100c16e:	e9 01 ff ff ff 	jmp	-255 <_runtime.evacuate+0x1d4>
 100c173:	48 8b 43 30 	mov	rax, qword ptr [rbx + 48]
 100c177:	4a 8b 4c 1c 78 	mov	rcx, qword ptr [rsp + r11 + 120]
 100c17c:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c180:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100c185:	4c 89 6c 24 10 	mov	qword ptr [rsp + 16], r13
 100c18a:	e8 51 0f 00 00 	call	3921 <_runtime.typedmemmove>
 100c18f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100c194:	0f b6 4c 24 27 	movzx	ecx, byte ptr [rsp + 39]
 100c199:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100c19e:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c1a6:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 100c1ab:	48 8b bc 24 c8 00 00 00 	mov	rdi, qword ptr [rsp + 200]
 100c1b3:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 100c1bb:	4c 8b 5c 24 38 	mov	r11, qword ptr [rsp + 56]
 100c1c0:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100c1c5:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 100c1ca:	e9 a5 fe ff ff 	jmp	-347 <_runtime.evacuate+0x1d4>
 100c1cf:	44 88 74 24 26 	mov	byte ptr [rsp + 38], r14b
 100c1d4:	4a 8b 44 1c 68 	mov	rax, qword ptr [rsp + r11 + 104]
 100c1d9:	4c 89 0c 24 	mov	qword ptr [rsp], r9
 100c1dd:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100c1e2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100c1e7:	e8 c4 ea ff ff 	call	-5436 <_runtime.(*hmap).newoverflow>
 100c1ec:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100c1f1:	4c 8b 5c 24 38 	mov	r11, qword ptr [rsp + 56]
 100c1f6:	4a 89 44 1c 68 	mov	qword ptr [rsp + r11 + 104], rax
 100c1fb:	4a c7 44 1c 70 00 00 00 00 	mov	qword ptr [rsp + r11 + 112], 0
 100c204:	48 8d 48 08 	lea	rcx, [rax + 8]
 100c208:	4a 89 4c 1c 78 	mov	qword ptr [rsp + r11 + 120], rcx
 100c20d:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c215:	0f b6 4b 50 	movzx	ecx, byte ptr [rbx + 80]
 100c219:	48 8d 04 c8 	lea	rax, [rax + 8*rcx]
 100c21d:	48 8d 40 08 	lea	rax, [rax + 8]
 100c221:	4a 89 84 1c 80 00 00 00 	mov	qword ptr [rsp + r11 + 128], rax
 100c229:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100c22e:	0f b6 4c 24 27 	movzx	ecx, byte ptr [rsp + 39]
 100c233:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100c238:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 100c23d:	4c 8b 84 24 c8 00 00 00 	mov	r8, qword ptr [rsp + 200]
 100c245:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 100c24d:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100c252:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 100c257:	44 0f b6 74 24 26 	movzx	r14d, byte ptr [rsp + 38]
 100c25d:	4c 8b 7c 24 58 	mov	r15, qword ptr [rsp + 88]
 100c262:	e9 ce fd ff ff 	jmp	-562 <_runtime.evacuate+0x195>
 100c267:	44 88 74 24 25 	mov	byte ptr [rsp + 37], r14b
 100c26c:	48 8b 53 48 	mov	rdx, qword ptr [rbx + 72]
 100c270:	41 8b 41 0c 	mov	eax, dword ptr [r9 + 12]
 100c274:	4c 89 3c 24 	mov	qword ptr [rsp], r15
 100c278:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100c27d:	48 8b 02 	mov	rax, qword ptr [rdx]
 100c280:	ff d0 	call	rax
 100c282:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100c287:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100c28f:	0f b6 59 08 	movzx	ebx, byte ptr [rcx + 8]
 100c293:	f6 c3 01 	test	bl, 1
 100c296:	0f 84 c9 00 00 00 	je	201 <_runtime.evacuate+0x4c5>
 100c29c:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c2a4:	8b 73 54 	mov	esi, dword ptr [rbx + 84]
 100c2a7:	0f ba e6 02 	bt	esi, 2
 100c2ab:	73 76 	jae	118 <_runtime.evacuate+0x483>
 100c2ad:	31 d2 	xor	edx, edx
 100c2af:	84 d2 	test	dl, dl
 100c2b1:	74 5b 	je	91 <_runtime.evacuate+0x46e>
 100c2b3:	48 c1 e8 38 	shr	rax, 56
 100c2b7:	3c 05 	cmp	al, 5
 100c2b9:	73 4e 	jae	78 <_runtime.evacuate+0x469>
 100c2bb:	8d 70 05 	lea	esi, [rax + 5]
 100c2be:	44 0f b6 44 24 25 	movzx	r8d, byte ptr [rsp + 37]
 100c2c4:	41 83 e0 01 	and	r8d, 1
 100c2c8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100c2cd:	0f b6 4c 24 27 	movzx	ecx, byte ptr [rsp + 39]
 100c2d2:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100c2d7:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 100c2df:	41 89 ca 	mov	r10d, ecx
 100c2e2:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100c2e7:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 100c2ec:	4c 8b 7c 24 58 	mov	r15, qword ptr [rsp + 88]
 100c2f1:	44 89 c7 	mov	edi, r8d
 100c2f4:	41 89 f6 	mov	r14d, esi
 100c2f7:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 100c2fc:	4c 8b 84 24 c8 00 00 00 	mov	r8, qword ptr [rsp + 200]
 100c304:	e9 fe fc ff ff 	jmp	-770 <_runtime.evacuate+0x167>
 100c309:	48 89 c6 	mov	rsi, rax
 100c30c:	eb b0 	jmp	-80 <_runtime.evacuate+0x41e>
 100c30e:	44 0f b6 4c 24 27 	movzx	r9d, byte ptr [rsp + 39]
 100c314:	4c 0f a3 c8 	bt	rax, r9
 100c318:	41 0f 92 c0 	setb	r8b
 100c31c:	0f b6 74 24 25 	movzx	esi, byte ptr [rsp + 37]
 100c321:	eb a5 	jmp	-91 <_runtime.evacuate+0x428>
 100c323:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100c328:	48 8b 43 30 	mov	rax, qword ptr [rbx + 48]
 100c32c:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 100c330:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100c335:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c339:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100c33e:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 100c341:	ff d1 	call	rcx
 100c343:	0f b6 54 24 10 	movzx	edx, byte ptr [rsp + 16]
 100c348:	83 f2 01 	xor	edx, 1
 100c34b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100c350:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 100c358:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c360:	e9 4a ff ff ff 	jmp	-182 <_runtime.evacuate+0x40f>
 100c365:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c36d:	31 d2 	xor	edx, edx
 100c36f:	e9 3b ff ff ff 	jmp	-197 <_runtime.evacuate+0x40f>
 100c374:	4d 89 ef 	mov	r15, r13
 100c377:	e9 63 fc ff ff 	jmp	-925 <_runtime.evacuate+0x13f>
 100c37c:	44 0f b7 63 52 	movzx	r12d, word ptr [rbx + 82]
 100c381:	4e 8d 24 26 	lea	r12, [rsi + r12]
 100c385:	4d 8d 64 24 f8 	lea	r12, [r12 - 8]
 100c38a:	49 8b 34 24 	mov	rsi, qword ptr [r12]
 100c38e:	48 85 f6 	test	rsi, rsi
 100c391:	74 1f 	je	31 <_runtime.evacuate+0x512>
 100c393:	48 89 74 24 60 	mov	qword ptr [rsp + 96], rsi
 100c398:	90 	nop
 100c399:	44 0f b6 63 50 	movzx	r12d, byte ptr [rbx + 80]
 100c39e:	4c 8d 6e 08 	lea	r13, [rsi + 8]
 100c3a2:	4e 8d 24 e6 	lea	r12, [rsi + 8*r12]
 100c3a6:	4d 8d 64 24 08 	lea	r12, [r12 + 8]
 100c3ab:	31 c0 	xor	eax, eax
 100c3ad:	e9 f5 fb ff ff 	jmp	-1035 <_runtime.evacuate+0x107>
 100c3b2:	41 0f b6 41 08 	movzx	eax, byte ptr [r9 + 8]
 100c3b7:	a8 02 	test	al, 2
 100c3b9:	75 0b 	jne	11 <_runtime.evacuate+0x526>
 100c3bb:	48 8b 43 40 	mov	rax, qword ptr [rbx + 64]
 100c3bf:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 100c3c4:	75 2b 	jne	43 <_runtime.evacuate+0x551>
 100c3c6:	4d 39 41 20 	cmp	qword ptr [r9 + 32], r8
 100c3ca:	74 10 	je	16 <_runtime.evacuate+0x53c>
 100c3cc:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 100c3d4:	48 81 c4 b0 00 00 00 	add	rsp, 176
 100c3db:	c3 	ret
 100c3dc:	4c 89 0c 24 	mov	qword ptr [rsp], r9
 100c3e0:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100c3e5:	4c 89 5c 24 10 	mov	qword ptr [rsp + 16], r11
 100c3ea:	e8 c1 00 00 00 	call	193 <_runtime.advanceEvacuationMark>
 100c3ef:	eb db 	jmp	-37 <_runtime.evacuate+0x52c>
 100c3f1:	0f b7 43 52 	movzx	eax, word ptr [rbx + 82]
 100c3f5:	48 89 c1 	mov	rcx, rax
 100c3f8:	49 0f af c0 	imul	rax, r8
 100c3fc:	90 	nop
 100c3fd:	49 03 41 18 	add	rax, qword ptr [r9 + 24]
 100c401:	48 83 c0 08 	add	rax, 8
 100c405:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c409:	48 8d 41 f8 	lea	rax, [rcx - 8]
 100c40d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100c412:	e8 c9 0f 00 00 	call	4041 <_runtime.memclrHasPointers>
 100c417:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100c41f:	4c 8b 84 24 c8 00 00 00 	mov	r8, qword ptr [rsp + 200]
 100c427:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 100c42f:	4c 8b 5c 24 40 	mov	r11, qword ptr [rsp + 64]
 100c434:	eb 90 	jmp	-112 <_runtime.evacuate+0x526>
 100c436:	4f 8d 24 03 	lea	r12, [r11 + r8]
 100c43a:	44 0f b7 6b 52 	movzx	r13d, word ptr [rbx + 82]
 100c43f:	4d 0f af e5 	imul	r12, r13
 100c443:	4d 03 61 10 	add	r12, qword ptr [r9 + 16]
 100c447:	4c 89 a4 24 88 00 00 00 	mov	qword ptr [rsp + 136], r12
 100c44f:	4d 8d 6c 24 08 	lea	r13, [r12 + 8]
 100c454:	4c 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], r13
 100c45c:	44 0f b6 6b 50 	movzx	r13d, byte ptr [rbx + 80]
 100c461:	4f 8d 24 ec 	lea	r12, [r12 + 8*r13]
 100c465:	4d 8d 64 24 08 	lea	r12, [r12 + 8]
 100c46a:	4c 89 a4 24 a0 00 00 00 	mov	qword ptr [rsp + 160], r12
 100c472:	e9 0f fb ff ff 	jmp	-1265 <_runtime.evacuate+0xe6>
 100c477:	41 ff ca 	dec	r10d
 100c47a:	e9 89 fa ff ff 	jmp	-1399 <_runtime.evacuate+0x68>
 100c47f:	4c 89 d8 	mov	rax, r11
 100c482:	b9 02 00 00 00 	mov	ecx, 2
 100c487:	e8 c4 6e 04 00 	call	290500 <_runtime.panicIndex>
 100c48c:	48 8d 05 a5 72 06 00 	lea	rax, [rip + 422565]
 100c493:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c497:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 100c4a0:	e8 bb c8 01 00 	call	116923 <_runtime.throw>
 100c4a5:	90 	nop
 100c4a6:	e8 25 47 04 00 	call	280357 <_runtime.morestack_noctxt>
 100c4ab:	e9 f0 f9 ff ff 	jmp	-1552 <_runtime.evacuate>

_runtime.advanceEvacuationMark:
 100c4b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100c4b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100c4bd:	0f 86 c2 00 00 00 	jbe	194 <_runtime.advanceEvacuationMark+0xd5>
 100c4c3:	48 83 ec 08 	sub	rsp, 8
 100c4c7:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 100c4cb:	48 8d 2c 24 	lea	rbp, [rsp]
 100c4cf:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 100c4d4:	48 8b 51 20 	mov	rdx, qword ptr [rcx + 32]
 100c4d8:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 100c4dc:	48 89 59 20 	mov	qword ptr [rcx + 32], rbx
 100c4e0:	48 81 c2 01 04 00 00 	add	rdx, 1025
 100c4e7:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 100c4ec:	48 39 da 	cmp	rdx, rbx
 100c4ef:	48 0f 47 d3 	cmova	rdx, rbx
 100c4f3:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 100c4f8:	eb 07 	jmp	7 <_runtime.advanceEvacuationMark+0x51>
 100c4fa:	49 ff c0 	inc	r8
 100c4fd:	4c 89 41 20 	mov	qword ptr [rcx + 32], r8
 100c501:	4c 8b 41 20 	mov	r8, qword ptr [rcx + 32]
 100c505:	49 39 d0 	cmp	r8, rdx
 100c508:	74 1e 	je	30 <_runtime.advanceEvacuationMark+0x78>
 100c50a:	44 0f b7 4e 52 	movzx	r9d, word ptr [rsi + 82]
 100c50f:	4d 0f af c8 	imul	r9, r8
 100c513:	90 	nop
 100c514:	4c 03 49 18 	add	r9, qword ptr [rcx + 24]
 100c518:	45 0f b6 09 	movzx	r9d, byte ptr [r9]
 100c51c:	41 80 f9 01 	cmp	r9b, 1
 100c520:	76 06 	jbe	6 <_runtime.advanceEvacuationMark+0x78>
 100c522:	41 80 f9 05 	cmp	r9b, 5
 100c526:	72 d2 	jb	-46 <_runtime.advanceEvacuationMark+0x4a>
 100c528:	49 39 d8 	cmp	r8, rbx
 100c52b:	75 35 	jne	53 <_runtime.advanceEvacuationMark+0xb2>
 100c52d:	83 3d cc b3 0e 00 00 	cmp	dword ptr [rip + 963532], 0
 100c534:	75 42 	jne	66 <_runtime.advanceEvacuationMark+0xc8>
 100c536:	48 c7 41 18 00 00 00 00 	mov	qword ptr [rcx + 24], 0
 100c53e:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 100c542:	48 85 d2 	test	rdx, rdx
 100c545:	74 11 	je	17 <_runtime.advanceEvacuationMark+0xa8>
 100c547:	83 3d b2 b3 0e 00 00 	cmp	dword ptr [rip + 963506], 0
 100c54e:	75 1b 	jne	27 <_runtime.advanceEvacuationMark+0xbb>
 100c550:	48 c7 42 08 00 00 00 00 	mov	qword ptr [rdx + 8], 0
 100c558:	0f b6 41 08 	movzx	eax, byte ptr [rcx + 8]
 100c55c:	83 e0 f7 	and	eax, -9
 100c55f:	88 41 08 	mov	byte ptr [rcx + 8], al
 100c562:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 100c566:	48 83 c4 08 	add	rsp, 8
 100c56a:	c3 	ret
 100c56b:	48 8d 7a 08 	lea	rdi, [rdx + 8]
 100c56f:	31 c0 	xor	eax, eax
 100c571:	e8 6a 64 04 00 	call	287850 <_runtime.gcWriteBarrier>
 100c576:	eb e0 	jmp	-32 <_runtime.advanceEvacuationMark+0xa8>
 100c578:	48 8d 79 18 	lea	rdi, [rcx + 24]
 100c57c:	31 c0 	xor	eax, eax
 100c57e:	e8 5d 64 04 00 	call	287837 <_runtime.gcWriteBarrier>
 100c583:	eb b9 	jmp	-71 <_runtime.advanceEvacuationMark+0x8e>
 100c585:	e8 46 46 04 00 	call	280134 <_runtime.morestack_noctxt>
 100c58a:	e9 21 ff ff ff 	jmp	-223 <_runtime.advanceEvacuationMark>
 100c58f:	cc 	int3

_runtime.mapaccess1_fast32:
 100c590:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100c599:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100c59d:	0f 86 82 01 00 00 	jbe	386 <_runtime.mapaccess1_fast32+0x195>
 100c5a3:	48 83 ec 20 	sub	rsp, 32
 100c5a7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100c5ac:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100c5b1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100c5b6:	48 85 c0 	test	rax, rax
 100c5b9:	0f 84 36 01 00 00 	je	310 <_runtime.mapaccess1_fast32+0x165>
 100c5bf:	48 83 38 00 	cmp	qword ptr [rax], 0
 100c5c3:	0f 84 2c 01 00 00 	je	300 <_runtime.mapaccess1_fast32+0x165>
 100c5c9:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 100c5cd:	f6 c1 04 	test	cl, 4
 100c5d0:	0f 85 35 01 00 00 	jne	309 <_runtime.mapaccess1_fast32+0x17b>
 100c5d6:	80 78 09 00 	cmp	byte ptr [rax + 9], 0
 100c5da:	0f 85 82 00 00 00 	jne	130 <_runtime.mapaccess1_fast32+0xd2>
 100c5e0:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 100c5e4:	eb 58 	jmp	88 <_runtime.mapaccess1_fast32+0xae>
 100c5e6:	48 ff c2 	inc	rdx
 100c5e9:	48 83 c1 04 	add	rcx, 4
 100c5ed:	48 83 fa 08 	cmp	rdx, 8
 100c5f1:	73 35 	jae	53 <_runtime.mapaccess1_fast32+0x98>
 100c5f3:	8b 5c 24 38 	mov	ebx, dword ptr [rsp + 56]
 100c5f7:	39 19 	cmp	dword ptr [rcx], ebx
 100c5f9:	75 eb 	jne	-21 <_runtime.mapaccess1_fast32+0x56>
 100c5fb:	0f b6 1c 02 	movzx	ebx, byte ptr [rdx + rax]
 100c5ff:	80 fb 01 	cmp	bl, 1
 100c602:	76 e2 	jbe	-30 <_runtime.mapaccess1_fast32+0x56>
 100c604:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100c609:	0f b6 49 51 	movzx	ecx, byte ptr [rcx + 81]
 100c60d:	48 0f af ca 	imul	rcx, rdx
 100c611:	48 8d 04 01 	lea	rax, [rcx + rax]
 100c615:	48 8d 40 28 	lea	rax, [rax + 40]
 100c619:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100c61e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100c623:	48 83 c4 20 	add	rsp, 32
 100c627:	c3 	ret
 100c628:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100c62d:	0f b7 51 52 	movzx	edx, word ptr [rcx + 82]
 100c631:	48 8d 14 10 	lea	rdx, [rax + rdx]
 100c635:	48 8d 52 f8 	lea	rdx, [rdx - 8]
 100c639:	84 01 	test	byte ptr [rcx], al
 100c63b:	48 8b 02 	mov	rax, qword ptr [rdx]
 100c63e:	48 85 c0 	test	rax, rax
 100c641:	74 09 	je	9 <_runtime.mapaccess1_fast32+0xbc>
 100c643:	90 	nop
 100c644:	48 8d 48 08 	lea	rcx, [rax + 8]
 100c648:	31 d2 	xor	edx, edx
 100c64a:	eb a1 	jmp	-95 <_runtime.mapaccess1_fast32+0x5d>
 100c64c:	48 8d 05 cd bb 0e 00 	lea	rax, [rip + 965581]
 100c653:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100c658:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100c65d:	48 83 c4 20 	add	rsp, 32
 100c661:	c3 	ret
 100c662:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100c667:	48 8b 51 48 	mov	rdx, qword ptr [rcx + 72]
 100c66b:	8b 58 0c 	mov	ebx, dword ptr [rax + 12]
 100c66e:	48 8d 74 24 38 	lea	rsi, [rsp + 56]
 100c673:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100c677:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100c67c:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100c67f:	ff d3 	call	rbx
 100c681:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100c686:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100c68b:	0f b6 59 09 	movzx	ebx, byte ptr [rcx + 9]
 100c68f:	48 89 ca 	mov	rdx, rcx
 100c692:	89 d9 	mov	ecx, ebx
 100c694:	be 01 00 00 00 	mov	esi, 1
 100c699:	48 d3 e6 	shl	rsi, cl
 100c69c:	48 8d 4e ff 	lea	rcx, [rsi - 1]
 100c6a0:	48 89 cb 	mov	rbx, rcx
 100c6a3:	48 21 c1 	and	rcx, rax
 100c6a6:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 100c6ab:	0f b7 7e 52 	movzx	edi, word ptr [rsi + 82]
 100c6af:	48 0f af cf 	imul	rcx, rdi
 100c6b3:	4c 8b 42 18 	mov	r8, qword ptr [rdx + 24]
 100c6b7:	48 03 4a 10 	add	rcx, qword ptr [rdx + 16]
 100c6bb:	4d 85 c0 	test	r8, r8
 100c6be:	74 23 	je	35 <_runtime.mapaccess1_fast32+0x153>
 100c6c0:	0f b6 52 08 	movzx	edx, byte ptr [rdx + 8]
 100c6c4:	f6 c2 08 	test	dl, 8
 100c6c7:	74 27 	je	39 <_runtime.mapaccess1_fast32+0x160>
 100c6c9:	48 21 c3 	and	rbx, rax
 100c6cc:	48 0f af fb 	imul	rdi, rbx
 100c6d0:	49 8d 04 38 	lea	rax, [r8 + rdi]
 100c6d4:	41 0f b6 14 38 	movzx	edx, byte ptr [r8 + rdi]
 100c6d9:	80 fa 01 	cmp	dl, 1
 100c6dc:	76 0d 	jbe	13 <_runtime.mapaccess1_fast32+0x15b>
 100c6de:	80 fa 05 	cmp	dl, 5
 100c6e1:	73 08 	jae	8 <_runtime.mapaccess1_fast32+0x15b>
 100c6e3:	48 89 c8 	mov	rax, rcx
 100c6e6:	e9 53 ff ff ff 	jmp	-173 <_runtime.mapaccess1_fast32+0xae>
 100c6eb:	48 89 c1 	mov	rcx, rax
 100c6ee:	eb f3 	jmp	-13 <_runtime.mapaccess1_fast32+0x153>
 100c6f0:	48 d1 eb 	shr	rbx
 100c6f3:	eb d4 	jmp	-44 <_runtime.mapaccess1_fast32+0x139>
 100c6f5:	48 8d 05 24 bb 0e 00 	lea	rax, [rip + 965412]
 100c6fc:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100c701:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100c706:	48 83 c4 20 	add	rsp, 32
 100c70a:	c3 	ret
 100c70b:	48 8d 05 f1 96 06 00 	lea	rax, [rip + 431857]
 100c712:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c716:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 100c71f:	e8 3c c6 01 00 	call	116284 <_runtime.throw>
 100c724:	90 	nop
 100c725:	e8 a6 44 04 00 	call	279718 <_runtime.morestack_noctxt>
 100c72a:	e9 61 fe ff ff 	jmp	-415 <_runtime.mapaccess1_fast32>
 100c72f:	cc 	int3

_runtime.mapaccess2_fast32:
 100c730:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100c739:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100c73d:	0f 86 91 01 00 00 	jbe	401 <_runtime.mapaccess2_fast32+0x1a4>
 100c743:	48 83 ec 20 	sub	rsp, 32
 100c747:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100c74c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100c751:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100c756:	48 85 c0 	test	rax, rax
 100c759:	0f 84 40 01 00 00 	je	320 <_runtime.mapaccess2_fast32+0x16f>
 100c75f:	48 83 38 00 	cmp	qword ptr [rax], 0
 100c763:	0f 84 36 01 00 00 	je	310 <_runtime.mapaccess2_fast32+0x16f>
 100c769:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 100c76d:	f6 c1 04 	test	cl, 4
 100c770:	0f 85 44 01 00 00 	jne	324 <_runtime.mapaccess2_fast32+0x18a>
 100c776:	80 78 09 00 	cmp	byte ptr [rax + 9], 0
 100c77a:	0f 85 8c 00 00 00 	jne	140 <_runtime.mapaccess2_fast32+0xdc>
 100c780:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 100c784:	eb 5d 	jmp	93 <_runtime.mapaccess2_fast32+0xb3>
 100c786:	48 ff c2 	inc	rdx
 100c789:	48 83 c1 04 	add	rcx, 4
 100c78d:	48 83 fa 08 	cmp	rdx, 8
 100c791:	73 3a 	jae	58 <_runtime.mapaccess2_fast32+0x9d>
 100c793:	8b 5c 24 38 	mov	ebx, dword ptr [rsp + 56]
 100c797:	39 19 	cmp	dword ptr [rcx], ebx
 100c799:	75 eb 	jne	-21 <_runtime.mapaccess2_fast32+0x56>
 100c79b:	0f b6 1c 02 	movzx	ebx, byte ptr [rdx + rax]
 100c79f:	80 fb 01 	cmp	bl, 1
 100c7a2:	76 e2 	jbe	-30 <_runtime.mapaccess2_fast32+0x56>
 100c7a4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100c7a9:	0f b6 49 51 	movzx	ecx, byte ptr [rcx + 81]
 100c7ad:	48 0f af ca 	imul	rcx, rdx
 100c7b1:	48 8d 04 01 	lea	rax, [rcx + rax]
 100c7b5:	48 8d 40 28 	lea	rax, [rax + 40]
 100c7b9:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100c7be:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 100c7c3:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100c7c8:	48 83 c4 20 	add	rsp, 32
 100c7cc:	c3 	ret
 100c7cd:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100c7d2:	0f b7 51 52 	movzx	edx, word ptr [rcx + 82]
 100c7d6:	48 8d 14 10 	lea	rdx, [rax + rdx]
 100c7da:	48 8d 52 f8 	lea	rdx, [rdx - 8]
 100c7de:	84 01 	test	byte ptr [rcx], al
 100c7e0:	48 8b 02 	mov	rax, qword ptr [rdx]
 100c7e3:	48 85 c0 	test	rax, rax
 100c7e6:	74 09 	je	9 <_runtime.mapaccess2_fast32+0xc1>
 100c7e8:	90 	nop
 100c7e9:	48 8d 48 08 	lea	rcx, [rax + 8]
 100c7ed:	31 d2 	xor	edx, edx
 100c7ef:	eb 9c 	jmp	-100 <_runtime.mapaccess2_fast32+0x5d>
 100c7f1:	48 8d 05 28 ba 0e 00 	lea	rax, [rip + 965160]
 100c7f8:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100c7fd:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 100c802:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100c807:	48 83 c4 20 	add	rsp, 32
 100c80b:	c3 	ret
 100c80c:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100c811:	48 8b 51 48 	mov	rdx, qword ptr [rcx + 72]
 100c815:	8b 58 0c 	mov	ebx, dword ptr [rax + 12]
 100c818:	48 8d 74 24 38 	lea	rsi, [rsp + 56]
 100c81d:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100c821:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100c826:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100c829:	ff d3 	call	rbx
 100c82b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100c830:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100c835:	0f b6 59 09 	movzx	ebx, byte ptr [rcx + 9]
 100c839:	48 89 ca 	mov	rdx, rcx
 100c83c:	89 d9 	mov	ecx, ebx
 100c83e:	be 01 00 00 00 	mov	esi, 1
 100c843:	48 d3 e6 	shl	rsi, cl
 100c846:	48 8d 4e ff 	lea	rcx, [rsi - 1]
 100c84a:	48 89 cb 	mov	rbx, rcx
 100c84d:	48 21 c1 	and	rcx, rax
 100c850:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 100c855:	0f b7 7e 52 	movzx	edi, word ptr [rsi + 82]
 100c859:	48 0f af cf 	imul	rcx, rdi
 100c85d:	4c 8b 42 18 	mov	r8, qword ptr [rdx + 24]
 100c861:	48 03 4a 10 	add	rcx, qword ptr [rdx + 16]
 100c865:	4d 85 c0 	test	r8, r8
 100c868:	74 23 	je	35 <_runtime.mapaccess2_fast32+0x15d>
 100c86a:	0f b6 52 08 	movzx	edx, byte ptr [rdx + 8]
 100c86e:	f6 c2 08 	test	dl, 8
 100c871:	74 27 	je	39 <_runtime.mapaccess2_fast32+0x16a>
 100c873:	48 21 c3 	and	rbx, rax
 100c876:	48 0f af fb 	imul	rdi, rbx
 100c87a:	49 8d 04 38 	lea	rax, [r8 + rdi]
 100c87e:	41 0f b6 14 38 	movzx	edx, byte ptr [r8 + rdi]
 100c883:	80 fa 01 	cmp	dl, 1
 100c886:	76 0d 	jbe	13 <_runtime.mapaccess2_fast32+0x165>
 100c888:	80 fa 05 	cmp	dl, 5
 100c88b:	73 08 	jae	8 <_runtime.mapaccess2_fast32+0x165>
 100c88d:	48 89 c8 	mov	rax, rcx
 100c890:	e9 4e ff ff ff 	jmp	-178 <_runtime.mapaccess2_fast32+0xb3>
 100c895:	48 89 c1 	mov	rcx, rax
 100c898:	eb f3 	jmp	-13 <_runtime.mapaccess2_fast32+0x15d>
 100c89a:	48 d1 eb 	shr	rbx
 100c89d:	eb d4 	jmp	-44 <_runtime.mapaccess2_fast32+0x143>
 100c89f:	48 8d 05 7a b9 0e 00 	lea	rax, [rip + 964986]
 100c8a6:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100c8ab:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 100c8b0:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100c8b5:	48 83 c4 20 	add	rsp, 32
 100c8b9:	c3 	ret
 100c8ba:	48 8d 05 42 95 06 00 	lea	rax, [rip + 431426]
 100c8c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 100c8c5:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 100c8ce:	e8 8d c4 01 00 	call	115853 <_runtime.throw>
 100c8d3:	90 	nop
 100c8d4:	e8 f7 42 04 00 	call	279287 <_runtime.morestack_noctxt>
 100c8d9:	e9 52 fe ff ff 	jmp	-430 <_runtime.mapaccess2_fast32>
 100c8de:	cc 	int3
 100c8df:	cc 	int3

_runtime.mapassign_fast32:
 100c8e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100c8e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100c8ed:	0f 86 2b 03 00 00 	jbe	811 <_runtime.mapassign_fast32+0x33e>
 100c8f3:	48 83 ec 38 	sub	rsp, 56
 100c8f7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100c8fc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 100c901:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100c906:	48 85 c0 	test	rax, rax
 100c909:	0f 84 f2 02 00 00 	je	754 <_runtime.mapassign_fast32+0x321>
 100c90f:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 100c913:	f6 c1 04 	test	cl, 4
 100c916:	0f 85 cc 02 00 00 	jne	716 <_runtime.mapassign_fast32+0x308>
 100c91c:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 100c921:	48 8b 51 48 	mov	rdx, qword ptr [rcx + 72]
 100c925:	8b 58 0c 	mov	ebx, dword ptr [rax + 12]
 100c928:	48 8d 74 24 50 	lea	rsi, [rsp + 80]
 100c92d:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100c931:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100c936:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100c939:	ff d3 	call	rbx
 100c93b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100c940:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100c945:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 100c94a:	0f b6 59 08 	movzx	ebx, byte ptr [rcx + 8]
 100c94e:	83 f3 04 	xor	ebx, 4
 100c951:	88 59 08 	mov	byte ptr [rcx + 8], bl
 100c954:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 100c959:	0f 84 1d 02 00 00 	je	541 <_runtime.mapassign_fast32+0x29c>
 100c95f:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100c964:	e9 9b 00 00 00 	jmp	155 <_runtime.mapassign_fast32+0x124>
 100c969:	4d 8d 54 24 01 	lea	r10, [r12 + 1]
 100c96e:	48 89 d9 	mov	rcx, rbx
 100c971:	4d 89 c8 	mov	r8, r9
 100c974:	4c 89 db 	mov	rbx, r11
 100c977:	4d 89 d1 	mov	r9, r10
 100c97a:	49 83 f9 08 	cmp	r9, 8
 100c97e:	0f 83 9d 01 00 00 	jae	413 <_runtime.mapassign_fast32+0x241>
 100c984:	84 03 	test	byte ptr [rbx], al
 100c986:	46 0f b6 14 0b 	movzx	r10d, byte ptr [rbx + r9]
 100c98b:	41 80 fa 01 	cmp	r10b, 1
 100c98f:	0f 87 5b 01 00 00 	ja	347 <_runtime.mapassign_fast32+0x210>
 100c995:	48 85 c9 	test	rcx, rcx
 100c998:	49 89 db 	mov	r11, rbx
 100c99b:	48 0f 45 d9 	cmovne	rbx, rcx
 100c99f:	4d 89 cc 	mov	r12, r9
 100c9a2:	4d 0f 45 c8 	cmovne	r9, r8
 100c9a6:	45 84 d2 	test	r10b, r10b
 100c9a9:	75 be 	jne	-66 <_runtime.mapassign_fast32+0x89>
 100c9ab:	48 83 7e 18 00 	cmp	qword ptr [rsi + 24], 0
 100c9b0:	0f 85 a7 00 00 00 	jne	167 <_runtime.mapassign_fast32+0x17d>
 100c9b6:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 100c9b9:	48 ff c7 	inc	rdi
 100c9bc:	0f b6 4e 09 	movzx	ecx, byte ptr [rsi + 9]
 100c9c0:	48 83 ff 08 	cmp	rdi, 8
 100c9c4:	7e 77 	jle	119 <_runtime.mapassign_fast32+0x15d>
 100c9c6:	41 b8 01 00 00 00 	mov	r8d, 1
 100c9cc:	49 d3 e0 	shl	r8, cl
 100c9cf:	49 d1 e8 	shr	r8
 100c9d2:	4f 8d 14 40 	lea	r10, [r8 + 2*r8]
 100c9d6:	4f 8d 04 90 	lea	r8, [r8 + 4*r10]
 100c9da:	4c 39 c7 	cmp	rdi, r8
 100c9dd:	76 5e 	jbe	94 <_runtime.mapassign_fast32+0x15d>
 100c9df:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100c9e3:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100c9e8:	e8 e3 f1 ff ff 	call	-3613 <_runtime.hashGrow>
 100c9ed:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100c9f2:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 100c9f7:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100c9fc:	48 89 d0 	mov	rax, rdx
 100c9ff:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100ca04:	0f b6 59 09 	movzx	ebx, byte ptr [rcx + 9]
 100ca08:	48 89 ce 	mov	rsi, rcx
 100ca0b:	89 d9 	mov	ecx, ebx
 100ca0d:	bf 01 00 00 00 	mov	edi, 1
 100ca12:	48 d3 e7 	shl	rdi, cl
 100ca15:	48 8d 5f ff 	lea	rbx, [rdi - 1]
 100ca19:	48 21 c3 	and	rbx, rax
 100ca1c:	48 83 7e 18 00 	cmp	qword ptr [rsi + 24], 0
 100ca21:	0f 85 24 01 00 00 	jne	292 <_runtime.mapassign_fast32+0x26b>
 100ca27:	0f b7 7a 52 	movzx	edi, word ptr [rdx + 82]
 100ca2b:	48 0f af df 	imul	rbx, rdi
 100ca2f:	48 03 5e 10 	add	rbx, qword ptr [rsi + 16]
 100ca33:	31 c9 	xor	ecx, ecx
 100ca35:	45 31 c0 	xor	r8d, r8d
 100ca38:	e9 f8 00 00 00 	jmp	248 <_runtime.mapassign_fast32+0x255>
 100ca3d:	0f b7 7e 0a 	movzx	edi, word ptr [rsi + 10]
 100ca41:	80 f9 0f 	cmp	cl, 15
 100ca44:	76 05 	jbe	5 <_runtime.mapassign_fast32+0x16b>
 100ca46:	b9 0f 00 00 00 	mov	ecx, 15
 100ca4b:	83 e1 0f 	and	ecx, 15
 100ca4e:	41 b8 01 00 00 00 	mov	r8d, 1
 100ca54:	41 d3 e0 	shl	r8d, cl
 100ca57:	66 44 39 c7 	cmp	di, r8w
 100ca5b:	73 82 	jae	-126 <_runtime.mapassign_fast32+0xff>
 100ca5d:	48 85 db 	test	rbx, rbx
 100ca60:	74 5f 	je	95 <_runtime.mapassign_fast32+0x1e1>
 100ca62:	48 c1 e8 38 	shr	rax, 56
 100ca66:	3c 05 	cmp	al, 5
 100ca68:	73 03 	jae	3 <_runtime.mapassign_fast32+0x18d>
 100ca6a:	83 c0 05 	add	eax, 5
 100ca6d:	84 03 	test	byte ptr [rbx], al
 100ca6f:	4c 89 c9 	mov	rcx, r9
 100ca72:	49 83 e1 07 	and	r9, 7
 100ca76:	42 88 04 0b 	mov	byte ptr [rbx + r9], al
 100ca7a:	48 89 d8 	mov	rax, rbx
 100ca7d:	48 8d 1c 8b 	lea	rbx, [rbx + 4*rcx]
 100ca81:	48 8d 5b 08 	lea	rbx, [rbx + 8]
 100ca85:	90 	nop
 100ca86:	8b 7c 24 50 	mov	edi, dword ptr [rsp + 80]
 100ca8a:	89 3b 	mov	dword ptr [rbx], edi
 100ca8c:	48 ff 06 	inc	qword ptr [rsi]
 100ca8f:	0f b6 52 51 	movzx	edx, byte ptr [rdx + 81]
 100ca93:	48 0f af ca 	imul	rcx, rdx
 100ca97:	0f b6 56 08 	movzx	edx, byte ptr [rsi + 8]
 100ca9b:	48 8d 04 01 	lea	rax, [rcx + rax]
 100ca9f:	48 8d 40 28 	lea	rax, [rax + 40]
 100caa3:	f6 c2 04 	test	dl, 4
 100caa6:	0f 84 23 01 00 00 	je	291 <_runtime.mapassign_fast32+0x2ef>
 100caac:	83 e2 fb 	and	edx, -5
 100caaf:	88 56 08 	mov	byte ptr [rsi + 8], dl
 100cab2:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100cab7:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100cabc:	48 83 c4 38 	add	rsp, 56
 100cac0:	c3 	ret
 100cac1:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100cac5:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100caca:	4c 89 5c 24 10 	mov	qword ptr [rsp + 16], r11
 100cacf:	e8 dc e1 ff ff 	call	-7716 <_runtime.(*hmap).newoverflow>
 100cad4:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100cad9:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100cade:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100cae3:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 100cae8:	45 31 c9 	xor	r9d, r9d
 100caeb:	e9 72 ff ff ff 	jmp	-142 <_runtime.mapassign_fast32+0x182>
 100caf0:	49 89 da 	mov	r10, rbx
 100caf3:	4a 8d 1c 8b 	lea	rbx, [rbx + 4*r9]
 100caf7:	48 8d 5b 08 	lea	rbx, [rbx + 8]
 100cafb:	44 8b 5c 24 50 	mov	r11d, dword ptr [rsp + 80]
 100cb00:	44 39 1b 	cmp	dword ptr [rbx], r11d
 100cb03:	74 11 	je	17 <_runtime.mapassign_fast32+0x236>
 100cb05:	4d 89 d3 	mov	r11, r10
 100cb08:	4d 89 cc 	mov	r12, r9
 100cb0b:	48 89 cb 	mov	rbx, rcx
 100cb0e:	4d 89 c1 	mov	r9, r8
 100cb11:	e9 53 fe ff ff 	jmp	-429 <_runtime.mapassign_fast32+0x89>
 100cb16:	4c 89 d0 	mov	rax, r10
 100cb19:	4c 89 c9 	mov	rcx, r9
 100cb1c:	e9 6e ff ff ff 	jmp	-146 <_runtime.mapassign_fast32+0x1af>
 100cb21:	49 89 d9 	mov	r9, rbx
 100cb24:	48 8d 1c 3b 	lea	rbx, [rbx + rdi]
 100cb28:	48 8d 5b f8 	lea	rbx, [rbx - 8]
 100cb2c:	90 	nop
 100cb2d:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 100cb30:	48 85 db 	test	rbx, rbx
 100cb33:	74 08 	je	8 <_runtime.mapassign_fast32+0x25d>
 100cb35:	45 31 c9 	xor	r9d, r9d
 100cb38:	e9 3d fe ff ff 	jmp	-451 <_runtime.mapassign_fast32+0x9a>
 100cb3d:	4d 89 cb 	mov	r11, r9
 100cb40:	48 89 cb 	mov	rbx, rcx
 100cb43:	4d 89 c1 	mov	r9, r8
 100cb46:	e9 60 fe ff ff 	jmp	-416 <_runtime.mapassign_fast32+0xcb>
 100cb4b:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 100cb50:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100cb54:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100cb59:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 100cb5e:	e8 cd 00 00 00 	call	205 <_runtime.growWork_fast32>
 100cb63:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100cb68:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 100cb6d:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 100cb72:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 100cb77:	e9 ab fe ff ff 	jmp	-341 <_runtime.mapassign_fast32+0x147>
 100cb7c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100cb81:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 100cb85:	48 8b 11 	mov	rdx, qword ptr [rcx]
 100cb88:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100cb8c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100cb91:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 100cb96:	e8 15 cd ff ff 	call	-13035 <_runtime.mallocgc>
 100cb9b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100cba0:	83 3d 59 ad 0e 00 00 	cmp	dword ptr [rip + 961881], 0
 100cba7:	75 16 	jne	22 <_runtime.mapassign_fast32+0x2df>
 100cba9:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 100cbae:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 100cbb2:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100cbb7:	48 89 d1 	mov	rcx, rdx
 100cbba:	e9 a0 fd ff ff 	jmp	-608 <_runtime.mapassign_fast32+0x7f>
 100cbbf:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 100cbc4:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 100cbc8:	e8 13 5e 04 00 	call	286227 <_runtime.gcWriteBarrier>
 100cbcd:	eb e3 	jmp	-29 <_runtime.mapassign_fast32+0x2d2>
 100cbcf:	48 8d 05 07 78 06 00 	lea	rax, [rip + 423943]
 100cbd6:	48 89 04 24 	mov	qword ptr [rsp], rax
 100cbda:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 100cbe3:	e8 78 c1 01 00 	call	115064 <_runtime.throw>
 100cbe8:	48 8d 05 ee 77 06 00 	lea	rax, [rip + 423918]
 100cbef:	48 89 04 24 	mov	qword ptr [rsp], rax
 100cbf3:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 100cbfc:	e8 5f c1 01 00 	call	115039 <_runtime.throw>
 100cc01:	48 8d 05 f8 6b 05 00 	lea	rax, [rip + 355320]
 100cc08:	48 89 04 24 	mov	qword ptr [rsp], rax
 100cc0c:	48 8d 05 ad 6e 07 00 	lea	rax, [rip + 487085]
 100cc13:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100cc18:	e8 a3 b9 01 00 	call	113059 <_runtime.gopanic>
 100cc1d:	90 	nop
 100cc1e:	e8 ad 3f 04 00 	call	278445 <_runtime.morestack_noctxt>
 100cc23:	e9 b8 fc ff ff 	jmp	-840 <_runtime.mapassign_fast32>
 100cc28:	cc 	int3
 100cc29:	cc 	int3
 100cc2a:	cc 	int3
 100cc2b:	cc 	int3
 100cc2c:	cc 	int3
 100cc2d:	cc 	int3
 100cc2e:	cc 	int3
 100cc2f:	cc 	int3

_runtime.growWork_fast32:
 100cc30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100cc39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100cc3d:	0f 86 87 00 00 00 	jbe	135 <_runtime.growWork_fast32+0x9a>
 100cc43:	48 83 ec 20 	sub	rsp, 32
 100cc47:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100cc4c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100cc51:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100cc56:	0f b6 50 09 	movzx	edx, byte ptr [rax + 9]
 100cc5a:	0f b6 58 08 	movzx	ebx, byte ptr [rax + 8]
 100cc5e:	f6 c3 08 	test	bl, 8
 100cc61:	74 63 	je	99 <_runtime.growWork_fast32+0x96>
 100cc63:	90 	nop
 100cc64:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 100cc69:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100cc6d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100cc72:	89 d1 	mov	ecx, edx
 100cc74:	be 01 00 00 00 	mov	esi, 1
 100cc79:	48 d3 e6 	shl	rsi, cl
 100cc7c:	48 8d 56 ff 	lea	rdx, [rsi - 1]
 100cc80:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 100cc85:	48 21 d6 	and	rsi, rdx
 100cc88:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100cc8d:	e8 4e 00 00 00 	call	78 <_runtime.evacuate_fast32>
 100cc92:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100cc97:	48 83 78 18 00 	cmp	qword ptr [rax + 24], 0
 100cc9c:	75 0a 	jne	10 <_runtime.growWork_fast32+0x78>
 100cc9e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100cca3:	48 83 c4 20 	add	rsp, 32
 100cca7:	c3 	ret
 100cca8:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 100ccac:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 100ccb1:	48 89 14 24 	mov	qword ptr [rsp], rdx
 100ccb5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100ccba:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100ccbf:	e8 1c 00 00 00 	call	28 <_runtime.evacuate_fast32>
 100ccc4:	eb d8 	jmp	-40 <_runtime.growWork_fast32+0x6e>
 100ccc6:	ff ca 	dec	edx
 100ccc8:	eb 99 	jmp	-103 <_runtime.growWork_fast32+0x33>
 100ccca:	e8 01 3f 04 00 	call	278273 <_runtime.morestack_noctxt>
 100cccf:	e9 5c ff ff ff 	jmp	-164 <_runtime.growWork_fast32>
 100ccd4:	cc 	int3
 100ccd5:	cc 	int3
 100ccd6:	cc 	int3
 100ccd7:	cc 	int3
 100ccd8:	cc 	int3
 100ccd9:	cc 	int3
 100ccda:	cc 	int3
 100ccdb:	cc 	int3
 100ccdc:	cc 	int3
 100ccdd:	cc 	int3
 100ccde:	cc 	int3
 100ccdf:	cc 	int3

_runtime.evacuate_fast32:
 100cce0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100cce9:	48 8d 44 24 e0 	lea	rax, [rsp - 32]
 100ccee:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 100ccf2:	0f 86 d1 03 00 00 	jbe	977 <_runtime.evacuate_fast32+0x3e9>
 100ccf8:	48 81 ec a0 00 00 00 	sub	rsp, 160
 100ccff:	48 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], rbp
 100cd07:	48 8d ac 24 98 00 00 00 	lea	rbp, [rsp + 152]
 100cd0f:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 100cd17:	0f b7 73 52 	movzx	esi, word ptr [rbx + 82]
 100cd1b:	48 8b bc 24 b8 00 00 00 	mov	rdi, qword ptr [rsp + 184]
 100cd23:	48 0f af f7 	imul	rsi, rdi
 100cd27:	90 	nop
 100cd28:	4c 8b 84 24 b0 00 00 00 	mov	r8, qword ptr [rsp + 176]
 100cd30:	49 03 70 18 	add	rsi, qword ptr [r8 + 24]
 100cd34:	45 0f b6 48 09 	movzx	r9d, byte ptr [r8 + 9]
 100cd39:	45 0f b6 50 08 	movzx	r10d, byte ptr [r8 + 8]
 100cd3e:	41 f6 c2 08 	test	r10b, 8
 100cd42:	0f 84 52 03 00 00 	je	850 <_runtime.evacuate_fast32+0x3ba>
 100cd48:	44 89 c9 	mov	ecx, r9d
 100cd4b:	41 ba 01 00 00 00 	mov	r10d, 1
 100cd51:	49 d3 e2 	shl	r10, cl
 100cd54:	44 0f b6 1e 	movzx	r11d, byte ptr [rsi]
 100cd58:	41 80 fb 01 	cmp	r11b, 1
 100cd5c:	76 0a 	jbe	10 <_runtime.evacuate_fast32+0x88>
 100cd5e:	41 80 fb 05 	cmp	r11b, 5
 100cd62:	0f 82 8f 02 00 00 	jb	655 <_runtime.evacuate_fast32+0x317>
 100cd68:	0f 57 c0 	xorps	xmm0, xmm0
 100cd6b:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 100cd70:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 100cd75:	0f 11 44 24 78 	movups	xmmword ptr [rsp + 120], xmm0
 100cd7a:	0f 11 84 24 88 00 00 00 	movups	xmmword ptr [rsp + 136], xmm0
 100cd82:	44 0f b7 5b 52 	movzx	r11d, word ptr [rbx + 82]
 100cd87:	4c 0f af df 	imul	r11, rdi
 100cd8b:	4d 03 58 10 	add	r11, qword ptr [r8 + 16]
 100cd8f:	4c 89 5c 24 58 	mov	qword ptr [rsp + 88], r11
 100cd94:	4d 8d 63 08 	lea	r12, [r11 + 8]
 100cd98:	4c 89 64 24 68 	mov	qword ptr [rsp + 104], r12
 100cd9d:	49 83 c3 28 	add	r11, 40
 100cda1:	4c 89 5c 24 70 	mov	qword ptr [rsp + 112], r11
 100cda6:	45 0f b6 58 08 	movzx	r11d, byte ptr [r8 + 8]
 100cdab:	41 f6 c3 08 	test	r11b, 8
 100cdaf:	0f 84 b2 02 00 00 	je	690 <_runtime.evacuate_fast32+0x387>
 100cdb5:	88 4c 24 27 	mov	byte ptr [rsp + 39], cl
 100cdb9:	4c 89 54 24 38 	mov	qword ptr [rsp + 56], r10
 100cdbe:	e9 05 02 00 00 	jmp	517 <_runtime.evacuate_fast32+0x2e8>
 100cdc3:	48 ff c0 	inc	rax
 100cdc6:	44 0f b6 6b 51 	movzx	r13d, byte ptr [rbx + 81]
 100cdcb:	49 83 c3 04 	add	r11, 4
 100cdcf:	4d 01 ec 	add	r12, r13
 100cdd2:	48 83 f8 08 	cmp	rax, 8
 100cdd6:	0f 8d dc 01 00 00 	jge	476 <_runtime.evacuate_fast32+0x2d8>
 100cddc:	44 0f b6 2c 06 	movzx	r13d, byte ptr [rsi + rax]
 100cde1:	41 80 fd 01 	cmp	r13b, 1
 100cde5:	77 06 	ja	6 <_runtime.evacuate_fast32+0x10d>
 100cde7:	c6 04 06 04 	mov	byte ptr [rsi + rax], 4
 100cdeb:	eb d6 	jmp	-42 <_runtime.evacuate_fast32+0xe3>
 100cded:	41 80 fd 05 	cmp	r13b, 5
 100cdf1:	0f 82 b8 02 00 00 	jb	696 <_runtime.evacuate_fast32+0x3cf>
 100cdf7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100cdfc:	44 88 6c 24 26 	mov	byte ptr [rsp + 38], r13b
 100ce01:	4c 89 64 24 48 	mov	qword ptr [rsp + 72], r12
 100ce06:	4c 89 5c 24 40 	mov	qword ptr [rsp + 64], r11
 100ce0b:	45 0f b6 70 08 	movzx	r14d, byte ptr [r8 + 8]
 100ce10:	41 f6 c6 08 	test	r14b, 8
 100ce14:	0f 84 37 01 00 00 	je	311 <_runtime.evacuate_fast32+0x271>
 100ce1a:	31 d2 	xor	edx, edx
 100ce1c:	44 8d 72 02 	lea	r14d, [rdx + 2]
 100ce20:	44 88 34 06 	mov	byte ptr [rsi + rax], r14b
 100ce24:	0f b6 d2 	movzx	edx, dl
 100ce27:	48 83 fa 02 	cmp	rdx, 2
 100ce2b:	0f 83 71 02 00 00 	jae	625 <_runtime.evacuate_fast32+0x3c2>
 100ce31:	48 c1 e2 05 	shl	rdx, 5
 100ce35:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 100ce3a:	4c 8b 74 14 60 	mov	r14, qword ptr [rsp + rdx + 96]
 100ce3f:	49 83 fe 08 	cmp	r14, 8
 100ce43:	0f 84 a9 00 00 00 	je	169 <_runtime.evacuate_fast32+0x212>
 100ce49:	48 8b 44 14 58 	mov	rax, qword ptr [rsp + rdx + 88]
 100ce4e:	84 00 	test	byte ptr [rax], al
 100ce50:	48 8b 4c 14 60 	mov	rcx, qword ptr [rsp + rdx + 96]
 100ce55:	48 83 e1 07 	and	rcx, 7
 100ce59:	44 88 2c 08 	mov	byte ptr [rax + rcx], r13b
 100ce5d:	48 8b 44 14 68 	mov	rax, qword ptr [rsp + rdx + 104]
 100ce62:	41 8b 0b 	mov	ecx, dword ptr [r11]
 100ce65:	89 08 	mov	dword ptr [rax], ecx
 100ce67:	48 8b 43 38 	mov	rax, qword ptr [rbx + 56]
 100ce6b:	48 8b 4c 14 70 	mov	rcx, qword ptr [rsp + rdx + 112]
 100ce70:	48 89 04 24 	mov	qword ptr [rsp], rax
 100ce74:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100ce79:	4c 89 64 24 10 	mov	qword ptr [rsp + 16], r12
 100ce7e:	e8 5d 02 00 00 	call	605 <_runtime.typedmemmove>
 100ce83:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100ce88:	48 8b 4c 04 60 	mov	rcx, qword ptr [rsp + rax + 96]
 100ce8d:	48 ff c1 	inc	rcx
 100ce90:	48 89 4c 04 60 	mov	qword ptr [rsp + rax + 96], rcx
 100ce95:	48 8b 4c 04 68 	mov	rcx, qword ptr [rsp + rax + 104]
 100ce9a:	48 83 c1 04 	add	rcx, 4
 100ce9e:	48 89 4c 04 68 	mov	qword ptr [rsp + rax + 104], rcx
 100cea3:	48 8b 4c 04 70 	mov	rcx, qword ptr [rsp + rax + 112]
 100cea8:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 100ceb0:	0f b6 53 51 	movzx	edx, byte ptr [rbx + 81]
 100ceb4:	48 01 d1 	add	rcx, rdx
 100ceb7:	48 89 4c 04 70 	mov	qword ptr [rsp + rax + 112], rcx
 100cebc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100cec1:	0f b6 4c 24 27 	movzx	ecx, byte ptr [rsp + 39]
 100cec6:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100cecb:	48 8b bc 24 b8 00 00 00 	mov	rdi, qword ptr [rsp + 184]
 100ced3:	4c 8b 84 24 b0 00 00 00 	mov	r8, qword ptr [rsp + 176]
 100cedb:	41 89 c9 	mov	r9d, ecx
 100cede:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 100cee3:	4c 8b 5c 24 40 	mov	r11, qword ptr [rsp + 64]
 100cee8:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100ceed:	e9 d1 fe ff ff 	jmp	-303 <_runtime.evacuate_fast32+0xe3>
 100cef2:	48 8b 44 14 58 	mov	rax, qword ptr [rsp + rdx + 88]
 100cef7:	4c 89 04 24 	mov	qword ptr [rsp], r8
 100cefb:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100cf00:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100cf05:	e8 a6 dd ff ff 	call	-8794 <_runtime.(*hmap).newoverflow>
 100cf0a:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100cf0f:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100cf14:	48 89 44 14 58 	mov	qword ptr [rsp + rdx + 88], rax
 100cf19:	48 c7 44 14 60 00 00 00 00 	mov	qword ptr [rsp + rdx + 96], 0
 100cf22:	48 8d 48 08 	lea	rcx, [rax + 8]
 100cf26:	48 89 4c 14 68 	mov	qword ptr [rsp + rdx + 104], rcx
 100cf2b:	48 83 c0 28 	add	rax, 40
 100cf2f:	48 89 44 14 70 	mov	qword ptr [rsp + rdx + 112], rax
 100cf34:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 100cf3c:	4c 8b 5c 24 40 	mov	r11, qword ptr [rsp + 64]
 100cf41:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100cf46:	44 0f b6 6c 24 26 	movzx	r13d, byte ptr [rsp + 38]
 100cf4c:	e9 f8 fe ff ff 	jmp	-264 <_runtime.evacuate_fast32+0x169>
 100cf51:	48 8b 53 48 	mov	rdx, qword ptr [rbx + 72]
 100cf55:	41 8b 40 0c 	mov	eax, dword ptr [r8 + 12]
 100cf59:	4c 89 1c 24 	mov	qword ptr [rsp], r11
 100cf5d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100cf62:	48 8b 02 	mov	rax, qword ptr [rdx]
 100cf65:	ff d0 	call	rax
 100cf67:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100cf6c:	44 0f b6 4c 24 27 	movzx	r9d, byte ptr [rsp + 39]
 100cf72:	4c 0f a3 c8 	bt	rax, r9
 100cf76:	0f 92 c2 	setb	dl
 100cf79:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100cf7e:	44 89 c9 	mov	ecx, r9d
 100cf81:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 100cf89:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100cf8e:	48 8b bc 24 b8 00 00 00 	mov	rdi, qword ptr [rsp + 184]
 100cf96:	4c 8b 84 24 b0 00 00 00 	mov	r8, qword ptr [rsp + 176]
 100cf9e:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 100cfa3:	4c 8b 5c 24 40 	mov	r11, qword ptr [rsp + 64]
 100cfa8:	4c 8b 64 24 48 	mov	r12, qword ptr [rsp + 72]
 100cfad:	44 0f b6 6c 24 26 	movzx	r13d, byte ptr [rsp + 38]
 100cfb3:	e9 64 fe ff ff 	jmp	-412 <_runtime.evacuate_fast32+0x13c>
 100cfb8:	44 0f b7 5b 52 	movzx	r11d, word ptr [rbx + 82]
 100cfbd:	4e 8d 1c 1e 	lea	r11, [rsi + r11]
 100cfc1:	4d 8d 5b f8 	lea	r11, [r11 - 8]
 100cfc5:	49 8b 33 	mov	rsi, qword ptr [r11]
 100cfc8:	48 85 f6 	test	rsi, rsi
 100cfcb:	74 16 	je	22 <_runtime.evacuate_fast32+0x303>
 100cfcd:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 100cfd2:	90 	nop
 100cfd3:	90 	nop
 100cfd4:	4c 8d 5e 08 	lea	r11, [rsi + 8]
 100cfd8:	4c 8d 66 28 	lea	r12, [rsi + 40]
 100cfdc:	31 c0 	xor	eax, eax
 100cfde:	e9 ef fd ff ff 	jmp	-529 <_runtime.evacuate_fast32+0xf2>
 100cfe3:	41 0f b6 40 08 	movzx	eax, byte ptr [r8 + 8]
 100cfe8:	a8 02 	test	al, 2
 100cfea:	75 0b 	jne	11 <_runtime.evacuate_fast32+0x317>
 100cfec:	48 8b 43 40 	mov	rax, qword ptr [rbx + 64]
 100cff0:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 100cff5:	75 2b 	jne	43 <_runtime.evacuate_fast32+0x342>
 100cff7:	49 39 78 20 	cmp	qword ptr [r8 + 32], rdi
 100cffb:	74 10 	je	16 <_runtime.evacuate_fast32+0x32d>
 100cffd:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 100d005:	48 81 c4 a0 00 00 00 	add	rsp, 160
 100d00c:	c3 	ret
 100d00d:	4c 89 04 24 	mov	qword ptr [rsp], r8
 100d011:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 100d016:	4c 89 54 24 10 	mov	qword ptr [rsp + 16], r10
 100d01b:	e8 90 f4 ff ff 	call	-2928 <_runtime.advanceEvacuationMark>
 100d020:	eb db 	jmp	-37 <_runtime.evacuate_fast32+0x31d>
 100d022:	0f b7 43 52 	movzx	eax, word ptr [rbx + 82]
 100d026:	48 89 c1 	mov	rcx, rax
 100d029:	48 0f af c7 	imul	rax, rdi
 100d02d:	90 	nop
 100d02e:	49 03 40 18 	add	rax, qword ptr [r8 + 24]
 100d032:	48 83 c0 08 	add	rax, 8
 100d036:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d03a:	48 8d 41 f8 	lea	rax, [rcx - 8]
 100d03e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100d043:	e8 98 03 00 00 	call	920 <_runtime.memclrHasPointers>
 100d048:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 100d050:	48 8b bc 24 b8 00 00 00 	mov	rdi, qword ptr [rsp + 184]
 100d058:	4c 8b 84 24 b0 00 00 00 	mov	r8, qword ptr [rsp + 176]
 100d060:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 100d065:	eb 90 	jmp	-112 <_runtime.evacuate_fast32+0x317>
 100d067:	4d 8d 1c 3a 	lea	r11, [r10 + rdi]
 100d06b:	44 0f b7 63 52 	movzx	r12d, word ptr [rbx + 82]
 100d070:	4d 0f af dc 	imul	r11, r12
 100d074:	4d 03 58 10 	add	r11, qword ptr [r8 + 16]
 100d078:	4c 89 5c 24 78 	mov	qword ptr [rsp + 120], r11
 100d07d:	4d 8d 63 08 	lea	r12, [r11 + 8]
 100d081:	4c 89 a4 24 88 00 00 00 	mov	qword ptr [rsp + 136], r12
 100d089:	49 83 c3 28 	add	r11, 40
 100d08d:	4c 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], r11
 100d095:	e9 1b fd ff ff 	jmp	-741 <_runtime.evacuate_fast32+0xd5>
 100d09a:	41 ff c9 	dec	r9d
 100d09d:	e9 a6 fc ff ff 	jmp	-858 <_runtime.evacuate_fast32+0x68>
 100d0a2:	48 89 d0 	mov	rax, rdx
 100d0a5:	b9 02 00 00 00 	mov	ecx, 2
 100d0aa:	e8 a1 62 04 00 	call	287393 <_runtime.panicIndex>
 100d0af:	48 8d 05 82 66 06 00 	lea	rax, [rip + 419458]
 100d0b6:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d0ba:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 100d0c3:	e8 98 bc 01 00 	call	113816 <_runtime.throw>
 100d0c8:	90 	nop
 100d0c9:	e8 02 3b 04 00 	call	277250 <_runtime.morestack_noctxt>
 100d0ce:	e9 0d fc ff ff 	jmp	-1011 <_runtime.evacuate_fast32>
 100d0d3:	cc 	int3
 100d0d4:	cc 	int3
 100d0d5:	cc 	int3
 100d0d6:	cc 	int3
 100d0d7:	cc 	int3
 100d0d8:	cc 	int3
 100d0d9:	cc 	int3
 100d0da:	cc 	int3
 100d0db:	cc 	int3
 100d0dc:	cc 	int3
 100d0dd:	cc 	int3
 100d0de:	cc 	int3
 100d0df:	cc 	int3

_runtime.typedmemmove:
 100d0e0:	48 83 ec 30 	sub	rsp, 48
 100d0e4:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100d0e9:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100d0ee:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d0f3:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 100d0f8:	48 39 c8 	cmp	rax, rcx
 100d0fb:	0f 84 94 00 00 00 	je	148 <_runtime.typedmemmove+0xb5>
 100d101:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100d106:	48 83 7a 08 00 	cmp	qword ptr [rdx + 8], 0
 100d10b:	75 5e 	jne	94 <_runtime.typedmemmove+0x8b>
 100d10d:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 100d110:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d114:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100d119:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 100d11e:	e8 2d 6a 04 00 	call	289325 <_runtime.memmove>
 100d123:	80 3d db a7 0e 00 00 	cmp	byte ptr [rip + 960475], 0
 100d12a:	75 0a 	jne	10 <_runtime.typedmemmove+0x56>
 100d12c:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d131:	48 83 c4 30 	add	rsp, 48
 100d135:	c3 	ret
 100d136:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100d13b:	48 8b 08 	mov	rcx, qword ptr [rax]
 100d13e:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d142:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d147:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100d14c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100d151:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100d156:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 100d15f:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100d164:	e8 a7 5c ff ff 	call	-41817 <_runtime.cgoCheckMemmove>
 100d169:	eb c1 	jmp	-63 <_runtime.typedmemmove+0x4c>
 100d16b:	48 8b 32 	mov	rsi, qword ptr [rdx]
 100d16e:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d172:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100d177:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100d17c:	e8 9f 0b 00 00 	call	2975 <_runtime.bulkBarrierPreWrite>
 100d181:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d186:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 100d18b:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100d190:	e9 78 ff ff ff 	jmp	-136 <_runtime.typedmemmove+0x2d>
 100d195:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d19a:	48 83 c4 30 	add	rsp, 48
 100d19e:	c3 	ret
 100d19f:	cc 	int3

_runtime.reflectcallmove:
 100d1a0:	48 83 ec 20 	sub	rsp, 32
 100d1a4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100d1a9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100d1ae:	80 3d 4f a7 0e 00 00 	cmp	byte ptr [rip + 960335], 0
 100d1b5:	74 75 	je	117 <_runtime.reflectcallmove+0x8c>
 100d1b7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100d1bc:	48 85 c0 	test	rax, rax
 100d1bf:	74 64 	je	100 <_runtime.reflectcallmove+0x85>
 100d1c1:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 100d1c6:	74 56 	je	86 <_runtime.reflectcallmove+0x7e>
 100d1c8:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d1cd:	48 83 f8 08 	cmp	rax, 8
 100d1d1:	73 27 	jae	39 <_runtime.reflectcallmove+0x5a>
 100d1d3:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100d1d8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d1dc:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100d1e1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100d1e6:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100d1eb:	e8 60 69 04 00 	call	289120 <_runtime.memmove>
 100d1f0:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100d1f5:	48 83 c4 20 	add	rsp, 32
 100d1f9:	c3 	ret
 100d1fa:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100d1ff:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d203:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100d208:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100d20d:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100d212:	e8 09 0b 00 00 	call	2825 <_runtime.bulkBarrierPreWrite>
 100d217:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d21c:	eb b5 	jmp	-75 <_runtime.reflectcallmove+0x33>
 100d21e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d223:	eb ae 	jmp	-82 <_runtime.reflectcallmove+0x33>
 100d225:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d22a:	eb a7 	jmp	-89 <_runtime.reflectcallmove+0x33>
 100d22c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d231:	eb a0 	jmp	-96 <_runtime.reflectcallmove+0x33>
 100d233:	cc 	int3
 100d234:	cc 	int3
 100d235:	cc 	int3
 100d236:	cc 	int3
 100d237:	cc 	int3
 100d238:	cc 	int3
 100d239:	cc 	int3
 100d23a:	cc 	int3
 100d23b:	cc 	int3
 100d23c:	cc 	int3
 100d23d:	cc 	int3
 100d23e:	cc 	int3
 100d23f:	cc 	int3

_runtime.typedslicecopy:
 100d240:	48 83 ec 58 	sub	rsp, 88
 100d244:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 100d249:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 100d24e:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 100d253:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 100d25b:	48 39 c8 	cmp	rax, rcx
 100d25e:	48 89 c2 	mov	rdx, rax
 100d261:	48 0f 4f c1 	cmovg	rax, rcx
 100d265:	48 85 c0 	test	rax, rax
 100d268:	0f 84 f6 00 00 00 	je	246 <_runtime.typedslicecopy+0x124>
 100d26e:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 100d273:	80 3d 8b a6 0e 00 00 	cmp	byte ptr [rip + 960139], 0
 100d27a:	0f 85 8f 00 00 00 	jne	143 <_runtime.typedslicecopy+0xcf>
 100d280:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 100d285:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 100d28d:	48 39 d1 	cmp	rcx, rdx
 100d290:	74 6b 	je	107 <_runtime.typedslicecopy+0xbd>
 100d292:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 100d297:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 100d29a:	48 0f af d8 	imul	rbx, rax
 100d29e:	80 3d 5f a6 0e 00 00 	cmp	byte ptr [rip + 960095], 0
 100d2a5:	75 2a 	jne	42 <_runtime.typedslicecopy+0x91>
 100d2a7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d2ab:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100d2b0:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 100d2b5:	e8 96 68 04 00 	call	288918 <_runtime.memmove>
 100d2ba:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100d2bf:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 100d2c7:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 100d2cc:	48 83 c4 58 	add	rsp, 88
 100d2d0:	c3 	ret
 100d2d1:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 100d2d6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d2da:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100d2df:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 100d2e4:	e8 37 0a 00 00 	call	2615 <_runtime.bulkBarrierPreWrite>
 100d2e9:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 100d2ee:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 100d2f6:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 100d2fb:	eb aa 	jmp	-86 <_runtime.typedslicecopy+0x67>
 100d2fd:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 100d305:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 100d30a:	48 83 c4 58 	add	rsp, 88
 100d30e:	c3 	ret
 100d30f:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 100d314:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100d318:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100d31d:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100d322:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100d327:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 100d32c:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 100d331:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 100d339:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 100d33e:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 100d343:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 100d34b:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 100d350:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100d355:	e8 56 5b ff ff 	call	-42154 <_runtime.cgoCheckSliceCopy>
 100d35a:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100d35f:	e9 1c ff ff ff 	jmp	-228 <_runtime.typedslicecopy+0x40>
 100d364:	48 c7 84 24 98 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 152], 0
 100d370:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 100d375:	48 83 c4 58 	add	rsp, 88
 100d379:	c3 	ret
 100d37a:	cc 	int3
 100d37b:	cc 	int3
 100d37c:	cc 	int3
 100d37d:	cc 	int3
 100d37e:	cc 	int3
 100d37f:	cc 	int3

_runtime.typedmemclr:
 100d380:	48 83 ec 20 	sub	rsp, 32
 100d384:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100d389:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100d38e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100d393:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 100d398:	75 20 	jne	32 <_runtime.typedmemclr+0x3a>
 100d39a:	48 8b 00 	mov	rax, qword ptr [rax]
 100d39d:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100d3a2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d3a6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100d3ab:	e8 10 65 04 00 	call	288016 <_runtime.memclrNoHeapPointers>
 100d3b0:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100d3b5:	48 83 c4 20 	add	rsp, 32
 100d3b9:	c3 	ret
 100d3ba:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100d3bf:	48 8b 18 	mov	rbx, qword ptr [rax]
 100d3c2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d3c6:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100d3cf:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 100d3d4:	e8 47 09 00 00 	call	2375 <_runtime.bulkBarrierPreWrite>
 100d3d9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100d3de:	eb ba 	jmp	-70 <_runtime.typedmemclr+0x1a>

_runtime.memclrHasPointers:
 100d3e0:	48 83 ec 20 	sub	rsp, 32
 100d3e4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 100d3e9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 100d3ee:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100d3f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d3f7:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100d400:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100d405:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100d40a:	e8 11 09 00 00 	call	2321 <_runtime.bulkBarrierPreWrite>
 100d40f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100d414:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d418:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100d41d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100d422:	e8 99 64 04 00 	call	287897 <_runtime.memclrNoHeapPointers>
 100d427:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 100d42c:	48 83 c4 20 	add	rsp, 32
 100d430:	c3 	ret
 100d431:	cc 	int3
 100d432:	cc 	int3
 100d433:	cc 	int3
 100d434:	cc 	int3
 100d435:	cc 	int3
 100d436:	cc 	int3
 100d437:	cc 	int3
 100d438:	cc 	int3
 100d439:	cc 	int3
 100d43a:	cc 	int3
 100d43b:	cc 	int3
 100d43c:	cc 	int3
 100d43d:	cc 	int3
 100d43e:	cc 	int3
 100d43f:	cc 	int3

_runtime.(*mspan).refillAllocCache:
 100d440:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100d445:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100d44a:	48 03 41 48 	add	rax, qword ptr [rcx + 72]
 100d44e:	48 8b 00 	mov	rax, qword ptr [rax]
 100d451:	48 f7 d0 	not	rax
 100d454:	90 	nop
 100d455:	48 89 41 40 	mov	qword ptr [rcx + 64], rax
 100d459:	c3 	ret
 100d45a:	cc 	int3
 100d45b:	cc 	int3
 100d45c:	cc 	int3
 100d45d:	cc 	int3
 100d45e:	cc 	int3
 100d45f:	cc 	int3

_runtime.(*mspan).nextFreeIndex:
 100d460:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100d469:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100d46d:	0f 86 61 01 00 00 	jbe	353 <_runtime.(*mspan).nextFreeIndex+0x174>
 100d473:	48 83 ec 30 	sub	rsp, 48
 100d477:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100d47c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100d481:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100d486:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 100d48a:	48 8b 58 38 	mov	rbx, qword ptr [rax + 56]
 100d48e:	48 39 d3 	cmp	rbx, rdx
 100d491:	0f 84 14 01 00 00 	je	276 <_runtime.(*mspan).nextFreeIndex+0x14b>
 100d497:	48 39 da 	cmp	rdx, rbx
 100d49a:	0f 87 1a 01 00 00 	ja	282 <_runtime.(*mspan).nextFreeIndex+0x15a>
 100d4a0:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 100d4a5:	48 8b 70 40 	mov	rsi, qword ptr [rax + 64]
 100d4a9:	48 0f bc f6 	bsf	rsi, rsi
 100d4ad:	bf 40 00 00 00 	mov	edi, 64
 100d4b2:	48 0f 44 f7 	cmove	rsi, rdi
 100d4b6:	eb 42 	jmp	66 <_runtime.(*mspan).nextFreeIndex+0x9a>
 100d4b8:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100d4bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d4c1:	48 c1 e9 03 	shr	rcx, 3
 100d4c5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100d4ca:	e8 71 ff ff ff 	call	-143 <_runtime.(*mspan).refillAllocCache>
 100d4cf:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100d4d4:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 100d4d8:	48 0f bc c9 	bsf	rcx, rcx
 100d4dc:	bf 40 00 00 00 	mov	edi, 64
 100d4e1:	48 0f 44 cf 	cmove	rcx, rdi
 100d4e5:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 100d4ea:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100d4ef:	48 89 d3 	mov	rbx, rdx
 100d4f2:	48 89 ce 	mov	rsi, rcx
 100d4f5:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 100d4fa:	48 83 fe 40 	cmp	rsi, 64
 100d4fe:	75 20 	jne	32 <_runtime.(*mspan).nextFreeIndex+0xc0>
 100d500:	48 8d 4a 40 	lea	rcx, [rdx + 64]
 100d504:	48 83 e1 c0 	and	rcx, -64
 100d508:	48 39 d9 	cmp	rcx, rbx
 100d50b:	72 ab 	jb	-85 <_runtime.(*mspan).nextFreeIndex+0x58>
 100d50d:	48 89 58 30 	mov	qword ptr [rax + 48], rbx
 100d511:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 100d516:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d51b:	48 83 c4 30 	add	rsp, 48
 100d51f:	c3 	ret
 100d520:	48 8d 3c 32 	lea	rdi, [rdx + rsi]
 100d524:	48 39 df 	cmp	rdi, rbx
 100d527:	73 6f 	jae	111 <_runtime.(*mspan).nextFreeIndex+0x138>
 100d529:	48 8d 4e 01 	lea	rcx, [rsi + 1]
 100d52d:	48 83 f9 40 	cmp	rcx, 64
 100d531:	4d 19 c0 	sbb	r8, r8
 100d534:	4c 8b 48 40 	mov	r9, qword ptr [rax + 64]
 100d538:	49 d3 e9 	shr	r9, cl
 100d53b:	4d 21 c1 	and	r9, r8
 100d53e:	4c 89 48 40 	mov	qword ptr [rax + 64], r9
 100d542:	48 8d 14 32 	lea	rdx, [rdx + rsi]
 100d546:	48 8d 52 01 	lea	rdx, [rdx + 1]
 100d54a:	48 f7 c2 3f 00 00 00 	test	rdx, 63
 100d551:	75 05 	jne	5 <_runtime.(*mspan).nextFreeIndex+0xf8>
 100d553:	48 39 da 	cmp	rdx, rbx
 100d556:	75 13 	jne	19 <_runtime.(*mspan).nextFreeIndex+0x10b>
 100d558:	48 89 50 30 	mov	qword ptr [rax + 48], rdx
 100d55c:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 100d561:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d566:	48 83 c4 30 	add	rsp, 48
 100d56a:	c3 	ret
 100d56b:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 100d570:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 100d575:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d579:	48 c1 ea 03 	shr	rdx, 3
 100d57d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 100d582:	e8 b9 fe ff ff 	call	-327 <_runtime.(*mspan).refillAllocCache>
 100d587:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100d58c:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 100d591:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 100d596:	eb c0 	jmp	-64 <_runtime.(*mspan).nextFreeIndex+0xf8>
 100d598:	48 89 58 30 	mov	qword ptr [rax + 48], rbx
 100d59c:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 100d5a1:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d5a6:	48 83 c4 30 	add	rsp, 48
 100d5aa:	c3 	ret
 100d5ab:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 100d5b0:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d5b5:	48 83 c4 30 	add	rsp, 48
 100d5b9:	c3 	ret
 100d5ba:	48 8d 05 e5 70 06 00 	lea	rax, [rip + 422117]
 100d5c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d5c5:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 100d5ce:	e8 8d b7 01 00 	call	112525 <_runtime.throw>
 100d5d3:	90 	nop
 100d5d4:	e8 f7 35 04 00 	call	275959 <_runtime.morestack_noctxt>
 100d5d9:	e9 82 fe ff ff 	jmp	-382 <_runtime.(*mspan).nextFreeIndex>
 100d5de:	cc 	int3
 100d5df:	cc 	int3

_runtime.markBitsForAddr:
 100d5e0:	90 	nop
 100d5e1:	48 b8 00 00 00 00 00 80 00 00 	movabs	rax, 140737488355328
 100d5eb:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 100d5f0:	48 01 d0 	add	rax, rdx
 100d5f3:	48 c1 e8 1a 	shr	rax, 26
 100d5f7:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100d5fd:	0f 82 89 00 00 00 	jb	137 <_runtime.markBitsForAddr+0xac>
 100d603:	31 c0 	xor	eax, eax
 100d605:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 100d609:	48 29 da 	sub	rdx, rbx
 100d60c:	48 85 d2 	test	rdx, rdx
 100d60f:	75 2c 	jne	44 <_runtime.markBitsForAddr+0x5d>
 100d611:	31 c9 	xor	ecx, ecx
 100d613:	90 	nop
 100d614:	48 89 ca 	mov	rdx, rcx
 100d617:	48 c1 e9 03 	shr	rcx, 3
 100d61b:	90 	nop
 100d61c:	48 03 48 50 	add	rcx, qword ptr [rax + 80]
 100d620:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100d625:	48 89 d1 	mov	rcx, rdx
 100d628:	48 83 e1 07 	and	rcx, 7
 100d62c:	b8 01 00 00 00 	mov	eax, 1
 100d631:	d3 e0 	shl	eax, cl
 100d633:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 100d637:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 100d63c:	c3 	ret
 100d63d:	66 83 78 5e 00 	cmp	word ptr [rax + 94], 0
 100d642:	74 15 	je	21 <_runtime.markBitsForAddr+0x79>
 100d644:	0f b6 48 65 	movzx	ecx, byte ptr [rax + 101]
 100d648:	80 f9 40 	cmp	cl, 64
 100d64b:	48 19 db 	sbb	rbx, rbx
 100d64e:	48 d3 ea 	shr	rdx, cl
 100d651:	48 21 da 	and	rdx, rbx
 100d654:	48 89 d1 	mov	rcx, rdx
 100d657:	eb ba 	jmp	-70 <_runtime.markBitsForAddr+0x33>
 100d659:	0f b6 48 65 	movzx	ecx, byte ptr [rax + 101]
 100d65d:	80 f9 40 	cmp	cl, 64
 100d660:	48 19 db 	sbb	rbx, rbx
 100d663:	0f b6 70 66 	movzx	esi, byte ptr [rax + 102]
 100d667:	40 80 fe 40 	cmp	sil, 64
 100d66b:	48 19 ff 	sbb	rdi, rdi
 100d66e:	48 d3 ea 	shr	rdx, cl
 100d671:	48 21 da 	and	rdx, rbx
 100d674:	0f b7 48 5c 	movzx	ecx, word ptr [rax + 92]
 100d678:	48 0f af ca 	imul	rcx, rdx
 100d67c:	48 89 ca 	mov	rdx, rcx
 100d67f:	89 f1 	mov	ecx, esi
 100d681:	48 d3 ea 	shr	rdx, cl
 100d684:	48 21 fa 	and	rdx, rdi
 100d687:	48 89 d1 	mov	rcx, rdx
 100d68a:	eb 87 	jmp	-121 <_runtime.markBitsForAddr+0x33>
 100d68c:	48 8b 1d 3d 7d 0e 00 	mov	rbx, qword ptr [rip + 949565]
 100d693:	84 03 	test	byte ptr [rbx], al
 100d695:	48 8b 04 c3 	mov	rax, qword ptr [rbx + 8*rax]
 100d699:	48 85 c0 	test	rax, rax
 100d69c:	74 1e 	je	30 <_runtime.markBitsForAddr+0xdc>
 100d69e:	48 89 d3 	mov	rbx, rdx
 100d6a1:	48 c1 ea 0d 	shr	rdx, 13
 100d6a5:	48 81 e2 ff 1f 00 00 	and	rdx, 8191
 100d6ac:	48 8b 84 d0 00 00 20 00 	mov	rax, qword ptr [rax + 8*rdx + 2097152]
 100d6b4:	48 89 da 	mov	rdx, rbx
 100d6b7:	e9 49 ff ff ff 	jmp	-183 <_runtime.markBitsForAddr+0x25>
 100d6bc:	31 c0 	xor	eax, eax
 100d6be:	e9 42 ff ff ff 	jmp	-190 <_runtime.markBitsForAddr+0x25>
 100d6c3:	cc 	int3
 100d6c4:	cc 	int3
 100d6c5:	cc 	int3
 100d6c6:	cc 	int3
 100d6c7:	cc 	int3
 100d6c8:	cc 	int3
 100d6c9:	cc 	int3
 100d6ca:	cc 	int3
 100d6cb:	cc 	int3
 100d6cc:	cc 	int3
 100d6cd:	cc 	int3
 100d6ce:	cc 	int3
 100d6cf:	cc 	int3

_runtime.badPointer:
 100d6d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100d6d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100d6dd:	0f 86 1e 02 00 00 	jbe	542 <_runtime.badPointer+0x231>
 100d6e3:	48 83 ec 40 	sub	rsp, 64
 100d6e7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 100d6ec:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 100d6f1:	e8 aa cd 01 00 	call	118186 <_runtime.printlock>
 100d6f6:	e8 a5 cd 01 00 	call	118181 <_runtime.printlock>
 100d6fb:	48 8d 05 83 66 06 00 	lea	rax, [rip + 419459]
 100d702:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d706:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 100d70f:	e8 cc d6 01 00 	call	120524 <_runtime.printstring>
 100d714:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 100d719:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d71d:	e8 6e d5 01 00 	call	120174 <_runtime.printhex>
 100d722:	e8 f9 cd 01 00 	call	118265 <_runtime.printunlock>
 100d727:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100d72c:	8a 48 63 	mov	cl, byte ptr [rax + 99]
 100d72f:	88 4c 24 27 	mov	byte ptr [rsp + 39], cl
 100d733:	80 f9 01 	cmp	cl, 1
 100d736:	0f 84 6f 01 00 00 	je	367 <_runtime.badPointer+0x1db>
 100d73c:	e8 5f cd 01 00 	call	118111 <_runtime.printlock>
 100d741:	48 8d 05 d4 69 06 00 	lea	rax, [rip + 420308]
 100d748:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d74c:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 100d755:	e8 86 d6 01 00 	call	120454 <_runtime.printstring>
 100d75a:	e8 c1 cd 01 00 	call	118209 <_runtime.printunlock>
 100d75f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100d764:	48 8b 48 70 	mov	rcx, qword ptr [rax + 112]
 100d768:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 100d76d:	48 8b 40 18 	mov	rax, qword ptr [rax + 24]
 100d771:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100d776:	e8 25 cd 01 00 	call	118053 <_runtime.printlock>
 100d77b:	48 8d 05 27 5f 06 00 	lea	rax, [rip + 417575]
 100d782:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d786:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 100d78f:	e8 4c d6 01 00 	call	120396 <_runtime.printstring>
 100d794:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100d799:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d79d:	e8 ee d4 01 00 	call	120046 <_runtime.printhex>
 100d7a2:	48 8d 05 5e 5d 06 00 	lea	rax, [rip + 417118]
 100d7a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d7ad:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 100d7b6:	e8 25 d6 01 00 	call	120357 <_runtime.printstring>
 100d7bb:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100d7c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d7c4:	e8 c7 d4 01 00 	call	120007 <_runtime.printhex>
 100d7c9:	48 8d 05 43 5d 06 00 	lea	rax, [rip + 417091]
 100d7d0:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d7d4:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 100d7dd:	e8 fe d5 01 00 	call	120318 <_runtime.printstring>
 100d7e2:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 100d7e7:	0f b6 c0 	movzx	eax, al
 100d7ea:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d7ee:	e8 2d d3 01 00 	call	119597 <_runtime.printuint>
 100d7f3:	e8 38 cf 01 00 	call	118584 <_runtime.printnl>
 100d7f8:	e8 23 cd 01 00 	call	118051 <_runtime.printunlock>
 100d7fd:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100d802:	48 85 c0 	test	rax, rax
 100d805:	0f 84 c8 00 00 00 	je	200 <_runtime.badPointer+0x203>
 100d80b:	e8 90 cc 01 00 	call	117904 <_runtime.printlock>
 100d810:	48 8d 05 9c 80 06 00 	lea	rax, [rip + 426140]
 100d817:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d81b:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 100d824:	e8 b7 d5 01 00 	call	120247 <_runtime.printstring>
 100d829:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100d82e:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d832:	e8 59 d4 01 00 	call	119897 <_runtime.printhex>
 100d837:	48 8d 05 1d 54 06 00 	lea	rax, [rip + 414749]
 100d83e:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d842:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 100d84b:	e8 90 d5 01 00 	call	120208 <_runtime.printstring>
 100d850:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100d855:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d859:	e8 32 d4 01 00 	call	119858 <_runtime.printhex>
 100d85e:	48 8d 05 0d 54 06 00 	lea	rax, [rip + 414733]
 100d865:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d869:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 100d872:	e8 69 d5 01 00 	call	120169 <_runtime.printstring>
 100d877:	e8 a4 cc 01 00 	call	117924 <_runtime.printunlock>
 100d87c:	48 8d 05 ef 55 06 00 	lea	rax, [rip + 415215]
 100d883:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d887:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 100d890:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100d895:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100d89a:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100d89f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100d8a4:	e8 67 aa 00 00 	call	43623 <_runtime.gcDumpObject>
 100d8a9:	eb 28 	jmp	40 <_runtime.badPointer+0x203>
 100d8ab:	e8 f0 cb 01 00 	call	117744 <_runtime.printlock>
 100d8b0:	48 8d 05 fe 72 06 00 	lea	rax, [rip + 422654]
 100d8b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d8bb:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 100d8c4:	e8 17 d5 01 00 	call	120087 <_runtime.printstring>
 100d8c9:	e8 52 cc 01 00 	call	117842 <_runtime.printunlock>
 100d8ce:	e9 8c fe ff ff 	jmp	-372 <_runtime.badPointer+0x8f>
 100d8d3:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 100d8dc:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 100d8e0:	c6 80 29 01 00 00 02 	mov	byte ptr [rax + 297], 2
 100d8e7:	48 8d 05 52 9c 06 00 	lea	rax, [rip + 433234]
 100d8ee:	48 89 04 24 	mov	qword ptr [rsp], rax
 100d8f2:	48 c7 44 24 08 3e 00 00 00 	mov	qword ptr [rsp + 8], 62
 100d8fb:	e8 60 b4 01 00 	call	111712 <_runtime.throw>
 100d900:	90 	nop
 100d901:	e8 ca 32 04 00 	call	275146 <_runtime.morestack_noctxt>
 100d906:	e9 c5 fd ff ff 	jmp	-571 <_runtime.badPointer>
 100d90b:	cc 	int3
 100d90c:	cc 	int3
 100d90d:	cc 	int3
 100d90e:	cc 	int3
 100d90f:	cc 	int3

_runtime.findObject:
 100d910:	48 83 ec 30 	sub	rsp, 48
 100d914:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 100d919:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 100d91e:	90 	nop
 100d91f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100d924:	48 ba 00 00 00 00 00 80 00 00 	movabs	rdx, 140737488355328
 100d92e:	48 01 c2 	add	rdx, rax
 100d931:	48 c1 ea 1a 	shr	rdx, 26
 100d935:	48 81 fa 00 00 40 00 	cmp	rdx, 4194304
 100d93c:	0f 82 65 01 00 00 	jb	357 <_runtime.findObject+0x197>
 100d942:	31 c9 	xor	ecx, ecx
 100d944:	48 85 c9 	test	rcx, rcx
 100d947:	0f 84 39 01 00 00 	je	313 <_runtime.findObject+0x176>
 100d94d:	8a 51 63 	mov	dl, byte ptr [rcx + 99]
 100d950:	80 fa 01 	cmp	dl, 1
 100d953:	74 7e 	je	126 <_runtime.findObject+0xc3>
 100d955:	80 fa 02 	cmp	dl, 2
 100d958:	74 58 	je	88 <_runtime.findObject+0xa2>
 100d95a:	83 3d 03 a1 0e 00 00 	cmp	dword ptr [rip + 958723], 0
 100d961:	75 21 	jne	33 <_runtime.findObject+0x74>
 100d963:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 100d96c:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100d971:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 100d97a:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d97f:	48 83 c4 30 	add	rsp, 48
 100d983:	c3 	ret
 100d984:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 100d989:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100d98d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100d992:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100d997:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100d99c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100d9a1:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100d9a6:	e8 25 fd ff ff 	call	-731 <_runtime.badPointer>
 100d9ab:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 100d9b0:	eb b1 	jmp	-79 <_runtime.findObject+0x53>
 100d9b2:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 100d9bb:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100d9c0:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 100d9c9:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100d9ce:	48 83 c4 30 	add	rsp, 48
 100d9d2:	c3 	ret
 100d9d3:	48 8b 59 18 	mov	rbx, qword ptr [rcx + 24]
 100d9d7:	48 39 d8 	cmp	rax, rbx
 100d9da:	0f 82 75 ff ff ff 	jb	-139 <_runtime.findObject+0x45>
 100d9e0:	48 39 41 70 	cmp	qword ptr [rcx + 112], rax
 100d9e4:	0f 86 6b ff ff ff 	jbe	-149 <_runtime.findObject+0x45>
 100d9ea:	0f b7 51 5e 	movzx	edx, word ptr [rcx + 94]
 100d9ee:	66 85 d2 	test	dx, dx
 100d9f1:	74 39 	je	57 <_runtime.findObject+0x11c>
 100d9f3:	0f b6 71 65 	movzx	esi, byte ptr [rcx + 101]
 100d9f7:	40 80 fe 40 	cmp	sil, 64
 100d9fb:	48 19 ff 	sbb	rdi, rdi
 100d9fe:	48 29 d8 	sub	rax, rbx
 100da01:	48 21 c2 	and	rdx, rax
 100da04:	48 8d 04 13 	lea	rax, [rbx + rdx]
 100da08:	48 89 cb 	mov	rbx, rcx
 100da0b:	89 f1 	mov	ecx, esi
 100da0d:	48 d3 ea 	shr	rdx, cl
 100da10:	48 21 fa 	and	rdx, rdi
 100da13:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 100da18:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 100da1d:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 100da22:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100da27:	48 83 c4 30 	add	rsp, 48
 100da2b:	c3 	ret
 100da2c:	48 29 d8 	sub	rax, rbx
 100da2f:	48 8b 51 68 	mov	rdx, qword ptr [rcx + 104]
 100da33:	48 39 d0 	cmp	rax, rdx
 100da36:	72 44 	jb	68 <_runtime.findObject+0x16c>
 100da38:	0f b6 71 65 	movzx	esi, byte ptr [rcx + 101]
 100da3c:	40 80 fe 40 	cmp	sil, 64
 100da40:	48 19 ff 	sbb	rdi, rdi
 100da43:	44 0f b6 41 66 	movzx	r8d, byte ptr [rcx + 102]
 100da48:	41 80 f8 40 	cmp	r8b, 64
 100da4c:	4d 19 c9 	sbb	r9, r9
 100da4f:	49 89 ca 	mov	r10, rcx
 100da52:	89 f1 	mov	ecx, esi
 100da54:	48 d3 e8 	shr	rax, cl
 100da57:	48 21 f8 	and	rax, rdi
 100da5a:	41 0f b7 72 5c 	movzx	esi, word ptr [r10 + 92]
 100da5f:	48 0f af f0 	imul	rsi, rax
 100da63:	44 89 c1 	mov	ecx, r8d
 100da66:	48 d3 ee 	shr	rsi, cl
 100da69:	4c 21 ce 	and	rsi, r9
 100da6c:	48 0f af d6 	imul	rdx, rsi
 100da70:	48 8d 04 13 	lea	rax, [rbx + rdx]
 100da74:	4c 89 d3 	mov	rbx, r10
 100da77:	48 89 f2 	mov	rdx, rsi
 100da7a:	eb 97 	jmp	-105 <_runtime.findObject+0x103>
 100da7c:	49 89 ca 	mov	r10, rcx
 100da7f:	31 f6 	xor	esi, esi
 100da81:	48 89 d8 	mov	rax, rbx
 100da84:	eb ee 	jmp	-18 <_runtime.findObject+0x164>
 100da86:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 100da8f:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100da94:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 100da9d:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 100daa2:	48 83 c4 30 	add	rsp, 48
 100daa6:	c3 	ret
 100daa7:	48 8b 1d 22 79 0e 00 	mov	rbx, qword ptr [rip + 948514]
 100daae:	84 03 	test	byte ptr [rbx], al
 100dab0:	48 8b 14 d3 	mov	rdx, qword ptr [rbx + 8*rdx]
 100dab4:	48 85 d2 	test	rdx, rdx
 100dab7:	74 1d 	je	29 <_runtime.findObject+0x1c6>
 100dab9:	48 89 c3 	mov	rbx, rax
 100dabc:	48 c1 e8 0d 	shr	rax, 13
 100dac0:	48 25 ff 1f 00 00 	and	rax, 8191
 100dac6:	48 8b 8c c2 00 00 20 00 	mov	rcx, qword ptr [rdx + 8*rax + 2097152]
 100dace:	48 89 d8 	mov	rax, rbx
 100dad1:	e9 6e fe ff ff 	jmp	-402 <_runtime.findObject+0x34>
 100dad6:	31 c9 	xor	ecx, ecx
 100dad8:	e9 67 fe ff ff 	jmp	-409 <_runtime.findObject+0x34>
 100dadd:	cc 	int3
 100dade:	cc 	int3
 100dadf:	cc 	int3

_runtime.heapBits.nextArena:
 100dae0:	48 83 ec 18 	sub	rsp, 24
 100dae4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 100dae9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 100daee:	48 8b 15 db 78 0e 00 	mov	rdx, qword ptr [rip + 948443]
 100daf5:	48 85 d2 	test	rdx, rdx
 100daf8:	74 5a 	je	90 <_runtime.heapBits.nextArena+0x74>
 100dafa:	8b 5c 24 2c 	mov	ebx, dword ptr [rsp + 44]
 100dafe:	8d 43 01 	lea	eax, [rbx + 1]
 100db01:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100db07:	73 66 	jae	102 <_runtime.heapBits.nextArena+0x8f>
 100db09:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 100db0d:	48 85 c9 	test	rcx, rcx
 100db10:	74 27 	je	39 <_runtime.heapBits.nextArena+0x59>
 100db12:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 100db17:	c7 44 24 40 00 00 00 00 	mov	dword ptr [rsp + 64], 0
 100db1f:	89 44 24 44 	mov	dword ptr [rsp + 68], eax
 100db23:	48 8d 81 ff ff 1f 00 	lea	rax, [rcx + 2097151]
 100db2a:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 100db2f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100db34:	48 83 c4 18 	add	rsp, 24
 100db38:	c3 	ret
 100db39:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 100db42:	0f 57 c0 	xorps	xmm0, xmm0
 100db45:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 100db4a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100db4f:	48 83 c4 18 	add	rsp, 24
 100db53:	c3 	ret
 100db54:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 100db5d:	0f 57 c0 	xorps	xmm0, xmm0
 100db60:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 100db65:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100db6a:	48 83 c4 18 	add	rsp, 24
 100db6e:	c3 	ret
 100db6f:	b9 00 00 40 00 	mov	ecx, 4194304
 100db74:	e8 e7 57 04 00 	call	284647 <_runtime.panicIndexU>
 100db79:	90 	nop
 100db7a:	cc 	int3
 100db7b:	cc 	int3
 100db7c:	cc 	int3
 100db7d:	cc 	int3
 100db7e:	cc 	int3
 100db7f:	cc 	int3

_runtime.heapBits.forward:
 100db80:	48 83 ec 18 	sub	rsp, 24
 100db84:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 100db89:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 100db8e:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100db93:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 100db97:	48 01 da 	add	rdx, rbx
 100db9a:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 100db9f:	48 89 de 	mov	rsi, rbx
 100dba2:	48 89 d7 	mov	rdi, rdx
 100dba5:	48 c1 ea 02 	shr	rdx, 2
 100dba9:	48 01 d3 	add	rbx, rdx
 100dbac:	48 83 e7 03 	and	rdi, 3
 100dbb0:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 100dbb5:	4d 89 c1 	mov	r9, r8
 100dbb8:	4c 39 c3 	cmp	rbx, r8
 100dbbb:	76 68 	jbe	104 <_runtime.heapBits.forward+0xa5>
 100dbbd:	49 8d 50 01 	lea	rdx, [r8 + 1]
 100dbc1:	48 29 d3 	sub	rbx, rdx
 100dbc4:	48 89 da 	mov	rdx, rbx
 100dbc7:	48 c1 eb 15 	shr	rbx, 21
 100dbcb:	8b 74 24 2c 	mov	esi, dword ptr [rsp + 44]
 100dbcf:	8d 04 1e 	lea	eax, [rsi + rbx]
 100dbd2:	8d 40 01 	lea	eax, [rax + 1]
 100dbd5:	48 8b 1d f4 77 0e 00 	mov	rbx, qword ptr [rip + 948212]
 100dbdc:	48 85 db 	test	rbx, rbx
 100dbdf:	74 3e 	je	62 <_runtime.heapBits.forward+0x9f>
 100dbe1:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100dbe7:	73 60 	jae	96 <_runtime.heapBits.forward+0xc9>
 100dbe9:	48 8b 0c c3 	mov	rcx, qword ptr [rbx + 8*rax]
 100dbed:	48 85 c9 	test	rcx, rcx
 100dbf0:	74 2d 	je	45 <_runtime.heapBits.forward+0x9f>
 100dbf2:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 100dbf9:	48 01 ca 	add	rdx, rcx
 100dbfc:	48 81 c1 ff ff 1f 00 	add	rcx, 2097151
 100dc03:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 100dc08:	89 7c 24 48 	mov	dword ptr [rsp + 72], edi
 100dc0c:	89 44 24 4c 	mov	dword ptr [rsp + 76], eax
 100dc10:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 100dc15:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100dc1a:	48 83 c4 18 	add	rsp, 24
 100dc1e:	c3 	ret
 100dc1f:	31 c9 	xor	ecx, ecx
 100dc21:	31 d2 	xor	edx, edx
 100dc23:	eb de 	jmp	-34 <_runtime.heapBits.forward+0x83>
 100dc25:	48 8d 04 16 	lea	rax, [rsi + rdx]
 100dc29:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100dc2e:	89 7c 24 48 	mov	dword ptr [rsp + 72], edi
 100dc32:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 100dc36:	89 44 24 4c 	mov	dword ptr [rsp + 76], eax
 100dc3a:	4c 89 4c 24 50 	mov	qword ptr [rsp + 80], r9
 100dc3f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 100dc44:	48 83 c4 18 	add	rsp, 24
 100dc48:	c3 	ret
 100dc49:	b9 00 00 40 00 	mov	ecx, 4194304
 100dc4e:	e8 0d 57 04 00 	call	284429 <_runtime.panicIndexU>
 100dc53:	90 	nop
 100dc54:	cc 	int3
 100dc55:	cc 	int3
 100dc56:	cc 	int3
 100dc57:	cc 	int3
 100dc58:	cc 	int3
 100dc59:	cc 	int3
 100dc5a:	cc 	int3
 100dc5b:	cc 	int3
 100dc5c:	cc 	int3
 100dc5d:	cc 	int3
 100dc5e:	cc 	int3
 100dc5f:	cc 	int3

_runtime.heapBits.forwardOrBoundary:
 100dc60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100dc69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100dc6d:	0f 86 97 00 00 00 	jbe	151 <_runtime.heapBits.forwardOrBoundary+0xaa>
 100dc73:	48 83 ec 40 	sub	rsp, 64
 100dc77:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 100dc7c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 100dc81:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100dc86:	48 89 c1 	mov	rcx, rax
 100dc89:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 100dc8e:	48 89 d3 	mov	rbx, rdx
 100dc91:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100dc95:	8b 5c 24 50 	mov	ebx, dword ptr [rsp + 80]
 100dc99:	89 5c 24 08 	mov	dword ptr [rsp + 8], ebx
 100dc9d:	8b 5c 24 54 	mov	ebx, dword ptr [rsp + 84]
 100dca1:	89 5c 24 0c 	mov	dword ptr [rsp + 12], ebx
 100dca5:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100dcaa:	48 ff c0 	inc	rax
 100dcad:	48 29 d0 	sub	rax, rdx
 100dcb0:	48 c1 e0 02 	shl	rax, 2
 100dcb4:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100dcb9:	48 39 c1 	cmp	rcx, rax
 100dcbc:	48 0f 47 c8 	cmova	rcx, rax
 100dcc0:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 100dcc5:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100dcca:	e8 b1 fe ff ff 	call	-335 <_runtime.heapBits.forward>
 100dccf:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100dcd4:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 100dcd8:	8b 54 24 2c 	mov	edx, dword ptr [rsp + 44]
 100dcdc:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 100dce1:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 100dce6:	89 4c 24 70 	mov	dword ptr [rsp + 112], ecx
 100dcea:	89 54 24 74 	mov	dword ptr [rsp + 116], edx
 100dcee:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 100dcf3:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100dcf8:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 100dd00:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 100dd05:	48 83 c4 40 	add	rsp, 64
 100dd09:	c3 	ret
 100dd0a:	e8 c1 2e 04 00 	call	274113 <_runtime.morestack_noctxt>
 100dd0f:	e9 4c ff ff ff 	jmp	-180 <_runtime.heapBits.forwardOrBoundary>
 100dd14:	cc 	int3
 100dd15:	cc 	int3
 100dd16:	cc 	int3
 100dd17:	cc 	int3
 100dd18:	cc 	int3
 100dd19:	cc 	int3
 100dd1a:	cc 	int3
 100dd1b:	cc 	int3
 100dd1c:	cc 	int3
 100dd1d:	cc 	int3
 100dd1e:	cc 	int3
 100dd1f:	cc 	int3

_runtime.bulkBarrierPreWrite:
 100dd20:	48 83 c4 80 	add	rsp, -128
 100dd24:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 100dd29:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 100dd2e:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 100dd36:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 100dd3e:	48 89 d6 	mov	rsi, rdx
 100dd41:	48 09 da 	or	rdx, rbx
 100dd44:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 100dd4c:	48 09 fa 	or	rdx, rdi
 100dd4f:	48 f7 c2 07 00 00 00 	test	rdx, 7
 100dd56:	0f 85 3e 04 00 00 	jne	1086 <_runtime.bulkBarrierPreWrite+0x47a>
 100dd5c:	80 3d a1 9b 0e 00 00 	cmp	byte ptr [rip + 957345], 0
 100dd63:	0f 84 1d 04 00 00 	je	1053 <_runtime.bulkBarrierPreWrite+0x466>
 100dd69:	90 	nop
 100dd6a:	48 ba 00 00 00 00 00 80 00 00 	movabs	rdx, 140737488355328
 100dd74:	48 8d 04 1a 	lea	rax, [rdx + rbx]
 100dd78:	48 c1 e8 1a 	shr	rax, 26
 100dd7c:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100dd82:	0f 82 c7 03 00 00 	jb	967 <_runtime.bulkBarrierPreWrite+0x42f>
 100dd88:	31 c9 	xor	ecx, ecx
 100dd8a:	48 85 c9 	test	rcx, rcx
 100dd8d:	0f 84 cd 02 00 00 	je	717 <_runtime.bulkBarrierPreWrite+0x340>
 100dd93:	8a 51 63 	mov	dl, byte ptr [rcx + 99]
 100dd96:	80 fa 01 	cmp	dl, 1
 100dd99:	0f 85 b7 02 00 00 	jne	695 <_runtime.bulkBarrierPreWrite+0x336>
 100dd9f:	48 39 59 18 	cmp	qword ptr [rcx + 24], rbx
 100dda3:	0f 87 ad 02 00 00 	ja	685 <_runtime.bulkBarrierPreWrite+0x336>
 100dda9:	48 39 59 70 	cmp	qword ptr [rcx + 112], rbx
 100ddad:	0f 86 a3 02 00 00 	jbe	675 <_runtime.bulkBarrierPreWrite+0x336>
 100ddb3:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 100ddbc:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 100ddc0:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 100ddc7:	84 02 	test	byte ptr [rdx], al
 100ddc9:	4c 8b 05 00 76 0e 00 	mov	r8, qword ptr [rip + 947712]
 100ddd0:	41 84 00 	test	byte ptr [r8], al
 100ddd3:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100ddd9:	0f 83 b1 03 00 00 	jae	945 <_runtime.bulkBarrierPreWrite+0x470>
 100dddf:	49 8b 0c c0 	mov	rcx, qword ptr [r8 + 8*rax]
 100dde3:	48 85 c9 	test	rcx, rcx
 100dde6:	0f 84 59 02 00 00 	je	601 <_runtime.bulkBarrierPreWrite+0x325>
 100ddec:	49 89 d8 	mov	r8, rbx
 100ddef:	48 c1 eb 05 	shr	rbx, 5
 100ddf3:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 100ddfa:	48 01 cb 	add	rbx, rcx
 100ddfd:	4d 89 c1 	mov	r9, r8
 100de00:	49 c1 e8 03 	shr	r8, 3
 100de04:	49 83 e0 03 	and	r8, 3
 100de08:	48 81 c1 ff ff 1f 00 	add	rcx, 2097151
 100de0f:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 100de14:	48 85 f6 	test	rsi, rsi
 100de17:	0f 85 10 01 00 00 	jne	272 <_runtime.bulkBarrierPreWrite+0x20d>
 100de1d:	31 f6 	xor	esi, esi
 100de1f:	eb 04 	jmp	4 <_runtime.bulkBarrierPreWrite+0x105>
 100de21:	48 83 c6 08 	add	rsi, 8
 100de25:	48 39 fe 	cmp	rsi, rdi
 100de28:	0f 83 f5 00 00 00 	jae	245 <_runtime.bulkBarrierPreWrite+0x203>
 100de2e:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 100de33:	44 0f b6 13 	movzx	r10d, byte ptr [rbx]
 100de37:	45 0f a3 c2 	bt	r10d, r8d
 100de3b:	73 34 	jae	52 <_runtime.bulkBarrierPreWrite+0x151>
 100de3d:	4e 8d 14 0e 	lea	r10, [rsi + r9]
 100de41:	4c 8b 9a 48 17 00 00 	mov	r11, qword ptr [rdx + 5960]
 100de48:	4d 8b 12 	mov	r10, qword ptr [r10]
 100de4b:	4d 89 13 	mov	qword ptr [r11], r10
 100de4e:	49 c7 43 08 00 00 00 00 	mov	qword ptr [r11 + 8], 0
 100de56:	4c 8b 92 48 17 00 00 	mov	r10, qword ptr [rdx + 5960]
 100de5d:	49 83 c2 10 	add	r10, 16
 100de61:	4c 89 92 48 17 00 00 	mov	qword ptr [rdx + 5960], r10
 100de68:	4c 39 92 50 17 00 00 	cmp	qword ptr [rdx + 5968], r10
 100de6f:	74 61 	je	97 <_runtime.bulkBarrierPreWrite+0x1b2>
 100de71:	41 83 f8 03 	cmp	r8d, 3
 100de75:	73 05 	jae	5 <_runtime.bulkBarrierPreWrite+0x15c>
 100de77:	41 ff c0 	inc	r8d
 100de7a:	eb a5 	jmp	-91 <_runtime.bulkBarrierPreWrite+0x101>
 100de7c:	48 39 cb 	cmp	rbx, rcx
 100de7f:	74 08 	je	8 <_runtime.bulkBarrierPreWrite+0x169>
 100de81:	48 ff c3 	inc	rbx
 100de84:	45 31 c0 	xor	r8d, r8d
 100de87:	eb 98 	jmp	-104 <_runtime.bulkBarrierPreWrite+0x101>
 100de89:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100de8d:	44 89 44 24 08 	mov	dword ptr [rsp + 8], r8d
 100de92:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100de96:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100de9b:	e8 40 fc ff ff 	call	-960 <_runtime.heapBits.nextArena>
 100dea0:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100dea5:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 100dea9:	44 8b 44 24 20 	mov	r8d, dword ptr [rsp + 32]
 100deae:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100deb3:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 100deb8:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 100debd:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 100dec5:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 100decd:	e9 4f ff ff ff 	jmp	-177 <_runtime.bulkBarrierPreWrite+0x101>
 100ded2:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 100ded7:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 100dedb:	44 89 44 24 30 	mov	dword ptr [rsp + 48], r8d
 100dee0:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 100dee5:	0f 57 c0 	xorps	xmm0, xmm0
 100dee8:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 100deec:	e8 7f 74 01 00 	call	95359 <_runtime.wbBufFlush>
 100def1:	8b 44 24 38 	mov	eax, dword ptr [rsp + 56]
 100def5:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 100defa:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 100deff:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 100df04:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 100df09:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 100df11:	44 8b 44 24 30 	mov	r8d, dword ptr [rsp + 48]
 100df16:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 100df1e:	e9 4e ff ff ff 	jmp	-178 <_runtime.bulkBarrierPreWrite+0x151>
 100df23:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100df28:	48 83 ec 80 	sub	rsp, -128
 100df2c:	c3 	ret
 100df2d:	45 31 d2 	xor	r10d, r10d
 100df30:	eb 04 	jmp	4 <_runtime.bulkBarrierPreWrite+0x216>
 100df32:	49 83 c2 08 	add	r10, 8
 100df36:	49 39 fa 	cmp	r10, rdi
 100df39:	73 e8 	jae	-24 <_runtime.bulkBarrierPreWrite+0x203>
 100df3b:	4c 89 54 24 40 	mov	qword ptr [rsp + 64], r10
 100df40:	44 0f b6 1b 	movzx	r11d, byte ptr [rbx]
 100df44:	45 0f a3 c3 	bt	r11d, r8d
 100df48:	73 39 	jae	57 <_runtime.bulkBarrierPreWrite+0x263>
 100df4a:	4f 8d 1c 0a 	lea	r11, [r10 + r9]
 100df4e:	4d 8d 24 32 	lea	r12, [r10 + rsi]
 100df52:	4c 8b aa 48 17 00 00 	mov	r13, qword ptr [rdx + 5960]
 100df59:	4d 8b 1b 	mov	r11, qword ptr [r11]
 100df5c:	4d 8b 24 24 	mov	r12, qword ptr [r12]
 100df60:	4d 89 5d 00 	mov	qword ptr [r13], r11
 100df64:	4d 89 65 08 	mov	qword ptr [r13 + 8], r12
 100df68:	4c 8b 9a 48 17 00 00 	mov	r11, qword ptr [rdx + 5960]
 100df6f:	49 83 c3 10 	add	r11, 16
 100df73:	4c 89 9a 48 17 00 00 	mov	qword ptr [rdx + 5960], r11
 100df7a:	4c 39 9a 50 17 00 00 	cmp	qword ptr [rdx + 5968], r11
 100df81:	74 69 	je	105 <_runtime.bulkBarrierPreWrite+0x2cc>
 100df83:	41 83 f8 03 	cmp	r8d, 3
 100df87:	73 05 	jae	5 <_runtime.bulkBarrierPreWrite+0x26e>
 100df89:	41 ff c0 	inc	r8d
 100df8c:	eb a4 	jmp	-92 <_runtime.bulkBarrierPreWrite+0x212>
 100df8e:	48 39 cb 	cmp	rbx, rcx
 100df91:	74 08 	je	8 <_runtime.bulkBarrierPreWrite+0x27b>
 100df93:	48 ff c3 	inc	rbx
 100df96:	45 31 c0 	xor	r8d, r8d
 100df99:	eb 97 	jmp	-105 <_runtime.bulkBarrierPreWrite+0x212>
 100df9b:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100df9f:	44 89 44 24 08 	mov	dword ptr [rsp + 8], r8d
 100dfa4:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100dfa8:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100dfad:	e8 2e fb ff ff 	call	-1234 <_runtime.heapBits.nextArena>
 100dfb2:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100dfb7:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 100dfbb:	44 8b 44 24 20 	mov	r8d, dword ptr [rsp + 32]
 100dfc0:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100dfc5:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 100dfca:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 100dfd2:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 100dfda:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 100dfe2:	4c 8b 54 24 40 	mov	r10, qword ptr [rsp + 64]
 100dfe7:	e9 46 ff ff ff 	jmp	-186 <_runtime.bulkBarrierPreWrite+0x212>
 100dfec:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100dff1:	44 89 44 24 34 	mov	dword ptr [rsp + 52], r8d
 100dff6:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 100dffb:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 100dfff:	0f 57 c0 	xorps	xmm0, xmm0
 100e002:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 100e006:	e8 65 73 01 00 	call	95077 <_runtime.wbBufFlush>
 100e00b:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 100e00f:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100e014:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 100e019:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 100e01e:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 100e026:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 100e02e:	44 8b 44 24 34 	mov	r8d, dword ptr [rsp + 52]
 100e033:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 100e03b:	4c 8b 54 24 40 	mov	r10, qword ptr [rsp + 64]
 100e040:	e9 3e ff ff ff 	jmp	-194 <_runtime.bulkBarrierPreWrite+0x263>
 100e045:	49 89 d9 	mov	r9, rbx
 100e048:	31 c9 	xor	ecx, ecx
 100e04a:	31 c0 	xor	eax, eax
 100e04c:	45 31 c0 	xor	r8d, r8d
 100e04f:	31 db 	xor	ebx, ebx
 100e051:	e9 b9 fd ff ff 	jmp	-583 <_runtime.bulkBarrierPreWrite+0xef>
 100e056:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100e05b:	48 83 ec 80 	sub	rsp, -128
 100e05f:	c3 	ret
 100e060:	48 8b 05 f9 01 0c 00 	mov	rax, qword ptr [rip + 786937]
 100e067:	48 85 c0 	test	rax, rax
 100e06a:	0f 84 d6 00 00 00 	je	214 <_runtime.bulkBarrierPreWrite+0x426>
 100e070:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 100e074:	48 8b 00 	mov	rax, qword ptr [rax]
 100e077:	31 d2 	xor	edx, edx
 100e079:	eb 03 	jmp	3 <_runtime.bulkBarrierPreWrite+0x35e>
 100e07b:	48 ff c2 	inc	rdx
 100e07e:	48 39 ca 	cmp	rdx, rcx
 100e081:	7d 4a 	jge	74 <_runtime.bulkBarrierPreWrite+0x3ad>
 100e083:	4c 8b 04 d0 	mov	r8, qword ptr [rax + 8*rdx]
 100e087:	4d 8b 88 80 00 00 00 	mov	r9, qword ptr [r8 + 128]
 100e08e:	49 39 d9 	cmp	r9, rbx
 100e091:	77 e8 	ja	-24 <_runtime.bulkBarrierPreWrite+0x35b>
 100e093:	49 39 98 88 00 00 00 	cmp	qword ptr [r8 + 136], rbx
 100e09a:	76 df 	jbe	-33 <_runtime.bulkBarrierPreWrite+0x35b>
 100e09c:	49 8b 80 98 01 00 00 	mov	rax, qword ptr [r8 + 408]
 100e0a3:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100e0a7:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100e0ac:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 100e0b1:	4c 29 cb 	sub	rbx, r9
 100e0b4:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 100e0b9:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100e0be:	e8 fd 02 00 00 	call	765 <_runtime.bulkBarrierBitmap>
 100e0c3:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100e0c8:	48 83 ec 80 	sub	rsp, -128
 100e0cc:	c3 	ret
 100e0cd:	48 8b 05 8c 01 0c 00 	mov	rax, qword ptr [rip + 786828]
 100e0d4:	48 85 c0 	test	rax, rax
 100e0d7:	74 67 	je	103 <_runtime.bulkBarrierPreWrite+0x420>
 100e0d9:	48 8b 08 	mov	rcx, qword ptr [rax]
 100e0dc:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 100e0e0:	31 d2 	xor	edx, edx
 100e0e2:	eb 03 	jmp	3 <_runtime.bulkBarrierPreWrite+0x3c7>
 100e0e4:	48 ff c2 	inc	rdx
 100e0e7:	48 39 c2 	cmp	rdx, rax
 100e0ea:	7d 4a 	jge	74 <_runtime.bulkBarrierPreWrite+0x416>
 100e0ec:	4c 8b 04 d1 	mov	r8, qword ptr [rcx + 8*rdx]
 100e0f0:	4d 8b 88 90 00 00 00 	mov	r9, qword ptr [r8 + 144]
 100e0f7:	49 39 d9 	cmp	r9, rbx
 100e0fa:	77 e8 	ja	-24 <_runtime.bulkBarrierPreWrite+0x3c4>
 100e0fc:	49 39 98 98 00 00 00 	cmp	qword ptr [r8 + 152], rbx
 100e103:	76 df 	jbe	-33 <_runtime.bulkBarrierPreWrite+0x3c4>
 100e105:	49 8b 80 a8 01 00 00 	mov	rax, qword ptr [r8 + 424]
 100e10c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100e110:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100e115:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 100e11a:	4c 29 cb 	sub	rbx, r9
 100e11d:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 100e122:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 100e127:	e8 94 02 00 00 	call	660 <_runtime.bulkBarrierBitmap>
 100e12c:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100e131:	48 83 ec 80 	sub	rsp, -128
 100e135:	c3 	ret
 100e136:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100e13b:	48 83 ec 80 	sub	rsp, -128
 100e13f:	c3 	ret
 100e140:	31 c0 	xor	eax, eax
 100e142:	31 c9 	xor	ecx, ecx
 100e144:	eb 9a 	jmp	-102 <_runtime.bulkBarrierPreWrite+0x3c0>
 100e146:	31 c9 	xor	ecx, ecx
 100e148:	31 c0 	xor	eax, eax
 100e14a:	e9 28 ff ff ff 	jmp	-216 <_runtime.bulkBarrierPreWrite+0x357>
 100e14f:	48 8b 15 7a 72 0e 00 	mov	rdx, qword ptr [rip + 946810]
 100e156:	84 02 	test	byte ptr [rdx], al
 100e158:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 100e15c:	48 85 d2 	test	rdx, rdx
 100e15f:	74 1e 	je	30 <_runtime.bulkBarrierPreWrite+0x45f>
 100e161:	49 89 d8 	mov	r8, rbx
 100e164:	48 c1 eb 0d 	shr	rbx, 13
 100e168:	48 81 e3 ff 1f 00 00 	and	rbx, 8191
 100e16f:	48 8b 8c da 00 00 20 00 	mov	rcx, qword ptr [rdx + 8*rbx + 2097152]
 100e177:	4c 89 c3 	mov	rbx, r8
 100e17a:	e9 0b fc ff ff 	jmp	-1013 <_runtime.bulkBarrierPreWrite+0x6a>
 100e17f:	31 c9 	xor	ecx, ecx
 100e181:	e9 04 fc ff ff 	jmp	-1020 <_runtime.bulkBarrierPreWrite+0x6a>
 100e186:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 100e18b:	48 83 ec 80 	sub	rsp, -128
 100e18f:	c3 	ret
 100e190:	b9 00 00 40 00 	mov	ecx, 4194304
 100e195:	e8 c6 51 04 00 	call	283078 <_runtime.panicIndexU>
 100e19a:	48 8d 05 d1 85 06 00 	lea	rax, [rip + 427473]
 100e1a1:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e1a5:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 100e1ae:	e8 ad ab 01 00 	call	109485 <_runtime.throw>
 100e1b3:	90 	nop
 100e1b4:	cc 	int3
 100e1b5:	cc 	int3
 100e1b6:	cc 	int3
 100e1b7:	cc 	int3
 100e1b8:	cc 	int3
 100e1b9:	cc 	int3
 100e1ba:	cc 	int3
 100e1bb:	cc 	int3
 100e1bc:	cc 	int3
 100e1bd:	cc 	int3
 100e1be:	cc 	int3
 100e1bf:	cc 	int3

_runtime.bulkBarrierPreWriteSrcOnly:
 100e1c0:	48 83 ec 60 	sub	rsp, 96
 100e1c4:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 100e1c9:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 100e1ce:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 100e1d3:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 100e1d8:	48 89 d6 	mov	rsi, rdx
 100e1db:	48 09 da 	or	rdx, rbx
 100e1de:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 100e1e3:	48 09 fa 	or	rdx, rdi
 100e1e6:	48 f7 c2 07 00 00 00 	test	rdx, 7
 100e1ed:	0f 85 a5 01 00 00 	jne	421 <_runtime.bulkBarrierPreWriteSrcOnly+0x1d8>
 100e1f3:	80 3d 0a 97 0e 00 00 	cmp	byte ptr [rip + 956170], 0
 100e1fa:	0f 84 84 01 00 00 	je	388 <_runtime.bulkBarrierPreWriteSrcOnly+0x1c4>
 100e200:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 100e209:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 100e20d:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 100e214:	84 02 	test	byte ptr [rdx], al
 100e216:	4c 8b 05 b3 71 0e 00 	mov	r8, qword ptr [rip + 946611]
 100e21d:	41 84 00 	test	byte ptr [r8], al
 100e220:	90 	nop
 100e221:	49 b9 00 00 00 00 00 80 00 00 	movabs	r9, 140737488355328
 100e22b:	49 8d 04 19 	lea	rax, [r9 + rbx]
 100e22f:	48 c1 e8 1a 	shr	rax, 26
 100e233:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100e239:	0f 83 4f 01 00 00 	jae	335 <_runtime.bulkBarrierPreWriteSrcOnly+0x1ce>
 100e23f:	49 8b 0c c0 	mov	rcx, qword ptr [r8 + 8*rax]
 100e243:	48 85 c9 	test	rcx, rcx
 100e246:	0f 84 2a 01 00 00 	je	298 <_runtime.bulkBarrierPreWriteSrcOnly+0x1b6>
 100e24c:	49 89 d8 	mov	r8, rbx
 100e24f:	48 c1 eb 05 	shr	rbx, 5
 100e253:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 100e25a:	48 01 cb 	add	rbx, rcx
 100e25d:	49 c1 e8 03 	shr	r8, 3
 100e261:	49 83 e0 03 	and	r8, 3
 100e265:	48 81 c1 ff ff 1f 00 	add	rcx, 2097151
 100e26c:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 100e271:	45 31 c9 	xor	r9d, r9d
 100e274:	eb 04 	jmp	4 <_runtime.bulkBarrierPreWriteSrcOnly+0xba>
 100e276:	49 83 c1 08 	add	r9, 8
 100e27a:	49 39 f9 	cmp	r9, rdi
 100e27d:	0f 83 e9 00 00 00 	jae	233 <_runtime.bulkBarrierPreWriteSrcOnly+0x1ac>
 100e283:	4c 89 4c 24 38 	mov	qword ptr [rsp + 56], r9
 100e288:	44 0f b6 13 	movzx	r10d, byte ptr [rbx]
 100e28c:	45 0f a3 c2 	bt	r10d, r8d
 100e290:	73 34 	jae	52 <_runtime.bulkBarrierPreWriteSrcOnly+0x106>
 100e292:	4d 8d 14 31 	lea	r10, [r9 + rsi]
 100e296:	4c 8b 9a 48 17 00 00 	mov	r11, qword ptr [rdx + 5960]
 100e29d:	4d 8b 12 	mov	r10, qword ptr [r10]
 100e2a0:	49 c7 03 00 00 00 00 	mov	qword ptr [r11], 0
 100e2a7:	4d 89 53 08 	mov	qword ptr [r11 + 8], r10
 100e2ab:	4c 8b 92 48 17 00 00 	mov	r10, qword ptr [rdx + 5960]
 100e2b2:	49 83 c2 10 	add	r10, 16
 100e2b6:	4c 89 92 48 17 00 00 	mov	qword ptr [rdx + 5960], r10
 100e2bd:	4c 39 92 50 17 00 00 	cmp	qword ptr [rdx + 5968], r10
 100e2c4:	74 5b 	je	91 <_runtime.bulkBarrierPreWriteSrcOnly+0x161>
 100e2c6:	41 83 f8 03 	cmp	r8d, 3
 100e2ca:	73 05 	jae	5 <_runtime.bulkBarrierPreWriteSrcOnly+0x111>
 100e2cc:	41 ff c0 	inc	r8d
 100e2cf:	eb a5 	jmp	-91 <_runtime.bulkBarrierPreWriteSrcOnly+0xb6>
 100e2d1:	48 39 cb 	cmp	rbx, rcx
 100e2d4:	74 08 	je	8 <_runtime.bulkBarrierPreWriteSrcOnly+0x11e>
 100e2d6:	48 ff c3 	inc	rbx
 100e2d9:	45 31 c0 	xor	r8d, r8d
 100e2dc:	eb 98 	jmp	-104 <_runtime.bulkBarrierPreWriteSrcOnly+0xb6>
 100e2de:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100e2e2:	44 89 44 24 08 	mov	dword ptr [rsp + 8], r8d
 100e2e7:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100e2eb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100e2f0:	e8 eb f7 ff ff 	call	-2069 <_runtime.heapBits.nextArena>
 100e2f5:	44 8b 44 24 20 	mov	r8d, dword ptr [rsp + 32]
 100e2fa:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100e2ff:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100e304:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 100e308:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 100e30d:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 100e312:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 100e317:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 100e31c:	e9 55 ff ff ff 	jmp	-171 <_runtime.bulkBarrierPreWriteSrcOnly+0xb6>
 100e321:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 100e326:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 100e32a:	44 89 44 24 30 	mov	dword ptr [rsp + 48], r8d
 100e32f:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 100e334:	0f 57 c0 	xorps	xmm0, xmm0
 100e337:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 100e33b:	e8 30 70 01 00 	call	94256 <_runtime.wbBufFlush>
 100e340:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 100e344:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 100e349:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 100e34e:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 100e353:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 100e358:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 100e35d:	44 8b 44 24 30 	mov	r8d, dword ptr [rsp + 48]
 100e362:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 100e367:	e9 5a ff ff ff 	jmp	-166 <_runtime.bulkBarrierPreWriteSrcOnly+0x106>
 100e36c:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 100e371:	48 83 c4 60 	add	rsp, 96
 100e375:	c3 	ret
 100e376:	31 c9 	xor	ecx, ecx
 100e378:	31 c0 	xor	eax, eax
 100e37a:	45 31 c0 	xor	r8d, r8d
 100e37d:	31 db 	xor	ebx, ebx
 100e37f:	e9 e8 fe ff ff 	jmp	-280 <_runtime.bulkBarrierPreWriteSrcOnly+0xac>
 100e384:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 100e389:	48 83 c4 60 	add	rsp, 96
 100e38d:	c3 	ret
 100e38e:	b9 00 00 40 00 	mov	ecx, 4194304
 100e393:	e8 c8 4f 04 00 	call	282568 <_runtime.panicIndexU>
 100e398:	48 8d 05 d3 83 06 00 	lea	rax, [rip + 426963]
 100e39f:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e3a3:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 100e3ac:	e8 af a9 01 00 	call	108975 <_runtime.throw>
 100e3b1:	90 	nop
 100e3b2:	cc 	int3
 100e3b3:	cc 	int3
 100e3b4:	cc 	int3
 100e3b5:	cc 	int3
 100e3b6:	cc 	int3
 100e3b7:	cc 	int3
 100e3b8:	cc 	int3
 100e3b9:	cc 	int3
 100e3ba:	cc 	int3
 100e3bb:	cc 	int3
 100e3bc:	cc 	int3
 100e3bd:	cc 	int3
 100e3be:	cc 	int3
 100e3bf:	cc 	int3

_runtime.bulkBarrierBitmap:
 100e3c0:	48 83 ec 38 	sub	rsp, 56
 100e3c4:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 100e3c9:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 100e3ce:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 100e3d7:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 100e3db:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 100e3e2:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100e3e7:	84 00 	test	byte ptr [rax], al
 100e3e9:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 100e3ee:	48 89 ca 	mov	rdx, rcx
 100e3f1:	48 c1 e9 03 	shr	rcx, 3
 100e3f5:	48 c1 ea 06 	shr	rdx, 6
 100e3f9:	48 83 e1 07 	and	rcx, 7
 100e3fd:	bb 01 00 00 00 	mov	ebx, 1
 100e402:	d3 e3 	shl	ebx, cl
 100e404:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 100e409:	48 01 f2 	add	rdx, rsi
 100e40c:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100e411:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 100e416:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 100e41b:	31 c9 	xor	ecx, ecx
 100e41d:	eb 07 	jmp	7 <_runtime.bulkBarrierBitmap+0x66>
 100e41f:	48 83 c1 08 	add	rcx, 8
 100e423:	4c 89 ca 	mov	rdx, r9
 100e426:	48 39 f1 	cmp	rcx, rsi
 100e429:	0f 83 17 01 00 00 	jae	279 <_runtime.bulkBarrierBitmap+0x186>
 100e42f:	84 db 	test	bl, bl
 100e431:	0f 85 05 01 00 00 	jne	261 <_runtime.bulkBarrierBitmap+0x17c>
 100e437:	4c 8d 4a 01 	lea	r9, [rdx + 1]
 100e43b:	80 7a 01 00 	cmp	byte ptr [rdx + 1], 0
 100e43f:	75 06 	jne	6 <_runtime.bulkBarrierBitmap+0x87>
 100e441:	48 83 c1 38 	add	rcx, 56
 100e445:	eb d8 	jmp	-40 <_runtime.bulkBarrierBitmap+0x5f>
 100e447:	ba 01 00 00 00 	mov	edx, 1
 100e44c:	41 0f b6 19 	movzx	ebx, byte ptr [r9]
 100e450:	84 d3 	test	bl, dl
 100e452:	74 47 	je	71 <_runtime.bulkBarrierBitmap+0xdb>
 100e454:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100e459:	4c 89 4c 24 20 	mov	qword ptr [rsp + 32], r9
 100e45e:	88 54 24 17 	mov	byte ptr [rsp + 23], dl
 100e462:	4a 8d 1c 01 	lea	rbx, [rcx + r8]
 100e466:	48 85 ff 	test	rdi, rdi
 100e469:	75 6a 	jne	106 <_runtime.bulkBarrierBitmap+0x115>
 100e46b:	4c 8b 90 48 17 00 00 	mov	r10, qword ptr [rax + 5960]
 100e472:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 100e475:	49 89 1a 	mov	qword ptr [r10], rbx
 100e478:	49 c7 42 08 00 00 00 00 	mov	qword ptr [r10 + 8], 0
 100e480:	48 8b 98 48 17 00 00 	mov	rbx, qword ptr [rax + 5960]
 100e487:	48 83 c3 10 	add	rbx, 16
 100e48b:	48 89 98 48 17 00 00 	mov	qword ptr [rax + 5960], rbx
 100e492:	48 39 98 50 17 00 00 	cmp	qword ptr [rax + 5968], rbx
 100e499:	74 09 	je	9 <_runtime.bulkBarrierBitmap+0xe4>
 100e49b:	d1 e2 	shl	edx
 100e49d:	89 d3 	mov	ebx, edx
 100e49f:	e9 7b ff ff ff 	jmp	-133 <_runtime.bulkBarrierBitmap+0x5f>
 100e4a4:	0f 57 c0 	xorps	xmm0, xmm0
 100e4a7:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 100e4ab:	e8 c0 6e 01 00 	call	93888 <_runtime.wbBufFlush>
 100e4b0:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100e4b5:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 100e4ba:	0f b6 54 24 17 	movzx	edx, byte ptr [rsp + 23]
 100e4bf:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100e4c4:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 100e4c9:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 100e4ce:	4c 8b 4c 24 20 	mov	r9, qword ptr [rsp + 32]
 100e4d3:	eb c6 	jmp	-58 <_runtime.bulkBarrierBitmap+0xdb>
 100e4d5:	4c 8d 14 39 	lea	r10, [rcx + rdi]
 100e4d9:	4c 8b 98 48 17 00 00 	mov	r11, qword ptr [rax + 5960]
 100e4e0:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 100e4e3:	4d 8b 12 	mov	r10, qword ptr [r10]
 100e4e6:	49 89 1b 	mov	qword ptr [r11], rbx
 100e4e9:	4d 89 53 08 	mov	qword ptr [r11 + 8], r10
 100e4ed:	48 8b 98 48 17 00 00 	mov	rbx, qword ptr [rax + 5960]
 100e4f4:	48 83 c3 10 	add	rbx, 16
 100e4f8:	48 89 98 48 17 00 00 	mov	qword ptr [rax + 5960], rbx
 100e4ff:	48 39 98 50 17 00 00 	cmp	qword ptr [rax + 5968], rbx
 100e506:	75 93 	jne	-109 <_runtime.bulkBarrierBitmap+0xdb>
 100e508:	0f 57 c0 	xorps	xmm0, xmm0
 100e50b:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 100e50f:	e8 5c 6e 01 00 	call	93788 <_runtime.wbBufFlush>
 100e514:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100e519:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 100e51e:	0f b6 54 24 17 	movzx	edx, byte ptr [rsp + 23]
 100e523:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100e528:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 100e52d:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 100e532:	4c 8b 4c 24 20 	mov	r9, qword ptr [rsp + 32]
 100e537:	e9 5f ff ff ff 	jmp	-161 <_runtime.bulkBarrierBitmap+0xdb>
 100e53c:	49 89 d1 	mov	r9, rdx
 100e53f:	89 da 	mov	edx, ebx
 100e541:	e9 06 ff ff ff 	jmp	-250 <_runtime.bulkBarrierBitmap+0x8c>
 100e546:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 100e54b:	48 83 c4 38 	add	rsp, 56
 100e54f:	c3 	ret

_runtime.typeBitsBulkBarrier:
 100e550:	48 83 ec 58 	sub	rsp, 88
 100e554:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 100e559:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 100e55e:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100e563:	48 85 c0 	test	rax, rax
 100e566:	0f 84 73 02 00 00 	je	627 <_runtime.typeBitsBulkBarrier+0x28f>
 100e56c:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 100e571:	48 39 08 	cmp	qword ptr [rax], rcx
 100e574:	0f 85 94 01 00 00 	jne	404 <_runtime.typeBitsBulkBarrier+0x1be>
 100e57a:	0f b6 48 17 	movzx	ecx, byte ptr [rax + 23]
 100e57e:	f6 c1 40 	test	cl, 64
 100e581:	0f 85 fd 00 00 00 	jne	253 <_runtime.typeBitsBulkBarrier+0x134>
 100e587:	80 3d 76 93 0e 00 00 	cmp	byte ptr [rip + 955254], 0
 100e58e:	0f 84 e6 00 00 00 	je	230 <_runtime.typeBitsBulkBarrier+0x12a>
 100e594:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100e59d:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 100e5a1:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 100e5a8:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 100e5ad:	84 01 	test	byte ptr [rcx], al
 100e5af:	48 8b 50 20 	mov	rdx, qword ptr [rax + 32]
 100e5b3:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 100e5b8:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100e5bd:	31 ff 	xor	edi, edi
 100e5bf:	45 31 c0 	xor	r8d, r8d
 100e5c2:	eb 04 	jmp	4 <_runtime.typeBitsBulkBarrier+0x78>
 100e5c4:	48 83 c7 08 	add	rdi, 8
 100e5c8:	48 39 78 08 	cmp	qword ptr [rax + 8], rdi
 100e5cc:	0f 86 9e 00 00 00 	jbe	158 <_runtime.typeBitsBulkBarrier+0x120>
 100e5d2:	48 f7 c7 3f 00 00 00 	test	rdi, 63
 100e5d9:	0f 85 89 00 00 00 	jne	137 <_runtime.typeBitsBulkBarrier+0x118>
 100e5df:	44 0f b6 02 	movzx	r8d, byte ptr [rdx]
 100e5e3:	90 	nop
 100e5e4:	48 ff c2 	inc	rdx
 100e5e7:	41 0f ba e0 00 	bt	r8d, 0
 100e5ec:	73 d6 	jae	-42 <_runtime.typeBitsBulkBarrier+0x74>
 100e5ee:	4c 8d 0c 37 	lea	r9, [rdi + rsi]
 100e5f2:	4c 8d 14 1f 	lea	r10, [rdi + rbx]
 100e5f6:	4c 8b 99 48 17 00 00 	mov	r11, qword ptr [rcx + 5960]
 100e5fd:	4d 8b 09 	mov	r9, qword ptr [r9]
 100e600:	4d 8b 12 	mov	r10, qword ptr [r10]
 100e603:	4d 89 0b 	mov	qword ptr [r11], r9
 100e606:	4d 89 53 08 	mov	qword ptr [r11 + 8], r10
 100e60a:	4c 8b 89 48 17 00 00 	mov	r9, qword ptr [rcx + 5960]
 100e611:	49 83 c1 10 	add	r9, 16
 100e615:	4c 89 89 48 17 00 00 	mov	qword ptr [rcx + 5960], r9
 100e61c:	4c 39 89 50 17 00 00 	cmp	qword ptr [rcx + 5968], r9
 100e623:	75 9f 	jne	-97 <_runtime.typeBitsBulkBarrier+0x74>
 100e625:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 100e62a:	44 89 44 24 1c 	mov	dword ptr [rsp + 28], r8d
 100e62f:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 100e634:	0f 57 c0 	xorps	xmm0, xmm0
 100e637:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 100e63b:	e8 30 6d 01 00 	call	93488 <_runtime.wbBufFlush>
 100e640:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 100e645:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 100e64a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 100e64f:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 100e654:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 100e659:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 100e65e:	44 8b 44 24 1c 	mov	r8d, dword ptr [rsp + 28]
 100e663:	e9 5c ff ff ff 	jmp	-164 <_runtime.typeBitsBulkBarrier+0x74>
 100e668:	41 d1 e8 	shr	r8d
 100e66b:	e9 77 ff ff ff 	jmp	-137 <_runtime.typeBitsBulkBarrier+0x97>
 100e670:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 100e675:	48 83 c4 58 	add	rsp, 88
 100e679:	c3 	ret
 100e67a:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 100e67f:	48 83 c4 58 	add	rsp, 88
 100e683:	c3 	ret
 100e684:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e688:	e8 13 ca 03 00 	call	248339 <_runtime.(*_type).string>
 100e68d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100e692:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100e697:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100e69c:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 100e6a1:	e8 fa bd 01 00 	call	114170 <_runtime.printlock>
 100e6a6:	48 8d 05 8d 81 06 00 	lea	rax, [rip + 426381]
 100e6ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e6b1:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 100e6ba:	e8 21 c7 01 00 	call	116513 <_runtime.printstring>
 100e6bf:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100e6c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e6c8:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100e6cd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100e6d2:	e8 09 c7 01 00 	call	116489 <_runtime.printstring>
 100e6d7:	48 8d 05 46 52 06 00 	lea	rax, [rip + 414278]
 100e6de:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e6e2:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 100e6eb:	e8 f0 c6 01 00 	call	116464 <_runtime.printstring>
 100e6f0:	e8 2b be 01 00 	call	114219 <_runtime.printunlock>
 100e6f5:	48 8d 05 36 7c 06 00 	lea	rax, [rip + 425014]
 100e6fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e700:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 100e709:	e8 52 a6 01 00 	call	108114 <_runtime.throw>
 100e70e:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e712:	e8 89 c9 03 00 	call	248201 <_runtime.(*_type).string>
 100e717:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100e71c:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100e721:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 100e726:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 100e72b:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 100e730:	48 8b 12 	mov	rdx, qword ptr [rdx]
 100e733:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 100e738:	e8 63 bd 01 00 	call	114019 <_runtime.printlock>
 100e73d:	48 8d 05 f6 80 06 00 	lea	rax, [rip + 426230]
 100e744:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e748:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 100e751:	e8 8a c6 01 00 	call	116362 <_runtime.printstring>
 100e756:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100e75b:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e75f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100e764:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100e769:	e8 72 c6 01 00 	call	116338 <_runtime.printstring>
 100e76e:	48 8d 05 6a 4b 06 00 	lea	rax, [rip + 412522]
 100e775:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e779:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 100e782:	e8 59 c6 01 00 	call	116313 <_runtime.printstring>
 100e787:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100e78c:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e790:	e8 8b c3 01 00 	call	115595 <_runtime.printuint>
 100e795:	48 8d 05 93 56 06 00 	lea	rax, [rip + 415379]
 100e79c:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e7a0:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 100e7a9:	e8 32 c6 01 00 	call	116274 <_runtime.printstring>
 100e7ae:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 100e7b3:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e7b7:	e8 64 c3 01 00 	call	115556 <_runtime.printuint>
 100e7bc:	e8 6f bf 01 00 	call	114543 <_runtime.printnl>
 100e7c1:	e8 5a bd 01 00 	call	114010 <_runtime.printunlock>
 100e7c6:	48 8d 05 65 7b 06 00 	lea	rax, [rip + 424805]
 100e7cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e7d1:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 100e7da:	e8 81 a5 01 00 	call	107905 <_runtime.throw>
 100e7df:	48 8d 05 49 81 06 00 	lea	rax, [rip + 426313]
 100e7e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e7ea:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 100e7f3:	e8 68 a5 01 00 	call	107880 <_runtime.throw>
 100e7f8:	90 	nop
 100e7f9:	cc 	int3
 100e7fa:	cc 	int3
 100e7fb:	cc 	int3
 100e7fc:	cc 	int3
 100e7fd:	cc 	int3
 100e7fe:	cc 	int3
 100e7ff:	cc 	int3

_runtime.heapBits.initSpan:
 100e800:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100e809:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100e80d:	0f 86 81 01 00 00 	jbe	385 <_runtime.heapBits.initSpan+0x194>
 100e813:	48 83 ec 78 	sub	rsp, 120
 100e817:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 100e81c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 100e821:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 100e829:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 100e82d:	48 c1 e1 0d 	shl	rcx, 13
 100e831:	48 c1 e9 03 	shr	rcx, 3
 100e835:	48 f7 c1 03 00 00 00 	test	rcx, 3
 100e83c:	0f 85 38 01 00 00 	jne	312 <_runtime.heapBits.initSpan+0x17a>
 100e842:	8b 94 24 88 00 00 00 	mov	edx, dword ptr [rsp + 136]
 100e849:	85 d2 	test	edx, edx
 100e84b:	0f 85 10 01 00 00 	jne	272 <_runtime.heapBits.initSpan+0x161>
 100e851:	48 8b 40 68 	mov	rax, qword ptr [rax + 104]
 100e855:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100e85a:	48 83 f8 08 	cmp	rax, 8
 100e85e:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 100e866:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 100e86e:	8b bc 24 8c 00 00 00 	mov	edi, dword ptr [rsp + 140]
 100e875:	eb 28 	jmp	40 <_runtime.heapBits.initSpan+0x9f>
 100e877:	41 c6 01 ff 	mov	byte ptr [r9], -1
 100e87b:	49 ff c2 	inc	r10
 100e87e:	90 	nop
 100e87f:	49 ff c1 	inc	r9
 100e882:	49 39 f2 	cmp	r10, rsi
 100e885:	72 f0 	jb	-16 <_runtime.heapBits.initSpan+0x77>
 100e887:	4c 8b 4c 24 48 	mov	r9, qword ptr [rsp + 72]
 100e88c:	49 29 f9 	sub	r9, rdi
 100e88f:	48 89 c6 	mov	rsi, rax
 100e892:	89 df 	mov	edi, ebx
 100e894:	4c 89 c0 	mov	rax, r8
 100e897:	48 89 d3 	mov	rbx, rdx
 100e89a:	89 ca 	mov	edx, ecx
 100e89c:	4c 89 c9 	mov	rcx, r9
 100e89f:	48 85 c9 	test	rcx, rcx
 100e8a2:	0f 86 af 00 00 00 	jbe	175 <_runtime.heapBits.initSpan+0x157>
 100e8a8:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 100e8ad:	48 89 9c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbx
 100e8b5:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100e8b9:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 100e8bd:	89 7c 24 0c 	mov	dword ptr [rsp + 12], edi
 100e8c1:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100e8c6:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100e8cb:	e8 90 f3 ff ff 	call	-3184 <_runtime.heapBits.forwardOrBoundary>
 100e8d0:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 100e8d5:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 100e8d9:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100e8de:	8b 5c 24 2c 	mov	ebx, dword ptr [rsp + 44]
 100e8e2:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 100e8e7:	48 89 f7 	mov	rdi, rsi
 100e8ea:	48 c1 ee 02 	shr	rsi, 2
 100e8ee:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 100e8f3:	49 83 f8 08 	cmp	r8, 8
 100e8f7:	75 10 	jne	16 <_runtime.heapBits.initSpan+0x109>
 100e8f9:	4c 8b 8c 24 80 00 00 00 	mov	r9, qword ptr [rsp + 128]
 100e901:	45 31 d2 	xor	r10d, r10d
 100e904:	e9 79 ff ff ff 	jmp	-135 <_runtime.heapBits.initSpan+0x82>
 100e909:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 100e90e:	89 4c 24 44 	mov	dword ptr [rsp + 68], ecx
 100e912:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 100e917:	89 5c 24 40 	mov	dword ptr [rsp + 64], ebx
 100e91b:	48 89 7c 24 50 	mov	qword ptr [rsp + 80], rdi
 100e920:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100e928:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e92c:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 100e931:	e8 8a 4f 04 00 	call	282506 <_runtime.memclrNoHeapPointers>
 100e936:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100e93b:	8b 4c 24 44 	mov	ecx, dword ptr [rsp + 68]
 100e93f:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 100e944:	8b 5c 24 40 	mov	ebx, dword ptr [rsp + 64]
 100e948:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 100e94d:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 100e952:	e9 30 ff ff ff 	jmp	-208 <_runtime.heapBits.initSpan+0x87>
 100e957:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 100e95c:	48 83 c4 78 	add	rsp, 120
 100e960:	c3 	ret
 100e961:	48 8d 05 8d 61 06 00 	lea	rax, [rip + 418189]
 100e968:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e96c:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 100e975:	e8 e6 a3 01 00 	call	107494 <_runtime.throw>
 100e97a:	48 8d 05 de 64 06 00 	lea	rax, [rip + 419038]
 100e981:	48 89 04 24 	mov	qword ptr [rsp], rax
 100e985:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 100e98e:	e8 cd a3 01 00 	call	107469 <_runtime.throw>
 100e993:	90 	nop
 100e994:	e8 37 22 04 00 	call	270903 <_runtime.morestack_noctxt>
 100e999:	e9 62 fe ff ff 	jmp	-414 <_runtime.heapBits.initSpan>
 100e99e:	cc 	int3
 100e99f:	cc 	int3

_runtime.heapBits.initCheckmarkSpan:
 100e9a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100e9a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100e9ad:	0f 86 1a 01 00 00 	jbe	282 <_runtime.heapBits.initCheckmarkSpan+0x12d>
 100e9b3:	48 83 ec 50 	sub	rsp, 80
 100e9b7:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 100e9bc:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 100e9c1:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 100e9c6:	48 83 f8 08 	cmp	rax, 8
 100e9ca:	75 71 	jne	113 <_runtime.heapBits.initCheckmarkSpan+0x9d>
 100e9cc:	31 c0 	xor	eax, eax
 100e9ce:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 100e9d3:	8b 54 24 64 	mov	edx, dword ptr [rsp + 100]
 100e9d7:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100e9dc:	8b 74 24 60 	mov	esi, dword ptr [rsp + 96]
 100e9e0:	eb 47 	jmp	71 <_runtime.heapBits.initCheckmarkSpan+0x89>
 100e9e2:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 100e9e7:	0f b6 03 	movzx	eax, byte ptr [rbx]
 100e9ea:	83 e0 f0 	and	eax, -16
 100e9ed:	88 03 	mov	byte ptr [rbx], al
 100e9ef:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100e9f3:	89 74 24 08 	mov	dword ptr [rsp + 8], esi
 100e9f7:	89 54 24 0c 	mov	dword ptr [rsp + 12], edx
 100e9fb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100ea00:	48 c7 44 24 18 04 00 00 00 	mov	qword ptr [rsp + 24], 4
 100ea09:	e8 72 f1 ff ff 	call	-3726 <_runtime.heapBits.forward>
 100ea0e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 100ea13:	48 83 c0 04 	add	rax, 4
 100ea17:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 100ea1c:	8b 74 24 28 	mov	esi, dword ptr [rsp + 40]
 100ea20:	8b 54 24 2c 	mov	edx, dword ptr [rsp + 44]
 100ea24:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100ea29:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 100ea2e:	48 39 f8 	cmp	rax, rdi
 100ea31:	72 af 	jb	-81 <_runtime.heapBits.initCheckmarkSpan+0x42>
 100ea33:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100ea38:	48 83 c4 50 	add	rsp, 80
 100ea3c:	c3 	ret
 100ea3d:	31 c9 	xor	ecx, ecx
 100ea3f:	8b 54 24 60 	mov	edx, dword ptr [rsp + 96]
 100ea43:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 100ea48:	8b 74 24 64 	mov	esi, dword ptr [rsp + 100]
 100ea4c:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 100ea51:	eb 66 	jmp	102 <_runtime.heapBits.initCheckmarkSpan+0x119>
 100ea53:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 100ea58:	8d 4a 01 	lea	ecx, [rdx + 1]
 100ea5b:	83 f9 20 	cmp	ecx, 32
 100ea5e:	45 19 c0 	sbb	r8d, r8d
 100ea61:	44 0f b6 0b 	movzx	r9d, byte ptr [rbx]
 100ea65:	41 ba 10 00 00 00 	mov	r10d, 16
 100ea6b:	41 d3 e2 	shl	r10d, cl
 100ea6e:	45 21 c2 	and	r10d, r8d
 100ea71:	41 f7 d2 	not	r10d
 100ea74:	45 21 ca 	and	r10d, r9d
 100ea77:	44 88 13 	mov	byte ptr [rbx], r10b
 100ea7a:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100ea7e:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 100ea82:	89 74 24 0c 	mov	dword ptr [rsp + 12], esi
 100ea86:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 100ea8b:	48 c1 e8 03 	shr	rax, 3
 100ea8f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 100ea94:	e8 e7 f0 ff ff 	call	-3865 <_runtime.heapBits.forward>
 100ea99:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100ea9e:	48 8d 48 01 	lea	rcx, [rax + 1]
 100eaa2:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 100eaa7:	8b 54 24 28 	mov	edx, dword ptr [rsp + 40]
 100eaab:	8b 74 24 2c 	mov	esi, dword ptr [rsp + 44]
 100eaaf:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 100eab4:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 100eab9:	4c 8b 44 24 78 	mov	r8, qword ptr [rsp + 120]
 100eabe:	4c 39 c1 	cmp	rcx, r8
 100eac1:	72 90 	jb	-112 <_runtime.heapBits.initCheckmarkSpan+0xb3>
 100eac3:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 100eac8:	48 83 c4 50 	add	rsp, 80
 100eacc:	c3 	ret
 100eacd:	e8 fe 20 04 00 	call	270590 <_runtime.morestack_noctxt>
 100ead2:	e9 c9 fe ff ff 	jmp	-311 <_runtime.heapBits.initCheckmarkSpan>
 100ead7:	cc 	int3
 100ead8:	cc 	int3
 100ead9:	cc 	int3
 100eada:	cc 	int3
 100eadb:	cc 	int3
 100eadc:	cc 	int3
 100eadd:	cc 	int3
 100eade:	cc 	int3
 100eadf:	cc 	int3

_runtime.heapBits.clearCheckmarkSpan:
 100eae0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100eae9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100eaed:	0f 86 8a 00 00 00 	jbe	138 <_runtime.heapBits.clearCheckmarkSpan+0x9d>
 100eaf3:	48 83 ec 48 	sub	rsp, 72
 100eaf7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 100eafc:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 100eb01:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100eb06:	48 83 f8 08 	cmp	rax, 8
 100eb0a:	75 67 	jne	103 <_runtime.heapBits.clearCheckmarkSpan+0x93>
 100eb0c:	31 c0 	xor	eax, eax
 100eb0e:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 100eb13:	8b 54 24 5c 	mov	edx, dword ptr [rsp + 92]
 100eb17:	8b 5c 24 58 	mov	ebx, dword ptr [rsp + 88]
 100eb1b:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 100eb20:	eb 47 	jmp	71 <_runtime.heapBits.clearCheckmarkSpan+0x89>
 100eb22:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100eb27:	0f b6 06 	movzx	eax, byte ptr [rsi]
 100eb2a:	83 c8 0f 	or	eax, 15
 100eb2d:	88 06 	mov	byte ptr [rsi], al
 100eb2f:	48 89 34 24 	mov	qword ptr [rsp], rsi
 100eb33:	89 5c 24 08 	mov	dword ptr [rsp + 8], ebx
 100eb37:	89 54 24 0c 	mov	dword ptr [rsp + 12], edx
 100eb3b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 100eb40:	48 c7 44 24 18 04 00 00 00 	mov	qword ptr [rsp + 24], 4
 100eb49:	e8 32 f0 ff ff 	call	-4046 <_runtime.heapBits.forward>
 100eb4e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100eb53:	48 83 c0 04 	add	rax, 4
 100eb57:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 100eb5c:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 100eb60:	8b 54 24 2c 	mov	edx, dword ptr [rsp + 44]
 100eb64:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100eb69:	48 8b 7c 24 70 	mov	rdi, qword ptr [rsp + 112]
 100eb6e:	48 39 f8 	cmp	rax, rdi
 100eb71:	72 af 	jb	-81 <_runtime.heapBits.clearCheckmarkSpan+0x42>
 100eb73:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 100eb78:	48 83 c4 48 	add	rsp, 72
 100eb7c:	c3 	ret
 100eb7d:	e8 4e 20 04 00 	call	270414 <_runtime.morestack_noctxt>
 100eb82:	e9 59 ff ff ff 	jmp	-167 <_runtime.heapBits.clearCheckmarkSpan>
 100eb87:	cc 	int3
 100eb88:	cc 	int3
 100eb89:	cc 	int3
 100eb8a:	cc 	int3
 100eb8b:	cc 	int3
 100eb8c:	cc 	int3
 100eb8d:	cc 	int3
 100eb8e:	cc 	int3
 100eb8f:	cc 	int3

_runtime.(*mspan).countAlloc:
 100eb90:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 100eb95:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 100eb99:	48 89 ca 	mov	rdx, rcx
 100eb9c:	48 c1 e9 03 	shr	rcx, 3
 100eba0:	31 db 	xor	ebx, ebx
 100eba2:	31 f6 	xor	esi, esi
 100eba4:	eb 1f 	jmp	31 <_runtime.(*mspan).countAlloc+0x35>
 100eba6:	48 8d 7b 01 	lea	rdi, [rbx + 1]
 100ebaa:	4c 8b 40 50 	mov	r8, qword ptr [rax + 80]
 100ebae:	46 0f b6 04 03 	movzx	r8d, byte ptr [rbx + r8]
 100ebb3:	4c 8d 0d e6 ca 0b 00 	lea	r9, [rip + 772838]
 100ebba:	47 0f b6 04 01 	movzx	r8d, byte ptr [r9 + r8]
 100ebbf:	4c 01 c6 	add	rsi, r8
 100ebc2:	48 89 fb 	mov	rbx, rdi
 100ebc5:	48 39 cb 	cmp	rbx, rcx
 100ebc8:	72 dc 	jb	-36 <_runtime.(*mspan).countAlloc+0x16>
 100ebca:	48 f7 c2 07 00 00 00 	test	rdx, 7
 100ebd1:	74 32 	je	50 <_runtime.(*mspan).countAlloc+0x75>
 100ebd3:	48 83 e2 07 	and	rdx, 7
 100ebd7:	48 8b 40 50 	mov	rax, qword ptr [rax + 80]
 100ebdb:	0f b6 04 01 	movzx	eax, byte ptr [rcx + rax]
 100ebdf:	48 89 d1 	mov	rcx, rdx
 100ebe2:	bb 01 00 00 00 	mov	ebx, 1
 100ebe7:	d3 e3 	shl	ebx, cl
 100ebe9:	8d 53 ff 	lea	edx, [rbx - 1]
 100ebec:	21 d0 	and	eax, edx
 100ebee:	0f b6 c0 	movzx	eax, al
 100ebf1:	48 8d 15 a8 ca 0b 00 	lea	rdx, [rip + 772776]
 100ebf8:	0f b6 04 10 	movzx	eax, byte ptr [rax + rdx]
 100ebfc:	48 01 f0 	add	rax, rsi
 100ebff:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100ec04:	c3 	ret
 100ec05:	48 89 f0 	mov	rax, rsi
 100ec08:	eb f5 	jmp	-11 <_runtime.(*mspan).countAlloc+0x6f>
 100ec0a:	cc 	int3
 100ec0b:	cc 	int3
 100ec0c:	cc 	int3
 100ec0d:	cc 	int3
 100ec0e:	cc 	int3
 100ec0f:	cc 	int3

_runtime.heapBitsSetType:
 100ec10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100ec19:	48 8d 44 24 b0 	lea	rax, [rsp - 80]
 100ec1e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 100ec22:	0f 86 30 0a 00 00 	jbe	2608 <_runtime.heapBitsSetType+0xa48>
 100ec28:	48 81 ec d0 00 00 00 	sub	rsp, 208
 100ec2f:	48 89 ac 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rbp
 100ec37:	48 8d ac 24 c8 00 00 00 	lea	rbp, [rsp + 200]
 100ec3f:	48 8b 94 24 e0 00 00 00 	mov	rdx, qword ptr [rsp + 224]
 100ec47:	48 83 fa 08 	cmp	rdx, 8
 100ec4b:	0f 84 4d 09 00 00 	je	2381 <_runtime.heapBitsSetType+0x98e>
 100ec51:	48 8b 1d 78 67 0e 00 	mov	rbx, qword ptr [rip + 943992]
 100ec58:	84 03 	test	byte ptr [rbx], al
 100ec5a:	90 	nop
 100ec5b:	48 8b b4 24 d8 00 00 00 	mov	rsi, qword ptr [rsp + 216]
 100ec63:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 100ec6d:	48 8d 04 37 	lea	rax, [rdi + rsi]
 100ec71:	48 c1 e8 1a 	shr	rax, 26
 100ec75:	48 3d 00 00 40 00 	cmp	rax, 4194304
 100ec7b:	0f 83 cc 09 00 00 	jae	2508 <_runtime.heapBitsSetType+0xa3d>
 100ec81:	48 8b 1c c3 	mov	rbx, qword ptr [rbx + 8*rax]
 100ec85:	48 85 db 	test	rbx, rbx
 100ec88:	0f 84 fd 08 00 00 	je	2301 <_runtime.heapBitsSetType+0x97b>
 100ec8e:	48 89 f7 	mov	rdi, rsi
 100ec91:	48 c1 ee 05 	shr	rsi, 5
 100ec95:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 100ec9c:	48 01 de 	add	rsi, rbx
 100ec9f:	49 89 f8 	mov	r8, rdi
 100eca2:	48 c1 ef 03 	shr	rdi, 3
 100eca6:	48 83 e7 03 	and	rdi, 3
 100ecaa:	48 81 c3 ff ff 1f 00 	add	rbx, 2097151
 100ecb1:	48 89 c1 	mov	rcx, rax
 100ecb4:	4c 8b 8c 24 f0 00 00 00 	mov	r9, qword ptr [rsp + 240]
 100ecbc:	4d 8b 51 20 	mov	r10, qword ptr [r9 + 32]
 100ecc0:	48 83 fa 10 	cmp	rdx, 16
 100ecc4:	0f 84 52 08 00 00 	je	2130 <_runtime.heapBitsSetType+0x90c>
 100ecca:	4e 8d 1c 02 	lea	r11, [rdx + r8]
 100ecce:	41 89 c4 	mov	r12d, eax
 100ecd1:	49 bd ff ff ff ff ff 7f 00 00 	movabs	r13, 140737488355327
 100ecdb:	4d 01 eb 	add	r11, r13
 100ecde:	49 c1 eb 1a 	shr	r11, 26
 100ece2:	4d 39 dc 	cmp	r12, r11
 100ece5:	0f 84 1e 08 00 00 	je	2078 <_runtime.heapBitsSetType+0x8f9>
 100eceb:	4c 89 c3 	mov	rbx, r8
 100ecee:	31 f6 	xor	esi, esi
 100ecf0:	4c 89 a4 24 98 00 00 00 	mov	qword ptr [rsp + 152], r12
 100ecf8:	4c 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], r11
 100ed00:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 100ed08:	45 0f b6 69 17 	movzx	r13d, byte ptr [r9 + 23]
 100ed0d:	41 f6 c5 40 	test	r13b, 64
 100ed11:	0f 85 88 07 00 00 	jne	1928 <_runtime.heapBitsSetType+0x88f>
 100ed17:	49 8b 31 	mov	rsi, qword ptr [r9]
 100ed1a:	48 8b 84 24 e8 00 00 00 	mov	rax, qword ptr [rsp + 232]
 100ed22:	48 39 c6 	cmp	rsi, rax
 100ed25:	0f 83 56 07 00 00 	jae	1878 <_runtime.heapBitsSetType+0x871>
 100ed2b:	4d 8b 69 08 	mov	r13, qword ptr [r9 + 8]
 100ed2f:	49 c1 ed 03 	shr	r13, 3
 100ed33:	49 83 fd 39 	cmp	r13, 57
 100ed37:	0f 87 fe 06 00 00 	ja	1790 <_runtime.heapBitsSetType+0x82b>
 100ed3d:	4d 89 d6 	mov	r14, r10
 100ed40:	45 31 ff 	xor	r15d, r15d
 100ed43:	45 31 d2 	xor	r10d, r10d
 100ed46:	4c 89 54 24 50 	mov	qword ptr [rsp + 80], r10
 100ed4b:	4d 89 f2 	mov	r10, r14
 100ed4e:	eb 50 	jmp	80 <_runtime.heapBitsSetType+0x190>
 100ed50:	49 83 ff 40 	cmp	r15, 64
 100ed54:	48 19 db 	sbb	rbx, rbx
 100ed57:	49 8d 4f 08 	lea	rcx, [r15 + 8]
 100ed5b:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 100ed60:	45 0f b6 1a 	movzx	r11d, byte ptr [r10]
 100ed64:	4c 89 f9 	mov	rcx, r15
 100ed67:	49 d3 e3 	shl	r11, cl
 100ed6a:	49 21 db 	and	r11, rbx
 100ed6d:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 100ed72:	4c 09 d9 	or	rcx, r11
 100ed75:	90 	nop
 100ed76:	49 ff c2 	inc	r10
 100ed79:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 100ed7e:	48 8b 9c 24 d8 00 00 00 	mov	rbx, qword ptr [rsp + 216]
 100ed86:	4c 8b 9c 24 90 00 00 00 	mov	r11, qword ptr [rsp + 144]
 100ed8e:	4c 8b 7c 24 60 	mov	r15, qword ptr [rsp + 96]
 100ed93:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 100ed98:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 100eda0:	4d 39 ef 	cmp	r15, r13
 100eda3:	72 ab 	jb	-85 <_runtime.heapBitsSetType+0x140>
 100eda5:	49 89 f2 	mov	r10, rsi
 100eda8:	48 c1 ee 03 	shr	rsi, 3
 100edac:	4c 8d 2c 36 	lea	r13, [rsi + rsi]
 100edb0:	49 83 fd 39 	cmp	r13, 57
 100edb4:	0f 87 6e 06 00 00 	ja	1646 <_runtime.heapBitsSetType+0x818>
 100edba:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 100edbf:	49 89 f7 	mov	r15, rsi
 100edc2:	eb 2d 	jmp	45 <_runtime.heapBitsSetType+0x1e1>
 100edc4:	4c 89 6c 24 50 	mov	qword ptr [rsp + 80], r13
 100edc9:	48 19 db 	sbb	rbx, rbx
 100edcc:	48 89 f1 	mov	rcx, rsi
 100edcf:	49 d3 e5 	shl	r13, cl
 100edd2:	49 21 dd 	and	r13, rbx
 100edd5:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 100edda:	49 09 dd 	or	r13, rbx
 100eddd:	48 8d 34 09 	lea	rsi, [rcx + rcx]
 100ede1:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 100ede9:	48 8b 9c 24 d8 00 00 00 	mov	rbx, qword ptr [rsp + 216]
 100edf1:	48 83 fe 40 	cmp	rsi, 64
 100edf5:	76 cd 	jbe	-51 <_runtime.heapBitsSetType+0x1b4>
 100edf7:	45 84 ff 	test	r15b, r15b
 100edfa:	0f 84 48 08 00 00 	je	2120 <_runtime.heapBitsSetType+0xa38>
 100ee00:	41 0f b6 f7 	movzx	esi, r15b
 100ee04:	bb 39 00 00 00 	mov	ebx, 57
 100ee09:	0f b6 db 	movzx	ebx, bl
 100ee0c:	89 d8 	mov	eax, ebx
 100ee0e:	48 89 d3 	mov	rbx, rdx
 100ee11:	31 d2 	xor	edx, edx
 100ee13:	66 f7 f6 	div	si
 100ee16:	0f b6 d0 	movzx	edx, al
 100ee19:	49 0f af d7 	imul	rdx, r15
 100ee1d:	48 83 fa 40 	cmp	rdx, 64
 100ee21:	48 19 f6 	sbb	rsi, rsi
 100ee24:	48 89 c8 	mov	rax, rcx
 100ee27:	48 89 d1 	mov	rcx, rdx
 100ee2a:	41 bf 01 00 00 00 	mov	r15d, 1
 100ee30:	49 d3 e7 	shl	r15, cl
 100ee33:	49 21 f7 	and	r15, rsi
 100ee36:	49 8d 77 ff 	lea	rsi, [r15 - 1]
 100ee3a:	49 21 f5 	and	r13, rsi
 100ee3d:	31 d2 	xor	edx, edx
 100ee3f:	31 f6 	xor	esi, esi
 100ee41:	49 89 cf 	mov	r15, rcx
 100ee44:	48 85 d2 	test	rdx, rdx
 100ee47:	0f 84 cb 05 00 00 	je	1483 <_runtime.heapBitsSetType+0x808>
 100ee4d:	4c 89 d9 	mov	rcx, r11
 100ee50:	44 0f b6 1a 	movzx	r11d, byte ptr [rdx]
 100ee54:	90 	nop
 100ee55:	48 ff c2 	inc	rdx
 100ee58:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 100ee5d:	b8 08 00 00 00 	mov	eax, 8
 100ee62:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 100ee67:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 100ee6c:	4c 8b a4 24 e8 00 00 00 	mov	r12, qword ptr [rsp + 232]
 100ee74:	4d 39 d4 	cmp	r12, r10
 100ee77:	0f 85 67 05 00 00 	jne	1383 <_runtime.heapBitsSetType+0x7d4>
 100ee7d:	4d 8b 51 08 	mov	r10, qword ptr [r9 + 8]
 100ee81:	49 c1 ea 03 	shr	r10, 3
 100ee85:	4d 85 d2 	test	r10, r10
 100ee88:	0f 84 39 07 00 00 	je	1849 <_runtime.heapBitsSetType+0x9b7>
 100ee8e:	49 83 fa 02 	cmp	r10, 2
 100ee92:	41 b9 02 00 00 00 	mov	r9d, 2
 100ee98:	4d 0f 42 d1 	cmovb	r10, r9
 100ee9c:	85 ff 	test	edi, edi
 100ee9e:	0f 85 ea 04 00 00 	jne	1258 <_runtime.heapBitsSetType+0x77e>
 100eea4:	4c 89 df 	mov	rdi, r11
 100eea7:	49 83 e3 0f 	and	r11, 15
 100eeab:	49 81 cb d0 00 00 00 	or	r11, 208
 100eeb2:	49 83 fa 04 	cmp	r10, 4
 100eeb6:	0f 87 76 03 00 00 	ja	886 <_runtime.heapBitsSetType+0x622>
 100eebc:	ba 04 00 00 00 	mov	edx, 4
 100eec1:	4c 39 d2 	cmp	rdx, r10
 100eec4:	0f 86 5d 03 00 00 	jbe	861 <_runtime.heapBitsSetType+0x617>
 100eeca:	48 89 d6 	mov	rsi, rdx
 100eecd:	4c 29 d2 	sub	rdx, r10
 100eed0:	48 83 c2 fc 	add	rdx, -4
 100eed4:	48 f7 da 	neg	rdx
 100eed7:	48 83 fa 40 	cmp	rdx, 64
 100eedb:	48 19 ff 	sbb	rdi, rdi
 100eede:	49 89 c9 	mov	r9, rcx
 100eee1:	48 89 d1 	mov	rcx, rdx
 100eee4:	41 ba 01 00 00 00 	mov	r10d, 1
 100eeea:	49 d3 e2 	shl	r10, cl
 100eeed:	4c 21 d7 	and	rdi, r10
 100eef0:	48 8d 57 ff 	lea	rdx, [rdi - 1]
 100eef4:	48 89 d7 	mov	rdi, rdx
 100eef7:	48 c1 e2 04 	shl	rdx, 4
 100eefb:	48 09 fa 	or	rdx, rdi
 100eefe:	49 21 d3 	and	r11, rdx
 100ef01:	48 89 d9 	mov	rcx, rbx
 100ef04:	48 c1 eb 03 	shr	rbx, 3
 100ef08:	48 39 de 	cmp	rsi, rbx
 100ef0b:	0f 87 08 03 00 00 	ja	776 <_runtime.heapBitsSetType+0x609>
 100ef11:	45 88 18 	mov	byte ptr [r8], r11b
 100ef14:	90 	nop
 100ef15:	48 8d 56 04 	lea	rdx, [rsi + 4]
 100ef19:	49 8d 70 01 	lea	rsi, [r8 + 1]
 100ef1d:	eb 0b 	jmp	11 <_runtime.heapBitsSetType+0x31a>
 100ef1f:	c6 06 00 	mov	byte ptr [rsi], 0
 100ef22:	48 83 c2 04 	add	rdx, 4
 100ef26:	90 	nop
 100ef27:	48 ff c6 	inc	rsi
 100ef2a:	48 39 da 	cmp	rdx, rbx
 100ef2d:	76 f0 	jbe	-16 <_runtime.heapBitsSetType+0x30f>
 100ef2f:	31 ff 	xor	edi, edi
 100ef31:	48 83 c3 02 	add	rbx, 2
 100ef35:	48 39 d3 	cmp	rbx, rdx
 100ef38:	0f 85 cb 02 00 00 	jne	715 <_runtime.heapBitsSetType+0x5f9>
 100ef3e:	0f b6 16 	movzx	edx, byte ptr [rsi]
 100ef41:	83 e2 cc 	and	edx, -52
 100ef44:	09 d7 	or	edi, edx
 100ef46:	40 88 3e 	mov	byte ptr [rsi], dil
 100ef49:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 100ef51:	4c 39 ca 	cmp	rdx, r9
 100ef54:	0f 84 a7 01 00 00 	je	423 <_runtime.heapBitsSetType+0x4f1>
 100ef5a:	48 8b 15 6f 64 0e 00 	mov	rdx, qword ptr [rip + 943215]
 100ef61:	84 02 	test	byte ptr [rdx], al
 100ef63:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 100ef67:	48 85 d2 	test	rdx, rdx
 100ef6a:	0f 84 84 02 00 00 	je	644 <_runtime.heapBitsSetType+0x5e4>
 100ef70:	48 8b 9c 24 d8 00 00 00 	mov	rbx, qword ptr [rsp + 216]
 100ef78:	48 89 de 	mov	rsi, rbx
 100ef7b:	48 c1 eb 05 	shr	rbx, 5
 100ef7f:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 100ef86:	48 01 d3 	add	rbx, rdx
 100ef89:	48 89 f7 	mov	rdi, rsi
 100ef8c:	48 c1 ee 03 	shr	rsi, 3
 100ef90:	48 83 e6 03 	and	rsi, 3
 100ef94:	48 81 c2 ff ff 1f 00 	add	rdx, 2097151
 100ef9b:	48 c1 e9 03 	shr	rcx, 3
 100ef9f:	49 89 f8 	mov	r8, rdi
 100efa2:	83 fe 02 	cmp	esi, 2
 100efa5:	0f 85 04 01 00 00 	jne	260 <_runtime.heapBitsSetType+0x49f>
 100efab:	44 0f b6 0b 	movzx	r9d, byte ptr [rbx]
 100efaf:	41 83 e1 33 	and	r9d, 51
 100efb3:	44 0f b6 17 	movzx	r10d, byte ptr [rdi]
 100efb7:	45 09 ca 	or	r10d, r9d
 100efba:	44 88 13 	mov	byte ptr [rbx], r10b
 100efbd:	44 8d 4e 01 	lea	r9d, [rsi + 1]
 100efc1:	41 83 f9 03 	cmp	r9d, 3
 100efc5:	0f 83 c4 01 00 00 	jae	452 <_runtime.heapBitsSetType+0x57f>
 100efcb:	83 c6 02 	add	esi, 2
 100efce:	48 83 c1 fe 	add	rcx, -2
 100efd2:	48 ff c7 	inc	rdi
 100efd5:	e9 d5 00 00 00 	jmp	213 <_runtime.heapBitsSetType+0x49f>
 100efda:	48 89 9c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbx
 100efe2:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 100efe7:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100efeb:	89 74 24 08 	mov	dword ptr [rsp + 8], esi
 100efef:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100eff3:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100eff8:	48 c1 e9 02 	shr	rcx, 2
 100effc:	48 c1 e1 02 	shl	rcx, 2
 100f000:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100f005:	e8 56 ec ff ff 	call	-5034 <_runtime.heapBits.forwardOrBoundary>
 100f00a:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 100f00f:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 100f014:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 100f019:	48 89 8c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rcx
 100f021:	8b 54 24 2c 	mov	edx, dword ptr [rsp + 44]
 100f025:	89 54 24 44 	mov	dword ptr [rsp + 68], edx
 100f029:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 100f02d:	89 5c 24 40 	mov	dword ptr [rsp + 64], ebx
 100f031:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 100f036:	48 89 b4 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rsi
 100f03e:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 100f046:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 100f04a:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 100f052:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 100f057:	48 c1 e8 02 	shr	rax, 2
 100f05b:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 100f063:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100f068:	e8 e3 4a 04 00 	call	281315 <_runtime.memmove>
 100f06d:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 100f072:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 100f077:	48 29 c1 	sub	rcx, rax
 100f07a:	90 	nop
 100f07b:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 100f083:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 100f08b:	48 8d 3c 02 	lea	rdi, [rdx + rax]
 100f08f:	4c 8b 84 24 d8 00 00 00 	mov	r8, qword ptr [rsp + 216]
 100f097:	48 8b 94 24 c0 00 00 00 	mov	rdx, qword ptr [rsp + 192]
 100f09f:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 100f0a7:	8b 44 24 44 	mov	eax, dword ptr [rsp + 68]
 100f0ab:	8b 74 24 40 	mov	esi, dword ptr [rsp + 64]
 100f0af:	48 89 bc 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdi
 100f0b7:	48 83 f9 04 	cmp	rcx, 4
 100f0bb:	0f 83 19 ff ff ff 	jae	-231 <_runtime.heapBitsSetType+0x3ca>
 100f0c1:	48 83 f9 02 	cmp	rcx, 2
 100f0c5:	0f 85 bc 00 00 00 	jne	188 <_runtime.heapBitsSetType+0x577>
 100f0cb:	0f b6 0b 	movzx	ecx, byte ptr [rbx]
 100f0ce:	83 e1 cc 	and	ecx, -52
 100f0d1:	44 0f b6 0f 	movzx	r9d, byte ptr [rdi]
 100f0d5:	41 09 c9 	or	r9d, ecx
 100f0d8:	44 88 0b 	mov	byte ptr [rbx], r9b
 100f0db:	90 	nop
 100f0dc:	83 fe 03 	cmp	esi, 3
 100f0df:	73 5d 	jae	93 <_runtime.heapBitsSetType+0x52e>
 100f0e1:	8d 4e 01 	lea	ecx, [rsi + 1]
 100f0e4:	83 f9 03 	cmp	ecx, 3
 100f0e7:	73 28 	jae	40 <_runtime.heapBitsSetType+0x501>
 100f0e9:	48 8d 47 01 	lea	rax, [rdi + 1]
 100f0ed:	4c 89 c1 	mov	rcx, r8
 100f0f0:	4c 89 04 24 	mov	qword ptr [rsp], r8
 100f0f4:	48 29 c8 	sub	rax, rcx
 100f0f7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100f0fc:	e8 bf 47 04 00 	call	280511 <_runtime.memclrNoHeapPointers>
 100f101:	48 8b ac 24 c8 00 00 00 	mov	rbp, qword ptr [rsp + 200]
 100f109:	48 81 c4 d0 00 00 00 	add	rsp, 208
 100f110:	c3 	ret
 100f111:	48 39 d3 	cmp	rbx, rdx
 100f114:	75 d3 	jne	-45 <_runtime.heapBitsSetType+0x4d9>
 100f116:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100f11a:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 100f11e:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100f122:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100f127:	e8 b4 e9 ff ff 	call	-5708 <_runtime.heapBits.nextArena>
 100f12c:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 100f134:	4c 8b 84 24 d8 00 00 00 	mov	r8, qword ptr [rsp + 216]
 100f13c:	eb ab 	jmp	-85 <_runtime.heapBitsSetType+0x4d9>
 100f13e:	48 39 d3 	cmp	rbx, rdx
 100f141:	74 07 	je	7 <_runtime.heapBitsSetType+0x53a>
 100f143:	48 ff c3 	inc	rbx
 100f146:	31 c9 	xor	ecx, ecx
 100f148:	eb 9a 	jmp	-102 <_runtime.heapBitsSetType+0x4d4>
 100f14a:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100f14e:	89 74 24 08 	mov	dword ptr [rsp + 8], esi
 100f152:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100f156:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100f15b:	e8 80 e9 ff ff 	call	-5760 <_runtime.heapBits.nextArena>
 100f160:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 100f165:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 100f169:	8b 4c 24 20 	mov	ecx, dword ptr [rsp + 32]
 100f16d:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100f172:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 100f17a:	4c 8b 84 24 d8 00 00 00 	mov	r8, qword ptr [rsp + 216]
 100f182:	e9 5d ff ff ff 	jmp	-163 <_runtime.heapBitsSetType+0x4d4>
 100f187:	48 89 f8 	mov	rax, rdi
 100f18a:	e9 5e ff ff ff 	jmp	-162 <_runtime.heapBitsSetType+0x4dd>
 100f18f:	48 39 d3 	cmp	rbx, rdx
 100f192:	74 0a 	je	10 <_runtime.heapBitsSetType+0x58e>
 100f194:	48 ff c3 	inc	rbx
 100f197:	31 f6 	xor	esi, esi
 100f199:	e9 30 fe ff ff 	jmp	-464 <_runtime.heapBitsSetType+0x3be>
 100f19e:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 100f1a6:	48 89 bc 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rdi
 100f1ae:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 100f1b2:	44 89 4c 24 08 	mov	dword ptr [rsp + 8], r9d
 100f1b7:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100f1bb:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100f1c0:	e8 1b e9 ff ff 	call	-5861 <_runtime.heapBits.nextArena>
 100f1c5:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 100f1ca:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 100f1ce:	8b 74 24 20 	mov	esi, dword ptr [rsp + 32]
 100f1d2:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 100f1d7:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 100f1df:	48 8b bc 24 b0 00 00 00 	mov	rdi, qword ptr [rsp + 176]
 100f1e7:	4c 8b 84 24 d8 00 00 00 	mov	r8, qword ptr [rsp + 216]
 100f1ef:	e9 da fd ff ff 	jmp	-550 <_runtime.heapBitsSetType+0x3be>
 100f1f4:	48 8b bc 24 d8 00 00 00 	mov	rdi, qword ptr [rsp + 216]
 100f1fc:	31 d2 	xor	edx, edx
 100f1fe:	31 c0 	xor	eax, eax
 100f200:	31 f6 	xor	esi, esi
 100f202:	31 db 	xor	ebx, ebx
 100f204:	e9 92 fd ff ff 	jmp	-622 <_runtime.heapBitsSetType+0x38b>
 100f209:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 100f211:	4c 39 ca 	cmp	rdx, r9
 100f214:	e9 3b fd ff ff 	jmp	-709 <_runtime.heapBitsSetType+0x344>
 100f219:	48 89 f2 	mov	rdx, rsi
 100f21c:	4c 89 c6 	mov	rsi, r8
 100f21f:	4c 89 df 	mov	rdi, r11
 100f222:	e9 0a fd ff ff 	jmp	-758 <_runtime.heapBitsSetType+0x321>
 100f227:	48 89 d6 	mov	rsi, rdx
 100f22a:	49 89 c9 	mov	r9, rcx
 100f22d:	e9 cf fc ff ff 	jmp	-817 <_runtime.heapBitsSetType+0x2f1>
 100f232:	45 88 18 	mov	byte ptr [r8], r11b
 100f235:	90 	nop
 100f236:	48 c1 ef 04 	shr	rdi, 4
 100f23a:	4c 8b 4c 24 58 	mov	r9, qword ptr [rsp + 88]
 100f23f:	49 83 c1 fc 	add	r9, -4
 100f243:	49 ff c0 	inc	r8
 100f246:	41 bb 04 00 00 00 	mov	r11d, 4
 100f24c:	49 83 c1 fc 	add	r9, -4
 100f250:	eb 24 	jmp	36 <_runtime.heapBitsSetType+0x666>
 100f252:	45 88 60 01 	mov	byte ptr [r8 + 1], r12b
 100f256:	90 	nop
 100f257:	48 c1 ea 04 	shr	rdx, 4
 100f25b:	49 83 c0 02 	add	r8, 2
 100f25f:	4d 89 cb 	mov	r11, r9
 100f262:	49 89 c9 	mov	r9, rcx
 100f265:	48 89 f9 	mov	rcx, rdi
 100f268:	48 89 d7 	mov	rdi, rdx
 100f26b:	48 89 c2 	mov	rdx, rax
 100f26e:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100f276:	49 89 fc 	mov	r12, rdi
 100f279:	48 83 e7 0f 	and	rdi, 15
 100f27d:	48 81 cf f0 00 00 00 	or	rdi, 240
 100f284:	49 8d 43 04 	lea	rax, [r11 + 4]
 100f288:	4c 39 d0 	cmp	rax, r10
 100f28b:	0f 83 ec 00 00 00 	jae	236 <_runtime.heapBitsSetType+0x76d>
 100f291:	41 88 38 	mov	byte ptr [r8], dil
 100f294:	90 	nop
 100f295:	49 c1 ec 04 	shr	r12, 4
 100f299:	48 39 d6 	cmp	rsi, rdx
 100f29c:	74 5d 	je	93 <_runtime.heapBitsSetType+0x6eb>
 100f29e:	49 83 f9 08 	cmp	r9, 8
 100f2a2:	73 48 	jae	72 <_runtime.heapBitsSetType+0x6dc>
 100f2a4:	0f b6 02 	movzx	eax, byte ptr [rdx]
 100f2a7:	48 89 cf 	mov	rdi, rcx
 100f2aa:	4c 89 c9 	mov	rcx, r9
 100f2ad:	48 d3 e0 	shl	rax, cl
 100f2b0:	49 09 c4 	or	r12, rax
 100f2b3:	90 	nop
 100f2b4:	48 8d 42 01 	lea	rax, [rdx + 1]
 100f2b8:	4c 89 e2 	mov	rdx, r12
 100f2bb:	49 83 e4 0f 	and	r12, 15
 100f2bf:	49 81 cc f0 00 00 00 	or	r12, 240
 100f2c6:	4d 8d 4b 08 	lea	r9, [r11 + 8]
 100f2ca:	4d 39 d1 	cmp	r9, r10
 100f2cd:	72 83 	jb	-125 <_runtime.heapBitsSetType+0x642>
 100f2cf:	49 8d 40 01 	lea	rax, [r8 + 1]
 100f2d3:	48 89 f9 	mov	rcx, rdi
 100f2d6:	4c 89 ca 	mov	rdx, r9
 100f2d9:	49 89 c0 	mov	r8, rax
 100f2dc:	4d 89 e3 	mov	r11, r12
 100f2df:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100f2e7:	e9 d5 fb ff ff 	jmp	-1067 <_runtime.heapBitsSetType+0x2b1>
 100f2ec:	49 83 c1 f8 	add	r9, -8
 100f2f0:	48 89 cf 	mov	rdi, rcx
 100f2f3:	48 89 d0 	mov	rax, rdx
 100f2f6:	4c 89 c9 	mov	rcx, r9
 100f2f9:	eb bd 	jmp	-67 <_runtime.heapBitsSetType+0x6a8>
 100f2fb:	48 85 d2 	test	rdx, rdx
 100f2fe:	74 4d 	je	77 <_runtime.heapBitsSetType+0x73d>
 100f300:	49 83 f9 40 	cmp	r9, 64
 100f304:	48 19 c0 	sbb	rax, rax
 100f307:	0f b6 12 	movzx	edx, byte ptr [rdx]
 100f30a:	48 89 cf 	mov	rdi, rcx
 100f30d:	4c 89 c9 	mov	rcx, r9
 100f310:	48 d3 e2 	shl	rdx, cl
 100f313:	48 21 d0 	and	rax, rdx
 100f316:	49 09 c4 	or	r12, rax
 100f319:	4a 8d 04 39 	lea	rax, [rcx + r15]
 100f31d:	48 83 f8 08 	cmp	rax, 8
 100f321:	73 1d 	jae	29 <_runtime.heapBitsSetType+0x730>
 100f323:	41 0f b6 16 	movzx	edx, byte ptr [r14]
 100f327:	48 89 c1 	mov	rcx, rax
 100f32a:	48 d3 e2 	shl	rdx, cl
 100f32d:	49 09 d4 	or	r12, rdx
 100f330:	90 	nop
 100f331:	49 8d 56 01 	lea	rdx, [r14 + 1]
 100f335:	48 89 c1 	mov	rcx, rax
 100f338:	48 89 d0 	mov	rax, rdx
 100f33b:	e9 78 ff ff ff 	jmp	-136 <_runtime.heapBitsSetType+0x6a8>
 100f340:	4a 8d 04 39 	lea	rax, [rcx + r15]
 100f344:	48 8d 40 f8 	lea	rax, [rax - 8]
 100f348:	4c 89 f2 	mov	rdx, r14
 100f34b:	eb e8 	jmp	-24 <_runtime.heapBitsSetType+0x725>
 100f34d:	49 83 f9 08 	cmp	r9, 8
 100f351:	73 22 	jae	34 <_runtime.heapBitsSetType+0x765>
 100f353:	48 89 c8 	mov	rax, rcx
 100f356:	4c 89 c9 	mov	rcx, r9
 100f359:	4c 89 ef 	mov	rdi, r13
 100f35c:	49 d3 e5 	shl	r13, cl
 100f35f:	4d 09 ec 	or	r12, r13
 100f362:	4e 8d 0c 39 	lea	r9, [rcx + r15]
 100f366:	49 83 c1 f8 	add	r9, -8
 100f36a:	49 89 fd 	mov	r13, rdi
 100f36d:	48 89 c7 	mov	rdi, rax
 100f370:	4c 89 c8 	mov	rax, r9
 100f373:	eb c0 	jmp	-64 <_runtime.heapBitsSetType+0x725>
 100f375:	48 89 c8 	mov	rax, rcx
 100f378:	4c 89 ef 	mov	rdi, r13
 100f37b:	eb e9 	jmp	-23 <_runtime.heapBitsSetType+0x756>
 100f37d:	49 89 c1 	mov	r9, rax
 100f380:	4c 89 c0 	mov	rax, r8
 100f383:	49 89 fc 	mov	r12, rdi
 100f386:	48 89 cf 	mov	rdi, rcx
 100f389:	e9 45 ff ff ff 	jmp	-187 <_runtime.heapBitsSetType+0x6c3>
 100f38e:	83 ff 02 	cmp	edi, 2
 100f391:	0f 85 17 02 00 00 	jne	535 <_runtime.heapBitsSetType+0x99e>
 100f397:	4c 89 df 	mov	rdi, r11
 100f39a:	49 83 e3 03 	and	r11, 3
 100f39e:	49 c1 e3 02 	shl	r11, 2
 100f3a2:	49 83 cb 40 	or	r11, 64
 100f3a6:	45 0f b6 08 	movzx	r9d, byte ptr [r8]
 100f3aa:	41 83 e1 b3 	and	r9d, -77
 100f3ae:	45 09 d9 	or	r9d, r11d
 100f3b1:	45 88 08 	mov	byte ptr [r8], r9b
 100f3b4:	90 	nop
 100f3b5:	49 ff c0 	inc	r8
 100f3b8:	49 83 fa 02 	cmp	r10, 2
 100f3bc:	77 0d 	ja	13 <_runtime.heapBitsSetType+0x7bb>
 100f3be:	ba 06 00 00 00 	mov	edx, 6
 100f3c3:	45 31 db 	xor	r11d, r11d
 100f3c6:	e9 f6 fa ff ff 	jmp	-1290 <_runtime.heapBitsSetType+0x2b1>
 100f3cb:	48 c1 ef 02 	shr	rdi, 2
 100f3cf:	4c 8b 64 24 58 	mov	r12, qword ptr [rsp + 88]
 100f3d4:	4d 8d 4c 24 fe 	lea	r9, [r12 - 2]
 100f3d9:	41 bb 02 00 00 00 	mov	r11d, 2
 100f3df:	e9 68 fe ff ff 	jmp	-408 <_runtime.heapBitsSetType+0x63c>
 100f3e4:	4d 85 d2 	test	r10, r10
 100f3e7:	0f 84 56 02 00 00 	je	598 <_runtime.heapBitsSetType+0xa33>
 100f3ed:	4c 89 e0 	mov	rax, r12
 100f3f0:	49 89 d4 	mov	r12, rdx
 100f3f3:	31 d2 	xor	edx, edx
 100f3f5:	49 f7 f2 	div	r10
 100f3f8:	4c 89 e2 	mov	rdx, r12
 100f3fb:	4c 8d 60 ff 	lea	r12, [rax - 1]
 100f3ff:	4d 0f af d4 	imul	r10, r12
 100f403:	4d 03 51 08 	add	r10, qword ptr [r9 + 8]
 100f407:	49 c1 ea 03 	shr	r10, 3
 100f40b:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100f413:	e9 6d fa ff ff 	jmp	-1427 <_runtime.heapBitsSetType+0x275>
 100f418:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 100f41d:	4c 89 d9 	mov	rcx, r11
 100f420:	4d 89 eb 	mov	r11, r13
 100f423:	e9 44 fa ff ff 	jmp	-1468 <_runtime.heapBitsSetType+0x25c>
 100f428:	48 89 c8 	mov	rax, rcx
 100f42b:	48 89 d3 	mov	rbx, rdx
 100f42e:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 100f433:	48 89 f1 	mov	rcx, rsi
 100f436:	e9 02 fa ff ff 	jmp	-1534 <_runtime.heapBitsSetType+0x22d>
 100f43b:	49 83 c5 07 	add	r13, 7
 100f43f:	49 c1 ed 03 	shr	r13, 3
 100f443:	4d 8d 75 ff 	lea	r14, [r13 - 1]
 100f447:	90 	nop
 100f448:	49 89 f7 	mov	r15, rsi
 100f44b:	49 c1 ef 03 	shr	r15, 3
 100f44f:	49 c1 e6 03 	shl	r14, 3
 100f453:	4d 29 f7 	sub	r15, r14
 100f456:	4d 89 d6 	mov	r14, r10
 100f459:	4f 8d 54 15 00 	lea	r10, [r13 + r10]
 100f45e:	4d 8d 52 ff 	lea	r10, [r10 - 1]
 100f462:	48 89 c8 	mov	rax, rcx
 100f465:	48 89 d3 	mov	rbx, rdx
 100f468:	4c 89 f2 	mov	rdx, r14
 100f46b:	31 c9 	xor	ecx, ecx
 100f46d:	45 31 ed 	xor	r13d, r13d
 100f470:	4d 89 d6 	mov	r14, r10
 100f473:	49 89 f2 	mov	r10, rsi
 100f476:	4c 89 f6 	mov	rsi, r14
 100f479:	49 89 d6 	mov	r14, rdx
 100f47c:	e9 c3 f9 ff ff 	jmp	-1597 <_runtime.heapBitsSetType+0x234>
 100f481:	48 89 c8 	mov	rax, rcx
 100f484:	48 89 d3 	mov	rbx, rdx
 100f487:	4d 89 d6 	mov	r14, r10
 100f48a:	4c 89 f2 	mov	rdx, r14
 100f48d:	31 c9 	xor	ecx, ecx
 100f48f:	45 31 ed 	xor	r13d, r13d
 100f492:	45 31 ff 	xor	r15d, r15d
 100f495:	49 89 f2 	mov	r10, rsi
 100f498:	31 f6 	xor	esi, esi
 100f49a:	e9 a5 f9 ff ff 	jmp	-1627 <_runtime.heapBitsSetType+0x234>
 100f49f:	49 8b 49 08 	mov	rcx, qword ptr [r9 + 8]
 100f4a3:	49 8b 19 	mov	rbx, qword ptr [r9]
 100f4a6:	4c 89 04 24 	mov	qword ptr [rsp], r8
 100f4aa:	89 7c 24 08 	mov	dword ptr [rsp + 8], edi
 100f4ae:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 100f4b2:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 100f4b7:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 100f4bc:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 100f4c1:	48 8b 84 24 e8 00 00 00 	mov	rax, qword ptr [rsp + 232]
 100f4c9:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100f4ce:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 100f4d3:	49 8d 42 04 	lea	rax, [r10 + 4]
 100f4d7:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100f4dc:	e8 8f 01 00 00 	call	399 <_runtime.heapBitsSetTypeGCProg>
 100f4e1:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 100f4e9:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 100f4f1:	48 39 c8 	cmp	rax, rcx
 100f4f4:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100f4fc:	48 8b 8c 24 e0 00 00 00 	mov	rcx, qword ptr [rsp + 224]
 100f504:	e9 4b fa ff ff 	jmp	-1461 <_runtime.heapBitsSetType+0x344>
 100f509:	49 89 f0 	mov	r8, rsi
 100f50c:	48 89 de 	mov	rsi, rbx
 100f50f:	48 8b 9c 24 d8 00 00 00 	mov	rbx, qword ptr [rsp + 216]
 100f517:	e9 d4 f7 ff ff 	jmp	-2092 <_runtime.heapBitsSetType+0xe0>
 100f51c:	49 83 39 08 	cmp	qword ptr [r9], 8
 100f520:	75 27 	jne	39 <_runtime.heapBitsSetType+0x939>
 100f522:	83 ff 20 	cmp	edi, 32
 100f525:	19 c0 	sbb	eax, eax
 100f527:	0f b6 16 	movzx	edx, byte ptr [rsi]
 100f52a:	89 f9 	mov	ecx, edi
 100f52c:	bb 13 00 00 00 	mov	ebx, 19
 100f531:	d3 e3 	shl	ebx, cl
 100f533:	21 c3 	and	ebx, eax
 100f535:	09 da 	or	edx, ebx
 100f537:	88 16 	mov	byte ptr [rsi], dl
 100f539:	48 8b ac 24 c8 00 00 00 	mov	rbp, qword ptr [rsp + 200]
 100f541:	48 81 c4 d0 00 00 00 	add	rsp, 208
 100f548:	c3 	ret
 100f549:	83 ff 20 	cmp	edi, 32
 100f54c:	19 c0 	sbb	eax, eax
 100f54e:	19 d2 	sbb	edx, edx
 100f550:	41 0f b6 1a 	movzx	ebx, byte ptr [r10]
 100f554:	83 e3 03 	and	ebx, 3
 100f557:	83 cb 10 	or	ebx, 16
 100f55a:	44 0f b6 06 	movzx	r8d, byte ptr [rsi]
 100f55e:	89 f9 	mov	ecx, edi
 100f560:	41 b9 33 00 00 00 	mov	r9d, 51
 100f566:	41 d3 e1 	shl	r9d, cl
 100f569:	41 21 c1 	and	r9d, eax
 100f56c:	41 f7 d1 	not	r9d
 100f56f:	45 21 c1 	and	r9d, r8d
 100f572:	d3 e3 	shl	ebx, cl
 100f574:	21 d3 	and	ebx, edx
 100f576:	44 09 cb 	or	ebx, r9d
 100f579:	88 1e 	mov	byte ptr [rsi], bl
 100f57b:	48 8b ac 24 c8 00 00 00 	mov	rbp, qword ptr [rsp + 200]
 100f583:	48 81 c4 d0 00 00 00 	add	rsp, 208
 100f58a:	c3 	ret
 100f58b:	48 89 c1 	mov	rcx, rax
 100f58e:	49 89 f0 	mov	r8, rsi
 100f591:	31 db 	xor	ebx, ebx
 100f593:	31 c0 	xor	eax, eax
 100f595:	31 ff 	xor	edi, edi
 100f597:	31 f6 	xor	esi, esi
 100f599:	e9 16 f7 ff ff 	jmp	-2282 <_runtime.heapBitsSetType+0xa4>
 100f59e:	48 8b ac 24 c8 00 00 00 	mov	rbp, qword ptr [rsp + 200]
 100f5a6:	48 81 c4 d0 00 00 00 	add	rsp, 208
 100f5ad:	c3 	ret
 100f5ae:	48 8d 05 b1 68 06 00 	lea	rax, [rip + 420017]
 100f5b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f5b9:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 100f5c2:	e8 99 97 01 00 	call	104345 <_runtime.throw>
 100f5c7:	4c 89 0c 24 	mov	qword ptr [rsp], r9
 100f5cb:	e8 d0 ba 03 00 	call	244432 <_runtime.(*_type).string>
 100f5d0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 100f5d5:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 100f5da:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 100f5df:	48 89 8c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rcx
 100f5e7:	e8 b4 ae 01 00 	call	110260 <_runtime.printlock>
 100f5ec:	48 8d 05 45 53 06 00 	lea	rax, [rip + 414533]
 100f5f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f5f7:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 100f600:	e8 db b7 01 00 	call	112603 <_runtime.printstring>
 100f605:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 100f60d:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f611:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 100f616:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100f61b:	e8 c0 b7 01 00 	call	112576 <_runtime.printstring>
 100f620:	e8 0b b1 01 00 	call	110859 <_runtime.printnl>
 100f625:	e8 f6 ae 01 00 	call	110326 <_runtime.printunlock>
 100f62a:	48 8d 05 a9 76 06 00 	lea	rax, [rip + 423593]
 100f631:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f635:	48 c7 44 24 08 2d 00 00 00 	mov	qword ptr [rsp + 8], 45
 100f63e:	e8 1d 97 01 00 	call	104221 <_runtime.throw>
 100f643:	e8 f8 7c 01 00 	call	97528 <_runtime.panicdivide>
 100f648:	e8 f3 7c 01 00 	call	97523 <_runtime.panicdivide>
 100f64d:	b9 00 00 40 00 	mov	ecx, 4194304
 100f652:	e8 09 3d 04 00 	call	277769 <_runtime.panicIndexU>
 100f657:	90 	nop
 100f658:	e8 73 15 04 00 	call	267635 <_runtime.morestack_noctxt>
 100f65d:	e9 ae f5 ff ff 	jmp	-2642 <_runtime.heapBitsSetType>
 100f662:	cc 	int3
 100f663:	cc 	int3
 100f664:	cc 	int3
 100f665:	cc 	int3
 100f666:	cc 	int3
 100f667:	cc 	int3
 100f668:	cc 	int3
 100f669:	cc 	int3
 100f66a:	cc 	int3
 100f66b:	cc 	int3
 100f66c:	cc 	int3
 100f66d:	cc 	int3
 100f66e:	cc 	int3
 100f66f:	cc 	int3

_runtime.heapBitsSetTypeGCProg:
 100f670:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100f679:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100f67d:	0f 86 7a 03 00 00 	jbe	890 <_runtime.heapBitsSetTypeGCProg+0x38d>
 100f683:	48 83 ec 60 	sub	rsp, 96
 100f687:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 100f68c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 100f691:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 100f699:	48 f7 c2 1f 00 00 00 	test	rdx, 31
 100f6a0:	0f 85 3d 03 00 00 	jne	829 <_runtime.heapBitsSetTypeGCProg+0x373>
 100f6a6:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 100f6ae:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 100f6b6:	48 39 c3 	cmp	rbx, rax
 100f6b9:	0f 84 eb 01 00 00 	je	491 <_runtime.heapBitsSetTypeGCProg+0x23a>
 100f6bf:	48 85 db 	test	rbx, rbx
 100f6c2:	0f 84 98 02 00 00 	je	664 <_runtime.heapBitsSetTypeGCProg+0x2f0>
 100f6c8:	48 89 d1 	mov	rcx, rdx
 100f6cb:	31 d2 	xor	edx, edx
 100f6cd:	48 f7 f3 	div	rbx
 100f6d0:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 100f6d9:	0f 57 c0 	xorps	xmm0, xmm0
 100f6dc:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 100f6e1:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 100f6e6:	48 89 da 	mov	rdx, rbx
 100f6e9:	48 c1 eb 03 	shr	rbx, 3
 100f6ed:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 100f6f5:	48 89 f7 	mov	rdi, rsi
 100f6f8:	48 c1 ee 03 	shr	rsi, 3
 100f6fc:	49 89 d8 	mov	r8, rbx
 100f6ff:	48 29 f3 	sub	rbx, rsi
 100f702:	48 85 db 	test	rbx, rbx
 100f705:	0f 86 98 01 00 00 	jbe	408 <_runtime.heapBitsSetTypeGCProg+0x233>
 100f70b:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 100f710:	48 83 fb 01 	cmp	rbx, 1
 100f714:	0f 86 7f 01 00 00 	jbe	383 <_runtime.heapBitsSetTypeGCProg+0x229>
 100f71a:	c6 44 24 32 81 	mov	byte ptr [rsp + 50], -127
 100f71f:	48 ff cb 	dec	rbx
 100f722:	be 03 00 00 00 	mov	esi, 3
 100f727:	eb 16 	jmp	22 <_runtime.heapBitsSetTypeGCProg+0xcf>
 100f729:	49 89 d9 	mov	r9, rbx
 100f72c:	48 0f ba eb 07 	bts	rbx, 7
 100f731:	88 5c 34 30 	mov	byte ptr [rsp + rsi + 48], bl
 100f735:	49 c1 e9 07 	shr	r9, 7
 100f739:	48 ff c6 	inc	rsi
 100f73c:	4c 89 cb 	mov	rbx, r9
 100f73f:	48 81 fb 80 00 00 00 	cmp	rbx, 128
 100f746:	72 0b 	jb	11 <_runtime.heapBitsSetTypeGCProg+0xe3>
 100f748:	48 83 fe 28 	cmp	rsi, 40
 100f74c:	72 db 	jb	-37 <_runtime.heapBitsSetTypeGCProg+0xb9>
 100f74e:	e9 00 02 00 00 	jmp	512 <_runtime.heapBitsSetTypeGCProg+0x2e3>
 100f753:	48 83 fe 28 	cmp	rsi, 40
 100f757:	0f 83 e9 01 00 00 	jae	489 <_runtime.heapBitsSetTypeGCProg+0x2d6>
 100f75d:	88 5c 34 30 	mov	byte ptr [rsp + rsi + 48], bl
 100f761:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 100f765:	48 83 fb 28 	cmp	rbx, 40
 100f769:	0f 83 ca 01 00 00 	jae	458 <_runtime.heapBitsSetTypeGCProg+0x2c9>
 100f76f:	c6 44 1c 30 80 	mov	byte ptr [rsp + rbx + 48], -128
 100f774:	48 ff c3 	inc	rbx
 100f777:	eb 17 	jmp	23 <_runtime.heapBitsSetTypeGCProg+0x120>
 100f779:	4c 89 c6 	mov	rsi, r8
 100f77c:	49 0f ba e8 07 	bts	r8, 7
 100f781:	44 88 44 1c 30 	mov	byte ptr [rsp + rbx + 48], r8b
 100f786:	48 c1 ee 07 	shr	rsi, 7
 100f78a:	48 ff c3 	inc	rbx
 100f78d:	49 89 f0 	mov	r8, rsi
 100f790:	49 81 f8 80 00 00 00 	cmp	r8, 128
 100f797:	72 0b 	jb	11 <_runtime.heapBitsSetTypeGCProg+0x134>
 100f799:	48 83 fb 28 	cmp	rbx, 40
 100f79d:	72 da 	jb	-38 <_runtime.heapBitsSetTypeGCProg+0x109>
 100f79f:	e9 88 01 00 00 	jmp	392 <_runtime.heapBitsSetTypeGCProg+0x2bc>
 100f7a4:	48 83 fb 28 	cmp	rbx, 40
 100f7a8:	0f 83 71 01 00 00 	jae	369 <_runtime.heapBitsSetTypeGCProg+0x2af>
 100f7ae:	44 88 44 1c 30 	mov	byte ptr [rsp + rbx + 48], r8b
 100f7b3:	48 ff c3 	inc	rbx
 100f7b6:	48 8d 70 ff 	lea	rsi, [rax - 1]
 100f7ba:	48 89 f0 	mov	rax, rsi
 100f7bd:	eb 17 	jmp	23 <_runtime.heapBitsSetTypeGCProg+0x166>
 100f7bf:	49 89 f0 	mov	r8, rsi
 100f7c2:	48 0f ba ee 07 	bts	rsi, 7
 100f7c7:	40 88 74 1c 30 	mov	byte ptr [rsp + rbx + 48], sil
 100f7cc:	49 c1 e8 07 	shr	r8, 7
 100f7d0:	48 ff c3 	inc	rbx
 100f7d3:	4c 89 c6 	mov	rsi, r8
 100f7d6:	48 81 fe 80 00 00 00 	cmp	rsi, 128
 100f7dd:	72 0b 	jb	11 <_runtime.heapBitsSetTypeGCProg+0x17a>
 100f7df:	48 83 fb 28 	cmp	rbx, 40
 100f7e3:	72 da 	jb	-38 <_runtime.heapBitsSetTypeGCProg+0x14f>
 100f7e5:	e9 28 01 00 00 	jmp	296 <_runtime.heapBitsSetTypeGCProg+0x2a2>
 100f7ea:	48 83 fb 28 	cmp	rbx, 40
 100f7ee:	0f 83 11 01 00 00 	jae	273 <_runtime.heapBitsSetTypeGCProg+0x295>
 100f7f4:	40 88 74 1c 30 	mov	byte ptr [rsp + rbx + 48], sil
 100f7f9:	48 8d 73 01 	lea	rsi, [rbx + 1]
 100f7fd:	48 83 fe 28 	cmp	rsi, 40
 100f801:	0f 83 f1 00 00 00 	jae	241 <_runtime.heapBitsSetTypeGCProg+0x288>
 100f807:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 100f80c:	c6 44 1c 31 00 	mov	byte ptr [rsp + rbx + 49], 0
 100f811:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 100f819:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f81d:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 100f822:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 100f827:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100f82c:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100f831:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 100f83a:	e8 e1 02 00 00 	call	737 <_runtime.runGCProg>
 100f83f:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 100f847:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100f84c:	48 0f af c1 	imul	rax, rcx
 100f850:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 100f858:	48 01 c8 	add	rax, rcx
 100f85b:	48 c1 e8 03 	shr	rax, 3
 100f85f:	48 83 c0 03 	add	rax, 3
 100f863:	48 c1 e8 02 	shr	rax, 2
 100f867:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 100f86c:	48 01 c8 	add	rax, rcx
 100f86f:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f873:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 100f87b:	48 c1 ea 05 	shr	rdx, 5
 100f87f:	48 01 d1 	add	rcx, rdx
 100f882:	48 29 c1 	sub	rcx, rax
 100f885:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 100f88a:	e8 31 40 04 00 	call	278577 <_runtime.memclrNoHeapPointers>
 100f88f:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 100f894:	48 83 c4 60 	add	rsp, 96
 100f898:	c3 	ret
 100f899:	bb 02 00 00 00 	mov	ebx, 2
 100f89e:	e9 c2 fe ff ff 	jmp	-318 <_runtime.heapBitsSetTypeGCProg+0xf5>
 100f8a3:	31 db 	xor	ebx, ebx
 100f8a5:	e9 bb fe ff ff 	jmp	-325 <_runtime.heapBitsSetTypeGCProg+0xf5>
 100f8aa:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 100f8b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f8b6:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100f8bf:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 100f8c4:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100f8c9:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 100f8d2:	e8 49 02 00 00 	call	585 <_runtime.runGCProg>
 100f8d7:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100f8dc:	48 89 c1 	mov	rcx, rax
 100f8df:	48 c1 e0 03 	shl	rax, 3
 100f8e3:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 100f8eb:	48 39 d0 	cmp	rax, rdx
 100f8ee:	75 75 	jne	117 <_runtime.heapBitsSetTypeGCProg+0x2f5>
 100f8f0:	48 89 c8 	mov	rax, rcx
 100f8f3:	e9 67 ff ff ff 	jmp	-153 <_runtime.heapBitsSetTypeGCProg+0x1ef>
 100f8f8:	48 89 f0 	mov	rax, rsi
 100f8fb:	b9 28 00 00 00 	mov	ecx, 40
 100f900:	e8 4b 3a 04 00 	call	277067 <_runtime.panicIndex>
 100f905:	48 89 d8 	mov	rax, rbx
 100f908:	b9 28 00 00 00 	mov	ecx, 40
 100f90d:	e8 3e 3a 04 00 	call	277054 <_runtime.panicIndex>
 100f912:	48 89 d8 	mov	rax, rbx
 100f915:	b9 28 00 00 00 	mov	ecx, 40
 100f91a:	e8 31 3a 04 00 	call	277041 <_runtime.panicIndex>
 100f91f:	48 89 d8 	mov	rax, rbx
 100f922:	b9 28 00 00 00 	mov	ecx, 40
 100f927:	e8 24 3a 04 00 	call	277028 <_runtime.panicIndex>
 100f92c:	48 89 d8 	mov	rax, rbx
 100f92f:	b9 28 00 00 00 	mov	ecx, 40
 100f934:	e8 17 3a 04 00 	call	277015 <_runtime.panicIndex>
 100f939:	48 89 d8 	mov	rax, rbx
 100f93c:	b9 28 00 00 00 	mov	ecx, 40
 100f941:	e8 0a 3a 04 00 	call	277002 <_runtime.panicIndex>
 100f946:	48 89 f0 	mov	rax, rsi
 100f949:	b9 28 00 00 00 	mov	ecx, 40
 100f94e:	e8 fd 39 04 00 	call	276989 <_runtime.panicIndex>
 100f953:	48 89 f0 	mov	rax, rsi
 100f956:	b9 28 00 00 00 	mov	ecx, 40
 100f95b:	e8 f0 39 04 00 	call	276976 <_runtime.panicIndex>
 100f960:	e8 db 79 01 00 	call	96731 <_runtime.panicdivide>
 100f965:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 100f96a:	e8 31 ab 01 00 	call	109361 <_runtime.printlock>
 100f96f:	48 8d 05 07 72 06 00 	lea	rax, [rip + 422407]
 100f976:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f97a:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 100f983:	e8 58 b4 01 00 	call	111704 <_runtime.printstring>
 100f988:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 100f98d:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f991:	e8 8a b1 01 00 	call	110986 <_runtime.printuint>
 100f996:	48 8d 05 37 3e 06 00 	lea	rax, [rip + 409143]
 100f99d:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f9a1:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 100f9aa:	e8 31 b4 01 00 	call	111665 <_runtime.printstring>
 100f9af:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 100f9b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f9bb:	e8 60 b1 01 00 	call	110944 <_runtime.printuint>
 100f9c0:	e8 6b ad 01 00 	call	109931 <_runtime.printnl>
 100f9c5:	e8 56 ab 01 00 	call	109398 <_runtime.printunlock>
 100f9ca:	48 8d 05 2b 71 06 00 	lea	rax, [rip + 422187]
 100f9d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f9d5:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 100f9de:	e8 7d 93 01 00 	call	103293 <_runtime.throw>
 100f9e3:	48 8d 05 50 6c 06 00 	lea	rax, [rip + 420944]
 100f9ea:	48 89 04 24 	mov	qword ptr [rsp], rax
 100f9ee:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 100f9f7:	e8 64 93 01 00 	call	103268 <_runtime.throw>
 100f9fc:	90 	nop
 100f9fd:	e8 ce 11 04 00 	call	266702 <_runtime.morestack_noctxt>
 100fa02:	e9 69 fc ff ff 	jmp	-919 <_runtime.heapBitsSetTypeGCProg>
 100fa07:	cc 	int3
 100fa08:	cc 	int3
 100fa09:	cc 	int3
 100fa0a:	cc 	int3
 100fa0b:	cc 	int3
 100fa0c:	cc 	int3
 100fa0d:	cc 	int3
 100fa0e:	cc 	int3
 100fa0f:	cc 	int3

_runtime.progToPointerMask:
 100fa10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 100fa19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 100fa1d:	0f 86 f3 00 00 00 	jbe	243 <_runtime.progToPointerMask+0x106>
 100fa23:	48 83 ec 48 	sub	rsp, 72
 100fa27:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 100fa2c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 100fa31:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 100fa36:	48 c1 e8 03 	shr	rax, 3
 100fa3a:	48 83 c0 07 	add	rax, 7
 100fa3e:	48 c1 e8 03 	shr	rax, 3
 100fa42:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 100fa47:	48 8d 48 01 	lea	rcx, [rax + 1]
 100fa4b:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 100fa50:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100fa54:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 100fa5d:	48 8d 15 4c 8c 0e 00 	lea	rdx, [rip + 953420]
 100fa64:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 100fa69:	e8 a2 ac ff ff 	call	-21342 <_runtime.persistentalloc>
 100fa6e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 100fa73:	84 00 	test	byte ptr [rax], al
 100fa75:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 100fa7a:	48 81 f9 00 00 00 40 	cmp	rcx, 1073741824
 100fa81:	0f 87 84 00 00 00 	ja	132 <_runtime.progToPointerMask+0xfb>
 100fa87:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100fa8c:	48 39 ca 	cmp	rdx, rcx
 100fa8f:	73 72 	jae	114 <_runtime.progToPointerMask+0xf3>
 100fa91:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 100fa96:	c6 04 02 a1 	mov	byte ptr [rdx + rax], -95
 100fa9a:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 100fa9f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 100faa3:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 100faac:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 100fab1:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 100faba:	e8 61 00 00 00 	call	97 <_runtime.runGCProg>
 100fabf:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 100fac4:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 100fac9:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 100face:	0f b6 14 0a 	movzx	edx, byte ptr [rdx + rcx]
 100fad2:	80 fa a1 	cmp	dl, -95
 100fad5:	75 13 	jne	19 <_runtime.progToPointerMask+0xda>
 100fad7:	89 44 24 60 	mov	dword ptr [rsp + 96], eax
 100fadb:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 100fae0:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 100fae5:	48 83 c4 48 	add	rsp, 72
 100fae9:	c3 	ret
 100faea:	48 8d 05 82 55 06 00 	lea	rax, [rip + 415106]
 100faf1:	48 89 04 24 	mov	qword ptr [rsp], rax
 100faf5:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 100fafe:	e8 5d 92 01 00 	call	103005 <_runtime.throw>
 100fb03:	48 89 d0 	mov	rax, rdx
 100fb06:	e8 45 38 04 00 	call	276549 <_runtime.panicIndex>
 100fb0b:	ba 00 00 00 40 	mov	edx, 1073741824
 100fb10:	e8 6b 38 04 00 	call	276587 <_runtime.panicSliceAlenU>
 100fb15:	90 	nop
 100fb16:	e8 b5 10 04 00 	call	266421 <_runtime.morestack_noctxt>
 100fb1b:	e9 f0 fe ff ff 	jmp	-272 <_runtime.progToPointerMask>

_runtime.runGCProg:
 100fb20:	48 83 ec 08 	sub	rsp, 8
 100fb24:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 100fb28:	48 8d 2c 24 	lea	rbp, [rsp]
 100fb2c:	31 c0 	xor	eax, eax
 100fb2e:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 100fb33:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 100fb38:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 100fb3d:	31 f6 	xor	esi, esi
 100fb3f:	e9 87 00 00 00 	jmp	135 <_runtime.runGCProg+0xab>
 100fb44:	48 83 c0 f8 	add	rax, -8
 100fb48:	48 83 f8 08 	cmp	rax, 8
 100fb4c:	72 45 	jb	69 <_runtime.runGCProg+0x73>
 100fb4e:	48 83 ff 01 	cmp	rdi, 1
 100fb52:	75 0d 	jne	13 <_runtime.runGCProg+0x41>
 100fb54:	40 88 33 	mov	byte ptr [rbx], sil
 100fb57:	90 	nop
 100fb58:	48 c1 ee 08 	shr	rsi, 8
 100fb5c:	48 ff c3 	inc	rbx
 100fb5f:	eb e3 	jmp	-29 <_runtime.runGCProg+0x24>
 100fb61:	49 89 f0 	mov	r8, rsi
 100fb64:	48 83 e6 0f 	and	rsi, 15
 100fb68:	48 81 ce f0 00 00 00 	or	rsi, 240
 100fb6f:	40 88 33 	mov	byte ptr [rbx], sil
 100fb72:	4c 89 c6 	mov	rsi, r8
 100fb75:	49 c1 e8 04 	shr	r8, 4
 100fb79:	49 83 e0 0f 	and	r8, 15
 100fb7d:	49 81 c8 f0 00 00 00 	or	r8, 240
 100fb84:	44 88 43 01 	mov	byte ptr [rbx + 1], r8b
 100fb88:	90 	nop
 100fb89:	48 c1 ee 08 	shr	rsi, 8
 100fb8d:	48 83 c3 02 	add	rbx, 2
 100fb91:	eb b1 	jmp	-79 <_runtime.runGCProg+0x24>
 100fb93:	44 0f b6 01 	movzx	r8d, byte ptr [rcx]
 100fb97:	90 	nop
 100fb98:	4d 89 c1 	mov	r9, r8
 100fb9b:	49 83 e0 7f 	and	r8, 127
 100fb9f:	4c 8d 51 01 	lea	r10, [rcx + 1]
 100fba3:	41 0f ba e1 07 	bt	r9d, 7
 100fba8:	0f 82 59 01 00 00 	jb	345 <_runtime.runGCProg+0x1e7>
 100fbae:	49 f7 c1 7f 00 00 00 	test	r9, 127
 100fbb5:	0f 85 a5 00 00 00 	jne	165 <_runtime.runGCProg+0x140>
 100fbbb:	48 85 d2 	test	rdx, rdx
 100fbbe:	74 15 	je	21 <_runtime.runGCProg+0xb5>
 100fbc0:	31 c9 	xor	ecx, ecx
 100fbc2:	49 89 c8 	mov	r8, rcx
 100fbc5:	48 89 d1 	mov	rcx, rdx
 100fbc8:	4c 89 c2 	mov	rdx, r8
 100fbcb:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 100fbd0:	e9 73 ff ff ff 	jmp	-141 <_runtime.runGCProg+0x28>
 100fbd5:	48 83 ff 01 	cmp	rdi, 1
 100fbd9:	75 40 	jne	64 <_runtime.runGCProg+0xfb>
 100fbdb:	48 89 d9 	mov	rcx, rbx
 100fbde:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100fbe3:	48 29 d3 	sub	rbx, rdx
 100fbe6:	48 8d 14 d8 	lea	rdx, [rax + 8*rbx]
 100fbea:	48 89 c3 	mov	rbx, rax
 100fbed:	48 f7 d8 	neg	rax
 100fbf0:	48 83 e0 07 	and	rax, 7
 100fbf4:	48 01 d8 	add	rax, rbx
 100fbf7:	eb 0f 	jmp	15 <_runtime.runGCProg+0xe8>
 100fbf9:	40 88 31 	mov	byte ptr [rcx], sil
 100fbfc:	48 83 c0 f8 	add	rax, -8
 100fc00:	90 	nop
 100fc01:	48 c1 ee 08 	shr	rsi, 8
 100fc05:	48 ff c1 	inc	rcx
 100fc08:	48 85 c0 	test	rax, rax
 100fc0b:	77 ec 	ja	-20 <_runtime.runGCProg+0xd9>
 100fc0d:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 100fc12:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 100fc16:	48 83 c4 08 	add	rsp, 8
 100fc1a:	c3 	ret
 100fc1b:	48 89 d9 	mov	rcx, rbx
 100fc1e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 100fc23:	48 29 d3 	sub	rbx, rdx
 100fc26:	48 8d 14 98 	lea	rdx, [rax + 4*rbx]
 100fc2a:	48 89 c3 	mov	rbx, rax
 100fc2d:	48 f7 d8 	neg	rax
 100fc30:	48 83 e0 03 	and	rax, 3
 100fc34:	48 01 d8 	add	rax, rbx
 100fc37:	eb 20 	jmp	32 <_runtime.runGCProg+0x139>
 100fc39:	48 89 f3 	mov	rbx, rsi
 100fc3c:	48 83 e6 0f 	and	rsi, 15
 100fc40:	48 81 ce f0 00 00 00 	or	rsi, 240
 100fc47:	40 88 31 	mov	byte ptr [rcx], sil
 100fc4a:	48 83 c0 fc 	add	rax, -4
 100fc4e:	90 	nop
 100fc4f:	48 c1 eb 04 	shr	rbx, 4
 100fc53:	48 ff c1 	inc	rcx
 100fc56:	48 89 de 	mov	rsi, rbx
 100fc59:	48 85 c0 	test	rax, rax
 100fc5c:	77 db 	ja	-37 <_runtime.runGCProg+0x119>
 100fc5e:	eb ad 	jmp	-83 <_runtime.runGCProg+0xed>
 100fc60:	49 c1 e8 03 	shr	r8, 3
 100fc64:	31 c9 	xor	ecx, ecx
 100fc66:	eb 0b 	jmp	11 <_runtime.runGCProg+0x153>
 100fc68:	4d 8d 5c 24 01 	lea	r11, [r12 + 1]
 100fc6d:	49 ff c2 	inc	r10
 100fc70:	4c 89 d9 	mov	rcx, r11
 100fc73:	4c 39 c1 	cmp	rcx, r8
 100fc76:	73 56 	jae	86 <_runtime.runGCProg+0x1ae>
 100fc78:	45 0f b6 1a 	movzx	r11d, byte ptr [r10]
 100fc7c:	49 89 cc 	mov	r12, rcx
 100fc7f:	48 89 c1 	mov	rcx, rax
 100fc82:	49 d3 e3 	shl	r11, cl
 100fc85:	4c 09 de 	or	rsi, r11
 100fc88:	90 	nop
 100fc89:	48 83 ff 01 	cmp	rdi, 1
 100fc8d:	75 0d 	jne	13 <_runtime.runGCProg+0x17c>
 100fc8f:	40 88 33 	mov	byte ptr [rbx], sil
 100fc92:	90 	nop
 100fc93:	48 c1 ee 08 	shr	rsi, 8
 100fc97:	48 ff c3 	inc	rbx
 100fc9a:	eb cc 	jmp	-52 <_runtime.runGCProg+0x148>
 100fc9c:	49 89 f3 	mov	r11, rsi
 100fc9f:	48 83 e6 0f 	and	rsi, 15
 100fca3:	48 81 ce f0 00 00 00 	or	rsi, 240
 100fcaa:	40 88 33 	mov	byte ptr [rbx], sil
 100fcad:	4c 89 de 	mov	rsi, r11
 100fcb0:	49 c1 eb 04 	shr	r11, 4
 100fcb4:	49 83 e3 0f 	and	r11, 15
 100fcb8:	49 81 cb f0 00 00 00 	or	r11, 240
 100fcbf:	44 88 5b 01 	mov	byte ptr [rbx + 1], r11b
 100fcc3:	90 	nop
 100fcc4:	48 c1 ee 08 	shr	rsi, 8
 100fcc8:	48 83 c3 02 	add	rbx, 2
 100fccc:	eb 9a 	jmp	-102 <_runtime.runGCProg+0x148>
 100fcce:	49 f7 c1 07 00 00 00 	test	r9, 7
 100fcd5:	76 28 	jbe	40 <_runtime.runGCProg+0x1df>
 100fcd7:	49 83 e1 07 	and	r9, 7
 100fcdb:	45 0f b6 02 	movzx	r8d, byte ptr [r10]
 100fcdf:	48 89 c1 	mov	rcx, rax
 100fce2:	49 d3 e0 	shl	r8, cl
 100fce5:	4c 09 c6 	or	rsi, r8
 100fce8:	90 	nop
 100fce9:	4d 8d 04 01 	lea	r8, [r9 + rax]
 100fced:	4d 8d 4a 01 	lea	r9, [r10 + 1]
 100fcf1:	4c 89 c0 	mov	rax, r8
 100fcf4:	48 89 d1 	mov	rcx, rdx
 100fcf7:	4c 89 ca 	mov	rdx, r9
 100fcfa:	e9 c3 fe ff ff 	jmp	-317 <_runtime.runGCProg+0xa2>
 100fcff:	49 89 c0 	mov	r8, rax
 100fd02:	4d 89 d1 	mov	r9, r10
 100fd05:	eb ea 	jmp	-22 <_runtime.runGCProg+0x1d1>
 100fd07:	49 f7 c1 7f 00 00 00 	test	r9, 127
 100fd0e:	0f 85 4e 04 00 00 	jne	1102 <_runtime.runGCProg+0x642>
 100fd14:	31 c9 	xor	ecx, ecx
 100fd16:	eb 07 	jmp	7 <_runtime.runGCProg+0x1ff>
 100fd18:	48 83 c1 07 	add	rcx, 7
 100fd1c:	4d 89 ca 	mov	r10, r9
 100fd1f:	48 83 f9 40 	cmp	rcx, 64
 100fd23:	4d 19 c9 	sbb	r9, r9
 100fd26:	45 0f b6 1a 	movzx	r11d, byte ptr [r10]
 100fd2a:	90 	nop
 100fd2b:	4d 89 dc 	mov	r12, r11
 100fd2e:	49 83 e3 7f 	and	r11, 127
 100fd32:	49 d3 e3 	shl	r11, cl
 100fd35:	4d 21 cb 	and	r11, r9
 100fd38:	4d 09 d8 	or	r8, r11
 100fd3b:	4d 8d 4a 01 	lea	r9, [r10 + 1]
 100fd3f:	41 0f ba e4 07 	bt	r12d, 7
 100fd44:	72 d2 	jb	-46 <_runtime.runGCProg+0x1f8>
 100fd46:	31 c9 	xor	ecx, ecx
 100fd48:	45 31 d2 	xor	r10d, r10d
 100fd4b:	eb 07 	jmp	7 <_runtime.runGCProg+0x234>
 100fd4d:	4c 8d 51 07 	lea	r10, [rcx + 7]
 100fd51:	4c 89 f1 	mov	rcx, r14
 100fd54:	49 83 fa 40 	cmp	r10, 64
 100fd58:	4d 19 db 	sbb	r11, r11
 100fd5b:	45 0f b6 21 	movzx	r12d, byte ptr [r9]
 100fd5f:	90 	nop
 100fd60:	4d 89 e5 	mov	r13, r12
 100fd63:	49 83 e4 7f 	and	r12, 127
 100fd67:	49 89 ce 	mov	r14, rcx
 100fd6a:	4c 89 d1 	mov	rcx, r10
 100fd6d:	49 d3 e4 	shl	r12, cl
 100fd70:	4d 21 dc 	and	r12, r11
 100fd73:	4d 09 e6 	or	r14, r12
 100fd76:	49 ff c1 	inc	r9
 100fd79:	41 0f ba e5 07 	bt	r13d, 7
 100fd7e:	72 cd 	jb	-51 <_runtime.runGCProg+0x22d>
 100fd80:	4d 0f af f0 	imul	r14, r8
 100fd84:	49 83 f8 39 	cmp	r8, 57
 100fd88:	0f 87 f4 01 00 00 	ja	500 <_runtime.runGCProg+0x462>
 100fd8e:	48 83 ff 01 	cmp	rdi, 1
 100fd92:	0f 85 bc 01 00 00 	jne	444 <_runtime.runGCProg+0x434>
 100fd98:	90 	nop
 100fd99:	4c 8d 53 ff 	lea	r10, [rbx - 1]
 100fd9d:	48 89 c1 	mov	rcx, rax
 100fda0:	49 89 f3 	mov	r11, rsi
 100fda3:	eb 13 	jmp	19 <_runtime.runGCProg+0x298>
 100fda5:	48 c1 e6 08 	shl	rsi, 8
 100fda9:	45 0f b6 22 	movzx	r12d, byte ptr [r10]
 100fdad:	4c 09 e6 	or	rsi, r12
 100fdb0:	90 	nop
 100fdb1:	48 83 c0 08 	add	rax, 8
 100fdb5:	49 ff ca 	dec	r10
 100fdb8:	4c 39 c0 	cmp	rax, r8
 100fdbb:	72 e8 	jb	-24 <_runtime.runGCProg+0x285>
 100fdbd:	4c 39 c0 	cmp	rax, r8
 100fdc0:	0f 86 80 01 00 00 	jbe	384 <_runtime.runGCProg+0x426>
 100fdc6:	4c 29 c0 	sub	rax, r8
 100fdc9:	48 83 f8 40 	cmp	rax, 64
 100fdcd:	4d 19 d2 	sbb	r10, r10
 100fdd0:	49 89 cc 	mov	r12, rcx
 100fdd3:	48 89 c1 	mov	rcx, rax
 100fdd6:	48 d3 ee 	shr	rsi, cl
 100fdd9:	49 21 f2 	and	r10, rsi
 100fddc:	49 83 f8 01 	cmp	r8, 1
 100fde0:	0f 85 e8 00 00 00 	jne	232 <_runtime.runGCProg+0x3ae>
 100fde6:	49 83 fa 01 	cmp	r10, 1
 100fdea:	0f 85 d3 00 00 00 	jne	211 <_runtime.runGCProg+0x3a3>
 100fdf0:	b8 39 00 00 00 	mov	eax, 57
 100fdf5:	48 b9 ff ff ff ff ff ff ff 01 	movabs	rcx, 144115188075855871
 100fdff:	eb 1e 	jmp	30 <_runtime.runGCProg+0x2ff>
 100fe01:	44 88 1b 	mov	byte ptr [rbx], r11b
 100fe04:	90 	nop
 100fe05:	49 c1 eb 08 	shr	r11, 8
 100fe09:	48 83 c6 f8 	add	rsi, -8
 100fe0d:	48 ff c3 	inc	rbx
 100fe10:	48 83 fe 08 	cmp	rsi, 8
 100fe14:	73 eb 	jae	-21 <_runtime.runGCProg+0x2e1>
 100fe16:	49 29 c6 	sub	r14, rax
 100fe19:	4c 89 d1 	mov	rcx, r10
 100fe1c:	49 89 f4 	mov	r12, rsi
 100fe1f:	49 39 c6 	cmp	r14, rax
 100fe22:	72 4d 	jb	77 <_runtime.runGCProg+0x351>
 100fe24:	49 83 fc 40 	cmp	r12, 64
 100fe28:	48 19 f6 	sbb	rsi, rsi
 100fe2b:	49 89 c8 	mov	r8, rcx
 100fe2e:	4c 89 e1 	mov	rcx, r12
 100fe31:	4d 89 c2 	mov	r10, r8
 100fe34:	49 d3 e0 	shl	r8, cl
 100fe37:	49 21 f0 	and	r8, rsi
 100fe3a:	4d 09 c3 	or	r11, r8
 100fe3d:	48 8d 34 08 	lea	rsi, [rax + rcx]
 100fe41:	48 83 ff 01 	cmp	rdi, 1
 100fe45:	74 c9 	je	-55 <_runtime.runGCProg+0x2f0>
 100fe47:	eb 20 	jmp	32 <_runtime.runGCProg+0x349>
 100fe49:	4d 89 d8 	mov	r8, r11
 100fe4c:	49 83 e3 0f 	and	r11, 15
 100fe50:	49 81 cb f0 00 00 00 	or	r11, 240
 100fe57:	44 88 1b 	mov	byte ptr [rbx], r11b
 100fe5a:	90 	nop
 100fe5b:	49 c1 e8 04 	shr	r8, 4
 100fe5f:	48 83 c6 fc 	add	rsi, -4
 100fe63:	48 ff c3 	inc	rbx
 100fe66:	4d 89 c3 	mov	r11, r8
 100fe69:	48 83 fe 04 	cmp	rsi, 4
 100fe6d:	73 da 	jae	-38 <_runtime.runGCProg+0x329>
 100fe6f:	eb a5 	jmp	-91 <_runtime.runGCProg+0x2f6>
 100fe71:	4d 85 f6 	test	r14, r14
 100fe74:	76 48 	jbe	72 <_runtime.runGCProg+0x39e>
 100fe76:	49 83 fe 40 	cmp	r14, 64
 100fe7a:	48 19 f6 	sbb	rsi, rsi
 100fe7d:	49 83 fc 40 	cmp	r12, 64
 100fe81:	4d 19 c0 	sbb	r8, r8
 100fe84:	48 89 c8 	mov	rax, rcx
 100fe87:	4c 89 f1 	mov	rcx, r14
 100fe8a:	41 ba 01 00 00 00 	mov	r10d, 1
 100fe90:	49 d3 e2 	shl	r10, cl
 100fe93:	49 21 f2 	and	r10, rsi
 100fe96:	49 8d 72 ff 	lea	rsi, [r10 - 1]
 100fe9a:	48 21 f0 	and	rax, rsi
 100fe9d:	4c 89 e1 	mov	rcx, r12
 100fea0:	48 d3 e0 	shl	rax, cl
 100fea3:	4c 21 c0 	and	rax, r8
 100fea6:	49 09 c3 	or	r11, rax
 100fea9:	4a 8d 34 31 	lea	rsi, [rcx + r14]
 100fead:	48 89 f0 	mov	rax, rsi
 100feb0:	48 89 d1 	mov	rcx, rdx
 100feb3:	4c 89 de 	mov	rsi, r11
 100feb6:	4c 89 ca 	mov	rdx, r9
 100feb9:	e9 04 fd ff ff 	jmp	-764 <_runtime.runGCProg+0xa2>
 100febe:	4c 89 e6 	mov	rsi, r12
 100fec1:	eb ea 	jmp	-22 <_runtime.runGCProg+0x38d>
 100fec3:	4c 89 f0 	mov	rax, r14
 100fec6:	4c 89 d1 	mov	rcx, r10
 100fec9:	e9 51 ff ff ff 	jmp	-175 <_runtime.runGCProg+0x2ff>
 100fece:	4b 8d 34 00 	lea	rsi, [r8 + r8]
 100fed2:	48 83 fe 39 	cmp	rsi, 57
 100fed6:	77 66 	ja	102 <_runtime.runGCProg+0x41e>
 100fed8:	4c 89 c0 	mov	rax, r8
 100fedb:	eb 16 	jmp	22 <_runtime.runGCProg+0x3d3>
 100fedd:	48 19 f6 	sbb	rsi, rsi
 100fee0:	4c 89 c1 	mov	rcx, r8
 100fee3:	4d 89 d5 	mov	r13, r10
 100fee6:	49 d3 e2 	shl	r10, cl
 100fee9:	49 21 f2 	and	r10, rsi
 100feec:	4d 09 ea 	or	r10, r13
 100feef:	4c 8d 04 09 	lea	r8, [rcx + rcx]
 100fef3:	49 83 f8 40 	cmp	r8, 64
 100fef7:	76 e4 	jbe	-28 <_runtime.runGCProg+0x3bd>
 100fef9:	48 85 c0 	test	rax, rax
 100fefc:	0f 84 68 02 00 00 	je	616 <_runtime.runGCProg+0x64a>
 100ff02:	48 89 c1 	mov	rcx, rax
 100ff05:	b8 39 00 00 00 	mov	eax, 57
 100ff0a:	48 89 d6 	mov	rsi, rdx
 100ff0d:	31 d2 	xor	edx, edx
 100ff0f:	48 f7 f1 	div	rcx
 100ff12:	48 0f af c8 	imul	rcx, rax
 100ff16:	48 83 f9 40 	cmp	rcx, 64
 100ff1a:	48 19 d2 	sbb	rdx, rdx
 100ff1d:	41 b8 01 00 00 00 	mov	r8d, 1
 100ff23:	49 d3 e0 	shl	r8, cl
 100ff26:	49 21 d0 	and	r8, rdx
 100ff29:	49 8d 50 ff 	lea	rdx, [r8 - 1]
 100ff2d:	49 21 d2 	and	r10, rdx
 100ff30:	48 89 f2 	mov	rdx, rsi
 100ff33:	48 89 c8 	mov	rax, rcx
 100ff36:	4c 89 d1 	mov	rcx, r10
 100ff39:	e9 e1 fe ff ff 	jmp	-287 <_runtime.runGCProg+0x2ff>
 100ff3e:	48 89 d6 	mov	rsi, rdx
 100ff41:	4c 89 c1 	mov	rcx, r8
 100ff44:	eb ea 	jmp	-22 <_runtime.runGCProg+0x410>
 100ff46:	49 89 cc 	mov	r12, rcx
 100ff49:	49 89 c0 	mov	r8, rax
 100ff4c:	49 89 f2 	mov	r10, rsi
 100ff4f:	e9 88 fe ff ff 	jmp	-376 <_runtime.runGCProg+0x2bc>
 100ff54:	90 	nop
 100ff55:	4c 8d 53 ff 	lea	r10, [rbx - 1]
 100ff59:	48 89 c1 	mov	rcx, rax
 100ff5c:	49 89 f3 	mov	r11, rsi
 100ff5f:	eb 17 	jmp	23 <_runtime.runGCProg+0x458>
 100ff61:	48 c1 e6 04 	shl	rsi, 4
 100ff65:	45 0f b6 22 	movzx	r12d, byte ptr [r10]
 100ff69:	49 83 e4 0f 	and	r12, 15
 100ff6d:	4c 09 e6 	or	rsi, r12
 100ff70:	90 	nop
 100ff71:	48 83 c0 04 	add	rax, 4
 100ff75:	49 ff ca 	dec	r10
 100ff78:	4c 39 c0 	cmp	rax, r8
 100ff7b:	72 e4 	jb	-28 <_runtime.runGCProg+0x441>
 100ff7d:	e9 3b fe ff ff 	jmp	-453 <_runtime.runGCProg+0x29d>
 100ff82:	49 29 c0 	sub	r8, rax
 100ff85:	48 83 ff 01 	cmp	rdi, 1
 100ff89:	0f 85 e1 00 00 00 	jne	225 <_runtime.runGCProg+0x550>
 100ff8f:	4d 8d 50 07 	lea	r10, [r8 + 7]
 100ff93:	49 c1 ea 03 	shr	r10, 3
 100ff97:	49 89 db 	mov	r11, rbx
 100ff9a:	4c 29 d3 	sub	rbx, r10
 100ff9d:	49 89 da 	mov	r10, rbx
 100ffa0:	49 f7 c0 07 00 00 00 	test	r8, 7
 100ffa7:	0f 84 b8 00 00 00 	je	184 <_runtime.runGCProg+0x545>
 100ffad:	49 83 e0 07 	and	r8, 7
 100ffb1:	49 8d 48 f8 	lea	rcx, [r8 - 8]
 100ffb5:	48 f7 d9 	neg	rcx
 100ffb8:	48 83 f9 40 	cmp	rcx, 64
 100ffbc:	4d 19 e4 	sbb	r12, r12
 100ffbf:	0f b6 1b 	movzx	ebx, byte ptr [rbx]
 100ffc2:	48 d3 eb 	shr	rbx, cl
 100ffc5:	4c 21 e3 	and	rbx, r12
 100ffc8:	48 89 c1 	mov	rcx, rax
 100ffcb:	48 d3 e3 	shl	rbx, cl
 100ffce:	48 09 de 	or	rsi, rbx
 100ffd1:	90 	nop
 100ffd2:	49 8d 1c 00 	lea	rbx, [r8 + rax]
 100ffd6:	4d 29 c6 	sub	r14, r8
 100ffd9:	4d 8d 42 01 	lea	r8, [r10 + 1]
 100ffdd:	4c 89 f1 	mov	rcx, r14
 100ffe0:	49 c1 ee 03 	shr	r14, 3
 100ffe4:	eb 2f 	jmp	47 <_runtime.runGCProg+0x4f5>
 100ffe6:	48 83 fb 40 	cmp	rbx, 64
 100ffea:	4d 19 d2 	sbb	r10, r10
 100ffed:	45 0f b6 20 	movzx	r12d, byte ptr [r8]
 100fff1:	48 89 c8 	mov	rax, rcx
 100fff4:	48 89 d9 	mov	rcx, rbx
 100fff7:	49 d3 e4 	shl	r12, cl
 100fffa:	4d 21 d4 	and	r12, r10
 100fffd:	4c 09 e6 	or	rsi, r12
 1010000:	90 	nop
 1010001:	41 88 33 	mov	byte ptr [r11], sil
 1010004:	49 ff ce 	dec	r14
 1010007:	90 	nop
 1010008:	48 c1 ee 08 	shr	rsi, 8
 101000c:	49 ff c0 	inc	r8
 101000f:	49 ff c3 	inc	r11
 1010012:	48 89 c1 	mov	rcx, rax
 1010015:	4d 85 f6 	test	r14, r14
 1010018:	77 cc 	ja	-52 <_runtime.runGCProg+0x4c6>
 101001a:	48 f7 c1 07 00 00 00 	test	rcx, 7
 1010021:	76 31 	jbe	49 <_runtime.runGCProg+0x534>
 1010023:	48 83 fb 40 	cmp	rbx, 64
 1010027:	4d 19 d2 	sbb	r10, r10
 101002a:	48 83 e1 07 	and	rcx, 7
 101002e:	45 0f b6 00 	movzx	r8d, byte ptr [r8]
 1010032:	41 bc 01 00 00 00 	mov	r12d, 1
 1010038:	49 d3 e4 	shl	r12, cl
 101003b:	49 ff cc 	dec	r12
 101003e:	4d 21 c4 	and	r12, r8
 1010041:	48 89 c8 	mov	rax, rcx
 1010044:	48 89 d9 	mov	rcx, rbx
 1010047:	49 d3 e4 	shl	r12, cl
 101004a:	4d 21 d4 	and	r12, r10
 101004d:	4c 09 e6 	or	rsi, r12
 1010050:	48 8d 1c 08 	lea	rbx, [rax + rcx]
 1010054:	48 89 d8 	mov	rax, rbx
 1010057:	48 89 d1 	mov	rcx, rdx
 101005a:	4c 89 db 	mov	rbx, r11
 101005d:	4c 89 ca 	mov	rdx, r9
 1010060:	e9 5d fb ff ff 	jmp	-1187 <_runtime.runGCProg+0xa2>
 1010065:	49 89 d8 	mov	r8, rbx
 1010068:	48 89 c3 	mov	rbx, rax
 101006b:	e9 6d ff ff ff 	jmp	-147 <_runtime.runGCProg+0x4bd>
 1010070:	4d 8d 50 03 	lea	r10, [r8 + 3]
 1010074:	49 c1 ea 02 	shr	r10, 2
 1010078:	49 89 db 	mov	r11, rbx
 101007b:	4c 29 d3 	sub	rbx, r10
 101007e:	49 89 da 	mov	r10, rbx
 1010081:	49 f7 c0 03 00 00 00 	test	r8, 3
 1010088:	0f 84 c9 00 00 00 	je	201 <_runtime.runGCProg+0x637>
 101008e:	49 83 e0 03 	and	r8, 3
 1010092:	49 8d 48 fc 	lea	rcx, [r8 - 4]
 1010096:	48 f7 d9 	neg	rcx
 1010099:	48 83 f9 40 	cmp	rcx, 64
 101009d:	4d 19 e4 	sbb	r12, r12
 10100a0:	0f b6 1b 	movzx	ebx, byte ptr [rbx]
 10100a3:	48 83 e3 0f 	and	rbx, 15
 10100a7:	48 d3 eb 	shr	rbx, cl
 10100aa:	4c 21 e3 	and	rbx, r12
 10100ad:	48 89 c1 	mov	rcx, rax
 10100b0:	48 d3 e3 	shl	rbx, cl
 10100b3:	48 09 de 	or	rsi, rbx
 10100b6:	90 	nop
 10100b7:	49 8d 1c 00 	lea	rbx, [r8 + rax]
 10100bb:	4d 29 c6 	sub	r14, r8
 10100be:	4d 8d 42 01 	lea	r8, [r10 + 1]
 10100c2:	4c 89 f1 	mov	rcx, r14
 10100c5:	49 c1 ee 02 	shr	r14, 2
 10100c9:	eb 44 	jmp	68 <_runtime.runGCProg+0x5ef>
 10100cb:	48 83 fb 40 	cmp	rbx, 64
 10100cf:	4d 19 d2 	sbb	r10, r10
 10100d2:	45 0f b6 20 	movzx	r12d, byte ptr [r8]
 10100d6:	49 83 e4 0f 	and	r12, 15
 10100da:	48 89 c8 	mov	rax, rcx
 10100dd:	48 89 d9 	mov	rcx, rbx
 10100e0:	49 d3 e4 	shl	r12, cl
 10100e3:	4d 21 d4 	and	r12, r10
 10100e6:	4c 09 e6 	or	rsi, r12
 10100e9:	90 	nop
 10100ea:	49 89 f2 	mov	r10, rsi
 10100ed:	48 83 e6 0f 	and	rsi, 15
 10100f1:	48 81 ce f0 00 00 00 	or	rsi, 240
 10100f8:	41 88 33 	mov	byte ptr [r11], sil
 10100fb:	49 ff ce 	dec	r14
 10100fe:	90 	nop
 10100ff:	49 c1 ea 04 	shr	r10, 4
 1010103:	49 ff c0 	inc	r8
 1010106:	49 ff c3 	inc	r11
 1010109:	48 89 c1 	mov	rcx, rax
 101010c:	4c 89 d6 	mov	rsi, r10
 101010f:	4d 85 f6 	test	r14, r14
 1010112:	77 b7 	ja	-73 <_runtime.runGCProg+0x5ab>
 1010114:	48 f7 c1 03 00 00 00 	test	rcx, 3
 101011b:	0f 86 33 ff ff ff 	jbe	-205 <_runtime.runGCProg+0x534>
 1010121:	48 83 fb 40 	cmp	rbx, 64
 1010125:	4d 19 d2 	sbb	r10, r10
 1010128:	48 83 e1 03 	and	rcx, 3
 101012c:	45 0f b6 00 	movzx	r8d, byte ptr [r8]
 1010130:	41 bc 01 00 00 00 	mov	r12d, 1
 1010136:	49 d3 e4 	shl	r12, cl
 1010139:	49 ff cc 	dec	r12
 101013c:	4d 21 c4 	and	r12, r8
 101013f:	48 89 c8 	mov	rax, rcx
 1010142:	48 89 d9 	mov	rcx, rbx
 1010145:	49 d3 e4 	shl	r12, cl
 1010148:	4d 21 d4 	and	r12, r10
 101014b:	4c 09 e6 	or	rsi, r12
 101014e:	48 8d 1c 08 	lea	rbx, [rax + rcx]
 1010152:	e9 fd fe ff ff 	jmp	-259 <_runtime.runGCProg+0x534>
 1010157:	49 89 d8 	mov	r8, rbx
 101015a:	48 89 c3 	mov	rbx, rax
 101015d:	e9 60 ff ff ff 	jmp	-160 <_runtime.runGCProg+0x5a2>
 1010162:	4d 89 d1 	mov	r9, r10
 1010165:	e9 dc fb ff ff 	jmp	-1060 <_runtime.runGCProg+0x226>
 101016a:	e8 d1 71 01 00 	call	94673 <_runtime.panicdivide>
 101016f:	90 	nop

_runtime.materializeGCProg:
 1010170:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010179:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101017d:	0f 86 92 00 00 00 	jbe	146 <_runtime.materializeGCProg+0xa5>
 1010183:	48 83 ec 38 	sub	rsp, 56
 1010187:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 101018c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1010191:	90 	nop
 1010192:	48 8d 05 67 4e 0d 00 	lea	rax, [rip + 872039]
 1010199:	48 89 04 24 	mov	qword ptr [rsp], rax
 101019d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10101a2:	48 83 c0 3f 	add	rax, 63
 10101a6:	48 c1 e8 06 	shr	rax, 6
 10101aa:	48 05 ff 1f 00 00 	add	rax, 8191
 10101b0:	48 c1 e8 0d 	shr	rax, 13
 10101b4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10101b9:	48 8d 05 f8 84 0e 00 	lea	rax, [rip + 951544]
 10101c0:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10101c5:	e8 36 d6 00 00 	call	54838 <_runtime.(*mheap).allocManual>
 10101ca:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10101cf:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10101d4:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 10101d8:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 10101dd:	48 83 c2 04 	add	rdx, 4
 10101e1:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10101e5:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10101ee:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10101f3:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 10101fc:	e8 1f f9 ff ff 	call	-1761 <_runtime.runGCProg>
 1010201:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1010206:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101020b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1010210:	48 83 c4 38 	add	rsp, 56
 1010214:	c3 	ret
 1010215:	e8 b6 09 04 00 	call	264630 <_runtime.morestack_noctxt>
 101021a:	e9 51 ff ff ff 	jmp	-175 <_runtime.materializeGCProg>
 101021f:	cc 	int3

_runtime.allocmcache:
 1010220:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010229:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101022d:	0f 86 96 00 00 00 	jbe	150 <_runtime.allocmcache+0xa9>
 1010233:	48 83 ec 30 	sub	rsp, 48
 1010237:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101023c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1010241:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 101024a:	0f 57 c0 	xorps	xmm0, xmm0
 101024d:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1010252:	48 8d 05 47 d9 03 00 	lea	rax, [rip + 252231]
 1010259:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101025e:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1010263:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1010268:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 101026d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010271:	e8 0a 08 04 00 	call	264202 <_runtime.systemstack>
 1010276:	31 c0 	xor	eax, eax
 1010278:	eb 16 	jmp	22 <_runtime.allocmcache+0x70>
 101027a:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 101027f:	84 01 	test	byte ptr [rcx], al
 1010281:	48 8d 15 38 e2 0b 00 	lea	rdx, [rip + 778808]
 1010288:	48 89 54 c1 28 	mov	qword ptr [rcx + 8*rax + 40], rdx
 101028d:	48 ff c0 	inc	rax
 1010290:	48 3d 86 00 00 00 	cmp	rax, 134
 1010296:	7c e2 	jl	-30 <_runtime.allocmcache+0x5a>
 1010298:	48 8b 05 e9 ae 0b 00 	mov	rax, qword ptr [rip + 765673]
 101029f:	48 89 04 24 	mov	qword ptr [rsp], rax
 10102a3:	e8 f8 a2 ff ff 	call	-23816 <_runtime.fastexprand>
 10102a8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10102ad:	48 63 4c 24 08 	movsxd	rcx, dword ptr [rsp + 8]
 10102b2:	48 89 08 	mov	qword ptr [rax], rcx
 10102b5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10102ba:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10102bf:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10102c4:	48 83 c4 30 	add	rsp, 48
 10102c8:	c3 	ret
 10102c9:	e8 02 09 04 00 	call	264450 <_runtime.morestack_noctxt>
 10102ce:	e9 4d ff ff ff 	jmp	-179 <_runtime.allocmcache>
 10102d3:	cc 	int3
 10102d4:	cc 	int3
 10102d5:	cc 	int3
 10102d6:	cc 	int3
 10102d7:	cc 	int3
 10102d8:	cc 	int3
 10102d9:	cc 	int3
 10102da:	cc 	int3
 10102db:	cc 	int3
 10102dc:	cc 	int3
 10102dd:	cc 	int3
 10102de:	cc 	int3
 10102df:	cc 	int3

_runtime.freemcache:
 10102e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10102e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10102ed:	76 44 	jbe	68 <_runtime.freemcache+0x53>
 10102ef:	48 83 ec 20 	sub	rsp, 32
 10102f3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10102f8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10102fd:	0f 57 c0 	xorps	xmm0, xmm0
 1010300:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1010305:	48 8d 05 14 d9 03 00 	lea	rax, [rip + 252180]
 101030c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010311:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1010316:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101031b:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1010320:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010324:	e8 57 07 04 00 	call	264023 <_runtime.systemstack>
 1010329:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101032e:	48 83 c4 20 	add	rsp, 32
 1010332:	c3 	ret
 1010333:	e8 98 08 04 00 	call	264344 <_runtime.morestack_noctxt>
 1010338:	eb a6 	jmp	-90 <_runtime.freemcache>
 101033a:	cc 	int3
 101033b:	cc 	int3
 101033c:	cc 	int3
 101033d:	cc 	int3
 101033e:	cc 	int3
 101033f:	cc 	int3

_runtime.(*mcache).refill:
 1010340:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010349:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101034d:	0f 86 1a 01 00 00 	jbe	282 <_runtime.(*mcache).refill+0x12d>
 1010353:	48 83 ec 18 	sub	rsp, 24
 1010357:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101035c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1010361:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1010366:	84 02 	test	byte ptr [rdx], al
 1010368:	0f b6 44 24 28 	movzx	eax, byte ptr [rsp + 40]
 101036d:	48 3d 86 00 00 00 	cmp	rax, 134
 1010373:	0f 83 e9 00 00 00 	jae	233 <_runtime.(*mcache).refill+0x122>
 1010379:	48 8b 4c c2 28 	mov	rcx, qword ptr [rdx + 8*rax + 40]
 101037e:	0f b7 59 60 	movzx	ebx, word ptr [rcx + 96]
 1010382:	48 39 59 38 	cmp	qword ptr [rcx + 56], rbx
 1010386:	0f 85 bd 00 00 00 	jne	189 <_runtime.(*mcache).refill+0x109>
 101038c:	48 8d 1d 2d e1 0b 00 	lea	rbx, [rip + 778541]
 1010393:	48 39 d9 	cmp	rcx, rbx
 1010396:	74 15 	je	21 <_runtime.(*mcache).refill+0x6d>
 1010398:	8b 1d 42 4d 0e 00 	mov	ebx, dword ptr [rip + 937282]
 101039e:	8d 73 03 	lea	esi, [rbx + 3]
 10103a1:	39 71 58 	cmp	dword ptr [rcx + 88], esi
 10103a4:	0f 85 86 00 00 00 	jne	134 <_runtime.(*mcache).refill+0xf0>
 10103aa:	87 59 58 	xchg	dword ptr [rcx + 88], ebx
 10103ad:	48 c1 e0 06 	shl	rax, 6
 10103b1:	48 8d 15 a0 50 0e 00 	lea	rdx, [rip + 938144]
 10103b8:	48 8d 04 02 	lea	rax, [rdx + rax]
 10103bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10103c0:	e8 5b 02 00 00 	call	603 <_runtime.(*mcentral).cacheSpan>
 10103c5:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10103ca:	48 85 c0 	test	rax, rax
 10103cd:	74 48 	je	72 <_runtime.(*mcache).refill+0xd7>
 10103cf:	0f b7 48 60 	movzx	ecx, word ptr [rax + 96]
 10103d3:	48 39 48 38 	cmp	qword ptr [rax + 56], rcx
 10103d7:	74 25 	je	37 <_runtime.(*mcache).refill+0xbe>
 10103d9:	8b 0d 01 4d 0e 00 	mov	ecx, dword ptr [rip + 937217]
 10103df:	83 c1 03 	add	ecx, 3
 10103e2:	89 48 58 	mov	dword ptr [rax + 88], ecx
 10103e5:	0f b6 4c 24 28 	movzx	ecx, byte ptr [rsp + 40]
 10103ea:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10103ef:	48 89 44 ca 28 	mov	qword ptr [rdx + 8*rcx + 40], rax
 10103f4:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10103f9:	48 83 c4 18 	add	rsp, 24
 10103fd:	c3 	ret
 10103fe:	48 8d 05 e3 42 06 00 	lea	rax, [rip + 410339]
 1010405:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010409:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1010412:	e8 49 89 01 00 	call	100681 <_runtime.throw>
 1010417:	48 8d 05 68 33 06 00 	lea	rax, [rip + 406376]
 101041e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010422:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 101042b:	e8 30 89 01 00 	call	100656 <_runtime.throw>
 1010430:	48 8d 05 0f 41 06 00 	lea	rax, [rip + 409871]
 1010437:	48 89 04 24 	mov	qword ptr [rsp], rax
 101043b:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1010444:	e8 17 89 01 00 	call	100631 <_runtime.throw>
 1010449:	48 8d 05 72 63 06 00 	lea	rax, [rip + 418674]
 1010450:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010454:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 101045d:	e8 fe 88 01 00 	call	100606 <_runtime.throw>
 1010462:	b9 86 00 00 00 	mov	ecx, 134
 1010467:	e8 e4 2e 04 00 	call	274148 <_runtime.panicIndex>
 101046c:	90 	nop
 101046d:	e8 5e 07 04 00 	call	264030 <_runtime.morestack_noctxt>
 1010472:	e9 c9 fe ff ff 	jmp	-311 <_runtime.(*mcache).refill>
 1010477:	cc 	int3
 1010478:	cc 	int3
 1010479:	cc 	int3
 101047a:	cc 	int3
 101047b:	cc 	int3
 101047c:	cc 	int3
 101047d:	cc 	int3
 101047e:	cc 	int3
 101047f:	cc 	int3

_runtime.(*mcache).releaseAll:
 1010480:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010489:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101048d:	0f 86 81 00 00 00 	jbe	129 <_runtime.(*mcache).releaseAll+0x94>
 1010493:	48 83 ec 20 	sub	rsp, 32
 1010497:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101049c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10104a1:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10104a6:	31 c9 	xor	ecx, ecx
 10104a8:	eb 03 	jmp	3 <_runtime.(*mcache).releaseAll+0x2d>
 10104aa:	48 ff c1 	inc	rcx
 10104ad:	48 81 f9 86 00 00 00 	cmp	rcx, 134
 10104b4:	7d 4d 	jge	77 <_runtime.(*mcache).releaseAll+0x83>
 10104b6:	84 00 	test	byte ptr [rax], al
 10104b8:	48 8b 54 c8 28 	mov	rdx, qword ptr [rax + 8*rcx + 40]
 10104bd:	48 8d 1d fc df 0b 00 	lea	rbx, [rip + 778236]
 10104c4:	48 39 da 	cmp	rdx, rbx
 10104c7:	74 e1 	je	-31 <_runtime.(*mcache).releaseAll+0x2a>
 10104c9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10104ce:	48 c1 e1 06 	shl	rcx, 6
 10104d2:	48 8d 1d 7f 4f 0e 00 	lea	rbx, [rip + 937855]
 10104d9:	48 8d 0c 0b 	lea	rcx, [rbx + rcx]
 10104dd:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10104e1:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10104e6:	e8 55 05 00 00 	call	1365 <_runtime.(*mcentral).uncacheSpan>
 10104eb:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10104f0:	48 8d 1d c9 df 0b 00 	lea	rbx, [rip + 778185]
 10104f7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10104fc:	48 89 5c c8 28 	mov	qword ptr [rax + 8*rcx + 40], rbx
 1010501:	eb a7 	jmp	-89 <_runtime.(*mcache).releaseAll+0x2a>
 1010503:	0f 57 c0 	xorps	xmm0, xmm0
 1010506:	0f 11 40 10 	movups	xmmword ptr [rax + 16], xmm0
 101050a:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101050f:	48 83 c4 20 	add	rsp, 32
 1010513:	c3 	ret
 1010514:	e8 b7 06 04 00 	call	263863 <_runtime.morestack_noctxt>
 1010519:	e9 62 ff ff ff 	jmp	-158 <_runtime.(*mcache).releaseAll>
 101051e:	cc 	int3
 101051f:	cc 	int3

_runtime.(*mcache).prepareForSweep:
 1010520:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010529:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101052d:	0f 86 e3 00 00 00 	jbe	227 <_runtime.(*mcache).prepareForSweep+0xf6>
 1010533:	48 83 ec 20 	sub	rsp, 32
 1010537:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101053c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1010541:	8b 05 99 4b 0e 00 	mov	eax, dword ptr [rip + 936857]
 1010547:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101054c:	8b 91 c0 06 00 00 	mov	edx, dword ptr [rcx + 1728]
 1010552:	39 c2 	cmp	edx, eax
 1010554:	74 39 	je	57 <_runtime.(*mcache).prepareForSweep+0x6f>
 1010556:	8d 58 fe 	lea	ebx, [rax - 2]
 1010559:	39 da 	cmp	edx, ebx
 101055b:	75 3c 	jne	60 <_runtime.(*mcache).prepareForSweep+0x79>
 101055d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010561:	e8 1a ff ff ff 	call	-230 <_runtime.(*mcache).releaseAll>
 1010566:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101056b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101056f:	e8 8c d3 02 00 	call	185228 <_runtime.stackcache_clear>
 1010574:	8b 05 66 4b 0e 00 	mov	eax, dword ptr [rip + 936806]
 101057a:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101057f:	87 81 c0 06 00 00 	xchg	dword ptr [rcx + 1728], eax
 1010585:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101058a:	48 83 c4 20 	add	rsp, 32
 101058e:	c3 	ret
 101058f:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1010594:	48 83 c4 20 	add	rsp, 32
 1010598:	c3 	ret
 1010599:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 101059d:	89 54 24 14 	mov	dword ptr [rsp + 20], edx
 10105a1:	e8 fa 9e 01 00 	call	106234 <_runtime.printlock>
 10105a6:	48 8d 05 7e 31 06 00 	lea	rax, [rip + 405886]
 10105ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 10105b1:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10105ba:	e8 21 a8 01 00 	call	108577 <_runtime.printstring>
 10105bf:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 10105c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10105c7:	e8 54 a5 01 00 	call	107860 <_runtime.printuint>
 10105cc:	48 8d 05 e2 50 06 00 	lea	rax, [rip + 413922]
 10105d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10105d7:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 10105e0:	e8 fb a7 01 00 	call	108539 <_runtime.printstring>
 10105e5:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10105e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10105ed:	e8 2e a5 01 00 	call	107822 <_runtime.printuint>
 10105f2:	e8 39 a1 01 00 	call	106809 <_runtime.printnl>
 10105f7:	e8 24 9f 01 00 	call	106276 <_runtime.printunlock>
 10105fc:	48 8d 05 64 2f 06 00 	lea	rax, [rip + 405348]
 1010603:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010607:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1010610:	e8 4b 87 01 00 	call	100171 <_runtime.throw>
 1010615:	90 	nop
 1010616:	e8 b5 05 04 00 	call	263605 <_runtime.morestack_noctxt>
 101061b:	e9 00 ff ff ff 	jmp	-256 <_runtime.(*mcache).prepareForSweep>

_runtime.(*mcentral).cacheSpan:
 1010620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101062d:	0f 86 f4 03 00 00 	jbe	1012 <_runtime.(*mcentral).cacheSpan+0x407>
 1010633:	48 83 ec 40 	sub	rsp, 64
 1010637:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 101063c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1010641:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1010646:	0f b6 5a 08 	movzx	ebx, byte ptr [rdx + 8]
 101064a:	d0 eb 	shr	bl
 101064c:	48 0f be c3 	movsx	rax, bl
 1010650:	48 83 f8 43 	cmp	rax, 67
 1010654:	0f 83 c2 03 00 00 	jae	962 <_runtime.(*mcentral).cacheSpan+0x3fc>
 101065a:	48 8d 0d 3f ad 0b 00 	lea	rcx, [rip + 765247]
 1010661:	0f b6 04 01 	movzx	eax, byte ptr [rcx + rax]
 1010665:	48 c1 e0 0d 	shl	rax, 13
 1010669:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101066e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010672:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 101067b:	e8 50 b3 00 00 	call	45904 <_runtime.deductSweepCredit>
 1010680:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1010685:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010689:	e8 a2 7a ff ff 	call	-34142 <_runtime.lock>
 101068e:	80 3d 9b 48 0c 00 00 	cmp	byte ptr [rip + 805019], 0
 1010695:	0f 85 5e 03 00 00 	jne	862 <_runtime.(*mcentral).cacheSpan+0x3d9>
 101069b:	8b 0d 3f 4a 0e 00 	mov	ecx, dword ptr [rip + 936511]
 10106a1:	89 4c 24 1c 	mov	dword ptr [rsp + 28], ecx
 10106a5:	e9 2f 03 00 00 	jmp	815 <_runtime.(*mcentral).cacheSpan+0x3b9>
 10106aa:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 10106ad:	48 85 db 	test	rbx, rbx
 10106b0:	0f 84 c5 01 00 00 	je	453 <_runtime.(*mcentral).cacheSpan+0x25b>
 10106b6:	8d 41 fe 	lea	eax, [rcx - 2]
 10106b9:	39 43 58 	cmp	dword ptr [rbx + 88], eax
 10106bc:	0f 85 b2 01 00 00 	jne	434 <_runtime.(*mcentral).cacheSpan+0x254>
 10106c2:	8d 71 ff 	lea	esi, [rcx - 1]
 10106c5:	f0 	lock
 10106c6:	0f b1 73 58 	cmpxchg	dword ptr [rbx + 88], esi
 10106ca:	40 0f 94 c6 	sete	sil
 10106ce:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 10106d3:	40 84 f6 	test	sil, sil
 10106d6:	0f 85 3d 01 00 00 	jne	317 <_runtime.(*mcentral).cacheSpan+0x1f9>
 10106dc:	8d 71 ff 	lea	esi, [rcx - 1]
 10106df:	39 73 58 	cmp	dword ptr [rbx + 88], esi
 10106e2:	74 c6 	je	-58 <_runtime.(*mcentral).cacheSpan+0x8a>
 10106e4:	48 8d 42 10 	lea	rax, [rdx + 16]
 10106e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10106ec:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10106f1:	e8 5a e4 00 00 	call	58458 <_runtime.(*mSpanList).remove>
 10106f6:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10106fb:	48 8d 48 20 	lea	rcx, [rax + 32]
 10106ff:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010703:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010708:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101070d:	e8 ee e6 00 00 	call	59118 <_runtime.(*mSpanList).insertBack>
 1010712:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1010717:	48 89 04 24 	mov	qword ptr [rsp], rax
 101071b:	e8 f0 7b ff ff 	call	-33808 <_runtime.unlock>
 1010720:	31 c0 	xor	eax, eax
 1010722:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010727:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 101072c:	80 3d fd 47 0c 00 00 	cmp	byte ptr [rip + 804861], 0
 1010733:	74 08 	je	8 <_runtime.(*mcentral).cacheSpan+0x11d>
 1010735:	84 c0 	test	al, al
 1010737:	0f 84 cd 00 00 00 	je	205 <_runtime.(*mcentral).cacheSpan+0x1ea>
 101073d:	48 8b 41 38 	mov	rax, qword ptr [rcx + 56]
 1010741:	0f b7 51 60 	movzx	edx, word ptr [rcx + 96]
 1010745:	48 89 c3 	mov	rbx, rax
 1010748:	48 29 d0 	sub	rax, rdx
 101074b:	48 85 c0 	test	rax, rax
 101074e:	0f 84 af 02 00 00 	je	687 <_runtime.(*mcentral).cacheSpan+0x3e3>
 1010754:	48 39 59 30 	cmp	qword ptr [rcx + 48], rbx
 1010758:	0f 84 a5 02 00 00 	je	677 <_runtime.(*mcentral).cacheSpan+0x3e3>
 101075e:	48 39 d3 	cmp	rbx, rdx
 1010761:	0f 84 9c 02 00 00 	je	668 <_runtime.(*mcentral).cacheSpan+0x3e3>
 1010767:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 101076c:	f0 	lock
 101076d:	48 0f c1 42 30 	xadd	qword ptr [rdx + 48], rax
 1010772:	0f b7 41 60 	movzx	eax, word ptr [rcx + 96]
 1010776:	48 8b 51 68 	mov	rdx, qword ptr [rcx + 104]
 101077a:	48 0f af c2 	imul	rax, rdx
 101077e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1010783:	48 29 c2 	sub	rdx, rax
 1010786:	48 8d 05 e3 95 0e 00 	lea	rax, [rip + 955875]
 101078d:	f0 	lock
 101078e:	48 0f c1 10 	xadd	qword ptr [rax], rdx
 1010792:	80 3d 97 47 0c 00 00 	cmp	byte ptr [rip + 804759], 0
 1010799:	75 63 	jne	99 <_runtime.(*mcentral).cacheSpan+0x1de>
 101079b:	83 3d ee 6f 0e 00 00 	cmp	dword ptr [rip + 946158], 0
 10107a2:	75 43 	jne	67 <_runtime.(*mcentral).cacheSpan+0x1c7>
 10107a4:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 10107a8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10107ac:	48 83 e0 c0 	and	rax, -64
 10107b0:	48 c1 e8 03 	shr	rax, 3
 10107b4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10107b9:	e8 82 cc ff ff 	call	-13182 <_runtime.(*mspan).refillAllocCache>
 10107be:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10107c3:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 10107c7:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 10107cb:	48 89 cb 	mov	rbx, rcx
 10107ce:	48 89 d1 	mov	rcx, rdx
 10107d1:	48 d3 eb 	shr	rbx, cl
 10107d4:	48 89 58 40 	mov	qword ptr [rax + 64], rbx
 10107d8:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 10107dd:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10107e2:	48 83 c4 40 	add	rsp, 64
 10107e6:	c3 	ret
 10107e7:	48 8d 05 92 75 0e 00 	lea	rax, [rip + 947602]
 10107ee:	48 89 04 24 	mov	qword ptr [rsp], rax
 10107f2:	e8 89 12 00 00 	call	4745 <_runtime.(*gcControllerState).revise>
 10107f7:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10107fc:	eb a6 	jmp	-90 <_runtime.(*mcentral).cacheSpan+0x184>
 10107fe:	e8 1d 69 03 00 	call	223517 <_runtime.traceHeapAlloc>
 1010803:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010808:	eb 91 	jmp	-111 <_runtime.(*mcentral).cacheSpan+0x17b>
 101080a:	e8 f1 61 03 00 	call	221681 <_runtime.traceGCSweepDone>
 101080f:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010814:	e9 24 ff ff ff 	jmp	-220 <_runtime.(*mcentral).cacheSpan+0x11d>
 1010819:	48 8d 42 10 	lea	rax, [rdx + 16]
 101081d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010821:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1010826:	e8 25 e3 00 00 	call	58149 <_runtime.(*mSpanList).remove>
 101082b:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1010830:	48 8d 48 20 	lea	rcx, [rax + 32]
 1010834:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010838:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101083d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010842:	e8 b9 e5 00 00 	call	58809 <_runtime.(*mSpanList).insertBack>
 1010847:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101084c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010850:	e8 bb 7a ff ff 	call	-34117 <_runtime.unlock>
 1010855:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101085a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101085e:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 1010863:	e8 d8 a7 00 00 	call	42968 <_runtime.(*mspan).sweep>
 1010868:	31 c0 	xor	eax, eax
 101086a:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101086f:	e9 b3 fe ff ff 	jmp	-333 <_runtime.(*mcentral).cacheSpan+0x107>
 1010874:	31 f6 	xor	esi, esi
 1010876:	e9 53 fe ff ff 	jmp	-429 <_runtime.(*mcentral).cacheSpan+0xae>
 101087b:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 101087f:	eb 03 	jmp	3 <_runtime.(*mcentral).cacheSpan+0x264>
 1010881:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 1010884:	48 85 db 	test	rbx, rbx
 1010887:	74 29 	je	41 <_runtime.(*mcentral).cacheSpan+0x292>
 1010889:	8d 41 fe 	lea	eax, [rcx - 2]
 101088c:	39 43 58 	cmp	dword ptr [rbx + 88], eax
 101088f:	0f 85 5d 01 00 00 	jne	349 <_runtime.(*mcentral).cacheSpan+0x3d2>
 1010895:	8d 71 ff 	lea	esi, [rcx - 1]
 1010898:	f0 	lock
 1010899:	0f b1 73 58 	cmpxchg	dword ptr [rbx + 88], esi
 101089d:	40 0f 94 c6 	sete	sil
 10108a1:	40 84 f6 	test	sil, sil
 10108a4:	0f 85 aa 00 00 00 	jne	170 <_runtime.(*mcentral).cacheSpan+0x334>
 10108aa:	8d 71 ff 	lea	esi, [rcx - 1]
 10108ad:	39 73 58 	cmp	dword ptr [rbx + 88], esi
 10108b0:	74 cf 	je	-49 <_runtime.(*mcentral).cacheSpan+0x261>
 10108b2:	0f b6 05 77 46 0c 00 	movzx	eax, byte ptr [rip + 804471]
 10108b9:	88 44 24 1b 	mov	byte ptr [rsp + 27], al
 10108bd:	84 c0 	test	al, al
 10108bf:	0f 85 80 00 00 00 	jne	128 <_runtime.(*mcentral).cacheSpan+0x325>
 10108c5:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10108c9:	e8 42 7a ff ff 	call	-34238 <_runtime.unlock>
 10108ce:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10108d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10108d7:	e8 54 04 00 00 	call	1108 <_runtime.(*mcentral).grow>
 10108dc:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10108e1:	48 85 c0 	test	rax, rax
 10108e4:	74 4c 	je	76 <_runtime.(*mcentral).cacheSpan+0x312>
 10108e6:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10108eb:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10108f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10108f4:	e8 37 78 ff ff 	call	-34761 <_runtime.lock>
 10108f9:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10108fe:	48 8d 48 20 	lea	rcx, [rax + 32]
 1010902:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010906:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101090b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010910:	e8 eb e4 00 00 	call	58603 <_runtime.(*mSpanList).insertBack>
 1010915:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101091a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101091e:	e8 ed 79 ff ff 	call	-34323 <_runtime.unlock>
 1010923:	0f b6 44 24 1b 	movzx	eax, byte ptr [rsp + 27]
 1010928:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101092d:	e9 f5 fd ff ff 	jmp	-523 <_runtime.(*mcentral).cacheSpan+0x107>
 1010932:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 101093b:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1010940:	48 83 c4 40 	add	rsp, 64
 1010944:	c3 	ret
 1010945:	e8 b6 60 03 00 	call	221366 <_runtime.traceGCSweepDone>
 101094a:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 101094f:	e9 71 ff ff ff 	jmp	-143 <_runtime.(*mcentral).cacheSpan+0x2a5>
 1010954:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1010959:	48 8d 42 20 	lea	rax, [rdx + 32]
 101095d:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1010962:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010966:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101096b:	e8 e0 e1 00 00 	call	57824 <_runtime.(*mSpanList).remove>
 1010970:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1010975:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010979:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101097e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010983:	e8 78 e4 00 00 	call	58488 <_runtime.(*mSpanList).insertBack>
 1010988:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101098d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010991:	e8 7a 79 ff ff 	call	-34438 <_runtime.unlock>
 1010996:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101099b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101099f:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 10109a4:	e8 97 a6 00 00 	call	42647 <_runtime.(*mspan).sweep>
 10109a9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10109ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10109b2:	e8 a9 ca ff ff 	call	-13655 <_runtime.(*mspan).nextFreeIndex>
 10109b7:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10109bc:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10109c1:	48 39 41 38 	cmp	qword ptr [rcx + 56], rax
 10109c5:	75 20 	jne	32 <_runtime.(*mcentral).cacheSpan+0x3c7>
 10109c7:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10109cc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10109d0:	e8 5b 77 ff ff 	call	-34981 <_runtime.lock>
 10109d5:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 10109d9:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 10109de:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 10109e2:	e9 c6 fc ff ff 	jmp	-826 <_runtime.(*mcentral).cacheSpan+0x8d>
 10109e7:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 10109eb:	31 c0 	xor	eax, eax
 10109ed:	e9 35 fd ff ff 	jmp	-715 <_runtime.(*mcentral).cacheSpan+0x107>
 10109f2:	31 f6 	xor	esi, esi
 10109f4:	e9 a8 fe ff ff 	jmp	-344 <_runtime.(*mcentral).cacheSpan+0x281>
 10109f9:	e8 e2 5e 03 00 	call	220898 <_runtime.traceGCSweepStart>
 10109fe:	e9 98 fc ff ff 	jmp	-872 <_runtime.(*mcentral).cacheSpan+0x7b>
 1010a03:	48 8d 05 7b 41 06 00 	lea	rax, [rip + 409979]
 1010a0a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010a0e:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1010a17:	e8 44 83 01 00 	call	99140 <_runtime.throw>
 1010a1c:	b9 43 00 00 00 	mov	ecx, 67
 1010a21:	e8 2a 29 04 00 	call	272682 <_runtime.panicIndex>
 1010a26:	90 	nop
 1010a27:	e8 a4 01 04 00 	call	262564 <_runtime.morestack_noctxt>
 1010a2c:	e9 ef fb ff ff 	jmp	-1041 <_runtime.(*mcentral).cacheSpan>
 1010a31:	cc 	int3
 1010a32:	cc 	int3
 1010a33:	cc 	int3
 1010a34:	cc 	int3
 1010a35:	cc 	int3
 1010a36:	cc 	int3
 1010a37:	cc 	int3
 1010a38:	cc 	int3
 1010a39:	cc 	int3
 1010a3a:	cc 	int3
 1010a3b:	cc 	int3
 1010a3c:	cc 	int3
 1010a3d:	cc 	int3
 1010a3e:	cc 	int3
 1010a3f:	cc 	int3

_runtime.(*mcentral).uncacheSpan:
 1010a40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010a49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1010a4d:	0f 86 34 01 00 00 	jbe	308 <_runtime.(*mcentral).uncacheSpan+0x147>
 1010a53:	48 83 ec 30 	sub	rsp, 48
 1010a57:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1010a5c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1010a61:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1010a66:	66 83 78 60 00 	cmp	word ptr [rax + 96], 0
 1010a6b:	0f 84 fc 00 00 00 	je	252 <_runtime.(*mcentral).uncacheSpan+0x12d>
 1010a71:	8b 0d 69 46 0e 00 	mov	ecx, dword ptr [rip + 935529]
 1010a77:	8d 51 01 	lea	edx, [rcx + 1]
 1010a7a:	8b 58 58 	mov	ebx, dword ptr [rax + 88]
 1010a7d:	39 d3 	cmp	ebx, edx
 1010a7f:	0f 85 e0 00 00 00 	jne	224 <_runtime.(*mcentral).uncacheSpan+0x125>
 1010a85:	ff c9 	dec	ecx
 1010a87:	87 48 58 	xchg	dword ptr [rax + 88], ecx
 1010a8a:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 1010a8e:	0f b7 70 60 	movzx	esi, word ptr [rax + 96]
 1010a92:	48 89 cf 	mov	rdi, rcx
 1010a95:	48 29 f1 	sub	rcx, rsi
 1010a98:	48 85 c9 	test	rcx, rcx
 1010a9b:	7f 1e 	jg	30 <_runtime.(*mcentral).uncacheSpan+0x7b>
 1010a9d:	39 d3 	cmp	ebx, edx
 1010a9f:	74 0a 	je	10 <_runtime.(*mcentral).uncacheSpan+0x6b>
 1010aa1:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1010aa6:	48 83 c4 30 	add	rsp, 48
 1010aaa:	c3 	ret
 1010aab:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010aaf:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1010ab4:	e8 87 a5 00 00 	call	42375 <_runtime.(*mspan).sweep>
 1010ab9:	eb e6 	jmp	-26 <_runtime.(*mcentral).uncacheSpan+0x61>
 1010abb:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 1010abf:	89 5c 24 18 	mov	dword ptr [rsp + 24], ebx
 1010ac3:	48 29 fe 	sub	rsi, rdi
 1010ac6:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 1010acb:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1010ad0:	f0 	lock
 1010ad1:	48 0f c1 70 30 	xadd	qword ptr [rax + 48], rsi
 1010ad6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010ada:	e8 51 76 ff ff 	call	-35247 <_runtime.lock>
 1010adf:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1010ae4:	48 8d 48 20 	lea	rcx, [rax + 32]
 1010ae8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010aec:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1010af1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010af6:	e8 55 e0 00 00 	call	57429 <_runtime.(*mSpanList).remove>
 1010afb:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1010b00:	48 8d 48 10 	lea	rcx, [rax + 16]
 1010b04:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010b08:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1010b0d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010b12:	e8 c9 e1 00 00 	call	57801 <_runtime.(*mSpanList).insert>
 1010b17:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1010b1b:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 1010b1f:	39 c8 	cmp	eax, ecx
 1010b21:	75 22 	jne	34 <_runtime.(*mcentral).uncacheSpan+0x105>
 1010b23:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1010b28:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010b2c:	e8 df 77 ff ff 	call	-34849 <_runtime.unlock>
 1010b31:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1010b35:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 1010b39:	39 c8 	cmp	eax, ecx
 1010b3b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1010b40:	e9 5a ff ff ff 	jmp	-166 <_runtime.(*mcentral).uncacheSpan+0x5f>
 1010b45:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1010b4a:	48 8b 5a 68 	mov	rbx, qword ptr [rdx + 104]
 1010b4e:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1010b53:	48 0f af f3 	imul	rsi, rbx
 1010b57:	48 8d 1d 12 92 0e 00 	lea	rbx, [rip + 954898]
 1010b5e:	f0 	lock
 1010b5f:	48 0f c1 33 	xadd	qword ptr [rbx], rsi
 1010b63:	eb be 	jmp	-66 <_runtime.(*mcentral).uncacheSpan+0xe3>
 1010b65:	87 48 58 	xchg	dword ptr [rax + 88], ecx
 1010b68:	e9 1d ff ff ff 	jmp	-227 <_runtime.(*mcentral).uncacheSpan+0x4a>
 1010b6d:	48 8d 05 72 58 06 00 	lea	rax, [rip + 415858]
 1010b74:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010b78:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 1010b81:	e8 da 81 01 00 	call	98778 <_runtime.throw>
 1010b86:	90 	nop
 1010b87:	e8 44 00 04 00 	call	262212 <_runtime.morestack_noctxt>
 1010b8c:	e9 af fe ff ff 	jmp	-337 <_runtime.(*mcentral).uncacheSpan>
 1010b91:	cc 	int3
 1010b92:	cc 	int3
 1010b93:	cc 	int3
 1010b94:	cc 	int3
 1010b95:	cc 	int3
 1010b96:	cc 	int3
 1010b97:	cc 	int3
 1010b98:	cc 	int3
 1010b99:	cc 	int3
 1010b9a:	cc 	int3
 1010b9b:	cc 	int3
 1010b9c:	cc 	int3
 1010b9d:	cc 	int3
 1010b9e:	cc 	int3
 1010b9f:	cc 	int3

_runtime.(*mcentral).freeSpan:
 1010ba0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010ba9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1010bad:	0f 86 6f 01 00 00 	jbe	367 <_runtime.(*mcentral).freeSpan+0x182>
 1010bb3:	48 83 ec 18 	sub	rsp, 24
 1010bb7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1010bbc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1010bc1:	8b 05 19 45 0e 00 	mov	eax, dword ptr [rip + 935193]
 1010bc7:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010bcc:	8b 51 58 	mov	edx, dword ptr [rcx + 88]
 1010bcf:	8d 58 01 	lea	ebx, [rax + 1]
 1010bd2:	39 d3 	cmp	ebx, edx
 1010bd4:	0f 84 2e 01 00 00 	je	302 <_runtime.(*mcentral).freeSpan+0x168>
 1010bda:	83 c0 03 	add	eax, 3
 1010bdd:	39 d0 	cmp	eax, edx
 1010bdf:	0f 84 23 01 00 00 	je	291 <_runtime.(*mcentral).freeSpan+0x168>
 1010be5:	c6 41 64 01 	mov	byte ptr [rcx + 100], 1
 1010be9:	0f b6 44 24 30 	movzx	eax, byte ptr [rsp + 48]
 1010bee:	84 c0 	test	al, al
 1010bf0:	74 23 	je	35 <_runtime.(*mcentral).freeSpan+0x75>
 1010bf2:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 1010bf7:	0f 84 f2 00 00 00 	je	242 <_runtime.(*mcentral).freeSpan+0x14f>
 1010bfd:	8b 05 dd 44 0e 00 	mov	eax, dword ptr [rip + 935133]
 1010c03:	87 41 58 	xchg	dword ptr [rcx + 88], eax
 1010c06:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1010c0b:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1010c10:	48 83 c4 18 	add	rsp, 24
 1010c14:	c3 	ret
 1010c15:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010c1a:	84 00 	test	byte ptr [rax], al
 1010c1c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010c20:	e8 0b 75 ff ff 	call	-35573 <_runtime.lock>
 1010c25:	0f b6 44 24 31 	movzx	eax, byte ptr [rsp + 49]
 1010c2a:	84 c0 	test	al, al
 1010c2c:	0f 85 80 00 00 00 	jne	128 <_runtime.(*mcentral).freeSpan+0x112>
 1010c32:	8b 05 a8 44 0e 00 	mov	eax, dword ptr [rip + 935080]
 1010c38:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010c3d:	87 41 58 	xchg	dword ptr [rcx + 88], eax
 1010c40:	66 83 79 60 00 	cmp	word ptr [rcx + 96], 0
 1010c45:	74 1d 	je	29 <_runtime.(*mcentral).freeSpan+0xc4>
 1010c47:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010c4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010c50:	e8 bb 76 ff ff 	call	-35141 <_runtime.unlock>
 1010c55:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1010c5a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1010c5f:	48 83 c4 18 	add	rsp, 24
 1010c63:	c3 	ret
 1010c64:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010c69:	48 8d 50 10 	lea	rdx, [rax + 16]
 1010c6d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1010c71:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010c76:	e8 d5 de 00 00 	call	57045 <_runtime.(*mSpanList).remove>
 1010c7b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010c80:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010c84:	e8 87 76 ff ff 	call	-35193 <_runtime.unlock>
 1010c89:	48 8d 05 70 43 0d 00 	lea	rax, [rip + 869232]
 1010c90:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010c94:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1010c99:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010c9e:	e8 0d da 00 00 	call	55821 <_runtime.(*mheap).freeSpan>
 1010ca3:	c6 44 24 38 01 	mov	byte ptr [rsp + 56], 1
 1010ca8:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1010cad:	48 83 c4 18 	add	rsp, 24
 1010cb1:	c3 	ret
 1010cb2:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010cb7:	48 8d 48 20 	lea	rcx, [rax + 32]
 1010cbb:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010cbf:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010cc4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010cc9:	e8 82 de 00 00 	call	56962 <_runtime.(*mSpanList).remove>
 1010cce:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010cd3:	48 8d 48 10 	lea	rcx, [rax + 16]
 1010cd7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1010cdb:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1010ce0:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010ce5:	e8 f6 df 00 00 	call	57334 <_runtime.(*mSpanList).insert>
 1010cea:	e9 43 ff ff ff 	jmp	-189 <_runtime.(*mcentral).freeSpan+0x92>
 1010cef:	48 8d 05 9f 45 06 00 	lea	rax, [rip + 411039]
 1010cf6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010cfa:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1010d03:	e8 58 80 01 00 	call	98392 <_runtime.throw>
 1010d08:	48 8d 05 1c 41 06 00 	lea	rax, [rip + 409884]
 1010d0f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010d13:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 1010d1c:	e8 3f 80 01 00 	call	98367 <_runtime.throw>
 1010d21:	90 	nop
 1010d22:	e8 a9 fe 03 00 	call	261801 <_runtime.morestack_noctxt>
 1010d27:	e9 74 fe ff ff 	jmp	-396 <_runtime.(*mcentral).freeSpan>
 1010d2c:	cc 	int3
 1010d2d:	cc 	int3
 1010d2e:	cc 	int3
 1010d2f:	cc 	int3

_runtime.(*mcentral).grow:
 1010d30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010d39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1010d3d:	0f 86 72 01 00 00 	jbe	370 <_runtime.(*mcentral).grow+0x185>
 1010d43:	48 83 ec 38 	sub	rsp, 56
 1010d47:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1010d4c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1010d51:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1010d56:	0f b6 52 08 	movzx	edx, byte ptr [rdx + 8]
 1010d5a:	89 d3 	mov	ebx, edx
 1010d5c:	d0 ea 	shr	dl
 1010d5e:	48 0f be c2 	movsx	rax, dl
 1010d62:	48 83 f8 43 	cmp	rax, 67
 1010d66:	0f 83 3e 01 00 00 	jae	318 <_runtime.(*mcentral).grow+0x17a>
 1010d6c:	48 8d 0d 2d a6 0b 00 	lea	rcx, [rip + 763437]
 1010d73:	0f b6 0c 01 	movzx	ecx, byte ptr [rcx + rax]
 1010d77:	88 4c 24 25 	mov	byte ptr [rsp + 37], cl
 1010d7b:	48 8d 15 7e a7 0b 00 	lea	rdx, [rip + 763774]
 1010d82:	0f b7 04 42 	movzx	eax, word ptr [rdx + 2*rax]
 1010d86:	66 89 44 24 26 	mov	word ptr [rsp + 38], ax
 1010d8b:	48 8d 15 6e 42 0d 00 	lea	rdx, [rip + 868974]
 1010d92:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1010d96:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010d9b:	88 5c 24 10 	mov	byte ptr [rsp + 16], bl
 1010d9f:	c6 44 24 11 01 	mov	byte ptr [rsp + 17], 1
 1010da4:	e8 77 c9 00 00 	call	51575 <_runtime.(*mheap).alloc>
 1010da9:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1010dae:	48 85 c0 	test	rax, rax
 1010db1:	0f 84 d3 00 00 00 	je	211 <_runtime.(*mcentral).grow+0x15a>
 1010db7:	0f b6 48 65 	movzx	ecx, byte ptr [rax + 101]
 1010dbb:	80 f9 40 	cmp	cl, 64
 1010dbe:	48 19 d2 	sbb	rdx, rdx
 1010dc1:	0f b6 58 66 	movzx	ebx, byte ptr [rax + 102]
 1010dc5:	80 fb 40 	cmp	bl, 64
 1010dc8:	48 19 f6 	sbb	rsi, rsi
 1010dcb:	0f b6 7c 24 25 	movzx	edi, byte ptr [rsp + 37]
 1010dd0:	48 c1 e7 0d 	shl	rdi, 13
 1010dd4:	48 d3 ef 	shr	rdi, cl
 1010dd7:	48 21 d7 	and	rdi, rdx
 1010dda:	0f b7 50 5c 	movzx	edx, word ptr [rax + 92]
 1010dde:	48 0f af d7 	imul	rdx, rdi
 1010de2:	89 d9 	mov	ecx, ebx
 1010de4:	48 d3 ea 	shr	rdx, cl
 1010de7:	48 21 f2 	and	rdx, rsi
 1010dea:	0f b7 5c 24 26 	movzx	ebx, word ptr [rsp + 38]
 1010def:	48 0f af da 	imul	rbx, rdx
 1010df3:	48 03 58 18 	add	rbx, qword ptr [rax + 24]
 1010df7:	48 89 58 70 	mov	qword ptr [rax + 112], rbx
 1010dfb:	48 8b 15 ce 45 0e 00 	mov	rdx, qword ptr [rip + 935374]
 1010e02:	84 02 	test	byte ptr [rdx], al
 1010e04:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 1010e08:	90 	nop
 1010e09:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 1010e13:	48 01 de 	add	rsi, rbx
 1010e16:	48 c1 ee 1a 	shr	rsi, 26
 1010e1a:	48 81 fe 00 00 40 00 	cmp	rsi, 4194304
 1010e21:	73 7a 	jae	122 <_runtime.(*mcentral).grow+0x16d>
 1010e23:	48 8b 0c f2 	mov	rcx, qword ptr [rdx + 8*rsi]
 1010e27:	48 85 c9 	test	rcx, rcx
 1010e2a:	74 54 	je	84 <_runtime.(*mcentral).grow+0x150>
 1010e2c:	48 89 da 	mov	rdx, rbx
 1010e2f:	48 c1 eb 05 	shr	rbx, 5
 1010e33:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 1010e3a:	48 01 cb 	add	rbx, rcx
 1010e3d:	48 c1 ea 03 	shr	rdx, 3
 1010e41:	48 83 e2 03 	and	rdx, 3
 1010e45:	48 81 c1 ff ff 1f 00 	add	rcx, 2097151
 1010e4c:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1010e51:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1010e55:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 1010e59:	89 74 24 0c 	mov	dword ptr [rsp + 12], esi
 1010e5d:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1010e62:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1010e67:	e8 94 d9 ff ff 	call	-9836 <_runtime.heapBits.initSpan>
 1010e6c:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1010e71:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1010e76:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1010e7b:	48 83 c4 38 	add	rsp, 56
 1010e7f:	c3 	ret
 1010e80:	31 c9 	xor	ecx, ecx
 1010e82:	31 f6 	xor	esi, esi
 1010e84:	31 d2 	xor	edx, edx
 1010e86:	31 db 	xor	ebx, ebx
 1010e88:	eb c2 	jmp	-62 <_runtime.(*mcentral).grow+0x11c>
 1010e8a:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1010e93:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1010e98:	48 83 c4 38 	add	rsp, 56
 1010e9c:	c3 	ret
 1010e9d:	48 89 f0 	mov	rax, rsi
 1010ea0:	b9 00 00 40 00 	mov	ecx, 4194304
 1010ea5:	e8 b6 24 04 00 	call	271542 <_runtime.panicIndexU>
 1010eaa:	b9 43 00 00 00 	mov	ecx, 67
 1010eaf:	e8 9c 24 04 00 	call	271516 <_runtime.panicIndex>
 1010eb4:	90 	nop
 1010eb5:	e8 16 fd 03 00 	call	261398 <_runtime.morestack_noctxt>
 1010eba:	e9 71 fe ff ff 	jmp	-399 <_runtime.(*mcentral).grow>
 1010ebf:	cc 	int3

_runtime.sysAlloc:
 1010ec0:	48 83 ec 40 	sub	rsp, 64
 1010ec4:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1010ec9:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1010ece:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1010ed6:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1010edb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010ee0:	48 b9 03 00 00 00 02 10 00 00 	movabs	rcx, 17600775979011
 1010eea:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1010eef:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1010ef4:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1010ef9:	e8 32 20 03 00 	call	204850 <_runtime.mmap>
 1010efe:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010f03:	48 83 7c 24 28 00 	cmp	qword ptr [rsp + 40], 0
 1010f09:	74 13 	je	19 <_runtime.sysAlloc+0x5e>
 1010f0b:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 1010f14:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1010f19:	48 83 c4 40 	add	rsp, 64
 1010f1d:	c3 	ret
 1010f1e:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1010f23:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1010f28:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010f2c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1010f31:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010f36:	e8 25 42 01 00 	call	82469 <_runtime.mSysStatInc>
 1010f3b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1010f40:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1010f45:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1010f4a:	48 83 c4 40 	add	rsp, 64
 1010f4e:	c3 	ret
 1010f4f:	cc 	int3

_runtime.sysFree:
 1010f50:	48 83 ec 18 	sub	rsp, 24
 1010f54:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1010f59:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1010f5e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1010f63:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010f67:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1010f6c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010f71:	e8 aa 42 01 00 	call	82602 <_runtime.mSysStatDec>
 1010f76:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1010f7b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010f7f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1010f84:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010f89:	e8 72 20 03 00 	call	204914 <_runtime.munmap>
 1010f8e:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1010f93:	48 83 c4 18 	add	rsp, 24
 1010f97:	c3 	ret
 1010f98:	cc 	int3
 1010f99:	cc 	int3
 1010f9a:	cc 	int3
 1010f9b:	cc 	int3
 1010f9c:	cc 	int3
 1010f9d:	cc 	int3
 1010f9e:	cc 	int3
 1010f9f:	cc 	int3

_runtime.sysMap:
 1010fa0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1010fa9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1010fad:	0f 86 b3 00 00 00 	jbe	179 <_runtime.sysMap+0xc6>
 1010fb3:	48 83 ec 38 	sub	rsp, 56
 1010fb7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1010fbc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1010fc1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1010fc6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010fca:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1010fcf:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1010fd4:	e8 87 41 01 00 	call	82311 <_runtime.mSysStatInc>
 1010fd9:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1010fde:	48 89 04 24 	mov	qword ptr [rsp], rax
 1010fe2:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1010fe7:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1010fec:	48 b9 03 00 00 00 12 10 00 00 	movabs	rcx, 17669495455747
 1010ff6:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1010ffb:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1011000:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1011005:	e8 26 1f 03 00 	call	204582 <_runtime.mmap>
 101100a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101100f:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1011014:	48 83 f9 0c 	cmp	rcx, 12
 1011018:	74 32 	je	50 <_runtime.sysMap+0xac>
 101101a:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101101f:	48 39 d0 	cmp	rax, rdx
 1011022:	75 0f 	jne	15 <_runtime.sysMap+0x93>
 1011024:	48 85 c9 	test	rcx, rcx
 1011027:	75 0a 	jne	10 <_runtime.sysMap+0x93>
 1011029:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 101102e:	48 83 c4 38 	add	rsp, 56
 1011032:	c3 	ret
 1011033:	48 8d 05 52 5f 06 00 	lea	rax, [rip + 417618]
 101103a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101103e:	48 c7 44 24 08 30 00 00 00 	mov	qword ptr [rsp + 8], 48
 1011047:	e8 14 7d 01 00 	call	97556 <_runtime.throw>
 101104c:	48 8d 05 11 36 06 00 	lea	rax, [rip + 407057]
 1011053:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011057:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1011060:	e8 fb 7c 01 00 	call	97531 <_runtime.throw>
 1011065:	90 	nop
 1011066:	e8 65 fb 03 00 	call	260965 <_runtime.morestack_noctxt>
 101106b:	e9 30 ff ff ff 	jmp	-208 <_runtime.sysMap>

_runtime.queuefinalizer:
 1011070:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1011079:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101107d:	0f 86 2d 02 00 00 	jbe	557 <_runtime.queuefinalizer+0x240>
 1011083:	48 83 ec 28 	sub	rsp, 40
 1011087:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101108c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1011091:	83 3d 04 67 0e 00 00 	cmp	dword ptr [rip + 943876], 0
 1011098:	0f 85 f8 01 00 00 	jne	504 <_runtime.queuefinalizer+0x226>
 101109e:	48 8d 05 9b 67 0e 00 	lea	rax, [rip + 944027]
 10110a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10110a9:	e8 82 70 ff ff 	call	-36734 <_runtime.lock>
 10110ae:	48 8b 05 93 d1 0b 00 	mov	rax, qword ptr [rip + 774547]
 10110b5:	48 85 c0 	test	rax, rax
 10110b8:	74 0a 	je	10 <_runtime.queuefinalizer+0x54>
 10110ba:	83 78 10 65 	cmp	dword ptr [rax + 16], 101
 10110be:	0f 85 db 00 00 00 	jne	219 <_runtime.queuefinalizer+0x12f>
 10110c4:	48 83 3d 6c d1 0b 00 00 	cmp	qword ptr [rip + 774508], 0
 10110cc:	0f 85 a9 00 00 00 	jne	169 <_runtime.queuefinalizer+0x10b>
 10110d2:	48 c7 04 24 00 10 00 00 	mov	qword ptr [rsp], 4096
 10110da:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10110e3:	48 8d 05 ce 75 0e 00 	lea	rax, [rip + 947662]
 10110ea:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10110ef:	e8 1c 96 ff ff 	call	-27108 <_runtime.persistentalloc>
 10110f4:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10110f9:	48 89 05 38 d1 0b 00 	mov	qword ptr [rip + 774456], rax
 1011100:	48 8b 0d f1 d0 0b 00 	mov	rcx, qword ptr [rip + 774385]
 1011107:	48 89 08 	mov	qword ptr [rax], rcx
 101110a:	48 8b 05 27 d1 0b 00 	mov	rax, qword ptr [rip + 774439]
 1011111:	48 89 05 e0 d0 0b 00 	mov	qword ptr [rip + 774368], rax
 1011118:	80 3d e1 68 0e 00 00 	cmp	byte ptr [rip + 944353], 0
 101111f:	75 5a 	jne	90 <_runtime.queuefinalizer+0x10b>
 1011121:	31 c0 	xor	eax, eax
 1011123:	eb 1a 	jmp	26 <_runtime.queuefinalizer+0xcf>
 1011125:	48 8d 15 48 a0 0b 00 	lea	rdx, [rip + 761928]
 101112c:	0f b6 34 02 	movzx	esi, byte ptr [rdx + rax]
 1011130:	4c 8d 05 c9 68 0e 00 	lea	r8, [rip + 944329]
 1011137:	41 88 34 18 	mov	byte ptr [r8 + rbx], sil
 101113b:	48 8d 43 01 	lea	rax, [rbx + 1]
 101113f:	48 83 f8 40 	cmp	rax, 64
 1011143:	7d 36 	jge	54 <_runtime.queuefinalizer+0x10b>
 1011145:	48 89 c1 	mov	rcx, rax
 1011148:	48 b8 cd cc cc cc cc cc cc cc 	movabs	rax, -3689348814741910323
 1011152:	48 f7 e9 	imul	rcx
 1011155:	48 01 ca 	add	rdx, rcx
 1011158:	48 c1 fa 02 	sar	rdx, 2
 101115c:	48 89 c8 	mov	rax, rcx
 101115f:	48 c1 f9 3f 	sar	rcx, 63
 1011163:	48 29 ca 	sub	rdx, rcx
 1011166:	48 8d 14 92 	lea	rdx, [rdx + 4*rdx]
 101116a:	48 89 c3 	mov	rbx, rax
 101116d:	48 29 d0 	sub	rax, rdx
 1011170:	48 83 f8 05 	cmp	rax, 5
 1011174:	72 af 	jb	-81 <_runtime.queuefinalizer+0xb5>
 1011176:	e9 11 01 00 00 	jmp	273 <_runtime.queuefinalizer+0x21c>
 101117b:	48 8b 15 b6 d0 0b 00 	mov	rdx, qword ptr [rip + 774326]
 1011182:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 1011186:	48 89 1d ab d0 0b 00 	mov	qword ptr [rip + 774315], rbx
 101118d:	48 8b 1d b4 d0 0b 00 	mov	rbx, qword ptr [rip + 774324]
 1011194:	48 89 5a 08 	mov	qword ptr [rdx + 8], rbx
 1011198:	48 89 15 a9 d0 0b 00 	mov	qword ptr [rip + 774313], rdx
 101119f:	48 8b 15 a2 d0 0b 00 	mov	rdx, qword ptr [rip + 774306]
 10111a6:	8b 42 10 	mov	eax, dword ptr [rdx + 16]
 10111a9:	48 83 f8 65 	cmp	rax, 101
 10111ad:	0f 83 cf 00 00 00 	jae	207 <_runtime.queuefinalizer+0x212>
 10111b3:	b9 01 00 00 00 	mov	ecx, 1
 10111b8:	f0 	lock
 10111b9:	0f c1 4a 10 	xadd	dword ptr [rdx + 16], ecx
 10111bd:	48 8d 0c 80 	lea	rcx, [rax + 4*rax]
 10111c1:	48 8d 3c ca 	lea	rdi, [rdx + 8*rcx]
 10111c5:	48 8d 7f 18 	lea	rdi, [rdi + 24]
 10111c9:	48 8d 1c ca 	lea	rbx, [rdx + 8*rcx]
 10111cd:	48 8d 5b 30 	lea	rbx, [rbx + 48]
 10111d1:	48 8d 34 ca 	lea	rsi, [rdx + 8*rcx]
 10111d5:	48 8d 76 38 	lea	rsi, [rsi + 56]
 10111d9:	4c 8d 04 ca 	lea	r8, [rdx + 8*rcx]
 10111dd:	4d 8d 40 20 	lea	r8, [r8 + 32]
 10111e1:	83 3d 18 67 0e 00 00 	cmp	dword ptr [rip + 943896], 0
 10111e8:	0f 85 85 00 00 00 	jne	133 <_runtime.queuefinalizer+0x203>
 10111ee:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 10111f3:	4c 89 4c ca 18 	mov	qword ptr [rdx + 8*rcx + 24], r9
 10111f8:	4c 8b 4c 24 40 	mov	r9, qword ptr [rsp + 64]
 10111fd:	4c 89 4c ca 28 	mov	qword ptr [rdx + 8*rcx + 40], r9
 1011202:	83 3d f7 66 0e 00 00 	cmp	dword ptr [rip + 943863], 0
 1011209:	75 3f 	jne	63 <_runtime.queuefinalizer+0x1da>
 101120b:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1011210:	48 89 44 ca 30 	mov	qword ptr [rdx + 8*rcx + 48], rax
 1011215:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101121a:	48 89 44 ca 38 	mov	qword ptr [rdx + 8*rcx + 56], rax
 101121f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1011224:	48 89 44 ca 20 	mov	qword ptr [rdx + 8*rcx + 32], rax
 1011229:	c6 05 37 65 0e 00 01 	mov	byte ptr [rip + 943415], 1
 1011230:	48 8d 05 09 66 0e 00 	lea	rax, [rip + 943625]
 1011237:	48 89 04 24 	mov	qword ptr [rsp], rax
 101123b:	e8 d0 70 ff ff 	call	-36656 <_runtime.unlock>
 1011240:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1011245:	48 83 c4 28 	add	rsp, 40
 1011249:	c3 	ret
 101124a:	48 89 df 	mov	rdi, rbx
 101124d:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1011252:	e8 89 17 04 00 	call	268169 <_runtime.gcWriteBarrier>
 1011257:	48 89 f7 	mov	rdi, rsi
 101125a:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101125f:	e8 7c 17 04 00 	call	268156 <_runtime.gcWriteBarrier>
 1011264:	4c 89 c7 	mov	rdi, r8
 1011267:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101126c:	e8 6f 17 04 00 	call	268143 <_runtime.gcWriteBarrier>
 1011271:	eb b6 	jmp	-74 <_runtime.queuefinalizer+0x1b9>
 1011273:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1011278:	e8 63 17 04 00 	call	268131 <_runtime.gcWriteBarrier>
 101127d:	e9 76 ff ff ff 	jmp	-138 <_runtime.queuefinalizer+0x188>
 1011282:	b9 65 00 00 00 	mov	ecx, 101
 1011287:	e8 c4 20 04 00 	call	270532 <_runtime.panicIndex>
 101128c:	b9 05 00 00 00 	mov	ecx, 5
 1011291:	e8 ba 20 04 00 	call	270522 <_runtime.panicIndex>
 1011296:	48 8d 05 70 38 06 00 	lea	rax, [rip + 407664]
 101129d:	48 89 04 24 	mov	qword ptr [rsp], rax
 10112a1:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 10112aa:	e8 b1 7a 01 00 	call	96945 <_runtime.throw>
 10112af:	90 	nop
 10112b0:	e8 1b f9 03 00 	call	260379 <_runtime.morestack_noctxt>
 10112b5:	e9 b6 fd ff ff 	jmp	-586 <_runtime.queuefinalizer>
 10112ba:	cc 	int3
 10112bb:	cc 	int3
 10112bc:	cc 	int3
 10112bd:	cc 	int3
 10112be:	cc 	int3
 10112bf:	cc 	int3

_runtime.wakefing:
 10112c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10112c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10112cd:	76 72 	jbe	114 <_runtime.wakefing+0x81>
 10112cf:	48 83 ec 18 	sub	rsp, 24
 10112d3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10112d8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10112dd:	48 8d 05 5c 65 0e 00 	lea	rax, [rip + 943452]
 10112e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10112e8:	e8 43 6e ff ff 	call	-37309 <_runtime.lock>
 10112ed:	80 3d 72 64 0e 00 00 	cmp	byte ptr [rip + 943218], 0
 10112f4:	74 47 	je	71 <_runtime.wakefing+0x7d>
 10112f6:	80 3d 6a 64 0e 00 00 	cmp	byte ptr [rip + 943210], 0
 10112fd:	74 3e 	je	62 <_runtime.wakefing+0x7d>
 10112ff:	c6 05 60 64 0e 00 00 	mov	byte ptr [rip + 943200], 0
 1011306:	c6 05 5a 64 0e 00 00 	mov	byte ptr [rip + 943194], 0
 101130d:	48 8b 05 2c cf 0b 00 	mov	rax, qword ptr [rip + 773932]
 1011314:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1011319:	48 8d 0d 20 65 0e 00 	lea	rcx, [rip + 943392]
 1011320:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1011324:	e8 e7 6f ff ff 	call	-36889 <_runtime.unlock>
 1011329:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101132e:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1011333:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1011338:	48 83 c4 18 	add	rsp, 24
 101133c:	c3 	ret
 101133d:	31 c0 	xor	eax, eax
 101133f:	eb d3 	jmp	-45 <_runtime.wakefing+0x54>
 1011341:	e8 8a f8 03 00 	call	260234 <_runtime.morestack_noctxt>
 1011346:	e9 75 ff ff ff 	jmp	-139 <_runtime.wakefing>
 101134b:	cc 	int3
 101134c:	cc 	int3
 101134d:	cc 	int3
 101134e:	cc 	int3
 101134f:	cc 	int3

_runtime.(*fixalloc).alloc:
 1011350:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1011359:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101135d:	0f 86 3c 01 00 00 	jbe	316 <_runtime.(*fixalloc).alloc+0x14f>
 1011363:	48 83 ec 38 	sub	rsp, 56
 1011367:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 101136c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1011371:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1011376:	48 8b 08 	mov	rcx, qword ptr [rax]
 1011379:	48 85 c9 	test	rcx, rcx
 101137c:	0f 84 e0 00 00 00 	je	224 <_runtime.(*fixalloc).alloc+0x112>
 1011382:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 1011386:	48 85 db 	test	rbx, rbx
 1011389:	74 40 	je	64 <_runtime.(*fixalloc).alloc+0x7b>
 101138b:	48 8b 0b 	mov	rcx, qword ptr [rbx]
 101138e:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 1011392:	48 8b 08 	mov	rcx, qword ptr [rax]
 1011395:	48 01 48 30 	add	qword ptr [rax + 48], rcx
 1011399:	80 78 40 00 	cmp	byte ptr [rax + 64], 0
 101139d:	75 0f 	jne	15 <_runtime.(*fixalloc).alloc+0x5e>
 101139f:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 10113a4:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10113a9:	48 83 c4 38 	add	rsp, 56
 10113ad:	c3 	ret
 10113ae:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 10113b3:	48 8b 00 	mov	rax, qword ptr [rax]
 10113b6:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10113ba:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10113bf:	e8 fc 24 04 00 	call	271612 <_runtime.memclrNoHeapPointers>
 10113c4:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 10113c9:	eb d4 	jmp	-44 <_runtime.(*fixalloc).alloc+0x4f>
 10113cb:	8b 58 28 	mov	ebx, dword ptr [rax + 40]
 10113ce:	48 39 cb 	cmp	rbx, rcx
 10113d1:	72 53 	jb	83 <_runtime.(*fixalloc).alloc+0xd6>
 10113d3:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 10113d7:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 10113db:	48 85 d2 	test	rdx, rdx
 10113de:	75 23 	jne	35 <_runtime.(*fixalloc).alloc+0xb3>
 10113e0:	48 8b 10 	mov	rdx, qword ptr [rax]
 10113e3:	48 01 50 20 	add	qword ptr [rax + 32], rdx
 10113e7:	48 8b 10 	mov	rdx, qword ptr [rax]
 10113ea:	29 50 28 	sub	dword ptr [rax + 40], edx
 10113ed:	48 8b 10 	mov	rdx, qword ptr [rax]
 10113f0:	48 01 50 30 	add	qword ptr [rax + 48], rdx
 10113f4:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10113f9:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10113fe:	48 83 c4 38 	add	rsp, 56
 1011402:	c3 	ret
 1011403:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1011408:	48 8b 58 10 	mov	rbx, qword ptr [rax + 16]
 101140c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1011410:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1011415:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1011418:	ff d3 	call	rbx
 101141a:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101141f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1011424:	eb ba 	jmp	-70 <_runtime.(*fixalloc).alloc+0x90>
 1011426:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 101142a:	48 c7 04 24 00 40 00 00 	mov	qword ptr [rsp], 16384
 1011432:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 101143b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1011440:	e8 cb 92 ff ff 	call	-27957 <_runtime.persistentalloc>
 1011445:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101144a:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101144f:	48 89 41 20 	mov	qword ptr [rcx + 32], rax
 1011453:	c7 41 28 00 40 00 00 	mov	dword ptr [rcx + 40], 16384
 101145a:	48 89 c8 	mov	rax, rcx
 101145d:	e9 71 ff ff ff 	jmp	-143 <_runtime.(*fixalloc).alloc+0x83>
 1011462:	e8 39 90 01 00 	call	102457 <_runtime.printlock>
 1011467:	48 8d 05 06 5e 06 00 	lea	rax, [rip + 417286]
 101146e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011472:	48 c7 44 24 08 34 00 00 00 	mov	qword ptr [rsp + 8], 52
 101147b:	e8 60 99 01 00 	call	104800 <_runtime.printstring>
 1011480:	e8 9b 90 01 00 	call	102555 <_runtime.printunlock>
 1011485:	48 8d 05 95 34 06 00 	lea	rax, [rip + 406677]
 101148c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011490:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1011499:	e8 c2 78 01 00 	call	96450 <_runtime.throw>
 101149e:	90 	nop
 101149f:	e8 2c f7 03 00 	call	259884 <_runtime.morestack_noctxt>
 10114a4:	e9 a7 fe ff ff 	jmp	-345 <_runtime.(*fixalloc).alloc>
 10114a9:	cc 	int3
 10114aa:	cc 	int3
 10114ab:	cc 	int3
 10114ac:	cc 	int3
 10114ad:	cc 	int3
 10114ae:	cc 	int3
 10114af:	cc 	int3

_runtime.gcinit:
 10114b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10114b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10114bd:	0f 86 b2 00 00 00 	jbe	178 <_runtime.gcinit+0xc5>
 10114c3:	48 83 ec 18 	sub	rsp, 24
 10114c7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10114cc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10114d1:	c7 05 09 3c 0e 00 01 00 00 00 	mov	dword ptr [rip + 932873], 1
 10114db:	f2 0f 10 05 25 22 07 00 	movsd	xmm0, qword ptr [rip + 467493]
 10114e3:	f2 0f 11 05 75 88 0e 00 	movsd	qword ptr [rip + 952437], xmm0
 10114eb:	48 8b 05 ae 9c 0b 00 	mov	rax, qword ptr [rip + 761006]
 10114f2:	48 85 c0 	test	rax, rax
 10114f5:	7c 63 	jl	99 <_runtime.gcinit+0xaa>
 10114f7:	0f 57 c0 	xorps	xmm0, xmm0
 10114fa:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 10114ff:	f2 0f 10 0d 31 22 07 00 	movsd	xmm1, qword ptr [rip + 467505]
 1011507:	f2 0f 5e c1 	divsd	xmm0, xmm1
 101150b:	f2 0f 10 0d 65 22 07 00 	movsd	xmm1, qword ptr [rip + 467557]
 1011513:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 1011517:	76 31 	jbe	49 <_runtime.gcinit+0x9a>
 1011519:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 101151e:	48 89 05 5b 88 0e 00 	mov	qword ptr [rip + 952411], rax
 1011525:	e8 56 00 00 00 	call	86 <_runtime.readgogc>
 101152a:	e8 f1 01 00 00 	call	497 <_runtime/debug.setGCPercent>
 101152f:	48 b8 01 00 00 00 01 00 00 00 	movabs	rax, 4294967297
 1011539:	48 89 05 d0 d4 0b 00 	mov	qword ptr [rip + 775376], rax
 1011540:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1011545:	48 83 c4 18 	add	rsp, 24
 1011549:	c3 	ret
 101154a:	f2 0f 5c c1 	subsd	xmm0, xmm1
 101154e:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 1011553:	48 0f ba e8 3f 	bts	rax, 63
 1011558:	eb c4 	jmp	-60 <_runtime.gcinit+0x6e>
 101155a:	48 89 c1 	mov	rcx, rax
 101155d:	48 83 e0 01 	and	rax, 1
 1011561:	48 d1 e9 	shr	rcx
 1011564:	48 09 c1 	or	rcx, rax
 1011567:	0f 57 c0 	xorps	xmm0, xmm0
 101156a:	f2 48 0f 2a c1 	cvtsi2sd	xmm0, rcx
 101156f:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1011573:	eb 8a 	jmp	-118 <_runtime.gcinit+0x4f>
 1011575:	e8 56 f6 03 00 	call	259670 <_runtime.morestack_noctxt>
 101157a:	e9 31 ff ff ff 	jmp	-207 <_runtime.gcinit>
 101157f:	cc 	int3

_runtime.readgogc:
 1011580:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1011589:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101158d:	0f 86 a5 00 00 00 	jbe	165 <_runtime.readgogc+0xb8>
 1011593:	48 83 ec 28 	sub	rsp, 40
 1011597:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101159c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10115a1:	48 8d 05 63 17 06 00 	lea	rax, [rip + 399203]
 10115a8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10115ac:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 10115b5:	e8 f6 3e ff ff 	call	-49418 <_runtime.gogetenv>
 10115ba:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10115bf:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10115c4:	48 83 f9 03 	cmp	rcx, 3
 10115c8:	75 0d 	jne	13 <_runtime.readgogc+0x57>
 10115ca:	66 81 38 6f 66 	cmp	word ptr [rax], 26223
 10115cf:	75 06 	jne	6 <_runtime.readgogc+0x57>
 10115d1:	80 78 02 66 	cmp	byte ptr [rax + 2], 102
 10115d5:	74 4f 	je	79 <_runtime.readgogc+0xa6>
 10115d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10115db:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10115e0:	e8 1b f9 02 00 	call	194843 <_runtime.atoi>
 10115e5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10115ea:	48 63 c8 	movsxd	rcx, eax
 10115ed:	48 39 c1 	cmp	rcx, rax
 10115f0:	b9 00 00 00 00 	mov	ecx, 0
 10115f5:	0f 44 c8 	cmove	ecx, eax
 10115f8:	0f 94 c0 	sete	al
 10115fb:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 1011600:	21 d0 	and	eax, edx
 1011602:	84 c0 	test	al, al
 1011604:	74 0e 	je	14 <_runtime.readgogc+0x94>
 1011606:	89 4c 24 30 	mov	dword ptr [rsp + 48], ecx
 101160a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101160f:	48 83 c4 28 	add	rsp, 40
 1011613:	c3 	ret
 1011614:	c7 44 24 30 64 00 00 00 	mov	dword ptr [rsp + 48], 100
 101161c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1011621:	48 83 c4 28 	add	rsp, 40
 1011625:	c3 	ret
 1011626:	c7 44 24 30 ff ff ff ff 	mov	dword ptr [rsp + 48], 4294967295
 101162e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1011633:	48 83 c4 28 	add	rsp, 40
 1011637:	c3 	ret
 1011638:	e8 93 f5 03 00 	call	259475 <_runtime.morestack_noctxt>
 101163d:	e9 3e ff ff ff 	jmp	-194 <_runtime.readgogc>
 1011642:	cc 	int3
 1011643:	cc 	int3
 1011644:	cc 	int3
 1011645:	cc 	int3
 1011646:	cc 	int3
 1011647:	cc 	int3
 1011648:	cc 	int3
 1011649:	cc 	int3
 101164a:	cc 	int3
 101164b:	cc 	int3
 101164c:	cc 	int3
 101164d:	cc 	int3
 101164e:	cc 	int3
 101164f:	cc 	int3

_runtime.gcenable:
 1011650:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1011659:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101165d:	0f 86 aa 00 00 00 	jbe	170 <_runtime.gcenable+0xbd>
 1011663:	48 83 ec 28 	sub	rsp, 40
 1011667:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101166c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1011671:	48 8d 05 a8 e1 04 00 	lea	rax, [rip + 319912]
 1011678:	48 89 04 24 	mov	qword ptr [rsp], rax
 101167c:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1011685:	e8 d6 1f ff ff 	call	-57386 <_runtime.makechan>
 101168a:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101168f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1011694:	c7 04 24 08 00 00 00 	mov	dword ptr [rsp], 8
 101169b:	48 8d 0d ae 60 06 00 	lea	rcx, [rip + 417966]
 10116a2:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10116a7:	e8 44 19 02 00 	call	137540 <_runtime.newproc>
 10116ac:	c7 04 24 08 00 00 00 	mov	dword ptr [rsp], 8
 10116b3:	48 8d 05 8e 60 06 00 	lea	rax, [rip + 417934]
 10116ba:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10116bf:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10116c4:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10116c9:	e8 22 19 02 00 	call	137506 <_runtime.newproc>
 10116ce:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10116d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10116d7:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10116e0:	e8 cb 2c ff ff 	call	-54069 <_runtime.chanrecv1>
 10116e5:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10116ea:	48 89 04 24 	mov	qword ptr [rsp], rax
 10116ee:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10116f7:	e8 b4 2c ff ff 	call	-54092 <_runtime.chanrecv1>
 10116fc:	c6 05 ed 7f 0e 00 01 	mov	byte ptr [rip + 950253], 1
 1011703:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1011708:	48 83 c4 28 	add	rsp, 40
 101170c:	c3 	ret
 101170d:	e8 be f4 03 00 	call	259262 <_runtime.morestack_noctxt>
 1011712:	e9 39 ff ff ff 	jmp	-199 <_runtime.gcenable>
 1011717:	cc 	int3
 1011718:	cc 	int3
 1011719:	cc 	int3
 101171a:	cc 	int3
 101171b:	cc 	int3
 101171c:	cc 	int3
 101171d:	cc 	int3
 101171e:	cc 	int3
 101171f:	cc 	int3

_runtime/debug.setGCPercent:
 1011720:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1011729:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101172d:	76 7b 	jbe	123 <_runtime/debug.setGCPercent+0x8a>
 101172f:	48 83 ec 28 	sub	rsp, 40
 1011733:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1011738:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101173d:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1011745:	0f 57 c0 	xorps	xmm0, xmm0
 1011748:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 101174d:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1011756:	48 8d 05 73 c5 03 00 	lea	rax, [rip + 247155]
 101175d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1011762:	48 8d 44 24 38 	lea	rax, [rsp + 56]
 1011767:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101176c:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 1011771:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1011776:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 101177b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101177f:	e8 fc f2 03 00 	call	258812 <_runtime.systemstack>
 1011784:	e8 07 76 00 00 	call	30215 <_runtime.wakeScavenger>
 1011789:	83 7c 24 30 00 	cmp	dword ptr [rsp + 48], 0
 101178e:	7c 0a 	jl	10 <_runtime/debug.setGCPercent+0x7a>
 1011790:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1011795:	48 83 c4 28 	add	rsp, 40
 1011799:	c3 	ret
 101179a:	8b 05 d0 d2 0b 00 	mov	eax, dword ptr [rip + 774864]
 10117a0:	89 04 24 	mov	dword ptr [rsp], eax
 10117a3:	e8 88 11 00 00 	call	4488 <_runtime.gcWaitOnMark>
 10117a8:	eb e6 	jmp	-26 <_runtime/debug.setGCPercent+0x70>
 10117aa:	e8 21 f4 03 00 	call	259105 <_runtime.morestack_noctxt>
 10117af:	e9 6c ff ff ff 	jmp	-148 <_runtime/debug.setGCPercent>
 10117b4:	cc 	int3
 10117b5:	cc 	int3
 10117b6:	cc 	int3
 10117b7:	cc 	int3
 10117b8:	cc 	int3
 10117b9:	cc 	int3
 10117ba:	cc 	int3
 10117bb:	cc 	int3
 10117bc:	cc 	int3
 10117bd:	cc 	int3
 10117be:	cc 	int3
 10117bf:	cc 	int3

_runtime.(*gcControllerState).startCycle:
 10117c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10117c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10117cd:	0f 86 a1 02 00 00 	jbe	673 <_runtime.(*gcControllerState).startCycle+0x2b4>
 10117d3:	48 83 ec 48 	sub	rsp, 72
 10117d7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 10117dc:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 10117e1:	0f 57 c0 	xorps	xmm0, xmm0
 10117e4:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10117e9:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 10117ec:	0f 11 40 10 	movups	xmmword ptr [rax + 16], xmm0
 10117f0:	0f 11 40 20 	movups	xmmword ptr [rax + 32], xmm0
 10117f4:	48 8b 0d 75 85 0e 00 	mov	rcx, qword ptr [rip + 951669]
 10117fb:	48 81 c1 00 00 10 00 	add	rcx, 1048576
 1011802:	48 39 0d bf 6e 0e 00 	cmp	qword ptr [rip + 945855], rcx
 1011809:	73 07 	jae	7 <_runtime.(*gcControllerState).startCycle+0x52>
 101180b:	48 89 0d b6 6e 0e 00 	mov	qword ptr [rip + 945846], rcx
 1011812:	8b 0d 88 5f 0e 00 	mov	ecx, dword ptr [rip + 941960]
 1011818:	0f 57 c9 	xorps	xmm1, xmm1
 101181b:	f2 0f 2a c9 	cvtsi2sd	xmm1, ecx
 101181f:	f2 0f 10 15 c1 1e 07 00 	movsd	xmm2, qword ptr [rip + 466625]
 1011827:	f2 0f 59 ca 	mulsd	xmm1, xmm2
 101182b:	f2 0f 10 15 c5 1e 07 00 	movsd	xmm2, qword ptr [rip + 466629]
 1011833:	f2 0f 58 d1 	addsd	xmm2, xmm1
 1011837:	f2 48 0f 2c ca 	cvttsd2si	rcx, xmm2
 101183c:	48 89 48 38 	mov	qword ptr [rax + 56], rcx
 1011840:	0f 57 d2 	xorps	xmm2, xmm2
 1011843:	f2 48 0f 2a d1 	cvtsi2sd	xmm2, rcx
 1011848:	0f 10 da 	movups	xmm3, xmm2
 101184b:	f2 0f 5e d1 	divsd	xmm2, xmm1
 101184f:	f2 0f 10 25 c1 1e 07 00 	movsd	xmm4, qword ptr [rip + 466625]
 1011857:	f2 0f 5c d4 	subsd	xmm2, xmm4
 101185b:	f2 0f 10 25 25 1f 07 00 	movsd	xmm4, qword ptr [rip + 466725]
 1011863:	66 0f 2e e2 	ucomisd	xmm4, xmm2
 1011867:	0f 86 e8 01 00 00 	jbe	488 <_runtime.(*gcControllerState).startCycle+0x295>
 101186d:	66 0f 2e d9 	ucomisd	xmm3, xmm1
 1011871:	76 07 	jbe	7 <_runtime.(*gcControllerState).startCycle+0xba>
 1011873:	48 ff c9 	dec	rcx
 1011876:	48 89 48 38 	mov	qword ptr [rax + 56], rcx
 101187a:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 101187e:	0f 57 d2 	xorps	xmm2, xmm2
 1011881:	f2 48 0f 2a d1 	cvtsi2sd	xmm2, rcx
 1011886:	f2 0f 5c ca 	subsd	xmm1, xmm2
 101188a:	8b 0d 10 5f 0e 00 	mov	ecx, dword ptr [rip + 941840]
 1011890:	0f 57 d2 	xorps	xmm2, xmm2
 1011893:	f2 0f 2a d1 	cvtsi2sd	xmm2, ecx
 1011897:	f2 0f 5e ca 	divsd	xmm1, xmm2
 101189b:	f2 0f 11 48 50 	movsd	qword ptr [rax + 80], xmm1
 10118a0:	83 3d b5 61 0e 00 00 	cmp	dword ptr [rip + 942517], 0
 10118a7:	7e 13 	jle	19 <_runtime.(*gcControllerState).startCycle+0xfc>
 10118a9:	48 63 0d f0 5e 0e 00 	movsxd	rcx, dword ptr [rip + 941808]
 10118b0:	48 89 48 38 	mov	qword ptr [rax + 56], rcx
 10118b4:	0f 57 c9 	xorps	xmm1, xmm1
 10118b7:	f2 0f 11 48 50 	movsd	qword ptr [rax + 80], xmm1
 10118bc:	48 8b 0d 7d ca 0b 00 	mov	rcx, qword ptr [rip + 772733]
 10118c3:	48 8b 15 7e ca 0b 00 	mov	rdx, qword ptr [rip + 772734]
 10118ca:	31 db 	xor	ebx, ebx
 10118cc:	eb 10 	jmp	16 <_runtime.(*gcControllerState).startCycle+0x11e>
 10118ce:	48 8b 34 d9 	mov	rsi, qword ptr [rcx + 8*rbx]
 10118d2:	84 06 	test	byte ptr [rsi], al
 10118d4:	0f 11 86 70 16 00 00 	movups	xmmword ptr [rsi + 5744], xmm0
 10118db:	48 ff c3 	inc	rbx
 10118de:	48 39 d3 	cmp	rbx, rdx
 10118e1:	7c eb 	jl	-21 <_runtime.(*gcControllerState).startCycle+0x10e>
 10118e3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10118e7:	e8 94 01 00 00 	call	404 <_runtime.(*gcControllerState).revise>
 10118ec:	83 3d 61 61 0e 00 00 	cmp	dword ptr [rip + 942433], 0
 10118f3:	7f 0a 	jg	10 <_runtime.(*gcControllerState).startCycle+0x13f>
 10118f5:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10118fa:	48 83 c4 48 	add	rsp, 72
 10118fe:	c3 	ret
 10118ff:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1011904:	f2 0f 10 40 40 	movsd	xmm0, qword ptr [rax + 64]
 1011909:	f2 0f 11 44 24 38 	movsd	qword ptr [rsp + 56], xmm0
 101190f:	48 8b 0d 62 84 0e 00 	mov	rcx, qword ptr [rip + 951394]
 1011916:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 101191b:	48 8b 15 1e d1 0b 00 	mov	rdx, qword ptr [rip + 774430]
 1011922:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1011927:	48 8b 1d 9a 6d 0e 00 	mov	rbx, qword ptr [rip + 945562]
 101192e:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1011933:	48 8b 70 38 	mov	rsi, qword ptr [rax + 56]
 1011937:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 101193c:	f2 0f 10 48 50 	movsd	xmm1, qword ptr [rax + 80]
 1011941:	f2 0f 11 4c 24 10 	movsd	qword ptr [rsp + 16], xmm1
 1011947:	e8 54 8b 01 00 	call	101204 <_runtime.printlock>
 101194c:	48 8d 05 59 29 06 00 	lea	rax, [rip + 403801]
 1011953:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011957:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1011960:	e8 7b 94 01 00 	call	103547 <_runtime.printstring>
 1011965:	f2 0f 10 44 24 38 	movsd	xmm0, qword ptr [rsp + 56]
 101196b:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011970:	e8 7b 8e 01 00 	call	102011 <_runtime.printfloat>
 1011975:	48 8d 05 0e 15 06 00 	lea	rax, [rip + 398606]
 101197c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011980:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1011989:	e8 52 94 01 00 	call	103506 <_runtime.printstring>
 101198e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1011993:	48 c1 e8 14 	shr	rax, 20
 1011997:	48 89 04 24 	mov	qword ptr [rsp], rax
 101199b:	e8 80 91 01 00 	call	102784 <_runtime.printuint>
 10119a0:	48 8d 05 f1 14 06 00 	lea	rax, [rip + 398577]
 10119a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10119ab:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 10119b4:	e8 27 94 01 00 	call	103463 <_runtime.printstring>
 10119b9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10119be:	48 c1 e8 14 	shr	rax, 20
 10119c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10119c6:	e8 55 91 01 00 	call	102741 <_runtime.printuint>
 10119cb:	48 8d 05 a4 12 06 00 	lea	rax, [rip + 397988]
 10119d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10119d6:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10119df:	e8 fc 93 01 00 	call	103420 <_runtime.printstring>
 10119e4:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10119e9:	48 c1 e8 14 	shr	rax, 20
 10119ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10119f1:	e8 2a 91 01 00 	call	102698 <_runtime.printuint>
 10119f6:	48 8d 05 37 1c 06 00 	lea	rax, [rip + 400439]
 10119fd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011a01:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1011a0a:	e8 d1 93 01 00 	call	103377 <_runtime.printstring>
 1011a0f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1011a14:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011a18:	e8 03 92 01 00 	call	102915 <_runtime.printint>
 1011a1d:	48 8d 05 37 12 06 00 	lea	rax, [rip + 397879]
 1011a24:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011a28:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1011a31:	e8 aa 93 01 00 	call	103338 <_runtime.printstring>
 1011a36:	f2 0f 10 44 24 10 	movsd	xmm0, qword ptr [rsp + 16]
 1011a3c:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011a41:	e8 aa 8d 01 00 	call	101802 <_runtime.printfloat>
 1011a46:	e8 e5 8c 01 00 	call	101605 <_runtime.printnl>
 1011a4b:	e8 d0 8a 01 00 	call	101072 <_runtime.printunlock>
 1011a50:	e9 a0 fe ff ff 	jmp	-352 <_runtime.(*gcControllerState).startCycle+0x135>
 1011a55:	f2 0f 10 25 93 1c 07 00 	movsd	xmm4, qword ptr [rip + 466067]
 1011a5d:	66 0f 2e d4 	ucomisd	xmm2, xmm4
 1011a61:	0f 87 06 fe ff ff 	ja	-506 <_runtime.(*gcControllerState).startCycle+0xad>
 1011a67:	0f 57 c9 	xorps	xmm1, xmm1
 1011a6a:	f2 0f 11 48 50 	movsd	qword ptr [rax + 80], xmm1
 1011a6f:	e9 2c fe ff ff 	jmp	-468 <_runtime.(*gcControllerState).startCycle+0xe0>
 1011a74:	e8 57 f1 03 00 	call	258391 <_runtime.morestack_noctxt>
 1011a79:	e9 42 fd ff ff 	jmp	-702 <_runtime.(*gcControllerState).startCycle>
 1011a7e:	cc 	int3
 1011a7f:	cc 	int3

_runtime.(*gcControllerState).revise:
 1011a80:	8b 05 12 5d 0e 00 	mov	eax, dword ptr [rip + 941330]
 1011a86:	48 8b 0d e3 82 0e 00 	mov	rcx, qword ptr [rip + 951011]
 1011a8d:	85 c0 	test	eax, eax
 1011a8f:	ba a0 86 01 00 	mov	edx, 100000
 1011a94:	0f 4c c2 	cmovl	eax, edx
 1011a97:	48 8b 15 2a 6c 0e 00 	mov	rdx, qword ptr [rip + 945194]
 1011a9e:	48 8b 1d d3 82 0e 00 	mov	rbx, qword ptr [rip + 950995]
 1011aa5:	48 85 db 	test	rbx, rbx
 1011aa8:	0f 8c cf 00 00 00 	jl	207 <_runtime.(*gcControllerState).revise+0xfd>
 1011aae:	0f 57 c0 	xorps	xmm0, xmm0
 1011ab1:	f2 48 0f 2a c3 	cvtsi2sd	xmm0, rbx
 1011ab6:	f2 0f 10 0d 9a 1c 07 00 	movsd	xmm1, qword ptr [rip + 466074]
 1011abe:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 1011ac2:	83 c0 64 	add	eax, 100
 1011ac5:	0f 57 c0 	xorps	xmm0, xmm0
 1011ac8:	f2 0f 2a c0 	cvtsi2sd	xmm0, eax
 1011acc:	f2 0f 5e c8 	divsd	xmm1, xmm0
 1011ad0:	48 39 d1 	cmp	rcx, rdx
 1011ad3:	0f 86 86 00 00 00 	jbe	134 <_runtime.(*gcControllerState).revise+0xdf>
 1011ad9:	48 85 d2 	test	rdx, rdx
 1011adc:	7c 66 	jl	102 <_runtime.(*gcControllerState).revise+0xc4>
 1011ade:	0f 57 c0 	xorps	xmm0, xmm0
 1011ae1:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 1011ae6:	f2 0f 10 0d 32 1c 07 00 	movsd	xmm1, qword ptr [rip + 465970]
 1011aee:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 1011af2:	f2 48 0f 2c c1 	cvttsd2si	rax, xmm1
 1011af7:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1011afc:	48 2b 1a 	sub	rbx, qword ptr [rdx]
 1011aff:	48 81 fb e8 03 00 00 	cmp	rbx, 1000
 1011b06:	be e8 03 00 00 	mov	esi, 1000
 1011b0b:	48 0f 4c de 	cmovl	rbx, rsi
 1011b0f:	48 29 c8 	sub	rax, rcx
 1011b12:	48 85 c0 	test	rax, rax
 1011b15:	b9 01 00 00 00 	mov	ecx, 1
 1011b1a:	48 0f 4e c1 	cmovle	rax, rcx
 1011b1e:	0f 57 c0 	xorps	xmm0, xmm0
 1011b21:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1011b26:	0f 57 c9 	xorps	xmm1, xmm1
 1011b29:	f2 48 0f 2a cb 	cvtsi2sd	xmm1, rbx
 1011b2e:	0f 10 d1 	movups	xmm2, xmm1
 1011b31:	f2 0f 5e c8 	divsd	xmm1, xmm0
 1011b35:	f2 0f 11 4a 40 	movsd	qword ptr [rdx + 64], xmm1
 1011b3a:	f2 0f 5e c2 	divsd	xmm0, xmm2
 1011b3e:	f2 0f 11 42 48 	movsd	qword ptr [rdx + 72], xmm0
 1011b43:	c3 	ret
 1011b44:	48 89 d0 	mov	rax, rdx
 1011b47:	48 d1 ea 	shr	rdx
 1011b4a:	48 83 e0 01 	and	rax, 1
 1011b4e:	48 09 d0 	or	rax, rdx
 1011b51:	0f 57 c0 	xorps	xmm0, xmm0
 1011b54:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1011b59:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1011b5d:	eb 87 	jmp	-121 <_runtime.(*gcControllerState).revise+0x66>
 1011b5f:	f2 48 0f 2c c1 	cvttsd2si	rax, xmm1
 1011b64:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 1011b69:	48 39 06 	cmp	qword ptr [rsi], rax
 1011b6c:	0f 8f 67 ff ff ff 	jg	-153 <_runtime.(*gcControllerState).revise+0x59>
 1011b72:	48 89 c3 	mov	rbx, rax
 1011b75:	48 89 d0 	mov	rax, rdx
 1011b78:	e9 7a ff ff ff 	jmp	-134 <_runtime.(*gcControllerState).revise+0x77>
 1011b7d:	48 89 de 	mov	rsi, rbx
 1011b80:	48 83 e3 01 	and	rbx, 1
 1011b84:	48 89 f7 	mov	rdi, rsi
 1011b87:	48 d1 ee 	shr	rsi
 1011b8a:	48 09 de 	or	rsi, rbx
 1011b8d:	0f 57 c0 	xorps	xmm0, xmm0
 1011b90:	f2 48 0f 2a c6 	cvtsi2sd	xmm0, rsi
 1011b95:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1011b99:	48 89 fb 	mov	rbx, rdi
 1011b9c:	e9 15 ff ff ff 	jmp	-235 <_runtime.(*gcControllerState).revise+0x36>
 1011ba1:	cc 	int3
 1011ba2:	cc 	int3
 1011ba3:	cc 	int3
 1011ba4:	cc 	int3
 1011ba5:	cc 	int3
 1011ba6:	cc 	int3
 1011ba7:	cc 	int3
 1011ba8:	cc 	int3
 1011ba9:	cc 	int3
 1011baa:	cc 	int3
 1011bab:	cc 	int3
 1011bac:	cc 	int3
 1011bad:	cc 	int3
 1011bae:	cc 	int3
 1011baf:	cc 	int3

_runtime.(*gcControllerState).endCycle:
 1011bb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1011bb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1011bbd:	0f 86 e0 04 00 00 	jbe	1248 <_runtime.(*gcControllerState).endCycle+0x4f3>
 1011bc3:	48 83 c4 80 	add	rsp, -128
 1011bc7:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 1011bcc:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 1011bd1:	80 3d 58 ce 0b 00 00 	cmp	byte ptr [rip + 773720], 0
 1011bd8:	0f 85 aa 04 00 00 	jne	1194 <_runtime.(*gcControllerState).endCycle+0x4d8>
 1011bde:	48 8b 05 e3 6a 0e 00 	mov	rax, qword ptr [rip + 944867]
 1011be5:	48 8b 0d 94 81 0e 00 	mov	rcx, qword ptr [rip + 950676]
 1011bec:	48 29 c8 	sub	rax, rcx
 1011bef:	48 85 c0 	test	rax, rax
 1011bf2:	0f 8c 72 04 00 00 	jl	1138 <_runtime.(*gcControllerState).endCycle+0x4ba>
 1011bf8:	0f 57 c0 	xorps	xmm0, xmm0
 1011bfb:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1011c00:	48 85 c9 	test	rcx, rcx
 1011c03:	0f 8c 3d 04 00 00 	jl	1085 <_runtime.(*gcControllerState).endCycle+0x496>
 1011c09:	0f 57 c9 	xorps	xmm1, xmm1
 1011c0c:	f2 48 0f 2a c9 	cvtsi2sd	xmm1, rcx
 1011c11:	f2 0f 5e c1 	divsd	xmm0, xmm1
 1011c15:	0f 57 c9 	xorps	xmm1, xmm1
 1011c18:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 1011c1c:	76 03 	jbe	3 <_runtime.(*gcControllerState).endCycle+0x71>
 1011c1e:	0f 57 c0 	xorps	xmm0, xmm0
 1011c21:	48 8b 05 48 81 0e 00 	mov	rax, qword ptr [rip + 950600]
 1011c28:	48 85 c0 	test	rax, rax
 1011c2b:	0f 8c f4 03 00 00 	jl	1012 <_runtime.(*gcControllerState).endCycle+0x475>
 1011c31:	0f 57 c9 	xorps	xmm1, xmm1
 1011c34:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 1011c39:	48 85 c9 	test	rcx, rcx
 1011c3c:	f2 0f 11 44 24 18 	movsd	qword ptr [rsp + 24], xmm0
 1011c42:	f2 0f 11 4c 24 70 	movsd	qword ptr [rsp + 112], xmm1
 1011c48:	0f 8c b9 03 00 00 	jl	953 <_runtime.(*gcControllerState).endCycle+0x457>
 1011c4e:	0f 57 d2 	xorps	xmm2, xmm2
 1011c51:	f2 48 0f 2a d1 	cvtsi2sd	xmm2, rcx
 1011c56:	f2 0f 11 54 24 68 	movsd	qword ptr [rsp + 104], xmm2
 1011c5c:	e8 5f 16 03 00 	call	202335 <_runtime.nanotime1>
 1011c61:	f2 0f 10 44 24 70 	movsd	xmm0, qword ptr [rsp + 112]
 1011c67:	f2 0f 10 4c 24 68 	movsd	xmm1, qword ptr [rsp + 104]
 1011c6d:	f2 0f 5e c1 	divsd	xmm0, xmm1
 1011c71:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1011c75:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1011c7d:	48 2b 41 30 	sub	rax, qword ptr [rcx + 48]
 1011c81:	48 85 c0 	test	rax, rax
 1011c84:	0f 8e 70 03 00 00 	jle	880 <_runtime.(*gcControllerState).endCycle+0x44a>
 1011c8a:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 1011c8e:	0f 57 c9 	xorps	xmm1, xmm1
 1011c91:	f2 48 0f 2a ca 	cvtsi2sd	xmm1, rdx
 1011c96:	48 63 15 03 5b 0e 00 	movsxd	rdx, dword ptr [rip + 940803]
 1011c9d:	48 0f af c2 	imul	rax, rdx
 1011ca1:	0f 57 d2 	xorps	xmm2, xmm2
 1011ca4:	f2 48 0f 2a d0 	cvtsi2sd	xmm2, rax
 1011ca9:	f2 0f 5e ca 	divsd	xmm1, xmm2
 1011cad:	f2 0f 10 15 33 1a 07 00 	movsd	xmm2, qword ptr [rip + 465459]
 1011cb5:	f2 0f 58 d1 	addsd	xmm2, xmm1
 1011cb9:	f2 0f 10 0d 57 1a 07 00 	movsd	xmm1, qword ptr [rip + 465495]
 1011cc1:	f2 0f 5c c1 	subsd	xmm0, xmm1
 1011cc5:	f2 0f 10 1d 93 80 0e 00 	movsd	xmm3, qword ptr [rip + 950419]
 1011ccd:	f2 0f 10 64 24 18 	movsd	xmm4, qword ptr [rsp + 24]
 1011cd3:	f2 0f 5c e3 	subsd	xmm4, xmm3
 1011cd7:	f2 0f 10 35 11 1a 07 00 	movsd	xmm6, qword ptr [rip + 465425]
 1011cdf:	0f 10 fa 	movups	xmm7, xmm2
 1011ce2:	f2 0f 5e d6 	divsd	xmm2, xmm6
 1011ce6:	44 0f 10 c0 	movups	xmm8, xmm0
 1011cea:	f2 0f 5c c3 	subsd	xmm0, xmm3
 1011cee:	44 0f 10 c8 	movups	xmm9, xmm0
 1011cf2:	f2 0f 59 c2 	mulsd	xmm0, xmm2
 1011cf6:	44 0f 10 d4 	movups	xmm10, xmm4
 1011cfa:	f2 0f 5c e0 	subsd	xmm4, xmm0
 1011cfe:	f2 0f 10 05 f2 19 07 00 	movsd	xmm0, qword ptr [rip + 465394]
 1011d06:	f2 0f 59 c4 	mulsd	xmm0, xmm4
 1011d0a:	f2 0f 58 c3 	addsd	xmm0, xmm3
 1011d0e:	f2 0f 11 44 24 10 	movsd	qword ptr [rsp + 16], xmm0
 1011d14:	83 3d 39 5d 0e 00 00 	cmp	dword ptr [rip + 941369], 0
 1011d1b:	0f 8e a2 02 00 00 	jle	674 <_runtime.(*gcControllerState).endCycle+0x413>
 1011d21:	f2 44 0f 11 44 24 70 	movsd	qword ptr [rsp + 112], xmm8
 1011d28:	f2 0f 11 5c 24 68 	movsd	qword ptr [rsp + 104], xmm3
 1011d2e:	f2 44 0f 11 54 24 60 	movsd	qword ptr [rsp + 96], xmm10
 1011d35:	f2 0f 11 7c 24 58 	movsd	qword ptr [rsp + 88], xmm7
 1011d3b:	f2 0f 11 54 24 50 	movsd	qword ptr [rsp + 80], xmm2
 1011d41:	f2 44 0f 11 4c 24 48 	movsd	qword ptr [rsp + 72], xmm9
 1011d48:	48 8b 05 31 80 0e 00 	mov	rax, qword ptr [rip + 950321]
 1011d4f:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1011d54:	48 8b 15 0d 80 0e 00 	mov	rdx, qword ptr [rip + 950285]
 1011d5b:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1011d60:	48 8b 1d 09 80 0e 00 	mov	rbx, qword ptr [rip + 950281]
 1011d67:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1011d6c:	48 85 c0 	test	rax, rax
 1011d6f:	0f 8c 67 02 00 00 	jl	615 <_runtime.(*gcControllerState).endCycle+0x42c>
 1011d75:	0f 57 e4 	xorps	xmm4, xmm4
 1011d78:	f2 48 0f 2a e0 	cvtsi2sd	xmm4, rax
 1011d7d:	f2 0f 11 64 24 40 	movsd	qword ptr [rsp + 64], xmm4
 1011d83:	48 8b 01 	mov	rax, qword ptr [rcx]
 1011d86:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1011d8b:	e8 10 87 01 00 	call	100112 <_runtime.printlock>
 1011d90:	48 8d 05 1b 1e 06 00 	lea	rax, [rip + 400923]
 1011d97:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011d9b:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1011da4:	e8 37 90 01 00 	call	102455 <_runtime.printstring>
 1011da9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1011dae:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011db2:	e8 69 8d 01 00 	call	101737 <_runtime.printuint>
 1011db7:	48 8d 05 d3 0f 06 00 	lea	rax, [rip + 397267]
 1011dbe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011dc2:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011dcb:	e8 10 90 01 00 	call	102416 <_runtime.printstring>
 1011dd0:	f2 0f 10 44 24 68 	movsd	xmm0, qword ptr [rsp + 104]
 1011dd6:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011ddb:	e8 10 8a 01 00 	call	100880 <_runtime.printfloat>
 1011de0:	48 8d 05 7d 0f 06 00 	lea	rax, [rip + 397181]
 1011de7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011deb:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011df4:	e8 e7 8f 01 00 	call	102375 <_runtime.printstring>
 1011df9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1011dfe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011e02:	e8 19 8d 01 00 	call	101657 <_runtime.printuint>
 1011e07:	48 8d 05 79 0f 06 00 	lea	rax, [rip + 397177]
 1011e0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011e12:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011e1b:	e8 c0 8f 01 00 	call	102336 <_runtime.printstring>
 1011e20:	f2 0f 10 44 24 70 	movsd	xmm0, qword ptr [rsp + 112]
 1011e26:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011e2b:	e8 c0 89 01 00 	call	100800 <_runtime.printfloat>
 1011e30:	48 8d 05 32 0f 06 00 	lea	rax, [rip + 397106]
 1011e37:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011e3b:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011e44:	e8 97 8f 01 00 	call	102295 <_runtime.printstring>
 1011e49:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1011e4e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011e52:	e8 c9 8c 01 00 	call	101577 <_runtime.printuint>
 1011e57:	48 8d 05 2e 0f 06 00 	lea	rax, [rip + 397102]
 1011e5e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011e62:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011e6b:	e8 70 8f 01 00 	call	102256 <_runtime.printstring>
 1011e70:	f2 0f 10 44 24 18 	movsd	xmm0, qword ptr [rsp + 24]
 1011e76:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011e7b:	e8 70 89 01 00 	call	100720 <_runtime.printfloat>
 1011e80:	48 8d 05 e7 0e 06 00 	lea	rax, [rip + 397031]
 1011e87:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011e8b:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011e94:	e8 47 8f 01 00 	call	102215 <_runtime.printstring>
 1011e99:	f2 0f 10 05 77 18 07 00 	movsd	xmm0, qword ptr [rip + 465015]
 1011ea1:	f2 0f 10 4c 24 18 	movsd	xmm1, qword ptr [rsp + 24]
 1011ea7:	f2 0f 58 c1 	addsd	xmm0, xmm1
 1011eab:	f2 0f 10 4c 24 40 	movsd	xmm1, qword ptr [rsp + 64]
 1011eb1:	f2 0f 59 c1 	mulsd	xmm0, xmm1
 1011eb5:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 1011eba:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011ebe:	e8 5d 8d 01 00 	call	101725 <_runtime.printint>
 1011ec3:	48 8d 05 e5 0e 06 00 	lea	rax, [rip + 397029]
 1011eca:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011ece:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011ed7:	e8 04 8f 01 00 	call	102148 <_runtime.printstring>
 1011edc:	f2 0f 10 44 24 58 	movsd	xmm0, qword ptr [rsp + 88]
 1011ee2:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011ee7:	e8 04 89 01 00 	call	100612 <_runtime.printfloat>
 1011eec:	48 8d 05 c1 0e 06 00 	lea	rax, [rip + 396993]
 1011ef3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011ef7:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011f00:	e8 db 8e 01 00 	call	102107 <_runtime.printstring>
 1011f05:	f2 0f 10 05 e3 17 07 00 	movsd	xmm0, qword ptr [rip + 464867]
 1011f0d:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011f12:	e8 d9 88 01 00 	call	100569 <_runtime.printfloat>
 1011f17:	48 8d 05 5a 0e 06 00 	lea	rax, [rip + 396890]
 1011f1e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011f22:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1011f2b:	e8 b0 8e 01 00 	call	102064 <_runtime.printstring>
 1011f30:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1011f35:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011f39:	e8 e2 8c 01 00 	call	101602 <_runtime.printint>
 1011f3e:	48 8d 05 7a 10 06 00 	lea	rax, [rip + 397434]
 1011f45:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011f49:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1011f52:	e8 89 8e 01 00 	call	102025 <_runtime.printstring>
 1011f57:	f2 0f 10 44 24 60 	movsd	xmm0, qword ptr [rsp + 96]
 1011f5d:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011f62:	e8 89 88 01 00 	call	100489 <_runtime.printfloat>
 1011f67:	48 8d 05 4f 12 06 00 	lea	rax, [rip + 397903]
 1011f6e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011f72:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1011f7b:	e8 60 8e 01 00 	call	101984 <_runtime.printstring>
 1011f80:	f2 0f 10 44 24 48 	movsd	xmm0, qword ptr [rsp + 72]
 1011f86:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011f8b:	e8 60 88 01 00 	call	100448 <_runtime.printfloat>
 1011f90:	48 8d 05 56 11 06 00 	lea	rax, [rip + 397654]
 1011f97:	48 89 04 24 	mov	qword ptr [rsp], rax
 1011f9b:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1011fa4:	e8 37 8e 01 00 	call	101943 <_runtime.printstring>
 1011fa9:	f2 0f 10 44 24 50 	movsd	xmm0, qword ptr [rsp + 80]
 1011faf:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 1011fb4:	e8 37 88 01 00 	call	100407 <_runtime.printfloat>
 1011fb9:	e8 72 87 01 00 	call	100210 <_runtime.printnl>
 1011fbe:	e8 5d 85 01 00 	call	99677 <_runtime.printunlock>
 1011fc3:	f2 0f 10 44 24 10 	movsd	xmm0, qword ptr [rsp + 16]
 1011fc9:	f2 0f 11 84 24 90 00 00 00 	movsd	qword ptr [rsp + 144], xmm0
 1011fd2:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1011fd7:	48 83 ec 80 	sub	rsp, -128
 1011fdb:	c3 	ret
 1011fdc:	48 89 c6 	mov	rsi, rax
 1011fdf:	48 d1 e8 	shr	rax
 1011fe2:	48 83 e6 01 	and	rsi, 1
 1011fe6:	48 09 f0 	or	rax, rsi
 1011fe9:	0f 57 e4 	xorps	xmm4, xmm4
 1011fec:	f2 48 0f 2a e0 	cvtsi2sd	xmm4, rax
 1011ff1:	f2 0f 58 e4 	addsd	xmm4, xmm4
 1011ff5:	e9 83 fd ff ff 	jmp	-637 <_runtime.(*gcControllerState).endCycle+0x1cd>
 1011ffa:	f2 0f 10 15 e6 16 07 00 	movsd	xmm2, qword ptr [rip + 464614]
 1012002:	e9 b2 fc ff ff 	jmp	-846 <_runtime.(*gcControllerState).endCycle+0x109>
 1012007:	48 89 c8 	mov	rax, rcx
 101200a:	48 83 e1 01 	and	rcx, 1
 101200e:	48 d1 e8 	shr	rax
 1012011:	48 09 c8 	or	rax, rcx
 1012014:	0f 57 d2 	xorps	xmm2, xmm2
 1012017:	f2 48 0f 2a d0 	cvtsi2sd	xmm2, rax
 101201c:	f2 0f 58 d2 	addsd	xmm2, xmm2
 1012020:	e9 31 fc ff ff 	jmp	-975 <_runtime.(*gcControllerState).endCycle+0xa6>
 1012025:	48 89 c2 	mov	rdx, rax
 1012028:	48 d1 e8 	shr	rax
 101202b:	48 83 e2 01 	and	rdx, 1
 101202f:	48 09 d0 	or	rax, rdx
 1012032:	0f 57 c9 	xorps	xmm1, xmm1
 1012035:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 101203a:	f2 0f 58 c9 	addsd	xmm1, xmm1
 101203e:	48 85 c9 	test	rcx, rcx
 1012041:	e9 f6 fb ff ff 	jmp	-1034 <_runtime.(*gcControllerState).endCycle+0x8c>
 1012046:	48 89 c8 	mov	rax, rcx
 1012049:	48 83 e1 01 	and	rcx, 1
 101204d:	48 89 c2 	mov	rdx, rax
 1012050:	48 d1 e8 	shr	rax
 1012053:	48 09 c8 	or	rax, rcx
 1012056:	0f 57 c9 	xorps	xmm1, xmm1
 1012059:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 101205e:	f2 0f 58 c9 	addsd	xmm1, xmm1
 1012062:	48 89 d1 	mov	rcx, rdx
 1012065:	e9 a7 fb ff ff 	jmp	-1113 <_runtime.(*gcControllerState).endCycle+0x61>
 101206a:	48 89 c2 	mov	rdx, rax
 101206d:	48 83 e0 01 	and	rax, 1
 1012071:	48 d1 ea 	shr	rdx
 1012074:	48 09 c2 	or	rdx, rax
 1012077:	0f 57 c0 	xorps	xmm0, xmm0
 101207a:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 101207f:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1012083:	e9 78 fb ff ff 	jmp	-1160 <_runtime.(*gcControllerState).endCycle+0x50>
 1012088:	f2 0f 10 05 d0 7c 0e 00 	movsd	xmm0, qword ptr [rip + 949456]
 1012090:	f2 0f 11 84 24 90 00 00 00 	movsd	qword ptr [rsp + 144], xmm0
 1012099:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 101209e:	48 83 ec 80 	sub	rsp, -128
 10120a2:	c3 	ret
 10120a3:	e8 28 eb 03 00 	call	256808 <_runtime.morestack_noctxt>
 10120a8:	e9 03 fb ff ff 	jmp	-1277 <_runtime.(*gcControllerState).endCycle>
 10120ad:	cc 	int3
 10120ae:	cc 	int3
 10120af:	cc 	int3

_runtime.(*gcControllerState).enlistWorker:
 10120b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10120b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10120bd:	0f 86 5a 01 00 00 	jbe	346 <_runtime.(*gcControllerState).enlistWorker+0x16d>
 10120c3:	48 83 ec 28 	sub	rsp, 40
 10120c7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10120cc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10120d1:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10120d6:	48 83 7a 38 00 	cmp	qword ptr [rdx + 56], 0
 10120db:	0f 8e 29 01 00 00 	jle	297 <_runtime.(*gcControllerState).enlistWorker+0x15a>
 10120e1:	83 3d b8 56 0e 00 01 	cmp	dword ptr [rip + 939704], 1
 10120e8:	0f 8e 12 01 00 00 	jle	274 <_runtime.(*gcControllerState).enlistWorker+0x150>
 10120ee:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 10120f7:	48 85 d2 	test	rdx, rdx
 10120fa:	0f 84 f6 00 00 00 	je	246 <_runtime.(*gcControllerState).enlistWorker+0x146>
 1012100:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 1012104:	48 85 d2 	test	rdx, rdx
 1012107:	0f 84 e9 00 00 00 	je	233 <_runtime.(*gcControllerState).enlistWorker+0x146>
 101210d:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 1012114:	48 85 d2 	test	rdx, rdx
 1012117:	0f 84 d9 00 00 00 	je	217 <_runtime.(*gcControllerState).enlistWorker+0x146>
 101211d:	8b 12 	mov	edx, dword ptr [rdx]
 101211f:	89 54 24 14 	mov	dword ptr [rsp + 20], edx
 1012123:	31 c0 	xor	eax, eax
 1012125:	eb 03 	jmp	3 <_runtime.(*gcControllerState).enlistWorker+0x7a>
 1012127:	48 ff c0 	inc	rax
 101212a:	48 83 f8 05 	cmp	rax, 5
 101212e:	0f 8d b8 00 00 00 	jge	184 <_runtime.(*gcControllerState).enlistWorker+0x13c>
 1012134:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 101213d:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1012141:	8b 35 59 56 0e 00 	mov	esi, dword ptr [rip + 939609]
 1012147:	8b bb 20 01 00 00 	mov	edi, dword ptr [rbx + 288]
 101214d:	44 8b 83 24 01 00 00 	mov	r8d, dword ptr [rbx + 292]
 1012154:	44 89 83 20 01 00 00 	mov	dword ptr [rbx + 288], r8d
 101215b:	41 89 f9 	mov	r9d, edi
 101215e:	c1 e7 11 	shl	edi, 17
 1012161:	41 31 f9 	xor	r9d, edi
 1012164:	44 89 c7 	mov	edi, r8d
 1012167:	45 31 c8 	xor	r8d, r9d
 101216a:	41 c1 e9 07 	shr	r9d, 7
 101216e:	45 31 c1 	xor	r9d, r8d
 1012171:	41 89 f8 	mov	r8d, edi
 1012174:	c1 ef 10 	shr	edi, 16
 1012177:	44 31 cf 	xor	edi, r9d
 101217a:	89 bb 24 01 00 00 	mov	dword ptr [rbx + 292], edi
 1012180:	8d 5e ff 	lea	ebx, [rsi - 1]
 1012183:	41 8d 34 38 	lea	esi, [r8 + rdi]
 1012187:	48 0f af f3 	imul	rsi, rbx
 101218b:	48 c1 ee 20 	shr	rsi, 32
 101218f:	39 d6 	cmp	esi, edx
 1012191:	7c 54 	jl	84 <_runtime.(*gcControllerState).enlistWorker+0x137>
 1012193:	8d 5e 01 	lea	ebx, [rsi + 1]
 1012196:	48 63 db 	movsxd	rbx, ebx
 1012199:	48 8b 0d a8 c1 0b 00 	mov	rcx, qword ptr [rip + 770472]
 10121a0:	48 8b 35 99 c1 0b 00 	mov	rsi, qword ptr [rip + 770457]
 10121a7:	48 39 cb 	cmp	rbx, rcx
 10121aa:	73 68 	jae	104 <_runtime.(*gcControllerState).enlistWorker+0x164>
 10121ac:	48 8b 1c de 	mov	rbx, qword ptr [rsi + 8*rbx]
 10121b0:	83 7b 04 01 	cmp	dword ptr [rbx + 4], 1
 10121b4:	0f 85 6d ff ff ff 	jne	-147 <_runtime.(*gcControllerState).enlistWorker+0x77>
 10121ba:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10121bf:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10121c3:	e8 88 3f 02 00 	call	147336 <_runtime.preemptone>
 10121c8:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 10121cd:	75 0e 	jne	14 <_runtime.(*gcControllerState).enlistWorker+0x12d>
 10121cf:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10121d4:	8b 54 24 14 	mov	edx, dword ptr [rsp + 20]
 10121d8:	e9 4a ff ff ff 	jmp	-182 <_runtime.(*gcControllerState).enlistWorker+0x77>
 10121dd:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10121e2:	48 83 c4 28 	add	rsp, 40
 10121e6:	c3 	ret
 10121e7:	48 89 f3 	mov	rbx, rsi
 10121ea:	eb aa 	jmp	-86 <_runtime.(*gcControllerState).enlistWorker+0xe6>
 10121ec:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10121f1:	48 83 c4 28 	add	rsp, 40
 10121f5:	c3 	ret
 10121f6:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10121fb:	48 83 c4 28 	add	rsp, 40
 10121ff:	c3 	ret
 1012200:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1012205:	48 83 c4 28 	add	rsp, 40
 1012209:	c3 	ret
 101220a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101220f:	48 83 c4 28 	add	rsp, 40
 1012213:	c3 	ret
 1012214:	48 89 d8 	mov	rax, rbx
 1012217:	e8 34 11 04 00 	call	266548 <_runtime.panicIndex>
 101221c:	90 	nop
 101221d:	e8 ae e9 03 00 	call	256430 <_runtime.morestack_noctxt>
 1012222:	e9 89 fe ff ff 	jmp	-375 <_runtime.(*gcControllerState).enlistWorker>
 1012227:	cc 	int3
 1012228:	cc 	int3
 1012229:	cc 	int3
 101222a:	cc 	int3
 101222b:	cc 	int3
 101222c:	cc 	int3
 101222d:	cc 	int3
 101222e:	cc 	int3
 101222f:	cc 	int3

_runtime.(*gcControllerState).findRunnableGCWorker:
 1012230:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1012239:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101223d:	0f 86 21 02 00 00 	jbe	545 <_runtime.(*gcControllerState).findRunnableGCWorker+0x234>
 1012243:	48 83 ec 20 	sub	rsp, 32
 1012247:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101224c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1012251:	83 3d 38 55 0e 00 00 	cmp	dword ptr [rip + 939320], 0
 1012258:	0f 84 ec 01 00 00 	je	492 <_runtime.(*gcControllerState).findRunnableGCWorker+0x21a>
 101225e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1012263:	84 00 	test	byte ptr [rax], al
 1012265:	48 83 b8 80 16 00 00 00 	cmp	qword ptr [rax + 5760], 0
 101226d:	0f 84 c4 01 00 00 	je	452 <_runtime.(*gcControllerState).findRunnableGCWorker+0x207>
 1012273:	48 8b 88 98 16 00 00 	mov	rcx, qword ptr [rax + 5784]
 101227a:	48 85 c9 	test	rcx, rcx
 101227d:	74 1d 	je	29 <_runtime.(*gcControllerState).findRunnableGCWorker+0x6c>
 101227f:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 1012284:	0f 85 a3 01 00 00 	jne	419 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1fd>
 101228a:	48 8b 88 a0 16 00 00 	mov	rcx, qword ptr [rax + 5792]
 1012291:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 1012296:	0f 85 91 01 00 00 	jne	401 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1fd>
 101229c:	48 8b 0d 9d c6 0b 00 	mov	rcx, qword ptr [rip + 771741]
 10122a3:	48 85 c9 	test	rcx, rcx
 10122a6:	0f 85 77 01 00 00 	jne	375 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1f3>
 10122ac:	8b 0d 1a c7 0b 00 	mov	ecx, dword ptr [rip + 771866]
 10122b2:	39 0d 10 c7 0b 00 	cmp	dword ptr [rip + 771856], ecx
 10122b8:	0f 83 5e 01 00 00 	jae	350 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1ec>
 10122be:	b9 01 00 00 00 	mov	ecx, 1
 10122c3:	84 c9 	test	cl, cl
 10122c5:	0f 84 3e 01 00 00 	je	318 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1d9>
 10122cb:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10122d0:	48 83 79 38 00 	cmp	qword ptr [rcx + 56], 0
 10122d5:	0f 8e 27 01 00 00 	jle	295 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1d2>
 10122db:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 10122e2:	f0 	lock
 10122e3:	48 0f c1 51 38 	xadd	qword ptr [rcx + 56], rdx
 10122e8:	48 ff ca 	dec	rdx
 10122eb:	48 85 d2 	test	rdx, rdx
 10122ee:	0f 8c 03 01 00 00 	jl	259 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1c7>
 10122f4:	ba 01 00 00 00 	mov	edx, 1
 10122f9:	84 d2 	test	dl, dl
 10122fb:	74 65 	je	101 <_runtime.(*gcControllerState).findRunnableGCWorker+0x132>
 10122fd:	48 c7 80 88 16 00 00 00 00 00 00 	mov	qword ptr [rax + 5768], 0
 1012308:	48 8b 80 80 16 00 00 	mov	rax, qword ptr [rax + 5760]
 101230f:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1012314:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012318:	48 b9 04 00 00 00 01 00 00 00 	movabs	rcx, 4294967300
 1012322:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1012327:	e8 e4 af 01 00 	call	110564 <_runtime.casgstatus>
 101232c:	80 3d fd 2b 0c 00 00 	cmp	byte ptr [rip + 797693], 0
 1012333:	75 14 	jne	20 <_runtime.(*gcControllerState).findRunnableGCWorker+0x119>
 1012335:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101233a:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101233f:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1012344:	48 83 c4 20 	add	rsp, 32
 1012348:	c3 	ret
 1012349:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101234e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012352:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 101235b:	e8 b0 4a 03 00 	call	215728 <_runtime.traceGoUnpark>
 1012360:	eb d3 	jmp	-45 <_runtime.(*gcControllerState).findRunnableGCWorker+0x105>
 1012362:	f2 0f 10 41 50 	movsd	xmm0, qword ptr [rcx + 80]
 1012367:	0f 57 c9 	xorps	xmm1, xmm1
 101236a:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 101236e:	75 02 	jne	2 <_runtime.(*gcControllerState).findRunnableGCWorker+0x142>
 1012370:	7b 72 	jnp	114 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1b4>
 1012372:	e8 49 0f 03 00 	call	200521 <_runtime.nanotime1>
 1012377:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101237b:	48 2b 05 2e 5a 0e 00 	sub	rax, qword ptr [rip + 940590]
 1012382:	48 85 c0 	test	rax, rax
 1012385:	7e 56 	jle	86 <_runtime.(*gcControllerState).findRunnableGCWorker+0x1ad>
 1012387:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101238c:	48 8b 91 78 16 00 00 	mov	rdx, qword ptr [rcx + 5752]
 1012393:	0f 57 c0 	xorps	xmm0, xmm0
 1012396:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 101239b:	0f 57 c9 	xorps	xmm1, xmm1
 101239e:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 10123a3:	f2 0f 5e c1 	divsd	xmm0, xmm1
 10123a7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10123ac:	f2 0f 10 48 50 	movsd	xmm1, qword ptr [rax + 80]
 10123b1:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 10123b5:	77 13 	ja	19 <_runtime.(*gcControllerState).findRunnableGCWorker+0x19a>
 10123b7:	48 c7 81 88 16 00 00 01 00 00 00 	mov	qword ptr [rcx + 5768], 1
 10123c2:	48 89 c8 	mov	rax, rcx
 10123c5:	e9 3e ff ff ff 	jmp	-194 <_runtime.(*gcControllerState).findRunnableGCWorker+0xd8>
 10123ca:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 10123d3:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10123d8:	48 83 c4 20 	add	rsp, 32
 10123dc:	c3 	ret
 10123dd:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10123e2:	eb d3 	jmp	-45 <_runtime.(*gcControllerState).findRunnableGCWorker+0x187>
 10123e4:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 10123ed:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10123f2:	48 83 c4 20 	add	rsp, 32
 10123f6:	c3 	ret
 10123f7:	ba 01 00 00 00 	mov	edx, 1
 10123fc:	f0 	lock
 10123fd:	48 0f c1 51 38 	xadd	qword ptr [rcx + 56], rdx
 1012402:	31 d2 	xor	edx, edx
 1012404:	e9 f0 fe ff ff 	jmp	-272 <_runtime.(*gcControllerState).findRunnableGCWorker+0xc9>
 1012409:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 1012412:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1012417:	48 83 c4 20 	add	rsp, 32
 101241b:	c3 	ret
 101241c:	31 c9 	xor	ecx, ecx
 101241e:	e9 a0 fe ff ff 	jmp	-352 <_runtime.(*gcControllerState).findRunnableGCWorker+0x93>
 1012423:	b9 01 00 00 00 	mov	ecx, 1
 1012428:	e9 96 fe ff ff 	jmp	-362 <_runtime.(*gcControllerState).findRunnableGCWorker+0x93>
 101242d:	b9 01 00 00 00 	mov	ecx, 1
 1012432:	e9 8c fe ff ff 	jmp	-372 <_runtime.(*gcControllerState).findRunnableGCWorker+0x93>
 1012437:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 1012440:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1012445:	48 83 c4 20 	add	rsp, 32
 1012449:	c3 	ret
 101244a:	48 8d 05 c2 4e 06 00 	lea	rax, [rip + 413378]
 1012451:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012455:	48 c7 44 24 08 36 00 00 00 	mov	qword ptr [rsp + 8], 54
 101245e:	e8 fd 68 01 00 	call	92413 <_runtime.throw>
 1012463:	90 	nop
 1012464:	e8 67 e7 03 00 	call	255847 <_runtime.morestack_noctxt>
 1012469:	e9 c2 fd ff ff 	jmp	-574 <_runtime.(*gcControllerState).findRunnableGCWorker>
 101246e:	cc 	int3
 101246f:	cc 	int3

_runtime.pollFractionalWorkerExit:
 1012470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1012479:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101247d:	0f 86 99 00 00 00 	jbe	153 <_runtime.pollFractionalWorkerExit+0xac>
 1012483:	48 83 ec 10 	sub	rsp, 16
 1012487:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 101248c:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1012491:	90 	nop
 1012492:	e8 29 0e 03 00 	call	200233 <_runtime.nanotime1>
 1012497:	48 8b 05 12 59 0e 00 	mov	rax, qword ptr [rip + 940306]
 101249e:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 10124a2:	48 89 ca 	mov	rdx, rcx
 10124a5:	48 29 c1 	sub	rcx, rax
 10124a8:	48 85 c9 	test	rcx, rcx
 10124ab:	7f 0f 	jg	15 <_runtime.pollFractionalWorkerExit+0x4c>
 10124ad:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 10124b2:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10124b7:	48 83 c4 10 	add	rsp, 16
 10124bb:	c3 	ret
 10124bc:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10124c5:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10124c9:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 10124d0:	84 00 	test	byte ptr [rax], al
 10124d2:	48 8b 98 90 16 00 00 	mov	rbx, qword ptr [rax + 5776]
 10124d9:	48 29 da 	sub	rdx, rbx
 10124dc:	48 03 90 78 16 00 00 	add	rdx, qword ptr [rax + 5752]
 10124e3:	f2 0f 10 05 3d 12 07 00 	movsd	xmm0, qword ptr [rip + 463421]
 10124eb:	f2 0f 59 05 dd 58 0e 00 	mulsd	xmm0, qword ptr [rip + 940253]
 10124f3:	0f 57 c9 	xorps	xmm1, xmm1
 10124f6:	f2 48 0f 2a ca 	cvtsi2sd	xmm1, rdx
 10124fb:	0f 57 d2 	xorps	xmm2, xmm2
 10124fe:	f2 48 0f 2a d1 	cvtsi2sd	xmm2, rcx
 1012503:	f2 0f 5e ca 	divsd	xmm1, xmm2
 1012507:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 101250b:	0f 97 c0 	seta	al
 101250e:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1012512:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1012517:	48 83 c4 10 	add	rsp, 16
 101251b:	c3 	ret
 101251c:	e8 af e6 03 00 	call	255663 <_runtime.morestack_noctxt>
 1012521:	e9 4a ff ff ff 	jmp	-182 <_runtime.pollFractionalWorkerExit>
 1012526:	cc 	int3
 1012527:	cc 	int3
 1012528:	cc 	int3
 1012529:	cc 	int3
 101252a:	cc 	int3
 101252b:	cc 	int3
 101252c:	cc 	int3
 101252d:	cc 	int3
 101252e:	cc 	int3
 101252f:	cc 	int3

_runtime.gcSetTriggerRatio:
 1012530:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1012539:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101253d:	0f 86 d7 03 00 00 	jbe	983 <_runtime.gcSetTriggerRatio+0x3ea>
 1012543:	48 83 ec 48 	sub	rsp, 72
 1012547:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 101254c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1012551:	8b 0d 41 52 0e 00 	mov	ecx, dword ptr [rip + 938561]
 1012557:	85 c9 	test	ecx, ecx
 1012559:	0f 8c 5f 02 00 00 	jl	607 <_runtime.gcSetTriggerRatio+0x28e>
 101255f:	48 8b 15 1a 78 0e 00 	mov	rdx, qword ptr [rip + 948250]
 1012566:	48 63 d9 	movsxd	rbx, ecx
 1012569:	48 0f af da 	imul	rbx, rdx
 101256d:	48 d1 eb 	shr	rbx
 1012570:	48 b8 0b d7 a3 70 3d 0a d7 a3 	movabs	rax, -6640827866535438581
 101257a:	48 89 d6 	mov	rsi, rdx
 101257d:	48 f7 e3 	mul	rbx
 1012580:	48 c1 ea 05 	shr	rdx, 5
 1012584:	48 01 f2 	add	rdx, rsi
 1012587:	85 c9 	test	ecx, ecx
 1012589:	0f 8c 15 02 00 00 	jl	533 <_runtime.gcSetTriggerRatio+0x274>
 101258f:	0f 57 c0 	xorps	xmm0, xmm0
 1012592:	f2 0f 2a c1 	cvtsi2sd	xmm0, ecx
 1012596:	f2 0f 10 0d ba 11 07 00 	movsd	xmm1, qword ptr [rip + 463290]
 101259e:	f2 0f 5e c1 	divsd	xmm0, xmm1
 10125a2:	f2 0f 10 0d 66 11 07 00 	movsd	xmm1, qword ptr [rip + 463206]
 10125aa:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 10125ae:	f2 0f 10 54 24 50 	movsd	xmm2, qword ptr [rsp + 80]
 10125b4:	66 0f 2e d1 	ucomisd	xmm2, xmm1
 10125b8:	0f 86 de 01 00 00 	jbe	478 <_runtime.gcSetTriggerRatio+0x26c>
 10125be:	f2 0f 10 15 3a 11 07 00 	movsd	xmm2, qword ptr [rip + 463162]
 10125c6:	f2 0f 59 d0 	mulsd	xmm2, xmm0
 10125ca:	66 0f 2e d1 	ucomisd	xmm2, xmm1
 10125ce:	0f 86 c0 01 00 00 	jbe	448 <_runtime.gcSetTriggerRatio+0x264>
 10125d4:	f2 0f 11 15 84 77 0e 00 	movsd	qword ptr [rip + 948100], xmm2
 10125dc:	83 3d b5 51 0e 00 00 	cmp	dword ptr [rip + 938421], 0
 10125e3:	0f 8c 9f 01 00 00 	jl	415 <_runtime.gcSetTriggerRatio+0x258>
 10125e9:	48 8b 05 90 77 0e 00 	mov	rax, qword ptr [rip + 948112]
 10125f0:	48 85 c0 	test	rax, rax
 10125f3:	0f 8c 71 01 00 00 	jl	369 <_runtime.gcSetTriggerRatio+0x23a>
 10125f9:	0f 57 c0 	xorps	xmm0, xmm0
 10125fc:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1012601:	f2 0f 10 0d 0f 11 07 00 	movsd	xmm1, qword ptr [rip + 463119]
 1012609:	f2 0f 58 ca 	addsd	xmm1, xmm2
 101260d:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 1012611:	f2 0f 10 05 5f 11 07 00 	movsd	xmm0, qword ptr [rip + 463199]
 1012619:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 101261d:	0f 86 34 01 00 00 	jbe	308 <_runtime.gcSetTriggerRatio+0x227>
 1012623:	f2 48 0f 2c c1 	cvttsd2si	rax, xmm1
 1012628:	48 8b 0d 71 8b 0b 00 	mov	rcx, qword ptr [rip + 756593]
 101262f:	83 3d ae 2a 0e 00 00 	cmp	dword ptr [rip + 928430], 0
 1012636:	0f 84 01 01 00 00 	je	257 <_runtime.gcSetTriggerRatio+0x20d>
 101263c:	48 39 c8 	cmp	rax, rcx
 101263f:	48 0f 42 c1 	cmovb	rax, rcx
 1012643:	48 85 c0 	test	rax, rax
 1012646:	0f 8c 7e 01 00 00 	jl	382 <_runtime.gcSetTriggerRatio+0x29a>
 101264c:	48 39 d0 	cmp	rax, rdx
 101264f:	48 0f 47 d0 	cmova	rdx, rax
 1012653:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1012658:	48 89 05 09 77 0e 00 	mov	qword ptr [rip + 947977], rax
 101265f:	48 89 15 62 60 0e 00 	mov	qword ptr [rip + 942178], rdx
 1012666:	80 3d c3 28 0c 00 00 	cmp	byte ptr [rip + 796867], 0
 101266d:	0f 85 bb 00 00 00 	jne	187 <_runtime.gcSetTriggerRatio+0x1fe>
 1012673:	83 3d 22 51 0e 00 00 	cmp	dword ptr [rip + 938274], 0
 101267a:	0f 85 94 00 00 00 	jne	148 <_runtime.gcSetTriggerRatio+0x1e4>
 1012680:	83 3d 5d 2a 0e 00 00 	cmp	dword ptr [rip + 928349], 0
 1012687:	74 1a 	je	26 <_runtime.gcSetTriggerRatio+0x173>
 1012689:	0f 57 c0 	xorps	xmm0, xmm0
 101268c:	f2 0f 11 05 e4 2a 0e 00 	movsd	qword ptr [rip + 928484], xmm0
 1012694:	e8 47 65 00 00 	call	25927 <_runtime.gcPaceScavenger>
 1012699:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101269e:	48 83 c4 48 	add	rsp, 72
 10126a2:	c3 	ret
 10126a3:	48 8b 0d c6 76 0e 00 	mov	rcx, qword ptr [rip + 947910]
 10126aa:	48 8b 15 af 2a 0e 00 	mov	rdx, qword ptr [rip + 928431]
 10126b1:	48 8b 1d a0 2a 0e 00 	mov	rbx, qword ptr [rip + 928416]
 10126b8:	48 29 c8 	sub	rax, rcx
 10126bb:	48 05 00 00 f0 ff 	add	rax, -1048576
 10126c1:	48 3d 00 20 00 00 	cmp	rax, 8192
 10126c7:	be 00 20 00 00 	mov	esi, 8192
 10126cc:	48 0f 4c c6 	cmovl	rax, rsi
 10126d0:	48 29 d3 	sub	rbx, rdx
 10126d3:	48 85 db 	test	rbx, rbx
 10126d6:	7f 0d 	jg	13 <_runtime.gcSetTriggerRatio+0x1b5>
 10126d8:	0f 57 c0 	xorps	xmm0, xmm0
 10126db:	f2 0f 11 05 95 2a 0e 00 	movsd	qword ptr [rip + 928405], xmm0
 10126e3:	eb af 	jmp	-81 <_runtime.gcSetTriggerRatio+0x164>
 10126e5:	0f 57 c0 	xorps	xmm0, xmm0
 10126e8:	f2 48 0f 2a c3 	cvtsi2sd	xmm0, rbx
 10126ed:	0f 57 c9 	xorps	xmm1, xmm1
 10126f0:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 10126f5:	f2 0f 5e c1 	divsd	xmm0, xmm1
 10126f9:	f2 0f 11 05 77 2a 0e 00 	movsd	qword ptr [rip + 928375], xmm0
 1012701:	48 89 0d 68 2a 0e 00 	mov	qword ptr [rip + 928360], rcx
 1012708:	48 8d 05 59 2a 0e 00 	lea	rax, [rip + 928345]
 101270f:	48 87 10 	xchg	qword ptr [rax], rdx
 1012712:	eb 80 	jmp	-128 <_runtime.gcSetTriggerRatio+0x164>
 1012714:	48 8d 05 65 56 0e 00 	lea	rax, [rip + 939621]
 101271b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101271f:	e8 5c f3 ff ff 	call	-3236 <_runtime.(*gcControllerState).revise>
 1012724:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1012729:	e9 52 ff ff ff 	jmp	-174 <_runtime.gcSetTriggerRatio+0x150>
 101272e:	e8 6d 4a 03 00 	call	215661 <_runtime.traceNextGC>
 1012733:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1012738:	e9 36 ff ff ff 	jmp	-202 <_runtime.gcSetTriggerRatio+0x143>
 101273d:	48 8b 1d 2c 76 0e 00 	mov	rbx, qword ptr [rip + 947756]
 1012744:	48 81 c3 00 00 10 00 	add	rbx, 1048576
 101274b:	48 39 cb 	cmp	rbx, rcx
 101274e:	48 0f 47 cb 	cmova	rcx, rbx
 1012752:	e9 e5 fe ff ff 	jmp	-283 <_runtime.gcSetTriggerRatio+0x10c>
 1012757:	f2 0f 5c c8 	subsd	xmm1, xmm0
 101275b:	f2 48 0f 2c c1 	cvttsd2si	rax, xmm1
 1012760:	48 0f ba e8 3f 	bts	rax, 63
 1012765:	e9 be fe ff ff 	jmp	-322 <_runtime.gcSetTriggerRatio+0xf8>
 101276a:	48 89 c1 	mov	rcx, rax
 101276d:	48 d1 e8 	shr	rax
 1012770:	48 83 e1 01 	and	rcx, 1
 1012774:	48 09 c1 	or	rcx, rax
 1012777:	0f 57 c0 	xorps	xmm0, xmm0
 101277a:	f2 48 0f 2a c1 	cvtsi2sd	xmm0, rcx
 101277f:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1012783:	e9 79 fe ff ff 	jmp	-391 <_runtime.gcSetTriggerRatio+0xd1>
 1012788:	48 c7 c0 ff ff ff ff 	mov	rax, -1
 101278f:	e9 bf fe ff ff 	jmp	-321 <_runtime.gcSetTriggerRatio+0x123>
 1012794:	0f 10 d1 	movups	xmm2, xmm1
 1012797:	e9 38 fe ff ff 	jmp	-456 <_runtime.gcSetTriggerRatio+0xa4>
 101279c:	0f 10 ca 	movups	xmm1, xmm2
 101279f:	e9 1a fe ff ff 	jmp	-486 <_runtime.gcSetTriggerRatio+0x8e>
 10127a4:	0f 57 c0 	xorps	xmm0, xmm0
 10127a7:	f2 0f 10 4c 24 50 	movsd	xmm1, qword ptr [rsp + 80]
 10127ad:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 10127b1:	76 03 	jbe	3 <_runtime.gcSetTriggerRatio+0x286>
 10127b3:	0f 57 c9 	xorps	xmm1, xmm1
 10127b6:	0f 10 d1 	movups	xmm2, xmm1
 10127b9:	e9 16 fe ff ff 	jmp	-490 <_runtime.gcSetTriggerRatio+0xa4>
 10127be:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 10127c5:	e9 bf fd ff ff 	jmp	-577 <_runtime.gcSetTriggerRatio+0x59>
 10127ca:	f2 0f 11 54 24 50 	movsd	qword ptr [rsp + 80], xmm2
 10127d0:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10127d5:	48 8b 05 ec 5e 0e 00 	mov	rax, qword ptr [rip + 941804]
 10127dc:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10127e1:	48 8b 0d 98 75 0e 00 	mov	rcx, qword ptr [rip + 947608]
 10127e8:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10127ed:	48 8b 15 7c 75 0e 00 	mov	rdx, qword ptr [rip + 947580]
 10127f4:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10127f9:	48 8b 1d 40 c2 0b 00 	mov	rbx, qword ptr [rip + 770624]
 1012800:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1012805:	e8 96 7c 01 00 	call	97430 <_runtime.printlock>
 101280a:	48 8d 05 63 15 06 00 	lea	rax, [rip + 398691]
 1012811:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012815:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 101281e:	e8 bd 85 01 00 	call	99773 <_runtime.printstring>
 1012823:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1012828:	48 89 04 24 	mov	qword ptr [rsp], rax
 101282c:	e8 ef 82 01 00 	call	99055 <_runtime.printuint>
 1012831:	48 8d 05 30 0e 06 00 	lea	rax, [rip + 396848]
 1012838:	48 89 04 24 	mov	qword ptr [rsp], rax
 101283c:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1012845:	e8 96 85 01 00 	call	99734 <_runtime.printstring>
 101284a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101284f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012853:	e8 c8 82 01 00 	call	99016 <_runtime.printuint>
 1012858:	48 8d 05 ac 0a 06 00 	lea	rax, [rip + 395948]
 101285f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012863:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 101286c:	e8 6f 85 01 00 	call	99695 <_runtime.printstring>
 1012871:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1012876:	48 89 04 24 	mov	qword ptr [rsp], rax
 101287a:	e8 a1 82 01 00 	call	98977 <_runtime.printuint>
 101287f:	48 8d 05 bc 13 06 00 	lea	rax, [rip + 398268]
 1012886:	48 89 04 24 	mov	qword ptr [rsp], rax
 101288a:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1012893:	e8 48 85 01 00 	call	99656 <_runtime.printstring>
 1012898:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101289d:	48 89 04 24 	mov	qword ptr [rsp], rax
 10128a1:	e8 7a 82 01 00 	call	98938 <_runtime.printuint>
 10128a6:	48 8d 05 e6 0e 06 00 	lea	rax, [rip + 397030]
 10128ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 10128b1:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10128ba:	e8 21 85 01 00 	call	99617 <_runtime.printstring>
 10128bf:	f2 0f 10 44 24 50 	movsd	xmm0, qword ptr [rsp + 80]
 10128c5:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 10128ca:	e8 21 7f 01 00 	call	98081 <_runtime.printfloat>
 10128cf:	48 8d 05 dd 0b 06 00 	lea	rax, [rip + 396253]
 10128d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10128da:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 10128e3:	e8 f8 84 01 00 	call	99576 <_runtime.printstring>
 10128e8:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10128ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10128f1:	e8 2a 82 01 00 	call	98858 <_runtime.printuint>
 10128f6:	e8 35 7e 01 00 	call	97845 <_runtime.printnl>
 10128fb:	e8 20 7c 01 00 	call	97312 <_runtime.printunlock>
 1012900:	48 8d 05 05 19 06 00 	lea	rax, [rip + 399621]
 1012907:	48 89 04 24 	mov	qword ptr [rsp], rax
 101290b:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1012914:	e8 47 64 01 00 	call	91207 <_runtime.throw>
 1012919:	90 	nop
 101291a:	e8 b1 e2 03 00 	call	254641 <_runtime.morestack_noctxt>
 101291f:	e9 0c fc ff ff 	jmp	-1012 <_runtime.gcSetTriggerRatio>
 1012924:	cc 	int3
 1012925:	cc 	int3
 1012926:	cc 	int3
 1012927:	cc 	int3
 1012928:	cc 	int3
 1012929:	cc 	int3
 101292a:	cc 	int3
 101292b:	cc 	int3
 101292c:	cc 	int3
 101292d:	cc 	int3
 101292e:	cc 	int3
 101292f:	cc 	int3

_runtime.gcWaitOnMark:
 1012930:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1012939:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101293d:	0f 86 a1 00 00 00 	jbe	161 <_runtime.gcWaitOnMark+0xb4>
 1012943:	48 83 ec 28 	sub	rsp, 40
 1012947:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101294c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1012951:	eb 4c 	jmp	76 <_runtime.gcWaitOnMark+0x6f>
 1012953:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101295c:	48 8b 0d 05 c1 0b 00 	mov	rcx, qword ptr [rip + 770309]
 1012963:	48 89 88 a0 00 00 00 	mov	qword ptr [rax + 160], rcx
 101296a:	90 	nop
 101296b:	48 89 05 f6 c0 0b 00 	mov	qword ptr [rip + 770294], rax
 1012972:	90 	nop
 1012973:	48 8d 05 de 4f 06 00 	lea	rax, [rip + 413662]
 101297a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101297e:	48 8d 0d db c0 0b 00 	lea	rcx, [rip + 770267]
 1012985:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101298a:	66 c7 44 24 10 17 14 	mov	word ptr [rsp + 16], 5143
 1012991:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 101299a:	e8 a1 8d 01 00 	call	101793 <_runtime.gopark>
 101299f:	48 8d 05 ba c0 0b 00 	lea	rax, [rip + 770234]
 10129a6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10129aa:	e8 81 57 ff ff 	call	-43135 <_runtime.lock>
 10129af:	8b 05 bb c0 0b 00 	mov	eax, dword ptr [rip + 770235]
 10129b5:	8d 48 01 	lea	ecx, [rax + 1]
 10129b8:	83 3d dd 4d 0e 00 01 	cmp	dword ptr [rip + 937437], 1
 10129bf:	0f 45 c1 	cmovne	eax, ecx
 10129c2:	8b 4c 24 30 	mov	ecx, dword ptr [rsp + 48]
 10129c6:	39 c8 	cmp	eax, ecx
 10129c8:	76 89 	jbe	-119 <_runtime.gcWaitOnMark+0x23>
 10129ca:	48 8d 05 8f c0 0b 00 	lea	rax, [rip + 770191]
 10129d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10129d5:	e8 36 59 ff ff 	call	-42698 <_runtime.unlock>
 10129da:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10129df:	48 83 c4 28 	add	rsp, 40
 10129e3:	c3 	ret
 10129e4:	e8 e7 e1 03 00 	call	254439 <_runtime.morestack_noctxt>
 10129e9:	e9 42 ff ff ff 	jmp	-190 <_runtime.gcWaitOnMark>
 10129ee:	cc 	int3
 10129ef:	cc 	int3

_runtime.gcStart:
 10129f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10129f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10129fd:	0f 86 69 06 00 00 	jbe	1641 <_runtime.gcStart+0x67c>
 1012a03:	48 83 ec 68 	sub	rsp, 104
 1012a07:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 1012a0c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1012a11:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1012a1a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1012a1e:	90 	nop
 1012a1f:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1012a25:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1012a29:	84 00 	test	byte ptr [rax], al
 1012a2b:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1012a34:	48 39 01 	cmp	qword ptr [rcx], rax
 1012a37:	0f 84 51 05 00 00 	je	1361 <_runtime.gcStart+0x59e>
 1012a3d:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 1012a43:	83 fa 01 	cmp	edx, 1
 1012a46:	0f 8f 42 05 00 00 	jg	1346 <_runtime.gcStart+0x59e>
 1012a4c:	48 83 b9 00 01 00 00 00 	cmp	qword ptr [rcx + 256], 0
 1012a54:	0f 85 34 05 00 00 	jne	1332 <_runtime.gcStart+0x59e>
 1012a5a:	90 	nop
 1012a5b:	8d 5a ff 	lea	ebx, [rdx - 1]
 1012a5e:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 1012a64:	83 fa 01 	cmp	edx, 1
 1012a67:	75 11 	jne	17 <_runtime.gcStart+0x8a>
 1012a69:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1012a70:	74 08 	je	8 <_runtime.gcStart+0x8a>
 1012a72:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1012a7a:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1012a7f:	8b 8c 24 80 00 00 00 	mov	ecx, dword ptr [rsp + 128]
 1012a86:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1012a8b:	eb 06 	jmp	6 <_runtime.gcStart+0xa3>
 1012a8d:	ff 05 e1 b9 0b 00 	inc	dword ptr [rip + 768481]
 1012a93:	80 3d 56 6c 0e 00 00 	cmp	byte ptr [rip + 945238], 0
 1012a9a:	74 0d 	je	13 <_runtime.gcStart+0xb9>
 1012a9c:	83 3d 15 4d 0e 00 00 	cmp	dword ptr [rip + 937237], 0
 1012aa3:	0f 84 54 04 00 00 	je	1108 <_runtime.gcStart+0x50d>
 1012aa9:	31 db 	xor	ebx, ebx
 1012aab:	84 db 	test	bl, bl
 1012aad:	0f 85 27 04 00 00 	jne	1063 <_runtime.gcStart+0x4ea>
 1012ab3:	31 db 	xor	ebx, ebx
 1012ab5:	84 db 	test	bl, bl
 1012ab7:	75 d4 	jne	-44 <_runtime.gcStart+0x9d>
 1012ab9:	90 	nop
 1012aba:	48 8d 05 4f bf 0b 00 	lea	rax, [rip + 769871]
 1012ac1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012ac5:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1012aca:	0f 57 c0 	xorps	xmm0, xmm0
 1012acd:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1012ad2:	e8 09 67 02 00 	call	157449 <_runtime.semacquire1>
 1012ad7:	80 3d 12 6c 0e 00 00 	cmp	byte ptr [rip + 945170], 0
 1012ade:	74 0d 	je	13 <_runtime.gcStart+0xfd>
 1012ae0:	83 3d d1 4c 0e 00 00 	cmp	dword ptr [rip + 937169], 0
 1012ae7:	0f 84 54 03 00 00 	je	852 <_runtime.gcStart+0x451>
 1012aed:	31 c0 	xor	eax, eax
 1012aef:	84 c0 	test	al, al
 1012af1:	0f 84 21 03 00 00 	je	801 <_runtime.gcStart+0x428>
 1012af7:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1012afc:	48 83 f8 02 	cmp	rax, 2
 1012b00:	0f 94 05 29 bf 0b 00 	sete	byte ptr [rip + 769833]
 1012b07:	8b 05 4f 4f 0e 00 	mov	eax, dword ptr [rip + 937807]
 1012b0d:	83 f8 01 	cmp	eax, 1
 1012b10:	0f 85 ec 02 00 00 	jne	748 <_runtime.gcStart+0x412>
 1012b16:	b8 01 00 00 00 	mov	eax, 1
 1012b1b:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1012b20:	48 8d 0d 49 86 0b 00 	lea	rcx, [rip + 755273]
 1012b27:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1012b2b:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1012b30:	0f 57 c0 	xorps	xmm0, xmm0
 1012b33:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1012b38:	e8 a3 66 02 00 	call	157347 <_runtime.semacquire1>
 1012b3d:	80 3d ec 23 0c 00 00 	cmp	byte ptr [rip + 795628], 0
 1012b44:	0f 85 68 02 00 00 	jne	616 <_runtime.gcStart+0x3c2>
 1012b4a:	48 8b 05 ef b7 0b 00 	mov	rax, qword ptr [rip + 767983]
 1012b51:	48 8b 0d f0 b7 0b 00 	mov	rcx, qword ptr [rip + 767984]
 1012b58:	31 d2 	xor	edx, edx
 1012b5a:	eb 03 	jmp	3 <_runtime.gcStart+0x16f>
 1012b5c:	48 ff c2 	inc	rdx
 1012b5f:	48 39 ca 	cmp	rdx, rcx
 1012b62:	7d 1d 	jge	29 <_runtime.gcStart+0x191>
 1012b64:	48 8b 1c d0 	mov	rbx, qword ptr [rax + 8*rdx]
 1012b68:	48 8b 73 40 	mov	rsi, qword ptr [rbx + 64]
 1012b6c:	8b b6 c0 06 00 00 	mov	esi, dword ptr [rsi + 1728]
 1012b72:	8b 3d 68 25 0e 00 	mov	edi, dword ptr [rip + 927080]
 1012b78:	39 fe 	cmp	esi, edi
 1012b7a:	74 e0 	je	-32 <_runtime.gcStart+0x16c>
 1012b7c:	e9 3d 04 00 00 	jmp	1085 <_runtime.gcStart+0x5ce>
 1012b81:	e8 0a 13 00 00 	call	4874 <_runtime.gcBgMarkStartWorkers>
 1012b86:	48 8d 05 b3 4c 06 00 	lea	rax, [rip + 412851]
 1012b8d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012b91:	e8 ea de 03 00 	call	253674 <_runtime.systemstack>
 1012b96:	8b 05 04 4c 0e 00 	mov	eax, dword ptr [rip + 936964]
 1012b9c:	89 05 d2 be 0b 00 	mov	dword ptr [rip + 769746], eax
 1012ba2:	89 05 d0 be 0b 00 	mov	dword ptr [rip + 769744], eax
 1012ba8:	8b 0d fa 4b 0e 00 	mov	ecx, dword ptr [rip + 936954]
 1012bae:	39 c8 	cmp	eax, ecx
 1012bb0:	7e 06 	jle	6 <_runtime.gcStart+0x1c8>
 1012bb2:	89 0d bc be 0b 00 	mov	dword ptr [rip + 769724], ecx
 1012bb8:	48 8b 05 b1 71 0e 00 	mov	rax, qword ptr [rip + 946609]
 1012bbf:	48 89 05 ea be 0b 00 	mov	qword ptr [rip + 769770], rax
 1012bc6:	48 c7 05 cf be 0b 00 00 00 00 00 	mov	qword ptr [rip + 769743], 0
 1012bd1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1012bd6:	48 89 05 4b be 0b 00 	mov	qword ptr [rip + 769611], rax
 1012bdd:	e8 de 06 03 00 	call	198366 <_runtime.nanotime1>
 1012be2:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1012be6:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1012beb:	48 89 05 8e be 0b 00 	mov	qword ptr [rip + 769678], rax
 1012bf2:	48 89 05 af be 0b 00 	mov	qword ptr [rip + 769711], rax
 1012bf9:	80 3d 30 23 0c 00 00 	cmp	byte ptr [rip + 795440], 0
 1012c00:	0f 85 67 01 00 00 	jne	359 <_runtime.gcStart+0x37d>
 1012c06:	48 8d 05 53 4e 06 00 	lea	rax, [rip + 413267]
 1012c0d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012c11:	e8 6a de 03 00 	call	253546 <_runtime.systemstack>
 1012c16:	48 8d 05 2b 4c 06 00 	lea	rax, [rip + 412715]
 1012c1d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012c21:	e8 5a de 03 00 	call	253530 <_runtime.systemstack>
 1012c26:	e8 15 20 00 00 	call	8213 <_runtime.clearpools>
 1012c2b:	ff 05 3f be 0b 00 	inc	dword ptr [rip + 769599]
 1012c31:	48 8d 05 48 51 0e 00 	lea	rax, [rip + 938312]
 1012c38:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012c3c:	e8 7f eb ff ff 	call	-5249 <_runtime.(*gcControllerState).startCycle>
 1012c41:	48 8b 05 80 5a 0e 00 	mov	rax, qword ptr [rip + 940672]
 1012c48:	48 89 05 79 be 0b 00 	mov	qword ptr [rip + 769657], rax
 1012c4f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1012c54:	48 85 c0 	test	rax, rax
 1012c57:	0f 85 fd 00 00 00 	jne	253 <_runtime.gcStart+0x36a>
 1012c5d:	90 	nop
 1012c5e:	b9 01 00 00 00 	mov	ecx, 1
 1012c63:	48 8d 15 32 4b 0e 00 	lea	rdx, [rip + 936754]
 1012c6a:	87 0a 	xchg	dword ptr [rdx], ecx
 1012c6c:	8b 0d 2a 4b 0e 00 	mov	ecx, dword ptr [rip + 936746]
 1012c72:	83 f9 01 	cmp	ecx, 1
 1012c75:	0f 85 d4 00 00 00 	jne	212 <_runtime.gcStart+0x35f>
 1012c7b:	b9 01 00 00 00 	mov	ecx, 1
 1012c80:	88 0d 7e 4c 0e 00 	mov	byte ptr [rip + 937086], cl
 1012c86:	84 c9 	test	cl, cl
 1012c88:	0f 84 b5 00 00 00 	je	181 <_runtime.gcStart+0x353>
 1012c8e:	b9 01 00 00 00 	mov	ecx, 1
 1012c93:	88 0d 67 4c 0e 00 	mov	byte ptr [rip + 937063], cl
 1012c99:	90 	nop
 1012c9a:	c7 05 2c bd 0b 00 ff ff ff ff 	mov	dword ptr [rip + 769324], 4294967295
 1012ca4:	c7 05 32 bd 0b 00 ff ff ff ff 	mov	dword ptr [rip + 769330], 4294967295
 1012cae:	e8 5d 23 00 00 	call	9053 <_runtime.gcMarkRootPrepare>
 1012cb3:	e8 78 5b 00 00 	call	23416 <_runtime.gcMarkTinyAllocs>
 1012cb8:	b8 01 00 00 00 	mov	eax, 1
 1012cbd:	48 8d 0d cc 4a 0e 00 	lea	rcx, [rip + 936652]
 1012cc4:	87 01 	xchg	dword ptr [rcx], eax
 1012cc6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1012ccb:	48 89 05 de 50 0e 00 	mov	qword ptr [rip + 938206], rax
 1012cd2:	0f 57 c0 	xorps	xmm0, xmm0
 1012cd5:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1012cda:	48 8d 05 df b0 03 00 	lea	rax, [rip + 241887]
 1012ce1:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1012ce6:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 1012ceb:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1012cf0:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1012cf5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012cf9:	e8 82 dd 03 00 	call	253314 <_runtime.systemstack>
 1012cfe:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1012d03:	48 85 c0 	test	rax, rax
 1012d06:	75 28 	jne	40 <_runtime.gcStart+0x340>
 1012d08:	48 8d 05 01 bd 0b 00 	lea	rax, [rip + 769281]
 1012d0f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012d13:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1012d18:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1012d21:	e8 9a 67 02 00 	call	157594 <_runtime.semrelease1>
 1012d26:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1012d2b:	48 83 c4 68 	add	rsp, 104
 1012d2f:	c3 	ret
 1012d30:	90 	nop
 1012d31:	48 8d 05 30 4b 06 00 	lea	rax, [rip + 412464]
 1012d38:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012d3c:	e8 bf dc 03 00 	call	253119 <_runtime.mcall>
 1012d41:	eb c5 	jmp	-59 <_runtime.gcStart+0x318>
 1012d43:	0f b6 0d bb 4b 0e 00 	movzx	ecx, byte ptr [rip + 936891]
 1012d4a:	e9 44 ff ff ff 	jmp	-188 <_runtime.gcStart+0x2a3>
 1012d4f:	83 f9 02 	cmp	ecx, 2
 1012d52:	0f 94 c1 	sete	cl
 1012d55:	e9 26 ff ff ff 	jmp	-218 <_runtime.gcStart+0x290>
 1012d5a:	c6 04 24 00 	mov	byte ptr [rsp], 0
 1012d5e:	e8 cd 3f 02 00 	call	147405 <_runtime.schedEnableUser>
 1012d63:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1012d68:	e9 f0 fe ff ff 	jmp	-272 <_runtime.gcStart+0x26d>
 1012d6d:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1012d76:	48 c7 44 24 48 01 00 00 00 	mov	qword ptr [rsp + 72], 1
 1012d7f:	c6 04 24 09 	mov	byte ptr [rsp], 9
 1012d83:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1012d8c:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1012d91:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1012d96:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1012d9f:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1012da8:	e8 43 2d 03 00 	call	208195 <_runtime.traceEvent>
 1012dad:	e9 54 fe ff ff 	jmp	-428 <_runtime.gcStart+0x216>
 1012db2:	90 	nop
 1012db3:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1012dbc:	48 8b 05 9d 21 0c 00 	mov	rax, qword ptr [rip + 795037]
 1012dc3:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1012dc8:	c6 04 24 07 	mov	byte ptr [rsp], 7
 1012dcc:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1012dd5:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1012dda:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1012ddf:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1012de8:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1012df1:	e8 fa 2c 03 00 	call	208122 <_runtime.traceEvent>
 1012df6:	48 ff 05 63 21 0c 00 	inc	qword ptr [rip + 794979]
 1012dfd:	e9 48 fd ff ff 	jmp	-696 <_runtime.gcStart+0x15a>
 1012e02:	83 f8 02 	cmp	eax, 2
 1012e05:	b8 00 00 00 00 	mov	eax, 0
 1012e0a:	b9 02 00 00 00 	mov	ecx, 2
 1012e0f:	48 0f 44 c1 	cmove	rax, rcx
 1012e13:	e9 03 fd ff ff 	jmp	-765 <_runtime.gcStart+0x12b>
 1012e18:	90 	nop
 1012e19:	48 8d 05 f0 bb 0b 00 	lea	rax, [rip + 769008]
 1012e20:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012e24:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1012e29:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1012e32:	e8 89 66 02 00 	call	157321 <_runtime.semrelease1>
 1012e37:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1012e3c:	48 83 c4 68 	add	rsp, 104
 1012e40:	c3 	ret
 1012e41:	83 3d 54 49 0e 00 00 	cmp	dword ptr [rip + 936276], 0
 1012e48:	0f 85 9f fc ff ff 	jne	-865 <_runtime.gcStart+0xfd>
 1012e4e:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1012e53:	48 85 c0 	test	rax, rax
 1012e56:	75 18 	jne	24 <_runtime.gcStart+0x480>
 1012e58:	48 8b 0d 09 6f 0e 00 	mov	rcx, qword ptr [rip + 945929]
 1012e5f:	48 39 0d 0a 6f 0e 00 	cmp	qword ptr [rip + 945930], rcx
 1012e66:	0f 93 c1 	setae	cl
 1012e69:	89 c8 	mov	eax, ecx
 1012e6b:	e9 7f fc ff ff 	jmp	-897 <_runtime.gcStart+0xff>
 1012e70:	48 83 f8 01 	cmp	rax, 1
 1012e74:	75 39 	jne	57 <_runtime.gcStart+0x4bf>
 1012e76:	83 3d 1b 49 0e 00 00 	cmp	dword ptr [rip + 936219], 0
 1012e7d:	7d 07 	jge	7 <_runtime.gcStart+0x496>
 1012e7f:	31 c0 	xor	eax, eax
 1012e81:	e9 69 fc ff ff 	jmp	-919 <_runtime.gcStart+0xff>
 1012e86:	48 8b 0d b3 6e 0e 00 	mov	rcx, qword ptr [rip + 945843]
 1012e8d:	48 85 c9 	test	rcx, rcx
 1012e90:	74 19 	je	25 <_runtime.gcStart+0x4bb>
 1012e92:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1012e97:	48 29 ca 	sub	rdx, rcx
 1012e9a:	48 39 15 f7 82 0b 00 	cmp	qword ptr [rip + 754423], rdx
 1012ea1:	0f 9c c1 	setl	cl
 1012ea4:	89 c8 	mov	eax, ecx
 1012ea6:	e9 44 fc ff ff 	jmp	-956 <_runtime.gcStart+0xff>
 1012eab:	31 c9 	xor	ecx, ecx
 1012ead:	eb f5 	jmp	-11 <_runtime.gcStart+0x4b4>
 1012eaf:	48 83 f8 02 	cmp	rax, 2
 1012eb3:	75 1b 	jne	27 <_runtime.gcStart+0x4e0>
 1012eb5:	8b 0d b5 bb 0b 00 	mov	ecx, dword ptr [rip + 768949]
 1012ebb:	8b 94 24 80 00 00 00 	mov	edx, dword ptr [rsp + 128]
 1012ec2:	29 ca 	sub	edx, ecx
 1012ec4:	85 d2 	test	edx, edx
 1012ec6:	0f 9f c1 	setg	cl
 1012ec9:	89 c8 	mov	eax, ecx
 1012ecb:	e9 1f fc ff ff 	jmp	-993 <_runtime.gcStart+0xff>
 1012ed0:	b8 01 00 00 00 	mov	eax, 1
 1012ed5:	e9 15 fc ff ff 	jmp	-1003 <_runtime.gcStart+0xff>
 1012eda:	e8 71 7c 00 00 	call	31857 <_runtime.sweepone>
 1012edf:	48 83 3c 24 ff 	cmp	qword ptr [rsp], -1
 1012ee4:	0f 95 c3 	setne	bl
 1012ee7:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1012eec:	8b 8c 24 80 00 00 00 	mov	ecx, dword ptr [rsp + 128]
 1012ef3:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1012ef8:	e9 b8 fb ff ff 	jmp	-1096 <_runtime.gcStart+0xc5>
 1012efd:	83 3d 98 48 0e 00 00 	cmp	dword ptr [rip + 936088], 0
 1012f04:	0f 85 9f fb ff ff 	jne	-1121 <_runtime.gcStart+0xb9>
 1012f0a:	48 85 d2 	test	rdx, rdx
 1012f0d:	75 16 	jne	22 <_runtime.gcStart+0x535>
 1012f0f:	48 8b 35 52 6e 0e 00 	mov	rsi, qword ptr [rip + 945746]
 1012f16:	48 39 35 53 6e 0e 00 	cmp	qword ptr [rip + 945747], rsi
 1012f1d:	0f 93 c3 	setae	bl
 1012f20:	e9 86 fb ff ff 	jmp	-1146 <_runtime.gcStart+0xbb>
 1012f25:	48 83 fa 01 	cmp	rdx, 1
 1012f29:	75 3d 	jne	61 <_runtime.gcStart+0x578>
 1012f2b:	83 3d 66 48 0e 00 00 	cmp	dword ptr [rip + 936038], 0
 1012f32:	7d 07 	jge	7 <_runtime.gcStart+0x54b>
 1012f34:	31 db 	xor	ebx, ebx
 1012f36:	e9 70 fb ff ff 	jmp	-1168 <_runtime.gcStart+0xbb>
 1012f3b:	48 8b 1d fe 6d 0e 00 	mov	rbx, qword ptr [rip + 945662]
 1012f42:	48 85 db 	test	rbx, rbx
 1012f45:	74 1a 	je	26 <_runtime.gcStart+0x571>
 1012f47:	48 89 c6 	mov	rsi, rax
 1012f4a:	48 29 d8 	sub	rax, rbx
 1012f4d:	48 39 05 44 82 0b 00 	cmp	qword ptr [rip + 754244], rax
 1012f54:	0f 9c c0 	setl	al
 1012f57:	89 c3 	mov	ebx, eax
 1012f59:	48 89 f0 	mov	rax, rsi
 1012f5c:	e9 4a fb ff ff 	jmp	-1206 <_runtime.gcStart+0xbb>
 1012f61:	48 89 c6 	mov	rsi, rax
 1012f64:	31 c0 	xor	eax, eax
 1012f66:	eb ef 	jmp	-17 <_runtime.gcStart+0x567>
 1012f68:	48 83 fa 02 	cmp	rdx, 2
 1012f6c:	75 16 	jne	22 <_runtime.gcStart+0x594>
 1012f6e:	8b 35 fc ba 0b 00 	mov	esi, dword ptr [rip + 768764]
 1012f74:	89 cf 	mov	edi, ecx
 1012f76:	29 f1 	sub	ecx, esi
 1012f78:	85 c9 	test	ecx, ecx
 1012f7a:	0f 9f c3 	setg	bl
 1012f7d:	89 f9 	mov	ecx, edi
 1012f7f:	e9 27 fb ff ff 	jmp	-1241 <_runtime.gcStart+0xbb>
 1012f84:	bb 01 00 00 00 	mov	ebx, 1
 1012f89:	e9 1d fb ff ff 	jmp	-1251 <_runtime.gcStart+0xbb>
 1012f8e:	90 	nop
 1012f8f:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 1012f95:	8d 5a ff 	lea	ebx, [rdx - 1]
 1012f98:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 1012f9e:	83 fa 01 	cmp	edx, 1
 1012fa1:	75 11 	jne	17 <_runtime.gcStart+0x5c4>
 1012fa3:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1012faa:	74 08 	je	8 <_runtime.gcStart+0x5c4>
 1012fac:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1012fb4:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1012fb9:	48 83 c4 68 	add	rsp, 104
 1012fbd:	c3 	ret
 1012fbe:	89 74 24 28 	mov	dword ptr [rsp + 40], esi
 1012fc2:	89 7c 24 2c 	mov	dword ptr [rsp + 44], edi
 1012fc6:	48 63 03 	movsxd	rax, dword ptr [rbx]
 1012fc9:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1012fce:	e8 cd 74 01 00 	call	95437 <_runtime.printlock>
 1012fd3:	48 8d 05 65 04 06 00 	lea	rax, [rip + 394341]
 1012fda:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012fde:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1012fe7:	e8 f4 7d 01 00 	call	97780 <_runtime.printstring>
 1012fec:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1012ff1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1012ff5:	e8 26 7c 01 00 	call	97318 <_runtime.printint>
 1012ffa:	48 8d 05 c6 01 06 00 	lea	rax, [rip + 393670]
 1013001:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013005:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 101300e:	e8 cd 7d 01 00 	call	97741 <_runtime.printstring>
 1013013:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1013017:	89 c0 	mov	eax, eax
 1013019:	48 89 04 24 	mov	qword ptr [rsp], rax
 101301d:	e8 fe 7a 01 00 	call	97022 <_runtime.printuint>
 1013022:	48 8d 05 fe 05 06 00 	lea	rax, [rip + 394750]
 1013029:	48 89 04 24 	mov	qword ptr [rsp], rax
 101302d:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1013036:	e8 a5 7d 01 00 	call	97701 <_runtime.printstring>
 101303b:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 101303f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013043:	e8 d8 7a 01 00 	call	96984 <_runtime.printuint>
 1013048:	e8 e3 76 01 00 	call	95971 <_runtime.printnl>
 101304d:	e8 ce 74 01 00 	call	95438 <_runtime.printunlock>
 1013052:	48 8d 05 3f 12 06 00 	lea	rax, [rip + 397887]
 1013059:	48 89 04 24 	mov	qword ptr [rsp], rax
 101305d:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1013066:	e8 f5 5c 01 00 	call	89333 <_runtime.throw>
 101306b:	90 	nop
 101306c:	e8 5f db 03 00 	call	252767 <_runtime.morestack_noctxt>
 1013071:	e9 7a f9 ff ff 	jmp	-1670 <_runtime.gcStart>
 1013076:	cc 	int3
 1013077:	cc 	int3
 1013078:	cc 	int3
 1013079:	cc 	int3
 101307a:	cc 	int3
 101307b:	cc 	int3
 101307c:	cc 	int3
 101307d:	cc 	int3
 101307e:	cc 	int3
 101307f:	cc 	int3

_runtime.gcMarkDone:
 1013080:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1013089:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101308d:	0f 86 9c 02 00 00 	jbe	668 <_runtime.gcMarkDone+0x2af>
 1013093:	48 83 ec 50 	sub	rsp, 80
 1013097:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 101309c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 10130a1:	48 8d 05 6c b9 0b 00 	lea	rax, [rip + 768364]
 10130a8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10130ac:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 10130b1:	0f 57 c0 	xorps	xmm0, xmm0
 10130b4:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 10130b9:	e8 22 61 02 00 	call	155938 <_runtime.semacquire1>
 10130be:	eb 10 	jmp	16 <_runtime.gcMarkDone+0x50>
 10130c0:	48 8d 05 51 47 06 00 	lea	rax, [rip + 411473]
 10130c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10130cb:	e8 b0 d9 03 00 	call	252336 <_runtime.systemstack>
 10130d0:	83 3d c5 46 0e 00 01 	cmp	dword ptr [rip + 935621], 1
 10130d7:	0f 85 4b 02 00 00 	jne	587 <_runtime.gcMarkDone+0x2a8>
 10130dd:	8b 05 ed b8 0b 00 	mov	eax, dword ptr [rip + 768237]
 10130e3:	39 05 f7 b8 0b 00 	cmp	dword ptr [rip + 768247], eax
 10130e9:	0f 85 32 02 00 00 	jne	562 <_runtime.gcMarkDone+0x2a1>
 10130ef:	48 8b 05 4a b8 0b 00 	mov	rax, qword ptr [rip + 768074]
 10130f6:	48 85 c0 	test	rax, rax
 10130f9:	0f 85 18 02 00 00 	jne	536 <_runtime.gcMarkDone+0x297>
 10130ff:	8b 05 c7 b8 0b 00 	mov	eax, dword ptr [rip + 768199]
 1013105:	39 05 bd b8 0b 00 	cmp	dword ptr [rip + 768189], eax
 101310b:	0f 83 ff 01 00 00 	jae	511 <_runtime.gcMarkDone+0x290>
 1013111:	b8 01 00 00 00 	mov	eax, 1
 1013116:	83 f0 01 	xor	eax, 1
 1013119:	84 c0 	test	al, al
 101311b:	0f 84 c6 01 00 00 	je	454 <_runtime.gcMarkDone+0x267>
 1013121:	c7 05 69 46 0e 00 00 00 00 00 	mov	dword ptr [rip + 935529], 0
 101312b:	48 8d 05 de 46 06 00 	lea	rax, [rip + 411358]
 1013132:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013136:	e8 45 d9 03 00 	call	252229 <_runtime.systemstack>
 101313b:	83 3d 52 46 0e 00 00 	cmp	dword ptr [rip + 935506], 0
 1013142:	75 8c 	jne	-116 <_runtime.gcMarkDone+0x50>
 1013144:	90 	nop
 1013145:	e8 76 01 03 00 	call	196982 <_runtime.nanotime1>
 101314a:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101314e:	48 89 05 3b b9 0b 00 	mov	qword ptr [rip + 768315], rax
 1013155:	48 89 05 4c b9 0b 00 	mov	qword ptr [rip + 768332], rax
 101315c:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1013165:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1013169:	48 c7 80 00 01 00 00 05 00 00 00 	mov	qword ptr [rax + 256], 5
 1013174:	83 3d 85 47 0e 00 00 	cmp	dword ptr [rip + 935813], 0
 101317b:	0f 85 4e 01 00 00 	jne	334 <_runtime.gcMarkDone+0x24f>
 1013181:	48 8d 0d 4f fc 05 00 	lea	rcx, [rip + 392271]
 1013188:	48 89 88 f8 00 00 00 	mov	qword ptr [rax + 248], rcx
 101318f:	80 3d 9a 1d 0c 00 00 	cmp	byte ptr [rip + 794010], 0
 1013196:	0f 85 ee 00 00 00 	jne	238 <_runtime.gcMarkDone+0x20a>
 101319c:	48 8d 05 bd 48 06 00 	lea	rax, [rip + 411837]
 10131a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10131a7:	e8 d4 d8 03 00 	call	252116 <_runtime.systemstack>
 10131ac:	c6 44 24 2f 00 	mov	byte ptr [rsp + 47], 0
 10131b1:	0f 57 c0 	xorps	xmm0, xmm0
 10131b4:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 10131b9:	48 8d 05 80 ad 03 00 	lea	rax, [rip + 241024]
 10131c0:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10131c5:	48 8d 4c 24 2f 	lea	rcx, [rsp + 47]
 10131ca:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10131cf:	48 8d 4c 24 38 	lea	rcx, [rsp + 56]
 10131d4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10131d8:	e8 a3 d8 03 00 	call	252067 <_runtime.systemstack>
 10131dd:	80 7c 24 2f 00 	cmp	byte ptr [rsp + 47], 0
 10131e2:	74 44 	je	68 <_runtime.gcMarkDone+0x1a8>
 10131e4:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10131ed:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 10131f1:	48 c7 81 00 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 256], 0
 10131fc:	83 3d fd 46 0e 00 00 	cmp	dword ptr [rip + 935677], 0
 1013203:	75 10 	jne	16 <_runtime.gcMarkDone+0x195>
 1013205:	48 c7 81 f8 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 248], 0
 1013210:	e9 ab fe ff ff 	jmp	-341 <_runtime.gcMarkDone+0x40>
 1013215:	48 8d b9 f8 00 00 00 	lea	rdi, [rcx + 248]
 101321c:	31 c0 	xor	eax, eax
 101321e:	e8 bd f7 03 00 	call	260029 <_runtime.gcWriteBarrier>
 1013223:	e9 98 fe ff ff 	jmp	-360 <_runtime.gcMarkDone+0x40>
 1013228:	31 c0 	xor	eax, eax
 101322a:	48 8d 0d 5f 45 0e 00 	lea	rcx, [rip + 935263]
 1013231:	87 01 	xchg	dword ptr [rcx], eax
 1013233:	e8 f8 2e 00 00 	call	12024 <_runtime.gcWakeAllAssists>
 1013238:	90 	nop
 1013239:	48 8d 05 d4 b7 0b 00 	lea	rax, [rip + 767956]
 1013240:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013244:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1013249:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1013252:	e8 69 62 02 00 	call	156265 <_runtime.semrelease1>
 1013257:	c6 04 24 01 	mov	byte ptr [rsp], 1
 101325b:	e8 d0 3a 02 00 	call	146128 <_runtime.schedEnableUser>
 1013260:	48 8d 05 19 4b 0e 00 	lea	rax, [rip + 936729]
 1013267:	48 89 04 24 	mov	qword ptr [rsp], rax
 101326b:	e8 40 e9 ff ff 	call	-5824 <_runtime.(*gcControllerState).endCycle>
 1013270:	f2 0f 10 44 24 08 	movsd	xmm0, qword ptr [rsp + 8]
 1013276:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 101327b:	e8 c0 00 00 00 	call	192 <_runtime.gcMarkTermination>
 1013280:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1013285:	48 83 c4 50 	add	rsp, 80
 1013289:	c3 	ret
 101328a:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 1013293:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 101329c:	c6 04 24 09 	mov	byte ptr [rsp], 9
 10132a0:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 10132a9:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 10132ae:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10132b3:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 10132bc:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 10132c5:	e8 26 28 03 00 	call	206886 <_runtime.traceEvent>
 10132ca:	e9 cd fe ff ff 	jmp	-307 <_runtime.gcMarkDone+0x11c>
 10132cf:	48 8d b8 f8 00 00 00 	lea	rdi, [rax + 248]
 10132d6:	48 8d 05 fa fa 05 00 	lea	rax, [rip + 391930]
 10132dd:	e8 fe f6 03 00 	call	259838 <_runtime.gcWriteBarrier>
 10132e2:	e9 a8 fe ff ff 	jmp	-344 <_runtime.gcMarkDone+0x10f>
 10132e7:	90 	nop
 10132e8:	48 8d 05 25 b7 0b 00 	lea	rax, [rip + 767781]
 10132ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10132f3:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 10132f8:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1013301:	e8 ba 61 02 00 	call	156090 <_runtime.semrelease1>
 1013306:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 101330b:	48 83 c4 50 	add	rsp, 80
 101330f:	c3 	ret
 1013310:	31 c0 	xor	eax, eax
 1013312:	e9 ff fd ff ff 	jmp	-513 <_runtime.gcMarkDone+0x96>
 1013317:	b8 01 00 00 00 	mov	eax, 1
 101331c:	e9 f5 fd ff ff 	jmp	-523 <_runtime.gcMarkDone+0x96>
 1013321:	31 c0 	xor	eax, eax
 1013323:	e9 f1 fd ff ff 	jmp	-527 <_runtime.gcMarkDone+0x99>
 1013328:	31 c0 	xor	eax, eax
 101332a:	e9 ea fd ff ff 	jmp	-534 <_runtime.gcMarkDone+0x99>
 101332f:	e8 9c d8 03 00 	call	252060 <_runtime.morestack_noctxt>
 1013334:	e9 47 fd ff ff 	jmp	-697 <_runtime.gcMarkDone>
 1013339:	cc 	int3
 101333a:	cc 	int3
 101333b:	cc 	int3
 101333c:	cc 	int3
 101333d:	cc 	int3
 101333e:	cc 	int3
 101333f:	cc 	int3

_runtime.gcMarkTermination:
 1013340:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1013349:	48 8d 84 24 c8 fe ff ff 	lea	rax, [rsp - 312]
 1013351:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1013355:	0f 86 20 0b 00 00 	jbe	2848 <_runtime.gcMarkTermination+0xb3b>
 101335b:	48 81 ec b8 01 00 00 	sub	rsp, 440
 1013362:	48 89 ac 24 b0 01 00 00 	mov	qword ptr [rsp + 432], rbp
 101336a:	48 8d ac 24 b0 01 00 00 	lea	rbp, [rsp + 432]
 1013372:	31 c0 	xor	eax, eax
 1013374:	48 8d 0d 15 44 0e 00 	lea	rcx, [rip + 934933]
 101337b:	87 01 	xchg	dword ptr [rcx], eax
 101337d:	90 	nop
 101337e:	b8 02 00 00 00 	mov	eax, 2
 1013383:	48 8d 0d 12 44 0e 00 	lea	rcx, [rip + 934930]
 101338a:	87 01 	xchg	dword ptr [rcx], eax
 101338c:	8b 05 0a 44 0e 00 	mov	eax, dword ptr [rip + 934922]
 1013392:	83 f8 01 	cmp	eax, 1
 1013395:	0f 85 bb 0a 00 00 	jne	2747 <_runtime.gcMarkTermination+0xb16>
 101339b:	b8 01 00 00 00 	mov	eax, 1
 10133a0:	88 05 5e 45 0e 00 	mov	byte ptr [rip + 935262], al
 10133a6:	84 c0 	test	al, al
 10133a8:	0f 84 9c 0a 00 00 	je	2716 <_runtime.gcMarkTermination+0xb0a>
 10133ae:	b8 01 00 00 00 	mov	eax, 1
 10133b3:	88 05 47 45 0e 00 	mov	byte ptr [rip + 935239], al
 10133b9:	48 8b 05 b0 69 0e 00 	mov	rax, qword ptr [rip + 944560]
 10133c0:	48 89 05 f1 b6 0b 00 	mov	qword ptr [rip + 767729], rax
 10133c7:	90 	nop
 10133c8:	e8 f3 fe 02 00 	call	196339 <_runtime.nanotime1>
 10133cd:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10133d6:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10133da:	90 	nop
 10133db:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 10133df:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 10133e4:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 10133ea:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10133ee:	48 89 8c 24 88 01 00 00 	mov	qword ptr [rsp + 392], rcx
 10133f6:	84 00 	test	byte ptr [rax], al
 10133f8:	48 c7 81 00 01 00 00 05 00 00 00 	mov	qword ptr [rcx + 256], 5
 1013403:	48 8d b9 f8 00 00 00 	lea	rdi, [rcx + 248]
 101340a:	48 89 bc 24 a8 01 00 00 	mov	qword ptr [rsp + 424], rdi
 1013412:	83 3d e7 44 0e 00 00 	cmp	dword ptr [rip + 935143], 0
 1013419:	0f 85 1a 0a 00 00 	jne	2586 <_runtime.gcMarkTermination+0xaf9>
 101341f:	48 8d 05 b1 f9 05 00 	lea	rax, [rip + 391601]
 1013426:	48 89 81 f8 00 00 00 	mov	qword ptr [rcx + 248], rax
 101342d:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1013436:	48 89 84 24 98 01 00 00 	mov	qword ptr [rsp + 408], rax
 101343e:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1013442:	c6 81 29 01 00 00 02 	mov	byte ptr [rcx + 297], 2
 1013449:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 101344d:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1013454:	48 89 8c 24 90 01 00 00 	mov	qword ptr [rsp + 400], rcx
 101345c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1013460:	48 ba 02 00 00 00 04 00 00 00 	movabs	rdx, 17179869186
 101346a:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101346f:	e8 9c 9e 01 00 	call	106140 <_runtime.casgstatus>
 1013474:	48 8b 84 24 90 01 00 00 	mov	rax, qword ptr [rsp + 400]
 101347c:	c6 80 b0 00 00 00 06 	mov	byte ptr [rax + 176], 6
 1013483:	0f 57 c0 	xorps	xmm0, xmm0
 1013486:	0f 11 84 24 c0 00 00 00 	movups	xmmword ptr [rsp + 192], xmm0
 101348e:	48 8d 0d bb ab 03 00 	lea	rcx, [rip + 240571]
 1013495:	48 89 8c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rcx
 101349d:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10134a2:	48 89 8c 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rcx
 10134aa:	48 8d 8c 24 c0 00 00 00 	lea	rcx, [rsp + 192]
 10134b2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10134b6:	e8 c5 d5 03 00 	call	251333 <_runtime.systemstack>
 10134bb:	48 8d 05 5e 43 06 00 	lea	rax, [rip + 410462]
 10134c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10134c6:	e8 b5 d5 03 00 	call	251317 <_runtime.systemstack>
 10134cb:	48 8b 84 24 98 01 00 00 	mov	rax, qword ptr [rsp + 408]
 10134d3:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10134d7:	c6 80 29 01 00 00 00 	mov	byte ptr [rax + 297], 0
 10134de:	48 8b 84 24 90 01 00 00 	mov	rax, qword ptr [rsp + 400]
 10134e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10134ea:	48 b8 04 00 00 00 02 00 00 00 	movabs	rax, 8589934596
 10134f4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10134f9:	e8 12 9e 01 00 	call	106002 <_runtime.casgstatus>
 10134fe:	80 3d 2b 1a 0c 00 00 	cmp	byte ptr [rip + 793131], 0
 1013505:	0f 85 06 09 00 00 	jne	2310 <_runtime.gcMarkTermination+0xad1>
 101350b:	48 8b 8c 24 88 01 00 00 	mov	rcx, qword ptr [rsp + 392]
 1013513:	48 c7 81 00 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 256], 0
 101351e:	83 3d db 43 0e 00 00 	cmp	dword ptr [rip + 934875], 0
 1013525:	0f 85 d2 08 00 00 	jne	2258 <_runtime.gcMarkTermination+0xabd>
 101352b:	48 c7 81 f8 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 248], 0
 1013536:	83 3d 5f 42 0e 00 00 	cmp	dword ptr [rip + 934495], 0
 101353d:	0f 85 1e 09 00 00 	jne	2334 <_runtime.gcMarkTermination+0xb21>
 1013543:	48 8b 05 7e 51 0e 00 	mov	rax, qword ptr [rip + 938366]
 101354a:	48 89 05 ff 67 0e 00 	mov	qword ptr [rip + 944127], rax
 1013551:	48 8b 05 10 51 0e 00 	mov	rax, qword ptr [rip + 938256]
 1013558:	48 89 05 f9 67 0e 00 	mov	qword ptr [rip + 944121], rax
 101355f:	f2 0f 10 84 24 c0 01 00 00 	movsd	xmm0, qword ptr [rsp + 448]
 1013568:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 101356d:	e8 be ef ff ff 	call	-4162 <_runtime.gcSetTriggerRatio>
 1013572:	e8 19 58 00 00 	call	22553 <_runtime.wakeScavenger>
 1013577:	90 	nop
 1013578:	e8 43 fd 02 00 	call	195907 <_runtime.nanotime1>
 101357d:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1013581:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1013586:	e8 45 23 03 00 	call	205637 <_time.now>
 101358b:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101358f:	48 63 4c 24 08 	movsxd	rcx, dword ptr [rsp + 8]
 1013594:	48 8b 15 0d b5 0b 00 	mov	rdx, qword ptr [rip + 767245]
 101359b:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 10135a0:	48 89 de 	mov	rsi, rbx
 10135a3:	48 29 d3 	sub	rbx, rdx
 10135a6:	48 01 1d f3 b4 0b 00 	add	qword ptr [rip + 767219], rbx
 10135ad:	48 89 35 e4 b4 0b 00 	mov	qword ptr [rip + 767204], rsi
 10135b4:	48 69 c0 00 ca 9a 3b 	imul	rax, rax, 1000000000
 10135bb:	48 01 c8 	add	rax, rcx
 10135be:	48 8d 0d 0b 51 0e 00 	lea	rcx, [rip + 938251]
 10135c5:	48 89 c2 	mov	rdx, rax
 10135c8:	48 87 01 	xchg	qword ptr [rcx], rax
 10135cb:	48 8d 05 6e 67 0e 00 	lea	rax, [rip + 943982]
 10135d2:	48 89 f1 	mov	rcx, rsi
 10135d5:	48 87 30 	xchg	qword ptr [rax], rsi
 10135d8:	0f b6 05 01 61 0e 00 	movzx	eax, byte ptr [rip + 942337]
 10135df:	48 8b 1d ba b4 0b 00 	mov	rbx, qword ptr [rip + 767162]
 10135e6:	48 8d 35 f3 50 0e 00 	lea	rsi, [rip + 938227]
 10135ed:	48 89 1c c6 	mov	qword ptr [rsi + 8*rax], rbx
 10135f1:	0f b6 05 e8 60 0e 00 	movzx	eax, byte ptr [rip + 942312]
 10135f8:	48 8d 1d e1 58 0e 00 	lea	rbx, [rip + 940257]
 10135ff:	48 89 14 c3 	mov	qword ptr [rbx + 8*rax], rdx
 1013603:	48 8b 05 ce 50 0e 00 	mov	rax, qword ptr [rip + 938190]
 101360a:	48 03 05 8f b4 0b 00 	add	rax, qword ptr [rip + 767119]
 1013611:	48 89 05 c0 50 0e 00 	mov	qword ptr [rip + 938176], rax
 1013618:	48 63 05 55 b4 0b 00 	movsxd	rax, dword ptr [rip + 767061]
 101361f:	48 8b 15 62 b4 0b 00 	mov	rdx, qword ptr [rip + 767074]
 1013626:	48 2b 15 53 b4 0b 00 	sub	rdx, qword ptr [rip + 767059]
 101362d:	48 0f af d0 	imul	rdx, rax
 1013631:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1013636:	48 8b 1d 5b 47 0e 00 	mov	rbx, qword ptr [rip + 935771]
 101363d:	48 03 1d 4c 47 0e 00 	add	rbx, qword ptr [rip + 935756]
 1013644:	48 03 1d 55 47 0e 00 	add	rbx, qword ptr [rip + 935765]
 101364b:	48 8b 35 46 b4 0b 00 	mov	rsi, qword ptr [rip + 767046]
 1013652:	48 2b 35 37 b4 0b 00 	sub	rsi, qword ptr [rip + 767031]
 1013659:	48 0f af c6 	imul	rax, rsi
 101365d:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1013662:	48 01 d3 	add	rbx, rdx
 1013665:	48 01 c3 	add	rbx, rax
 1013668:	48 03 1d c9 b3 0b 00 	add	rbx, qword ptr [rip + 766921]
 101366f:	48 89 1d c2 b3 0b 00 	mov	qword ptr [rip + 766914], rbx
 1013676:	48 8b 35 23 b1 0b 00 	mov	rsi, qword ptr [rip + 766243]
 101367d:	48 29 f1 	sub	rcx, rsi
 1013680:	48 63 35 19 41 0e 00 	movsxd	rsi, dword ptr [rip + 934169]
 1013687:	48 0f af f1 	imul	rsi, rcx
 101368b:	48 03 35 16 b1 0b 00 	add	rsi, qword ptr [rip + 766230]
 1013692:	0f 57 c0 	xorps	xmm0, xmm0
 1013695:	f2 48 0f 2a c3 	cvtsi2sd	xmm0, rbx
 101369a:	0f 57 c9 	xorps	xmm1, xmm1
 101369d:	f2 48 0f 2a ce 	cvtsi2sd	xmm1, rsi
 10136a2:	f2 0f 5e c1 	divsd	xmm0, xmm1
 10136a6:	f2 0f 11 05 3a 60 0e 00 	movsd	qword ptr [rip + 942138], xmm0
 10136ae:	48 c7 05 bb ad 0b 00 00 00 00 00 	mov	qword ptr [rip + 765371], 0
 10136b9:	80 3d 70 b3 0b 00 00 	cmp	byte ptr [rip + 766832], 0
 10136c0:	74 06 	je	6 <_runtime.gcMarkTermination+0x388>
 10136c2:	ff 05 1c 60 0e 00 	inc	dword ptr [rip + 942108]
 10136c8:	48 8d 05 91 b3 0b 00 	lea	rax, [rip + 766865]
 10136cf:	48 89 04 24 	mov	qword ptr [rsp], rax
 10136d3:	e8 58 4a ff ff 	call	-46504 <_runtime.lock>
 10136d8:	ff 05 02 60 0e 00 	inc	dword ptr [rip + 942082]
 10136de:	48 8d 05 83 b3 0b 00 	lea	rax, [rip + 766851]
 10136e5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10136e9:	e8 c2 d5 01 00 	call	120258 <_runtime.injectglist>
 10136ee:	48 8d 05 6b b3 0b 00 	lea	rax, [rip + 766827]
 10136f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10136f9:	e8 12 4c ff ff 	call	-46062 <_runtime.unlock>
 10136fe:	e8 bd 04 01 00 	call	66749 <_runtime.mProf_NextCycle>
 1013703:	48 8d 05 1e 41 06 00 	lea	rax, [rip + 409886]
 101370a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101370e:	e8 6d d3 03 00 	call	250733 <_runtime.systemstack>
 1013713:	e8 28 05 01 00 	call	66856 <_runtime.mProf_Flush>
 1013718:	e8 d3 91 00 00 	call	37331 <_runtime.prepareFreeWorkbufs>
 101371d:	48 8d 05 cc 40 06 00 	lea	rax, [rip + 409804]
 1013724:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013728:	e8 53 d3 03 00 	call	250707 <_runtime.systemstack>
 101372d:	48 8d 05 04 41 06 00 	lea	rax, [rip + 409860]
 1013734:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013738:	e8 43 d3 03 00 	call	250691 <_runtime.systemstack>
 101373d:	83 3d 1c 43 0e 00 00 	cmp	dword ptr [rip + 934684], 0
 1013744:	0f 8e 25 06 00 00 	jle	1573 <_runtime.gcMarkTermination+0xa2f>
 101374a:	f2 0f 10 05 06 00 07 00 	movsd	xmm0, qword ptr [rip + 458758]
 1013752:	f2 0f 59 05 8e 5f 0e 00 	mulsd	xmm0, qword ptr [rip + 941966]
 101375a:	f2 0f 11 84 24 b8 00 00 00 	movsd	qword ptr [rsp + 184], xmm0
 1013763:	48 c7 84 24 d0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 208], 0
 101376f:	0f 57 c9 	xorps	xmm1, xmm1
 1013772:	0f 11 8c 24 d8 00 00 00 	movups	xmmword ptr [rsp + 216], xmm1
 101377a:	e8 21 6d 01 00 	call	93473 <_runtime.printlock>
 101377f:	48 8b 05 fa b2 0b 00 	mov	rax, qword ptr [rip + 766714]
 1013786:	48 2b 05 2b 41 0e 00 	sub	rax, qword ptr [rip + 934187]
 101378d:	48 8d 8c 24 d0 00 00 00 	lea	rcx, [rsp + 208]
 1013795:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1013799:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 10137a2:	48 c7 44 24 10 18 00 00 00 	mov	qword ptr [rsp + 16], 24
 10137ab:	48 89 c2 	mov	rdx, rax
 10137ae:	48 b8 b6 69 6c af 05 bd 37 86 	movabs	rax, -8775337516792518218
 10137b8:	48 f7 e2 	mul	rdx
 10137bb:	48 c1 ea 13 	shr	rdx, 19
 10137bf:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10137c4:	48 c7 44 24 20 03 00 00 00 	mov	qword ptr [rsp + 32], 3
 10137cd:	e8 ce 15 00 00 	call	5582 <_runtime.itoaDiv>
 10137d2:	8b 05 08 5f 0e 00 	mov	eax, dword ptr [rip + 941832]
 10137d8:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 10137e0:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10137e5:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10137ea:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 10137ef:	48 8d b4 24 40 01 00 00 	lea	rsi, [rsp + 320]
 10137f7:	48 89 34 24 	mov	qword ptr [rsp], rsi
 10137fb:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1013800:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1013805:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101380a:	e8 f1 d2 02 00 	call	185073 <_runtime.slicebytetostring>
 101380f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1013814:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 101381c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1013821:	48 89 8c 24 a0 01 00 00 	mov	qword ptr [rsp + 416], rcx
 1013829:	e8 72 6c 01 00 	call	93298 <_runtime.printlock>
 101382e:	48 8d 05 8b f4 05 00 	lea	rax, [rip + 390283]
 1013835:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013839:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1013842:	e8 99 75 01 00 	call	95641 <_runtime.printstring>
 1013847:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 101384f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013853:	e8 c8 72 01 00 	call	94920 <_runtime.printuint>
 1013858:	48 8d 05 0b f4 05 00 	lea	rax, [rip + 390155]
 101385f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013863:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 101386c:	e8 6f 75 01 00 	call	95599 <_runtime.printstring>
 1013871:	48 8b 84 24 a0 01 00 00 	mov	rax, qword ptr [rsp + 416]
 1013879:	48 89 04 24 	mov	qword ptr [rsp], rax
 101387d:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1013885:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101388a:	e8 51 75 01 00 	call	95569 <_runtime.printstring>
 101388f:	48 8d 05 f0 f3 05 00 	lea	rax, [rip + 390128]
 1013896:	48 89 04 24 	mov	qword ptr [rsp], rax
 101389a:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10138a3:	e8 38 75 01 00 	call	95544 <_runtime.printstring>
 10138a8:	f2 0f 10 84 24 b8 00 00 00 	movsd	xmm0, qword ptr [rsp + 184]
 10138b1:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 10138b6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10138ba:	e8 61 73 01 00 	call	95073 <_runtime.printint>
 10138bf:	48 8d 05 dc f3 05 00 	lea	rax, [rip + 390108]
 10138c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10138ca:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 10138d3:	e8 08 75 01 00 	call	95496 <_runtime.printstring>
 10138d8:	e8 43 6c 01 00 	call	93251 <_runtime.printunlock>
 10138dd:	48 8b 05 9c b1 0b 00 	mov	rax, qword ptr [rip + 766364]
 10138e4:	48 c7 84 24 e8 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 232], 0
 10138f0:	0f 57 c0 	xorps	xmm0, xmm0
 10138f3:	0f 11 84 24 f0 00 00 00 	movups	xmmword ptr [rsp + 240], xmm0
 10138fb:	48 8b 0d 86 b1 0b 00 	mov	rcx, qword ptr [rip + 766342]
 1013902:	48 89 8c 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rcx
 101390a:	48 8b 0d 7f b1 0b 00 	mov	rcx, qword ptr [rip + 766335]
 1013911:	48 89 8c 24 f0 00 00 00 	mov	qword ptr [rsp + 240], rcx
 1013919:	48 8b 0d 78 b1 0b 00 	mov	rcx, qword ptr [rip + 766328]
 1013920:	48 89 8c 24 f8 00 00 00 	mov	qword ptr [rsp + 248], rcx
 1013928:	31 c9 	xor	ecx, ecx
 101392a:	e9 b0 00 00 00 	jmp	176 <_runtime.gcMarkTermination+0x69f>
 101392f:	48 8d 8c 24 d0 00 00 00 	lea	rcx, [rsp + 208]
 1013937:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101393b:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1013944:	48 c7 44 24 10 18 00 00 00 	mov	qword ptr [rsp + 16], 24
 101394d:	48 29 c2 	sub	rdx, rax
 1013950:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1013955:	e8 26 15 00 00 	call	5414 <_runtime.fmtNSAsMS>
 101395a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101395f:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1013964:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1013969:	48 8d 9c 24 20 01 00 00 	lea	rbx, [rsp + 288]
 1013971:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1013975:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101397a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101397f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1013984:	e8 77 d1 02 00 	call	184695 <_runtime.slicebytetostring>
 1013989:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101398e:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 1013996:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101399b:	48 89 8c 24 a0 01 00 00 	mov	qword ptr [rsp + 416], rcx
 10139a3:	e8 f8 6a 01 00 	call	92920 <_runtime.printlock>
 10139a8:	48 8b 84 24 a0 01 00 00 	mov	rax, qword ptr [rsp + 416]
 10139b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10139b4:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 10139bc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10139c1:	e8 1a 74 01 00 	call	95258 <_runtime.printstring>
 10139c6:	e8 55 6b 01 00 	call	93013 <_runtime.printunlock>
 10139cb:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10139d3:	48 8d 48 01 	lea	rcx, [rax + 1]
 10139d7:	0f 57 c0 	xorps	xmm0, xmm0
 10139da:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10139df:	48 83 f9 03 	cmp	rcx, 3
 10139e3:	7d 55 	jge	85 <_runtime.gcMarkTermination+0x6fa>
 10139e5:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 10139ed:	48 8b 94 cc e8 00 00 00 	mov	rdx, qword ptr [rsp + 8*rcx + 232]
 10139f5:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 10139fa:	48 85 c9 	test	rcx, rcx
 10139fd:	0f 84 2c ff ff ff 	je	-212 <_runtime.gcMarkTermination+0x5ef>
 1013a03:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1013a08:	e8 93 6a 01 00 	call	92819 <_runtime.printlock>
 1013a0d:	48 8d 05 47 f2 05 00 	lea	rax, [rip + 389703]
 1013a14:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013a18:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1013a21:	e8 ba 73 01 00 	call	95162 <_runtime.printstring>
 1013a26:	e8 f5 6a 01 00 	call	92917 <_runtime.printunlock>
 1013a2b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1013a30:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1013a35:	e9 f5 fe ff ff 	jmp	-267 <_runtime.gcMarkTermination+0x5ef>
 1013a3a:	e8 61 6a 01 00 	call	92769 <_runtime.printlock>
 1013a3f:	48 8d 05 fc f8 05 00 	lea	rax, [rip + 391420]
 1013a46:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013a4a:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1013a53:	e8 88 73 01 00 	call	95112 <_runtime.printstring>
 1013a58:	e8 c3 6a 01 00 	call	92867 <_runtime.printunlock>
 1013a5d:	48 c7 84 24 60 01 00 00 00 00 00 00 	mov	qword ptr [rsp + 352], 0
 1013a69:	0f 57 c0 	xorps	xmm0, xmm0
 1013a6c:	0f 11 84 24 68 01 00 00 	movups	xmmword ptr [rsp + 360], xmm0
 1013a74:	0f 11 84 24 78 01 00 00 	movups	xmmword ptr [rsp + 376], xmm0
 1013a7c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1013a81:	48 89 84 24 60 01 00 00 	mov	qword ptr [rsp + 352], rax
 1013a89:	48 8b 05 00 43 0e 00 	mov	rax, qword ptr [rip + 934656]
 1013a90:	48 89 84 24 68 01 00 00 	mov	qword ptr [rsp + 360], rax
 1013a98:	48 8b 05 01 43 0e 00 	mov	rax, qword ptr [rip + 934657]
 1013a9f:	48 03 05 f2 42 0e 00 	add	rax, qword ptr [rip + 934642]
 1013aa6:	48 89 84 24 70 01 00 00 	mov	qword ptr [rsp + 368], rax
 1013aae:	48 8b 05 f3 42 0e 00 	mov	rax, qword ptr [rip + 934643]
 1013ab5:	48 89 84 24 78 01 00 00 	mov	qword ptr [rsp + 376], rax
 1013abd:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1013ac2:	48 89 84 24 80 01 00 00 	mov	qword ptr [rsp + 384], rax
 1013aca:	31 c0 	xor	eax, eax
 1013acc:	e9 a6 00 00 00 	jmp	166 <_runtime.gcMarkTermination+0x837>
 1013ad1:	48 8d 84 24 d0 00 00 00 	lea	rax, [rsp + 208]
 1013ad9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013add:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1013ae6:	48 c7 44 24 10 18 00 00 00 	mov	qword ptr [rsp + 16], 24
 1013aef:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1013af4:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1013af9:	e8 82 13 00 00 	call	4994 <_runtime.fmtNSAsMS>
 1013afe:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1013b03:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1013b08:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1013b0d:	48 8d 9c 24 00 01 00 00 	lea	rbx, [rsp + 256]
 1013b15:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1013b19:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1013b1e:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1013b23:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1013b28:	e8 d3 cf 02 00 	call	184275 <_runtime.slicebytetostring>
 1013b2d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1013b32:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 1013b3a:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1013b3f:	48 89 8c 24 a0 01 00 00 	mov	qword ptr [rsp + 416], rcx
 1013b47:	e8 54 69 01 00 	call	92500 <_runtime.printlock>
 1013b4c:	48 8b 84 24 a0 01 00 00 	mov	rax, qword ptr [rsp + 416]
 1013b54:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013b58:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1013b60:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1013b65:	e8 76 72 01 00 	call	94838 <_runtime.printstring>
 1013b6a:	e8 b1 69 01 00 	call	92593 <_runtime.printunlock>
 1013b6f:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1013b74:	48 ff c0 	inc	rax
 1013b77:	48 83 f8 05 	cmp	rax, 5
 1013b7b:	0f 8d 81 00 00 00 	jge	129 <_runtime.gcMarkTermination+0x8c2>
 1013b81:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1013b86:	48 8b 8c c4 60 01 00 00 	mov	rcx, qword ptr [rsp + 8*rax + 352]
 1013b8e:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1013b93:	48 83 f8 02 	cmp	rax, 2
 1013b97:	75 28 	jne	40 <_runtime.gcMarkTermination+0x881>
 1013b99:	e8 02 69 01 00 	call	92418 <_runtime.printlock>
 1013b9e:	48 8d 05 ba f0 05 00 	lea	rax, [rip + 389306]
 1013ba5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013ba9:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1013bb2:	e8 29 72 01 00 	call	94761 <_runtime.printstring>
 1013bb7:	e8 64 69 01 00 	call	92516 <_runtime.printunlock>
 1013bbc:	e9 10 ff ff ff 	jmp	-240 <_runtime.gcMarkTermination+0x791>
 1013bc1:	48 83 f8 03 	cmp	rax, 3
 1013bc5:	74 d2 	je	-46 <_runtime.gcMarkTermination+0x859>
 1013bc7:	48 85 c0 	test	rax, rax
 1013bca:	0f 84 01 ff ff ff 	je	-255 <_runtime.gcMarkTermination+0x791>
 1013bd0:	e8 cb 68 01 00 	call	92363 <_runtime.printlock>
 1013bd5:	48 8d 05 7f f0 05 00 	lea	rax, [rip + 389247]
 1013bdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013be0:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1013be9:	e8 f2 71 01 00 	call	94706 <_runtime.printstring>
 1013bee:	e8 2d 69 01 00 	call	92461 <_runtime.printunlock>
 1013bf3:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1013bf8:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1013bfd:	e9 cf fe ff ff 	jmp	-305 <_runtime.gcMarkTermination+0x791>
 1013c02:	48 8b 05 a7 ae 0b 00 	mov	rax, qword ptr [rip + 765607]
 1013c09:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 1013c11:	48 8b 0d a0 ae 0b 00 	mov	rcx, qword ptr [rip + 765600]
 1013c18:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 1013c20:	48 8b 15 99 ae 0b 00 	mov	rdx, qword ptr [rip + 765593]
 1013c27:	48 89 94 24 98 00 00 00 	mov	qword ptr [rsp + 152], rdx
 1013c2f:	48 8b 1d 92 ae 0b 00 	mov	rbx, qword ptr [rip + 765586]
 1013c36:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 1013c3e:	48 63 35 33 ae 0b 00 	movsxd	rsi, dword ptr [rip + 765491]
 1013c45:	48 89 b4 24 88 00 00 00 	mov	qword ptr [rsp + 136], rsi
 1013c4d:	e8 4e 68 01 00 	call	92238 <_runtime.printlock>
 1013c52:	48 8d 05 5e f4 05 00 	lea	rax, [rip + 390238]
 1013c59:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013c5d:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1013c66:	e8 75 71 01 00 	call	94581 <_runtime.printstring>
 1013c6b:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1013c73:	48 c1 e8 14 	shr	rax, 20
 1013c77:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013c7b:	e8 a0 6e 01 00 	call	93856 <_runtime.printuint>
 1013c80:	48 8d 05 ef ef 05 00 	lea	rax, [rip + 389103]
 1013c87:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013c8b:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1013c94:	e8 47 71 01 00 	call	94535 <_runtime.printstring>
 1013c99:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1013ca1:	48 c1 e8 14 	shr	rax, 20
 1013ca5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013ca9:	e8 72 6e 01 00 	call	93810 <_runtime.printuint>
 1013cae:	48 8d 05 c1 ef 05 00 	lea	rax, [rip + 389057]
 1013cb5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013cb9:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1013cc2:	e8 19 71 01 00 	call	94489 <_runtime.printstring>
 1013cc7:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1013ccf:	48 c1 e8 14 	shr	rax, 20
 1013cd3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013cd7:	e8 44 6e 01 00 	call	93764 <_runtime.printuint>
 1013cdc:	48 8d 05 90 f0 05 00 	lea	rax, [rip + 389264]
 1013ce3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013ce7:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1013cf0:	e8 eb 70 01 00 	call	94443 <_runtime.printstring>
 1013cf5:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1013cfd:	48 c1 e8 14 	shr	rax, 20
 1013d01:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013d05:	e8 16 6e 01 00 	call	93718 <_runtime.printuint>
 1013d0a:	48 8d 05 a2 f4 05 00 	lea	rax, [rip + 390306]
 1013d11:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013d15:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1013d1e:	e8 bd 70 01 00 	call	94397 <_runtime.printstring>
 1013d23:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1013d2b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013d2f:	e8 ec 6e 01 00 	call	93932 <_runtime.printint>
 1013d34:	48 8d 05 31 ef 05 00 	lea	rax, [rip + 388913]
 1013d3b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013d3f:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1013d48:	e8 93 70 01 00 	call	94355 <_runtime.printstring>
 1013d4d:	e8 ce 67 01 00 	call	92110 <_runtime.printunlock>
 1013d52:	80 3d d7 ac 0b 00 00 	cmp	byte ptr [rip + 765143], 0
 1013d59:	75 7a 	jne	122 <_runtime.gcMarkTermination+0xa95>
 1013d5b:	e8 40 67 01 00 	call	91968 <_runtime.printlock>
 1013d60:	e8 cb 69 01 00 	call	92619 <_runtime.printnl>
 1013d65:	e8 b6 67 01 00 	call	92086 <_runtime.printunlock>
 1013d6a:	e8 b1 67 01 00 	call	92081 <_runtime.printunlock>
 1013d6f:	90 	nop
 1013d70:	48 8d 05 f9 73 0b 00 	lea	rax, [rip + 750585]
 1013d77:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013d7b:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1013d80:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1013d89:	e8 32 57 02 00 	call	153394 <_runtime.semrelease1>
 1013d8e:	90 	nop
 1013d8f:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1013d98:	48 8b 8c 24 88 01 00 00 	mov	rcx, qword ptr [rsp + 392]
 1013da0:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 1013da6:	8d 5a ff 	lea	ebx, [rdx - 1]
 1013da9:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 1013daf:	83 fa 01 	cmp	edx, 1
 1013db2:	75 11 	jne	17 <_runtime.gcMarkTermination+0xa85>
 1013db4:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1013dbb:	74 08 	je	8 <_runtime.gcMarkTermination+0xa85>
 1013dbd:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1013dc5:	48 8b ac 24 b0 01 00 00 	mov	rbp, qword ptr [rsp + 432]
 1013dcd:	48 81 c4 b8 01 00 00 	add	rsp, 440
 1013dd4:	c3 	ret
 1013dd5:	e8 c6 66 01 00 	call	91846 <_runtime.printlock>
 1013dda:	48 8d 05 8e f2 05 00 	lea	rax, [rip + 389774]
 1013de1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013de5:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1013dee:	e8 ed 6f 01 00 	call	94189 <_runtime.printstring>
 1013df3:	e8 28 67 01 00 	call	91944 <_runtime.printunlock>
 1013df8:	e9 5e ff ff ff 	jmp	-162 <_runtime.gcMarkTermination+0xa1b>
 1013dfd:	48 8b bc 24 a8 01 00 00 	mov	rdi, qword ptr [rsp + 424]
 1013e05:	31 c0 	xor	eax, eax
 1013e07:	e8 d4 eb 03 00 	call	256980 <_runtime.gcWriteBarrier>
 1013e0c:	e9 25 f7 ff ff 	jmp	-2267 <_runtime.gcMarkTermination+0x1f6>
 1013e11:	c6 04 24 08 	mov	byte ptr [rsp], 8
 1013e15:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1013e1e:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1013e27:	0f 57 c0 	xorps	xmm0, xmm0
 1013e2a:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1013e2f:	e8 bc 1c 03 00 	call	203964 <_runtime.traceEvent>
 1013e34:	e9 d2 f6 ff ff 	jmp	-2350 <_runtime.gcMarkTermination+0x1cb>
 1013e39:	48 8d 05 97 ef 05 00 	lea	rax, [rip + 389015]
 1013e40:	e8 9b eb 03 00 	call	256923 <_runtime.gcWriteBarrier>
 1013e45:	e9 e3 f5 ff ff 	jmp	-2589 <_runtime.gcMarkTermination+0xed>
 1013e4a:	0f b6 05 b4 3a 0e 00 	movzx	eax, byte ptr [rip + 932532]
 1013e51:	e9 5d f5 ff ff 	jmp	-2723 <_runtime.gcMarkTermination+0x73>
 1013e56:	83 f8 02 	cmp	eax, 2
 1013e59:	0f 94 c0 	sete	al
 1013e5c:	e9 3f f5 ff ff 	jmp	-2753 <_runtime.gcMarkTermination+0x60>
 1013e61:	48 8d 05 7c 16 06 00 	lea	rax, [rip + 398972]
 1013e68:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013e6c:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1013e75:	e8 e6 4e 01 00 	call	85734 <_runtime.throw>
 1013e7a:	90 	nop
 1013e7b:	e8 50 cd 03 00 	call	249168 <_runtime.morestack_noctxt>
 1013e80:	e9 bb f4 ff ff 	jmp	-2885 <_runtime.gcMarkTermination>
 1013e85:	cc 	int3
 1013e86:	cc 	int3
 1013e87:	cc 	int3
 1013e88:	cc 	int3
 1013e89:	cc 	int3
 1013e8a:	cc 	int3
 1013e8b:	cc 	int3
 1013e8c:	cc 	int3
 1013e8d:	cc 	int3
 1013e8e:	cc 	int3
 1013e8f:	cc 	int3

_runtime.gcBgMarkStartWorkers:
 1013e90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1013e99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1013e9d:	0f 86 a4 00 00 00 	jbe	164 <_runtime.gcBgMarkStartWorkers+0xb7>
 1013ea3:	48 83 ec 38 	sub	rsp, 56
 1013ea7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1013eac:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1013eb1:	48 8b 05 90 a4 0b 00 	mov	rax, qword ptr [rip + 763024]
 1013eb8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1013ebd:	48 8b 0d 7c a4 0b 00 	mov	rcx, qword ptr [rip + 763004]
 1013ec4:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1013ec9:	31 d2 	xor	edx, edx
 1013ecb:	eb 03 	jmp	3 <_runtime.gcBgMarkStartWorkers+0x40>
 1013ecd:	48 ff c2 	inc	rdx
 1013ed0:	48 39 c2 	cmp	rdx, rax
 1013ed3:	7d 68 	jge	104 <_runtime.gcBgMarkStartWorkers+0xad>
 1013ed5:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 1013ed9:	84 03 	test	byte ptr [rbx], al
 1013edb:	48 83 bb 80 16 00 00 00 	cmp	qword ptr [rbx + 5760], 0
 1013ee3:	75 e8 	jne	-24 <_runtime.gcBgMarkStartWorkers+0x3d>
 1013ee5:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1013eea:	c7 04 24 08 00 00 00 	mov	dword ptr [rsp], 8
 1013ef1:	48 8d 05 08 39 06 00 	lea	rax, [rip + 407816]
 1013ef8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1013efd:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1013f02:	e8 e9 f0 01 00 	call	127209 <_runtime.newproc>
 1013f07:	48 8d 05 0a ab 0b 00 	lea	rax, [rip + 764682]
 1013f0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013f12:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1013f1b:	e8 90 49 ff ff 	call	-46704 <_runtime.notetsleepg>
 1013f20:	90 	nop
 1013f21:	48 c7 05 ec aa 0b 00 00 00 00 00 	mov	qword ptr [rip + 764652], 0
 1013f2c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1013f31:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1013f36:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1013f3b:	eb 90 	jmp	-112 <_runtime.gcBgMarkStartWorkers+0x3d>
 1013f3d:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1013f42:	48 83 c4 38 	add	rsp, 56
 1013f46:	c3 	ret
 1013f47:	e8 84 cc 03 00 	call	248964 <_runtime.morestack_noctxt>
 1013f4c:	e9 3f ff ff ff 	jmp	-193 <_runtime.gcBgMarkStartWorkers>
 1013f51:	cc 	int3
 1013f52:	cc 	int3
 1013f53:	cc 	int3
 1013f54:	cc 	int3
 1013f55:	cc 	int3
 1013f56:	cc 	int3
 1013f57:	cc 	int3
 1013f58:	cc 	int3
 1013f59:	cc 	int3
 1013f5a:	cc 	int3
 1013f5b:	cc 	int3
 1013f5c:	cc 	int3
 1013f5d:	cc 	int3
 1013f5e:	cc 	int3
 1013f5f:	cc 	int3

_runtime.gcBgMarkWorker:
 1013f60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1013f69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1013f6d:	0f 86 90 04 00 00 	jbe	1168 <_runtime.gcBgMarkWorker+0x4a3>
 1013f73:	48 83 ec 70 	sub	rsp, 112
 1013f77:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 1013f7c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1013f81:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1013f8a:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1013f8f:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 1013f93:	48 c7 82 00 01 00 00 0e 00 00 00 	mov	qword ptr [rdx + 256], 14
 1013f9e:	83 3d 5b 39 0e 00 00 	cmp	dword ptr [rip + 932187], 0
 1013fa5:	0f 85 fb 02 00 00 	jne	763 <_runtime.gcBgMarkWorker+0x346>
 1013fab:	48 8d 05 76 f8 05 00 	lea	rax, [rip + 391286]
 1013fb2:	48 89 82 f8 00 00 00 	mov	qword ptr [rdx + 248], rax
 1013fb9:	48 8d 05 80 2d 05 00 	lea	rax, [rip + 339328]
 1013fc0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1013fc4:	e8 37 64 ff ff 	call	-39881 <_runtime.newobject>
 1013fc9:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1013fce:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1013fd2:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1013fd7:	48 c7 81 00 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 256], 0
 1013fe2:	83 3d 17 39 0e 00 00 	cmp	dword ptr [rip + 932119], 0
 1013fe9:	0f 85 a4 02 00 00 	jne	676 <_runtime.gcBgMarkWorker+0x333>
 1013fef:	48 c7 81 f8 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 248], 0
 1013ffa:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 1013fff:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1014008:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 101400c:	90 	nop
 101400d:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1014013:	90 	nop
 1014014:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1014018:	48 89 02 	mov	qword ptr [rdx], rax
 101401b:	90 	nop
 101401c:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1014021:	48 89 42 08 	mov	qword ptr [rdx + 8], rax
 1014025:	48 8d 05 ec a9 0b 00 	lea	rax, [rip + 764396]
 101402c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014030:	e8 bb 43 ff ff 	call	-48197 <_runtime.notewakeup>
 1014035:	48 8d 05 bc 37 06 00 	lea	rax, [rip + 407484]
 101403c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014040:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1014045:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101404a:	66 c7 44 24 10 18 14 	mov	word ptr [rsp + 16], 5144
 1014051:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 101405a:	e8 e1 76 01 00 	call	95969 <_runtime.gopark>
 101405f:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1014064:	84 00 	test	byte ptr [rax], al
 1014066:	48 8b 88 80 16 00 00 	mov	rcx, qword ptr [rax + 5760]
 101406d:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1014072:	48 39 d1 	cmp	rcx, rdx
 1014075:	0f 85 0e 02 00 00 	jne	526 <_runtime.gcBgMarkWorker+0x329>
 101407b:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1014084:	48 8b 59 30 	mov	rbx, qword ptr [rcx + 48]
 1014088:	90 	nop
 1014089:	ff 83 08 01 00 00 	inc	dword ptr [rbx + 264]
 101408f:	90 	nop
 1014090:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1014094:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1014099:	48 89 0b 	mov	qword ptr [rbx], rcx
 101409c:	83 3d ed 36 0e 00 00 	cmp	dword ptr [rip + 931565], 0
 10140a3:	0f 84 40 03 00 00 	je	832 <_runtime.gcBgMarkWorker+0x489>
 10140a9:	90 	nop
 10140aa:	e8 11 f2 02 00 	call	193041 <_runtime.nanotime1>
 10140af:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10140b3:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10140b8:	48 89 81 90 16 00 00 	mov	qword ptr [rcx + 5776], rax
 10140bf:	ba ff ff ff ff 	mov	edx, 4294967295
 10140c4:	48 8d 1d 15 a9 0b 00 	lea	rbx, [rip + 764181]
 10140cb:	f0 	lock
 10140cc:	0f c1 13 	xadd	dword ptr [rbx], edx
 10140cf:	ff ca 	dec	edx
 10140d1:	8b 35 f9 a8 0b 00 	mov	esi, dword ptr [rip + 764153]
 10140d7:	39 f2 	cmp	edx, esi
 10140d9:	0f 84 8e 02 00 00 	je	654 <_runtime.gcBgMarkWorker+0x40d>
 10140df:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10140e4:	0f 57 c0 	xorps	xmm0, xmm0
 10140e7:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 10140ec:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 10140f5:	48 8d 05 d4 a1 03 00 	lea	rax, [rip + 238036]
 10140fc:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1014101:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1014106:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 101410b:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1014110:	48 8d 5c 24 50 	lea	rbx, [rsp + 80]
 1014115:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1014119:	e8 62 c9 03 00 	call	248162 <_runtime.systemstack>
 101411e:	e8 9d f1 02 00 	call	192925 <_runtime.nanotime1>
 1014123:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1014127:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101412c:	48 29 c8 	sub	rax, rcx
 101412f:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1014134:	48 8b 91 88 16 00 00 	mov	rdx, qword ptr [rcx + 5768]
 101413b:	48 85 d2 	test	rdx, rdx
 101413e:	0f 85 07 01 00 00 	jne	263 <_runtime.gcBgMarkWorker+0x2eb>
 1014144:	48 8d 15 4d 3c 0e 00 	lea	rdx, [rip + 932941]
 101414b:	f0 	lock
 101414c:	48 0f c1 02 	xadd	qword ptr [rdx], rax
 1014150:	b8 01 00 00 00 	mov	eax, 1
 1014155:	48 8d 15 5c 3c 0e 00 	lea	rdx, [rip + 932956]
 101415c:	f0 	lock
 101415d:	48 0f c1 02 	xadd	qword ptr [rdx], rax
 1014161:	b8 01 00 00 00 	mov	eax, 1
 1014166:	48 8d 15 73 a8 0b 00 	lea	rdx, [rip + 764019]
 101416d:	f0 	lock
 101416e:	0f c1 02 	xadd	dword ptr [rdx], eax
 1014171:	ff c0 	inc	eax
 1014173:	8b 15 57 a8 0b 00 	mov	edx, dword ptr [rip + 763991]
 1014179:	39 d0 	cmp	eax, edx
 101417b:	0f 87 3d 01 00 00 	ja	317 <_runtime.gcBgMarkWorker+0x35e>
 1014181:	0f 85 bd 00 00 00 	jne	189 <_runtime.gcBgMarkWorker+0x2e4>
 1014187:	48 8b 05 b2 a7 0b 00 	mov	rax, qword ptr [rip + 763826]
 101418e:	48 85 c0 	test	rax, rax
 1014191:	0f 85 a3 00 00 00 	jne	163 <_runtime.gcBgMarkWorker+0x2da>
 1014197:	8b 05 2f a8 0b 00 	mov	eax, dword ptr [rip + 763951]
 101419d:	39 05 25 a8 0b 00 	cmp	dword ptr [rip + 763941], eax
 10141a3:	0f 83 8a 00 00 00 	jae	138 <_runtime.gcBgMarkWorker+0x2d3>
 10141a9:	b8 01 00 00 00 	mov	eax, 1
 10141ae:	83 f0 01 	xor	eax, 1
 10141b1:	84 c0 	test	al, al
 10141b3:	0f 84 7c fe ff ff 	je	-388 <_runtime.gcBgMarkWorker+0xd5>
 10141b9:	90 	nop
 10141ba:	31 c0 	xor	eax, eax
 10141bc:	48 89 81 80 16 00 00 	mov	qword ptr [rcx + 5760], rax
 10141c3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10141c8:	48 8b 10 	mov	rdx, qword ptr [rax]
 10141cb:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 10141d4:	8b b2 08 01 00 00 	mov	esi, dword ptr [rdx + 264]
 10141da:	8d 7e ff 	lea	edi, [rsi - 1]
 10141dd:	89 ba 08 01 00 00 	mov	dword ptr [rdx + 264], edi
 10141e3:	83 fe 01 	cmp	esi, 1
 10141e6:	75 11 	jne	17 <_runtime.gcBgMarkWorker+0x299>
 10141e8:	80 bb b1 00 00 00 00 	cmp	byte ptr [rbx + 177], 0
 10141ef:	74 08 	je	8 <_runtime.gcBgMarkWorker+0x299>
 10141f1:	48 c7 43 10 de fa ff ff 	mov	qword ptr [rbx + 16], -1314
 10141f9:	e8 82 ee ff ff 	call	-4478 <_runtime.gcMarkDone>
 10141fe:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1014207:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 101420b:	90 	nop
 101420c:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1014212:	90 	nop
 1014213:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1014217:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 101421c:	48 89 01 	mov	qword ptr [rcx], rax
 101421f:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1014224:	48 89 c2 	mov	rdx, rax
 1014227:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 101422b:	48 89 d1 	mov	rcx, rdx
 101422e:	e9 02 fe ff ff 	jmp	-510 <_runtime.gcBgMarkWorker+0xd5>
 1014233:	31 c0 	xor	eax, eax
 1014235:	e9 74 ff ff ff 	jmp	-140 <_runtime.gcBgMarkWorker+0x24e>
 101423a:	b8 01 00 00 00 	mov	eax, 1
 101423f:	e9 6a ff ff ff 	jmp	-150 <_runtime.gcBgMarkWorker+0x24e>
 1014244:	31 c0 	xor	eax, eax
 1014246:	e9 66 ff ff ff 	jmp	-154 <_runtime.gcBgMarkWorker+0x251>
 101424b:	48 83 fa 01 	cmp	rdx, 1
 101424f:	75 1d 	jne	29 <_runtime.gcBgMarkWorker+0x30e>
 1014251:	48 8d 15 48 3b 0e 00 	lea	rdx, [rip + 932680]
 1014258:	48 89 c3 	mov	rbx, rax
 101425b:	f0 	lock
 101425c:	48 0f c1 02 	xadd	qword ptr [rdx], rax
 1014260:	f0 	lock
 1014261:	48 0f c1 99 78 16 00 00 	xadd	qword ptr [rcx + 5752], rbx
 1014269:	e9 f3 fe ff ff 	jmp	-269 <_runtime.gcBgMarkWorker+0x201>
 101426e:	48 83 fa 02 	cmp	rdx, 2
 1014272:	0f 85 e9 fe ff ff 	jne	-279 <_runtime.gcBgMarkWorker+0x201>
 1014278:	48 8d 15 29 3b 0e 00 	lea	rdx, [rip + 932649]
 101427f:	f0 	lock
 1014280:	48 0f c1 02 	xadd	qword ptr [rdx], rax
 1014284:	e9 d8 fe ff ff 	jmp	-296 <_runtime.gcBgMarkWorker+0x201>
 1014289:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 101428e:	48 83 c4 70 	add	rsp, 112
 1014292:	c3 	ret
 1014293:	48 8d b9 f8 00 00 00 	lea	rdi, [rcx + 248]
 101429a:	31 c0 	xor	eax, eax
 101429c:	e8 3f e7 03 00 	call	255807 <_runtime.gcWriteBarrier>
 10142a1:	e9 54 fd ff ff 	jmp	-684 <_runtime.gcBgMarkWorker+0x9a>
 10142a6:	48 8d ba f8 00 00 00 	lea	rdi, [rdx + 248]
 10142ad:	48 8d 05 74 f5 05 00 	lea	rax, [rip + 390516]
 10142b4:	e8 27 e7 03 00 	call	255783 <_runtime.gcWriteBarrier>
 10142b9:	e9 fb fc ff ff 	jmp	-773 <_runtime.gcBgMarkWorker+0x59>
 10142be:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 10142c2:	89 54 24 2c 	mov	dword ptr [rsp + 44], edx
 10142c6:	48 8b 81 88 16 00 00 	mov	rax, qword ptr [rcx + 5768]
 10142cd:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10142d2:	e8 c9 61 01 00 	call	90569 <_runtime.printlock>
 10142d7:	48 8d 05 d1 12 06 00 	lea	rax, [rip + 398033]
 10142de:	48 89 04 24 	mov	qword ptr [rsp], rax
 10142e2:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 10142eb:	e8 f0 6a 01 00 	call	92912 <_runtime.printstring>
 10142f0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10142f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10142f9:	e8 22 69 01 00 	call	92450 <_runtime.printint>
 10142fe:	48 8d 05 cb f3 05 00 	lea	rax, [rip + 390091]
 1014305:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014309:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1014312:	e8 c9 6a 01 00 	call	92873 <_runtime.printstring>
 1014317:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 101431b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101431f:	e8 fc 67 01 00 	call	92156 <_runtime.printuint>
 1014324:	48 8d 05 98 f3 05 00 	lea	rax, [rip + 390040]
 101432b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101432f:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1014338:	e8 a3 6a 01 00 	call	92835 <_runtime.printstring>
 101433d:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 1014341:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014345:	e8 d6 67 01 00 	call	92118 <_runtime.printuint>
 101434a:	e8 e1 63 01 00 	call	91105 <_runtime.printnl>
 101434f:	e8 cc 61 01 00 	call	90572 <_runtime.printunlock>
 1014354:	48 8d 05 c3 06 06 00 	lea	rax, [rip + 394947]
 101435b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101435f:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1014368:	e8 f3 49 01 00 	call	84467 <_runtime.throw>
 101436d:	89 54 24 28 	mov	dword ptr [rsp + 40], edx
 1014371:	89 74 24 2c 	mov	dword ptr [rsp + 44], esi
 1014375:	e8 26 61 01 00 	call	90406 <_runtime.printlock>
 101437a:	48 8d 05 19 01 06 00 	lea	rax, [rip + 393497]
 1014381:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014385:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 101438e:	e8 4d 6a 01 00 	call	92749 <_runtime.printstring>
 1014393:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1014397:	48 89 04 24 	mov	qword ptr [rsp], rax
 101439b:	e8 80 67 01 00 	call	92032 <_runtime.printuint>
 10143a0:	48 8d 05 1c f3 05 00 	lea	rax, [rip + 389916]
 10143a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10143ab:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10143b4:	e8 27 6a 01 00 	call	92711 <_runtime.printstring>
 10143b9:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 10143bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10143c1:	e8 5a 67 01 00 	call	91994 <_runtime.printuint>
 10143c6:	e8 65 63 01 00 	call	90981 <_runtime.printnl>
 10143cb:	e8 50 61 01 00 	call	90448 <_runtime.printunlock>
 10143d0:	48 8d 05 fb 0d 06 00 	lea	rax, [rip + 396795]
 10143d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10143db:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 10143e4:	e8 77 49 01 00 	call	84343 <_runtime.throw>
 10143e9:	48 8d 05 b2 21 06 00 	lea	rax, [rip + 401842]
 10143f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10143f4:	48 c7 44 24 08 26 00 00 00 	mov	qword ptr [rsp + 8], 38
 10143fd:	e8 5e 49 01 00 	call	84318 <_runtime.throw>
 1014402:	90 	nop
 1014403:	e8 c8 c7 03 00 	call	247752 <_runtime.morestack_noctxt>
 1014408:	e9 53 fb ff ff 	jmp	-1197 <_runtime.gcBgMarkWorker>
 101440d:	cc 	int3
 101440e:	cc 	int3
 101440f:	cc 	int3

_runtime.gcMark:
 1014410:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1014419:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101441d:	0f 86 d1 04 00 00 	jbe	1233 <_runtime.gcMark+0x4e4>
 1014423:	48 83 ec 70 	sub	rsp, 112
 1014427:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 101442c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1014431:	83 3d 08 36 0e 00 00 	cmp	dword ptr [rip + 931336], 0
 1014438:	0f 8f cf 02 00 00 	jg	719 <_runtime.gcMark+0x2fd>
 101443e:	83 3d 57 33 0e 00 02 	cmp	dword ptr [rip + 930647], 2
 1014445:	0f 85 8f 04 00 00 	jne	1167 <_runtime.gcMark+0x4ca>
 101444b:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1014450:	48 89 05 81 a5 0b 00 	mov	qword ptr [rip + 763265], rax
 1014457:	48 8b 05 e2 a4 0b 00 	mov	rax, qword ptr [rip + 763106]
 101445e:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1014463:	48 85 c0 	test	rax, rax
 1014466:	0f 85 ec 02 00 00 	jne	748 <_runtime.gcMark+0x348>
 101446c:	8b 0d 5a a5 0b 00 	mov	ecx, dword ptr [rip + 763226]
 1014472:	39 0d 50 a5 0b 00 	cmp	dword ptr [rip + 763216], ecx
 1014478:	0f 82 da 02 00 00 	jb	730 <_runtime.gcMark+0x348>
 101447e:	83 3d cb 35 0e 00 00 	cmp	dword ptr [rip + 931275], 0
 1014485:	0f 8f 78 02 00 00 	jg	632 <_runtime.gcMark+0x2f3>
 101448b:	48 83 3d ad a4 0b 00 00 	cmp	qword ptr [rip + 763053], 0
 1014493:	0f 85 a6 02 00 00 	jne	678 <_runtime.gcMark+0x32f>
 1014499:	48 8b 05 a8 9e 0b 00 	mov	rax, qword ptr [rip + 761512]
 10144a0:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10144a5:	48 8b 0d 94 9e 0b 00 	mov	rcx, qword ptr [rip + 761492]
 10144ac:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 10144b1:	31 d2 	xor	edx, edx
 10144b3:	eb 22 	jmp	34 <_runtime.gcMark+0xc7>
 10144b5:	48 05 98 16 00 00 	add	rax, 5784
 10144bb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10144bf:	e8 5c 7d 00 00 	call	32092 <_runtime.(*gcWork).dispose>
 10144c4:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10144c9:	48 8d 50 01 	lea	rdx, [rax + 1]
 10144cd:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10144d2:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10144d7:	48 39 c2 	cmp	rdx, rax
 10144da:	0f 8d d3 01 00 00 	jge	467 <_runtime.gcMark+0x2a3>
 10144e0:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 10144e5:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 10144e9:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 10144ee:	83 3d 5b 35 0e 00 00 	cmp	dword ptr [rip + 931163], 0
 10144f5:	0f 8e 94 01 00 00 	jle	404 <_runtime.gcMark+0x27f>
 10144fb:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10144ff:	e8 5c 0f 01 00 	call	69468 <_runtime.wbBufFlush1>
 1014504:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1014509:	84 00 	test	byte ptr [rax], al
 101450b:	48 8b 88 98 16 00 00 	mov	rcx, qword ptr [rax + 5784]
 1014512:	48 85 c9 	test	rcx, rcx
 1014515:	74 9e 	je	-98 <_runtime.gcMark+0xa5>
 1014517:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 101451c:	75 0e 	jne	14 <_runtime.gcMark+0x11c>
 101451e:	48 8b 88 a0 16 00 00 	mov	rcx, qword ptr [rax + 5792]
 1014525:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 101452a:	74 89 	je	-119 <_runtime.gcMark+0xa5>
 101452c:	e8 6f 5f 01 00 	call	89967 <_runtime.printlock>
 1014531:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1014536:	48 63 08 	movsxd	rcx, dword ptr [rax]
 1014539:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 101453e:	0f b6 90 b8 16 00 00 	movzx	edx, byte ptr [rax + 5816]
 1014545:	88 54 24 17 	mov	byte ptr [rsp + 23], dl
 1014549:	e8 52 5f 01 00 	call	89938 <_runtime.printlock>
 101454e:	48 8d 05 df ee 05 00 	lea	rax, [rip + 388831]
 1014555:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014559:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1014562:	e8 79 68 01 00 	call	92281 <_runtime.printstring>
 1014567:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101456c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014570:	e8 ab 66 01 00 	call	91819 <_runtime.printint>
 1014575:	48 8d 05 df f0 05 00 	lea	rax, [rip + 389343]
 101457c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014580:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1014589:	e8 52 68 01 00 	call	92242 <_runtime.printstring>
 101458e:	0f b6 44 24 17 	movzx	eax, byte ptr [rsp + 23]
 1014593:	88 04 24 	mov	byte ptr [rsp], al
 1014596:	e8 e5 61 01 00 	call	90597 <_runtime.printbool>
 101459b:	e8 80 5f 01 00 	call	89984 <_runtime.printunlock>
 10145a0:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10145a5:	48 8b 88 98 16 00 00 	mov	rcx, qword ptr [rax + 5784]
 10145ac:	48 85 c9 	test	rcx, rcx
 10145af:	0f 84 b2 00 00 00 	je	178 <_runtime.gcMark+0x257>
 10145b5:	48 8b 41 10 	mov	rax, qword ptr [rcx + 16]
 10145b9:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10145be:	e8 dd 5e 01 00 	call	89821 <_runtime.printlock>
 10145c3:	48 8d 05 2c eb 05 00 	lea	rax, [rip + 387884]
 10145ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 10145ce:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 10145d7:	e8 04 68 01 00 	call	92164 <_runtime.printstring>
 10145dc:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10145e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10145e5:	e8 36 66 01 00 	call	91702 <_runtime.printint>
 10145ea:	e8 31 5f 01 00 	call	89905 <_runtime.printunlock>
 10145ef:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10145f4:	48 8b 80 a0 16 00 00 	mov	rax, qword ptr [rax + 5792]
 10145fb:	48 85 c0 	test	rax, rax
 10145fe:	74 3f 	je	63 <_runtime.gcMark+0x22f>
 1014600:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 1014604:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1014609:	e8 92 5e 01 00 	call	89746 <_runtime.printlock>
 101460e:	48 8d 05 ea ea 05 00 	lea	rax, [rip + 387818]
 1014615:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014619:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1014622:	e8 b9 67 01 00 	call	92089 <_runtime.printstring>
 1014627:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101462c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014630:	e8 eb 65 01 00 	call	91627 <_runtime.printint>
 1014635:	e8 e6 5e 01 00 	call	89830 <_runtime.printunlock>
 101463a:	e9 d8 00 00 00 	jmp	216 <_runtime.gcMark+0x307>
 101463f:	e8 5c 5e 01 00 	call	89692 <_runtime.printlock>
 1014644:	48 8d 05 ec ee 05 00 	lea	rax, [rip + 388844]
 101464b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101464f:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1014658:	e8 83 67 01 00 	call	92035 <_runtime.printstring>
 101465d:	e8 be 5e 01 00 	call	89790 <_runtime.printunlock>
 1014662:	e9 b0 00 00 00 	jmp	176 <_runtime.gcMark+0x307>
 1014667:	e8 34 5e 01 00 	call	89652 <_runtime.printlock>
 101466c:	48 8d 05 b8 ee 05 00 	lea	rax, [rip + 388792]
 1014673:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014677:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1014680:	e8 5b 67 01 00 	call	91995 <_runtime.printstring>
 1014685:	e8 96 5e 01 00 	call	89750 <_runtime.printunlock>
 101468a:	e9 60 ff ff ff 	jmp	-160 <_runtime.gcMark+0x1df>
 101468f:	80 3d d9 30 0e 00 00 	cmp	byte ptr [rip + 930009], 0
 1014696:	0f 85 5f fe ff ff 	jne	-417 <_runtime.gcMark+0xeb>
 101469c:	84 03 	test	byte ptr [rbx], al
 101469e:	48 8d 83 48 17 00 00 	lea	rax, [rbx + 5960]
 10146a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10146a9:	e8 32 0c 01 00 	call	68658 <_runtime.(*wbBuf).reset>
 10146ae:	e9 51 fe ff ff 	jmp	-431 <_runtime.gcMark+0xf4>
 10146b3:	c6 05 b5 30 0e 00 00 	mov	byte ptr [rip + 929973], 0
 10146ba:	e8 01 09 01 00 	call	67841 <_runtime.cachestats>
 10146bf:	48 8b 05 fa a2 0b 00 	mov	rax, qword ptr [rip + 762618]
 10146c6:	48 89 05 b3 56 0e 00 	mov	qword ptr [rip + 939699], rax
 10146cd:	48 8b 05 ec a2 0b 00 	mov	rax, qword ptr [rip + 762604]
 10146d4:	48 89 05 95 56 0e 00 	mov	qword ptr [rip + 939669], rax
 10146db:	48 8b 05 9e 36 0e 00 	mov	rax, qword ptr [rip + 931486]
 10146e2:	48 89 05 8f 56 0e 00 	mov	qword ptr [rip + 939663], rax
 10146e9:	80 3d 40 08 0c 00 00 	cmp	byte ptr [rip + 788544], 0
 10146f0:	75 0a 	jne	10 <_runtime.gcMark+0x2ec>
 10146f2:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 10146f7:	48 83 c4 70 	add	rsp, 112
 10146fb:	c3 	ret
 10146fc:	e8 1f 2a 03 00 	call	207391 <_runtime.traceHeapAlloc>
 1014701:	eb ef 	jmp	-17 <_runtime.gcMark+0x2e2>
 1014703:	e8 48 0a 00 00 	call	2632 <_runtime.gcMarkRootCheck>
 1014708:	e9 7e fd ff ff 	jmp	-642 <_runtime.gcMark+0x7b>
 101470d:	e8 7e 00 01 00 	call	65662 <_runtime.tracegc>
 1014712:	e9 27 fd ff ff 	jmp	-729 <_runtime.gcMark+0x2e>
 1014717:	e8 84 5d 01 00 	call	89476 <_runtime.printlock>
 101471c:	e8 0f 60 01 00 	call	90127 <_runtime.printnl>
 1014721:	e8 fa 5d 01 00 	call	89594 <_runtime.printunlock>
 1014726:	48 8d 05 01 28 06 00 	lea	rax, [rip + 403457]
 101472d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014731:	48 c7 44 24 08 2f 00 00 00 	mov	qword ptr [rsp + 8], 47
 101473a:	e8 21 46 01 00 	call	83489 <_runtime.throw>
 101473f:	48 8d 05 d0 f1 05 00 	lea	rax, [rip + 389584]
 1014746:	48 89 04 24 	mov	qword ptr [rsp], rax
 101474a:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 1014753:	e8 08 46 01 00 	call	83464 <_runtime.throw>
 1014758:	8b 05 6a a2 0b 00 	mov	eax, dword ptr [rip + 762474]
 101475e:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1014763:	8b 0d 63 a2 0b 00 	mov	ecx, dword ptr [rip + 762467]
 1014769:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 101476e:	48 8b 15 7b a2 0b 00 	mov	rdx, qword ptr [rip + 762491]
 1014775:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 101477a:	48 8b 1d 77 a2 0b 00 	mov	rbx, qword ptr [rip + 762487]
 1014781:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 1014786:	48 8b 35 73 a2 0b 00 	mov	rsi, qword ptr [rip + 762483]
 101478d:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 1014792:	48 8b 3d 6f a2 0b 00 	mov	rdi, qword ptr [rip + 762479]
 1014799:	48 89 7c 24 18 	mov	qword ptr [rsp + 24], rdi
 101479e:	e8 fd 5c 01 00 	call	89341 <_runtime.printlock>
 10147a3:	48 8d 05 0a f1 05 00 	lea	rax, [rip + 389386]
 10147aa:	48 89 04 24 	mov	qword ptr [rsp], rax
 10147ae:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 10147b7:	e8 24 66 01 00 	call	91684 <_runtime.printstring>
 10147bc:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10147c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10147c5:	e8 c6 64 01 00 	call	91334 <_runtime.printhex>
 10147ca:	48 8d 05 5f e6 05 00 	lea	rax, [rip + 386655]
 10147d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10147d5:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 10147de:	e8 fd 65 01 00 	call	91645 <_runtime.printstring>
 10147e3:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10147e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10147ec:	e8 2f 63 01 00 	call	90927 <_runtime.printuint>
 10147f1:	48 8d 05 26 e6 05 00 	lea	rax, [rip + 386598]
 10147f8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10147fc:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1014805:	e8 d6 65 01 00 	call	91606 <_runtime.printstring>
 101480a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101480f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014813:	e8 08 63 01 00 	call	90888 <_runtime.printuint>
 1014818:	48 8d 05 a0 ec 05 00 	lea	rax, [rip + 388256]
 101481f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014823:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101482c:	e8 af 65 01 00 	call	91567 <_runtime.printstring>
 1014831:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1014836:	48 89 04 24 	mov	qword ptr [rsp], rax
 101483a:	e8 e1 63 01 00 	call	91105 <_runtime.printint>
 101483f:	48 8d 05 07 eb 05 00 	lea	rax, [rip + 387847]
 1014846:	48 89 04 24 	mov	qword ptr [rsp], rax
 101484a:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1014853:	e8 88 65 01 00 	call	91528 <_runtime.printstring>
 1014858:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101485d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014861:	e8 ba 63 01 00 	call	91066 <_runtime.printint>
 1014866:	48 8d 05 5e ec 05 00 	lea	rax, [rip + 388190]
 101486d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014871:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101487a:	e8 61 65 01 00 	call	91489 <_runtime.printstring>
 101487f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1014884:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014888:	e8 93 63 01 00 	call	91027 <_runtime.printint>
 101488d:	48 8d 05 fb ed 05 00 	lea	rax, [rip + 388603]
 1014894:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014898:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10148a1:	e8 3a 65 01 00 	call	91450 <_runtime.printstring>
 10148a6:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10148ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10148af:	e8 6c 63 01 00 	call	90988 <_runtime.printint>
 10148b4:	e8 77 5e 01 00 	call	89719 <_runtime.printnl>
 10148b9:	e8 62 5c 01 00 	call	89186 <_runtime.printunlock>
 10148be:	48 8d 05 db b6 04 00 	lea	rax, [rip + 308955]
 10148c5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10148c9:	48 8d 05 10 f1 06 00 	lea	rax, [rip + 454928]
 10148d0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10148d5:	e8 e6 3c 01 00 	call	81126 <_runtime.gopanic>
 10148da:	48 8d 05 43 2b 06 00 	lea	rax, [rip + 404291]
 10148e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10148e5:	48 c7 44 24 08 38 00 00 00 	mov	qword ptr [rsp + 8], 56
 10148ee:	e8 6d 44 01 00 	call	83053 <_runtime.throw>
 10148f3:	90 	nop
 10148f4:	e8 d7 c2 03 00 	call	246487 <_runtime.morestack_noctxt>
 10148f9:	e9 12 fb ff ff 	jmp	-1262 <_runtime.gcMark>
 10148fe:	cc 	int3
 10148ff:	cc 	int3

_runtime.gcSweep:
 1014900:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1014909:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101490d:	0f 86 cd 01 00 00 	jbe	461 <_runtime.gcSweep+0x1e0>
 1014913:	48 83 ec 20 	sub	rsp, 32
 1014917:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101491c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1014921:	83 3d 74 2e 0e 00 00 	cmp	dword ptr [rip + 929396], 0
 1014928:	0f 85 98 01 00 00 	jne	408 <_runtime.gcSweep+0x1c6>
 101492e:	48 8d 05 cb 06 0d 00 	lea	rax, [rip + 853707]
 1014935:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014939:	e8 f2 37 ff ff 	call	-51214 <_runtime.lock>
 101493e:	8b 05 9c 07 0e 00 	mov	eax, dword ptr [rip + 919452]
 1014944:	83 c0 02 	add	eax, 2
 1014947:	89 05 93 07 0e 00 	mov	dword ptr [rip + 919443], eax
 101494d:	c7 05 8d 07 0e 00 00 00 00 00 	mov	dword ptr [rip + 919437], 0
 1014957:	d1 e8 	shr	eax
 1014959:	83 e0 01 	and	eax, 1
 101495c:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 1014960:	48 8d 0d a1 07 0e 00 	lea	rcx, [rip + 919457]
 1014967:	8b 44 c1 20 	mov	eax, dword ptr [rcx + 8*rax + 32]
 101496b:	85 c0 	test	eax, eax
 101496d:	0f 85 3a 01 00 00 	jne	314 <_runtime.gcSweep+0x1ad>
 1014973:	48 c7 05 e2 07 0e 00 00 00 00 00 	mov	qword ptr [rip + 919522], 0
 101497e:	48 8b 0d 9b 0a 0e 00 	mov	rcx, qword ptr [rip + 920219]
 1014985:	48 8b 15 8c 0a 0e 00 	mov	rdx, qword ptr [rip + 920204]
 101498c:	48 8b 05 7d 0a 0e 00 	mov	rax, qword ptr [rip + 920189]
 1014993:	48 89 15 96 0a 0e 00 	mov	qword ptr [rip + 920214], rdx
 101499a:	48 89 0d 97 0a 0e 00 	mov	qword ptr [rip + 920215], rcx
 10149a1:	83 3d 58 2f 0e 00 00 	cmp	dword ptr [rip + 929624], 0
 10149a8:	0f 85 ee 00 00 00 	jne	238 <_runtime.gcSweep+0x19c>
 10149ae:	48 89 05 73 0a 0e 00 	mov	qword ptr [rip + 920179], rax
 10149b5:	0f 57 c0 	xorps	xmm0, xmm0
 10149b8:	0f 11 05 c9 07 0e 00 	movups	xmmword ptr [rip + 919497], xmm0
 10149bf:	48 8d 05 3a 06 0d 00 	lea	rax, [rip + 853562]
 10149c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10149ca:	e8 41 39 ff ff 	call	-50879 <_runtime.unlock>
 10149cf:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10149d4:	48 83 f8 02 	cmp	rax, 2
 10149d8:	75 68 	jne	104 <_runtime.gcSweep+0x142>
 10149da:	48 8d 05 1f 06 0d 00 	lea	rax, [rip + 853535]
 10149e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10149e5:	e8 46 37 ff ff 	call	-51386 <_runtime.lock>
 10149ea:	0f 57 c0 	xorps	xmm0, xmm0
 10149ed:	f2 0f 11 05 83 07 0e 00 	movsd	qword ptr [rip + 919427], xmm0
 10149f5:	48 8d 05 04 06 0d 00 	lea	rax, [rip + 853508]
 10149fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014a00:	e8 0b 39 ff ff 	call	-50933 <_runtime.unlock>
 1014a05:	eb 06 	jmp	6 <_runtime.gcSweep+0x10d>
 1014a07:	ff 05 6b 9a 0b 00 	inc	dword ptr [rip + 760427]
 1014a0d:	e8 3e 61 00 00 	call	24894 <_runtime.sweepone>
 1014a12:	48 83 3c 24 ff 	cmp	qword ptr [rsp], -1
 1014a17:	75 ee 	jne	-18 <_runtime.gcSweep+0x107>
 1014a19:	e8 d2 7e 00 00 	call	32466 <_runtime.prepareFreeWorkbufs>
 1014a1e:	c6 04 24 00 	mov	byte ptr [rsp], 0
 1014a22:	e8 69 7f 00 00 	call	32617 <_runtime.freeSomeWbufs>
 1014a27:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1014a2c:	75 f0 	jne	-16 <_runtime.gcSweep+0x11e>
 1014a2e:	e8 8d f1 00 00 	call	61837 <_runtime.mProf_NextCycle>
 1014a33:	e8 08 f2 00 00 	call	61960 <_runtime.mProf_Flush>
 1014a38:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1014a3d:	48 83 c4 20 	add	rsp, 32
 1014a41:	c3 	ret
 1014a42:	48 8d 05 17 9a 0b 00 	lea	rax, [rip + 760343]
 1014a49:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014a4d:	e8 de 36 ff ff 	call	-51490 <_runtime.lock>
 1014a52:	80 3d 17 9a 0b 00 00 	cmp	byte ptr [rip + 760343], 0
 1014a59:	75 1a 	jne	26 <_runtime.gcSweep+0x175>
 1014a5b:	48 8d 05 fe 99 0b 00 	lea	rax, [rip + 760318]
 1014a62:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014a66:	e8 a5 38 ff ff 	call	-51035 <_runtime.unlock>
 1014a6b:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1014a70:	48 83 c4 20 	add	rsp, 32
 1014a74:	c3 	ret
 1014a75:	c6 05 f4 99 0b 00 00 	mov	byte ptr [rip + 760308], 0
 1014a7c:	48 8b 05 e5 99 0b 00 	mov	rax, qword ptr [rip + 760293]
 1014a83:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014a87:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1014a90:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 1014a95:	e8 c6 7f 01 00 	call	98246 <_runtime.ready>
 1014a9a:	eb bf 	jmp	-65 <_runtime.gcSweep+0x15b>
 1014a9c:	48 8d 3d 85 09 0e 00 	lea	rdi, [rip + 919941]
 1014aa3:	e8 38 df 03 00 	call	253752 <_runtime.gcWriteBarrier>
 1014aa8:	e9 08 ff ff ff 	jmp	-248 <_runtime.gcSweep+0xb5>
 1014aad:	48 8d 05 bc f7 05 00 	lea	rax, [rip + 391100]
 1014ab4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014ab8:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1014ac1:	e8 9a 42 01 00 	call	82586 <_runtime.throw>
 1014ac6:	48 8d 05 be 1d 06 00 	lea	rax, [rip + 400830]
 1014acd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014ad1:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 1014ada:	e8 81 42 01 00 	call	82561 <_runtime.throw>
 1014adf:	90 	nop
 1014ae0:	e8 1b bc 02 00 	call	179227 <_runtime.morestackc>
 1014ae5:	e9 16 fe ff ff 	jmp	-490 <_runtime.gcSweep>
 1014aea:	cc 	int3
 1014aeb:	cc 	int3
 1014aec:	cc 	int3
 1014aed:	cc 	int3
 1014aee:	cc 	int3
 1014aef:	cc 	int3

_runtime.gcResetMarkState:
 1014af0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1014af9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 1014afd:	0f 86 28 01 00 00 	jbe	296 <_runtime.gcResetMarkState+0x13b>
 1014b03:	48 83 ec 30 	sub	rsp, 48
 1014b07:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1014b0c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1014b11:	48 8d 05 d0 2c 0e 00 	lea	rax, [rip + 928976]
 1014b18:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014b1c:	e8 0f 36 ff ff 	call	-51697 <_runtime.lock>
 1014b21:	48 8b 05 f8 97 0b 00 	mov	rax, qword ptr [rip + 759800]
 1014b28:	48 8b 0d f9 97 0b 00 	mov	rcx, qword ptr [rip + 759801]
 1014b2f:	31 d2 	xor	edx, edx
 1014b31:	eb 19 	jmp	25 <_runtime.gcResetMarkState+0x5c>
 1014b33:	48 8b 1c d0 	mov	rbx, qword ptr [rax + 8*rdx]
 1014b37:	c6 83 b6 00 00 00 00 	mov	byte ptr [rbx + 182], 0
 1014b3e:	48 c7 83 70 01 00 00 00 00 00 00 	mov	qword ptr [rbx + 368], 0
 1014b49:	48 ff c2 	inc	rdx
 1014b4c:	48 39 ca 	cmp	rdx, rcx
 1014b4f:	7c e2 	jl	-30 <_runtime.gcResetMarkState+0x43>
 1014b51:	48 8d 05 90 2c 0e 00 	lea	rax, [rip + 928912]
 1014b58:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014b5c:	e8 af 37 ff ff 	call	-51281 <_runtime.unlock>
 1014b61:	48 8d 05 98 04 0d 00 	lea	rax, [rip + 853144]
 1014b68:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014b6c:	e8 bf 35 ff ff 	call	-51777 <_runtime.lock>
 1014b71:	48 8b 05 a0 08 0e 00 	mov	rax, qword ptr [rip + 919712]
 1014b78:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1014b7d:	48 8b 0d 8c 08 0e 00 	mov	rcx, qword ptr [rip + 919692]
 1014b84:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1014b89:	48 8d 15 70 04 0d 00 	lea	rdx, [rip + 853104]
 1014b90:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1014b94:	e8 77 37 ff ff 	call	-51337 <_runtime.unlock>
 1014b99:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1014b9e:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1014ba3:	31 d2 	xor	edx, edx
 1014ba5:	eb 36 	jmp	54 <_runtime.gcResetMarkState+0xed>
 1014ba7:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1014bac:	48 8b 04 f3 	mov	rax, qword ptr [rbx + 8*rsi]
 1014bb0:	84 00 	test	byte ptr [rax], al
 1014bb2:	48 05 00 04 21 00 	add	rax, 2163712
 1014bb8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014bbc:	48 c7 44 24 08 00 04 00 00 	mov	qword ptr [rsp + 8], 1024
 1014bc5:	e8 f6 ec 03 00 	call	257270 <_runtime.memclrNoHeapPointers>
 1014bca:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1014bcf:	48 8d 50 01 	lea	rdx, [rax + 1]
 1014bd3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1014bd8:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1014bdd:	48 39 c2 	cmp	rdx, rax
 1014be0:	7d 18 	jge	24 <_runtime.gcResetMarkState+0x10a>
 1014be2:	48 8b 1d e7 07 0e 00 	mov	rbx, qword ptr [rip + 919527]
 1014be9:	84 03 	test	byte ptr [rbx], al
 1014beb:	48 8b 34 d1 	mov	rsi, qword ptr [rcx + 8*rdx]
 1014bef:	48 81 fe 00 00 40 00 	cmp	rsi, 4194304
 1014bf6:	72 af 	jb	-81 <_runtime.gcResetMarkState+0xb7>
 1014bf8:	eb 23 	jmp	35 <_runtime.gcResetMarkState+0x12d>
 1014bfa:	48 c7 05 bb 9d 0b 00 00 00 00 00 	mov	qword ptr [rip + 761275], 0
 1014c05:	48 8b 05 64 51 0e 00 	mov	rax, qword ptr [rip + 938340]
 1014c0c:	48 89 05 2d 9e 0b 00 	mov	qword ptr [rip + 761389], rax
 1014c13:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1014c18:	48 83 c4 30 	add	rsp, 48
 1014c1c:	c3 	ret
 1014c1d:	48 89 f0 	mov	rax, rsi
 1014c20:	b9 00 00 40 00 	mov	ecx, 4194304
 1014c25:	e8 36 e7 03 00 	call	255798 <_runtime.panicIndexU>
 1014c2a:	90 	nop
 1014c2b:	e8 d0 ba 02 00 	call	178896 <_runtime.morestackc>
 1014c30:	e9 bb fe ff ff 	jmp	-325 <_runtime.gcResetMarkState>
 1014c35:	cc 	int3
 1014c36:	cc 	int3
 1014c37:	cc 	int3
 1014c38:	cc 	int3
 1014c39:	cc 	int3
 1014c3a:	cc 	int3
 1014c3b:	cc 	int3
 1014c3c:	cc 	int3
 1014c3d:	cc 	int3
 1014c3e:	cc 	int3
 1014c3f:	cc 	int3

_runtime.clearpools:
 1014c40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1014c49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1014c4d:	0f 86 42 01 00 00 	jbe	322 <_runtime.clearpools+0x155>
 1014c53:	48 83 ec 10 	sub	rsp, 16
 1014c57:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1014c5c:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1014c61:	48 8b 15 08 96 0b 00 	mov	rdx, qword ptr [rip + 759304]
 1014c68:	48 85 d2 	test	rdx, rdx
 1014c6b:	0f 85 1a 01 00 00 	jne	282 <_runtime.clearpools+0x14b>
 1014c71:	48 8d 05 a0 9a 0b 00 	lea	rax, [rip + 760480]
 1014c78:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014c7c:	e8 af 34 ff ff 	call	-52049 <_runtime.lock>
 1014c81:	48 8b 05 98 9a 0b 00 	mov	rax, qword ptr [rip + 760472]
 1014c88:	eb 03 	jmp	3 <_runtime.clearpools+0x4d>
 1014c8a:	48 89 c8 	mov	rax, rcx
 1014c8d:	48 85 c0 	test	rax, rax
 1014c90:	74 24 	je	36 <_runtime.clearpools+0x76>
 1014c92:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1014c96:	83 3d 63 2c 0e 00 00 	cmp	dword ptr [rip + 928867], 0
 1014c9d:	75 0a 	jne	10 <_runtime.clearpools+0x69>
 1014c9f:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 1014ca7:	eb e1 	jmp	-31 <_runtime.clearpools+0x4a>
 1014ca9:	48 8d 78 10 	lea	rdi, [rax + 16]
 1014cad:	31 c0 	xor	eax, eax
 1014caf:	e8 2c dd 03 00 	call	253228 <_runtime.gcWriteBarrier>
 1014cb4:	eb d4 	jmp	-44 <_runtime.clearpools+0x4a>
 1014cb6:	83 3d 43 2c 0e 00 00 	cmp	dword ptr [rip + 928835], 0
 1014cbd:	0f 85 b5 00 00 00 	jne	181 <_runtime.clearpools+0x138>
 1014cc3:	48 c7 05 52 9a 0b 00 00 00 00 00 	mov	qword ptr [rip + 760402], 0
 1014cce:	48 8d 05 43 9a 0b 00 	lea	rax, [rip + 760387]
 1014cd5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014cd9:	e8 32 36 ff ff 	call	-51662 <_runtime.unlock>
 1014cde:	48 8d 05 43 9a 0b 00 	lea	rax, [rip + 760387]
 1014ce5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014ce9:	e8 42 34 ff ff 	call	-52158 <_runtime.lock>
 1014cee:	31 c0 	xor	eax, eax
 1014cf0:	eb 46 	jmp	70 <_runtime.clearpools+0xf8>
 1014cf2:	48 89 da 	mov	rdx, rbx
 1014cf5:	48 85 d2 	test	rdx, rdx
 1014cf8:	74 2a 	je	42 <_runtime.clearpools+0xe4>
 1014cfa:	48 8b 5a 28 	mov	rbx, qword ptr [rdx + 40]
 1014cfe:	83 3d fb 2b 0e 00 00 	cmp	dword ptr [rip + 928763], 0
 1014d05:	75 0a 	jne	10 <_runtime.clearpools+0xd1>
 1014d07:	48 c7 42 28 00 00 00 00 	mov	qword ptr [rdx + 40], 0
 1014d0f:	eb e1 	jmp	-31 <_runtime.clearpools+0xb2>
 1014d11:	48 8d 7a 28 	lea	rdi, [rdx + 40]
 1014d15:	48 89 c2 	mov	rdx, rax
 1014d18:	31 c0 	xor	eax, eax
 1014d1a:	e8 c1 dc 03 00 	call	253121 <_runtime.gcWriteBarrier>
 1014d1f:	48 89 d0 	mov	rax, rdx
 1014d22:	eb ce 	jmp	-50 <_runtime.clearpools+0xb2>
 1014d24:	83 3d d5 2b 0e 00 00 	cmp	dword ptr [rip + 928725], 0
 1014d2b:	75 1e 	jne	30 <_runtime.clearpools+0x10b>
 1014d2d:	48 c7 04 c1 00 00 00 00 	mov	qword ptr [rcx + 8*rax], 0
 1014d35:	48 ff c0 	inc	rax
 1014d38:	48 83 f8 05 	cmp	rax, 5
 1014d3c:	7d 20 	jge	32 <_runtime.clearpools+0x11e>
 1014d3e:	48 8d 0d eb 99 0b 00 	lea	rcx, [rip + 760299]
 1014d45:	48 8b 14 c1 	mov	rdx, qword ptr [rcx + 8*rax]
 1014d49:	eb aa 	jmp	-86 <_runtime.clearpools+0xb5>
 1014d4b:	48 8d 3c c1 	lea	rdi, [rcx + 8*rax]
 1014d4f:	48 89 c1 	mov	rcx, rax
 1014d52:	31 c0 	xor	eax, eax
 1014d54:	e8 87 dc 03 00 	call	253063 <_runtime.gcWriteBarrier>
 1014d59:	48 89 c8 	mov	rax, rcx
 1014d5c:	eb d7 	jmp	-41 <_runtime.clearpools+0xf5>
 1014d5e:	48 8d 05 c3 99 0b 00 	lea	rax, [rip + 760259]
 1014d65:	48 89 04 24 	mov	qword ptr [rsp], rax
 1014d69:	e8 a2 35 ff ff 	call	-51806 <_runtime.unlock>
 1014d6e:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1014d73:	48 83 c4 10 	add	rsp, 16
 1014d77:	c3 	ret
 1014d78:	48 8d 3d a1 99 0b 00 	lea	rdi, [rip + 760225]
 1014d7f:	31 c0 	xor	eax, eax
 1014d81:	e8 5a dc 03 00 	call	253018 <_runtime.gcWriteBarrier>
 1014d86:	e9 43 ff ff ff 	jmp	-189 <_runtime.clearpools+0x8e>
 1014d8b:	48 8b 02 	mov	rax, qword ptr [rdx]
 1014d8e:	ff d0 	call	rax
 1014d90:	e9 dc fe ff ff 	jmp	-292 <_runtime.clearpools+0x31>
 1014d95:	e8 36 be 03 00 	call	245302 <_runtime.morestack_noctxt>
 1014d9a:	e9 a1 fe ff ff 	jmp	-351 <_runtime.clearpools>
 1014d9f:	cc 	int3

_runtime.itoaDiv:
 1014da0:	48 83 ec 18 	sub	rsp, 24
 1014da4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1014da9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1014dae:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1014db3:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 1014db7:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1014dbc:	48 89 d6 	mov	rsi, rdx
 1014dbf:	48 29 da 	sub	rdx, rbx
 1014dc2:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1014dc7:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1014dcc:	eb 06 	jmp	6 <_runtime.itoaDiv+0x34>
 1014dce:	48 89 d7 	mov	rdi, rdx
 1014dd1:	4c 89 c2 	mov	rdx, r8
 1014dd4:	48 83 ff 0a 	cmp	rdi, 10
 1014dd8:	72 49 	jb	73 <_runtime.itoaDiv+0x83>
 1014dda:	48 b8 cd cc cc cc cc cc cc cc 	movabs	rax, -3689348814741910323
 1014de4:	49 89 d0 	mov	r8, rdx
 1014de7:	48 f7 e7 	mul	rdi
 1014dea:	48 c1 ea 03 	shr	rdx, 3
 1014dee:	4c 8d 0c 92 	lea	r9, [rdx + 4*rdx]
 1014df2:	49 d1 e1 	shl	r9
 1014df5:	4c 29 cf 	sub	rdi, r9
 1014df8:	48 39 ce 	cmp	rsi, rcx
 1014dfb:	73 78 	jae	120 <_runtime.itoaDiv+0xd5>
 1014dfd:	48 83 c7 30 	add	rdi, 48
 1014e01:	40 88 3c 33 	mov	byte ptr [rbx + rsi], dil
 1014e05:	48 8d 46 ff 	lea	rax, [rsi - 1]
 1014e09:	4c 39 c0 	cmp	rax, r8
 1014e0c:	75 10 	jne	16 <_runtime.itoaDiv+0x7e>
 1014e0e:	48 39 c8 	cmp	rax, rcx
 1014e11:	73 5d 	jae	93 <_runtime.itoaDiv+0xd0>
 1014e13:	c6 44 1e ff 2e 	mov	byte ptr [rsi + rbx - 1], 46
 1014e18:	48 83 c6 fe 	add	rsi, -2
 1014e1c:	eb b0 	jmp	-80 <_runtime.itoaDiv+0x2e>
 1014e1e:	48 89 c6 	mov	rsi, rax
 1014e21:	eb ab 	jmp	-85 <_runtime.itoaDiv+0x2e>
 1014e23:	48 39 d6 	cmp	rsi, rdx
 1014e26:	7d b2 	jge	-78 <_runtime.itoaDiv+0x3a>
 1014e28:	48 39 ce 	cmp	rsi, rcx
 1014e2b:	73 3b 	jae	59 <_runtime.itoaDiv+0xc8>
 1014e2d:	48 8d 47 30 	lea	rax, [rdi + 48]
 1014e31:	88 04 33 	mov	byte ptr [rbx + rsi], al
 1014e34:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1014e39:	48 29 f0 	sub	rax, rsi
 1014e3c:	48 89 c2 	mov	rdx, rax
 1014e3f:	48 f7 d8 	neg	rax
 1014e42:	48 c1 f8 3f 	sar	rax, 63
 1014e46:	48 21 f0 	and	rax, rsi
 1014e49:	48 01 d8 	add	rax, rbx
 1014e4c:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1014e51:	48 29 f1 	sub	rcx, rsi
 1014e54:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1014e59:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1014e5e:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1014e63:	48 83 c4 18 	add	rsp, 24
 1014e67:	c3 	ret
 1014e68:	48 89 f0 	mov	rax, rsi
 1014e6b:	e8 e0 e4 03 00 	call	255200 <_runtime.panicIndex>
 1014e70:	e8 db e4 03 00 	call	255195 <_runtime.panicIndex>
 1014e75:	48 89 f0 	mov	rax, rsi
 1014e78:	e8 d3 e4 03 00 	call	255187 <_runtime.panicIndex>
 1014e7d:	90 	nop
 1014e7e:	cc 	int3
 1014e7f:	cc 	int3

_runtime.fmtNSAsMS:
 1014e80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1014e89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1014e8d:	0f 86 67 01 00 00 	jbe	359 <_runtime.fmtNSAsMS+0x17a>
 1014e93:	48 83 ec 48 	sub	rsp, 72
 1014e97:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1014e9c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1014ea1:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 1014ea6:	48 81 fa 80 96 98 00 	cmp	rdx, 10000000
 1014ead:	0f 83 d3 00 00 00 	jae	211 <_runtime.fmtNSAsMS+0x106>
 1014eb3:	48 d1 ea 	shr	rdx
 1014eb6:	48 b8 3c df 4f 8d 97 6e 12 83 	movabs	rax, -9002011107970261188
 1014ec0:	48 f7 e2 	mul	rdx
 1014ec3:	48 c1 ea 08 	shr	rdx, 8
 1014ec7:	48 85 d2 	test	rdx, rdx
 1014eca:	74 7f 	je	127 <_runtime.fmtNSAsMS+0xcb>
 1014ecc:	b8 03 00 00 00 	mov	eax, 3
 1014ed1:	eb 1b 	jmp	27 <_runtime.fmtNSAsMS+0x6e>
 1014ed3:	48 89 c1 	mov	rcx, rax
 1014ed6:	48 89 d0 	mov	rax, rdx
 1014ed9:	48 bb cd cc cc cc cc cc cc cc 	movabs	rbx, -3689348814741910323
 1014ee3:	48 f7 e3 	mul	rbx
 1014ee6:	48 c1 ea 03 	shr	rdx, 3
 1014eea:	48 8d 41 ff 	lea	rax, [rcx - 1]
 1014eee:	48 83 fa 64 	cmp	rdx, 100
 1014ef2:	73 df 	jae	-33 <_runtime.fmtNSAsMS+0x53>
 1014ef4:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1014ef9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1014efd:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1014f02:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1014f07:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1014f0c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1014f11:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1014f16:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1014f1b:	e8 80 fe ff ff 	call	-384 <_runtime.itoaDiv>
 1014f20:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1014f25:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1014f2a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1014f2f:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1014f34:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 1014f39:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 1014f41:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1014f46:	48 83 c4 48 	add	rsp, 72
 1014f4a:	c3 	ret
 1014f4b:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1014f50:	48 85 c9 	test	rcx, rcx
 1014f53:	0f 86 99 00 00 00 	jbe	153 <_runtime.fmtNSAsMS+0x172>
 1014f59:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1014f5e:	c6 00 30 	mov	byte ptr [rax], 48
 1014f61:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1014f66:	48 c7 44 24 78 01 00 00 00 	mov	qword ptr [rsp + 120], 1
 1014f6f:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1014f74:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 1014f7c:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1014f81:	48 83 c4 48 	add	rsp, 72
 1014f85:	c3 	ret
 1014f86:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1014f8b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1014f8f:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1014f94:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1014f99:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1014f9e:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1014fa3:	48 b8 b6 69 6c af 05 bd 37 86 	movabs	rax, -8775337516792518218
 1014fad:	48 f7 e2 	mul	rdx
 1014fb0:	48 c1 ea 13 	shr	rdx, 19
 1014fb4:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1014fb9:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1014fc2:	e8 d9 fd ff ff 	call	-551 <_runtime.itoaDiv>
 1014fc7:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1014fcc:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1014fd1:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1014fd6:	48 89 5c 24 70 	mov	qword ptr [rsp + 112], rbx
 1014fdb:	48 89 54 24 78 	mov	qword ptr [rsp + 120], rdx
 1014fe0:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 1014fe8:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1014fed:	48 83 c4 48 	add	rsp, 72
 1014ff1:	c3 	ret
 1014ff2:	31 c0 	xor	eax, eax
 1014ff4:	e8 57 e3 03 00 	call	254807 <_runtime.panicIndex>
 1014ff9:	90 	nop
 1014ffa:	e8 d1 bb 03 00 	call	244689 <_runtime.morestack_noctxt>
 1014fff:	e9 7c fe ff ff 	jmp	-388 <_runtime.fmtNSAsMS>
 1015004:	cc 	int3
 1015005:	cc 	int3
 1015006:	cc 	int3
 1015007:	cc 	int3
 1015008:	cc 	int3
 1015009:	cc 	int3
 101500a:	cc 	int3
 101500b:	cc 	int3
 101500c:	cc 	int3
 101500d:	cc 	int3
 101500e:	cc 	int3
 101500f:	cc 	int3

_runtime.gcMarkRootPrepare:
 1015010:	0f 57 c0 	xorps	xmm0, xmm0
 1015013:	0f 11 05 ce 99 0b 00 	movups	xmmword ptr [rip + 760270], xmm0
 101501a:	48 c7 05 d3 99 0b 00 00 00 00 00 	mov	qword ptr [rip + 760275], 0
 1015025:	48 8b 05 34 92 0b 00 	mov	rax, qword ptr [rip + 758324]
 101502c:	48 85 c0 	test	rax, rax
 101502f:	0f 84 12 01 00 00 	je	274 <_runtime.gcMarkRootPrepare+0x137>
 1015035:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1015039:	48 8b 00 	mov	rax, qword ptr [rax]
 101503c:	31 d2 	xor	edx, edx
 101503e:	eb 03 	jmp	3 <_runtime.gcMarkRootPrepare+0x33>
 1015040:	48 ff c2 	inc	rdx
 1015043:	48 39 ca 	cmp	rdx, rcx
 1015046:	7d 2f 	jge	47 <_runtime.gcMarkRootPrepare+0x67>
 1015048:	48 8b 1c d0 	mov	rbx, qword ptr [rax + 8*rdx]
 101504c:	48 8b b3 88 00 00 00 	mov	rsi, qword ptr [rbx + 136]
 1015053:	48 2b b3 80 00 00 00 	sub	rsi, qword ptr [rbx + 128]
 101505a:	48 8d 9e ff ff 03 00 	lea	rbx, [rsi + 262143]
 1015061:	48 c1 eb 12 	shr	rbx, 18
 1015065:	48 39 1d 84 99 0b 00 	cmp	qword ptr [rip + 760196], rbx
 101506c:	7d d2 	jge	-46 <_runtime.gcMarkRootPrepare+0x30>
 101506e:	48 89 1d 7b 99 0b 00 	mov	qword ptr [rip + 760187], rbx
 1015075:	eb c9 	jmp	-55 <_runtime.gcMarkRootPrepare+0x30>
 1015077:	48 8b 05 e2 91 0b 00 	mov	rax, qword ptr [rip + 758242]
 101507e:	48 85 c0 	test	rax, rax
 1015081:	0f 84 b7 00 00 00 	je	183 <_runtime.gcMarkRootPrepare+0x12e>
 1015087:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101508b:	48 8b 00 	mov	rax, qword ptr [rax]
 101508e:	31 d2 	xor	edx, edx
 1015090:	eb 03 	jmp	3 <_runtime.gcMarkRootPrepare+0x85>
 1015092:	48 ff c2 	inc	rdx
 1015095:	48 39 ca 	cmp	rdx, rcx
 1015098:	7d 2f 	jge	47 <_runtime.gcMarkRootPrepare+0xb9>
 101509a:	48 8b 1c d0 	mov	rbx, qword ptr [rax + 8*rdx]
 101509e:	48 8b b3 98 00 00 00 	mov	rsi, qword ptr [rbx + 152]
 10150a5:	48 2b b3 90 00 00 00 	sub	rsi, qword ptr [rbx + 144]
 10150ac:	48 8d 9e ff ff 03 00 	lea	rbx, [rsi + 262143]
 10150b3:	48 c1 eb 12 	shr	rbx, 18
 10150b7:	48 39 1d 3a 99 0b 00 	cmp	qword ptr [rip + 760122], rbx
 10150be:	7d d2 	jge	-46 <_runtime.gcMarkRootPrepare+0x82>
 10150c0:	48 89 1d 31 99 0b 00 	mov	qword ptr [rip + 760113], rbx
 10150c7:	eb c9 	jmp	-55 <_runtime.gcMarkRootPrepare+0x82>
 10150c9:	8b 05 11 00 0e 00 	mov	eax, dword ptr [rip + 917521]
 10150cf:	d1 e8 	shr	eax
 10150d1:	83 e0 01 	and	eax, 1
 10150d4:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 10150d8:	48 8d 0d 29 00 0e 00 	lea	rcx, [rip + 917545]
 10150df:	48 8d 04 c1 	lea	rax, [rcx + 8*rax]
 10150e3:	48 8d 40 20 	lea	rax, [rax + 32]
 10150e7:	8b 00 	mov	eax, dword ptr [rax]
 10150e9:	05 ff 01 00 00 	add	eax, 511
 10150ee:	c1 e8 09 	shr	eax, 9
 10150f1:	48 89 05 08 99 0b 00 	mov	qword ptr [rip + 760072], rax
 10150f8:	48 8b 05 e1 26 0e 00 	mov	rax, qword ptr [rip + 927457]
 10150ff:	48 89 05 02 99 0b 00 	mov	qword ptr [rip + 760066], rax
 1015106:	c7 05 b8 98 0b 00 00 00 00 00 	mov	dword ptr [rip + 759992], 0
 1015110:	48 8b 05 d1 98 0b 00 	mov	rax, qword ptr [rip + 760017]
 1015117:	48 03 05 d2 98 0b 00 	add	rax, qword ptr [rip + 760018]
 101511e:	48 03 05 d3 98 0b 00 	add	rax, qword ptr [rip + 760019]
 1015125:	48 03 05 d4 98 0b 00 	add	rax, qword ptr [rip + 760020]
 101512c:	48 03 05 d5 98 0b 00 	add	rax, qword ptr [rip + 760021]
 1015133:	48 83 c0 02 	add	rax, 2
 1015137:	89 05 8f 98 0b 00 	mov	dword ptr [rip + 759951], eax
 101513d:	c3 	ret
 101513e:	31 c9 	xor	ecx, ecx
 1015140:	31 c0 	xor	eax, eax
 1015142:	e9 47 ff ff ff 	jmp	-185 <_runtime.gcMarkRootPrepare+0x7e>
 1015147:	31 c9 	xor	ecx, ecx
 1015149:	31 c0 	xor	eax, eax
 101514b:	e9 ec fe ff ff 	jmp	-276 <_runtime.gcMarkRootPrepare+0x2c>

_runtime.gcMarkRootCheck:
 1015150:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1015159:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101515d:	0f 86 fa 01 00 00 	jbe	506 <_runtime.gcMarkRootCheck+0x20d>
 1015163:	48 83 ec 38 	sub	rsp, 56
 1015167:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 101516c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1015171:	8b 05 51 98 0b 00 	mov	eax, dword ptr [rip + 759889]
 1015177:	8b 0d 4f 98 0b 00 	mov	ecx, dword ptr [rip + 759887]
 101517d:	39 c8 	cmp	eax, ecx
 101517f:	0f 82 60 01 00 00 	jb	352 <_runtime.gcMarkRootCheck+0x195>
 1015185:	48 8d 05 5c 26 0e 00 	lea	rax, [rip + 927324]
 101518c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015190:	e8 9b 2f ff ff 	call	-53349 <_runtime.lock>
 1015195:	31 c0 	xor	eax, eax
 1015197:	eb 03 	jmp	3 <_runtime.gcMarkRootCheck+0x4c>
 1015199:	48 ff c0 	inc	rax
 101519c:	48 39 05 65 98 0b 00 	cmp	qword ptr [rip + 759909], rax
 10151a3:	7e 26 	jle	38 <_runtime.gcMarkRootCheck+0x7b>
 10151a5:	48 8b 15 74 91 0b 00 	mov	rdx, qword ptr [rip + 758132]
 10151ac:	48 8b 0d 75 91 0b 00 	mov	rcx, qword ptr [rip + 758133]
 10151b3:	48 39 c8 	cmp	rax, rcx
 10151b6:	0f 83 24 01 00 00 	jae	292 <_runtime.gcMarkRootCheck+0x190>
 10151bc:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 10151c0:	80 ba b6 00 00 00 00 	cmp	byte ptr [rdx + 182], 0
 10151c7:	75 d0 	jne	-48 <_runtime.gcMarkRootCheck+0x49>
 10151c9:	eb 1a 	jmp	26 <_runtime.gcMarkRootCheck+0x95>
 10151cb:	48 8d 05 16 26 0e 00 	lea	rax, [rip + 927254]
 10151d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10151d6:	e8 35 31 ff ff 	call	-52939 <_runtime.unlock>
 10151db:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10151e0:	48 83 c4 38 	add	rsp, 56
 10151e4:	c3 	ret
 10151e5:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10151ea:	90 	nop
 10151eb:	8b 82 90 00 00 00 	mov	eax, dword ptr [rdx + 144]
 10151f1:	89 44 24 14 	mov	dword ptr [rsp + 20], eax
 10151f5:	48 8b 8a 98 00 00 00 	mov	rcx, qword ptr [rdx + 152]
 10151fc:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1015201:	0f b6 9a b6 00 00 00 	movzx	ebx, byte ptr [rdx + 182]
 1015208:	88 5c 24 13 	mov	byte ptr [rsp + 19], bl
 101520c:	e8 8f 52 01 00 	call	86671 <_runtime.printlock>
 1015211:	48 8d 05 ab da 05 00 	lea	rax, [rip + 383659]
 1015218:	48 89 04 24 	mov	qword ptr [rsp], rax
 101521c:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1015225:	e8 b6 5b 01 00 	call	89014 <_runtime.printstring>
 101522a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101522f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015233:	e8 68 5b 01 00 	call	88936 <_runtime.printpointer>
 1015238:	48 8d 05 d9 db 05 00 	lea	rax, [rip + 383961]
 101523f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015243:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 101524c:	e8 8f 5b 01 00 	call	88975 <_runtime.printstring>
 1015251:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1015256:	48 89 04 24 	mov	qword ptr [rsp], rax
 101525a:	e8 c1 59 01 00 	call	88513 <_runtime.printint>
 101525f:	48 8d 05 a9 dd 05 00 	lea	rax, [rip + 384425]
 1015266:	48 89 04 24 	mov	qword ptr [rsp], rax
 101526a:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1015273:	e8 68 5b 01 00 	call	88936 <_runtime.printstring>
 1015278:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 101527c:	89 c0 	mov	eax, eax
 101527e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015282:	e8 99 58 01 00 	call	88217 <_runtime.printuint>
 1015287:	48 8d 05 0d e2 05 00 	lea	rax, [rip + 385549]
 101528e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015292:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101529b:	e8 40 5b 01 00 	call	88896 <_runtime.printstring>
 10152a0:	0f b6 44 24 13 	movzx	eax, byte ptr [rsp + 19]
 10152a5:	88 04 24 	mov	byte ptr [rsp], al
 10152a8:	e8 d3 54 01 00 	call	87251 <_runtime.printbool>
 10152ad:	e8 7e 54 01 00 	call	87166 <_runtime.printnl>
 10152b2:	e8 69 52 01 00 	call	86633 <_runtime.printunlock>
 10152b7:	48 8d 05 2a 25 0e 00 	lea	rax, [rip + 927018]
 10152be:	48 89 04 24 	mov	qword ptr [rsp], rax
 10152c2:	e8 49 30 ff ff 	call	-53175 <_runtime.unlock>
 10152c7:	48 8d 05 37 e7 05 00 	lea	rax, [rip + 386871]
 10152ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10152d2:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 10152db:	e8 80 3a 01 00 	call	80512 <_runtime.throw>
 10152e0:	e8 6b e0 03 00 	call	254059 <_runtime.panicIndex>
 10152e5:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 10152e9:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 10152ed:	e8 ae 51 01 00 	call	86446 <_runtime.printlock>
 10152f2:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 10152f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10152fa:	e8 21 58 01 00 	call	88097 <_runtime.printuint>
 10152ff:	48 8d 05 dd d9 05 00 	lea	rax, [rip + 383453]
 1015306:	48 89 04 24 	mov	qword ptr [rsp], rax
 101530a:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1015313:	e8 c8 5a 01 00 	call	88776 <_runtime.printstring>
 1015318:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 101531c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015320:	e8 fb 57 01 00 	call	88059 <_runtime.printuint>
 1015325:	48 8d 05 dc ed 05 00 	lea	rax, [rip + 388572]
 101532c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015330:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1015339:	e8 a2 5a 01 00 	call	88738 <_runtime.printstring>
 101533e:	e8 dd 51 01 00 	call	86493 <_runtime.printunlock>
 1015343:	48 8d 05 36 f5 05 00 	lea	rax, [rip + 390454]
 101534a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101534e:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1015357:	e8 04 3a 01 00 	call	80388 <_runtime.throw>
 101535c:	90 	nop
 101535d:	e8 6e b8 03 00 	call	243822 <_runtime.morestack_noctxt>
 1015362:	e9 e9 fd ff ff 	jmp	-535 <_runtime.gcMarkRootCheck>
 1015367:	cc 	int3
 1015368:	cc 	int3
 1015369:	cc 	int3
 101536a:	cc 	int3
 101536b:	cc 	int3
 101536c:	cc 	int3
 101536d:	cc 	int3
 101536e:	cc 	int3
 101536f:	cc 	int3

_runtime.markroot:
 1015370:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1015379:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101537d:	0f 86 4f 03 00 00 	jbe	847 <_runtime.markroot+0x362>
 1015383:	48 83 ec 78 	sub	rsp, 120
 1015387:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 101538c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 1015391:	48 8b 15 50 96 0b 00 	mov	rdx, qword ptr [rip + 759376]
 1015398:	8d 5a 02 	lea	ebx, [rdx + 2]
 101539b:	48 8b 35 4e 96 0b 00 	mov	rsi, qword ptr [rip + 759374]
 10153a2:	8d 3c 16 	lea	edi, [rsi + rdx]
 10153a5:	8d 7f 02 	lea	edi, [rdi + 2]
 10153a8:	01 f2 	add	edx, esi
 10153aa:	48 8b 35 47 96 0b 00 	mov	rsi, qword ptr [rip + 759367]
 10153b1:	44 8d 04 32 	lea	r8d, [rdx + rsi]
 10153b5:	45 8d 40 02 	lea	r8d, [r8 + 2]
 10153b9:	01 f2 	add	edx, esi
 10153bb:	48 8b 35 3e 96 0b 00 	mov	rsi, qword ptr [rip + 759358]
 10153c2:	44 8d 0c 32 	lea	r9d, [rdx + rsi]
 10153c6:	45 8d 49 02 	lea	r9d, [r9 + 2]
 10153ca:	01 f2 	add	edx, esi
 10153cc:	48 8b 35 35 96 0b 00 	mov	rsi, qword ptr [rip + 759349]
 10153d3:	8d 14 32 	lea	edx, [rdx + rsi]
 10153d6:	8d 52 02 	lea	edx, [rdx + 2]
 10153d9:	8b 84 24 88 00 00 00 	mov	eax, dword ptr [rsp + 136]
 10153e0:	83 f8 02 	cmp	eax, 2
 10153e3:	72 08 	jb	8 <_runtime.markroot+0x7d>
 10153e5:	39 d8 	cmp	eax, ebx
 10153e7:	0f 82 b5 02 00 00 	jb	693 <_runtime.markroot+0x332>
 10153ed:	39 c3 	cmp	ebx, eax
 10153ef:	0f 87 af 00 00 00 	ja	175 <_runtime.markroot+0x134>
 10153f5:	39 f8 	cmp	eax, edi
 10153f7:	0f 83 a7 00 00 00 	jae	167 <_runtime.markroot+0x134>
 10153fd:	48 8b 0d 5c 8e 0b 00 	mov	rcx, qword ptr [rip + 757340]
 1015404:	48 85 c9 	test	rcx, rcx
 1015407:	0f 84 8e 00 00 00 	je	142 <_runtime.markroot+0x12b>
 101540d:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 1015411:	48 8b 09 	mov	rcx, qword ptr [rcx]
 1015414:	89 5c 24 28 	mov	dword ptr [rsp + 40], ebx
 1015418:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 101541d:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1015422:	31 f6 	xor	esi, esi
 1015424:	eb 66 	jmp	102 <_runtime.markroot+0x11c>
 1015426:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 101542b:	48 8b 14 f1 	mov	rdx, qword ptr [rcx + 8*rsi]
 101542f:	48 8b ba 80 00 00 00 	mov	rdi, qword ptr [rdx + 128]
 1015436:	4c 8b 82 88 00 00 00 	mov	r8, qword ptr [rdx + 136]
 101543d:	48 8b 92 98 01 00 00 	mov	rdx, qword ptr [rdx + 408]
 1015444:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1015448:	49 29 f8 	sub	r8, rdi
 101544b:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1015450:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1015455:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 101545d:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1015462:	29 d8 	sub	eax, ebx
 1015464:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1015469:	e8 72 02 00 00 	call	626 <_runtime.markrootBlock>
 101546e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1015473:	48 8d 70 01 	lea	rsi, [rax + 1]
 1015477:	8b 84 24 88 00 00 00 	mov	eax, dword ptr [rsp + 136]
 101547e:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1015483:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1015488:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 101548c:	48 39 d6 	cmp	rsi, rdx
 101548f:	7c 95 	jl	-107 <_runtime.markroot+0xb6>
 1015491:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1015496:	48 83 c4 78 	add	rsp, 120
 101549a:	c3 	ret
 101549b:	31 d2 	xor	edx, edx
 101549d:	31 c9 	xor	ecx, ecx
 101549f:	e9 70 ff ff ff 	jmp	-144 <_runtime.markroot+0xa4>
 10154a4:	39 c7 	cmp	edi, eax
 10154a6:	0f 87 ab 00 00 00 	ja	171 <_runtime.markroot+0x1e7>
 10154ac:	44 39 c0 	cmp	eax, r8d
 10154af:	0f 83 a2 00 00 00 	jae	162 <_runtime.markroot+0x1e7>
 10154b5:	48 8b 0d a4 8d 0b 00 	mov	rcx, qword ptr [rip + 757156]
 10154bc:	48 85 c9 	test	rcx, rcx
 10154bf:	0f 84 89 00 00 00 	je	137 <_runtime.markroot+0x1de>
 10154c5:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 10154c9:	48 8b 09 	mov	rcx, qword ptr [rcx]
 10154cc:	89 7c 24 2c 	mov	dword ptr [rsp + 44], edi
 10154d0:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 10154d5:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 10154da:	31 db 	xor	ebx, ebx
 10154dc:	eb 66 	jmp	102 <_runtime.markroot+0x1d4>
 10154de:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 10154e3:	48 8b 14 d9 	mov	rdx, qword ptr [rcx + 8*rbx]
 10154e7:	48 8b b2 90 00 00 00 	mov	rsi, qword ptr [rdx + 144]
 10154ee:	4c 8b 82 98 00 00 00 	mov	r8, qword ptr [rdx + 152]
 10154f5:	48 8b 92 a8 01 00 00 	mov	rdx, qword ptr [rdx + 424]
 10154fc:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1015500:	49 29 f0 	sub	r8, rsi
 1015503:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1015508:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101550d:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1015515:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 101551a:	29 f8 	sub	eax, edi
 101551c:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1015521:	e8 ba 01 00 00 	call	442 <_runtime.markrootBlock>
 1015526:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101552b:	48 8d 58 01 	lea	rbx, [rax + 1]
 101552f:	8b 84 24 88 00 00 00 	mov	eax, dword ptr [rsp + 136]
 1015536:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 101553b:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1015540:	8b 7c 24 2c 	mov	edi, dword ptr [rsp + 44]
 1015544:	48 39 d3 	cmp	rbx, rdx
 1015547:	7c 95 	jl	-107 <_runtime.markroot+0x16e>
 1015549:	e9 43 ff ff ff 	jmp	-189 <_runtime.markroot+0x121>
 101554e:	31 d2 	xor	edx, edx
 1015550:	31 c9 	xor	ecx, ecx
 1015552:	e9 75 ff ff ff 	jmp	-139 <_runtime.markroot+0x15c>
 1015557:	85 c0 	test	eax, eax
 1015559:	75 61 	jne	97 <_runtime.markroot+0x24c>
 101555b:	48 8b 05 96 8c 0b 00 	mov	rax, qword ptr [rip + 756886]
 1015562:	eb 4e 	jmp	78 <_runtime.markroot+0x242>
 1015564:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1015569:	8b 48 10 	mov	ecx, dword ptr [rax + 16]
 101556c:	48 8d 50 18 	lea	rdx, [rax + 24]
 1015570:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1015574:	89 c9 	mov	ecx, ecx
 1015576:	48 8d 0c 89 	lea	rcx, [rcx + 4*rcx]
 101557a:	48 c1 e1 03 	shl	rcx, 3
 101557e:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1015583:	48 8d 0d 76 24 0e 00 	lea	rcx, [rip + 926838]
 101558a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101558f:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1015597:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101559c:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 10155a5:	e8 b6 1f 00 00 	call	8118 <_runtime.scanblock>
 10155aa:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10155af:	48 8b 00 	mov	rax, qword ptr [rax]
 10155b2:	48 85 c0 	test	rax, rax
 10155b5:	75 ad 	jne	-83 <_runtime.markroot+0x1f4>
 10155b7:	e9 d5 fe ff ff 	jmp	-299 <_runtime.markroot+0x121>
 10155bc:	83 f8 01 	cmp	eax, 1
 10155bf:	0f 84 c8 00 00 00 	je	200 <_runtime.markroot+0x31d>
 10155c5:	41 39 c0 	cmp	r8d, eax
 10155c8:	77 09 	ja	9 <_runtime.markroot+0x263>
 10155ca:	44 39 c8 	cmp	eax, r9d
 10155cd:	0f 82 9c 00 00 00 	jb	156 <_runtime.markroot+0x2ff>
 10155d3:	41 39 c1 	cmp	r9d, eax
 10155d6:	0f 87 dc 00 00 00 	ja	220 <_runtime.markroot+0x348>
 10155dc:	39 d0 	cmp	eax, edx
 10155de:	0f 83 d4 00 00 00 	jae	212 <_runtime.markroot+0x348>
 10155e4:	48 8b 15 35 8d 0b 00 	mov	rdx, qword ptr [rip + 757045]
 10155eb:	48 8b 0d 36 8d 0b 00 	mov	rcx, qword ptr [rip + 757046]
 10155f2:	44 29 c8 	sub	eax, r9d
 10155f5:	48 39 c8 	cmp	rax, rcx
 10155f8:	0f 83 b5 00 00 00 	jae	181 <_runtime.markroot+0x343>
 10155fe:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 1015602:	90 	nop
 1015603:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1015609:	83 f9 04 	cmp	ecx, 4
 101560c:	75 5a 	jne	90 <_runtime.markroot+0x2f8>
 101560e:	48 83 b8 a8 00 00 00 00 	cmp	qword ptr [rax + 168], 0
 1015616:	75 0e 	jne	14 <_runtime.markroot+0x2b6>
 1015618:	48 8b 0d b9 93 0b 00 	mov	rcx, qword ptr [rip + 758713]
 101561f:	48 89 88 a8 00 00 00 	mov	qword ptr [rax + 168], rcx
 1015626:	0f 57 c0 	xorps	xmm0, xmm0
 1015629:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 101562e:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 1015637:	48 8d 0d 42 8e 03 00 	lea	rcx, [rip + 233026]
 101563e:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1015643:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1015648:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1015650:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1015655:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 101565a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101565e:	e8 1d b4 03 00 	call	242717 <_runtime.systemstack>
 1015663:	e9 29 fe ff ff 	jmp	-471 <_runtime.markroot+0x121>
 1015668:	83 f9 03 	cmp	ecx, 3
 101566b:	74 a1 	je	-95 <_runtime.markroot+0x29e>
 101566d:	eb b7 	jmp	-73 <_runtime.markroot+0x2b6>
 101566f:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1015677:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101567b:	44 29 c0 	sub	eax, r8d
 101567e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1015683:	e8 48 02 00 00 	call	584 <_runtime.markrootSpans>
 1015688:	e9 04 fe ff ff 	jmp	-508 <_runtime.markroot+0x121>
 101568d:	48 8d 05 24 22 06 00 	lea	rax, [rip + 401956]
 1015694:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015698:	e8 e3 b3 03 00 	call	242659 <_runtime.systemstack>
 101569d:	e9 ef fd ff ff 	jmp	-529 <_runtime.markroot+0x121>
 10156a2:	83 c0 fe 	add	eax, -2
 10156a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10156a9:	e8 92 f9 00 00 	call	63890 <_runtime.flushmcache>
 10156ae:	e9 de fd ff ff 	jmp	-546 <_runtime.markroot+0x121>
 10156b3:	e8 98 dc 03 00 	call	253080 <_runtime.panicIndex>
 10156b8:	48 8d 05 19 e9 05 00 	lea	rax, [rip + 387353]
 10156bf:	48 89 04 24 	mov	qword ptr [rsp], rax
 10156c3:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 10156cc:	e8 8f 36 01 00 	call	79503 <_runtime.throw>
 10156d1:	90 	nop
 10156d2:	e8 f9 b4 03 00 	call	242937 <_runtime.morestack_noctxt>
 10156d7:	e9 94 fc ff ff 	jmp	-876 <_runtime.markroot>
 10156dc:	cc 	int3
 10156dd:	cc 	int3
 10156de:	cc 	int3
 10156df:	cc 	int3

_runtime.markrootBlock:
 10156e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10156e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10156ed:	0f 86 8b 00 00 00 	jbe	139 <_runtime.markrootBlock+0x9e>
 10156f3:	48 83 ec 30 	sub	rsp, 48
 10156f7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10156fc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1015701:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1015706:	48 89 c1 	mov	rcx, rax
 1015709:	48 c1 e0 12 	shl	rax, 18
 101570d:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1015712:	48 39 d0 	cmp	rax, rdx
 1015715:	72 0a 	jb	10 <_runtime.markrootBlock+0x41>
 1015717:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101571c:	48 83 c4 30 	add	rsp, 48
 1015720:	c3 	ret
 1015721:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1015726:	48 01 c3 	add	rbx, rax
 1015729:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101572d:	48 8d 98 00 00 04 00 	lea	rbx, [rax + 262144]
 1015734:	48 89 d6 	mov	rsi, rdx
 1015737:	48 29 c2 	sub	rdx, rax
 101573a:	48 39 f3 	cmp	rbx, rsi
 101573d:	b8 00 00 04 00 	mov	eax, 262144
 1015742:	48 0f 47 c2 	cmova	rax, rdx
 1015746:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101574b:	48 c1 e1 0c 	shl	rcx, 12
 101574f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1015754:	48 01 c8 	add	rax, rcx
 1015757:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101575c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1015761:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1015766:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 101576f:	e8 ec 1d 00 00 	call	7660 <_runtime.scanblock>
 1015774:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1015779:	48 83 c4 30 	add	rsp, 48
 101577d:	c3 	ret
 101577e:	e8 4d b4 03 00 	call	242765 <_runtime.morestack_noctxt>
 1015783:	e9 58 ff ff ff 	jmp	-168 <_runtime.markrootBlock>
 1015788:	cc 	int3
 1015789:	cc 	int3
 101578a:	cc 	int3
 101578b:	cc 	int3
 101578c:	cc 	int3
 101578d:	cc 	int3
 101578e:	cc 	int3
 101578f:	cc 	int3

_runtime.markrootFreeGStacks:
 1015790:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1015799:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101579d:	0f 86 17 01 00 00 	jbe	279 <_runtime.markrootFreeGStacks+0x12a>
 10157a3:	48 83 ec 48 	sub	rsp, 72
 10157a7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 10157ac:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 10157b1:	48 8d 05 40 8f 0b 00 	lea	rax, [rip + 757568]
 10157b8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10157bc:	e8 6f 29 ff ff 	call	-54929 <_runtime.lock>
 10157c1:	48 8b 05 38 8f 0b 00 	mov	rax, qword ptr [rip + 757560]
 10157c8:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10157cd:	48 c7 05 28 8f 0b 00 00 00 00 00 	mov	qword ptr [rip + 757544], 0
 10157d8:	48 8d 05 19 8f 0b 00 	lea	rax, [rip + 757529]
 10157df:	48 89 04 24 	mov	qword ptr [rsp], rax
 10157e3:	e8 28 2b ff ff 	call	-54488 <_runtime.unlock>
 10157e8:	48 83 7c 24 10 00 	cmp	qword ptr [rsp + 16], 0
 10157ee:	0f 84 bc 00 00 00 	je	188 <_runtime.markrootFreeGStacks+0x120>
 10157f4:	0f 57 c0 	xorps	xmm0, xmm0
 10157f7:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 10157fc:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1015801:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1015806:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101580b:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1015810:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1015815:	eb 35 	jmp	53 <_runtime.markrootFreeGStacks+0xbc>
 1015817:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101581c:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1015820:	48 8b 10 	mov	rdx, qword ptr [rax]
 1015823:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1015827:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101582c:	e8 ff 84 02 00 	call	165119 <_runtime.stackfree>
 1015831:	0f 57 c0 	xorps	xmm0, xmm0
 1015834:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1015839:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 101583c:	90 	nop
 101583d:	48 89 c1 	mov	rcx, rax
 1015840:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1015845:	48 8b 81 a0 00 00 00 	mov	rax, qword ptr [rcx + 160]
 101584c:	48 85 c0 	test	rax, rax
 101584f:	75 c6 	jne	-58 <_runtime.markrootFreeGStacks+0x87>
 1015851:	48 8d 05 a0 8e 0b 00 	lea	rax, [rip + 757408]
 1015858:	48 89 04 24 	mov	qword ptr [rsp], rax
 101585c:	e8 cf 28 ff ff 	call	-55089 <_runtime.lock>
 1015861:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1015866:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101586b:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1015870:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1015875:	48 85 c9 	test	rcx, rcx
 1015878:	75 1a 	jne	26 <_runtime.markrootFreeGStacks+0x104>
 101587a:	48 8d 05 77 8e 0b 00 	lea	rax, [rip + 757367]
 1015881:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015885:	e8 86 2a ff ff 	call	-54650 <_runtime.unlock>
 101588a:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101588f:	48 83 c4 48 	add	rsp, 72
 1015893:	c3 	ret
 1015894:	48 8b 0d 6d 8e 0b 00 	mov	rcx, qword ptr [rip + 757357]
 101589b:	48 89 88 a0 00 00 00 	mov	qword ptr [rax + 160], rcx
 10158a2:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10158a7:	48 89 05 5a 8e 0b 00 	mov	qword ptr [rip + 757338], rax
 10158ae:	eb ca 	jmp	-54 <_runtime.markrootFreeGStacks+0xea>
 10158b0:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10158b5:	48 83 c4 48 	add	rsp, 72
 10158b9:	c3 	ret
 10158ba:	e8 11 b3 03 00 	call	242449 <_runtime.morestack_noctxt>
 10158bf:	e9 cc fe ff ff 	jmp	-308 <_runtime.markrootFreeGStacks>
 10158c4:	cc 	int3
 10158c5:	cc 	int3
 10158c6:	cc 	int3
 10158c7:	cc 	int3
 10158c8:	cc 	int3
 10158c9:	cc 	int3
 10158ca:	cc 	int3
 10158cb:	cc 	int3
 10158cc:	cc 	int3
 10158cd:	cc 	int3
 10158ce:	cc 	int3
 10158cf:	cc 	int3

_runtime.markrootSpans:
 10158d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10158d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10158dd:	0f 86 1f 02 00 00 	jbe	543 <_runtime.markrootSpans+0x232>
 10158e3:	48 83 ec 68 	sub	rsp, 104
 10158e7:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 10158ec:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 10158f1:	8b 05 e9 f7 0d 00 	mov	eax, dword ptr [rip + 915433]
 10158f7:	89 44 24 28 	mov	dword ptr [rsp + 40], eax
 10158fb:	d1 e8 	shr	eax
 10158fd:	83 e0 01 	and	eax, 1
 1015900:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 1015904:	48 8d 15 fd f7 0d 00 	lea	rdx, [rip + 915453]
 101590b:	48 8d 04 c2 	lea	rax, [rdx + 8*rax]
 101590f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015913:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1015918:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101591d:	e8 fe 63 00 00 	call	25598 <_runtime.(*gcSweepBuf).block>
 1015922:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1015927:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 101592c:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1015931:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1015936:	8b 54 24 28 	mov	edx, dword ptr [rsp + 40]
 101593a:	31 db 	xor	ebx, ebx
 101593c:	eb 03 	jmp	3 <_runtime.markrootSpans+0x71>
 101593e:	48 ff c3 	inc	rbx
 1015941:	48 39 cb 	cmp	rbx, rcx
 1015944:	0f 8d 44 01 00 00 	jge	324 <_runtime.markrootSpans+0x1be>
 101594a:	48 8d 34 d8 	lea	rsi, [rax + 8*rbx]
 101594e:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1015951:	48 85 f6 	test	rsi, rsi
 1015954:	0f 84 2a 01 00 00 	je	298 <_runtime.markrootSpans+0x1b4>
 101595a:	40 8a 7e 63 	mov	dil, byte ptr [rsi + 99]
 101595e:	40 80 ff 01 	cmp	dil, 1
 1015962:	40 0f 95 c7 	setne	dil
 1015966:	40 84 ff 	test	dil, dil
 1015969:	75 d3 	jne	-45 <_runtime.markrootSpans+0x6e>
 101596b:	80 3d 00 1e 0e 00 00 	cmp	byte ptr [rip + 925184], 0
 1015972:	0f 84 f2 00 00 00 	je	242 <_runtime.markrootSpans+0x19a>
 1015978:	48 83 be 80 00 00 00 00 	cmp	qword ptr [rsi + 128], 0
 1015980:	74 bc 	je	-68 <_runtime.markrootSpans+0x6e>
 1015982:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 1015987:	48 89 74 24 58 	mov	qword ptr [rsp + 88], rsi
 101598c:	48 8d 46 78 	lea	rax, [rsi + 120]
 1015990:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1015995:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015999:	e8 92 27 ff ff 	call	-55406 <_runtime.lock>
 101599e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10159a3:	48 8b 88 80 00 00 00 	mov	rcx, qword ptr [rax + 128]
 10159aa:	eb 03 	jmp	3 <_runtime.markrootSpans+0xdf>
 10159ac:	48 8b 09 	mov	rcx, qword ptr [rcx]
 10159af:	48 85 c9 	test	rcx, rcx
 10159b2:	0f 84 8c 00 00 00 	je	140 <_runtime.markrootSpans+0x174>
 10159b8:	80 79 0a 01 	cmp	byte ptr [rcx + 10], 1
 10159bc:	75 ee 	jne	-18 <_runtime.markrootSpans+0xdc>
 10159be:	0f b7 51 08 	movzx	edx, word ptr [rcx + 8]
 10159c2:	48 8b 58 68 	mov	rbx, qword ptr [rax + 104]
 10159c6:	48 8b 70 18 	mov	rsi, qword ptr [rax + 24]
 10159ca:	48 85 db 	test	rbx, rbx
 10159cd:	0f 84 c5 00 00 00 	je	197 <_runtime.markrootSpans+0x1c8>
 10159d3:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10159d8:	48 89 d0 	mov	rax, rdx
 10159db:	31 d2 	xor	edx, edx
 10159dd:	48 f7 f3 	div	rbx
 10159e0:	48 0f af c3 	imul	rax, rbx
 10159e4:	48 8d 0c 06 	lea	rcx, [rsi + rax]
 10159e8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10159ec:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 10159f1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10159f6:	e8 e5 1c 00 00 	call	7397 <_runtime.scanobject>
 10159fb:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1015a00:	48 8d 51 10 	lea	rdx, [rcx + 16]
 1015a04:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1015a08:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1015a11:	48 8d 15 48 57 0b 00 	lea	rdx, [rip + 743240]
 1015a18:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1015a1d:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1015a22:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1015a27:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1015a30:	e8 2b 1b 00 00 	call	6955 <_runtime.scanblock>
 1015a35:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1015a3a:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1015a3f:	e9 68 ff ff ff 	jmp	-152 <_runtime.markrootSpans+0xdc>
 1015a44:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1015a49:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015a4d:	e8 be 28 ff ff 	call	-55106 <_runtime.unlock>
 1015a52:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1015a57:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1015a5c:	8b 54 24 28 	mov	edx, dword ptr [rsp + 40]
 1015a60:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1015a65:	e9 d4 fe ff ff 	jmp	-300 <_runtime.markrootSpans+0x6e>
 1015a6a:	8b 7e 58 	mov	edi, dword ptr [rsi + 88]
 1015a6d:	39 d7 	cmp	edi, edx
 1015a6f:	0f 84 03 ff ff ff 	je	-253 <_runtime.markrootSpans+0xa8>
 1015a75:	44 8d 42 03 	lea	r8d, [rdx + 3]
 1015a79:	41 39 f8 	cmp	r8d, edi
 1015a7c:	0f 84 f6 fe ff ff 	je	-266 <_runtime.markrootSpans+0xa8>
 1015a82:	eb 19 	jmp	25 <_runtime.markrootSpans+0x1cd>
 1015a84:	bf 01 00 00 00 	mov	edi, 1
 1015a89:	e9 d8 fe ff ff 	jmp	-296 <_runtime.markrootSpans+0x96>
 1015a8e:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1015a93:	48 83 c4 68 	add	rsp, 104
 1015a97:	c3 	ret
 1015a98:	e8 a3 18 01 00 	call	71843 <_runtime.panicdivide>
 1015a9d:	89 7c 24 2c 	mov	dword ptr [rsp + 44], edi
 1015aa1:	e8 fa 49 01 00 	call	84474 <_runtime.printlock>
 1015aa6:	48 8d 05 d7 d3 05 00 	lea	rax, [rip + 381911]
 1015aad:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015ab1:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1015aba:	e8 21 53 01 00 	call	86817 <_runtime.printstring>
 1015abf:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 1015ac3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015ac7:	e8 54 50 01 00 	call	86100 <_runtime.printuint>
 1015acc:	e8 0f 4c 01 00 	call	85007 <_runtime.printsp>
 1015ad1:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1015ad5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015ad9:	e8 42 50 01 00 	call	86082 <_runtime.printuint>
 1015ade:	e8 4d 4c 01 00 	call	85069 <_runtime.printnl>
 1015ae3:	e8 38 4a 01 00 	call	84536 <_runtime.printunlock>
 1015ae8:	48 8d 05 33 e0 05 00 	lea	rax, [rip + 385075]
 1015aef:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015af3:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1015afc:	e8 5f 32 01 00 	call	78431 <_runtime.throw>
 1015b01:	90 	nop
 1015b02:	e8 c9 b0 03 00 	call	241865 <_runtime.morestack_noctxt>
 1015b07:	e9 c4 fd ff ff 	jmp	-572 <_runtime.markrootSpans>
 1015b0c:	cc 	int3
 1015b0d:	cc 	int3
 1015b0e:	cc 	int3
 1015b0f:	cc 	int3

_runtime.gcAssistAlloc:
 1015b10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1015b19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1015b1d:	0f 86 bc 02 00 00 	jbe	700 <_runtime.gcAssistAlloc+0x2cf>
 1015b23:	48 83 ec 58 	sub	rsp, 88
 1015b27:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 1015b2c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1015b31:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1015b36:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1015b3a:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1015b43:	48 39 11 	cmp	qword ptr [rcx], rdx
 1015b46:	0f 84 89 02 00 00 	je	649 <_runtime.gcAssistAlloc+0x2c5>
 1015b4c:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 1015b50:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 1015b57:	0f 8f 6e 02 00 00 	jg	622 <_runtime.gcAssistAlloc+0x2bb>
 1015b5d:	48 83 b9 00 01 00 00 00 	cmp	qword ptr [rcx + 256], 0
 1015b65:	0f 85 60 02 00 00 	jne	608 <_runtime.gcAssistAlloc+0x2bb>
 1015b6b:	31 c9 	xor	ecx, ecx
 1015b6d:	eb 0f 	jmp	15 <_runtime.gcAssistAlloc+0x6e>
 1015b6f:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1015b74:	0f b6 5c 24 2f 	movzx	ebx, byte ptr [rsp + 47]
 1015b79:	48 89 d0 	mov	rax, rdx
 1015b7c:	89 d9 	mov	ecx, ebx
 1015b7e:	48 8b 90 70 01 00 00 	mov	rdx, qword ptr [rax + 368]
 1015b85:	48 f7 da 	neg	rdx
 1015b88:	0f 57 c0 	xorps	xmm0, xmm0
 1015b8b:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 1015b90:	f2 0f 59 05 28 22 0e 00 	mulsd	xmm0, qword ptr [rip + 926248]
 1015b98:	f2 48 0f 2c d8 	cvttsd2si	rbx, xmm0
 1015b9d:	48 81 fb 00 00 01 00 	cmp	rbx, 65536
 1015ba4:	0f 8d 14 02 00 00 	jge	532 <_runtime.gcAssistAlloc+0x2ae>
 1015baa:	f2 0f 10 05 16 22 0e 00 	movsd	xmm0, qword ptr [rip + 926230]
 1015bb2:	f2 0f 10 0d ae db 06 00 	movsd	xmm1, qword ptr [rip + 449454]
 1015bba:	f2 0f 59 c1 	mulsd	xmm0, xmm1
 1015bbe:	f2 48 0f 2c d0 	cvttsd2si	rdx, xmm0
 1015bc3:	bb 00 00 01 00 	mov	ebx, 65536
 1015bc8:	48 8b 35 b9 21 0e 00 	mov	rsi, qword ptr [rip + 926137]
 1015bcf:	48 85 f6 	test	rsi, rsi
 1015bd2:	7e 4d 	jle	77 <_runtime.gcAssistAlloc+0x111>
 1015bd4:	48 39 de 	cmp	rsi, rbx
 1015bd7:	0f 8d d2 01 00 00 	jge	466 <_runtime.gcAssistAlloc+0x29f>
 1015bdd:	0f 57 c0 	xorps	xmm0, xmm0
 1015be0:	f2 48 0f 2a c6 	cvtsi2sd	xmm0, rsi
 1015be5:	f2 0f 59 05 db 21 0e 00 	mulsd	xmm0, qword ptr [rip + 926171]
 1015bed:	f2 48 0f 2c d0 	cvttsd2si	rdx, xmm0
 1015bf2:	48 03 90 70 01 00 00 	add	rdx, qword ptr [rax + 368]
 1015bf9:	48 ff c2 	inc	rdx
 1015bfc:	48 89 90 70 01 00 00 	mov	qword ptr [rax + 368], rdx
 1015c03:	48 89 f2 	mov	rdx, rsi
 1015c06:	48 f7 de 	neg	rsi
 1015c09:	48 8d 3d 78 21 0e 00 	lea	rdi, [rip + 926072]
 1015c10:	f0 	lock
 1015c11:	48 0f c1 37 	xadd	qword ptr [rdi], rsi
 1015c15:	48 29 d3 	sub	rbx, rdx
 1015c18:	48 85 db 	test	rbx, rbx
 1015c1b:	0f 84 5a 01 00 00 	je	346 <_runtime.gcAssistAlloc+0x26b>
 1015c21:	80 3d 08 f3 0b 00 00 	cmp	byte ptr [rip + 783112], 0
 1015c28:	74 08 	je	8 <_runtime.gcAssistAlloc+0x122>
 1015c2a:	84 c9 	test	cl, cl
 1015c2c:	0f 84 0d 01 00 00 	je	269 <_runtime.gcAssistAlloc+0x22f>
 1015c32:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 1015c36:	0f 57 c0 	xorps	xmm0, xmm0
 1015c39:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1015c3e:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1015c47:	48 8d 15 c2 89 03 00 	lea	rdx, [rip + 231874]
 1015c4e:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1015c53:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1015c58:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 1015c5d:	48 8d 5c 24 38 	lea	rbx, [rsp + 56]
 1015c62:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1015c66:	e8 15 ae 03 00 	call	241173 <_runtime.systemstack>
 1015c6b:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1015c70:	48 8b 88 88 00 00 00 	mov	rcx, qword ptr [rax + 136]
 1015c77:	48 83 f9 00 	cmp	rcx, 0
 1015c7b:	83 3d 7e 1c 0e 00 00 	cmp	dword ptr [rip + 924798], 0
 1015c82:	0f 85 9a 00 00 00 	jne	154 <_runtime.gcAssistAlloc+0x212>
 1015c88:	48 c7 80 88 00 00 00 00 00 00 00 	mov	qword ptr [rax + 136], 0
 1015c93:	48 83 f9 00 	cmp	rcx, 0
 1015c97:	75 7a 	jne	122 <_runtime.gcAssistAlloc+0x203>
 1015c99:	48 83 b8 70 01 00 00 00 	cmp	qword ptr [rax + 368], 0
 1015ca1:	7d 38 	jge	56 <_runtime.gcAssistAlloc+0x1cb>
 1015ca3:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1015caa:	74 20 	je	32 <_runtime.gcAssistAlloc+0x1bc>
 1015cac:	90 	nop
 1015cad:	48 8d 05 b4 1b 06 00 	lea	rax, [rip + 400308]
 1015cb4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015cb8:	e8 43 ad 03 00 	call	240963 <_runtime.mcall>
 1015cbd:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1015cc2:	0f b6 4c 24 2f 	movzx	ecx, byte ptr [rsp + 47]
 1015cc7:	e9 b2 fe ff ff 	jmp	-334 <_runtime.gcAssistAlloc+0x6e>
 1015ccc:	e8 df 04 00 00 	call	1247 <_runtime.gcParkAssist>
 1015cd1:	80 3c 24 00 	cmp	byte ptr [rsp], 0
 1015cd5:	0f 84 94 fe ff ff 	je	-364 <_runtime.gcAssistAlloc+0x5f>
 1015cdb:	0f b6 44 24 2f 	movzx	eax, byte ptr [rsp + 47]
 1015ce0:	84 c0 	test	al, al
 1015ce2:	75 0a 	jne	10 <_runtime.gcAssistAlloc+0x1de>
 1015ce4:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1015ce9:	48 83 c4 58 	add	rsp, 88
 1015ced:	c3 	ret
 1015cee:	c6 04 24 2c 	mov	byte ptr [rsp], 44
 1015cf2:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1015cfb:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1015d04:	0f 57 c0 	xorps	xmm0, xmm0
 1015d07:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1015d0c:	e8 df fd 02 00 	call	196063 <_runtime.traceEvent>
 1015d11:	eb d1 	jmp	-47 <_runtime.gcAssistAlloc+0x1d4>
 1015d13:	e8 68 d3 ff ff 	call	-11416 <_runtime.gcMarkDone>
 1015d18:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1015d1d:	e9 77 ff ff ff 	jmp	-137 <_runtime.gcAssistAlloc+0x189>
 1015d22:	48 8d b8 88 00 00 00 	lea	rdi, [rax + 136]
 1015d29:	48 89 c2 	mov	rdx, rax
 1015d2c:	31 c0 	xor	eax, eax
 1015d2e:	e8 ad cc 03 00 	call	249005 <_runtime.gcWriteBarrier>
 1015d33:	48 83 f9 00 	cmp	rcx, 0
 1015d37:	48 89 d0 	mov	rax, rdx
 1015d3a:	e9 58 ff ff ff 	jmp	-168 <_runtime.gcAssistAlloc+0x187>
 1015d3f:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1015d44:	c6 04 24 2b 	mov	byte ptr [rsp], 43
 1015d48:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1015d51:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1015d5a:	0f 57 c0 	xorps	xmm0, xmm0
 1015d5d:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1015d62:	e8 89 fd 02 00 	call	195977 <_runtime.traceEvent>
 1015d67:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1015d6c:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1015d71:	b9 01 00 00 00 	mov	ecx, 1
 1015d76:	e9 b7 fe ff ff 	jmp	-329 <_runtime.gcAssistAlloc+0x122>
 1015d7b:	84 c9 	test	cl, cl
 1015d7d:	75 0a 	jne	10 <_runtime.gcAssistAlloc+0x279>
 1015d7f:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1015d84:	48 83 c4 58 	add	rsp, 88
 1015d88:	c3 	ret
 1015d89:	90 	nop
 1015d8a:	c6 04 24 2c 	mov	byte ptr [rsp], 44
 1015d8e:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1015d97:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1015da0:	0f 57 c0 	xorps	xmm0, xmm0
 1015da3:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1015da8:	e8 43 fd 02 00 	call	195907 <_runtime.traceEvent>
 1015dad:	eb d0 	jmp	-48 <_runtime.gcAssistAlloc+0x26f>
 1015daf:	48 01 90 70 01 00 00 	add	qword ptr [rax + 368], rdx
 1015db6:	48 89 de 	mov	rsi, rbx
 1015db9:	e9 45 fe ff ff 	jmp	-443 <_runtime.gcAssistAlloc+0xf3>
 1015dbe:	f2 0f 10 0d a2 d9 06 00 	movsd	xmm1, qword ptr [rip + 448930]
 1015dc6:	e9 fd fd ff ff 	jmp	-515 <_runtime.gcAssistAlloc+0xb8>
 1015dcb:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1015dd0:	48 83 c4 58 	add	rsp, 88
 1015dd4:	c3 	ret
 1015dd5:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1015dda:	48 83 c4 58 	add	rsp, 88
 1015dde:	c3 	ret
 1015ddf:	e8 ec ad 03 00 	call	241132 <_runtime.morestack_noctxt>
 1015de4:	e9 27 fd ff ff 	jmp	-729 <_runtime.gcAssistAlloc>
 1015de9:	cc 	int3
 1015dea:	cc 	int3
 1015deb:	cc 	int3
 1015dec:	cc 	int3
 1015ded:	cc 	int3
 1015dee:	cc 	int3
 1015def:	cc 	int3

_runtime.gcAssistAlloc1:
 1015df0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1015df9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 1015dfd:	0f 86 22 03 00 00 	jbe	802 <_runtime.gcAssistAlloc1+0x335>
 1015e03:	48 83 ec 48 	sub	rsp, 72
 1015e07:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1015e0c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1015e11:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1015e16:	84 01 	test	byte ptr [rcx], al
 1015e18:	48 8d b9 88 00 00 00 	lea	rdi, [rcx + 136]
 1015e1f:	83 3d da 1a 0e 00 00 	cmp	dword ptr [rip + 924378], 0
 1015e26:	0f 85 f4 01 00 00 	jne	500 <_runtime.gcAssistAlloc1+0x230>
 1015e2c:	48 c7 81 88 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 136], 0
 1015e37:	8b 05 53 19 0e 00 	mov	eax, dword ptr [rip + 923987]
 1015e3d:	85 c0 	test	eax, eax
 1015e3f:	75 15 	jne	21 <_runtime.gcAssistAlloc1+0x66>
 1015e41:	48 c7 81 70 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 368], 0
 1015e4c:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1015e51:	48 83 c4 48 	add	rsp, 72
 1015e55:	c3 	ret
 1015e56:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1015e5b:	90 	nop
 1015e5c:	e8 5f d4 02 00 	call	185439 <_runtime.nanotime1>
 1015e61:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1015e65:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1015e6a:	48 8d 15 6f 8b 0b 00 	lea	rdx, [rip + 756591]
 1015e71:	f0 	lock
 1015e72:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 1015e75:	ff c9 	dec	ecx
 1015e77:	8b 1d 53 8b 0b 00 	mov	ebx, dword ptr [rip + 756563]
 1015e7d:	39 d9 	cmp	ecx, ebx
 1015e7f:	0f 84 23 02 00 00 	je	547 <_runtime.gcAssistAlloc1+0x2b8>
 1015e85:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1015e8a:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1015e8f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1015e93:	48 b9 02 00 00 00 04 00 00 00 	movabs	rcx, 17179869186
 1015e9d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1015ea2:	e8 69 74 01 00 	call	95337 <_runtime.casgstatus>
 1015ea7:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1015eac:	c6 80 b0 00 00 00 01 	mov	byte ptr [rax + 176], 1
 1015eb3:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1015ebc:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1015ec0:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1015ec7:	84 01 	test	byte ptr [rcx], al
 1015ec9:	48 81 c1 98 16 00 00 	add	rcx, 5784
 1015ed0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1015ed4:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1015ed9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1015ede:	e8 4d 14 00 00 	call	5197 <_runtime.gcDrainN>
 1015ee3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1015ee8:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1015eed:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1015ef2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1015ef6:	48 ba 04 00 00 00 02 00 00 00 	movabs	rdx, 8589934596
 1015f00:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1015f05:	e8 06 74 01 00 	call	95238 <_runtime.casgstatus>
 1015f0a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1015f0f:	0f 57 c0 	xorps	xmm0, xmm0
 1015f12:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1015f17:	f2 0f 59 05 a9 1e 0e 00 	mulsd	xmm0, qword ptr [rip + 925353]
 1015f1f:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 1015f24:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1015f29:	48 03 81 70 01 00 00 	add	rax, qword ptr [rcx + 368]
 1015f30:	48 ff c0 	inc	rax
 1015f33:	48 89 81 70 01 00 00 	mov	qword ptr [rcx + 368], rax
 1015f3a:	b8 01 00 00 00 	mov	eax, 1
 1015f3f:	48 8d 15 9a 8a 0b 00 	lea	rdx, [rip + 756378]
 1015f46:	f0 	lock
 1015f47:	0f c1 02 	xadd	dword ptr [rdx], eax
 1015f4a:	ff c0 	inc	eax
 1015f4c:	8b 15 7e 8a 0b 00 	mov	edx, dword ptr [rip + 756350]
 1015f52:	39 d0 	cmp	eax, edx
 1015f54:	0f 87 d2 00 00 00 	ja	210 <_runtime.gcAssistAlloc1+0x23c>
 1015f5a:	0f 85 b9 00 00 00 	jne	185 <_runtime.gcAssistAlloc1+0x229>
 1015f60:	48 8b 15 d9 89 0b 00 	mov	rdx, qword ptr [rip + 756185]
 1015f67:	48 85 d2 	test	rdx, rdx
 1015f6a:	0f 85 9f 00 00 00 	jne	159 <_runtime.gcAssistAlloc1+0x21f>
 1015f70:	8b 15 56 8a 0b 00 	mov	edx, dword ptr [rip + 756310]
 1015f76:	39 15 4c 8a 0b 00 	cmp	dword ptr [rip + 756300], edx
 1015f7c:	0f 83 86 00 00 00 	jae	134 <_runtime.gcAssistAlloc1+0x218>
 1015f82:	b8 01 00 00 00 	mov	eax, 1
 1015f87:	83 f0 01 	xor	eax, 1
 1015f8a:	84 c0 	test	al, al
 1015f8c:	74 10 	je	16 <_runtime.gcAssistAlloc1+0x1ae>
 1015f8e:	83 3d 6b 19 0e 00 00 	cmp	dword ptr [rip + 924011], 0
 1015f95:	75 62 	jne	98 <_runtime.gcAssistAlloc1+0x209>
 1015f97:	48 89 89 88 00 00 00 	mov	qword ptr [rcx + 136], rcx
 1015f9e:	e8 1d d3 02 00 	call	185117 <_runtime.nanotime1>
 1015fa3:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1015fa8:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1015fac:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1015fb3:	84 00 	test	byte ptr [rax], al
 1015fb5:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 1015fb9:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1015fbe:	48 29 d1 	sub	rcx, rdx
 1015fc1:	48 03 88 70 16 00 00 	add	rcx, qword ptr [rax + 5744]
 1015fc8:	48 89 88 70 16 00 00 	mov	qword ptr [rax + 5744], rcx
 1015fcf:	48 81 f9 88 13 00 00 	cmp	rcx, 5000
 1015fd6:	7e 17 	jle	23 <_runtime.gcAssistAlloc1+0x1ff>
 1015fd8:	48 8d 15 b1 1d 0e 00 	lea	rdx, [rip + 925105]
 1015fdf:	f0 	lock
 1015fe0:	48 0f c1 0a 	xadd	qword ptr [rdx], rcx
 1015fe4:	48 c7 80 70 16 00 00 00 00 00 00 	mov	qword ptr [rax + 5744], 0
 1015fef:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1015ff4:	48 83 c4 48 	add	rsp, 72
 1015ff8:	c3 	ret
 1015ff9:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1015ffe:	48 89 c8 	mov	rax, rcx
 1016001:	e8 da c9 03 00 	call	248282 <_runtime.gcWriteBarrier>
 1016006:	eb 96 	jmp	-106 <_runtime.gcAssistAlloc1+0x1ae>
 1016008:	31 c0 	xor	eax, eax
 101600a:	e9 78 ff ff ff 	jmp	-136 <_runtime.gcAssistAlloc1+0x197>
 101600f:	b8 01 00 00 00 	mov	eax, 1
 1016014:	e9 6e ff ff ff 	jmp	-146 <_runtime.gcAssistAlloc1+0x197>
 1016019:	31 c0 	xor	eax, eax
 101601b:	e9 6a ff ff ff 	jmp	-150 <_runtime.gcAssistAlloc1+0x19a>
 1016020:	31 c0 	xor	eax, eax
 1016022:	e8 b9 c9 03 00 	call	248249 <_runtime.gcWriteBarrier>
 1016027:	e9 0b fe ff ff 	jmp	-501 <_runtime.gcAssistAlloc1+0x47>
 101602c:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 1016030:	89 54 24 24 	mov	dword ptr [rsp + 36], edx
 1016034:	e8 67 44 01 00 	call	83047 <_runtime.printlock>
 1016039:	48 8d 05 5a e4 05 00 	lea	rax, [rip + 386138]
 1016040:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016044:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 101604d:	e8 8e 4d 01 00 	call	85390 <_runtime.printstring>
 1016052:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1016056:	48 89 04 24 	mov	qword ptr [rsp], rax
 101605a:	e8 c1 4a 01 00 	call	84673 <_runtime.printuint>
 101605f:	48 8d 05 5d d6 05 00 	lea	rax, [rip + 382557]
 1016066:	48 89 04 24 	mov	qword ptr [rsp], rax
 101606a:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1016073:	e8 68 4d 01 00 	call	85352 <_runtime.printstring>
 1016078:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 101607c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016080:	e8 9b 4a 01 00 	call	84635 <_runtime.printuint>
 1016085:	e8 a6 46 01 00 	call	83622 <_runtime.printnl>
 101608a:	e8 91 44 01 00 	call	83089 <_runtime.printunlock>
 101608f:	48 8d 05 88 e9 05 00 	lea	rax, [rip + 387464]
 1016096:	48 89 04 24 	mov	qword ptr [rsp], rax
 101609a:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 10160a3:	e8 b8 2c 01 00 	call	76984 <_runtime.throw>
 10160a8:	89 4c 24 20 	mov	dword ptr [rsp + 32], ecx
 10160ac:	89 5c 24 24 	mov	dword ptr [rsp + 36], ebx
 10160b0:	e8 eb 43 01 00 	call	82923 <_runtime.printlock>
 10160b5:	48 8d 05 be e5 05 00 	lea	rax, [rip + 386494]
 10160bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10160c0:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 10160c9:	e8 12 4d 01 00 	call	85266 <_runtime.printstring>
 10160ce:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 10160d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10160d6:	e8 45 4a 01 00 	call	84549 <_runtime.printuint>
 10160db:	48 8d 05 e1 d5 05 00 	lea	rax, [rip + 382433]
 10160e2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10160e6:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10160ef:	e8 ec 4c 01 00 	call	85228 <_runtime.printstring>
 10160f4:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 10160f8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10160fc:	e8 1f 4a 01 00 	call	84511 <_runtime.printuint>
 1016101:	e8 2a 46 01 00 	call	83498 <_runtime.printnl>
 1016106:	e8 15 44 01 00 	call	82965 <_runtime.printunlock>
 101610b:	48 8d 05 12 df 05 00 	lea	rax, [rip + 384786]
 1016112:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016116:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 101611f:	e8 3c 2c 01 00 	call	76860 <_runtime.throw>
 1016124:	90 	nop
 1016125:	e8 d6 a5 02 00 	call	173526 <_runtime.morestackc>
 101612a:	e9 c1 fc ff ff 	jmp	-831 <_runtime.gcAssistAlloc1>
 101612f:	cc 	int3

_runtime.gcWakeAllAssists:
 1016130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1016139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101613d:	76 5c 	jbe	92 <_runtime.gcWakeAllAssists+0x6b>
 101613f:	48 83 ec 18 	sub	rsp, 24
 1016143:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1016148:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101614d:	48 8d 05 f4 88 0b 00 	lea	rax, [rip + 755956]
 1016154:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016158:	e8 d3 1f ff ff 	call	-57389 <_runtime.lock>
 101615d:	48 8b 05 ec 88 0b 00 	mov	rax, qword ptr [rip + 755948]
 1016164:	0f 57 c0 	xorps	xmm0, xmm0
 1016167:	0f 11 05 e2 88 0b 00 	movups	xmmword ptr [rip + 755938], xmm0
 101616e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1016173:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1016178:	48 89 04 24 	mov	qword ptr [rsp], rax
 101617c:	e8 2f ab 01 00 	call	109359 <_runtime.injectglist>
 1016181:	48 8d 05 c0 88 0b 00 	lea	rax, [rip + 755904]
 1016188:	48 89 04 24 	mov	qword ptr [rsp], rax
 101618c:	e8 7f 21 ff ff 	call	-56961 <_runtime.unlock>
 1016191:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1016196:	48 83 c4 18 	add	rsp, 24
 101619a:	c3 	ret
 101619b:	e8 30 aa 03 00 	call	240176 <_runtime.morestack_noctxt>
 10161a0:	eb 8e 	jmp	-114 <_runtime.gcWakeAllAssists>
 10161a2:	cc 	int3
 10161a3:	cc 	int3
 10161a4:	cc 	int3
 10161a5:	cc 	int3
 10161a6:	cc 	int3
 10161a7:	cc 	int3
 10161a8:	cc 	int3
 10161a9:	cc 	int3
 10161aa:	cc 	int3
 10161ab:	cc 	int3
 10161ac:	cc 	int3
 10161ad:	cc 	int3
 10161ae:	cc 	int3
 10161af:	cc 	int3

_runtime.gcParkAssist:
 10161b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10161b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10161bd:	0f 86 22 01 00 00 	jbe	290 <_runtime.gcParkAssist+0x135>
 10161c3:	48 83 ec 28 	sub	rsp, 40
 10161c7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10161cc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10161d1:	48 8d 05 70 88 0b 00 	lea	rax, [rip + 755824]
 10161d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10161dc:	e8 4f 1f ff ff 	call	-57521 <_runtime.lock>
 10161e1:	8b 05 a9 15 0e 00 	mov	eax, dword ptr [rip + 923049]
 10161e7:	85 c0 	test	eax, eax
 10161e9:	0f 84 d7 00 00 00 	je	215 <_runtime.gcParkAssist+0x116>
 10161ef:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10161f8:	48 8b 0d 59 88 0b 00 	mov	rcx, qword ptr [rip + 755801]
 10161ff:	48 8b 15 4a 88 0b 00 	mov	rdx, qword ptr [rip + 755786]
 1016206:	90 	nop
 1016207:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 1016212:	48 8b 1d 3f 88 0b 00 	mov	rbx, qword ptr [rip + 755775]
 1016219:	48 85 db 	test	rbx, rbx
 101621c:	0f 84 95 00 00 00 	je	149 <_runtime.gcParkAssist+0x107>
 1016222:	48 89 c6 	mov	rsi, rax
 1016225:	48 89 83 a0 00 00 00 	mov	qword ptr [rbx + 160], rax
 101622c:	90 	nop
 101622d:	48 89 35 24 88 0b 00 	mov	qword ptr [rip + 755748], rsi
 1016234:	48 8b 05 4d 1b 0e 00 	mov	rax, qword ptr [rip + 924493]
 101623b:	48 85 c0 	test	rax, rax
 101623e:	7e 3b 	jle	59 <_runtime.gcParkAssist+0xcb>
 1016240:	48 89 15 09 88 0b 00 	mov	qword ptr [rip + 755721], rdx
 1016247:	48 89 0d 0a 88 0b 00 	mov	qword ptr [rip + 755722], rcx
 101624e:	48 85 c9 	test	rcx, rcx
 1016251:	74 09 	je	9 <_runtime.gcParkAssist+0xac>
 1016253:	31 c0 	xor	eax, eax
 1016255:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 101625c:	48 8d 05 e5 87 0b 00 	lea	rax, [rip + 755685]
 1016263:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016267:	e8 a4 20 ff ff 	call	-57180 <_runtime.unlock>
 101626c:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 1016271:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1016276:	48 83 c4 28 	add	rsp, 40
 101627a:	c3 	ret
 101627b:	90 	nop
 101627c:	48 8d 05 d5 16 06 00 	lea	rax, [rip + 399061]
 1016283:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016287:	48 8d 05 ba 87 0b 00 	lea	rax, [rip + 755642]
 101628e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1016293:	66 c7 44 24 10 0b 2a 	mov	word ptr [rsp + 16], 10763
 101629a:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 10162a3:	e8 98 54 01 00 	call	87192 <_runtime.gopark>
 10162a8:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 10162ad:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10162b2:	48 83 c4 28 	add	rsp, 40
 10162b6:	c3 	ret
 10162b7:	48 89 c6 	mov	rsi, rax
 10162ba:	48 89 05 8f 87 0b 00 	mov	qword ptr [rip + 755599], rax
 10162c1:	e9 66 ff ff ff 	jmp	-154 <_runtime.gcParkAssist+0x7c>
 10162c6:	48 8d 05 7b 87 0b 00 	lea	rax, [rip + 755579]
 10162cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10162d1:	e8 3a 20 ff ff 	call	-57286 <_runtime.unlock>
 10162d6:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 10162db:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10162e0:	48 83 c4 28 	add	rsp, 40
 10162e4:	c3 	ret
 10162e5:	e8 e6 a8 03 00 	call	239846 <_runtime.morestack_noctxt>
 10162ea:	e9 c1 fe ff ff 	jmp	-319 <_runtime.gcParkAssist>
 10162ef:	cc 	int3

_runtime.gcFlushBgCredit:
 10162f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10162f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10162fd:	0f 86 5f 01 00 00 	jbe	351 <_runtime.gcFlushBgCredit+0x172>
 1016303:	48 83 ec 30 	sub	rsp, 48
 1016307:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101630c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1016311:	48 83 3d 37 87 0b 00 00 	cmp	qword ptr [rip + 755511], 0
 1016319:	0f 84 28 01 00 00 	je	296 <_runtime.gcFlushBgCredit+0x157>
 101631f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1016324:	0f 57 c0 	xorps	xmm0, xmm0
 1016327:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 101632c:	f2 0f 59 05 94 1a 0e 00 	mulsd	xmm0, qword ptr [rip + 924308]
 1016334:	f2 0f 11 44 24 20 	movsd	qword ptr [rsp + 32], xmm0
 101633a:	48 8d 05 07 87 0b 00 	lea	rax, [rip + 755463]
 1016341:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016345:	e8 e6 1d ff ff 	call	-57882 <_runtime.lock>
 101634a:	f2 0f 10 44 24 20 	movsd	xmm0, qword ptr [rsp + 32]
 1016350:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 1016355:	eb 2c 	jmp	44 <_runtime.gcFlushBgCredit+0x93>
 1016357:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101635c:	48 c7 81 70 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 368], 0
 1016367:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101636b:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1016374:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1016379:	e8 e2 66 01 00 	call	91874 <_runtime.ready>
 101637e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1016383:	48 8b 0d c6 86 0b 00 	mov	rcx, qword ptr [rip + 755398]
 101638a:	48 85 c9 	test	rcx, rcx
 101638d:	74 6c 	je	108 <_runtime.gcFlushBgCredit+0x10b>
 101638f:	48 85 c0 	test	rax, rax
 1016392:	7e 67 	jle	103 <_runtime.gcFlushBgCredit+0x10b>
 1016394:	90 	nop
 1016395:	90 	nop
 1016396:	48 85 c9 	test	rcx, rcx
 1016399:	74 1e 	je	30 <_runtime.gcFlushBgCredit+0xc9>
 101639b:	48 8b 91 a0 00 00 00 	mov	rdx, qword ptr [rcx + 160]
 10163a2:	48 89 15 a7 86 0b 00 	mov	qword ptr [rip + 755367], rdx
 10163a9:	48 85 d2 	test	rdx, rdx
 10163ac:	75 0b 	jne	11 <_runtime.gcFlushBgCredit+0xc9>
 10163ae:	48 c7 05 9f 86 0b 00 00 00 00 00 	mov	qword ptr [rip + 755359], 0
 10163b9:	48 8b 91 70 01 00 00 	mov	rdx, qword ptr [rcx + 368]
 10163c0:	48 01 d0 	add	rax, rdx
 10163c3:	48 85 c0 	test	rax, rax
 10163c6:	7d 8f 	jge	-113 <_runtime.gcFlushBgCredit+0x67>
 10163c8:	48 89 81 70 01 00 00 	mov	qword ptr [rcx + 368], rax
 10163cf:	90 	nop
 10163d0:	48 c7 81 a0 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 160], 0
 10163db:	48 8b 05 76 86 0b 00 	mov	rax, qword ptr [rip + 755318]
 10163e2:	48 85 c0 	test	rax, rax
 10163e5:	74 54 	je	84 <_runtime.gcFlushBgCredit+0x14b>
 10163e7:	48 89 ca 	mov	rdx, rcx
 10163ea:	48 89 88 a0 00 00 00 	mov	qword ptr [rax + 160], rcx
 10163f1:	90 	nop
 10163f2:	48 89 15 5f 86 0b 00 	mov	qword ptr [rip + 755295], rdx
 10163f9:	31 c0 	xor	eax, eax
 10163fb:	48 85 c0 	test	rax, rax
 10163fe:	7e 21 	jle	33 <_runtime.gcFlushBgCredit+0x131>
 1016400:	0f 57 c0 	xorps	xmm0, xmm0
 1016403:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1016408:	f2 0f 59 05 b0 19 0e 00 	mulsd	xmm0, qword ptr [rip + 924080]
 1016410:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 1016415:	48 8d 0d 6c 19 0e 00 	lea	rcx, [rip + 924012]
 101641c:	f0 	lock
 101641d:	48 0f c1 01 	xadd	qword ptr [rcx], rax
 1016421:	48 8d 05 20 86 0b 00 	lea	rax, [rip + 755232]
 1016428:	48 89 04 24 	mov	qword ptr [rsp], rax
 101642c:	e8 df 1e ff ff 	call	-57633 <_runtime.unlock>
 1016431:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1016436:	48 83 c4 30 	add	rsp, 48
 101643a:	c3 	ret
 101643b:	48 89 ca 	mov	rdx, rcx
 101643e:	48 89 0d 0b 86 0b 00 	mov	qword ptr [rip + 755211], rcx
 1016445:	eb aa 	jmp	-86 <_runtime.gcFlushBgCredit+0x101>
 1016447:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101644c:	48 8d 0d 35 19 0e 00 	lea	rcx, [rip + 923957]
 1016453:	f0 	lock
 1016454:	48 0f c1 01 	xadd	qword ptr [rcx], rax
 1016458:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101645d:	48 83 c4 30 	add	rsp, 48
 1016461:	c3 	ret
 1016462:	e8 69 a7 03 00 	call	239465 <_runtime.morestack_noctxt>
 1016467:	e9 84 fe ff ff 	jmp	-380 <_runtime.gcFlushBgCredit>
 101646c:	cc 	int3
 101646d:	cc 	int3
 101646e:	cc 	int3
 101646f:	cc 	int3

_runtime.scanstack:
 1016470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1016479:	48 8d 84 24 80 fe ff ff 	lea	rax, [rsp - 384]
 1016481:	48 3b 41 18 	cmp	rax, qword ptr [rcx + 24]
 1016485:	0f 86 b2 07 00 00 	jbe	1970 <_runtime.scanstack+0x7cd>
 101648b:	48 81 ec 00 02 00 00 	sub	rsp, 512
 1016492:	48 89 ac 24 f8 01 00 00 	mov	qword ptr [rsp + 504], rbp
 101649a:	48 8d ac 24 f8 01 00 00 	lea	rbp, [rsp + 504]
 10164a2:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 10164aa:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 10164b0:	0f ba e1 0c 	bt	ecx, 12
 10164b4:	0f 83 cb 06 00 00 	jae	1739 <_runtime.scanstack+0x715>
 10164ba:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 10164c0:	0f ba f1 0c 	btr	ecx, 12
 10164c4:	83 f9 02 	cmp	ecx, 2
 10164c7:	0f 87 f3 04 00 00 	ja	1267 <_runtime.scanstack+0x550>
 10164cd:	83 f9 01 	cmp	ecx, 1
 10164d0:	0f 85 df 04 00 00 	jne	1247 <_runtime.scanstack+0x545>
 10164d6:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10164df:	48 39 c8 	cmp	rax, rcx
 10164e2:	0f 84 16 05 00 00 	je	1302 <_runtime.scanstack+0x58e>
 10164e8:	48 83 78 70 00 	cmp	qword ptr [rax + 112], 0
 10164ed:	75 0d 	jne	13 <_runtime.scanstack+0x8c>
 10164ef:	80 b8 b4 00 00 00 00 	cmp	byte ptr [rax + 180], 0
 10164f6:	0f 84 a3 04 00 00 	je	1187 <_runtime.scanstack+0x52f>
 10164fc:	c6 80 b3 00 00 00 01 	mov	byte ptr [rax + 179], 1
 1016503:	48 8d bc 24 a8 00 00 00 	lea	rdi, [rsp + 168]
 101650b:	0f 57 c0 	xorps	xmm0, xmm0
 101650e:	48 8d 7f d0 	lea	rdi, [rdi - 48]
 1016512:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1016517:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 101651c:	e8 98 cf 03 00 	call	249752 <_runtime.duffzero+0xc9>
 1016521:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1016525:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1016529:	48 8b 10 	mov	rdx, qword ptr [rax]
 101652c:	48 89 94 24 a8 01 00 00 	mov	qword ptr [rsp + 424], rdx
 1016534:	48 89 8c 24 b0 01 00 00 	mov	qword ptr [rsp + 432], rcx
 101653c:	48 83 78 50 00 	cmp	qword ptr [rax + 80], 0
 1016541:	0f 85 0c 04 00 00 	jne	1036 <_runtime.scanstack+0x4e3>
 1016547:	0f 11 84 24 90 00 00 00 	movups	xmmword ptr [rsp + 144], xmm0
 101654f:	48 c7 84 24 a0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 160], 0
 101655b:	48 8d 0d fe 80 03 00 	lea	rcx, [rip + 229630]
 1016562:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 101656a:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 1016572:	48 89 8c 24 98 00 00 00 	mov	qword ptr [rsp + 152], rcx
 101657a:	48 8b 94 24 10 02 00 00 	mov	rdx, qword ptr [rsp + 528]
 1016582:	48 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdx
 101658a:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 1016592:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 101659b:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10165a4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10165a9:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 10165ae:	48 c7 44 24 30 ff ff ff 7f 	mov	qword ptr [rsp + 48], 2147483647
 10165b7:	48 8d 9c 24 90 00 00 00 	lea	rbx, [rsp + 144]
 10165bf:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 10165c4:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 10165c9:	e8 d2 0e 03 00 	call	200402 <_runtime.gentraceback>
 10165ce:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 10165d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10165da:	48 8d 8c 24 90 00 00 00 	lea	rcx, [rsp + 144]
 10165e2:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10165e7:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10165f0:	e8 7b 0c 03 00 	call	199803 <_runtime.tracebackdefers>
 10165f5:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 10165fd:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 1016601:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 1016609:	eb 14 	jmp	20 <_runtime.scanstack+0x1af>
 101660b:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1016613:	48 8b 49 28 	mov	rcx, qword ptr [rcx + 40]
 1016617:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 101661f:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1016627:	48 85 c9 	test	rcx, rcx
 101662a:	0f 84 07 01 00 00 	je	263 <_runtime.scanstack+0x2c7>
 1016630:	48 83 79 18 00 	cmp	qword ptr [rcx + 24], 0
 1016635:	0f 85 b3 00 00 00 	jne	179 <_runtime.scanstack+0x27e>
 101663b:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1016643:	48 83 79 28 00 	cmp	qword ptr [rcx + 40], 0
 1016648:	75 5b 	jne	91 <_runtime.scanstack+0x235>
 101664a:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1016652:	80 79 05 00 	cmp	byte ptr [rcx + 5], 0
 1016656:	74 b3 	je	-77 <_runtime.scanstack+0x19b>
 1016658:	48 8d 84 24 88 00 00 00 	lea	rax, [rsp + 136]
 1016660:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016664:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 101666d:	48 8d 05 ec 4a 0b 00 	lea	rax, [rip + 740076]
 1016674:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1016679:	48 8b 84 24 10 02 00 00 	mov	rax, qword ptr [rsp + 528]
 1016681:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1016686:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 101668e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1016693:	e8 c8 0e 00 00 	call	3784 <_runtime.scanblock>
 1016698:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 10166a0:	e9 66 ff ff ff 	jmp	-154 <_runtime.scanstack+0x19b>
 10166a5:	48 8d 41 28 	lea	rax, [rcx + 40]
 10166a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10166ad:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 10166b6:	48 8d 05 a3 4a 0b 00 	lea	rax, [rip + 740003]
 10166bd:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10166c2:	48 8b 84 24 10 02 00 00 	mov	rax, qword ptr [rsp + 528]
 10166ca:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10166cf:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 10166d7:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10166dc:	e8 7f 0e 00 00 	call	3711 <_runtime.scanblock>
 10166e1:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 10166e9:	e9 5c ff ff ff 	jmp	-164 <_runtime.scanstack+0x1da>
 10166ee:	48 8d 41 18 	lea	rax, [rcx + 24]
 10166f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10166f6:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 10166ff:	48 8d 05 5a 4a 0b 00 	lea	rax, [rip + 739930]
 1016706:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101670b:	48 8b 84 24 10 02 00 00 	mov	rax, qword ptr [rsp + 528]
 1016713:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1016718:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 1016720:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1016725:	e8 36 0e 00 00 	call	3638 <_runtime.scanblock>
 101672a:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 1016732:	e9 04 ff ff ff 	jmp	-252 <_runtime.scanstack+0x1cb>
 1016737:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 101673b:	48 85 c0 	test	rax, rax
 101673e:	0f 85 ef 01 00 00 	jne	495 <_runtime.scanstack+0x4c3>
 1016744:	90 	nop
 1016745:	48 8b 84 24 d8 01 00 00 	mov	rax, qword ptr [rsp + 472]
 101674d:	48 8b 8c 24 e8 01 00 00 	mov	rcx, qword ptr [rsp + 488]
 1016755:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016759:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1016762:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1016767:	e8 64 40 00 00 	call	16484 <_runtime.binarySearchTree>
 101676c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1016771:	48 89 84 24 f0 01 00 00 	mov	qword ptr [rsp + 496], rax
 1016779:	48 8d 84 24 a8 00 00 00 	lea	rax, [rsp + 168]
 1016781:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016785:	e8 86 3d 00 00 	call	15750 <_runtime.(*stackScanState).getPtr>
 101678a:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 101678f:	3c 00 	cmp	al, 0
 1016791:	48 83 7c 24 08 00 	cmp	qword ptr [rsp + 8], 0
 1016797:	0f 84 4c 01 00 00 	je	332 <_runtime.scanstack+0x479>
 101679d:	88 44 24 5b 	mov	byte ptr [rsp + 91], al
 10167a1:	48 8d 84 24 a8 00 00 00 	lea	rax, [rsp + 168]
 10167a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10167ad:	e8 8e 41 00 00 	call	16782 <_runtime.(*stackScanState).findObject>
 10167b2:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10167b7:	48 85 c0 	test	rax, rax
 10167ba:	74 bd 	je	-67 <_runtime.scanstack+0x309>
 10167bc:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 10167c0:	48 85 c9 	test	rcx, rcx
 10167c3:	74 b4 	je	-76 <_runtime.scanstack+0x309>
 10167c5:	90 	nop
 10167c6:	31 d2 	xor	edx, edx
 10167c8:	48 89 50 08 	mov	qword ptr [rax + 8], rdx
 10167cc:	48 8b 51 20 	mov	rdx, qword ptr [rcx + 32]
 10167d0:	0f b6 59 17 	movzx	ebx, byte ptr [rcx + 23]
 10167d4:	f6 c3 40 	test	bl, 64
 10167d7:	0f 85 b5 00 00 00 	jne	181 <_runtime.scanstack+0x422>
 10167dd:	31 db 	xor	ebx, ebx
 10167df:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 10167e4:	8b 00 	mov	eax, dword ptr [rax]
 10167e6:	48 03 84 24 a8 01 00 00 	add	rax, qword ptr [rsp + 424]
 10167ee:	0f b6 74 24 5b 	movzx	esi, byte ptr [rsp + 91]
 10167f3:	40 80 fe 00 	cmp	sil, 0
 10167f7:	74 66 	je	102 <_runtime.scanstack+0x3ef>
 10167f9:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 10167fd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016801:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1016806:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101680b:	48 8b 84 24 10 02 00 00 	mov	rax, qword ptr [rsp + 528]
 1016813:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1016818:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 1016820:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1016825:	e8 66 12 00 00 	call	4710 <_runtime.scanConservative>
 101682a:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 101682f:	48 85 c0 	test	rax, rax
 1016832:	0f 84 41 ff ff ff 	je	-191 <_runtime.scanstack+0x309>
 1016838:	90 	nop
 1016839:	48 8d 0d c0 e7 0c 00 	lea	rcx, [rip + 845760]
 1016840:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1016844:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1016849:	48 8d 05 68 1e 0e 00 	lea	rax, [rip + 925288]
 1016850:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1016855:	e8 c6 7e 00 00 	call	32454 <_runtime.(*mheap).freeManual>
 101685a:	e9 1a ff ff ff 	jmp	-230 <_runtime.scanstack+0x309>
 101685f:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 1016863:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016867:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101686c:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1016871:	48 8b 84 24 10 02 00 00 	mov	rax, qword ptr [rsp + 528]
 1016879:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101687e:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 1016886:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101688b:	e8 d0 0c 00 00 	call	3280 <_runtime.scanblock>
 1016890:	eb 98 	jmp	-104 <_runtime.scanstack+0x3ba>
 1016892:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 101689a:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 101689f:	48 8b 41 08 	mov	rax, qword ptr [rcx + 8]
 10168a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10168a7:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10168ac:	e8 bf 98 ff ff 	call	-26433 <_runtime.materializeGCProg>
 10168b1:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10168b6:	48 8b 53 18 	mov	rdx, qword ptr [rbx + 24]
 10168ba:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10168c2:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 10168c7:	e9 13 ff ff ff 	jmp	-237 <_runtime.scanstack+0x36f>
 10168cc:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 10168d0:	48 89 8c 24 d8 01 00 00 	mov	qword ptr [rsp + 472], rcx
 10168d8:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 10168e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10168e4:	e8 17 5e 00 00 	call	24087 <_runtime.putempty>
 10168e9:	48 8b 84 24 d8 01 00 00 	mov	rax, qword ptr [rsp + 472]
 10168f1:	48 85 c0 	test	rax, rax
 10168f4:	75 d6 	jne	-42 <_runtime.scanstack+0x45c>
 10168f6:	48 83 bc 24 c0 01 00 00 00 	cmp	qword ptr [rsp + 448], 0
 10168ff:	0f 85 e0 00 00 00 	jne	224 <_runtime.scanstack+0x575>
 1016905:	48 83 bc 24 d0 01 00 00 00 	cmp	qword ptr [rsp + 464], 0
 101690e:	0f 85 d1 00 00 00 	jne	209 <_runtime.scanstack+0x575>
 1016914:	48 83 bc 24 c8 01 00 00 00 	cmp	qword ptr [rsp + 456], 0
 101691d:	0f 85 c2 00 00 00 	jne	194 <_runtime.scanstack+0x575>
 1016923:	48 8b ac 24 f8 01 00 00 	mov	rbp, qword ptr [rsp + 504]
 101692b:	48 81 c4 00 02 00 00 	add	rsp, 512
 1016932:	c3 	ret
 1016933:	48 8d 8c 24 a8 00 00 00 	lea	rcx, [rsp + 168]
 101693b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101693f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1016944:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1016949:	e8 a2 3a 00 00 	call	15010 <_runtime.(*stackScanState).putPtr>
 101694e:	e9 f1 fd ff ff 	jmp	-527 <_runtime.scanstack+0x2d4>
 1016953:	48 8d 48 50 	lea	rcx, [rax + 80]
 1016957:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101695b:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1016964:	48 8d 0d f5 47 0b 00 	lea	rcx, [rip + 739317]
 101696b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1016970:	48 8b 8c 24 10 02 00 00 	mov	rcx, qword ptr [rsp + 528]
 1016978:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101697d:	48 8d 94 24 a8 00 00 00 	lea	rdx, [rsp + 168]
 1016985:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 101698a:	e8 d1 0b 00 00 	call	3025 <_runtime.scanblock>
 101698f:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 1016997:	0f 57 c0 	xorps	xmm0, xmm0
 101699a:	e9 a8 fb ff ff 	jmp	-1112 <_runtime.scanstack+0xd7>
 101699f:	48 89 04 24 	mov	qword ptr [rsp], rax
 10169a3:	e8 38 91 02 00 	call	168248 <_runtime.shrinkstack>
 10169a8:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 10169b0:	e9 4e fb ff ff 	jmp	-1202 <_runtime.scanstack+0x93>
 10169b5:	83 f9 02 	cmp	ecx, 2
 10169b8:	0f 85 10 01 00 00 	jne	272 <_runtime.scanstack+0x65e>
 10169be:	eb 57 	jmp	87 <_runtime.scanstack+0x5a7>
 10169c0:	8d 51 fd 	lea	edx, [rcx - 3]
 10169c3:	83 fa 01 	cmp	edx, 1
 10169c6:	0f 86 0a fb ff ff 	jbe	-1270 <_runtime.scanstack+0x66>
 10169cc:	83 f9 06 	cmp	ecx, 6
 10169cf:	0f 85 f9 00 00 00 	jne	249 <_runtime.scanstack+0x65e>
 10169d5:	48 8b ac 24 f8 01 00 00 	mov	rbp, qword ptr [rsp + 504]
 10169dd:	48 81 c4 00 02 00 00 	add	rsp, 512
 10169e4:	c3 	ret
 10169e5:	48 8d 05 f5 e2 05 00 	lea	rax, [rip + 385781]
 10169ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10169f0:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 10169f9:	e8 62 23 01 00 	call	74594 <_runtime.throw>
 10169fe:	48 8d 05 a8 e0 05 00 	lea	rax, [rip + 385192]
 1016a05:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016a09:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1016a12:	e8 49 23 01 00 	call	74569 <_runtime.throw>
 1016a17:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1016a1d:	89 4c 24 5c 	mov	dword ptr [rsp + 92], ecx
 1016a21:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 1016a28:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 1016a2d:	e8 6e 3a 01 00 	call	80494 <_runtime.printlock>
 1016a32:	48 8d 05 ca cb 05 00 	lea	rax, [rip + 379850]
 1016a39:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016a3d:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1016a46:	e8 95 43 01 00 	call	82837 <_runtime.printstring>
 1016a4b:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 1016a53:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016a57:	e8 44 43 01 00 	call	82756 <_runtime.printpointer>
 1016a5c:	48 8d 05 5f c4 05 00 	lea	rax, [rip + 377951]
 1016a63:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016a67:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1016a70:	e8 6b 43 01 00 	call	82795 <_runtime.printstring>
 1016a75:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1016a7a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016a7e:	e8 9d 41 01 00 	call	82333 <_runtime.printint>
 1016a83:	48 8d 05 a3 d4 05 00 	lea	rax, [rip + 382115]
 1016a8a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016a8e:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1016a97:	e8 44 43 01 00 	call	82756 <_runtime.printstring>
 1016a9c:	8b 44 24 5c 	mov	eax, dword ptr [rsp + 92]
 1016aa0:	89 c0 	mov	eax, eax
 1016aa2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016aa6:	e8 75 40 01 00 	call	82037 <_runtime.printuint>
 1016aab:	e8 80 3c 01 00 	call	81024 <_runtime.printnl>
 1016ab0:	e8 6b 3a 01 00 	call	80491 <_runtime.printunlock>
 1016ab5:	48 8d 05 02 f2 05 00 	lea	rax, [rip + 389634]
 1016abc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016ac0:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 1016ac9:	e8 92 22 01 00 	call	74386 <_runtime.throw>
 1016ace:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1016ad4:	89 4c 24 60 	mov	dword ptr [rsp + 96], ecx
 1016ad8:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 1016adf:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 1016ae4:	e8 b7 39 01 00 	call	80311 <_runtime.printlock>
 1016ae9:	48 8d 05 13 cb 05 00 	lea	rax, [rip + 379667]
 1016af0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016af4:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1016afd:	e8 de 42 01 00 	call	82654 <_runtime.printstring>
 1016b02:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 1016b0a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016b0e:	e8 8d 42 01 00 	call	82573 <_runtime.printpointer>
 1016b13:	48 8d 05 a8 c3 05 00 	lea	rax, [rip + 377768]
 1016b1a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016b1e:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1016b27:	e8 b4 42 01 00 	call	82612 <_runtime.printstring>
 1016b2c:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1016b31:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016b35:	e8 e6 40 01 00 	call	82150 <_runtime.printint>
 1016b3a:	48 8d 05 ec d3 05 00 	lea	rax, [rip + 381932]
 1016b41:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016b45:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1016b4e:	e8 8d 42 01 00 	call	82573 <_runtime.printstring>
 1016b53:	8b 44 24 60 	mov	eax, dword ptr [rsp + 96]
 1016b57:	89 c0 	mov	eax, eax
 1016b59:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016b5d:	e8 be 3f 01 00 	call	81854 <_runtime.printuint>
 1016b62:	e8 c9 3b 01 00 	call	80841 <_runtime.printnl>
 1016b67:	e8 b4 39 01 00 	call	80308 <_runtime.printunlock>
 1016b6c:	48 8d 05 8a d1 05 00 	lea	rax, [rip + 381322]
 1016b73:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016b77:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1016b80:	e8 db 21 01 00 	call	74203 <_runtime.throw>
 1016b85:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1016b8b:	89 4c 24 64 	mov	dword ptr [rsp + 100], ecx
 1016b8f:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 1016b96:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 1016b9b:	e8 00 39 01 00 	call	80128 <_runtime.printlock>
 1016ba0:	48 8d 05 e9 da 05 00 	lea	rax, [rip + 383721]
 1016ba7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016bab:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1016bb4:	e8 27 42 01 00 	call	82471 <_runtime.printstring>
 1016bb9:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 1016bc1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016bc5:	e8 d6 41 01 00 	call	82390 <_runtime.printpointer>
 1016bca:	48 8d 05 f1 c2 05 00 	lea	rax, [rip + 377585]
 1016bd1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016bd5:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1016bde:	e8 fd 41 01 00 	call	82429 <_runtime.printstring>
 1016be3:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1016be8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016bec:	e8 2f 40 01 00 	call	81967 <_runtime.printint>
 1016bf1:	48 8d 05 35 d3 05 00 	lea	rax, [rip + 381749]
 1016bf8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016bfc:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1016c05:	e8 d6 41 01 00 	call	82390 <_runtime.printstring>
 1016c0a:	8b 44 24 64 	mov	eax, dword ptr [rsp + 100]
 1016c0e:	89 c0 	mov	eax, eax
 1016c10:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016c14:	e8 77 40 01 00 	call	82039 <_runtime.printhex>
 1016c19:	e8 12 3b 01 00 	call	80658 <_runtime.printnl>
 1016c1e:	e8 fd 38 01 00 	call	80125 <_runtime.printunlock>
 1016c23:	48 8d 05 92 da 05 00 	lea	rax, [rip + 383634]
 1016c2a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016c2e:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1016c37:	e8 24 21 01 00 	call	74020 <_runtime.throw>
 1016c3c:	90 	nop
 1016c3d:	e8 be 9a 02 00 	call	170686 <_runtime.morestackc>
 1016c42:	e9 29 f8 ff ff 	jmp	-2007 <_runtime.scanstack>
 1016c47:	cc 	int3
 1016c48:	cc 	int3
 1016c49:	cc 	int3
 1016c4a:	cc 	int3
 1016c4b:	cc 	int3
 1016c4c:	cc 	int3
 1016c4d:	cc 	int3
 1016c4e:	cc 	int3
 1016c4f:	cc 	int3

_runtime.scanframeworker:
 1016c50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1016c59:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 1016c5e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1016c62:	0f 86 a6 02 00 00 	jbe	678 <_runtime.scanframeworker+0x2be>
 1016c68:	48 81 ec 88 00 00 00 	sub	rsp, 136
 1016c6f:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1016c77:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 1016c7f:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1016c87:	48 8b 08 	mov	rcx, qword ptr [rax]
 1016c8a:	48 85 c9 	test	rcx, rcx
 1016c8d:	0f 84 74 02 00 00 	je	628 <_runtime.scanframeworker+0x2b7>
 1016c93:	80 79 24 15 	cmp	byte ptr [rcx + 36], 21
 1016c97:	0f 94 c1 	sete	cl
 1016c9a:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1016ca2:	80 ba 10 01 00 00 00 	cmp	byte ptr [rdx + 272], 0
 1016ca9:	0f 85 93 01 00 00 	jne	403 <_runtime.scanframeworker+0x1f2>
 1016caf:	84 c9 	test	cl, cl
 1016cb1:	0f 85 8b 01 00 00 	jne	395 <_runtime.scanframeworker+0x1f2>
 1016cb7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016cbb:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1016cc0:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1016cc5:	e8 96 91 02 00 	call	168342 <_runtime.getStackMap>
 1016cca:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1016ccf:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1016cd4:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1016cd9:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1016cde:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1016ce3:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 1016ce7:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1016cec:	8b 7c 24 18 	mov	edi, dword ptr [rsp + 24]
 1016cf0:	85 ff 	test	edi, edi
 1016cf2:	0f 8f e6 00 00 00 	jg	230 <_runtime.scanframeworker+0x18e>
 1016cf8:	85 db 	test	ebx, ebx
 1016cfa:	0f 8f 8f 00 00 00 	jg	143 <_runtime.scanframeworker+0x13f>
 1016d00:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1016d08:	48 83 7a 38 00 	cmp	qword ptr [rdx + 56], 0
 1016d0d:	74 32 	je	50 <_runtime.scanframeworker+0xf1>
 1016d0f:	48 85 c9 	test	rcx, rcx
 1016d12:	7e 2d 	jle	45 <_runtime.scanframeworker+0xf1>
 1016d14:	31 db 	xor	ebx, ebx
 1016d16:	eb 04 	jmp	4 <_runtime.scanframeworker+0xcc>
 1016d18:	48 83 c0 10 	add	rax, 16
 1016d1c:	48 8b 70 08 	mov	rsi, qword ptr [rax + 8]
 1016d20:	48 8b 38 	mov	rdi, qword ptr [rax]
 1016d23:	4c 8b 42 38 	mov	r8, qword ptr [rdx + 56]
 1016d27:	48 85 ff 	test	rdi, rdi
 1016d2a:	7c 04 	jl	4 <_runtime.scanframeworker+0xe0>
 1016d2c:	4c 8b 42 40 	mov	r8, qword ptr [rdx + 64]
 1016d30:	4c 01 c7 	add	rdi, r8
 1016d33:	48 39 7a 28 	cmp	qword ptr [rdx + 40], rdi
 1016d37:	76 18 	jbe	24 <_runtime.scanframeworker+0x101>
 1016d39:	48 ff c3 	inc	rbx
 1016d3c:	48 39 cb 	cmp	rbx, rcx
 1016d3f:	7c d7 	jl	-41 <_runtime.scanframeworker+0xc8>
 1016d41:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1016d49:	48 81 c4 88 00 00 00 	add	rsp, 136
 1016d50:	c3 	ret
 1016d51:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1016d56:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 1016d5b:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1016d63:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016d67:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1016d6c:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1016d71:	e8 ea 38 00 00 	call	14570 <_runtime.(*stackScanState).addObject>
 1016d76:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1016d7b:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1016d80:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1016d88:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1016d8d:	eb aa 	jmp	-86 <_runtime.scanframeworker+0xe9>
 1016d8f:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1016d97:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 1016d9b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1016d9f:	48 63 cb 	movsxd	rcx, ebx
 1016da2:	48 c1 e1 03 	shl	rcx, 3
 1016da6:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1016dab:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1016db0:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 1016db8:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1016dbd:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 1016dc5:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1016dca:	e8 91 07 00 00 	call	1937 <_runtime.scanblock>
 1016dcf:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1016dd4:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1016dd9:	e9 22 ff ff ff 	jmp	-222 <_runtime.scanframeworker+0xb0>
 1016dde:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 1016de3:	89 5c 24 54 	mov	dword ptr [rsp + 84], ebx
 1016de7:	48 63 c7 	movsxd	rax, edi
 1016dea:	48 c1 e0 03 	shl	rax, 3
 1016dee:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 1016df6:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 1016dfa:	48 29 c2 	sub	rdx, rax
 1016dfd:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1016e01:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1016e06:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1016e0b:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1016e13:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1016e18:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1016e20:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1016e25:	e8 36 07 00 00 	call	1846 <_runtime.scanblock>
 1016e2a:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1016e2f:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1016e34:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1016e39:	8b 5c 24 54 	mov	ebx, dword ptr [rsp + 84]
 1016e3d:	e9 b6 fe ff ff 	jmp	-330 <_runtime.scanframeworker+0xa8>
 1016e42:	88 4c 24 53 	mov	byte ptr [rsp + 83], cl
 1016e46:	48 8b 58 38 	mov	rbx, qword ptr [rax + 56]
 1016e4a:	48 85 db 	test	rbx, rbx
 1016e4d:	74 0c 	je	12 <_runtime.scanframeworker+0x20b>
 1016e4f:	48 8b 70 28 	mov	rsi, qword ptr [rax + 40]
 1016e53:	48 29 f3 	sub	rbx, rsi
 1016e56:	48 85 db 	test	rbx, rbx
 1016e59:	77 69 	ja	105 <_runtime.scanframeworker+0x274>
 1016e5b:	48 8b 58 48 	mov	rbx, qword ptr [rax + 72]
 1016e5f:	48 85 db 	test	rbx, rbx
 1016e62:	75 24 	jne	36 <_runtime.scanframeworker+0x238>
 1016e64:	84 c9 	test	cl, cl
 1016e66:	74 17 	je	23 <_runtime.scanframeworker+0x22f>
 1016e68:	c6 82 10 01 00 00 01 	mov	byte ptr [rdx + 272], 1
 1016e6f:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1016e77:	48 81 c4 88 00 00 00 	add	rsp, 136
 1016e7e:	c3 	ret
 1016e7f:	c6 82 10 01 00 00 00 	mov	byte ptr [rdx + 272], 0
 1016e86:	eb e7 	jmp	-25 <_runtime.scanframeworker+0x21f>
 1016e88:	48 8b 40 40 	mov	rax, qword ptr [rax + 64]
 1016e8c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1016e90:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1016e95:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1016e9e:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1016ea6:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1016eab:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1016eb0:	e8 db 0b 00 00 	call	3035 <_runtime.scanConservative>
 1016eb5:	0f b6 4c 24 53 	movzx	ecx, byte ptr [rsp + 83]
 1016eba:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1016ec2:	eb a0 	jmp	-96 <_runtime.scanframeworker+0x214>
 1016ec4:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1016ec8:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1016ecd:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1016ed6:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1016ede:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1016ee3:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1016ee8:	e8 a3 0b 00 00 	call	2979 <_runtime.scanConservative>
 1016eed:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1016ef5:	0f b6 4c 24 53 	movzx	ecx, byte ptr [rsp + 83]
 1016efa:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1016f02:	e9 54 ff ff ff 	jmp	-172 <_runtime.scanframeworker+0x20b>
 1016f07:	31 c9 	xor	ecx, ecx
 1016f09:	e9 8c fd ff ff 	jmp	-628 <_runtime.scanframeworker+0x4a>
 1016f0e:	e8 bd 9c 03 00 	call	236733 <_runtime.morestack_noctxt>
 1016f13:	e9 38 fd ff ff 	jmp	-712 <_runtime.scanframeworker>
 1016f18:	cc 	int3
 1016f19:	cc 	int3
 1016f1a:	cc 	int3
 1016f1b:	cc 	int3
 1016f1c:	cc 	int3
 1016f1d:	cc 	int3
 1016f1e:	cc 	int3
 1016f1f:	cc 	int3

_runtime.gcDrain:
 1016f20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1016f29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1016f2d:	0f 86 ea 03 00 00 	jbe	1002 <_runtime.gcDrain+0x3fd>
 1016f33:	48 83 ec 50 	sub	rsp, 80
 1016f37:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 1016f3c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1016f41:	80 3d bc 09 0e 00 00 	cmp	byte ptr [rip + 919996], 0
 1016f48:	0f 84 b5 03 00 00 	je	949 <_runtime.gcDrain+0x3e3>
 1016f4e:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1016f57:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 1016f5b:	48 8b 92 c0 00 00 00 	mov	rdx, qword ptr [rdx + 192]
 1016f62:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1016f67:	48 8b 73 18 	mov	rsi, qword ptr [rbx + 24]
 1016f6b:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 1016f70:	48 f7 c7 0c 00 00 00 	test	rdi, 12
 1016f77:	0f 84 68 03 00 00 	je	872 <_runtime.gcDrain+0x3c5>
 1016f7d:	0f ba e7 02 	bt	edi, 2
 1016f81:	0f 83 42 03 00 00 	jae	834 <_runtime.gcDrain+0x3a9>
 1016f87:	48 8d 05 e2 09 06 00 	lea	rax, [rip + 395746]
 1016f8e:	4c 8d 86 a0 86 01 00 	lea	r8, [rsi + 100000]
 1016f95:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1016f9a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1016f9f:	44 8b 0d 26 7a 0b 00 	mov	r9d, dword ptr [rip + 752166]
 1016fa6:	44 39 0d 1b 7a 0b 00 	cmp	dword ptr [rip + 752155], r9d
 1016fad:	0f 83 02 01 00 00 	jae	258 <_runtime.gcDrain+0x195>
 1016fb3:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1016fb8:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 1016fbd:	eb 25 	jmp	37 <_runtime.gcDrain+0xc4>
 1016fbf:	4c 8b 4c 24 58 	mov	r9, qword ptr [rsp + 88]
 1016fc4:	4c 8b 54 24 60 	mov	r10, qword ptr [rsp + 96]
 1016fc9:	4c 8b 5c 24 38 	mov	r11, qword ptr [rsp + 56]
 1016fce:	48 89 d0 	mov	rax, rdx
 1016fd1:	4c 89 da 	mov	rdx, r11
 1016fd4:	4c 89 cb 	mov	rbx, r9
 1016fd7:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 1016fdc:	4c 89 d7 	mov	rdi, r10
 1016fdf:	4c 8b 44 24 18 	mov	r8, qword ptr [rsp + 24]
 1016fe4:	0f ba e7 00 	bt	edi, 0
 1016fe8:	73 0d 	jae	13 <_runtime.gcDrain+0xd7>
 1016fea:	80 ba b1 00 00 00 00 	cmp	byte ptr [rdx + 177], 0
 1016ff1:	0f 85 be 00 00 00 	jne	190 <_runtime.gcDrain+0x195>
 1016ff7:	41 b9 01 00 00 00 	mov	r9d, 1
 1016ffd:	4c 8d 15 c4 79 0b 00 	lea	r10, [rip + 752068]
 1017004:	f0 	lock
 1017005:	45 0f c1 0a 	xadd	dword ptr [r10], r9d
 1017009:	44 8b 1d bc 79 0b 00 	mov	r11d, dword ptr [rip + 752060]
 1017010:	45 39 d9 	cmp	r9d, r11d
 1017013:	0f 83 9c 00 00 00 	jae	156 <_runtime.gcDrain+0x195>
 1017019:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101701d:	44 89 4c 24 08 	mov	dword ptr [rsp + 8], r9d
 1017022:	e8 49 e3 ff ff 	call	-7351 <_runtime.markroot>
 1017027:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101702c:	48 85 d2 	test	rdx, rdx
 101702f:	75 59 	jne	89 <_runtime.gcDrain+0x16a>
 1017031:	31 c0 	xor	eax, eax
 1017033:	84 c0 	test	al, al
 1017035:	74 88 	je	-120 <_runtime.gcDrain+0x9f>
 1017037:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101703c:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1017041:	48 8b 51 18 	mov	rdx, qword ptr [rcx + 24]
 1017045:	48 85 d2 	test	rdx, rdx
 1017048:	7e 1f 	jle	31 <_runtime.gcDrain+0x149>
 101704a:	48 8d 1d 2f 0d 0e 00 	lea	rbx, [rip + 920879]
 1017051:	f0 	lock
 1017052:	48 0f c1 13 	xadd	qword ptr [rbx], rdx
 1017056:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 101705b:	0f ba e2 01 	bt	edx, 1
 101705f:	72 12 	jb	18 <_runtime.gcDrain+0x153>
 1017061:	48 c7 41 18 00 00 00 00 	mov	qword ptr [rcx + 24], 0
 1017069:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 101706e:	48 83 c4 50 	add	rsp, 80
 1017072:	c3 	ret
 1017073:	48 8b 51 18 	mov	rdx, qword ptr [rcx + 24]
 1017077:	48 29 c2 	sub	rdx, rax
 101707a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101707e:	e8 6d f2 ff ff 	call	-3475 <_runtime.gcFlushBgCredit>
 1017083:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1017088:	eb d7 	jmp	-41 <_runtime.gcDrain+0x141>
 101708a:	48 8b 02 	mov	rax, qword ptr [rdx]
 101708d:	ff d0 	call	rax
 101708f:	0f b6 04 24 	movzx	eax, byte ptr [rsp]
 1017093:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1017098:	eb 99 	jmp	-103 <_runtime.gcDrain+0x113>
 101709a:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 101709f:	48 89 d0 	mov	rax, rdx
 10170a2:	4c 89 ca 	mov	rdx, r9
 10170a5:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 10170aa:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 10170af:	49 89 f0 	mov	r8, rsi
 10170b2:	48 89 ce 	mov	rsi, rcx
 10170b5:	0f ba e7 00 	bt	edi, 0
 10170b9:	73 0d 	jae	13 <_runtime.gcDrain+0x1a8>
 10170bb:	80 ba b1 00 00 00 00 	cmp	byte ptr [rdx + 177], 0
 10170c2:	0f 85 f3 01 00 00 	jne	499 <_runtime.gcDrain+0x39b>
 10170c8:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 10170cd:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 10170d2:	48 83 3d 66 78 0b 00 00 	cmp	qword ptr [rip + 751718], 0
 10170da:	0f 84 af 01 00 00 	je	431 <_runtime.gcDrain+0x36f>
 10170e0:	4c 8b 0b 	mov	r9, qword ptr [rbx]
 10170e3:	4d 85 c9 	test	r9, r9
 10170e6:	0f 84 9c 01 00 00 	je	412 <_runtime.gcDrain+0x368>
 10170ec:	4d 8b 51 10 	mov	r10, qword ptr [r9 + 16]
 10170f0:	4d 85 d2 	test	r10, r10
 10170f3:	0f 85 74 01 00 00 	jne	372 <_runtime.gcDrain+0x34d>
 10170f9:	31 c9 	xor	ecx, ecx
 10170fb:	48 85 c9 	test	rcx, rcx
 10170fe:	0f 84 0f 01 00 00 	je	271 <_runtime.gcDrain+0x2f3>
 1017104:	48 85 c9 	test	rcx, rcx
 1017107:	0f 84 f8 00 00 00 	je	248 <_runtime.gcDrain+0x2e5>
 101710d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1017111:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1017116:	e8 c5 05 00 00 	call	1477 <_runtime.scanobject>
 101711b:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1017120:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 1017124:	48 81 f9 d0 07 00 00 	cmp	rcx, 2000
 101712b:	0f 8c bb 00 00 00 	jl	187 <_runtime.gcDrain+0x2cc>
 1017131:	48 8d 1d 48 0c 0e 00 	lea	rbx, [rip + 920648]
 1017138:	f0 	lock
 1017139:	48 0f c1 0b 	xadd	qword ptr [rbx], rcx
 101713d:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1017142:	0f ba e3 01 	bt	ebx, 1
 1017146:	72 7e 	jb	126 <_runtime.gcDrain+0x2a6>
 1017148:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101714d:	48 8b 70 18 	mov	rsi, qword ptr [rax + 24]
 1017151:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 1017159:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 101715e:	48 29 f7 	sub	rdi, rsi
 1017161:	48 85 ff 	test	rdi, rdi
 1017164:	7f 53 	jg	83 <_runtime.gcDrain+0x299>
 1017166:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101716b:	48 85 d2 	test	rdx, rdx
 101716e:	75 1b 	jne	27 <_runtime.gcDrain+0x26b>
 1017170:	31 f6 	xor	esi, esi
 1017172:	40 84 f6 	test	sil, sil
 1017175:	75 0c 	jne	12 <_runtime.gcDrain+0x263>
 1017177:	48 8d b7 a0 86 01 00 	lea	rsi, [rdi + 100000]
 101717e:	e9 17 ff ff ff 	jmp	-233 <_runtime.gcDrain+0x17a>
 1017183:	48 89 c8 	mov	rax, rcx
 1017186:	e9 b1 fe ff ff 	jmp	-335 <_runtime.gcDrain+0x11c>
 101718b:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1017190:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1017195:	48 8b 02 	mov	rax, qword ptr [rdx]
 1017198:	ff d0 	call	rax
 101719a:	0f b6 34 24 	movzx	esi, byte ptr [rsp]
 101719e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10171a3:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10171a8:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10171ad:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 10171b2:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 10171b7:	eb b9 	jmp	-71 <_runtime.gcDrain+0x252>
 10171b9:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10171be:	48 89 fe 	mov	rsi, rdi
 10171c1:	e9 d4 fe ff ff 	jmp	-300 <_runtime.gcDrain+0x17a>
 10171c6:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 10171ca:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10171cf:	48 29 d1 	sub	rcx, rdx
 10171d2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10171d6:	e8 15 f1 ff ff 	call	-3819 <_runtime.gcFlushBgCredit>
 10171db:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10171e0:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 10171e5:	31 c9 	xor	ecx, ecx
 10171e7:	e9 61 ff ff ff 	jmp	-159 <_runtime.gcDrain+0x22d>
 10171ec:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10171f1:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 10171f6:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 10171fb:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1017200:	e9 95 fe ff ff 	jmp	-363 <_runtime.gcDrain+0x17a>
 1017205:	48 89 d8 	mov	rax, rbx
 1017208:	48 89 fb 	mov	rbx, rdi
 101720b:	48 89 f1 	mov	rcx, rsi
 101720e:	e9 70 ff ff ff 	jmp	-144 <_runtime.gcDrain+0x263>
 1017213:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1017217:	e8 14 4f 00 00 	call	20244 <_runtime.(*gcWork).tryGet>
 101721c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1017221:	48 85 c0 	test	rax, rax
 1017224:	74 26 	je	38 <_runtime.gcDrain+0x32c>
 1017226:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 101722b:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1017230:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 1017235:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 101723a:	4c 8b 44 24 18 	mov	r8, qword ptr [rsp + 24]
 101723f:	48 89 c1 	mov	rcx, rax
 1017242:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1017247:	e9 b8 fe ff ff 	jmp	-328 <_runtime.gcDrain+0x1e4>
 101724c:	0f 57 c0 	xorps	xmm0, xmm0
 101724f:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 1017253:	e8 18 e1 00 00 	call	57624 <_runtime.wbBufFlush>
 1017258:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101725d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017261:	e8 ca 4e 00 00 	call	20170 <_runtime.(*gcWork).tryGet>
 1017266:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101726b:	eb b9 	jmp	-71 <_runtime.gcDrain+0x306>
 101726d:	4d 8d 5a ff 	lea	r11, [r10 - 1]
 1017271:	4d 89 59 10 	mov	qword ptr [r9 + 16], r11
 1017275:	49 81 fb fd 00 00 00 	cmp	r11, 253
 101727c:	73 78 	jae	120 <_runtime.gcDrain+0x3d6>
 101727e:	4b 8b 4c d1 10 	mov	rcx, qword ptr [r9 + 8*r10 + 16]
 1017283:	e9 73 fe ff ff 	jmp	-397 <_runtime.gcDrain+0x1db>
 1017288:	31 c9 	xor	ecx, ecx
 101728a:	e9 6c fe ff ff 	jmp	-404 <_runtime.gcDrain+0x1db>
 101728f:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1017293:	e8 78 50 00 00 	call	20600 <_runtime.(*gcWork).balance>
 1017298:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101729d:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10172a2:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 10172a7:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 10172ac:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 10172b1:	4c 8b 44 24 18 	mov	r8, qword ptr [rsp + 24]
 10172b6:	e9 25 fe ff ff 	jmp	-475 <_runtime.gcDrain+0x1c0>
 10172bb:	48 89 d8 	mov	rax, rbx
 10172be:	48 89 fb 	mov	rbx, rdi
 10172c1:	48 89 f1 	mov	rcx, rsi
 10172c4:	e9 ba fe ff ff 	jmp	-326 <_runtime.gcDrain+0x263>
 10172c9:	48 f7 c7 08 00 00 00 	test	rdi, 8
 10172d0:	b8 00 00 00 00 	mov	eax, 0
 10172d5:	4c 8d 05 8c 06 06 00 	lea	r8, [rip + 394892]
 10172dc:	49 0f 45 c0 	cmovne	rax, r8
 10172e0:	e9 a9 fc ff ff 	jmp	-855 <_runtime.gcDrain+0x6e>
 10172e5:	49 b8 ff ff ff ff ff ff ff 7f 	movabs	r8, 9223372036854775807
 10172ef:	31 c0 	xor	eax, eax
 10172f1:	e9 9f fc ff ff 	jmp	-865 <_runtime.gcDrain+0x75>
 10172f6:	4c 89 d8 	mov	rax, r11
 10172f9:	b9 fd 00 00 00 	mov	ecx, 253
 10172fe:	e8 4d c0 03 00 	call	245837 <_runtime.panicIndex>
 1017303:	48 8d 05 31 d5 05 00 	lea	rax, [rip + 382257]
 101730a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101730e:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1017317:	e8 44 1a 01 00 	call	72260 <_runtime.throw>
 101731c:	90 	nop
 101731d:	e8 ae 98 03 00 	call	235694 <_runtime.morestack_noctxt>
 1017322:	e9 f9 fb ff ff 	jmp	-1031 <_runtime.gcDrain>
 1017327:	cc 	int3
 1017328:	cc 	int3
 1017329:	cc 	int3
 101732a:	cc 	int3
 101732b:	cc 	int3
 101732c:	cc 	int3
 101732d:	cc 	int3
 101732e:	cc 	int3
 101732f:	cc 	int3

_runtime.gcDrainN:
 1017330:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1017339:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101733d:	0f 86 0f 02 00 00 	jbe	527 <_runtime.gcDrainN+0x222>
 1017343:	48 83 ec 28 	sub	rsp, 40
 1017347:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101734c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1017351:	80 3d ac 05 0e 00 00 	cmp	byte ptr [rip + 918956], 0
 1017358:	0f 84 da 01 00 00 	je	474 <_runtime.gcDrainN+0x208>
 101735e:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1017367:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 101736b:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1017370:	48 8b 73 18 	mov	rsi, qword ptr [rbx + 24]
 1017374:	48 f7 de 	neg	rsi
 1017377:	48 8b 92 c0 00 00 00 	mov	rdx, qword ptr [rdx + 192]
 101737e:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1017383:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1017388:	eb 1b 	jmp	27 <_runtime.gcDrainN+0x75>
 101738a:	4c 8b 44 24 18 	mov	r8, qword ptr [rsp + 24]
 101738f:	4c 8b 4c 24 30 	mov	r9, qword ptr [rsp + 48]
 1017394:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 1017399:	4c 89 c2 	mov	rdx, r8
 101739c:	4c 89 cb 	mov	rbx, r9
 101739f:	4c 89 d7 	mov	rdi, r10
 10173a2:	48 89 c6 	mov	rsi, rax
 10173a5:	80 ba b1 00 00 00 00 	cmp	byte ptr [rdx + 177], 0
 10173ac:	0f 85 87 00 00 00 	jne	135 <_runtime.gcDrainN+0x109>
 10173b2:	4c 8b 43 18 	mov	r8, qword ptr [rbx + 24]
 10173b6:	49 01 f0 	add	r8, rsi
 10173b9:	49 39 f8 	cmp	r8, rdi
 10173bc:	7d 7b 	jge	123 <_runtime.gcDrainN+0x109>
 10173be:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10173c3:	48 83 3d 75 75 0b 00 00 	cmp	qword ptr [rip + 750965], 0
 10173cb:	0f 84 3b 01 00 00 	je	315 <_runtime.gcDrainN+0x1dc>
 10173d1:	4c 8b 03 	mov	r8, qword ptr [rbx]
 10173d4:	4d 85 c0 	test	r8, r8
 10173d7:	0f 84 28 01 00 00 	je	296 <_runtime.gcDrainN+0x1d5>
 10173dd:	4d 8b 48 10 	mov	r9, qword ptr [r8 + 16]
 10173e1:	4d 85 c9 	test	r9, r9
 10173e4:	0f 85 01 01 00 00 	jne	257 <_runtime.gcDrainN+0x1bb>
 10173ea:	31 c0 	xor	eax, eax
 10173ec:	48 85 c0 	test	rax, rax
 10173ef:	0f 84 a9 00 00 00 	je	169 <_runtime.gcDrainN+0x16e>
 10173f5:	48 85 c0 	test	rax, rax
 10173f8:	75 55 	jne	85 <_runtime.gcDrainN+0x11f>
 10173fa:	8b 05 cc 75 0b 00 	mov	eax, dword ptr [rip + 751052]
 1017400:	39 05 c2 75 0b 00 	cmp	dword ptr [rip + 751042], eax
 1017406:	73 31 	jae	49 <_runtime.gcDrainN+0x109>
 1017408:	b8 01 00 00 00 	mov	eax, 1
 101740d:	48 8d 0d b4 75 0b 00 	lea	rcx, [rip + 751028]
 1017414:	f0 	lock
 1017415:	0f c1 01 	xadd	dword ptr [rcx], eax
 1017418:	8b 0d ae 75 0b 00 	mov	ecx, dword ptr [rip + 751022]
 101741e:	39 c8 	cmp	eax, ecx
 1017420:	73 17 	jae	23 <_runtime.gcDrainN+0x109>
 1017422:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1017426:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 101742a:	e8 41 df ff ff 	call	-8383 <_runtime.markroot>
 101742f:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1017434:	e9 51 ff ff ff 	jmp	-175 <_runtime.gcDrainN+0x5a>
 1017439:	48 8b 43 18 	mov	rax, qword ptr [rbx + 24]
 101743d:	48 01 f0 	add	rax, rsi
 1017440:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1017445:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101744a:	48 83 c4 28 	add	rsp, 40
 101744e:	c3 	ret
 101744f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017453:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1017458:	e8 83 02 00 00 	call	643 <_runtime.scanobject>
 101745d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1017462:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 1017466:	48 81 f9 d0 07 00 00 	cmp	rcx, 2000
 101746d:	7c 28 	jl	40 <_runtime.gcDrainN+0x167>
 101746f:	48 8d 15 0a 09 0e 00 	lea	rdx, [rip + 919818]
 1017476:	f0 	lock
 1017477:	48 0f c1 0a 	xadd	qword ptr [rdx], rcx
 101747b:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 101747f:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 1017487:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101748c:	48 01 da 	add	rdx, rbx
 101748f:	48 89 d0 	mov	rax, rdx
 1017492:	e9 f3 fe ff ff 	jmp	-269 <_runtime.gcDrainN+0x5a>
 1017497:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 101749c:	eb f1 	jmp	-15 <_runtime.gcDrainN+0x15f>
 101749e:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10174a2:	e8 89 4c 00 00 	call	19593 <_runtime.(*gcWork).tryGet>
 10174a7:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10174ac:	48 85 c0 	test	rax, rax
 10174af:	74 19 	je	25 <_runtime.gcDrainN+0x19a>
 10174b1:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 10174b6:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10174bb:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 10174c0:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 10174c5:	e9 2b ff ff ff 	jmp	-213 <_runtime.gcDrainN+0xc5>
 10174ca:	0f 57 c0 	xorps	xmm0, xmm0
 10174cd:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 10174d1:	e8 9a de 00 00 	call	56986 <_runtime.wbBufFlush>
 10174d6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10174db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10174df:	e8 4c 4c 00 00 	call	19532 <_runtime.(*gcWork).tryGet>
 10174e4:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10174e9:	eb c6 	jmp	-58 <_runtime.gcDrainN+0x181>
 10174eb:	49 8d 41 ff 	lea	rax, [r9 - 1]
 10174ef:	49 89 40 10 	mov	qword ptr [r8 + 16], rax
 10174f3:	48 3d fd 00 00 00 	cmp	rax, 253
 10174f9:	73 33 	jae	51 <_runtime.gcDrainN+0x1fe>
 10174fb:	4b 8b 44 c8 10 	mov	rax, qword ptr [r8 + 8*r9 + 16]
 1017500:	e9 e7 fe ff ff 	jmp	-281 <_runtime.gcDrainN+0xbc>
 1017505:	31 c0 	xor	eax, eax
 1017507:	e9 e0 fe ff ff 	jmp	-288 <_runtime.gcDrainN+0xbc>
 101750c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1017510:	e8 fb 4d 00 00 	call	19963 <_runtime.(*gcWork).balance>
 1017515:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101751a:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 101751f:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 1017524:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1017529:	e9 a3 fe ff ff 	jmp	-349 <_runtime.gcDrainN+0xa1>
 101752e:	b9 fd 00 00 00 	mov	ecx, 253
 1017533:	e8 18 be 03 00 	call	245272 <_runtime.panicIndex>
 1017538:	48 8d 05 9e d5 05 00 	lea	rax, [rip + 382366]
 101753f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017543:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 101754c:	e8 0f 18 01 00 	call	71695 <_runtime.throw>
 1017551:	90 	nop
 1017552:	e8 a9 91 02 00 	call	168361 <_runtime.morestackc>
 1017557:	e9 d4 fd ff ff 	jmp	-556 <_runtime.gcDrainN>
 101755c:	cc 	int3
 101755d:	cc 	int3
 101755e:	cc 	int3
 101755f:	cc 	int3

_runtime.scanblock:
 1017560:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1017569:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101756d:	0f 86 59 01 00 00 	jbe	345 <_runtime.scanblock+0x16c>
 1017573:	48 83 ec 58 	sub	rsp, 88
 1017577:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 101757c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1017581:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1017586:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 101758b:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1017590:	31 db 	xor	ebx, ebx
 1017592:	48 39 cb 	cmp	rbx, rcx
 1017595:	0f 83 27 01 00 00 	jae	295 <_runtime.scanblock+0x162>
 101759b:	48 89 de 	mov	rsi, rbx
 101759e:	48 c1 eb 06 	shr	rbx, 6
 10175a2:	0f b6 1c 18 	movzx	ebx, byte ptr [rax + rbx]
 10175a6:	85 db 	test	ebx, ebx
 10175a8:	75 06 	jne	6 <_runtime.scanblock+0x50>
 10175aa:	48 8d 5e 40 	lea	rbx, [rsi + 64]
 10175ae:	eb e2 	jmp	-30 <_runtime.scanblock+0x32>
 10175b0:	31 ff 	xor	edi, edi
 10175b2:	eb 09 	jmp	9 <_runtime.scanblock+0x5d>
 10175b4:	48 ff c7 	inc	rdi
 10175b7:	d1 eb 	shr	ebx
 10175b9:	48 83 c6 08 	add	rsi, 8
 10175bd:	48 83 ff 08 	cmp	rdi, 8
 10175c1:	0f 8d f3 00 00 00 	jge	243 <_runtime.scanblock+0x15a>
 10175c7:	48 39 ce 	cmp	rsi, rcx
 10175ca:	0f 83 ea 00 00 00 	jae	234 <_runtime.scanblock+0x15a>
 10175d0:	0f ba e3 00 	bt	ebx, 0
 10175d4:	73 de 	jae	-34 <_runtime.scanblock+0x54>
 10175d6:	4c 8d 04 16 	lea	r8, [rsi + rdx]
 10175da:	4d 8b 00 	mov	r8, qword ptr [r8]
 10175dd:	4d 85 c0 	test	r8, r8
 10175e0:	74 d2 	je	-46 <_runtime.scanblock+0x54>
 10175e2:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 10175e7:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 10175ec:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 10175f1:	89 5c 24 34 	mov	dword ptr [rsp + 52], ebx
 10175f5:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10175f9:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10175fe:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1017603:	e8 08 63 ff ff 	call	-40184 <_runtime.findObject>
 1017608:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101760d:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1017612:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1017617:	48 85 c0 	test	rax, rax
 101761a:	75 63 	jne	99 <_runtime.scanblock+0x11f>
 101761c:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1017624:	48 85 c0 	test	rax, rax
 1017627:	74 17 	je	23 <_runtime.scanblock+0xe0>
 1017629:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101762e:	48 39 88 00 01 00 00 	cmp	qword ptr [rax + 256], rcx
 1017635:	77 09 	ja	9 <_runtime.scanblock+0xe0>
 1017637:	48 39 88 08 01 00 00 	cmp	qword ptr [rax + 264], rcx
 101763e:	77 22 	ja	34 <_runtime.scanblock+0x102>
 1017640:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1017645:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 101764a:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 101764f:	8b 5c 24 34 	mov	ebx, dword ptr [rsp + 52]
 1017653:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1017658:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 101765d:	e9 52 ff ff ff 	jmp	-174 <_runtime.scanblock+0x54>
 1017662:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017666:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101766b:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1017670:	e8 7b 2d 00 00 	call	11643 <_runtime.(*stackScanState).putPtr>
 1017675:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101767d:	eb c1 	jmp	-63 <_runtime.scanblock+0xe0>
 101767f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017683:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1017688:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101768d:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1017692:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1017697:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101769c:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10176a1:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10176a6:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10176ab:	e8 c0 06 00 00 	call	1728 <_runtime.greyobject>
 10176b0:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10176b8:	eb 86 	jmp	-122 <_runtime.scanblock+0xe0>
 10176ba:	48 89 f3 	mov	rbx, rsi
 10176bd:	e9 d0 fe ff ff 	jmp	-304 <_runtime.scanblock+0x32>
 10176c2:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 10176c7:	48 83 c4 58 	add	rsp, 88
 10176cb:	c3 	ret
 10176cc:	e8 ff 94 03 00 	call	234751 <_runtime.morestack_noctxt>
 10176d1:	e9 8a fe ff ff 	jmp	-374 <_runtime.scanblock>
 10176d6:	cc 	int3
 10176d7:	cc 	int3
 10176d8:	cc 	int3
 10176d9:	cc 	int3
 10176da:	cc 	int3
 10176db:	cc 	int3
 10176dc:	cc 	int3
 10176dd:	cc 	int3
 10176de:	cc 	int3
 10176df:	cc 	int3

_runtime.scanobject:
 10176e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10176e9:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 10176ee:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10176f2:	0f 86 88 03 00 00 	jbe	904 <_runtime.scanobject+0x3a0>
 10176f8:	48 81 ec 88 00 00 00 	sub	rsp, 136
 10176ff:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1017707:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 101770f:	48 8b 15 ba dc 0d 00 	mov	rdx, qword ptr [rip + 908474]
 1017716:	84 02 	test	byte ptr [rdx], al
 1017718:	90 	nop
 1017719:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1017721:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 101772b:	48 8d 04 1e 	lea	rax, [rsi + rbx]
 101772f:	48 c1 e8 1a 	shr	rax, 26
 1017733:	48 3d 00 00 40 00 	cmp	rax, 4194304
 1017739:	0f 83 36 03 00 00 	jae	822 <_runtime.scanobject+0x395>
 101773f:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 1017743:	48 85 d2 	test	rdx, rdx
 1017746:	0f 84 f2 02 00 00 	je	754 <_runtime.scanobject+0x35e>
 101774c:	48 89 de 	mov	rsi, rbx
 101774f:	48 c1 eb 05 	shr	rbx, 5
 1017753:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 101775a:	48 01 d3 	add	rbx, rdx
 101775d:	48 89 f7 	mov	rdi, rsi
 1017760:	48 c1 ee 03 	shr	rsi, 3
 1017764:	48 83 e6 03 	and	rsi, 3
 1017768:	4c 8d 82 ff ff 1f 00 	lea	r8, [rdx + 2097151]
 101776f:	49 89 f9 	mov	r9, rdi
 1017772:	48 c1 ef 0d 	shr	rdi, 13
 1017776:	48 81 e7 ff 1f 00 00 	and	rdi, 8191
 101777d:	48 8b bc fa 00 00 20 00 	mov	rdi, qword ptr [rdx + 8*rdi + 2097152]
 1017785:	84 02 	test	byte ptr [rdx], al
 1017787:	90 	nop
 1017788:	48 8b 57 68 	mov	rdx, qword ptr [rdi + 104]
 101778c:	48 85 d2 	test	rdx, rdx
 101778f:	0f 84 c7 02 00 00 	je	711 <_runtime.scanobject+0x37c>
 1017795:	48 81 fa 00 00 02 00 	cmp	rdx, 131072
 101779c:	0f 86 8f 02 00 00 	jbe	655 <_runtime.scanobject+0x351>
 10177a2:	4c 39 4f 18 	cmp	qword ptr [rdi + 24], r9
 10177a6:	0f 85 78 02 00 00 	jne	632 <_runtime.scanobject+0x344>
 10177ac:	44 0f b6 57 62 	movzx	r10d, byte ptr [rdi + 98]
 10177b1:	41 f6 c2 01 	test	r10b, 1
 10177b5:	0f 85 4d 02 00 00 	jne	589 <_runtime.scanobject+0x328>
 10177bb:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 10177c0:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 10177c5:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 10177c9:	89 74 24 30 	mov	dword ptr [rsp + 48], esi
 10177cd:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 10177d2:	49 8d 91 00 00 02 00 	lea	rdx, [r9 + 131072]
 10177d9:	4c 8b 94 24 98 00 00 00 	mov	r10, qword ptr [rsp + 152]
 10177e1:	eb 07 	jmp	7 <_runtime.scanobject+0x10a>
 10177e3:	48 81 c2 00 00 02 00 	add	rdx, 131072
 10177ea:	4c 8b 5f 68 	mov	r11, qword ptr [rdi + 104]
 10177ee:	4c 03 5f 18 	add	r11, qword ptr [rdi + 24]
 10177f2:	4c 39 da 	cmp	rdx, r11
 10177f5:	73 76 	jae	118 <_runtime.scanobject+0x18d>
 10177f7:	4d 8b 1a 	mov	r11, qword ptr [r10]
 10177fa:	4d 85 db 	test	r11, r11
 10177fd:	74 6a 	je	106 <_runtime.scanobject+0x189>
 10177ff:	4d 8b 63 10 	mov	r12, qword ptr [r11 + 16]
 1017803:	49 81 fc fd 00 00 00 	cmp	r12, 253
 101780a:	75 47 	jne	71 <_runtime.scanobject+0x173>
 101780c:	31 c9 	xor	ecx, ecx
 101780e:	84 c9 	test	cl, cl
 1017810:	75 d1 	jne	-47 <_runtime.scanobject+0x103>
 1017812:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1017817:	4c 89 14 24 	mov	qword ptr [rsp], r10
 101781b:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1017820:	e8 2b 46 00 00 	call	17963 <_runtime.(*gcWork).put>
 1017825:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 1017829:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101782e:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1017833:	8b 74 24 30 	mov	esi, dword ptr [rsp + 48]
 1017837:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 101783c:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 1017841:	4c 8b 8c 24 90 00 00 00 	mov	r9, qword ptr [rsp + 144]
 1017849:	4c 8b 94 24 98 00 00 00 	mov	r10, qword ptr [rsp + 152]
 1017851:	eb 90 	jmp	-112 <_runtime.scanobject+0x103>
 1017853:	0f 83 f6 01 00 00 	jae	502 <_runtime.scanobject+0x36f>
 1017859:	4b 89 54 e3 18 	mov	qword ptr [r11 + 8*r12 + 24], rdx
 101785e:	49 ff 43 10 	inc	qword ptr [r11 + 16]
 1017862:	b9 01 00 00 00 	mov	ecx, 1
 1017867:	eb a5 	jmp	-91 <_runtime.scanobject+0x12e>
 1017869:	31 c9 	xor	ecx, ecx
 101786b:	eb a1 	jmp	-95 <_runtime.scanobject+0x12e>
 101786d:	48 8b 57 68 	mov	rdx, qword ptr [rdi + 104]
 1017871:	48 03 57 18 	add	rdx, qword ptr [rdi + 24]
 1017875:	4c 29 ca 	sub	rdx, r9
 1017878:	48 81 fa 00 00 02 00 	cmp	rdx, 131072
 101787f:	bf 00 00 02 00 	mov	edi, 131072
 1017884:	48 0f 47 d7 	cmova	rdx, rdi
 1017888:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 101788d:	31 c9 	xor	ecx, ecx
 101788f:	eb 07 	jmp	7 <_runtime.scanobject+0x1b8>
 1017891:	49 8d 7b 08 	lea	rdi, [r11 + 8]
 1017895:	48 89 f9 	mov	rcx, rdi
 1017898:	48 39 d1 	cmp	rcx, rdx
 101789b:	0f 83 62 01 00 00 	jae	354 <_runtime.scanobject+0x323>
 10178a1:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 10178a6:	48 85 c9 	test	rcx, rcx
 10178a9:	74 0b 	je	11 <_runtime.scanobject+0x1d6>
 10178ab:	83 fe 03 	cmp	esi, 3
 10178ae:	0f 83 f9 00 00 00 	jae	249 <_runtime.scanobject+0x2cd>
 10178b4:	ff c6 	inc	esi
 10178b6:	0f b6 3b 	movzx	edi, byte ptr [rbx]
 10178b9:	49 89 cb 	mov	r11, rcx
 10178bc:	89 f1 	mov	ecx, esi
 10178be:	41 89 fc 	mov	r12d, edi
 10178c1:	d3 ef 	shr	edi, cl
 10178c3:	49 83 fb 08 	cmp	r11, 8
 10178c7:	74 0a 	je	10 <_runtime.scanobject+0x1f3>
 10178c9:	0f ba e7 04 	bt	edi, 4
 10178cd:	0f 83 c2 00 00 00 	jae	194 <_runtime.scanobject+0x2b5>
 10178d3:	41 0f a3 cc 	bt	r12d, ecx
 10178d7:	73 b8 	jae	-72 <_runtime.scanobject+0x1b1>
 10178d9:	4b 8d 3c 0b 	lea	rdi, [r11 + r9]
 10178dd:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10178e0:	48 85 ff 	test	rdi, rdi
 10178e3:	74 ac 	je	-84 <_runtime.scanobject+0x1b1>
 10178e5:	49 89 fc 	mov	r12, rdi
 10178e8:	4c 29 cf 	sub	rdi, r9
 10178eb:	48 39 d7 	cmp	rdi, rdx
 10178ee:	72 a1 	jb	-95 <_runtime.scanobject+0x1b1>
 10178f0:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 10178f5:	4c 89 44 24 70 	mov	qword ptr [rsp + 112], r8
 10178fa:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 10178fe:	89 4c 24 3c 	mov	dword ptr [rsp + 60], ecx
 1017902:	4c 89 24 24 	mov	qword ptr [rsp], r12
 1017906:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 101790b:	4c 89 5c 24 10 	mov	qword ptr [rsp + 16], r11
 1017910:	e8 fb 5f ff ff 	call	-40965 <_runtime.findObject>
 1017915:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101791a:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101791f:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1017924:	48 85 c0 	test	rax, rax
 1017927:	75 33 	jne	51 <_runtime.scanobject+0x27c>
 1017929:	8b 44 24 38 	mov	eax, dword ptr [rsp + 56]
 101792d:	8b 4c 24 3c 	mov	ecx, dword ptr [rsp + 60]
 1017931:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1017936:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 101793b:	89 ce 	mov	esi, ecx
 101793d:	4c 8b 44 24 70 	mov	r8, qword ptr [rsp + 112]
 1017942:	4c 8b 8c 24 90 00 00 00 	mov	r9, qword ptr [rsp + 144]
 101794a:	4c 8b 94 24 98 00 00 00 	mov	r10, qword ptr [rsp + 152]
 1017952:	4c 8b 5c 24 50 	mov	r11, qword ptr [rsp + 80]
 1017957:	e9 35 ff ff ff 	jmp	-203 <_runtime.scanobject+0x1b1>
 101795c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017960:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1017968:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101796d:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1017972:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1017977:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101797c:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 1017984:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1017989:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 101798e:	e8 dd 03 00 00 	call	989 <_runtime.greyobject>
 1017993:	eb 94 	jmp	-108 <_runtime.scanobject+0x249>
 1017995:	49 01 52 10 	add	qword ptr [r10 + 16], rdx
 1017999:	4d 01 5a 18 	add	qword ptr [r10 + 24], r11
 101799d:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 10179a5:	48 81 c4 88 00 00 00 	add	rsp, 136
 10179ac:	c3 	ret
 10179ad:	4c 39 c3 	cmp	rbx, r8
 10179b0:	74 0a 	je	10 <_runtime.scanobject+0x2dc>
 10179b2:	48 ff c3 	inc	rbx
 10179b5:	31 f6 	xor	esi, esi
 10179b7:	e9 fa fe ff ff 	jmp	-262 <_runtime.scanobject+0x1d6>
 10179bc:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10179c0:	89 74 24 08 	mov	dword ptr [rsp + 8], esi
 10179c4:	89 44 24 0c 	mov	dword ptr [rsp + 12], eax
 10179c8:	4c 89 44 24 10 	mov	qword ptr [rsp + 16], r8
 10179cd:	e8 0e 61 ff ff 	call	-40690 <_runtime.heapBits.nextArena>
 10179d2:	4c 8b 44 24 28 	mov	r8, qword ptr [rsp + 40]
 10179d7:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 10179db:	8b 74 24 20 	mov	esi, dword ptr [rsp + 32]
 10179df:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 10179e4:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10179e9:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 10179ee:	4c 8b 8c 24 90 00 00 00 	mov	r9, qword ptr [rsp + 144]
 10179f6:	4c 8b 94 24 98 00 00 00 	mov	r10, qword ptr [rsp + 152]
 10179fe:	e9 b3 fe ff ff 	jmp	-333 <_runtime.scanobject+0x1d6>
 1017a03:	49 89 cb 	mov	r11, rcx
 1017a06:	eb 8d 	jmp	-115 <_runtime.scanobject+0x2b5>
 1017a08:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1017a10:	48 01 50 10 	add	qword ptr [rax + 16], rdx
 1017a14:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1017a1c:	48 81 c4 88 00 00 00 	add	rsp, 136
 1017a23:	c3 	ret
 1017a24:	4c 8b 94 24 98 00 00 00 	mov	r10, qword ptr [rsp + 152]
 1017a2c:	e9 3c fe ff ff 	jmp	-452 <_runtime.scanobject+0x18d>
 1017a31:	4c 8b 94 24 98 00 00 00 	mov	r10, qword ptr [rsp + 152]
 1017a39:	e9 4a fe ff ff 	jmp	-438 <_runtime.scanobject+0x1a8>
 1017a3e:	48 89 df 	mov	rdi, rbx
 1017a41:	45 31 c0 	xor	r8d, r8d
 1017a44:	31 c0 	xor	eax, eax
 1017a46:	31 f6 	xor	esi, esi
 1017a48:	31 db 	xor	ebx, ebx
 1017a4a:	e9 20 fd ff ff 	jmp	-736 <_runtime.scanobject+0x8f>
 1017a4f:	4c 89 e0 	mov	rax, r12
 1017a52:	b9 fd 00 00 00 	mov	ecx, 253
 1017a57:	e8 f4 b8 03 00 	call	243956 <_runtime.panicIndex>
 1017a5c:	48 8d 05 66 c3 05 00 	lea	rax, [rip + 377702]
 1017a63:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017a67:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1017a70:	e8 eb 12 01 00 	call	70379 <_runtime.throw>
 1017a75:	b9 00 00 40 00 	mov	ecx, 4194304
 1017a7a:	e8 e1 b8 03 00 	call	243937 <_runtime.panicIndexU>
 1017a7f:	90 	nop
 1017a80:	e8 4b 91 03 00 	call	233803 <_runtime.morestack_noctxt>
 1017a85:	e9 56 fc ff ff 	jmp	-938 <_runtime.scanobject>
 1017a8a:	cc 	int3
 1017a8b:	cc 	int3
 1017a8c:	cc 	int3
 1017a8d:	cc 	int3
 1017a8e:	cc 	int3
 1017a8f:	cc 	int3

_runtime.scanConservative:
 1017a90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1017a99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1017a9d:	0f 86 1f 02 00 00 	jbe	543 <_runtime.scanConservative+0x232>
 1017aa3:	48 83 ec 48 	sub	rsp, 72
 1017aa7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1017aac:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1017ab1:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1017ab6:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1017abb:	31 c9 	xor	ecx, ecx
 1017abd:	eb 04 	jmp	4 <_runtime.scanConservative+0x33>
 1017abf:	48 8d 4b 08 	lea	rcx, [rbx + 8]
 1017ac3:	48 39 c1 	cmp	rcx, rax
 1017ac6:	0f 83 d2 01 00 00 	jae	466 <_runtime.scanConservative+0x20e>
 1017acc:	48 85 d2 	test	rdx, rdx
 1017acf:	0f 84 c1 01 00 00 	je	449 <_runtime.scanConservative+0x206>
 1017ad5:	48 89 cb 	mov	rbx, rcx
 1017ad8:	48 c1 e9 06 	shr	rcx, 6
 1017adc:	0f b6 34 0a 	movzx	esi, byte ptr [rdx + rcx]
 1017ae0:	40 84 f6 	test	sil, sil
 1017ae3:	75 13 	jne	19 <_runtime.scanConservative+0x68>
 1017ae5:	48 f7 c3 3f 00 00 00 	test	rbx, 63
 1017aec:	0f 85 b6 01 00 00 	jne	438 <_runtime.scanConservative+0x218>
 1017af2:	48 83 c3 38 	add	rbx, 56
 1017af6:	eb c7 	jmp	-57 <_runtime.scanConservative+0x2f>
 1017af8:	48 89 d9 	mov	rcx, rbx
 1017afb:	48 c1 e9 03 	shr	rcx, 3
 1017aff:	48 83 e1 07 	and	rcx, 7
 1017b03:	40 d2 ee 	shr	sil, cl
 1017b06:	40 f6 c6 01 	test	sil, 1
 1017b0a:	74 b3 	je	-77 <_runtime.scanConservative+0x2f>
 1017b0c:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 1017b11:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1017b16:	48 8d 34 0b 	lea	rsi, [rbx + rcx]
 1017b1a:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1017b1d:	48 8b 7c 24 70 	mov	rdi, qword ptr [rsp + 112]
 1017b22:	48 85 ff 	test	rdi, rdi
 1017b25:	74 16 	je	22 <_runtime.scanConservative+0xad>
 1017b27:	48 39 b7 00 01 00 00 	cmp	qword ptr [rdi + 256], rsi
 1017b2e:	77 0d 	ja	13 <_runtime.scanConservative+0xad>
 1017b30:	48 39 b7 08 01 00 00 	cmp	qword ptr [rdi + 264], rsi
 1017b37:	0f 87 32 01 00 00 	ja	306 <_runtime.scanConservative+0x1df>
 1017b3d:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 1017b42:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1017b46:	e8 85 51 00 00 	call	20869 <_runtime.spanOfHeap>
 1017b4b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1017b50:	48 85 c0 	test	rax, rax
 1017b53:	0f 84 02 01 00 00 	je	258 <_runtime.scanConservative+0x1cb>
 1017b59:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 1017b5d:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1017b62:	48 29 d3 	sub	rbx, rdx
 1017b65:	48 85 db 	test	rbx, rbx
 1017b68:	0f 85 98 00 00 00 	jne	152 <_runtime.scanConservative+0x176>
 1017b6e:	31 c9 	xor	ecx, ecx
 1017b70:	48 39 48 30 	cmp	qword ptr [rax + 48], rcx
 1017b74:	0f 87 87 00 00 00 	ja	135 <_runtime.scanConservative+0x171>
 1017b7a:	90 	nop
 1017b7b:	48 89 cb 	mov	rbx, rcx
 1017b7e:	48 c1 e9 03 	shr	rcx, 3
 1017b82:	48 03 48 48 	add	rcx, qword ptr [rax + 72]
 1017b86:	0f b6 31 	movzx	esi, byte ptr [rcx]
 1017b89:	48 89 d9 	mov	rcx, rbx
 1017b8c:	48 83 e1 07 	and	rcx, 7
 1017b90:	bf 01 00 00 00 	mov	edi, 1
 1017b95:	d3 e7 	shl	edi, cl
 1017b97:	90 	nop
 1017b98:	40 84 fe 	test	sil, dil
 1017b9b:	75 14 	jne	20 <_runtime.scanConservative+0x121>
 1017b9d:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1017ba2:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1017ba7:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1017bac:	e9 0e ff ff ff 	jmp	-242 <_runtime.scanConservative+0x2f>
 1017bb1:	48 8b 48 68 	mov	rcx, qword ptr [rax + 104]
 1017bb5:	48 0f af cb 	imul	rcx, rbx
 1017bb9:	48 01 d1 	add	rcx, rdx
 1017bbc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1017bc0:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1017bc5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1017bca:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1017bcf:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1017bd4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1017bd9:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1017bde:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1017be3:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1017be8:	e8 83 01 00 00 	call	387 <_runtime.greyobject>
 1017bed:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1017bf2:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1017bf7:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1017bfc:	e9 be fe ff ff 	jmp	-322 <_runtime.scanConservative+0x2f>
 1017c01:	48 89 cb 	mov	rbx, rcx
 1017c04:	eb ab 	jmp	-85 <_runtime.scanConservative+0x121>
 1017c06:	66 83 78 5e 00 	cmp	word ptr [rax + 94], 0
 1017c0b:	74 18 	je	24 <_runtime.scanConservative+0x195>
 1017c0d:	0f b6 48 65 	movzx	ecx, byte ptr [rax + 101]
 1017c11:	80 f9 40 	cmp	cl, 64
 1017c14:	48 19 f6 	sbb	rsi, rsi
 1017c17:	48 d3 eb 	shr	rbx, cl
 1017c1a:	48 21 f3 	and	rbx, rsi
 1017c1d:	48 89 d9 	mov	rcx, rbx
 1017c20:	e9 4b ff ff ff 	jmp	-181 <_runtime.scanConservative+0xe0>
 1017c25:	0f b6 48 65 	movzx	ecx, byte ptr [rax + 101]
 1017c29:	80 f9 40 	cmp	cl, 64
 1017c2c:	48 19 f6 	sbb	rsi, rsi
 1017c2f:	0f b6 78 66 	movzx	edi, byte ptr [rax + 102]
 1017c33:	40 80 ff 40 	cmp	dil, 64
 1017c37:	4d 19 c0 	sbb	r8, r8
 1017c3a:	48 d3 eb 	shr	rbx, cl
 1017c3d:	48 21 f3 	and	rbx, rsi
 1017c40:	0f b7 48 5c 	movzx	ecx, word ptr [rax + 92]
 1017c44:	48 0f af cb 	imul	rcx, rbx
 1017c48:	48 89 cb 	mov	rbx, rcx
 1017c4b:	89 f9 	mov	ecx, edi
 1017c4d:	48 d3 eb 	shr	rbx, cl
 1017c50:	4c 21 c3 	and	rbx, r8
 1017c53:	48 89 d9 	mov	rcx, rbx
 1017c56:	e9 15 ff ff ff 	jmp	-235 <_runtime.scanConservative+0xe0>
 1017c5b:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1017c60:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1017c65:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1017c6a:	e9 50 fe ff ff 	jmp	-432 <_runtime.scanConservative+0x2f>
 1017c6f:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1017c73:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1017c78:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 1017c7d:	e8 6e 27 00 00 	call	10094 <_runtime.(*stackScanState).putPtr>
 1017c82:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1017c87:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1017c8c:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1017c91:	e9 29 fe ff ff 	jmp	-471 <_runtime.scanConservative+0x2f>
 1017c96:	48 89 cb 	mov	rbx, rcx
 1017c99:	e9 6e fe ff ff 	jmp	-402 <_runtime.scanConservative+0x7c>
 1017c9e:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1017ca3:	48 83 c4 48 	add	rsp, 72
 1017ca7:	c3 	ret
 1017ca8:	48 8d 05 cf bc 05 00 	lea	rax, [rip + 376015]
 1017caf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017cb3:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1017cbc:	e8 9f 10 01 00 	call	69791 <_runtime.throw>
 1017cc1:	90 	nop
 1017cc2:	e8 09 8f 03 00 	call	233225 <_runtime.morestack_noctxt>
 1017cc7:	e9 c4 fd ff ff 	jmp	-572 <_runtime.scanConservative>
 1017ccc:	cc 	int3
 1017ccd:	cc 	int3
 1017cce:	cc 	int3
 1017ccf:	cc 	int3

_runtime.shade:
 1017cd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1017cd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1017cdd:	0f 86 81 00 00 00 	jbe	129 <_runtime.shade+0x94>
 1017ce3:	48 83 ec 38 	sub	rsp, 56
 1017ce7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1017cec:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1017cf1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1017cf6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017cfa:	0f 57 c0 	xorps	xmm0, xmm0
 1017cfd:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1017d02:	e8 09 5c ff ff 	call	-41975 <_runtime.findObject>
 1017d07:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1017d0c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1017d11:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1017d16:	48 85 c0 	test	rax, rax
 1017d19:	75 0a 	jne	10 <_runtime.shade+0x55>
 1017d1b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1017d20:	48 83 c4 38 	add	rsp, 56
 1017d24:	c3 	ret
 1017d25:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1017d2e:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1017d32:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 1017d39:	84 03 	test	byte ptr [rbx], al
 1017d3b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1017d3f:	0f 57 c0 	xorps	xmm0, xmm0
 1017d42:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1017d47:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1017d4c:	48 8d 83 98 16 00 00 	lea	rax, [rbx + 5784]
 1017d53:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1017d58:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1017d5d:	e8 0e 00 00 00 	call	14 <_runtime.greyobject>
 1017d62:	eb b7 	jmp	-73 <_runtime.shade+0x4b>
 1017d64:	e8 67 8e 03 00 	call	233063 <_runtime.morestack_noctxt>
 1017d69:	e9 62 ff ff ff 	jmp	-158 <_runtime.shade>
 1017d6e:	cc 	int3
 1017d6f:	cc 	int3

_runtime.greyobject:
 1017d70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1017d79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1017d7d:	0f 86 7a 05 00 00 	jbe	1402 <_runtime.greyobject+0x58d>
 1017d83:	48 83 ec 28 	sub	rsp, 40
 1017d87:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1017d8c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1017d91:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1017d96:	48 f7 c2 07 00 00 00 	test	rdx, 7
 1017d9d:	0f 85 40 05 00 00 	jne	1344 <_runtime.greyobject+0x573>
 1017da3:	90 	nop
 1017da4:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1017da9:	48 8b 73 50 	mov	rsi, qword ptr [rbx + 80]
 1017dad:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1017db2:	48 89 cf 	mov	rdi, rcx
 1017db5:	48 c1 e9 03 	shr	rcx, 3
 1017db9:	49 89 f8 	mov	r8, rdi
 1017dbc:	48 83 e7 07 	and	rdi, 7
 1017dc0:	48 89 c8 	mov	rax, rcx
 1017dc3:	48 89 f9 	mov	rcx, rdi
 1017dc6:	41 b9 01 00 00 00 	mov	r9d, 1
 1017dcc:	41 d3 e1 	shl	r9d, cl
 1017dcf:	90 	nop
 1017dd0:	48 8d 3c 06 	lea	rdi, [rsi + rax]
 1017dd4:	80 3d 97 f9 0d 00 00 	cmp	byte ptr [rip + 915863], 0
 1017ddb:	0f 84 98 01 00 00 	je	408 <_runtime.greyobject+0x209>
 1017de1:	0f b6 34 30 	movzx	esi, byte ptr [rax + rsi]
 1017de5:	44 84 ce 	test	sil, r9b
 1017de8:	0f 84 c3 03 00 00 	je	963 <_runtime.greyobject+0x441>
 1017dee:	48 8b 35 db d5 0d 00 	mov	rsi, qword ptr [rip + 906715]
 1017df5:	84 06 	test	byte ptr [rsi], al
 1017df7:	90 	nop
 1017df8:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 1017e02:	48 8d 04 17 	lea	rax, [rdi + rdx]
 1017e06:	48 c1 e8 1a 	shr	rax, 26
 1017e0a:	48 3d 00 00 40 00 	cmp	rax, 4194304
 1017e10:	0f 83 91 03 00 00 	jae	913 <_runtime.greyobject+0x437>
 1017e16:	48 8b 34 c6 	mov	rsi, qword ptr [rsi + 8*rax]
 1017e1a:	48 85 f6 	test	rsi, rsi
 1017e1d:	0f 84 4a 01 00 00 	je	330 <_runtime.greyobject+0x1fd>
 1017e23:	48 89 d7 	mov	rdi, rdx
 1017e26:	48 c1 ea 05 	shr	rdx, 5
 1017e2a:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 1017e31:	48 01 f2 	add	rdx, rsi
 1017e34:	48 89 fe 	mov	rsi, rdi
 1017e37:	48 c1 ef 03 	shr	rdi, 3
 1017e3b:	48 83 e7 03 	and	rdi, 3
 1017e3f:	4c 8b 43 68 	mov	r8, qword ptr [rbx + 104]
 1017e43:	49 83 f8 08 	cmp	r8, 8
 1017e47:	0f 85 fe 00 00 00 	jne	254 <_runtime.greyobject+0x1db>
 1017e4d:	83 ff 08 	cmp	edi, 8
 1017e50:	45 19 c9 	sbb	r9d, r9d
 1017e53:	44 0f b6 12 	movzx	r10d, byte ptr [rdx]
 1017e57:	89 f9 	mov	ecx, edi
 1017e59:	41 d2 ea 	shr	r10b, cl
 1017e5c:	45 21 ca 	and	r10d, r9d
 1017e5f:	41 f6 c2 01 	test	r10b, 1
 1017e63:	41 0f 95 c1 	setne	r9b
 1017e67:	45 84 c9 	test	r9b, r9b
 1017e6a:	0f 85 d1 00 00 00 	jne	209 <_runtime.greyobject+0x1d1>
 1017e70:	49 83 f8 08 	cmp	r8, 8
 1017e74:	0f 85 a2 00 00 00 	jne	162 <_runtime.greyobject+0x1ac>
 1017e7a:	83 f9 20 	cmp	ecx, 32
 1017e7d:	45 19 c0 	sbb	r8d, r8d
 1017e80:	41 b9 01 00 00 00 	mov	r9d, 1
 1017e86:	41 d3 e1 	shl	r9d, cl
 1017e89:	45 21 c1 	and	r9d, r8d
 1017e8c:	f0 	lock
 1017e8d:	44 08 0a 	or	byte ptr [rdx], r9b
 1017e90:	48 83 7b 68 08 	cmp	qword ptr [rbx + 104], 8
 1017e95:	75 6d 	jne	109 <_runtime.greyobject+0x194>
 1017e97:	83 f9 08 	cmp	ecx, 8
 1017e9a:	19 db 	sbb	ebx, ebx
 1017e9c:	0f b6 12 	movzx	edx, byte ptr [rdx]
 1017e9f:	d2 ea 	shr	dl, cl
 1017ea1:	21 da 	and	edx, ebx
 1017ea3:	f6 c2 01 	test	dl, 1
 1017ea6:	0f 95 c2 	setne	dl
 1017ea9:	84 d2 	test	dl, dl
 1017eab:	0f 84 dd 02 00 00 	je	733 <_runtime.greyobject+0x41e>
 1017eb1:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1017eb6:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1017eb9:	48 85 db 	test	rbx, rbx
 1017ebc:	74 42 	je	66 <_runtime.greyobject+0x190>
 1017ebe:	48 8b 43 10 	mov	rax, qword ptr [rbx + 16]
 1017ec2:	48 3d fd 00 00 00 	cmp	rax, 253
 1017ec8:	75 20 	jne	32 <_runtime.greyobject+0x17a>
 1017eca:	31 c0 	xor	eax, eax
 1017ecc:	84 c0 	test	al, al
 1017ece:	74 0a 	je	10 <_runtime.greyobject+0x16a>
 1017ed0:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1017ed5:	48 83 c4 28 	add	rsp, 40
 1017ed9:	c3 	ret
 1017eda:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1017ede:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1017ee3:	e8 68 3f 00 00 	call	16232 <_runtime.(*gcWork).put>
 1017ee8:	eb e6 	jmp	-26 <_runtime.greyobject+0x160>
 1017eea:	0f 83 6c 01 00 00 	jae	364 <_runtime.greyobject+0x2ec>
 1017ef0:	48 89 74 c3 18 	mov	qword ptr [rbx + 8*rax + 24], rsi
 1017ef5:	48 ff 43 10 	inc	qword ptr [rbx + 16]
 1017ef9:	b8 01 00 00 00 	mov	eax, 1
 1017efe:	eb cc 	jmp	-52 <_runtime.greyobject+0x15c>
 1017f00:	31 c0 	xor	eax, eax
 1017f02:	eb c8 	jmp	-56 <_runtime.greyobject+0x15c>
 1017f04:	ff c1 	inc	ecx
 1017f06:	83 f9 08 	cmp	ecx, 8
 1017f09:	19 db 	sbb	ebx, ebx
 1017f0b:	0f b6 3a 	movzx	edi, byte ptr [rdx]
 1017f0e:	40 d2 ef 	shr	dil, cl
 1017f11:	21 df 	and	edi, ebx
 1017f13:	40 f6 c7 10 	test	dil, 16
 1017f17:	0f 95 c2 	setne	dl
 1017f1a:	eb 8d 	jmp	-115 <_runtime.greyobject+0x139>
 1017f1c:	44 8d 41 01 	lea	r8d, [rcx + 1]
 1017f20:	41 83 f8 20 	cmp	r8d, 32
 1017f24:	45 19 c9 	sbb	r9d, r9d
 1017f27:	44 89 c1 	mov	ecx, r8d
 1017f2a:	41 ba 10 00 00 00 	mov	r10d, 16
 1017f30:	41 d3 e2 	shl	r10d, cl
 1017f33:	45 21 ca 	and	r10d, r9d
 1017f36:	f0 	lock
 1017f37:	44 08 12 	or	byte ptr [rdx], r10b
 1017f3a:	89 f9 	mov	ecx, edi
 1017f3c:	e9 4f ff ff ff 	jmp	-177 <_runtime.greyobject+0x120>
 1017f41:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1017f46:	48 83 c4 28 	add	rsp, 40
 1017f4a:	c3 	ret
 1017f4b:	8d 4f 01 	lea	ecx, [rdi + 1]
 1017f4e:	83 f9 08 	cmp	ecx, 8
 1017f51:	45 19 d2 	sbb	r10d, r10d
 1017f54:	44 0f b6 1a 	movzx	r11d, byte ptr [rdx]
 1017f58:	41 d2 eb 	shr	r11b, cl
 1017f5b:	45 21 d3 	and	r11d, r10d
 1017f5e:	41 f6 c3 10 	test	r11b, 16
 1017f62:	41 0f 95 c1 	setne	r9b
 1017f66:	89 f9 	mov	ecx, edi
 1017f68:	e9 fa fe ff ff 	jmp	-262 <_runtime.greyobject+0xf7>
 1017f6d:	48 89 d6 	mov	rsi, rdx
 1017f70:	31 d2 	xor	edx, edx
 1017f72:	31 ff 	xor	edi, edi
 1017f74:	e9 c6 fe ff ff 	jmp	-314 <_runtime.greyobject+0xcf>
 1017f79:	83 3d d0 fa 0d 00 00 	cmp	dword ptr [rip + 916176], 0
 1017f80:	7e 0a 	jle	10 <_runtime.greyobject+0x21c>
 1017f82:	4c 39 43 30 	cmp	qword ptr [rbx + 48], r8
 1017f86:	0f 86 bc 00 00 00 	jbe	188 <_runtime.greyobject+0x2d8>
 1017f8c:	0f b6 34 30 	movzx	esi, byte ptr [rax + rsi]
 1017f90:	44 84 ce 	test	sil, r9b
 1017f93:	0f 85 a5 00 00 00 	jne	165 <_runtime.greyobject+0x2ce>
 1017f99:	90 	nop
 1017f9a:	f0 	lock
 1017f9b:	44 08 0f 	or	byte ptr [rdi], r9b
 1017f9e:	48 8b 35 2b d4 0d 00 	mov	rsi, qword ptr [rip + 906283]
 1017fa5:	84 06 	test	byte ptr [rsi], al
 1017fa7:	90 	nop
 1017fa8:	90 	nop
 1017fa9:	48 8b 4b 18 	mov	rcx, qword ptr [rbx + 24]
 1017fad:	90 	nop
 1017fae:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 1017fb8:	48 8d 04 39 	lea	rax, [rcx + rdi]
 1017fbc:	48 c1 e8 1a 	shr	rax, 26
 1017fc0:	48 3d 00 00 40 00 	cmp	rax, 4194304
 1017fc6:	0f 83 9a 00 00 00 	jae	154 <_runtime.greyobject+0x2f6>
 1017fcc:	48 8b 34 c6 	mov	rsi, qword ptr [rsi + 8*rax]
 1017fd0:	84 06 	test	byte ptr [rsi], al
 1017fd2:	48 89 cf 	mov	rdi, rcx
 1017fd5:	48 c1 e9 10 	shr	rcx, 16
 1017fd9:	48 81 e1 ff 03 00 00 	and	rcx, 1023
 1017fe0:	44 0f b6 84 0e 00 04 21 00 	movzx	r8d, byte ptr [rsi + rcx + 2163712]
 1017fe9:	48 8d 34 0e 	lea	rsi, [rsi + rcx]
 1017fed:	48 8d b6 00 04 21 00 	lea	rsi, [rsi + 2163712]
 1017ff4:	48 c1 ef 0d 	shr	rdi, 13
 1017ff8:	48 83 e7 07 	and	rdi, 7
 1017ffc:	48 89 f9 	mov	rcx, rdi
 1017fff:	41 b9 01 00 00 00 	mov	r9d, 1
 1018005:	41 d3 e1 	shl	r9d, cl
 1018008:	45 84 c1 	test	r9b, r8b
 101800b:	75 04 	jne	4 <_runtime.greyobject+0x2a1>
 101800d:	f0 	lock
 101800e:	44 08 0e 	or	byte ptr [rsi], r9b
 1018011:	0f b6 73 62 	movzx	esi, byte ptr [rbx + 98]
 1018015:	40 f6 c6 01 	test	sil, 1
 1018019:	75 08 	jne	8 <_runtime.greyobject+0x2b3>
 101801b:	48 89 d6 	mov	rsi, rdx
 101801e:	e9 8e fe ff ff 	jmp	-370 <_runtime.greyobject+0x141>
 1018023:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1018028:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 101802c:	48 03 4b 68 	add	rcx, qword ptr [rbx + 104]
 1018030:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1018034:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1018039:	48 83 c4 28 	add	rsp, 40
 101803d:	c3 	ret
 101803e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1018043:	48 83 c4 28 	add	rsp, 40
 1018047:	c3 	ret
 1018048:	4c 8b 43 48 	mov	r8, qword ptr [rbx + 72]
 101804c:	45 0f b6 04 00 	movzx	r8d, byte ptr [r8 + rax]
 1018051:	45 84 c1 	test	r9b, r8b
 1018054:	0f 85 32 ff ff ff 	jne	-206 <_runtime.greyobject+0x21c>
 101805a:	eb 14 	jmp	20 <_runtime.greyobject+0x300>
 101805c:	b9 fd 00 00 00 	mov	ecx, 253
 1018061:	e8 ea b2 03 00 	call	242410 <_runtime.panicIndex>
 1018066:	b9 00 00 40 00 	mov	ecx, 4194304
 101806b:	e8 f0 b2 03 00 	call	242416 <_runtime.panicIndexU>
 1018070:	e8 2b 24 01 00 	call	74795 <_runtime.printlock>
 1018075:	48 8d 05 16 d5 05 00 	lea	rax, [rip + 382230]
 101807c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018080:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1018089:	e8 52 2d 01 00 	call	77138 <_runtime.printstring>
 101808e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1018093:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018097:	e8 f4 2b 01 00 	call	76788 <_runtime.printhex>
 101809c:	48 8d 05 ec b3 05 00 	lea	rax, [rip + 373740]
 10180a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10180a7:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 10180b0:	e8 2b 2d 01 00 	call	77099 <_runtime.printstring>
 10180b5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10180ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 10180be:	e8 cd 2b 01 00 	call	76749 <_runtime.printhex>
 10180c3:	48 8d 05 91 ab 05 00 	lea	rax, [rip + 371601]
 10180ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 10180ce:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10180d7:	e8 04 2d 01 00 	call	77060 <_runtime.printstring>
 10180dc:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10180e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10180e5:	e8 a6 2b 01 00 	call	76710 <_runtime.printhex>
 10180ea:	48 8d 05 81 ab 05 00 	lea	rax, [rip + 371585]
 10180f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10180f5:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10180fe:	e8 dd 2c 01 00 	call	77021 <_runtime.printstring>
 1018103:	e8 18 24 01 00 	call	74776 <_runtime.printunlock>
 1018108:	48 8d 05 10 ac 05 00 	lea	rax, [rip + 371728]
 101810f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018113:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 101811c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1018121:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1018126:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101812b:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1018130:	e8 db 01 00 00 	call	475 <_runtime.gcDumpObject>
 1018135:	48 8d 05 8d ab 05 00 	lea	rax, [rip + 371597]
 101813c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018140:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1018149:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101814e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1018153:	48 c7 44 24 18 ff ff ff ff 	mov	qword ptr [rsp + 24], -1
 101815c:	e8 af 01 00 00 	call	431 <_runtime.gcDumpObject>
 1018161:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101816a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 101816e:	c6 80 29 01 00 00 02 	mov	byte ptr [rax + 297], 2
 1018175:	48 8d 05 49 be 05 00 	lea	rax, [rip + 376393]
 101817c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018180:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1018189:	e8 d2 0b 01 00 	call	68562 <_runtime.throw>
 101818e:	48 8d 05 c3 e7 05 00 	lea	rax, [rip + 387011]
 1018195:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018199:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 10181a2:	e8 b9 0b 01 00 	call	68537 <_runtime.throw>
 10181a7:	b9 00 00 40 00 	mov	ecx, 4194304
 10181ac:	e8 af b1 03 00 	call	242095 <_runtime.panicIndexU>
 10181b1:	e8 ea 22 01 00 	call	74474 <_runtime.printlock>
 10181b6:	e8 e5 22 01 00 	call	74469 <_runtime.printlock>
 10181bb:	48 8d 05 fa f3 05 00 	lea	rax, [rip + 390138]
 10181c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10181c6:	48 c7 44 24 08 44 00 00 00 	mov	qword ptr [rsp + 8], 68
 10181cf:	e8 0c 2c 01 00 	call	76812 <_runtime.printstring>
 10181d4:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10181d9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10181dd:	e8 ae 2a 01 00 	call	76462 <_runtime.printhex>
 10181e2:	e8 49 25 01 00 	call	75081 <_runtime.printnl>
 10181e7:	e8 34 23 01 00 	call	74548 <_runtime.printunlock>
 10181ec:	e8 af 22 01 00 	call	74415 <_runtime.printlock>
 10181f1:	48 8d 05 5d c9 05 00 	lea	rax, [rip + 379229]
 10181f8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10181fc:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1018205:	e8 d6 2b 01 00 	call	76758 <_runtime.printstring>
 101820a:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101820f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018213:	e8 78 2a 01 00 	call	76408 <_runtime.printhex>
 1018218:	48 8d 05 3c aa 05 00 	lea	rax, [rip + 371260]
 101821f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018223:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 101822c:	e8 af 2b 01 00 	call	76719 <_runtime.printstring>
 1018231:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1018236:	48 89 04 24 	mov	qword ptr [rsp], rax
 101823a:	e8 51 2a 01 00 	call	76369 <_runtime.printhex>
 101823f:	48 8d 05 2c aa 05 00 	lea	rax, [rip + 371244]
 1018246:	48 89 04 24 	mov	qword ptr [rsp], rax
 101824a:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1018253:	e8 88 2b 01 00 	call	76680 <_runtime.printstring>
 1018258:	e8 c3 22 01 00 	call	74435 <_runtime.printunlock>
 101825d:	48 8d 05 bb aa 05 00 	lea	rax, [rip + 371387]
 1018264:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018268:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1018271:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1018276:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101827b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1018280:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1018285:	e8 86 00 00 00 	call	134 <_runtime.gcDumpObject>
 101828a:	48 8d 05 38 aa 05 00 	lea	rax, [rip + 371256]
 1018291:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018295:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 101829e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10182a3:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10182a8:	48 c7 44 24 18 ff ff ff ff 	mov	qword ptr [rsp + 24], -1
 10182b1:	e8 5a 00 00 00 	call	90 <_runtime.gcDumpObject>
 10182b6:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10182bf:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10182c3:	c6 80 29 01 00 00 02 	mov	byte ptr [rax + 297], 2
 10182ca:	48 8d 05 d8 d6 05 00 	lea	rax, [rip + 382680]
 10182d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10182d5:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 10182de:	e8 7d 0a 01 00 	call	68221 <_runtime.throw>
 10182e3:	48 8d 05 e5 de 05 00 	lea	rax, [rip + 384741]
 10182ea:	48 89 04 24 	mov	qword ptr [rsp], rax
 10182ee:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 10182f7:	e8 64 0a 01 00 	call	68196 <_runtime.throw>
 10182fc:	90 	nop
 10182fd:	e8 ce 88 03 00 	call	231630 <_runtime.morestack_noctxt>
 1018302:	e9 69 fa ff ff 	jmp	-1431 <_runtime.greyobject>
 1018307:	cc 	int3
 1018308:	cc 	int3
 1018309:	cc 	int3
 101830a:	cc 	int3
 101830b:	cc 	int3
 101830c:	cc 	int3
 101830d:	cc 	int3
 101830e:	cc 	int3
 101830f:	cc 	int3

_runtime.gcDumpObject:
 1018310:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018319:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101831d:	0f 86 69 04 00 00 	jbe	1129 <_runtime.gcDumpObject+0x47c>
 1018323:	48 83 ec 68 	sub	rsp, 104
 1018327:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 101832c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1018331:	90 	nop
 1018332:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101833a:	48 b9 00 00 00 00 00 80 00 00 	movabs	rcx, 140737488355328
 1018344:	48 01 c1 	add	rcx, rax
 1018347:	48 c1 e9 1a 	shr	rcx, 26
 101834b:	48 81 f9 00 00 40 00 	cmp	rcx, 4194304
 1018352:	0f 82 04 04 00 00 	jb	1028 <_runtime.gcDumpObject+0x44c>
 1018358:	31 c9 	xor	ecx, ecx
 101835a:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 101835f:	e8 3c 21 01 00 	call	74044 <_runtime.printlock>
 1018364:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1018369:	48 89 04 24 	mov	qword ptr [rsp], rax
 101836d:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1018372:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1018377:	e8 64 2a 01 00 	call	76388 <_runtime.printstring>
 101837c:	48 8d 05 df a8 05 00 	lea	rax, [rip + 370911]
 1018383:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018387:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1018390:	e8 4b 2a 01 00 	call	76363 <_runtime.printstring>
 1018395:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101839d:	48 89 04 24 	mov	qword ptr [rsp], rax
 10183a1:	e8 ea 28 01 00 	call	76010 <_runtime.printhex>
 10183a6:	e8 75 21 01 00 	call	74101 <_runtime.printunlock>
 10183ab:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10183b0:	48 85 c0 	test	rax, rax
 10183b3:	0f 84 76 03 00 00 	je	886 <_runtime.gcDumpObject+0x41f>
 10183b9:	48 8b 48 70 	mov	rcx, qword ptr [rax + 112]
 10183bd:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10183c2:	0f b6 50 62 	movzx	edx, byte ptr [rax + 98]
 10183c6:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 10183cb:	48 8b 58 68 	mov	rbx, qword ptr [rax + 104]
 10183cf:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 10183d4:	48 8b 70 18 	mov	rsi, qword ptr [rax + 24]
 10183d8:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 10183dd:	e8 be 20 01 00 	call	73918 <_runtime.printlock>
 10183e2:	48 8d 05 10 ae 05 00 	lea	rax, [rip + 372240]
 10183e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10183ed:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 10183f6:	e8 e5 29 01 00 	call	76261 <_runtime.printstring>
 10183fb:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1018400:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018404:	e8 87 28 01 00 	call	75911 <_runtime.printhex>
 1018409:	48 8d 05 b9 ac 05 00 	lea	rax, [rip + 371897]
 1018410:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018414:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 101841d:	e8 be 29 01 00 	call	76222 <_runtime.printstring>
 1018422:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1018427:	48 89 04 24 	mov	qword ptr [rsp], rax
 101842b:	e8 60 28 01 00 	call	75872 <_runtime.printhex>
 1018430:	48 8d 05 65 b2 05 00 	lea	rax, [rip + 373349]
 1018437:	48 89 04 24 	mov	qword ptr [rsp], rax
 101843b:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1018444:	e8 97 29 01 00 	call	76183 <_runtime.printstring>
 1018449:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101844e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018452:	e8 c9 26 01 00 	call	75465 <_runtime.printuint>
 1018457:	48 8d 05 91 b0 05 00 	lea	rax, [rip + 372881]
 101845e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018462:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101846b:	e8 70 29 01 00 	call	76144 <_runtime.printstring>
 1018470:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1018475:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018479:	e8 a2 26 01 00 	call	75426 <_runtime.printuint>
 101847e:	48 8d 05 4d ac 05 00 	lea	rax, [rip + 371789]
 1018485:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018489:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1018492:	e8 49 29 01 00 	call	76105 <_runtime.printstring>
 1018497:	e8 84 20 01 00 	call	73860 <_runtime.printunlock>
 101849c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10184a1:	8a 48 63 	mov	cl, byte ptr [rax + 99]
 10184a4:	88 4c 24 17 	mov	byte ptr [rsp + 23], cl
 10184a8:	84 c9 	test	cl, cl
 10184aa:	72 17 	jb	23 <_runtime.gcDumpObject+0x1b3>
 10184ac:	0f b6 d1 	movzx	edx, cl
 10184af:	48 8b 1d 5a 44 0b 00 	mov	rbx, qword ptr [rip + 738394]
 10184b6:	48 39 15 5b 44 0b 00 	cmp	qword ptr [rip + 738395], rdx
 10184bd:	0f 8f 29 02 00 00 	jg	553 <_runtime.gcDumpObject+0x3dc>
 10184c3:	e8 d8 1f 01 00 	call	73688 <_runtime.printlock>
 10184c8:	48 8d 05 98 ab 05 00 	lea	rax, [rip + 371608]
 10184cf:	48 89 04 24 	mov	qword ptr [rsp], rax
 10184d3:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 10184dc:	e8 ff 28 01 00 	call	76031 <_runtime.printstring>
 10184e1:	0f b6 44 24 17 	movzx	eax, byte ptr [rsp + 23]
 10184e6:	0f b6 c0 	movzx	eax, al
 10184e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10184ed:	e8 2e 26 01 00 	call	75310 <_runtime.printuint>
 10184f2:	48 8d 05 79 a7 05 00 	lea	rax, [rip + 370553]
 10184f9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10184fd:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1018506:	e8 d5 28 01 00 	call	75989 <_runtime.printstring>
 101850b:	e8 10 20 01 00 	call	73744 <_runtime.printunlock>
 1018510:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1018515:	48 8b 48 68 	mov	rcx, qword ptr [rax + 104]
 1018519:	8a 40 63 	mov	al, byte ptr [rax + 99]
 101851c:	3c 02 	cmp	al, 2
 101851e:	0f 85 bb 01 00 00 	jne	443 <_runtime.gcDumpObject+0x3cf>
 1018524:	48 85 c9 	test	rcx, rcx
 1018527:	0f 85 b2 01 00 00 	jne	434 <_runtime.gcDumpObject+0x3cf>
 101852d:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1018535:	48 8d 48 08 	lea	rcx, [rax + 8]
 1018539:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101853e:	31 d2 	xor	edx, edx
 1018540:	31 db 	xor	ebx, ebx
 1018542:	eb 04 	jmp	4 <_runtime.gcDumpObject+0x238>
 1018544:	48 83 c2 08 	add	rdx, 8
 1018548:	48 39 ca 	cmp	rdx, rcx
 101854b:	0f 83 5b 01 00 00 	jae	347 <_runtime.gcDumpObject+0x39c>
 1018551:	48 81 fa 00 04 00 00 	cmp	rdx, 1024
 1018558:	72 1c 	jb	28 <_runtime.gcDumpObject+0x266>
 101855a:	48 8d 70 80 	lea	rsi, [rax - 128]
 101855e:	48 39 d6 	cmp	rsi, rdx
 1018561:	73 0c 	jae	12 <_runtime.gcDumpObject+0x25f>
 1018563:	48 8d b0 80 00 00 00 	lea	rsi, [rax + 128]
 101856a:	48 39 f2 	cmp	rdx, rsi
 101856d:	72 07 	jb	7 <_runtime.gcDumpObject+0x266>
 101856f:	bb 01 00 00 00 	mov	ebx, 1
 1018574:	eb ce 	jmp	-50 <_runtime.gcDumpObject+0x234>
 1018576:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 101857b:	84 db 	test	bl, bl
 101857d:	0f 85 fc 00 00 00 	jne	252 <_runtime.gcDumpObject+0x36f>
 1018583:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101858b:	48 8d 0c 02 	lea	rcx, [rdx + rax]
 101858f:	48 8b 09 	mov	rcx, qword ptr [rcx]
 1018592:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1018597:	e8 04 1f 01 00 	call	73476 <_runtime.printlock>
 101859c:	48 8d 05 f0 a6 05 00 	lea	rax, [rip + 370416]
 10185a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10185a7:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 10185b0:	e8 2b 28 01 00 	call	75819 <_runtime.printstring>
 10185b5:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10185ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 10185be:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10185c3:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10185c8:	e8 13 28 01 00 	call	75795 <_runtime.printstring>
 10185cd:	48 8d 05 87 a6 05 00 	lea	rax, [rip + 370311]
 10185d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10185d8:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10185e1:	e8 fa 27 01 00 	call	75770 <_runtime.printstring>
 10185e6:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10185eb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10185ef:	e8 2c 25 01 00 	call	75052 <_runtime.printuint>
 10185f4:	48 8d 05 f8 a6 05 00 	lea	rax, [rip + 370424]
 10185fb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10185ff:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1018608:	e8 d3 27 01 00 	call	75731 <_runtime.printstring>
 101860d:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1018612:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018616:	e8 75 26 01 00 	call	75381 <_runtime.printhex>
 101861b:	e8 00 1f 01 00 	call	73472 <_runtime.printunlock>
 1018620:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1018625:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 101862d:	48 39 c8 	cmp	rax, rcx
 1018630:	74 28 	je	40 <_runtime.gcDumpObject+0x34a>
 1018632:	e8 69 1e 01 00 	call	73321 <_runtime.printlock>
 1018637:	e8 f4 20 01 00 	call	73972 <_runtime.printnl>
 101863c:	e8 df 1e 01 00 	call	73439 <_runtime.printunlock>
 1018641:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1018649:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101864e:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1018653:	31 db 	xor	ebx, ebx
 1018655:	e9 ea fe ff ff 	jmp	-278 <_runtime.gcDumpObject+0x234>
 101865a:	e8 41 1e 01 00 	call	73281 <_runtime.printlock>
 101865f:	48 8d 05 69 a6 05 00 	lea	rax, [rip + 370281]
 1018666:	48 89 04 24 	mov	qword ptr [rsp], rax
 101866a:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1018673:	e8 68 27 01 00 	call	75624 <_runtime.printstring>
 1018678:	e8 a3 1e 01 00 	call	73379 <_runtime.printunlock>
 101867d:	eb b3 	jmp	-77 <_runtime.gcDumpObject+0x322>
 101867f:	e8 1c 1e 01 00 	call	73244 <_runtime.printlock>
 1018684:	48 8d 05 d4 a6 05 00 	lea	rax, [rip + 370388]
 101868b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101868f:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1018698:	e8 43 27 01 00 	call	75587 <_runtime.printstring>
 101869d:	e8 7e 1e 01 00 	call	73342 <_runtime.printunlock>
 10186a2:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 10186a7:	e9 d7 fe ff ff 	jmp	-297 <_runtime.gcDumpObject+0x273>
 10186ac:	84 db 	test	bl, bl
 10186ae:	75 0a 	jne	10 <_runtime.gcDumpObject+0x3aa>
 10186b0:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10186b5:	48 83 c4 68 	add	rsp, 104
 10186b9:	c3 	ret
 10186ba:	e8 e1 1d 01 00 	call	73185 <_runtime.printlock>
 10186bf:	48 8d 05 99 a6 05 00 	lea	rax, [rip + 370329]
 10186c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10186ca:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 10186d3:	e8 08 27 01 00 	call	75528 <_runtime.printstring>
 10186d8:	e8 43 1e 01 00 	call	73283 <_runtime.printunlock>
 10186dd:	eb d1 	jmp	-47 <_runtime.gcDumpObject+0x3a0>
 10186df:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 10186e7:	e9 4d fe ff ff 	jmp	-435 <_runtime.gcDumpObject+0x229>
 10186ec:	48 c1 e2 04 	shl	rdx, 4
 10186f0:	48 8b 44 13 08 	mov	rax, qword ptr [rbx + rdx + 8]
 10186f5:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10186fa:	48 8b 0c 13 	mov	rcx, qword ptr [rbx + rdx]
 10186fe:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1018703:	e8 98 1d 01 00 	call	73112 <_runtime.printlock>
 1018708:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101870d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018711:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1018716:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101871b:	e8 c0 26 01 00 	call	75456 <_runtime.printstring>
 1018720:	e8 0b 20 01 00 	call	73739 <_runtime.printnl>
 1018725:	e8 f6 1d 01 00 	call	73206 <_runtime.printunlock>
 101872a:	e9 e1 fd ff ff 	jmp	-543 <_runtime.gcDumpObject+0x200>
 101872f:	e8 6c 1d 01 00 	call	73068 <_runtime.printlock>
 1018734:	48 8d 05 80 a7 05 00 	lea	rax, [rip + 370560]
 101873b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101873f:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1018748:	e8 93 26 01 00 	call	75411 <_runtime.printstring>
 101874d:	e8 ce 1d 01 00 	call	73166 <_runtime.printunlock>
 1018752:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1018757:	48 83 c4 68 	add	rsp, 104
 101875b:	c3 	ret
 101875c:	48 8b 15 6d cc 0d 00 	mov	rdx, qword ptr [rip + 904301]
 1018763:	84 02 	test	byte ptr [rdx], al
 1018765:	48 8b 0c ca 	mov	rcx, qword ptr [rdx + 8*rcx]
 1018769:	48 85 c9 	test	rcx, rcx
 101876c:	74 17 	je	23 <_runtime.gcDumpObject+0x475>
 101876e:	48 c1 e8 0d 	shr	rax, 13
 1018772:	48 25 ff 1f 00 00 	and	rax, 8191
 1018778:	48 8b 8c c1 00 00 20 00 	mov	rcx, qword ptr [rcx + 8*rax + 2097152]
 1018780:	e9 d5 fb ff ff 	jmp	-1067 <_runtime.gcDumpObject+0x4a>
 1018785:	31 c9 	xor	ecx, ecx
 1018787:	e9 ce fb ff ff 	jmp	-1074 <_runtime.gcDumpObject+0x4a>
 101878c:	e8 3f 84 03 00 	call	230463 <_runtime.morestack_noctxt>
 1018791:	e9 7a fb ff ff 	jmp	-1158 <_runtime.gcDumpObject>
 1018796:	cc 	int3
 1018797:	cc 	int3
 1018798:	cc 	int3
 1018799:	cc 	int3
 101879a:	cc 	int3
 101879b:	cc 	int3
 101879c:	cc 	int3
 101879d:	cc 	int3
 101879e:	cc 	int3
 101879f:	cc 	int3

_runtime.gcmarknewobject:
 10187a0:	48 83 ec 28 	sub	rsp, 40
 10187a4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10187a9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10187ae:	80 3d bd ef 0d 00 00 	cmp	byte ptr [rip + 913341], 0
 10187b5:	75 53 	jne	83 <_runtime.gcmarknewobject+0x6a>
 10187b7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10187bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10187c0:	e8 1b 4e ff ff 	call	-45541 <_runtime.markBitsForAddr>
 10187c5:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 10187ca:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10187cf:	f0 	lock
 10187d0:	08 01 	or	byte ptr [rcx], al
 10187d2:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10187db:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10187df:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 10187e6:	84 00 	test	byte ptr [rax], al
 10187e8:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10187ed:	48 01 88 a8 16 00 00 	add	qword ptr [rax + 5800], rcx
 10187f4:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10187f9:	48 01 88 b0 16 00 00 	add	qword ptr [rax + 5808], rcx
 1018800:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1018805:	48 83 c4 28 	add	rsp, 40
 1018809:	c3 	ret
 101880a:	48 8d 05 18 e4 05 00 	lea	rax, [rip + 386072]
 1018811:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018815:	48 c7 44 24 08 2c 00 00 00 	mov	qword ptr [rsp + 8], 44
 101881e:	e8 3d 05 01 00 	call	66877 <_runtime.throw>
 1018823:	90 	nop
 1018824:	cc 	int3
 1018825:	cc 	int3
 1018826:	cc 	int3
 1018827:	cc 	int3
 1018828:	cc 	int3
 1018829:	cc 	int3
 101882a:	cc 	int3
 101882b:	cc 	int3
 101882c:	cc 	int3
 101882d:	cc 	int3
 101882e:	cc 	int3
 101882f:	cc 	int3

_runtime.gcMarkTinyAllocs:
 1018830:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018839:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101883d:	0f 86 c8 00 00 00 	jbe	200 <_runtime.gcMarkTinyAllocs+0xdb>
 1018843:	48 83 ec 60 	sub	rsp, 96
 1018847:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 101884c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1018851:	48 8b 05 f0 5a 0b 00 	mov	rax, qword ptr [rip + 744176]
 1018858:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101885d:	48 8b 0d dc 5a 0b 00 	mov	rcx, qword ptr [rip + 744156]
 1018864:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1018869:	31 d2 	xor	edx, edx
 101886b:	eb 03 	jmp	3 <_runtime.gcMarkTinyAllocs+0x40>
 101886d:	48 ff c2 	inc	rdx
 1018870:	48 39 c2 	cmp	rdx, rax
 1018873:	0f 8d 88 00 00 00 	jge	136 <_runtime.gcMarkTinyAllocs+0xd1>
 1018879:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 101887d:	48 8b 73 40 	mov	rsi, qword ptr [rbx + 64]
 1018881:	48 85 f6 	test	rsi, rsi
 1018884:	74 e7 	je	-25 <_runtime.gcMarkTinyAllocs+0x3d>
 1018886:	48 8b 7e 10 	mov	rdi, qword ptr [rsi + 16]
 101888a:	48 85 ff 	test	rdi, rdi
 101888d:	74 de 	je	-34 <_runtime.gcMarkTinyAllocs+0x3d>
 101888f:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1018894:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 1018899:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 101889e:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 10188a2:	0f 57 c0 	xorps	xmm0, xmm0
 10188a5:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 10188aa:	e8 61 50 ff ff 	call	-44959 <_runtime.findObject>
 10188af:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10188b4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10188b9:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 10188be:	48 8b 52 10 	mov	rdx, qword ptr [rdx + 16]
 10188c2:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10188c6:	0f 57 c0 	xorps	xmm0, xmm0
 10188c9:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 10188ce:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10188d3:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10188d8:	48 05 98 16 00 00 	add	rax, 5784
 10188de:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10188e3:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 10188e8:	e8 83 f4 ff ff 	call	-2941 <_runtime.greyobject>
 10188ed:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10188f2:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10188f7:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10188fc:	e9 6c ff ff ff 	jmp	-148 <_runtime.gcMarkTinyAllocs+0x3d>
 1018901:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1018906:	48 83 c4 60 	add	rsp, 96
 101890a:	c3 	ret
 101890b:	e8 c0 82 03 00 	call	230080 <_runtime.morestack_noctxt>
 1018910:	e9 1b ff ff ff 	jmp	-229 <_runtime.gcMarkTinyAllocs>
 1018915:	cc 	int3
 1018916:	cc 	int3
 1018917:	cc 	int3
 1018918:	cc 	int3
 1018919:	cc 	int3
 101891a:	cc 	int3
 101891b:	cc 	int3
 101891c:	cc 	int3
 101891d:	cc 	int3
 101891e:	cc 	int3
 101891f:	cc 	int3

_runtime.initCheckmarks:
 1018920:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018929:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101892d:	0f 86 35 01 00 00 	jbe	309 <_runtime.initCheckmarks+0x148>
 1018933:	48 83 ec 50 	sub	rsp, 80
 1018937:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 101893c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1018941:	c6 05 2a ee 0d 00 01 	mov	byte ptr [rip + 912938], 1
 1018948:	48 8b 15 a9 c7 0d 00 	mov	rdx, qword ptr [rip + 903081]
 101894f:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1018954:	48 8b 1d 95 c7 0d 00 	mov	rbx, qword ptr [rip + 903061]
 101895b:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 1018960:	31 c0 	xor	eax, eax
 1018962:	eb 03 	jmp	3 <_runtime.initCheckmarks+0x47>
 1018964:	48 ff c0 	inc	rax
 1018967:	48 39 d0 	cmp	rax, rdx
 101896a:	0f 8d e0 00 00 00 	jge	224 <_runtime.initCheckmarks+0x130>
 1018970:	48 8b 34 c3 	mov	rsi, qword ptr [rbx + 8*rax]
 1018974:	40 8a 7e 63 	mov	dil, byte ptr [rsi + 99]
 1018978:	40 80 ff 01 	cmp	dil, 1
 101897c:	75 e6 	jne	-26 <_runtime.initCheckmarks+0x44>
 101897e:	48 8b 7e 20 	mov	rdi, qword ptr [rsi + 32]
 1018982:	48 c1 e7 0d 	shl	rdi, 13
 1018986:	4c 8b 46 68 	mov	r8, qword ptr [rsi + 104]
 101898a:	4d 85 c0 	test	r8, r8
 101898d:	0f 86 b0 00 00 00 	jbe	176 <_runtime.initCheckmarks+0x123>
 1018993:	48 89 c1 	mov	rcx, rax
 1018996:	48 89 f8 	mov	rax, rdi
 1018999:	49 89 d1 	mov	r9, rdx
 101899c:	31 d2 	xor	edx, edx
 101899e:	49 f7 f0 	div	r8
 10189a1:	48 8b 15 28 ca 0d 00 	mov	rdx, qword ptr [rip + 903720]
 10189a8:	84 02 	test	byte ptr [rdx], al
 10189aa:	48 8b 76 18 	mov	rsi, qword ptr [rsi + 24]
 10189ae:	90 	nop
 10189af:	49 ba 00 00 00 00 00 80 00 00 	movabs	r10, 140737488355328
 10189b9:	4e 8d 1c 16 	lea	r11, [rsi + r10]
 10189bd:	49 c1 eb 1a 	shr	r11, 26
 10189c1:	49 81 fb 00 00 40 00 	cmp	r11, 4194304
 10189c8:	0f 83 8c 00 00 00 	jae	140 <_runtime.initCheckmarks+0x13a>
 10189ce:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10189d3:	4a 8b 14 da 	mov	rdx, qword ptr [rdx + 8*r11]
 10189d7:	48 85 d2 	test	rdx, rdx
 10189da:	74 5b 	je	91 <_runtime.initCheckmarks+0x117>
 10189dc:	49 89 f4 	mov	r12, rsi
 10189df:	48 c1 ee 05 	shr	rsi, 5
 10189e3:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 10189ea:	48 01 d6 	add	rsi, rdx
 10189ed:	49 c1 ec 03 	shr	r12, 3
 10189f1:	49 83 e4 03 	and	r12, 3
 10189f5:	48 81 c2 ff ff 1f 00 	add	rdx, 2097151
 10189fc:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1018a00:	44 89 64 24 08 	mov	dword ptr [rsp + 8], r12d
 1018a05:	44 89 5c 24 0c 	mov	dword ptr [rsp + 12], r11d
 1018a0a:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1018a0f:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 1018a14:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1018a19:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1018a1e:	e8 7d 5f ff ff 	call	-41091 <_runtime.heapBits.initCheckmarkSpan>
 1018a23:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1018a28:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1018a2d:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1018a32:	e9 2d ff ff ff 	jmp	-211 <_runtime.initCheckmarks+0x44>
 1018a37:	31 d2 	xor	edx, edx
 1018a39:	45 31 db 	xor	r11d, r11d
 1018a3c:	45 31 e4 	xor	r12d, r12d
 1018a3f:	31 f6 	xor	esi, esi
 1018a41:	eb b9 	jmp	-71 <_runtime.initCheckmarks+0xdc>
 1018a43:	48 89 c1 	mov	rcx, rax
 1018a46:	49 89 d1 	mov	r9, rdx
 1018a49:	31 c0 	xor	eax, eax
 1018a4b:	e9 51 ff ff ff 	jmp	-175 <_runtime.initCheckmarks+0x81>
 1018a50:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1018a55:	48 83 c4 50 	add	rsp, 80
 1018a59:	c3 	ret
 1018a5a:	4c 89 d8 	mov	rax, r11
 1018a5d:	b9 00 00 40 00 	mov	ecx, 4194304
 1018a62:	e8 f9 a8 03 00 	call	239865 <_runtime.panicIndexU>
 1018a67:	90 	nop
 1018a68:	e8 63 81 03 00 	call	229731 <_runtime.morestack_noctxt>
 1018a6d:	e9 ae fe ff ff 	jmp	-338 <_runtime.initCheckmarks>
 1018a72:	cc 	int3
 1018a73:	cc 	int3
 1018a74:	cc 	int3
 1018a75:	cc 	int3
 1018a76:	cc 	int3
 1018a77:	cc 	int3
 1018a78:	cc 	int3
 1018a79:	cc 	int3
 1018a7a:	cc 	int3
 1018a7b:	cc 	int3
 1018a7c:	cc 	int3
 1018a7d:	cc 	int3
 1018a7e:	cc 	int3
 1018a7f:	cc 	int3

_runtime.clearCheckmarks:
 1018a80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018a89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1018a8d:	0f 86 35 01 00 00 	jbe	309 <_runtime.clearCheckmarks+0x148>
 1018a93:	48 83 ec 50 	sub	rsp, 80
 1018a97:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 1018a9c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1018aa1:	c6 05 ca ec 0d 00 00 	mov	byte ptr [rip + 912586], 0
 1018aa8:	48 8b 15 49 c6 0d 00 	mov	rdx, qword ptr [rip + 902729]
 1018aaf:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1018ab4:	48 8b 1d 35 c6 0d 00 	mov	rbx, qword ptr [rip + 902709]
 1018abb:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 1018ac0:	31 c0 	xor	eax, eax
 1018ac2:	eb 03 	jmp	3 <_runtime.clearCheckmarks+0x47>
 1018ac4:	48 ff c0 	inc	rax
 1018ac7:	48 39 d0 	cmp	rax, rdx
 1018aca:	0f 8d e0 00 00 00 	jge	224 <_runtime.clearCheckmarks+0x130>
 1018ad0:	48 8b 34 c3 	mov	rsi, qword ptr [rbx + 8*rax]
 1018ad4:	40 8a 7e 63 	mov	dil, byte ptr [rsi + 99]
 1018ad8:	40 80 ff 01 	cmp	dil, 1
 1018adc:	75 e6 	jne	-26 <_runtime.clearCheckmarks+0x44>
 1018ade:	48 8b 7e 20 	mov	rdi, qword ptr [rsi + 32]
 1018ae2:	48 c1 e7 0d 	shl	rdi, 13
 1018ae6:	4c 8b 46 68 	mov	r8, qword ptr [rsi + 104]
 1018aea:	4d 85 c0 	test	r8, r8
 1018aed:	0f 86 b0 00 00 00 	jbe	176 <_runtime.clearCheckmarks+0x123>
 1018af3:	48 89 c1 	mov	rcx, rax
 1018af6:	48 89 f8 	mov	rax, rdi
 1018af9:	49 89 d1 	mov	r9, rdx
 1018afc:	31 d2 	xor	edx, edx
 1018afe:	49 f7 f0 	div	r8
 1018b01:	48 8b 15 c8 c8 0d 00 	mov	rdx, qword ptr [rip + 903368]
 1018b08:	84 02 	test	byte ptr [rdx], al
 1018b0a:	48 8b 76 18 	mov	rsi, qword ptr [rsi + 24]
 1018b0e:	90 	nop
 1018b0f:	49 ba 00 00 00 00 00 80 00 00 	movabs	r10, 140737488355328
 1018b19:	4e 8d 1c 16 	lea	r11, [rsi + r10]
 1018b1d:	49 c1 eb 1a 	shr	r11, 26
 1018b21:	49 81 fb 00 00 40 00 	cmp	r11, 4194304
 1018b28:	0f 83 8c 00 00 00 	jae	140 <_runtime.clearCheckmarks+0x13a>
 1018b2e:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1018b33:	4a 8b 14 da 	mov	rdx, qword ptr [rdx + 8*r11]
 1018b37:	48 85 d2 	test	rdx, rdx
 1018b3a:	74 5b 	je	91 <_runtime.clearCheckmarks+0x117>
 1018b3c:	49 89 f4 	mov	r12, rsi
 1018b3f:	48 c1 ee 05 	shr	rsi, 5
 1018b43:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 1018b4a:	48 01 d6 	add	rsi, rdx
 1018b4d:	49 c1 ec 03 	shr	r12, 3
 1018b51:	49 83 e4 03 	and	r12, 3
 1018b55:	48 81 c2 ff ff 1f 00 	add	rdx, 2097151
 1018b5c:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1018b60:	44 89 64 24 08 	mov	dword ptr [rsp + 8], r12d
 1018b65:	44 89 5c 24 0c 	mov	dword ptr [rsp + 12], r11d
 1018b6a:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1018b6f:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 1018b74:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1018b79:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1018b7e:	e8 5d 5f ff ff 	call	-41123 <_runtime.heapBits.clearCheckmarkSpan>
 1018b83:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1018b88:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1018b8d:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1018b92:	e9 2d ff ff ff 	jmp	-211 <_runtime.clearCheckmarks+0x44>
 1018b97:	31 d2 	xor	edx, edx
 1018b99:	45 31 db 	xor	r11d, r11d
 1018b9c:	45 31 e4 	xor	r12d, r12d
 1018b9f:	31 f6 	xor	esi, esi
 1018ba1:	eb b9 	jmp	-71 <_runtime.clearCheckmarks+0xdc>
 1018ba3:	48 89 c1 	mov	rcx, rax
 1018ba6:	49 89 d1 	mov	r9, rdx
 1018ba9:	31 c0 	xor	eax, eax
 1018bab:	e9 51 ff ff ff 	jmp	-175 <_runtime.clearCheckmarks+0x81>
 1018bb0:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1018bb5:	48 83 c4 50 	add	rsp, 80
 1018bb9:	c3 	ret
 1018bba:	4c 89 d8 	mov	rax, r11
 1018bbd:	b9 00 00 40 00 	mov	ecx, 4194304
 1018bc2:	e8 99 a7 03 00 	call	239513 <_runtime.panicIndexU>
 1018bc7:	90 	nop
 1018bc8:	e8 03 80 03 00 	call	229379 <_runtime.morestack_noctxt>
 1018bcd:	e9 ae fe ff ff 	jmp	-338 <_runtime.clearCheckmarks>
 1018bd2:	cc 	int3
 1018bd3:	cc 	int3
 1018bd4:	cc 	int3
 1018bd5:	cc 	int3
 1018bd6:	cc 	int3
 1018bd7:	cc 	int3
 1018bd8:	cc 	int3
 1018bd9:	cc 	int3
 1018bda:	cc 	int3
 1018bdb:	cc 	int3
 1018bdc:	cc 	int3
 1018bdd:	cc 	int3
 1018bde:	cc 	int3
 1018bdf:	cc 	int3

_runtime.gcPaceScavenger:
 1018be0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018be9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1018bed:	0f 86 88 01 00 00 	jbe	392 <_runtime.gcPaceScavenger+0x19b>
 1018bf3:	48 83 ec 10 	sub	rsp, 16
 1018bf7:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1018bfc:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1018c01:	48 8b 0d 48 11 0e 00 	mov	rcx, qword ptr [rip + 921928]
 1018c08:	48 85 c9 	test	rcx, rcx
 1018c0b:	0f 84 55 01 00 00 	je	341 <_runtime.gcPaceScavenger+0x186>
 1018c11:	48 8b 15 b0 fa 0d 00 	mov	rdx, qword ptr [rip + 916144]
 1018c18:	48 85 d2 	test	rdx, rdx
 1018c1b:	0f 8c 24 01 00 00 	jl	292 <_runtime.gcPaceScavenger+0x165>
 1018c21:	0f 57 c0 	xorps	xmm0, xmm0
 1018c24:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 1018c29:	48 85 c9 	test	rcx, rcx
 1018c2c:	0f 8c f5 00 00 00 	jl	245 <_runtime.gcPaceScavenger+0x147>
 1018c32:	0f 57 c9 	xorps	xmm1, xmm1
 1018c35:	f2 48 0f 2a c9 	cvtsi2sd	xmm1, rcx
 1018c3a:	f2 0f 5e c1 	divsd	xmm0, xmm1
 1018c3e:	48 8b 0d 13 11 0e 00 	mov	rcx, qword ptr [rip + 921875]
 1018c45:	48 85 c9 	test	rcx, rcx
 1018c48:	0f 8c bb 00 00 00 	jl	187 <_runtime.gcPaceScavenger+0x129>
 1018c4e:	0f 57 c9 	xorps	xmm1, xmm1
 1018c51:	f2 48 0f 2a c9 	cvtsi2sd	xmm1, rcx
 1018c56:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 1018c5a:	f2 0f 10 05 16 ab 06 00 	movsd	xmm0, qword ptr [rip + 437014]
 1018c62:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 1018c66:	0f 86 8a 00 00 00 	jbe	138 <_runtime.gcPaceScavenger+0x116>
 1018c6c:	f2 48 0f 2c c9 	cvttsd2si	rcx, xmm1
 1018c71:	48 8b 15 20 ec 0d 00 	mov	rdx, qword ptr [rip + 912416]
 1018c78:	90 	nop
 1018c79:	48 8b 1d d8 f9 0d 00 	mov	rbx, qword ptr [rip + 915928]
 1018c80:	48 8b 35 e9 f9 0d 00 	mov	rsi, qword ptr [rip + 915945]
 1018c87:	48 b8 cd cc cc cc cc cc cc cc 	movabs	rax, -3689348814741910323
 1018c91:	48 89 d7 	mov	rdi, rdx
 1018c94:	48 f7 e1 	mul	rcx
 1018c97:	48 c1 ea 03 	shr	rdx, 3
 1018c9b:	48 01 d1 	add	rcx, rdx
 1018c9e:	48 8d 0c 39 	lea	rcx, [rcx + rdi]
 1018ca2:	48 8d 49 ff 	lea	rcx, [rcx - 1]
 1018ca6:	48 f7 df 	neg	rdi
 1018ca9:	48 21 cf 	and	rdi, rcx
 1018cac:	48 29 f3 	sub	rbx, rsi
 1018caf:	48 39 fb 	cmp	rbx, rdi
 1018cb2:	77 15 	ja	21 <_runtime.gcPaceScavenger+0xe9>
 1018cb4:	48 c7 05 c1 c4 0d 00 ff ff ff ff 	mov	qword ptr [rip + 902337], -1
 1018cbf:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1018cc4:	48 83 c4 10 	add	rsp, 16
 1018cc8:	c3 	ret
 1018cc9:	48 29 fb 	sub	rbx, rdi
 1018ccc:	48 39 1d c5 eb 0d 00 	cmp	qword ptr [rip + 912325], rbx
 1018cd3:	77 df 	ja	-33 <_runtime.gcPaceScavenger+0xd4>
 1018cd5:	48 89 3d a4 c4 0d 00 	mov	qword ptr [rip + 902308], rdi
 1018cdc:	48 8d 05 25 c3 0c 00 	lea	rax, [rip + 836389]
 1018ce3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018ce7:	e8 04 07 00 00 	call	1796 <_runtime.(*pageAlloc).resetScavengeAddr>
 1018cec:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1018cf1:	48 83 c4 10 	add	rsp, 16
 1018cf5:	c3 	ret
 1018cf6:	f2 0f 5c c8 	subsd	xmm1, xmm0
 1018cfa:	f2 48 0f 2c c9 	cvttsd2si	rcx, xmm1
 1018cff:	48 0f ba e9 3f 	bts	rcx, 63
 1018d04:	e9 68 ff ff ff 	jmp	-152 <_runtime.gcPaceScavenger+0x91>
 1018d09:	48 89 ca 	mov	rdx, rcx
 1018d0c:	48 83 e1 01 	and	rcx, 1
 1018d10:	48 d1 ea 	shr	rdx
 1018d13:	48 09 ca 	or	rdx, rcx
 1018d16:	0f 57 c9 	xorps	xmm1, xmm1
 1018d19:	f2 48 0f 2a ca 	cvtsi2sd	xmm1, rdx
 1018d1e:	f2 0f 58 c9 	addsd	xmm1, xmm1
 1018d22:	e9 2f ff ff ff 	jmp	-209 <_runtime.gcPaceScavenger+0x76>
 1018d27:	48 89 ca 	mov	rdx, rcx
 1018d2a:	48 83 e1 01 	and	rcx, 1
 1018d2e:	48 d1 ea 	shr	rdx
 1018d31:	48 09 ca 	or	rdx, rcx
 1018d34:	0f 57 c9 	xorps	xmm1, xmm1
 1018d37:	f2 48 0f 2a ca 	cvtsi2sd	xmm1, rdx
 1018d3c:	f2 0f 58 c9 	addsd	xmm1, xmm1
 1018d40:	e9 f5 fe ff ff 	jmp	-267 <_runtime.gcPaceScavenger+0x5a>
 1018d45:	48 89 d3 	mov	rbx, rdx
 1018d48:	48 83 e2 01 	and	rdx, 1
 1018d4c:	48 d1 eb 	shr	rbx
 1018d4f:	48 09 d3 	or	rbx, rdx
 1018d52:	0f 57 c0 	xorps	xmm0, xmm0
 1018d55:	f2 48 0f 2a c3 	cvtsi2sd	xmm0, rbx
 1018d5a:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1018d5e:	48 85 c9 	test	rcx, rcx
 1018d61:	e9 c6 fe ff ff 	jmp	-314 <_runtime.gcPaceScavenger+0x4c>
 1018d66:	48 c7 05 0f c4 0d 00 ff ff ff ff 	mov	qword ptr [rip + 902159], -1
 1018d71:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1018d76:	48 83 c4 10 	add	rsp, 16
 1018d7a:	c3 	ret
 1018d7b:	e8 50 7e 03 00 	call	228944 <_runtime.morestack_noctxt>
 1018d80:	e9 5b fe ff ff 	jmp	-421 <_runtime.gcPaceScavenger>
 1018d85:	cc 	int3
 1018d86:	cc 	int3
 1018d87:	cc 	int3
 1018d88:	cc 	int3
 1018d89:	cc 	int3
 1018d8a:	cc 	int3
 1018d8b:	cc 	int3
 1018d8c:	cc 	int3
 1018d8d:	cc 	int3
 1018d8e:	cc 	int3
 1018d8f:	cc 	int3

_runtime.wakeScavenger:
 1018d90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018d99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1018d9d:	76 6a 	jbe	106 <_runtime.wakeScavenger+0x79>
 1018d9f:	48 83 ec 18 	sub	rsp, 24
 1018da3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1018da8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1018dad:	48 8d 05 6c 56 0b 00 	lea	rax, [rip + 743020]
 1018db4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018db8:	e8 73 f3 fe ff 	call	-68749 <_runtime.lock>
 1018dbd:	80 3d 6c 56 0b 00 00 	cmp	byte ptr [rip + 743020], 0
 1018dc4:	75 1a 	jne	26 <_runtime.wakeScavenger+0x50>
 1018dc6:	48 8d 05 53 56 0b 00 	lea	rax, [rip + 742995]
 1018dcd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018dd1:	e8 3a f5 fe ff 	call	-68294 <_runtime.unlock>
 1018dd6:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1018ddb:	48 83 c4 18 	add	rsp, 24
 1018ddf:	c3 	ret
 1018de0:	48 8b 05 51 56 0b 00 	mov	rax, qword ptr [rip + 742993]
 1018de7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018deb:	e8 c0 ac 02 00 	call	175296 <_runtime.deltimer>
 1018df0:	c6 05 39 56 0b 00 00 	mov	byte ptr [rip + 742969], 0
 1018df7:	48 8d 05 aa ec 05 00 	lea	rax, [rip + 388266]
 1018dfe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018e02:	e8 79 7c 03 00 	call	228473 <_runtime.systemstack>
 1018e07:	eb bd 	jmp	-67 <_runtime.wakeScavenger+0x36>
 1018e09:	e8 c2 7d 03 00 	call	228802 <_runtime.morestack_noctxt>
 1018e0e:	eb 80 	jmp	-128 <_runtime.wakeScavenger>

_runtime.scavengeSleep:
 1018e10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018e19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1018e1d:	0f 86 cc 00 00 00 	jbe	204 <_runtime.scavengeSleep+0xdf>
 1018e23:	48 83 ec 48 	sub	rsp, 72
 1018e27:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1018e2c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1018e31:	48 8d 05 e8 55 0b 00 	lea	rax, [rip + 742888]
 1018e38:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018e3c:	e8 ef f2 fe ff 	call	-68881 <_runtime.lock>
 1018e41:	90 	nop
 1018e42:	e8 79 a4 02 00 	call	173177 <_runtime.nanotime1>
 1018e47:	48 8b 05 ea 55 0b 00 	mov	rax, qword ptr [rip + 742890]
 1018e4e:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 1018e52:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1018e57:	90 	nop
 1018e58:	48 8b 50 10 	mov	rdx, qword ptr [rax + 16]
 1018e5c:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 1018e60:	48 8b 70 28 	mov	rsi, qword ptr [rax + 40]
 1018e64:	48 8b 78 20 	mov	rdi, qword ptr [rax + 32]
 1018e68:	4c 8b 40 30 	mov	r8, qword ptr [rax + 48]
 1018e6c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018e70:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1018e75:	48 01 c8 	add	rax, rcx
 1018e78:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1018e7d:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1018e82:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1018e87:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 1018e8c:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 1018e91:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 1018e96:	e8 95 b2 02 00 	call	176789 <_runtime.modtimer>
 1018e9b:	c6 05 8e 55 0b 00 01 	mov	byte ptr [rip + 742798], 1
 1018ea2:	90 	nop
 1018ea3:	48 8d 05 ae ea 05 00 	lea	rax, [rip + 387758]
 1018eaa:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018eae:	48 8d 05 6b 55 0b 00 	lea	rax, [rip + 742763]
 1018eb5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1018eba:	66 c7 44 24 10 13 13 	mov	word ptr [rsp + 16], 4883
 1018ec1:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1018eca:	e8 71 28 01 00 	call	75889 <_runtime.gopark>
 1018ecf:	e8 ec a3 02 00 	call	173036 <_runtime.nanotime1>
 1018ed4:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1018ed8:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1018edd:	48 29 c8 	sub	rax, rcx
 1018ee0:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1018ee5:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1018eea:	48 83 c4 48 	add	rsp, 72
 1018eee:	c3 	ret
 1018eef:	e8 dc 7c 03 00 	call	228572 <_runtime.morestack_noctxt>
 1018ef4:	e9 17 ff ff ff 	jmp	-233 <_runtime.scavengeSleep>
 1018ef9:	cc 	int3
 1018efa:	cc 	int3
 1018efb:	cc 	int3
 1018efc:	cc 	int3
 1018efd:	cc 	int3
 1018efe:	cc 	int3
 1018eff:	cc 	int3

_runtime.bgscavenge:
 1018f00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1018f09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1018f0d:	0f 86 f0 02 00 00 	jbe	752 <_runtime.bgscavenge+0x303>
 1018f13:	48 83 ec 58 	sub	rsp, 88
 1018f17:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 1018f1c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1018f21:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1018f2a:	83 3d cf e9 0d 00 00 	cmp	dword ptr [rip + 911823], 0
 1018f31:	0f 85 9c 02 00 00 	jne	668 <_runtime.bgscavenge+0x2d3>
 1018f37:	48 89 05 ea 54 0b 00 	mov	qword ptr [rip + 742634], rax
 1018f3e:	48 8d 05 db 54 0b 00 	lea	rax, [rip + 742619]
 1018f45:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018f49:	e8 e2 f1 fe ff 	call	-69150 <_runtime.lock>
 1018f4e:	c6 05 db 54 0b 00 01 	mov	byte ptr [rip + 742619], 1
 1018f55:	48 8d 05 44 48 05 00 	lea	rax, [rip + 346180]
 1018f5c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018f60:	e8 9b 14 ff ff 	call	-60261 <_runtime.newobject>
 1018f65:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1018f6a:	83 3d 8f e9 0d 00 00 	cmp	dword ptr [rip + 911759], 0
 1018f71:	0f 85 3b 02 00 00 	jne	571 <_runtime.bgscavenge+0x2b2>
 1018f77:	48 89 05 ba 54 0b 00 	mov	qword ptr [rip + 742586], rax
 1018f7e:	48 8d 0d bb e7 05 00 	lea	rcx, [rip + 387003]
 1018f85:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 1018f89:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1018f8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018f92:	48 8d 05 07 a8 06 00 	lea	rax, [rip + 436231]
 1018f99:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1018f9e:	e8 ed a8 fe ff 	call	-87827 <_runtime.chansend1>
 1018fa3:	90 	nop
 1018fa4:	48 8d 05 ad e9 05 00 	lea	rax, [rip + 387501]
 1018fab:	48 89 04 24 	mov	qword ptr [rsp], rax
 1018faf:	48 8d 0d 6a 54 0b 00 	lea	rcx, [rip + 742506]
 1018fb6:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1018fbb:	66 c7 44 24 10 0d 14 	mov	word ptr [rsp + 16], 5133
 1018fc2:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1018fcb:	e8 70 27 01 00 	call	75632 <_runtime.gopark>
 1018fd0:	f2 0f 10 05 08 a7 06 00 	movsd	xmm0, qword ptr [rip + 435976]
 1018fd8:	f2 0f 11 44 24 20 	movsd	qword ptr [rsp + 32], xmm0
 1018fde:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1018fe7:	0f 57 c9 	xorps	xmm1, xmm1
 1018fea:	f2 0f 11 4c 24 30 	movsd	qword ptr [rsp + 48], xmm1
 1018ff0:	0f 57 d2 	xorps	xmm2, xmm2
 1018ff3:	0f 11 54 24 38 	movups	xmmword ptr [rsp + 56], xmm2
 1018ff8:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1019001:	48 8d 05 38 57 03 00 	lea	rax, [rip + 218936]
 1019008:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101900d:	48 8d 4c 24 28 	lea	rcx, [rsp + 40]
 1019012:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1019017:	48 8d 4c 24 30 	lea	rcx, [rsp + 48]
 101901c:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1019021:	48 8d 4c 24 38 	lea	rcx, [rsp + 56]
 1019026:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101902a:	e8 51 7a 03 00 	call	227921 <_runtime.systemstack>
 101902f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1019034:	48 85 c0 	test	rax, rax
 1019037:	0f 84 1b 01 00 00 	je	283 <_runtime.bgscavenge+0x258>
 101903d:	48 8b 0d 54 e8 0d 00 	mov	rcx, qword ptr [rip + 911444]
 1019044:	48 39 c8 	cmp	rax, rcx
 1019047:	0f 82 9c 01 00 00 	jb	412 <_runtime.bgscavenge+0x2e9>
 101904d:	f2 0f 10 44 24 30 	movsd	xmm0, qword ptr [rsp + 48]
 1019053:	0f 57 c9 	xorps	xmm1, xmm1
 1019056:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 101905a:	0f 82 eb 00 00 00 	jb	235 <_runtime.bgscavenge+0x24b>
 1019060:	48 85 c9 	test	rcx, rcx
 1019063:	0f 84 7b 01 00 00 	je	379 <_runtime.bgscavenge+0x2e4>
 1019069:	31 d2 	xor	edx, edx
 101906b:	48 f7 f1 	div	rcx
 101906e:	48 85 c0 	test	rax, rax
 1019071:	0f 8c b6 00 00 00 	jl	182 <_runtime.bgscavenge+0x22d>
 1019077:	0f 57 c0 	xorps	xmm0, xmm0
 101907a:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 101907f:	f2 0f 10 15 d9 a6 06 00 	movsd	xmm2, qword ptr [rip + 435929]
 1019087:	f2 0f 59 c2 	mulsd	xmm0, xmm2
 101908b:	f2 0f 11 44 24 30 	movsd	qword ptr [rsp + 48], xmm0
 1019091:	f2 0f 10 44 24 30 	movsd	xmm0, qword ptr [rsp + 48]
 1019097:	f2 0f 10 1d 91 a6 06 00 	movsd	xmm3, qword ptr [rip + 435857]
 101909f:	f2 0f 59 c3 	mulsd	xmm0, xmm3
 10190a3:	f2 0f 11 44 24 30 	movsd	qword ptr [rsp + 48], xmm0
 10190a9:	f2 0f 10 25 bf a6 06 00 	movsd	xmm4, qword ptr [rip + 435903]
 10190b1:	66 0f 2e c4 	ucomisd	xmm0, xmm4
 10190b5:	76 06 	jbe	6 <_runtime.bgscavenge+0x1bd>
 10190b7:	f2 0f 11 64 24 30 	movsd	qword ptr [rsp + 48], xmm4
 10190bd:	f2 0f 10 44 24 20 	movsd	xmm0, qword ptr [rsp + 32]
 10190c3:	f2 0f 10 0d 15 a6 06 00 	movsd	xmm1, qword ptr [rip + 435733]
 10190cb:	f2 0f 5e c1 	divsd	xmm0, xmm1
 10190cf:	f2 0f 59 44 24 30 	mulsd	xmm0, qword ptr [rsp + 48]
 10190d5:	f2 0f 5e c1 	divsd	xmm0, xmm1
 10190d9:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 10190de:	48 89 04 24 	mov	qword ptr [rsp], rax
 10190e2:	e8 29 fd ff ff 	call	-727 <_runtime.scavengeSleep>
 10190e7:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10190ec:	f2 0f 10 44 24 30 	movsd	xmm0, qword ptr [rsp + 48]
 10190f2:	0f 57 c9 	xorps	xmm1, xmm1
 10190f5:	f2 48 0f 2a c8 	cvtsi2sd	xmm1, rax
 10190fa:	f2 0f 58 c8 	addsd	xmm1, xmm0
 10190fe:	f2 0f 5e c1 	divsd	xmm0, xmm1
 1019102:	0f 57 c9 	xorps	xmm1, xmm1
 1019105:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 1019109:	76 03 	jbe	3 <_runtime.bgscavenge+0x20e>
 101910b:	0f 57 c0 	xorps	xmm0, xmm0
 101910e:	f2 0f 10 15 e2 a5 06 00 	movsd	xmm2, qword ptr [rip + 435682]
 1019116:	f2 0f 59 c2 	mulsd	xmm0, xmm2
 101911a:	f2 0f 10 5c 24 20 	movsd	xmm3, qword ptr [rsp + 32]
 1019120:	f2 0f 59 da 	mulsd	xmm3, xmm2
 1019124:	f2 0f 58 c3 	addsd	xmm0, xmm3
 1019128:	e9 ab fe ff ff 	jmp	-341 <_runtime.bgscavenge+0xd8>
 101912d:	48 89 c1 	mov	rcx, rax
 1019130:	48 d1 e8 	shr	rax
 1019133:	48 83 e1 01 	and	rcx, 1
 1019137:	48 09 c8 	or	rax, rcx
 101913a:	0f 57 c0 	xorps	xmm0, xmm0
 101913d:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 1019142:	f2 0f 58 c0 	addsd	xmm0, xmm0
 1019146:	e9 34 ff ff ff 	jmp	-204 <_runtime.bgscavenge+0x17f>
 101914b:	f2 0f 10 15 0d a6 06 00 	movsd	xmm2, qword ptr [rip + 435725]
 1019153:	e9 39 ff ff ff 	jmp	-199 <_runtime.bgscavenge+0x191>
 1019158:	48 8d 05 c1 52 0b 00 	lea	rax, [rip + 742081]
 101915f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019163:	e8 c8 ef fe ff 	call	-69688 <_runtime.lock>
 1019168:	c6 05 c1 52 0b 00 01 	mov	byte ptr [rip + 742081], 1
 101916f:	90 	nop
 1019170:	48 8d 05 e1 e7 05 00 	lea	rax, [rip + 387041]
 1019177:	48 89 04 24 	mov	qword ptr [rsp], rax
 101917b:	48 8d 0d 9e 52 0b 00 	lea	rcx, [rip + 742046]
 1019182:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1019187:	66 c7 44 24 10 0d 14 	mov	word ptr [rsp + 16], 5133
 101918e:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1019197:	e8 a4 25 01 00 	call	75172 <_runtime.gopark>
 101919c:	0f 57 c9 	xorps	xmm1, xmm1
 101919f:	f2 0f 10 15 51 a5 06 00 	movsd	xmm2, qword ptr [rip + 435537]
 10191a7:	f2 0f 10 44 24 20 	movsd	xmm0, qword ptr [rsp + 32]
 10191ad:	e9 26 fe ff ff 	jmp	-474 <_runtime.bgscavenge+0xd8>
 10191b2:	48 8d 3d 7f 52 0b 00 	lea	rdi, [rip + 742015]
 10191b9:	e8 22 98 03 00 	call	235554 <_runtime.gcWriteBarrier>
 10191be:	48 8d 78 18 	lea	rdi, [rax + 24]
 10191c2:	48 8d 05 77 e5 05 00 	lea	rax, [rip + 386423]
 10191c9:	e8 12 98 03 00 	call	235538 <_runtime.gcWriteBarrier>
 10191ce:	e9 b6 fd ff ff 	jmp	-586 <_runtime.bgscavenge+0x89>
 10191d3:	48 8d 3d 4e 52 0b 00 	lea	rdi, [rip + 741966]
 10191da:	e8 01 98 03 00 	call	235521 <_runtime.gcWriteBarrier>
 10191df:	e9 5a fd ff ff 	jmp	-678 <_runtime.bgscavenge+0x3e>
 10191e4:	e8 57 e1 00 00 	call	57687 <_runtime.panicdivide>
 10191e9:	48 8d 05 a0 db 05 00 	lea	rax, [rip + 383904]
 10191f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10191f4:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 10191fd:	e8 5e fb 00 00 	call	64350 <_runtime.throw>
 1019202:	90 	nop
 1019203:	e8 c8 79 03 00 	call	227784 <_runtime.morestack_noctxt>
 1019208:	e9 f3 fc ff ff 	jmp	-781 <_runtime.bgscavenge>
 101920d:	cc 	int3
 101920e:	cc 	int3
 101920f:	cc 	int3

_runtime.(*pageAlloc).scavenge:
 1019210:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019219:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101921d:	76 66 	jbe	102 <_runtime.(*pageAlloc).scavenge+0x75>
 101921f:	48 83 ec 30 	sub	rsp, 48
 1019223:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1019228:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101922d:	31 c0 	xor	eax, eax
 101922f:	eb 08 	jmp	8 <_runtime.(*pageAlloc).scavenge+0x29>
 1019231:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1019236:	48 01 c8 	add	rax, rcx
 1019239:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101923e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1019243:	48 39 c8 	cmp	rax, rcx
 1019246:	73 29 	jae	41 <_runtime.(*pageAlloc).scavenge+0x61>
 1019248:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 101924d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1019251:	48 29 c1 	sub	rcx, rax
 1019254:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1019259:	0f b6 4c 24 48 	movzx	ecx, byte ptr [rsp + 72]
 101925e:	88 4c 24 10 	mov	byte ptr [rsp + 16], cl
 1019262:	e8 29 02 00 00 	call	553 <_runtime.(*pageAlloc).scavengeOne>
 1019267:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101926c:	48 85 c0 	test	rax, rax
 101926f:	75 c0 	jne	-64 <_runtime.(*pageAlloc).scavenge+0x21>
 1019271:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1019276:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101927b:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1019280:	48 83 c4 30 	add	rsp, 48
 1019284:	c3 	ret
 1019285:	e8 76 74 02 00 	call	160886 <_runtime.morestackc>
 101928a:	eb 84 	jmp	-124 <_runtime.(*pageAlloc).scavenge>
 101928c:	cc 	int3
 101928d:	cc 	int3
 101928e:	cc 	int3
 101928f:	cc 	int3

_runtime.printScavTrace:
 1019290:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019299:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101929d:	0f 86 43 01 00 00 	jbe	323 <_runtime.printScavTrace+0x156>
 10192a3:	48 83 ec 28 	sub	rsp, 40
 10192a7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10192ac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10192b1:	e8 ea 11 01 00 	call	70122 <_runtime.printlock>
 10192b6:	48 8b 05 b3 f3 0d 00 	mov	rax, qword ptr [rip + 914355]
 10192bd:	48 8b 0d a4 f3 0d 00 	mov	rcx, qword ptr [rip + 914340]
 10192c4:	48 8b 15 8d f3 0d 00 	mov	rdx, qword ptr [rip + 914317]
 10192cb:	48 8b 1d 9e f3 0d 00 	mov	rbx, qword ptr [rip + 914334]
 10192d2:	48 29 da 	sub	rdx, rbx
 10192d5:	48 85 d2 	test	rdx, rdx
 10192d8:	0f 84 02 01 00 00 	je	258 <_runtime.printScavTrace+0x150>
 10192de:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10192e3:	48 6b c1 64 	imul	rax, rcx, 100
 10192e7:	48 89 d1 	mov	rcx, rdx
 10192ea:	31 d2 	xor	edx, edx
 10192ec:	48 f7 f1 	div	rcx
 10192ef:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10192f4:	e8 a7 11 01 00 	call	70055 <_runtime.printlock>
 10192f9:	48 8d 0d e1 9a 05 00 	lea	rcx, [rip + 367329]
 1019300:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1019304:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 101930d:	e8 ce 1a 01 00 	call	72398 <_runtime.printstring>
 1019312:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1019317:	48 c1 e9 0a 	shr	rcx, 10
 101931b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101931f:	e8 fc 17 01 00 	call	71676 <_runtime.printuint>
 1019324:	48 8d 0d ca 9f 05 00 	lea	rcx, [rip + 368586]
 101932b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101932f:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1019338:	e8 a3 1a 01 00 	call	72355 <_runtime.printstring>
 101933d:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1019342:	48 c1 e9 0a 	shr	rcx, 10
 1019346:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101934a:	e8 d1 17 01 00 	call	71633 <_runtime.printuint>
 101934f:	48 8d 0d 15 a1 05 00 	lea	rcx, [rip + 368917]
 1019356:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101935a:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1019363:	e8 78 1a 01 00 	call	72312 <_runtime.printstring>
 1019368:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 101936d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1019371:	e8 aa 17 01 00 	call	71594 <_runtime.printuint>
 1019376:	48 8d 0d d1 9a 05 00 	lea	rcx, [rip + 367313]
 101937d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1019381:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 101938a:	e8 51 1a 01 00 	call	72273 <_runtime.printstring>
 101938f:	e8 8c 11 01 00 	call	70028 <_runtime.printunlock>
 1019394:	0f b6 4c 24 38 	movzx	ecx, byte ptr [rsp + 56]
 1019399:	84 c9 	test	cl, cl
 101939b:	75 1e 	jne	30 <_runtime.printScavTrace+0x12b>
 101939d:	e8 fe 10 01 00 	call	69886 <_runtime.printlock>
 10193a2:	e8 89 13 01 00 	call	70537 <_runtime.printnl>
 10193a7:	e8 74 11 01 00 	call	70004 <_runtime.printunlock>
 10193ac:	e8 6f 11 01 00 	call	69999 <_runtime.printunlock>
 10193b1:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10193b6:	48 83 c4 28 	add	rsp, 40
 10193ba:	c3 	ret
 10193bb:	e8 e0 10 01 00 	call	69856 <_runtime.printlock>
 10193c0:	48 8d 05 a8 9c 05 00 	lea	rax, [rip + 367784]
 10193c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10193cb:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 10193d4:	e8 07 1a 01 00 	call	72199 <_runtime.printstring>
 10193d9:	e8 42 11 01 00 	call	69954 <_runtime.printunlock>
 10193de:	eb bd 	jmp	-67 <_runtime.printScavTrace+0x10d>
 10193e0:	e8 5b df 00 00 	call	57179 <_runtime.panicdivide>
 10193e5:	90 	nop
 10193e6:	e8 e5 77 03 00 	call	227301 <_runtime.morestack_noctxt>
 10193eb:	e9 a0 fe ff ff 	jmp	-352 <_runtime.printScavTrace>

_runtime.(*pageAlloc).resetScavengeAddr:
 10193f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10193f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10193fd:	76 79 	jbe	121 <_runtime.(*pageAlloc).resetScavengeAddr+0x88>
 10193ff:	48 83 ec 20 	sub	rsp, 32
 1019403:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1019408:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101940d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1019412:	84 00 	test	byte ptr [rax], al
 1019414:	48 8b 88 88 00 01 00 	mov	rcx, qword ptr [rax + 65672]
 101941b:	83 3d 52 e6 0d 00 00 	cmp	dword ptr [rip + 910930], 0
 1019422:	7f 35 	jg	53 <_runtime.(*pageAlloc).resetScavengeAddr+0x69>
 1019424:	48 f7 d9 	neg	rcx
 1019427:	f0 	lock
 1019428:	48 0f c1 88 88 00 01 00 	xadd	qword ptr [rax + 65672], rcx
 1019430:	48 8b 88 98 00 01 00 	mov	rcx, qword ptr [rax + 65688]
 1019437:	48 c1 e1 16 	shl	rcx, 22
 101943b:	48 ba ff ff ff ff ff 7f ff ff 	movabs	rdx, -140737488355329
 1019445:	48 01 d1 	add	rcx, rdx
 1019448:	48 89 88 80 00 01 00 	mov	qword ptr [rax + 65664], rcx
 101944f:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1019454:	48 83 c4 20 	add	rsp, 32
 1019458:	c3 	ret
 1019459:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101945e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1019462:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1019467:	e8 24 fe ff ff 	call	-476 <_runtime.printScavTrace>
 101946c:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1019471:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1019476:	eb ac 	jmp	-84 <_runtime.(*pageAlloc).resetScavengeAddr+0x34>
 1019478:	e8 53 77 03 00 	call	227155 <_runtime.morestack_noctxt>
 101947d:	e9 6e ff ff ff 	jmp	-146 <_runtime.(*pageAlloc).resetScavengeAddr>
 1019482:	cc 	int3
 1019483:	cc 	int3
 1019484:	cc 	int3
 1019485:	cc 	int3
 1019486:	cc 	int3
 1019487:	cc 	int3
 1019488:	cc 	int3
 1019489:	cc 	int3
 101948a:	cc 	int3
 101948b:	cc 	int3
 101948c:	cc 	int3
 101948d:	cc 	int3
 101948e:	cc 	int3
 101948f:	cc 	int3

_runtime.(*pageAlloc).scavengeOne:
 1019490:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019499:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 101949e:	48 3b 41 18 	cmp	rax, qword ptr [rcx + 24]
 10194a2:	0f 86 3f 06 00 00 	jbe	1599 <_runtime.(*pageAlloc).scavengeOne+0x657>
 10194a8:	48 81 ec 88 00 00 00 	sub	rsp, 136
 10194af:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 10194b7:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 10194bf:	48 8b 05 d2 e3 0d 00 	mov	rax, qword ptr [rip + 910290]
 10194c6:	48 c1 e8 0d 	shr	rax, 13
 10194ca:	48 83 f8 01 	cmp	rax, 1
 10194ce:	b9 01 00 00 00 	mov	ecx, 1
 10194d3:	48 0f 42 c1 	cmovb	rax, rcx
 10194d7:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10194dc:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 10194e4:	48 89 ca 	mov	rdx, rcx
 10194e7:	48 c1 e9 0d 	shr	rcx, 13
 10194eb:	48 8d 59 01 	lea	rbx, [rcx + 1]
 10194ef:	48 f7 c2 ff 1f 00 00 	test	rdx, 8191
 10194f6:	48 0f 45 cb 	cmovne	rcx, rbx
 10194fa:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10194ff:	90 	nop
 1019500:	0f b6 94 24 a0 00 00 00 	movzx	edx, byte ptr [rsp + 160]
 1019508:	84 d2 	test	dl, dl
 101950a:	0f 84 7e 05 00 00 	je	1406 <_runtime.(*pageAlloc).scavengeOne+0x5fe>
 1019510:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1019518:	84 03 	test	byte ptr [rbx], al
 101951a:	48 8b b3 80 00 01 00 	mov	rsi, qword ptr [rbx + 65664]
 1019521:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 101952b:	4c 8d 04 37 	lea	r8, [rdi + rsi]
 101952f:	4d 89 c1 	mov	r9, r8
 1019532:	49 c1 e8 16 	shr	r8, 22
 1019536:	4c 39 83 90 00 01 00 	cmp	qword ptr [rbx + 65680], r8
 101953d:	76 33 	jbe	51 <_runtime.(*pageAlloc).scavengeOne+0xe2>
 101953f:	90 	nop
 1019540:	84 d2 	test	dl, dl
 1019542:	74 1c 	je	28 <_runtime.(*pageAlloc).scavengeOne+0xd0>
 1019544:	48 c7 84 24 a8 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 168], 0
 1019550:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1019558:	48 81 c4 88 00 00 00 	add	rsp, 136
 101955f:	c3 	ret
 1019560:	48 8b 83 c0 00 01 00 	mov	rax, qword ptr [rbx + 65728]
 1019567:	48 89 04 24 	mov	qword ptr [rsp], rax
 101956b:	e8 a0 ed fe ff 	call	-70240 <_runtime.unlock>
 1019570:	eb d2 	jmp	-46 <_runtime.(*pageAlloc).scavengeOne+0xb4>
 1019572:	4c 89 4c 24 68 	mov	qword ptr [rsp + 104], r9
 1019577:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 101957c:	48 8d 83 a0 00 01 00 	lea	rax, [rbx + 65696]
 1019583:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019587:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 101958c:	e8 9f b4 00 00 	call	46239 <_runtime.(*addrRanges).contains>
 1019591:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 1019596:	0f 84 e0 04 00 00 	je	1248 <_runtime.(*pageAlloc).scavengeOne+0x5ec>
 101959c:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 10195a4:	48 8b 4b 68 	mov	rcx, qword ptr [rbx + 104]
 10195a8:	48 8b 73 60 	mov	rsi, qword ptr [rbx + 96]
 10195ac:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10195b1:	48 39 c8 	cmp	rax, rcx
 10195b4:	0f 83 27 05 00 00 	jae	1319 <_runtime.(*pageAlloc).scavengeOne+0x651>
 10195ba:	48 8b 34 c6 	mov	rsi, qword ptr [rsi + 8*rax]
 10195be:	48 0f ba e6 3f 	bt	rsi, 63
 10195c3:	0f 83 a0 04 00 00 	jae	1184 <_runtime.(*pageAlloc).scavengeOne+0x5d9>
 10195c9:	b9 00 00 20 00 	mov	ecx, 2097152
 10195ce:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10195d3:	48 39 f1 	cmp	rcx, rsi
 10195d6:	72 6c 	jb	108 <_runtime.(*pageAlloc).scavengeOne+0x1b4>
 10195d8:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 10195dd:	48 c1 ea 23 	shr	rdx, 35
 10195e1:	48 81 fa 00 20 00 00 	cmp	rdx, 8192
 10195e8:	0f 83 e6 04 00 00 	jae	1254 <_runtime.(*pageAlloc).scavengeOne+0x644>
 10195ee:	48 8b 4c d3 78 	mov	rcx, qword ptr [rbx + 8*rdx + 120]
 10195f3:	84 01 	test	byte ptr [rcx], al
 10195f5:	48 8b 93 80 00 01 00 	mov	rdx, qword ptr [rbx + 65664]
 10195fc:	48 25 ff 1f 00 00 	and	rax, 8191
 1019602:	48 c1 e0 07 	shl	rax, 7
 1019606:	48 01 c8 	add	rax, rcx
 1019609:	48 89 04 24 	mov	qword ptr [rsp], rax
 101960d:	48 81 e2 ff ff 3f 00 	and	rdx, 4194303
 1019614:	48 c1 ea 0d 	shr	rdx, 13
 1019618:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101961d:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1019622:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1019627:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101962c:	e8 3f 09 00 00 	call	2367 <_runtime.(*pallocData).findScavengeCandidate>
 1019631:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1019636:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101963b:	48 85 c9 	test	rcx, rcx
 101963e:	0f 85 b3 03 00 00 	jne	947 <_runtime.(*pageAlloc).scavengeOne+0x567>
 1019644:	0f 57 c0 	xorps	xmm0, xmm0
 1019647:	0f 11 44 24 70 	movups	xmmword ptr [rsp + 112], xmm0
 101964c:	48 8d 05 fd 51 03 00 	lea	rax, [rip + 217597]
 1019653:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1019658:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1019660:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1019665:	e9 f6 00 00 00 	jmp	246 <_runtime.(*pageAlloc).scavengeOne+0x2d0>
 101966a:	48 ff cb 	dec	rbx
 101966d:	4c 39 cb 	cmp	rbx, r9
 1019670:	0f 82 93 02 00 00 	jb	659 <_runtime.(*pageAlloc).scavengeOne+0x479>
 1019676:	49 8b 4b 68 	mov	rcx, qword ptr [r11 + 104]
 101967a:	4d 8b 6b 60 	mov	r13, qword ptr [r11 + 96]
 101967e:	48 39 cb 	cmp	rbx, rcx
 1019681:	0f 83 45 04 00 00 	jae	1093 <_runtime.(*pageAlloc).scavengeOne+0x63c>
 1019687:	4d 8b 6c dd 00 	mov	r13, qword ptr [r13 + 8*rbx]
 101968c:	49 0f ba e5 3f 	bt	r13, 63
 1019691:	0f 83 5f 02 00 00 	jae	607 <_runtime.(*pageAlloc).scavengeOne+0x466>
 1019697:	b9 00 00 20 00 	mov	ecx, 2097152
 101969c:	4c 39 e1 	cmp	rcx, r12
 101969f:	72 c9 	jb	-55 <_runtime.(*pageAlloc).scavengeOne+0x1da>
 10196a1:	49 89 dd 	mov	r13, rbx
 10196a4:	48 c1 eb 0d 	shr	rbx, 13
 10196a8:	48 81 fb 00 20 00 00 	cmp	rbx, 8192
 10196af:	0f 83 0a 04 00 00 	jae	1034 <_runtime.(*pageAlloc).scavengeOne+0x62f>
 10196b5:	4c 89 6c 24 58 	mov	qword ptr [rsp + 88], r13
 10196ba:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 10196bf:	4d 8d 34 db 	lea	r14, [r11 + 8*rbx]
 10196c3:	4d 8d 76 78 	lea	r14, [r14 + 120]
 10196c7:	4d 8b 36 	mov	r14, qword ptr [r14]
 10196ca:	4d 85 f6 	test	r14, r14
 10196cd:	0f 85 ba 01 00 00 	jne	442 <_runtime.(*pageAlloc).scavengeOne+0x3fd>
 10196d3:	b9 01 00 00 00 	mov	ecx, 1
 10196d8:	84 c9 	test	cl, cl
 10196da:	74 05 	je	5 <_runtime.(*pageAlloc).scavengeOne+0x251>
 10196dc:	4c 89 eb 	mov	rbx, r13
 10196df:	eb 89 	jmp	-119 <_runtime.(*pageAlloc).scavengeOne+0x1da>
 10196e1:	90 	nop
 10196e2:	40 84 ff 	test	dil, dil
 10196e5:	0f 84 76 01 00 00 	je	374 <_runtime.(*pageAlloc).scavengeOne+0x3d1>
 10196eb:	49 8b 44 db 78 	mov	rax, qword ptr [r11 + 8*rbx + 120]
 10196f0:	84 00 	test	byte ptr [rax], al
 10196f2:	90 	nop
 10196f3:	49 81 e5 ff 1f 00 00 	and	r13, 8191
 10196fa:	49 c1 e5 07 	shl	r13, 7
 10196fe:	4c 01 e8 	add	rax, r13
 1019701:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019705:	48 c7 44 24 08 ff 01 00 00 	mov	qword ptr [rsp + 8], 511
 101970e:	4c 89 64 24 10 	mov	qword ptr [rsp + 16], r12
 1019713:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1019718:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101971d:	e8 4e 08 00 00 	call	2126 <_runtime.(*pallocData).findScavengeCandidate>
 1019722:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1019727:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101972c:	48 85 c9 	test	rcx, rcx
 101972f:	0f 87 ba 00 00 00 	ja	186 <_runtime.(*pageAlloc).scavengeOne+0x35f>
 1019735:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101973a:	48 ff c8 	dec	rax
 101973d:	48 c1 e0 16 	shl	rax, 22
 1019741:	48 b9 ff ff 3f 00 00 80 ff ff 	movabs	rcx, -140737484161025
 101974b:	48 01 c8 	add	rax, rcx
 101974e:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1019756:	48 89 83 80 00 01 00 	mov	qword ptr [rbx + 65664], rax
 101975d:	48 89 d8 	mov	rax, rbx
 1019760:	48 8b 88 80 00 01 00 	mov	rcx, qword ptr [rax + 65664]
 1019767:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101976b:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 1019770:	48 8d 54 24 70 	lea	rdx, [rsp + 112]
 1019775:	ff d1 	call	rcx
 1019777:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101977c:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1019781:	48 89 cb 	mov	rbx, rcx
 1019784:	48 29 c1 	sub	rcx, rax
 1019787:	48 39 c3 	cmp	rbx, rax
 101978a:	be 00 00 00 00 	mov	esi, 0
 101978f:	48 0f 46 ce 	cmovbe	rcx, rsi
 1019793:	48 85 c9 	test	rcx, rcx
 1019796:	0f 84 07 02 00 00 	je	519 <_runtime.(*pageAlloc).scavengeOne+0x513>
 101979c:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 10197a1:	90 	nop
 10197a2:	0f b6 bc 24 a0 00 00 00 	movzx	edi, byte ptr [rsp + 160]
 10197aa:	40 84 ff 	test	dil, dil
 10197ad:	0f 84 ba 01 00 00 	je	442 <_runtime.(*pageAlloc).scavengeOne+0x4dd>
 10197b3:	90 	nop
 10197b4:	90 	nop
 10197b5:	49 b8 00 00 00 00 00 80 00 00 	movabs	r8, 140737488355328
 10197bf:	4e 8d 0c 00 	lea	r9, [rax + r8]
 10197c3:	49 c1 e9 16 	shr	r9, 22
 10197c7:	4c 89 4c 24 60 	mov	qword ptr [rsp + 96], r9
 10197cc:	49 ba ff ff ff ff ff 7f 00 00 	movabs	r10, 140737488355327
 10197d6:	4c 01 d3 	add	rbx, r10
 10197d9:	48 c1 eb 16 	shr	rbx, 22
 10197dd:	4c 8b 9c 24 90 00 00 00 	mov	r11, qword ptr [rsp + 144]
 10197e5:	4c 8b 64 24 40 	mov	r12, qword ptr [rsp + 64]
 10197ea:	e9 7e fe ff ff 	jmp	-386 <_runtime.(*pageAlloc).scavengeOne+0x1dd>
 10197ef:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 10197f4:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 10197fc:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1019800:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1019805:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101980a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101980f:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1019814:	e8 e7 02 00 00 	call	743 <_runtime.(*pageAlloc).scavengeRangeLocked>
 1019819:	90 	nop
 101981a:	0f b6 84 24 a0 00 00 00 	movzx	eax, byte ptr [rsp + 160]
 1019822:	84 c0 	test	al, al
 1019824:	74 21 	je	33 <_runtime.(*pageAlloc).scavengeOne+0x3b7>
 1019826:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101982b:	48 c1 e0 0d 	shl	rax, 13
 101982f:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 1019837:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 101983f:	48 81 c4 88 00 00 00 	add	rsp, 136
 1019846:	c3 	ret
 1019847:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 101984f:	48 8b 80 c0 00 01 00 	mov	rax, qword ptr [rax + 65728]
 1019856:	48 89 04 24 	mov	qword ptr [rsp], rax
 101985a:	e8 b1 ea fe ff 	call	-70991 <_runtime.unlock>
 101985f:	eb c5 	jmp	-59 <_runtime.(*pageAlloc).scavengeOne+0x396>
 1019861:	49 8b 83 c0 00 01 00 	mov	rax, qword ptr [r11 + 65728]
 1019868:	48 89 04 24 	mov	qword ptr [rsp], rax
 101986c:	e8 bf e8 fe ff 	call	-71489 <_runtime.lock>
 1019871:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1019876:	4c 8b 9c 24 90 00 00 00 	mov	r11, qword ptr [rsp + 144]
 101987e:	4c 8b 64 24 40 	mov	r12, qword ptr [rsp + 64]
 1019883:	4c 8b 6c 24 58 	mov	r13, qword ptr [rsp + 88]
 1019888:	e9 5e fe ff ff 	jmp	-418 <_runtime.(*pageAlloc).scavengeOne+0x25b>
 101988d:	49 81 e5 ff 1f 00 00 	and	r13, 8191
 1019894:	49 c1 e5 07 	shl	r13, 7
 1019898:	4b 8d 0c 2e 	lea	rcx, [r14 + r13]
 101989c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10198a0:	4c 89 64 24 08 	mov	qword ptr [rsp + 8], r12
 10198a5:	e8 66 05 00 00 	call	1382 <_runtime.(*pallocData).hasScavengeCandidate>
 10198aa:	0f b6 4c 24 10 	movzx	ecx, byte ptr [rsp + 16]
 10198af:	83 f1 01 	xor	ecx, 1
 10198b2:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10198b7:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 10198bc:	31 f6 	xor	esi, esi
 10198be:	0f b6 bc 24 a0 00 00 00 	movzx	edi, byte ptr [rsp + 160]
 10198c6:	49 b8 00 00 00 00 00 80 00 00 	movabs	r8, 140737488355328
 10198d0:	4c 8b 4c 24 60 	mov	r9, qword ptr [rsp + 96]
 10198d5:	49 ba ff ff ff ff ff 7f 00 00 	movabs	r10, 140737488355327
 10198df:	4c 8b 9c 24 90 00 00 00 	mov	r11, qword ptr [rsp + 144]
 10198e7:	4c 8b 64 24 40 	mov	r12, qword ptr [rsp + 64]
 10198ec:	4c 8b 6c 24 58 	mov	r13, qword ptr [rsp + 88]
 10198f1:	e9 e2 fd ff ff 	jmp	-542 <_runtime.(*pageAlloc).scavengeOne+0x248>
 10198f6:	49 c1 ed 15 	shr	r13, 21
 10198fa:	49 81 e5 ff ff 1f 00 	and	r13, 2097151
 1019901:	4c 89 e9 	mov	rcx, r13
 1019904:	e9 93 fd ff ff 	jmp	-621 <_runtime.(*pageAlloc).scavengeOne+0x20c>
 1019909:	90 	nop
 101990a:	40 84 ff 	test	dil, dil
 101990d:	74 1c 	je	28 <_runtime.(*pageAlloc).scavengeOne+0x49b>
 101990f:	48 ff c8 	dec	rax
 1019912:	49 89 83 80 00 01 00 	mov	qword ptr [r11 + 65664], rax
 1019919:	48 b9 ff ff 3f 00 00 80 ff ff 	movabs	rcx, -140737484161025
 1019923:	4c 89 db 	mov	rbx, r11
 1019926:	e9 32 fe ff ff 	jmp	-462 <_runtime.(*pageAlloc).scavengeOne+0x2cd>
 101992b:	49 8b 83 c0 00 01 00 	mov	rax, qword ptr [r11 + 65728]
 1019932:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019936:	e8 f5 e7 fe ff 	call	-71691 <_runtime.lock>
 101993b:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1019940:	31 f6 	xor	esi, esi
 1019942:	0f b6 bc 24 a0 00 00 00 	movzx	edi, byte ptr [rsp + 160]
 101994a:	49 b8 00 00 00 00 00 80 00 00 	movabs	r8, 140737488355328
 1019954:	49 ba ff ff ff ff ff 7f 00 00 	movabs	r10, 140737488355327
 101995e:	4c 8b 9c 24 90 00 00 00 	mov	r11, qword ptr [rsp + 144]
 1019966:	4c 8b 64 24 40 	mov	r12, qword ptr [rsp + 64]
 101996b:	eb a2 	jmp	-94 <_runtime.(*pageAlloc).scavengeOne+0x47f>
 101996d:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 1019972:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 101997a:	48 8b 88 c0 00 01 00 	mov	rcx, qword ptr [rax + 65728]
 1019981:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1019985:	e8 86 e9 fe ff 	call	-71290 <_runtime.unlock>
 101998a:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 101998f:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1019994:	31 f6 	xor	esi, esi
 1019996:	0f b6 bc 24 a0 00 00 00 	movzx	edi, byte ptr [rsp + 160]
 101999e:	e9 10 fe ff ff 	jmp	-496 <_runtime.(*pageAlloc).scavengeOne+0x323>
 10199a3:	48 b8 00 00 00 00 00 80 ff ff 	movabs	rax, -140737488355328
 10199ad:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 10199b5:	48 89 81 80 00 01 00 	mov	qword ptr [rcx + 65664], rax
 10199bc:	90 	nop
 10199bd:	0f b6 84 24 a0 00 00 00 	movzx	eax, byte ptr [rsp + 160]
 10199c5:	84 c0 	test	al, al
 10199c7:	74 1c 	je	28 <_runtime.(*pageAlloc).scavengeOne+0x555>
 10199c9:	48 c7 84 24 a8 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 168], 0
 10199d5:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 10199dd:	48 81 c4 88 00 00 00 	add	rsp, 136
 10199e4:	c3 	ret
 10199e5:	48 8b 81 c0 00 01 00 	mov	rax, qword ptr [rcx + 65728]
 10199ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10199f0:	e8 1b e9 fe ff 	call	-71397 <_runtime.unlock>
 10199f5:	eb d2 	jmp	-46 <_runtime.(*pageAlloc).scavengeOne+0x539>
 10199f7:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10199fc:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1019a04:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1019a08:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1019a0d:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1019a12:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1019a17:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1019a1c:	e8 df 00 00 00 	call	223 <_runtime.(*pageAlloc).scavengeRangeLocked>
 1019a21:	90 	nop
 1019a22:	0f b6 84 24 a0 00 00 00 	movzx	eax, byte ptr [rsp + 160]
 1019a2a:	84 c0 	test	al, al
 1019a2c:	74 21 	je	33 <_runtime.(*pageAlloc).scavengeOne+0x5bf>
 1019a2e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1019a33:	48 c1 e0 0d 	shl	rax, 13
 1019a37:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 1019a3f:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1019a47:	48 81 c4 88 00 00 00 	add	rsp, 136
 1019a4e:	c3 	ret
 1019a4f:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1019a57:	48 8b 80 c0 00 01 00 	mov	rax, qword ptr [rax + 65728]
 1019a5e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019a62:	e8 a9 e8 fe ff 	call	-71511 <_runtime.unlock>
 1019a67:	eb c5 	jmp	-59 <_runtime.(*pageAlloc).scavengeOne+0x59e>
 1019a69:	48 c1 ee 15 	shr	rsi, 21
 1019a6d:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 1019a74:	48 89 f1 	mov	rcx, rsi
 1019a77:	e9 52 fb ff ff 	jmp	-1198 <_runtime.(*pageAlloc).scavengeOne+0x13e>
 1019a7c:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 1019a84:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 1019a89:	e9 b6 fb ff ff 	jmp	-1098 <_runtime.(*pageAlloc).scavengeOne+0x1b4>
 1019a8e:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1019a96:	84 00 	test	byte ptr [rax], al
 1019a98:	48 8b 88 c0 00 01 00 	mov	rcx, qword ptr [rax + 65728]
 1019a9f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1019aa3:	e8 88 e6 fe ff 	call	-72056 <_runtime.lock>
 1019aa8:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1019aad:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1019ab2:	0f b6 94 24 a0 00 00 00 	movzx	edx, byte ptr [rsp + 160]
 1019aba:	e9 51 fa ff ff 	jmp	-1455 <_runtime.(*pageAlloc).scavengeOne+0x80>
 1019abf:	48 89 d8 	mov	rax, rbx
 1019ac2:	b9 00 20 00 00 	mov	ecx, 8192
 1019ac7:	e8 94 98 03 00 	call	235668 <_runtime.panicIndexU>
 1019acc:	48 89 d8 	mov	rax, rbx
 1019acf:	e8 8c 98 03 00 	call	235660 <_runtime.panicIndexU>
 1019ad4:	48 89 d0 	mov	rax, rdx
 1019ad7:	b9 00 20 00 00 	mov	ecx, 8192
 1019adc:	e8 7f 98 03 00 	call	235647 <_runtime.panicIndexU>
 1019ae1:	e8 7a 98 03 00 	call	235642 <_runtime.panicIndexU>
 1019ae6:	90 	nop
 1019ae7:	e8 14 6c 02 00 	call	158740 <_runtime.morestackc>
 1019aec:	e9 9f f9 ff ff 	jmp	-1633 <_runtime.(*pageAlloc).scavengeOne>
 1019af1:	cc 	int3
 1019af2:	cc 	int3
 1019af3:	cc 	int3
 1019af4:	cc 	int3
 1019af5:	cc 	int3
 1019af6:	cc 	int3
 1019af7:	cc 	int3
 1019af8:	cc 	int3
 1019af9:	cc 	int3
 1019afa:	cc 	int3
 1019afb:	cc 	int3
 1019afc:	cc 	int3
 1019afd:	cc 	int3
 1019afe:	cc 	int3
 1019aff:	cc 	int3

_runtime.(*pageAlloc).scavengeRangeLocked:
 1019b00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019b09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1019b0d:	0f 86 05 01 00 00 	jbe	261 <_runtime.(*pageAlloc).scavengeRangeLocked+0x118>
 1019b13:	48 83 ec 28 	sub	rsp, 40
 1019b17:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1019b1c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1019b21:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1019b26:	84 02 	test	byte ptr [rdx], al
 1019b28:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1019b2d:	48 89 c3 	mov	rbx, rax
 1019b30:	48 c1 e8 0d 	shr	rax, 13
 1019b34:	48 3d 00 20 00 00 	cmp	rax, 8192
 1019b3a:	0f 83 cd 00 00 00 	jae	205 <_runtime.(*pageAlloc).scavengeRangeLocked+0x10d>
 1019b40:	48 8b 44 c2 78 	mov	rax, qword ptr [rdx + 8*rax + 120]
 1019b45:	84 00 	test	byte ptr [rax], al
 1019b47:	48 81 e3 ff 1f 00 00 	and	rbx, 8191
 1019b4e:	48 c1 e3 07 	shl	rbx, 7
 1019b52:	48 8d 04 18 	lea	rax, [rax + rbx]
 1019b56:	48 8d 40 40 	lea	rax, [rax + 64]
 1019b5a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019b5e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1019b63:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1019b68:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1019b6d:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1019b72:	e8 d9 8c 00 00 	call	36057 <_runtime.(*pageBits).setRange>
 1019b77:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1019b7c:	48 c1 e0 0d 	shl	rax, 13
 1019b80:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1019b85:	48 c1 e1 16 	shl	rcx, 22
 1019b89:	48 01 c8 	add	rax, rcx
 1019b8c:	48 b9 ff ff ff ff ff 7f ff ff 	movabs	rcx, -140737488355329
 1019b96:	48 01 c1 	add	rcx, rax
 1019b99:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1019b9e:	48 89 8a 80 00 01 00 	mov	qword ptr [rdx + 65664], rcx
 1019ba5:	80 ba d0 00 01 00 00 	cmp	byte ptr [rdx + 65744], 0
 1019bac:	74 0a 	je	10 <_runtime.(*pageAlloc).scavengeRangeLocked+0xb8>
 1019bae:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1019bb3:	48 83 c4 28 	add	rsp, 40
 1019bb7:	c3 	ret
 1019bb8:	48 b9 00 00 00 00 00 80 ff ff 	movabs	rcx, -140737488355328
 1019bc2:	48 01 c8 	add	rax, rcx
 1019bc5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019bc9:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1019bce:	48 c1 e0 0d 	shl	rax, 13
 1019bd2:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1019bd7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1019bdc:	c7 44 24 10 07 00 00 00 	mov	dword ptr [rsp + 16], 7
 1019be4:	e8 57 94 02 00 	call	169047 <_runtime.madvise>
 1019be9:	48 8d 05 80 ea 0d 00 	lea	rax, [rip + 912000]
 1019bf0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019bf4:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1019bf9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1019bfe:	e8 5d b5 00 00 	call	46429 <_runtime.mSysStatInc>
 1019c03:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1019c08:	48 83 c4 28 	add	rsp, 40
 1019c0c:	c3 	ret
 1019c0d:	b9 00 20 00 00 	mov	ecx, 8192
 1019c12:	e8 49 97 03 00 	call	235337 <_runtime.panicIndexU>
 1019c17:	90 	nop
 1019c18:	e8 b3 6f 03 00 	call	225203 <_runtime.morestack_noctxt>
 1019c1d:	e9 de fe ff ff 	jmp	-290 <_runtime.(*pageAlloc).scavengeRangeLocked>
 1019c22:	cc 	int3
 1019c23:	cc 	int3
 1019c24:	cc 	int3
 1019c25:	cc 	int3
 1019c26:	cc 	int3
 1019c27:	cc 	int3
 1019c28:	cc 	int3
 1019c29:	cc 	int3
 1019c2a:	cc 	int3
 1019c2b:	cc 	int3
 1019c2c:	cc 	int3
 1019c2d:	cc 	int3
 1019c2e:	cc 	int3
 1019c2f:	cc 	int3

_runtime.fillAligned:
 1019c30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019c39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1019c3d:	0f 86 b8 01 00 00 	jbe	440 <_runtime.fillAligned+0x1cb>
 1019c43:	48 83 ec 18 	sub	rsp, 24
 1019c47:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1019c4c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1019c51:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1019c56:	48 83 f8 04 	cmp	rax, 4
 1019c5a:	0f 87 b0 00 00 00 	ja	176 <_runtime.fillAligned+0xe0>
 1019c60:	48 83 f8 01 	cmp	rax, 1
 1019c64:	0f 84 92 00 00 00 	je	146 <_runtime.fillAligned+0xcc>
 1019c6a:	48 83 f8 02 	cmp	rax, 2
 1019c6e:	75 58 	jne	88 <_runtime.fillAligned+0x98>
 1019c70:	90 	nop
 1019c71:	48 ba 55 55 55 55 55 55 55 55 	movabs	rdx, 6148914691236517205
 1019c7b:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1019c80:	48 21 da 	and	rdx, rbx
 1019c83:	48 be 55 55 55 55 55 55 55 55 	movabs	rsi, 6148914691236517205
 1019c8d:	48 01 f2 	add	rdx, rsi
 1019c90:	48 09 da 	or	rdx, rbx
 1019c93:	48 09 d6 	or	rsi, rdx
 1019c96:	48 f7 d6 	not	rsi
 1019c99:	48 8d 48 ff 	lea	rcx, [rax - 1]
 1019c9d:	48 83 f9 40 	cmp	rcx, 64
 1019ca1:	48 19 c0 	sbb	rax, rax
 1019ca4:	48 89 f2 	mov	rdx, rsi
 1019ca7:	48 d3 ee 	shr	rsi, cl
 1019caa:	48 21 c6 	and	rsi, rax
 1019cad:	48 89 d0 	mov	rax, rdx
 1019cb0:	48 29 f2 	sub	rdx, rsi
 1019cb3:	48 09 c2 	or	rdx, rax
 1019cb6:	48 f7 d2 	not	rdx
 1019cb9:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1019cbe:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1019cc3:	48 83 c4 18 	add	rsp, 24
 1019cc7:	c3 	ret
 1019cc8:	48 83 f8 04 	cmp	rax, 4
 1019ccc:	0f 85 0f 01 00 00 	jne	271 <_runtime.fillAligned+0x1b1>
 1019cd2:	48 be 77 77 77 77 77 77 77 77 	movabs	rsi, 8608480567731124087
 1019cdc:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1019ce1:	48 21 d6 	and	rsi, rdx
 1019ce4:	48 bb 77 77 77 77 77 77 77 77 	movabs	rbx, 8608480567731124087
 1019cee:	48 01 de 	add	rsi, rbx
 1019cf1:	48 09 d6 	or	rsi, rdx
 1019cf4:	48 09 de 	or	rsi, rbx
 1019cf7:	48 f7 d6 	not	rsi
 1019cfa:	eb 9d 	jmp	-99 <_runtime.fillAligned+0x69>
 1019cfc:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1019d01:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1019d06:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1019d0b:	48 83 c4 18 	add	rsp, 24
 1019d0f:	c3 	ret
 1019d10:	48 83 f8 10 	cmp	rax, 16
 1019d14:	77 6a 	ja	106 <_runtime.fillAligned+0x150>
 1019d16:	48 83 f8 08 	cmp	rax, 8
 1019d1a:	75 2d 	jne	45 <_runtime.fillAligned+0x119>
 1019d1c:	48 be 7f 7f 7f 7f 7f 7f 7f 7f 	movabs	rsi, 9187201950435737471
 1019d26:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1019d2b:	48 21 d6 	and	rsi, rdx
 1019d2e:	48 bb 7f 7f 7f 7f 7f 7f 7f 7f 	movabs	rbx, 9187201950435737471
 1019d38:	48 01 de 	add	rsi, rbx
 1019d3b:	48 09 d6 	or	rsi, rdx
 1019d3e:	48 09 de 	or	rsi, rbx
 1019d41:	48 f7 d6 	not	rsi
 1019d44:	e9 50 ff ff ff 	jmp	-176 <_runtime.fillAligned+0x69>
 1019d49:	48 83 f8 10 	cmp	rax, 16
 1019d4d:	0f 85 8e 00 00 00 	jne	142 <_runtime.fillAligned+0x1b1>
 1019d53:	48 be ff 7f ff 7f ff 7f ff 7f 	movabs	rsi, 9223231297218904063
 1019d5d:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1019d62:	48 21 d6 	and	rsi, rdx
 1019d65:	48 bb ff 7f ff 7f ff 7f ff 7f 	movabs	rbx, 9223231297218904063
 1019d6f:	48 01 de 	add	rsi, rbx
 1019d72:	48 09 d6 	or	rsi, rdx
 1019d75:	48 09 de 	or	rsi, rbx
 1019d78:	48 f7 d6 	not	rsi
 1019d7b:	e9 19 ff ff ff 	jmp	-231 <_runtime.fillAligned+0x69>
 1019d80:	48 83 f8 20 	cmp	rax, 32
 1019d84:	75 2d 	jne	45 <_runtime.fillAligned+0x183>
 1019d86:	48 be ff ff ff 7f ff ff ff 7f 	movabs	rsi, 9223372034707292159
 1019d90:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1019d95:	48 21 d6 	and	rsi, rdx
 1019d98:	48 bb ff ff ff 7f ff ff ff 7f 	movabs	rbx, 9223372034707292159
 1019da2:	48 01 de 	add	rsi, rbx
 1019da5:	48 09 d6 	or	rsi, rdx
 1019da8:	48 09 de 	or	rsi, rbx
 1019dab:	48 f7 d6 	not	rsi
 1019dae:	e9 e6 fe ff ff 	jmp	-282 <_runtime.fillAligned+0x69>
 1019db3:	48 83 f8 40 	cmp	rax, 64
 1019db7:	75 28 	jne	40 <_runtime.fillAligned+0x1b1>
 1019db9:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1019dbe:	48 89 f2 	mov	rdx, rsi
 1019dc1:	48 0f ba f6 3f 	btr	rsi, 63
 1019dc6:	48 bb ff ff ff ff ff ff ff 7f 	movabs	rbx, 9223372036854775807
 1019dd0:	48 01 de 	add	rsi, rbx
 1019dd3:	48 09 d6 	or	rsi, rdx
 1019dd6:	48 09 de 	or	rsi, rbx
 1019dd9:	48 f7 d6 	not	rsi
 1019ddc:	e9 b8 fe ff ff 	jmp	-328 <_runtime.fillAligned+0x69>
 1019de1:	48 8d 05 d3 95 05 00 	lea	rax, [rip + 366035]
 1019de8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019dec:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1019df5:	e8 66 ef 00 00 	call	61286 <_runtime.throw>
 1019dfa:	90 	nop
 1019dfb:	e8 d0 6d 03 00 	call	224720 <_runtime.morestack_noctxt>
 1019e00:	e9 2b fe ff ff 	jmp	-469 <_runtime.fillAligned>
 1019e05:	cc 	int3
 1019e06:	cc 	int3
 1019e07:	cc 	int3
 1019e08:	cc 	int3
 1019e09:	cc 	int3
 1019e0a:	cc 	int3
 1019e0b:	cc 	int3
 1019e0c:	cc 	int3
 1019e0d:	cc 	int3
 1019e0e:	cc 	int3
 1019e0f:	cc 	int3

_runtime.(*pallocData).hasScavengeCandidate:
 1019e10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019e19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1019e1d:	0f 86 34 01 00 00 	jbe	308 <_runtime.(*pallocData).hasScavengeCandidate+0x147>
 1019e23:	48 83 ec 28 	sub	rsp, 40
 1019e27:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1019e2c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1019e31:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1019e36:	48 8d 48 ff 	lea	rcx, [rax - 1]
 1019e3a:	48 85 c8 	test	rax, rcx
 1019e3d:	0f 85 c4 00 00 00 	jne	196 <_runtime.(*pallocData).hasScavengeCandidate+0xf7>
 1019e43:	48 85 c0 	test	rax, rax
 1019e46:	0f 84 bb 00 00 00 	je	187 <_runtime.(*pallocData).hasScavengeCandidate+0xf7>
 1019e4c:	48 83 f8 40 	cmp	rax, 64
 1019e50:	77 66 	ja	102 <_runtime.(*pallocData).hasScavengeCandidate+0xa8>
 1019e52:	b9 07 00 00 00 	mov	ecx, 7
 1019e57:	eb 0e 	jmp	14 <_runtime.(*pallocData).hasScavengeCandidate+0x57>
 1019e59:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1019e5e:	48 8d 4a ff 	lea	rcx, [rdx - 1]
 1019e62:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1019e67:	48 85 c9 	test	rcx, rcx
 1019e6a:	7c 3d 	jl	61 <_runtime.(*pallocData).hasScavengeCandidate+0x99>
 1019e6c:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1019e71:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1019e76:	84 02 	test	byte ptr [rdx], al
 1019e78:	48 8b 5c ca 40 	mov	rbx, qword ptr [rdx + 8*rcx + 64]
 1019e7d:	48 8b 34 ca 	mov	rsi, qword ptr [rdx + 8*rcx]
 1019e81:	48 09 f3 	or	rbx, rsi
 1019e84:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1019e88:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1019e8d:	e8 9e fd ff ff 	call	-610 <_runtime.fillAligned>
 1019e92:	48 83 7c 24 10 ff 	cmp	qword ptr [rsp + 16], -1
 1019e98:	74 bf 	je	-65 <_runtime.(*pallocData).hasScavengeCandidate+0x49>
 1019e9a:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 1019e9f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1019ea4:	48 83 c4 28 	add	rsp, 40
 1019ea8:	c3 	ret
 1019ea9:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 1019eae:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1019eb3:	48 83 c4 28 	add	rsp, 40
 1019eb7:	c3 	ret
 1019eb8:	e8 e3 05 01 00 	call	67043 <_runtime.printlock>
 1019ebd:	48 8d 05 23 9b 05 00 	lea	rax, [rip + 367395]
 1019ec4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019ec8:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1019ed1:	e8 0a 0f 01 00 	call	69386 <_runtime.printstring>
 1019ed6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1019edb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019edf:	e8 3c 0c 01 00 	call	68668 <_runtime.printuint>
 1019ee4:	e8 47 08 01 00 	call	67655 <_runtime.printnl>
 1019ee9:	e8 32 06 01 00 	call	67122 <_runtime.printunlock>
 1019eee:	48 8d 05 77 98 05 00 	lea	rax, [rip + 366711]
 1019ef5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019ef9:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1019f02:	e8 59 ee 00 00 	call	61017 <_runtime.throw>
 1019f07:	e8 94 05 01 00 	call	66964 <_runtime.printlock>
 1019f0c:	48 8d 05 d4 9a 05 00 	lea	rax, [rip + 367316]
 1019f13:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019f17:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1019f20:	e8 bb 0e 01 00 	call	69307 <_runtime.printstring>
 1019f25:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1019f2a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019f2e:	e8 ed 0b 01 00 	call	68589 <_runtime.printuint>
 1019f33:	e8 f8 07 01 00 	call	67576 <_runtime.printnl>
 1019f38:	e8 e3 05 01 00 	call	67043 <_runtime.printunlock>
 1019f3d:	48 8d 05 43 bf 05 00 	lea	rax, [rip + 376643]
 1019f44:	48 89 04 24 	mov	qword ptr [rsp], rax
 1019f48:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 1019f51:	e8 0a ee 00 00 	call	60938 <_runtime.throw>
 1019f56:	90 	nop
 1019f57:	e8 74 6c 03 00 	call	224372 <_runtime.morestack_noctxt>
 1019f5c:	e9 af fe ff ff 	jmp	-337 <_runtime.(*pallocData).hasScavengeCandidate>
 1019f61:	cc 	int3
 1019f62:	cc 	int3
 1019f63:	cc 	int3
 1019f64:	cc 	int3
 1019f65:	cc 	int3
 1019f66:	cc 	int3
 1019f67:	cc 	int3
 1019f68:	cc 	int3
 1019f69:	cc 	int3
 1019f6a:	cc 	int3
 1019f6b:	cc 	int3
 1019f6c:	cc 	int3
 1019f6d:	cc 	int3
 1019f6e:	cc 	int3
 1019f6f:	cc 	int3

_runtime.(*pallocData).findScavengeCandidate:
 1019f70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1019f79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1019f7d:	0f 86 5a 04 00 00 	jbe	1114 <_runtime.(*pallocData).findScavengeCandidate+0x46d>
 1019f83:	48 83 ec 48 	sub	rsp, 72
 1019f87:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1019f8c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1019f91:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1019f96:	48 8d 5a ff 	lea	rbx, [rdx - 1]
 1019f9a:	48 85 da 	test	rdx, rbx
 1019f9d:	0f 85 ea 03 00 00 	jne	1002 <_runtime.(*pallocData).findScavengeCandidate+0x41d>
 1019fa3:	48 85 d2 	test	rdx, rdx
 1019fa6:	0f 84 e1 03 00 00 	je	993 <_runtime.(*pallocData).findScavengeCandidate+0x41d>
 1019fac:	48 83 fa 40 	cmp	rdx, 64
 1019fb0:	0f 87 88 03 00 00 	ja	904 <_runtime.(*pallocData).findScavengeCandidate+0x3ce>
 1019fb6:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1019fbb:	48 85 db 	test	rbx, rbx
 1019fbe:	0f 85 2f 03 00 00 	jne	815 <_runtime.(*pallocData).findScavengeCandidate+0x383>
 1019fc4:	48 89 d0 	mov	rax, rdx
 1019fc7:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1019fcc:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1019fd1:	48 c1 eb 06 	shr	rbx, 6
 1019fd5:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 1019fda:	eb 1e 	jmp	30 <_runtime.(*pallocData).findScavengeCandidate+0x8a>
 1019fdc:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 1019fe1:	48 8d 5f ff 	lea	rbx, [rdi - 1]
 1019fe5:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 1019fea:	4c 8b 44 24 50 	mov	r8, qword ptr [rsp + 80]
 1019fef:	48 89 f8 	mov	rax, rdi
 1019ff2:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1019ff7:	4c 89 c6 	mov	rsi, r8
 1019ffa:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1019fff:	48 85 db 	test	rbx, rbx
 101a002:	0f 8c e3 02 00 00 	jl	739 <_runtime.(*pallocData).findScavengeCandidate+0x37b>
 101a008:	84 06 	test	byte ptr [rsi], al
 101a00a:	48 83 fb 08 	cmp	rbx, 8
 101a00e:	0f 83 1d 03 00 00 	jae	797 <_runtime.(*pallocData).findScavengeCandidate+0x3c1>
 101a014:	48 8b 4c de 40 	mov	rcx, qword ptr [rsi + 8*rbx + 64]
 101a019:	48 8b 14 de 	mov	rdx, qword ptr [rsi + 8*rbx]
 101a01d:	48 09 ca 	or	rdx, rcx
 101a020:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101a024:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101a029:	e8 02 fc ff ff 	call	-1022 <_runtime.fillAligned>
 101a02e:	48 83 7c 24 10 ff 	cmp	qword ptr [rsp + 16], -1
 101a034:	74 a6 	je	-90 <_runtime.(*pallocData).findScavengeCandidate+0x6c>
 101a036:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101a03b:	48 85 c0 	test	rax, rax
 101a03e:	0f 8c 8b 02 00 00 	jl	651 <_runtime.(*pallocData).findScavengeCandidate+0x35f>
 101a044:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101a049:	84 02 	test	byte ptr [rdx], al
 101a04b:	48 83 f8 08 	cmp	rax, 8
 101a04f:	0f 83 d2 02 00 00 	jae	722 <_runtime.(*pallocData).findScavengeCandidate+0x3b7>
 101a055:	48 8b 4c c2 40 	mov	rcx, qword ptr [rdx + 8*rax + 64]
 101a05a:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 101a05e:	48 09 cb 	or	rbx, rcx
 101a061:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101a065:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 101a06a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101a06f:	e8 bc fb ff ff 	call	-1092 <_runtime.fillAligned>
 101a074:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101a079:	48 89 c1 	mov	rcx, rax
 101a07c:	48 f7 d0 	not	rax
 101a07f:	48 ba 00 00 00 00 01 00 00 00 	movabs	rdx, 4294967296
 101a089:	48 39 d0 	cmp	rax, rdx
 101a08c:	0f 82 36 02 00 00 	jb	566 <_runtime.(*pallocData).findScavengeCandidate+0x358>
 101a092:	48 c1 e8 20 	shr	rax, 32
 101a096:	bb 20 00 00 00 	mov	ebx, 32
 101a09b:	48 3d 00 00 01 00 	cmp	rax, 65536
 101a0a1:	72 08 	jb	8 <_runtime.(*pallocData).findScavengeCandidate+0x13b>
 101a0a3:	48 c1 e8 10 	shr	rax, 16
 101a0a7:	48 83 c3 10 	add	rbx, 16
 101a0ab:	48 3d 00 01 00 00 	cmp	rax, 256
 101a0b1:	72 08 	jb	8 <_runtime.(*pallocData).findScavengeCandidate+0x14b>
 101a0b3:	48 c1 e8 08 	shr	rax, 8
 101a0b7:	48 83 c3 08 	add	rbx, 8
 101a0bb:	48 3d 00 01 00 00 	cmp	rax, 256
 101a0c1:	0f 83 56 02 00 00 	jae	598 <_runtime.(*pallocData).findScavengeCandidate+0x3ad>
 101a0c7:	48 8d 35 d2 17 0b 00 	lea	rsi, [rip + 726994]
 101a0ce:	0f b6 3c 30 	movzx	edi, byte ptr [rax + rsi]
 101a0d2:	4c 8d 04 1f 	lea	r8, [rdi + rbx]
 101a0d6:	4d 8d 40 c0 	lea	r8, [r8 - 64]
 101a0da:	49 f7 d8 	neg	r8
 101a0dd:	49 83 f8 40 	cmp	r8, 64
 101a0e1:	4d 19 c0 	sbb	r8, r8
 101a0e4:	4c 8b 4c 24 28 	mov	r9, qword ptr [rsp + 40]
 101a0e9:	4d 89 ca 	mov	r10, r9
 101a0ec:	49 c1 e1 06 	shl	r9, 6
 101a0f0:	4c 8d 1c 3b 	lea	r11, [rbx + rdi]
 101a0f4:	4f 8d 0c 19 	lea	r9, [r9 + r11]
 101a0f8:	4c 89 4c 24 30 	mov	qword ptr [rsp + 48], r9
 101a0fd:	49 f7 db 	neg	r11
 101a100:	48 89 c8 	mov	rax, rcx
 101a103:	4c 89 d9 	mov	rcx, r11
 101a106:	48 d3 e0 	shl	rax, cl
 101a109:	49 89 c3 	mov	r11, rax
 101a10c:	4c 21 c0 	and	rax, r8
 101a10f:	4d 85 c3 	test	r11, r8
 101a112:	0f 85 5d 01 00 00 	jne	349 <_runtime.(*pallocData).findScavengeCandidate+0x305>
 101a118:	48 8d 04 1f 	lea	rax, [rdi + rbx]
 101a11c:	49 8d 4a ff 	lea	rcx, [r10 - 1]
 101a120:	eb 1a 	jmp	26 <_runtime.(*pallocData).findScavengeCandidate+0x1cc>
 101a122:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 101a127:	48 ff cb 	dec	rbx
 101a12a:	48 ba 00 00 00 00 01 00 00 00 	movabs	rdx, 4294967296
 101a134:	4c 8b 4c 24 30 	mov	r9, qword ptr [rsp + 48]
 101a139:	48 89 d9 	mov	rcx, rbx
 101a13c:	48 85 c9 	test	rcx, rcx
 101a13f:	0f 8c a2 00 00 00 	jl	162 <_runtime.(*pallocData).findScavengeCandidate+0x277>
 101a145:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101a14a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101a14f:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101a154:	48 8b 54 c8 40 	mov	rdx, qword ptr [rax + 8*rcx + 64]
 101a159:	48 8b 1c c8 	mov	rbx, qword ptr [rax + 8*rcx]
 101a15d:	48 09 d3 	or	rbx, rdx
 101a160:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101a164:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 101a169:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101a16e:	e8 bd fa ff ff 	call	-1347 <_runtime.fillAligned>
 101a173:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101a178:	90 	nop
 101a179:	48 b9 00 00 00 00 01 00 00 00 	movabs	rcx, 4294967296
 101a183:	48 39 c8 	cmp	rax, rcx
 101a186:	0f 82 df 00 00 00 	jb	223 <_runtime.(*pallocData).findScavengeCandidate+0x2fb>
 101a18c:	48 89 c2 	mov	rdx, rax
 101a18f:	48 c1 e8 20 	shr	rax, 32
 101a193:	bb 20 00 00 00 	mov	ebx, 32
 101a198:	48 3d 00 00 01 00 	cmp	rax, 65536
 101a19e:	72 08 	jb	8 <_runtime.(*pallocData).findScavengeCandidate+0x238>
 101a1a0:	48 c1 e8 10 	shr	rax, 16
 101a1a4:	48 83 c3 10 	add	rbx, 16
 101a1a8:	48 3d 00 01 00 00 	cmp	rax, 256
 101a1ae:	72 08 	jb	8 <_runtime.(*pallocData).findScavengeCandidate+0x248>
 101a1b0:	48 c1 e8 08 	shr	rax, 8
 101a1b4:	48 83 c3 08 	add	rbx, 8
 101a1b8:	48 3d 00 01 00 00 	cmp	rax, 256
 101a1be:	0f 83 45 01 00 00 	jae	325 <_runtime.(*pallocData).findScavengeCandidate+0x399>
 101a1c4:	48 8d 35 d5 16 0b 00 	lea	rsi, [rip + 726741]
 101a1cb:	0f b6 04 30 	movzx	eax, byte ptr [rax + rsi]
 101a1cf:	48 01 d8 	add	rax, rbx
 101a1d2:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 101a1d7:	48 29 c3 	sub	rbx, rax
 101a1da:	48 8d 43 40 	lea	rax, [rbx + 64]
 101a1de:	48 85 d2 	test	rdx, rdx
 101a1e1:	0f 84 3b ff ff ff 	je	-197 <_runtime.(*pallocData).findScavengeCandidate+0x1b2>
 101a1e7:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101a1ec:	48 39 c8 	cmp	rax, rcx
 101a1ef:	48 89 c2 	mov	rdx, rax
 101a1f2:	48 0f 47 c1 	cmova	rax, rcx
 101a1f6:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101a1fb:	48 89 cb 	mov	rbx, rcx
 101a1fe:	48 29 c1 	sub	rcx, rax
 101a201:	48 8b 35 88 d6 0d 00 	mov	rsi, qword ptr [rip + 906888]
 101a208:	48 81 fe 00 20 00 00 	cmp	rsi, 8192
 101a20f:	76 55 	jbe	85 <_runtime.(*pallocData).findScavengeCandidate+0x2f6>
 101a211:	48 39 35 80 d6 0d 00 	cmp	qword ptr [rip + 906880], rsi
 101a218:	73 4c 	jae	76 <_runtime.(*pallocData).findScavengeCandidate+0x2f6>
 101a21a:	48 c1 ee 0d 	shr	rsi, 13
 101a21e:	90 	nop
 101a21f:	48 8d 3c 0e 	lea	rdi, [rsi + rcx]
 101a223:	48 8d 7f ff 	lea	rdi, [rdi - 1]
 101a227:	48 f7 de 	neg	rsi
 101a22a:	48 21 f7 	and	rdi, rsi
 101a22d:	48 39 df 	cmp	rdi, rbx
 101a230:	77 2f 	ja	47 <_runtime.(*pallocData).findScavengeCandidate+0x2f1>
 101a232:	48 29 d3 	sub	rbx, rdx
 101a235:	48 21 ce 	and	rsi, rcx
 101a238:	48 89 ca 	mov	rdx, rcx
 101a23b:	48 29 f1 	sub	rcx, rsi
 101a23e:	48 01 c1 	add	rcx, rax
 101a241:	48 39 de 	cmp	rsi, rbx
 101a244:	48 0f 43 c1 	cmovae	rax, rcx
 101a248:	48 0f 43 d6 	cmovae	rdx, rsi
 101a24c:	90 	nop
 101a24d:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 101a252:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 101a257:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101a25c:	48 83 c4 48 	add	rsp, 72
 101a260:	c3 	ret
 101a261:	48 89 ca 	mov	rdx, rcx
 101a264:	eb e7 	jmp	-25 <_runtime.(*pallocData).findScavengeCandidate+0x2dd>
 101a266:	48 89 ca 	mov	rdx, rcx
 101a269:	eb e2 	jmp	-30 <_runtime.(*pallocData).findScavengeCandidate+0x2dd>
 101a26b:	48 89 c2 	mov	rdx, rax
 101a26e:	31 db 	xor	ebx, ebx
 101a270:	e9 23 ff ff ff 	jmp	-221 <_runtime.(*pallocData).findScavengeCandidate+0x228>
 101a275:	48 39 d0 	cmp	rax, rdx
 101a278:	72 4a 	jb	74 <_runtime.(*pallocData).findScavengeCandidate+0x354>
 101a27a:	48 c1 e8 20 	shr	rax, 32
 101a27e:	b9 20 00 00 00 	mov	ecx, 32
 101a283:	48 3d 00 00 01 00 	cmp	rax, 65536
 101a289:	72 34 	jb	52 <_runtime.(*pallocData).findScavengeCandidate+0x34f>
 101a28b:	48 c1 e8 10 	shr	rax, 16
 101a28f:	48 8d 51 10 	lea	rdx, [rcx + 16]
 101a293:	48 3d 00 01 00 00 	cmp	rax, 256
 101a299:	72 08 	jb	8 <_runtime.(*pallocData).findScavengeCandidate+0x333>
 101a29b:	48 c1 e8 08 	shr	rax, 8
 101a29f:	48 83 c2 08 	add	rdx, 8
 101a2a3:	48 3d 00 01 00 00 	cmp	rax, 256
 101a2a9:	73 68 	jae	104 <_runtime.(*pallocData).findScavengeCandidate+0x3a3>
 101a2ab:	0f b6 0c 30 	movzx	ecx, byte ptr [rax + rsi]
 101a2af:	48 8d 04 11 	lea	rax, [rcx + rdx]
 101a2b3:	48 8d 40 c0 	lea	rax, [rax - 64]
 101a2b7:	48 f7 d8 	neg	rax
 101a2ba:	e9 28 ff ff ff 	jmp	-216 <_runtime.(*pallocData).findScavengeCandidate+0x277>
 101a2bf:	48 89 ca 	mov	rdx, rcx
 101a2c2:	eb cf 	jmp	-49 <_runtime.(*pallocData).findScavengeCandidate+0x323>
 101a2c4:	31 c9 	xor	ecx, ecx
 101a2c6:	eb bb 	jmp	-69 <_runtime.(*pallocData).findScavengeCandidate+0x313>
 101a2c8:	31 db 	xor	ebx, ebx
 101a2ca:	e9 cc fd ff ff 	jmp	-564 <_runtime.(*pallocData).findScavengeCandidate+0x12b>
 101a2cf:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 101a2d8:	48 c7 44 24 78 00 00 00 00 	mov	qword ptr [rsp + 120], 0
 101a2e1:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101a2e6:	48 83 c4 48 	add	rsp, 72
 101a2ea:	c3 	ret
 101a2eb:	48 89 d8 	mov	rax, rbx
 101a2ee:	e9 4b fd ff ff 	jmp	-693 <_runtime.(*pallocData).findScavengeCandidate+0xce>
 101a2f3:	48 8d 1c 13 	lea	rbx, [rbx + rdx]
 101a2f7:	48 8d 5b ff 	lea	rbx, [rbx - 1]
 101a2fb:	48 89 d0 	mov	rax, rdx
 101a2fe:	48 f7 da 	neg	rdx
 101a301:	48 21 da 	and	rdx, rbx
 101a304:	e9 be fc ff ff 	jmp	-834 <_runtime.(*pallocData).findScavengeCandidate+0x57>
 101a309:	b9 00 01 00 00 	mov	ecx, 256
 101a30e:	e8 4d 90 03 00 	call	233549 <_runtime.panicIndexU>
 101a313:	b9 00 01 00 00 	mov	ecx, 256
 101a318:	e8 43 90 03 00 	call	233539 <_runtime.panicIndexU>
 101a31d:	b9 00 01 00 00 	mov	ecx, 256
 101a322:	e8 39 90 03 00 	call	233529 <_runtime.panicIndexU>
 101a327:	b9 08 00 00 00 	mov	ecx, 8
 101a32c:	e8 1f 90 03 00 	call	233503 <_runtime.panicIndex>
 101a331:	48 89 d8 	mov	rax, rbx
 101a334:	b9 08 00 00 00 	mov	ecx, 8
 101a339:	e8 12 90 03 00 	call	233490 <_runtime.panicIndex>
 101a33e:	e8 5d 01 01 00 	call	65885 <_runtime.printlock>
 101a343:	48 8d 05 9d 96 05 00 	lea	rax, [rip + 366237]
 101a34a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a34e:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 101a357:	e8 84 0a 01 00 	call	68228 <_runtime.printstring>
 101a35c:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 101a361:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a365:	e8 b6 07 01 00 	call	67510 <_runtime.printuint>
 101a36a:	e8 c1 03 01 00 	call	66497 <_runtime.printnl>
 101a36f:	e8 ac 01 01 00 	call	65964 <_runtime.printunlock>
 101a374:	48 8d 05 f1 93 05 00 	lea	rax, [rip + 365553]
 101a37b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a37f:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 101a388:	e8 d3 e9 00 00 	call	59859 <_runtime.throw>
 101a38d:	e8 0e 01 01 00 	call	65806 <_runtime.printlock>
 101a392:	48 8d 05 4e 96 05 00 	lea	rax, [rip + 366158]
 101a399:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a39d:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 101a3a6:	e8 35 0a 01 00 	call	68149 <_runtime.printstring>
 101a3ab:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 101a3b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a3b4:	e8 67 07 01 00 	call	67431 <_runtime.printuint>
 101a3b9:	e8 72 03 01 00 	call	66418 <_runtime.printnl>
 101a3be:	e8 5d 01 01 00 	call	65885 <_runtime.printunlock>
 101a3c3:	48 8d 05 bd ba 05 00 	lea	rax, [rip + 375485]
 101a3ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a3ce:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 101a3d7:	e8 84 e9 00 00 	call	59780 <_runtime.throw>
 101a3dc:	90 	nop
 101a3dd:	e8 ee 67 03 00 	call	223214 <_runtime.morestack_noctxt>
 101a3e2:	e9 89 fb ff ff 	jmp	-1143 <_runtime.(*pallocData).findScavengeCandidate>
 101a3e7:	cc 	int3
 101a3e8:	cc 	int3
 101a3e9:	cc 	int3
 101a3ea:	cc 	int3
 101a3eb:	cc 	int3
 101a3ec:	cc 	int3
 101a3ed:	cc 	int3
 101a3ee:	cc 	int3
 101a3ef:	cc 	int3

_runtime.(*stackScanState).putPtr:
 101a3f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101a3f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101a3fd:	0f 86 01 01 00 00 	jbe	257 <_runtime.(*stackScanState).putPtr+0x114>
 101a403:	48 83 ec 20 	sub	rsp, 32
 101a407:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101a40c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101a411:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101a416:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 101a41b:	48 39 93 00 01 00 00 	cmp	qword ptr [rbx + 256], rdx
 101a422:	0f 87 c2 00 00 00 	ja	194 <_runtime.(*stackScanState).putPtr+0xfa>
 101a428:	48 39 93 08 01 00 00 	cmp	qword ptr [rbx + 264], rdx
 101a42f:	0f 86 b5 00 00 00 	jbe	181 <_runtime.(*stackScanState).putPtr+0xfa>
 101a435:	48 8d b3 18 01 00 00 	lea	rsi, [rbx + 280]
 101a43c:	0f b6 7c 24 38 	movzx	edi, byte ptr [rsp + 56]
 101a441:	40 84 ff 	test	dil, dil
 101a444:	74 07 	je	7 <_runtime.(*stackScanState).putPtr+0x5d>
 101a446:	48 8d b3 28 01 00 00 	lea	rsi, [rbx + 296]
 101a44d:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 101a452:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 101a455:	48 85 ff 	test	rdi, rdi
 101a458:	74 67 	je	103 <_runtime.(*stackScanState).putPtr+0xd1>
 101a45a:	48 81 7f 10 fc 00 00 00 	cmp	qword ptr [rdi + 16], 252
 101a462:	75 29 	jne	41 <_runtime.(*stackScanState).putPtr+0x9d>
 101a464:	48 8b bb 20 01 00 00 	mov	rdi, qword ptr [rbx + 288]
 101a46b:	48 85 ff 	test	rdi, rdi
 101a46e:	74 3c 	je	60 <_runtime.(*stackScanState).putPtr+0xbc>
 101a470:	48 c7 83 20 01 00 00 00 00 00 00 	mov	qword ptr [rbx + 288], 0
 101a47b:	48 c7 47 10 00 00 00 00 	mov	qword ptr [rdi + 16], 0
 101a483:	48 8b 1e 	mov	rbx, qword ptr [rsi]
 101a486:	48 89 5f 18 	mov	qword ptr [rdi + 24], rbx
 101a48a:	48 89 3e 	mov	qword ptr [rsi], rdi
 101a48d:	48 8b 47 10 	mov	rax, qword ptr [rdi + 16]
 101a491:	48 3d fc 00 00 00 	cmp	rax, 252
 101a497:	73 47 	jae	71 <_runtime.(*stackScanState).putPtr+0xf0>
 101a499:	48 89 54 c7 20 	mov	qword ptr [rdi + 8*rax + 32], rdx
 101a49e:	48 ff 47 10 	inc	qword ptr [rdi + 16]
 101a4a2:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101a4a7:	48 83 c4 20 	add	rsp, 32
 101a4ab:	c3 	ret
 101a4ac:	e8 1f 20 00 00 	call	8223 <_runtime.getempty>
 101a4b1:	48 8b 3c 24 	mov	rdi, qword ptr [rsp]
 101a4b5:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101a4ba:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 101a4bf:	eb ba 	jmp	-70 <_runtime.(*stackScanState).putPtr+0x8b>
 101a4c1:	e8 0a 20 00 00 	call	8202 <_runtime.getempty>
 101a4c6:	48 8b 3c 24 	mov	rdi, qword ptr [rsp]
 101a4ca:	0f 57 c0 	xorps	xmm0, xmm0
 101a4cd:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 101a4d1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101a4d6:	48 89 38 	mov	qword ptr [rax], rdi
 101a4d9:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101a4de:	eb ad 	jmp	-83 <_runtime.(*stackScanState).putPtr+0x9d>
 101a4e0:	b9 fc 00 00 00 	mov	ecx, 252
 101a4e5:	e8 66 8e 03 00 	call	233062 <_runtime.panicIndex>
 101a4ea:	48 8d 05 8f aa 05 00 	lea	rax, [rip + 371343]
 101a4f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a4f5:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 101a4fe:	e8 5d e8 00 00 	call	59485 <_runtime.throw>
 101a503:	90 	nop
 101a504:	e8 c7 66 03 00 	call	222919 <_runtime.morestack_noctxt>
 101a509:	e9 e2 fe ff ff 	jmp	-286 <_runtime.(*stackScanState).putPtr>
 101a50e:	cc 	int3
 101a50f:	cc 	int3

_runtime.(*stackScanState).getPtr:
 101a510:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101a519:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101a51d:	0f 86 2f 01 00 00 	jbe	303 <_runtime.(*stackScanState).getPtr+0x142>
 101a523:	48 83 ec 48 	sub	rsp, 72
 101a527:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 101a52c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 101a531:	0f 57 c0 	xorps	xmm0, xmm0
 101a534:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 101a539:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101a53e:	84 02 	test	byte ptr [rdx], al
 101a540:	48 8d 9a 18 01 00 00 	lea	rbx, [rdx + 280]
 101a547:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 101a54c:	48 8d 9a 28 01 00 00 	lea	rbx, [rdx + 296]
 101a553:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 101a558:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 101a55d:	31 c0 	xor	eax, eax
 101a55f:	eb 03 	jmp	3 <_runtime.(*stackScanState).getPtr+0x54>
 101a561:	48 ff c0 	inc	rax
 101a564:	48 83 f8 02 	cmp	rax, 2
 101a568:	0f 8d 9a 00 00 00 	jge	154 <_runtime.(*stackScanState).getPtr+0xf8>
 101a56e:	48 8b 74 c4 30 	mov	rsi, qword ptr [rsp + 8*rax + 48]
 101a573:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 101a576:	48 85 ff 	test	rdi, rdi
 101a579:	74 e6 	je	-26 <_runtime.(*stackScanState).getPtr+0x51>
 101a57b:	48 83 7f 10 00 	cmp	qword ptr [rdi + 16], 0
 101a580:	75 1f 	jne	31 <_runtime.(*stackScanState).getPtr+0x91>
 101a582:	4c 8b 82 20 01 00 00 	mov	r8, qword ptr [rdx + 288]
 101a589:	4d 85 c0 	test	r8, r8
 101a58c:	75 47 	jne	71 <_runtime.(*stackScanState).getPtr+0xc5>
 101a58e:	48 89 ba 20 01 00 00 	mov	qword ptr [rdx + 288], rdi
 101a595:	48 8b 7f 18 	mov	rdi, qword ptr [rdi + 24]
 101a599:	48 89 3e 	mov	qword ptr [rsi], rdi
 101a59c:	48 85 ff 	test	rdi, rdi
 101a59f:	74 c0 	je	-64 <_runtime.(*stackScanState).getPtr+0x51>
 101a5a1:	48 8b 57 10 	mov	rdx, qword ptr [rdi + 16]
 101a5a5:	48 8d 42 ff 	lea	rax, [rdx - 1]
 101a5a9:	48 89 47 10 	mov	qword ptr [rdi + 16], rax
 101a5ad:	48 3d fc 00 00 00 	cmp	rax, 252
 101a5b3:	0f 83 8e 00 00 00 	jae	142 <_runtime.(*stackScanState).getPtr+0x137>
 101a5b9:	48 8b 44 d7 18 	mov	rax, qword ptr [rdi + 8*rdx + 24]
 101a5be:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 101a5c3:	48 39 de 	cmp	rsi, rbx
 101a5c6:	0f 94 44 24 60 	sete	byte ptr [rsp + 96]
 101a5cb:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101a5d0:	48 83 c4 48 	add	rsp, 72
 101a5d4:	c3 	ret
 101a5d5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101a5da:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 101a5df:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 101a5e4:	4c 89 04 24 	mov	qword ptr [rsp], r8
 101a5e8:	e8 13 21 00 00 	call	8467 <_runtime.putempty>
 101a5ed:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101a5f2:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101a5f7:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 101a5fc:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 101a601:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 101a606:	eb 86 	jmp	-122 <_runtime.(*stackScanState).getPtr+0x7e>
 101a608:	48 8b 82 20 01 00 00 	mov	rax, qword ptr [rdx + 288]
 101a60f:	48 85 c0 	test	rax, rax
 101a612:	75 18 	jne	24 <_runtime.(*stackScanState).getPtr+0x11c>
 101a614:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 101a61d:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 101a622:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101a627:	48 83 c4 48 	add	rsp, 72
 101a62b:	c3 	ret
 101a62c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a630:	e8 cb 20 00 00 	call	8395 <_runtime.putempty>
 101a635:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101a63a:	48 c7 80 20 01 00 00 00 00 00 00 	mov	qword ptr [rax + 288], 0
 101a645:	eb cd 	jmp	-51 <_runtime.(*stackScanState).getPtr+0x104>
 101a647:	b9 fc 00 00 00 	mov	ecx, 252
 101a64c:	e8 ff 8c 03 00 	call	232703 <_runtime.panicIndex>
 101a651:	90 	nop
 101a652:	e8 79 65 03 00 	call	222585 <_runtime.morestack_noctxt>
 101a657:	e9 b4 fe ff ff 	jmp	-332 <_runtime.(*stackScanState).getPtr>
 101a65c:	cc 	int3
 101a65d:	cc 	int3
 101a65e:	cc 	int3
 101a65f:	cc 	int3

_runtime.(*stackScanState).addObject:
 101a660:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101a669:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101a66d:	0f 86 4e 01 00 00 	jbe	334 <_runtime.(*stackScanState).addObject+0x161>
 101a673:	48 83 ec 20 	sub	rsp, 32
 101a677:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101a67c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101a681:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101a686:	48 8b 9a 38 01 00 00 	mov	rbx, qword ptr [rdx + 312]
 101a68d:	48 85 db 	test	rbx, rbx
 101a690:	0f 84 d4 00 00 00 	je	212 <_runtime.(*stackScanState).addObject+0x10a>
 101a696:	48 8b 73 10 	mov	rsi, qword ptr [rbx + 16]
 101a69a:	48 85 f6 	test	rsi, rsi
 101a69d:	0f 8e bd 00 00 00 	jle	189 <_runtime.(*stackScanState).addObject+0x100>
 101a6a3:	48 8b ba 00 01 00 00 	mov	rdi, qword ptr [rdx + 256]
 101a6aa:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 101a6af:	4d 89 c1 	mov	r9, r8
 101a6b2:	49 29 f8 	sub	r8, rdi
 101a6b5:	48 8d 46 ff 	lea	rax, [rsi - 1]
 101a6b9:	48 83 f8 3f 	cmp	rax, 63
 101a6bd:	0f 83 f3 00 00 00 	jae	243 <_runtime.(*stackScanState).addObject+0x156>
 101a6c3:	48 c1 e0 05 	shl	rax, 5
 101a6c7:	8b 7c 03 20 	mov	edi, dword ptr [rbx + rax + 32]
 101a6cb:	44 8b 54 03 24 	mov	r10d, dword ptr [rbx + rax + 36]
 101a6d0:	44 01 d7 	add	edi, r10d
 101a6d3:	41 39 f8 	cmp	r8d, edi
 101a6d6:	0f 82 c1 00 00 00 	jb	193 <_runtime.(*stackScanState).addObject+0x13d>
 101a6dc:	48 83 fe 3f 	cmp	rsi, 63
 101a6e0:	74 4c 	je	76 <_runtime.(*stackScanState).addObject+0xce>
 101a6e2:	48 8b 43 10 	mov	rax, qword ptr [rbx + 16]
 101a6e6:	48 83 f8 3f 	cmp	rax, 63
 101a6ea:	0f 83 a3 00 00 00 	jae	163 <_runtime.(*stackScanState).addObject+0x133>
 101a6f0:	48 8d 48 01 	lea	rcx, [rax + 1]
 101a6f4:	48 89 4b 10 	mov	qword ptr [rbx + 16], rcx
 101a6f8:	48 c1 e0 05 	shl	rax, 5
 101a6fc:	48 8b 8a 00 01 00 00 	mov	rcx, qword ptr [rdx + 256]
 101a703:	49 29 c9 	sub	r9, rcx
 101a706:	44 89 4c 03 20 	mov	dword ptr [rbx + rax + 32], r9d
 101a70b:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101a710:	48 8b 31 	mov	rsi, qword ptr [rcx]
 101a713:	89 74 03 24 	mov	dword ptr [rbx + rax + 36], esi
 101a717:	90 	nop
 101a718:	48 89 4c 03 28 	mov	qword ptr [rbx + rax + 40], rcx
 101a71d:	48 ff 82 40 01 00 00 	inc	qword ptr [rdx + 320]
 101a724:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101a729:	48 83 c4 20 	add	rsp, 32
 101a72d:	c3 	ret
 101a72e:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 101a733:	e8 98 1d 00 00 	call	7576 <_runtime.getempty>
 101a738:	48 8b 1c 24 	mov	rbx, qword ptr [rsp]
 101a73c:	48 c7 43 18 00 00 00 00 	mov	qword ptr [rbx + 24], 0
 101a744:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101a749:	48 89 58 18 	mov	qword ptr [rax + 24], rbx
 101a74d:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101a752:	48 89 9a 38 01 00 00 	mov	qword ptr [rdx + 312], rbx
 101a759:	4c 8b 4c 24 30 	mov	r9, qword ptr [rsp + 48]
 101a75e:	eb 82 	jmp	-126 <_runtime.(*stackScanState).addObject+0x82>
 101a760:	4c 8b 4c 24 30 	mov	r9, qword ptr [rsp + 48]
 101a765:	e9 72 ff ff ff 	jmp	-142 <_runtime.(*stackScanState).addObject+0x7c>
 101a76a:	e8 61 1d 00 00 	call	7521 <_runtime.getempty>
 101a76f:	48 8b 1c 24 	mov	rbx, qword ptr [rsp]
 101a773:	48 c7 43 18 00 00 00 00 	mov	qword ptr [rbx + 24], 0
 101a77b:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101a780:	48 89 9a 30 01 00 00 	mov	qword ptr [rdx + 304], rbx
 101a787:	48 89 9a 38 01 00 00 	mov	qword ptr [rdx + 312], rbx
 101a78e:	e9 03 ff ff ff 	jmp	-253 <_runtime.(*stackScanState).addObject+0x36>
 101a793:	b9 3f 00 00 00 	mov	ecx, 63
 101a798:	e8 b3 8b 03 00 	call	232371 <_runtime.panicIndex>
 101a79d:	48 8d 05 62 c1 05 00 	lea	rax, [rip + 377186]
 101a7a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 101a7a8:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 101a7b1:	e8 aa e5 00 00 	call	58794 <_runtime.throw>
 101a7b6:	b9 3f 00 00 00 	mov	ecx, 63
 101a7bb:	e8 90 8b 03 00 	call	232336 <_runtime.panicIndex>
 101a7c0:	90 	nop
 101a7c1:	e8 0a 64 03 00 	call	222218 <_runtime.morestack_noctxt>
 101a7c6:	e9 95 fe ff ff 	jmp	-363 <_runtime.(*stackScanState).addObject>
 101a7cb:	cc 	int3
 101a7cc:	cc 	int3
 101a7cd:	cc 	int3
 101a7ce:	cc 	int3
 101a7cf:	cc 	int3

_runtime.binarySearchTree:
 101a7d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101a7d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101a7dd:	0f 86 48 01 00 00 	jbe	328 <_runtime.binarySearchTree+0x15b>
 101a7e3:	48 83 ec 58 	sub	rsp, 88
 101a7e7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 101a7ec:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 101a7f1:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101a7f6:	48 85 c0 	test	rax, rax
 101a7f9:	0f 84 f1 00 00 00 	je	241 <_runtime.binarySearchTree+0x120>
 101a7ff:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 101a804:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101a808:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 101a80d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101a812:	48 89 c1 	mov	rcx, rax
 101a815:	48 c1 e8 3f 	shr	rax, 63
 101a819:	48 01 c8 	add	rax, rcx
 101a81c:	48 d1 f8 	sar	rax
 101a81f:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101a824:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101a829:	e8 a2 ff ff ff 	call	-94 <_runtime.binarySearchTree>
 101a82e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101a833:	84 00 	test	byte ptr [rax], al
 101a835:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101a83a:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101a83f:	48 83 f9 3f 	cmp	rcx, 63
 101a843:	0f 83 d4 00 00 00 	jae	212 <_runtime.binarySearchTree+0x14d>
 101a849:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 101a84e:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 101a853:	48 89 cb 	mov	rbx, rcx
 101a856:	48 c1 e1 05 	shl	rcx, 5
 101a85a:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 101a85f:	48 8d 34 08 	lea	rsi, [rax + rcx]
 101a863:	48 8d 76 20 	lea	rsi, [rsi + 32]
 101a867:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 101a86c:	48 8d 7b 01 	lea	rdi, [rbx + 1]
 101a870:	48 83 fb 3e 	cmp	rbx, 62
 101a874:	75 75 	jne	117 <_runtime.binarySearchTree+0x11b>
 101a876:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 101a87a:	31 ff 	xor	edi, edi
 101a87c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101a880:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 101a885:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101a88a:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101a88f:	48 29 c8 	sub	rax, rcx
 101a892:	48 ff c8 	dec	rax
 101a895:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101a89a:	e8 31 ff ff ff 	call	-207 <_runtime.binarySearchTree>
 101a89f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101a8a4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101a8a9:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101a8ae:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 101a8b3:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 101a8b8:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 101a8bd:	48 89 74 1f 30 	mov	qword ptr [rdi + rbx + 48], rsi
 101a8c2:	48 89 54 1f 38 	mov	qword ptr [rdi + rbx + 56], rdx
 101a8c7:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 101a8cc:	48 89 54 24 78 	mov	qword ptr [rsp + 120], rdx
 101a8d1:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 101a8d9:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 101a8e1:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 101a8e6:	48 83 c4 58 	add	rsp, 88
 101a8ea:	c3 	ret
 101a8eb:	48 89 c3 	mov	rbx, rax
 101a8ee:	eb 8c 	jmp	-116 <_runtime.binarySearchTree+0xac>
 101a8f0:	48 c7 44 24 78 00 00 00 00 	mov	qword ptr [rsp + 120], 0
 101a8f9:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 101a8fe:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 101a906:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 101a90b:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 101a913:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 101a918:	48 83 c4 58 	add	rsp, 88
 101a91c:	c3 	ret
 101a91d:	48 89 c8 	mov	rax, rcx
 101a920:	b9 3f 00 00 00 	mov	ecx, 63
 101a925:	e8 26 8a 03 00 	call	231974 <_runtime.panicIndex>
 101a92a:	90 	nop
 101a92b:	e8 a0 62 03 00 	call	221856 <_runtime.morestack_noctxt>
 101a930:	e9 9b fe ff ff 	jmp	-357 <_runtime.binarySearchTree>
 101a935:	cc 	int3
 101a936:	cc 	int3
 101a937:	cc 	int3
 101a938:	cc 	int3
 101a939:	cc 	int3
 101a93a:	cc 	int3
 101a93b:	cc 	int3
 101a93c:	cc 	int3
 101a93d:	cc 	int3
 101a93e:	cc 	int3
 101a93f:	cc 	int3

_runtime.(*stackScanState).findObject:
 101a940:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101a945:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 101a94a:	48 2b 81 00 01 00 00 	sub	rax, qword ptr [rcx + 256]
 101a951:	48 8b 89 48 01 00 00 	mov	rcx, qword ptr [rcx + 328]
 101a958:	48 85 c9 	test	rcx, rcx
 101a95b:	74 21 	je	33 <_runtime.(*stackScanState).findObject+0x3e>
 101a95d:	8b 11 	mov	edx, dword ptr [rcx]
 101a95f:	39 d0 	cmp	eax, edx
 101a961:	73 06 	jae	6 <_runtime.(*stackScanState).findObject+0x29>
 101a963:	48 8b 49 10 	mov	rcx, qword ptr [rcx + 16]
 101a967:	eb ef 	jmp	-17 <_runtime.(*stackScanState).findObject+0x18>
 101a969:	8b 59 04 	mov	ebx, dword ptr [rcx + 4]
 101a96c:	01 da 	add	edx, ebx
 101a96e:	39 d0 	cmp	eax, edx
 101a970:	72 06 	jb	6 <_runtime.(*stackScanState).findObject+0x38>
 101a972:	48 8b 49 18 	mov	rcx, qword ptr [rcx + 24]
 101a976:	eb e0 	jmp	-32 <_runtime.(*stackScanState).findObject+0x18>
 101a978:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101a97d:	c3 	ret
 101a97e:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 101a987:	c3 	ret
 101a988:	cc 	int3
 101a989:	cc 	int3
 101a98a:	cc 	int3
 101a98b:	cc 	int3
 101a98c:	cc 	int3
 101a98d:	cc 	int3
 101a98e:	cc 	int3
 101a98f:	cc 	int3

_runtime.finishsweep_m:
 101a990:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101a999:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101a99d:	76 31 	jbe	49 <_runtime.finishsweep_m+0x40>
 101a99f:	48 83 ec 10 	sub	rsp, 16
 101a9a3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 101a9a8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 101a9ad:	eb 06 	jmp	6 <_runtime.finishsweep_m+0x25>
 101a9af:	ff 05 c3 3a 0b 00 	inc	dword ptr [rip + 735939]
 101a9b5:	e8 96 01 00 00 	call	406 <_runtime.sweepone>
 101a9ba:	48 83 3c 24 ff 	cmp	qword ptr [rsp], -1
 101a9bf:	75 ee 	jne	-18 <_runtime.finishsweep_m+0x1f>
 101a9c1:	e8 1a 4d 00 00 	call	19738 <_runtime.nextMarkBitArenaEpoch>
 101a9c6:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 101a9cb:	48 83 c4 10 	add	rsp, 16
 101a9cf:	c3 	ret
 101a9d0:	e8 fb 61 03 00 	call	221691 <_runtime.morestack_noctxt>
 101a9d5:	eb b9 	jmp	-71 <_runtime.finishsweep_m>
 101a9d7:	cc 	int3
 101a9d8:	cc 	int3
 101a9d9:	cc 	int3
 101a9da:	cc 	int3
 101a9db:	cc 	int3
 101a9dc:	cc 	int3
 101a9dd:	cc 	int3
 101a9de:	cc 	int3
 101a9df:	cc 	int3

_runtime.bgsweep:
 101a9e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101a9e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101a9ed:	0f 86 46 01 00 00 	jbe	326 <_runtime.bgsweep+0x159>
 101a9f3:	48 83 ec 28 	sub	rsp, 40
 101a9f7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101a9fc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101aa01:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101aa0a:	83 3d ef ce 0d 00 00 	cmp	dword ptr [rip + 904943], 0
 101aa11:	0f 85 11 01 00 00 	jne	273 <_runtime.bgsweep+0x148>
 101aa17:	48 89 05 4a 3a 0b 00 	mov	qword ptr [rip + 735818], rax
 101aa1e:	48 8d 05 3b 3a 0b 00 	lea	rax, [rip + 735803]
 101aa25:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aa29:	e8 02 d7 fe ff 	call	-76030 <_runtime.lock>
 101aa2e:	c6 05 3b 3a 0b 00 01 	mov	byte ptr [rip + 735803], 1
 101aa35:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101aa3a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aa3e:	48 8d 05 63 8d 06 00 	lea	rax, [rip + 429411]
 101aa45:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101aa4a:	e8 41 8e fe ff 	call	-94655 <_runtime.chansend1>
 101aa4f:	90 	nop
 101aa50:	48 8d 05 01 cf 05 00 	lea	rax, [rip + 380673]
 101aa57:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aa5b:	48 8d 0d fe 39 0b 00 	lea	rcx, [rip + 735742]
 101aa62:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101aa67:	66 c7 44 24 10 0c 14 	mov	word ptr [rsp + 16], 5132
 101aa6e:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 101aa77:	e8 c4 0c 01 00 	call	68804 <_runtime.gopark>
 101aa7c:	eb 17 	jmp	23 <_runtime.bgsweep+0xb5>
 101aa7e:	ff 05 f0 39 0b 00 	inc	dword ptr [rip + 735728]
 101aa84:	90 	nop
 101aa85:	48 8d 05 dc cd 05 00 	lea	rax, [rip + 380380]
 101aa8c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aa90:	e8 6b 5f 03 00 	call	221035 <_runtime.mcall>
 101aa95:	e8 b6 00 00 00 	call	182 <_runtime.sweepone>
 101aa9a:	48 83 3c 24 ff 	cmp	qword ptr [rsp], -1
 101aa9f:	75 dd 	jne	-35 <_runtime.bgsweep+0x9e>
 101aaa1:	eb 11 	jmp	17 <_runtime.bgsweep+0xd4>
 101aaa3:	90 	nop
 101aaa4:	48 8d 05 bd cd 05 00 	lea	rax, [rip + 380349]
 101aaab:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aaaf:	e8 4c 5f 03 00 	call	221004 <_runtime.mcall>
 101aab4:	c6 04 24 01 	mov	byte ptr [rsp], 1
 101aab8:	e8 d3 1e 00 00 	call	7891 <_runtime.freeSomeWbufs>
 101aabd:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 101aac2:	75 df 	jne	-33 <_runtime.bgsweep+0xc3>
 101aac4:	48 8d 05 95 39 0b 00 	lea	rax, [rip + 735637]
 101aacb:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aacf:	e8 5c d6 fe ff 	call	-76196 <_runtime.lock>
 101aad4:	83 3d 09 a6 0d 00 00 	cmp	dword ptr [rip + 894473], 0
 101aadb:	74 36 	je	54 <_runtime.bgsweep+0x133>
 101aadd:	c6 05 8c 39 0b 00 01 	mov	byte ptr [rip + 735628], 1
 101aae4:	90 	nop
 101aae5:	48 8d 05 6c ce 05 00 	lea	rax, [rip + 380524]
 101aaec:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aaf0:	48 8d 0d 69 39 0b 00 	lea	rcx, [rip + 735593]
 101aaf7:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101aafc:	66 c7 44 24 10 0c 14 	mov	word ptr [rsp + 16], 5132
 101ab03:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 101ab0c:	e8 2f 0c 01 00 	call	68655 <_runtime.gopark>
 101ab11:	eb 82 	jmp	-126 <_runtime.bgsweep+0xb5>
 101ab13:	48 8d 05 46 39 0b 00 	lea	rax, [rip + 735558]
 101ab1a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ab1e:	e8 ed d7 fe ff 	call	-75795 <_runtime.unlock>
 101ab23:	e9 6d ff ff ff 	jmp	-147 <_runtime.bgsweep+0xb5>
 101ab28:	48 8d 3d 39 39 0b 00 	lea	rdi, [rip + 735545]
 101ab2f:	e8 ac 7e 03 00 	call	229036 <_runtime.gcWriteBarrier>
 101ab34:	e9 e5 fe ff ff 	jmp	-283 <_runtime.bgsweep+0x3e>
 101ab39:	e8 92 60 03 00 	call	221330 <_runtime.morestack_noctxt>
 101ab3e:	e9 9d fe ff ff 	jmp	-355 <_runtime.bgsweep>
 101ab43:	cc 	int3
 101ab44:	cc 	int3
 101ab45:	cc 	int3
 101ab46:	cc 	int3
 101ab47:	cc 	int3
 101ab48:	cc 	int3
 101ab49:	cc 	int3
 101ab4a:	cc 	int3
 101ab4b:	cc 	int3
 101ab4c:	cc 	int3
 101ab4d:	cc 	int3
 101ab4e:	cc 	int3
 101ab4f:	cc 	int3

_runtime.sweepone:
 101ab50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101ab59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101ab5d:	0f 86 c7 03 00 00 	jbe	967 <_runtime.sweepone+0x3da>
 101ab63:	48 83 ec 60 	sub	rsp, 96
 101ab67:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 101ab6c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 101ab71:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 101ab7a:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 101ab7e:	f2 0f 10 05 f2 a5 0d 00 	movsd	xmm0, qword ptr [rip + 894450]
 101ab86:	ff 83 08 01 00 00 	inc	dword ptr [rbx + 264]
 101ab8c:	8b 1d 52 a5 0d 00 	mov	ebx, dword ptr [rip + 894290]
 101ab92:	85 db 	test	ebx, ebx
 101ab94:	0f 85 bd 02 00 00 	jne	701 <_runtime.sweepone+0x307>
 101ab9a:	bb 01 00 00 00 	mov	ebx, 1
 101ab9f:	48 8d 35 42 a5 0d 00 	lea	rsi, [rip + 894274]
 101aba6:	f0 	lock
 101aba7:	0f c1 1e 	xadd	dword ptr [rsi], ebx
 101abaa:	8b 1d 30 a5 0d 00 	mov	ebx, dword ptr [rip + 894256]
 101abb0:	eb 02 	jmp	2 <_runtime.sweepone+0x64>
 101abb2:	89 fb 	mov	ebx, edi
 101abb4:	89 df 	mov	edi, ebx
 101abb6:	d1 eb 	shr	ebx
 101abb8:	83 e3 01 	and	ebx, 1
 101abbb:	8d 43 ff 	lea	eax, [rbx - 1]
 101abbe:	f7 d8 	neg	eax
 101abc0:	48 83 f8 02 	cmp	rax, 2
 101abc4:	0f 83 55 03 00 00 	jae	853 <_runtime.sweepone+0x3cf>
 101abca:	48 8d 1c 80 	lea	rbx, [rax + 4*rax]
 101abce:	4c 8d 05 33 a5 0d 00 	lea	r8, [rip + 894259]
 101abd5:	4d 8d 0c d8 	lea	r9, [r8 + 8*rbx]
 101abd9:	4d 8d 49 20 	lea	r9, [r9 + 32]
 101abdd:	41 ba ff ff ff ff 	mov	r10d, 4294967295
 101abe3:	f0 	lock
 101abe4:	45 0f c1 11 	xadd	dword ptr [r9], r10d
 101abe8:	41 ff ca 	dec	r10d
 101abeb:	45 85 d2 	test	r10d, r10d
 101abee:	0f 8d 39 02 00 00 	jge	569 <_runtime.sweepone+0x2dd>
 101abf4:	bb 01 00 00 00 	mov	ebx, 1
 101abf9:	f0 	lock
 101abfa:	41 0f c1 19 	xadd	dword ptr [r9], ebx
 101abfe:	31 c0 	xor	eax, eax
 101ac00:	48 85 c0 	test	rax, rax
 101ac03:	0f 84 0e 02 00 00 	je	526 <_runtime.sweepone+0x2c7>
 101ac09:	8a 58 63 	mov	bl, byte ptr [rax + 99]
 101ac0c:	80 fb 01 	cmp	bl, 1
 101ac0f:	74 17 	je	23 <_runtime.sweepone+0xd8>
 101ac11:	44 8b 40 58 	mov	r8d, dword ptr [rax + 88]
 101ac15:	41 39 f8 	cmp	r8d, edi
 101ac18:	74 98 	je	-104 <_runtime.sweepone+0x62>
 101ac1a:	44 8d 4f 03 	lea	r9d, [rdi + 3]
 101ac1e:	45 39 c1 	cmp	r9d, r8d
 101ac21:	74 8f 	je	-113 <_runtime.sweepone+0x62>
 101ac23:	e9 4c 02 00 00 	jmp	588 <_runtime.sweepone+0x324>
 101ac28:	8d 5f fe 	lea	ebx, [rdi - 2]
 101ac2b:	39 58 58 	cmp	dword ptr [rax + 88], ebx
 101ac2e:	0f 85 d9 01 00 00 	jne	473 <_runtime.sweepone+0x2bd>
 101ac34:	44 8d 47 ff 	lea	r8d, [rdi - 1]
 101ac38:	48 89 c1 	mov	rcx, rax
 101ac3b:	89 d8 	mov	eax, ebx
 101ac3d:	f0 	lock
 101ac3e:	44 0f b1 41 58 	cmpxchg	dword ptr [rcx + 88], r8d
 101ac43:	0f 94 c3 	sete	bl
 101ac46:	84 db 	test	bl, bl
 101ac48:	0f 84 64 ff ff ff 	je	-156 <_runtime.sweepone+0x62>
 101ac4e:	48 85 c9 	test	rcx, rcx
 101ac51:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 101ac56:	f2 0f 11 44 24 28 	movsd	qword ptr [rsp + 40], xmm0
 101ac5c:	0f 85 5b 01 00 00 	jne	347 <_runtime.sweepone+0x26d>
 101ac62:	48 c7 c0 ff ff ff ff 	mov	rax, -1
 101ac69:	b9 ff ff ff ff 	mov	ecx, 4294967295
 101ac6e:	f0 	lock
 101ac6f:	0f c1 0e 	xadd	dword ptr [rsi], ecx
 101ac72:	ff c9 	dec	ecx
 101ac74:	85 c9 	test	ecx, ecx
 101ac76:	0f 85 3a 01 00 00 	jne	314 <_runtime.sweepone+0x266>
 101ac7c:	8b 0d 62 a4 0d 00 	mov	ecx, dword ptr [rip + 894050]
 101ac82:	85 c9 	test	ecx, ecx
 101ac84:	0f 95 c1 	setne	cl
 101ac87:	84 c9 	test	cl, cl
 101ac89:	74 09 	je	9 <_runtime.sweepone+0x144>
 101ac8b:	83 3d c2 cd 0d 00 00 	cmp	dword ptr [rip + 904642], 0
 101ac92:	7f 19 	jg	25 <_runtime.sweepone+0x15d>
 101ac94:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 101ac98:	ff 89 08 01 00 00 	dec	dword ptr [rcx + 264]
 101ac9e:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 101aca3:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 101aca8:	48 83 c4 60 	add	rsp, 96
 101acac:	c3 	ret
 101acad:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 101acb2:	48 8b 05 b7 f0 0d 00 	mov	rax, qword ptr [rip + 913591]
 101acb9:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 101acbe:	48 8b 0d ab a4 0d 00 	mov	rcx, qword ptr [rip + 894123]
 101acc5:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 101acca:	48 8b 15 8f a4 0d 00 	mov	rdx, qword ptr [rip + 894095]
 101acd1:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 101acd6:	e8 c5 f7 00 00 	call	63429 <_runtime.printlock>
 101acdb:	48 8d 05 62 ad 05 00 	lea	rax, [rip + 372066]
 101ace2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ace6:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 101acef:	e8 ec 00 01 00 	call	65772 <_runtime.printstring>
 101acf4:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101acf9:	48 c1 e8 14 	shr	rax, 20
 101acfd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad01:	e8 1a fe 00 00 	call	65050 <_runtime.printuint>
 101ad06:	48 8d 05 29 8b 05 00 	lea	rax, [rip + 363305]
 101ad0d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad11:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 101ad1a:	e8 c1 00 01 00 	call	65729 <_runtime.printstring>
 101ad1f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101ad24:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101ad29:	48 29 c8 	sub	rax, rcx
 101ad2c:	48 c1 e8 14 	shr	rax, 20
 101ad30:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad34:	e8 e7 fd 00 00 	call	64999 <_runtime.printuint>
 101ad39:	48 8d 05 43 9a 05 00 	lea	rax, [rip + 367171]
 101ad40:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad44:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 101ad4d:	e8 8e 00 01 00 	call	65678 <_runtime.printstring>
 101ad52:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101ad57:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad5b:	e8 c0 fd 00 00 	call	64960 <_runtime.printuint>
 101ad60:	48 8d 05 74 84 05 00 	lea	rax, [rip + 361588]
 101ad67:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad6b:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 101ad74:	e8 67 00 01 00 	call	65639 <_runtime.printstring>
 101ad79:	f2 0f 10 44 24 28 	movsd	xmm0, qword ptr [rsp + 40]
 101ad7f:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 101ad84:	e8 67 fa 00 00 	call	64103 <_runtime.printfloat>
 101ad89:	48 8d 05 47 87 05 00 	lea	rax, [rip + 362311]
 101ad90:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ad94:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101ad9d:	e8 3e 00 01 00 	call	65598 <_runtime.printstring>
 101ada2:	e8 79 f7 00 00 	call	63353 <_runtime.printunlock>
 101ada7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101adac:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101adb1:	e9 de fe ff ff 	jmp	-290 <_runtime.sweepone+0x144>
 101adb6:	31 c9 	xor	ecx, ecx
 101adb8:	e9 ca fe ff ff 	jmp	-310 <_runtime.sweepone+0x137>
 101adbd:	48 8b 41 20 	mov	rax, qword ptr [rcx + 32]
 101adc1:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 101adc6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101adca:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 101adcf:	e8 6c 02 00 00 	call	620 <_runtime.(*mspan).sweep>
 101add4:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 101add9:	74 2e 	je	46 <_runtime.sweepone+0x2b9>
 101addb:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101ade0:	48 8d 0d a9 a3 0d 00 	lea	rcx, [rip + 893865]
 101ade7:	48 89 c2 	mov	rdx, rax
 101adea:	f0 	lock
 101adeb:	48 0f c1 01 	xadd	qword ptr [rcx], rax
 101adef:	48 8d 35 f2 a2 0d 00 	lea	rsi, [rip + 893682]
 101adf6:	f2 0f 10 44 24 28 	movsd	xmm0, qword ptr [rsp + 40]
 101adfc:	48 89 d0 	mov	rax, rdx
 101adff:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101ae04:	e9 60 fe ff ff 	jmp	-416 <_runtime.sweepone+0x119>
 101ae09:	31 d2 	xor	edx, edx
 101ae0b:	eb e2 	jmp	-30 <_runtime.sweepone+0x29f>
 101ae0d:	48 89 c1 	mov	rcx, rax
 101ae10:	31 db 	xor	ebx, ebx
 101ae12:	e9 2f fe ff ff 	jmp	-465 <_runtime.sweepone+0xf6>
 101ae17:	bb 01 00 00 00 	mov	ebx, 1
 101ae1c:	48 8d 3d c1 a2 0d 00 	lea	rdi, [rip + 893633]
 101ae23:	87 1f 	xchg	dword ptr [rdi], ebx
 101ae25:	48 89 c1 	mov	rcx, rax
 101ae28:	e9 24 fe ff ff 	jmp	-476 <_runtime.sweepone+0x101>
 101ae2d:	45 89 d1 	mov	r9d, r10d
 101ae30:	41 c1 ea 09 	shr	r10d, 9
 101ae34:	49 8b 5c d8 08 	mov	rbx, qword ptr [r8 + 8*rbx + 8]
 101ae39:	4a 8b 1c d3 	mov	rbx, qword ptr [rbx + 8*r10]
 101ae3d:	84 03 	test	byte ptr [rbx], al
 101ae3f:	41 81 e1 ff 01 00 00 	and	r9d, 511
 101ae46:	4a 8b 04 cb 	mov	rax, qword ptr [rbx + 8*r9]
 101ae4a:	4a c7 04 cb 00 00 00 00 	mov	qword ptr [rbx + 8*r9], 0
 101ae52:	e9 a9 fd ff ff 	jmp	-599 <_runtime.sweepone+0xb0>
 101ae57:	48 8b 42 30 	mov	rax, qword ptr [rdx + 48]
 101ae5b:	ff 88 08 01 00 00 	dec	dword ptr [rax + 264]
 101ae61:	48 c7 44 24 68 ff ff ff ff 	mov	qword ptr [rsp + 104], -1
 101ae6a:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 101ae6f:	48 83 c4 60 	add	rsp, 96
 101ae73:	c3 	ret
 101ae74:	89 7c 24 24 	mov	dword ptr [rsp + 36], edi
 101ae78:	88 5c 24 1f 	mov	byte ptr [rsp + 31], bl
 101ae7c:	44 89 44 24 20 	mov	dword ptr [rsp + 32], r8d
 101ae81:	e8 1a f6 00 00 	call	63002 <_runtime.printlock>
 101ae86:	48 8d 05 3a a0 05 00 	lea	rax, [rip + 368698]
 101ae8d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ae91:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 101ae9a:	e8 41 ff 00 00 	call	65345 <_runtime.printstring>
 101ae9f:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 101aea4:	0f b6 c0 	movzx	eax, al
 101aea7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aeab:	e8 70 fc 00 00 	call	64624 <_runtime.printuint>
 101aeb0:	48 8d 05 44 86 05 00 	lea	rax, [rip + 362052]
 101aeb7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aebb:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101aec4:	e8 17 ff 00 00 	call	65303 <_runtime.printstring>
 101aec9:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 101aecd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aed1:	e8 4a fc 00 00 	call	64586 <_runtime.printuint>
 101aed6:	48 8d 05 44 83 05 00 	lea	rax, [rip + 361284]
 101aedd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aee1:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 101aeea:	e8 f1 fe 00 00 	call	65265 <_runtime.printstring>
 101aeef:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 101aef3:	48 89 04 24 	mov	qword ptr [rsp], rax
 101aef7:	e8 24 fc 00 00 	call	64548 <_runtime.printuint>
 101aefc:	e8 2f f8 00 00 	call	63535 <_runtime.printnl>
 101af01:	e8 1a f6 00 00 	call	63002 <_runtime.printunlock>
 101af06:	48 8d 05 18 ab 05 00 	lea	rax, [rip + 371480]
 101af0d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101af11:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 101af1a:	e8 41 de 00 00 	call	56897 <_runtime.throw>
 101af1f:	b9 02 00 00 00 	mov	ecx, 2
 101af24:	e8 27 84 03 00 	call	230439 <_runtime.panicIndex>
 101af29:	90 	nop
 101af2a:	e8 a1 5c 03 00 	call	220321 <_runtime.morestack_noctxt>
 101af2f:	e9 1c fc ff ff 	jmp	-996 <_runtime.sweepone>
 101af34:	cc 	int3
 101af35:	cc 	int3
 101af36:	cc 	int3
 101af37:	cc 	int3
 101af38:	cc 	int3
 101af39:	cc 	int3
 101af3a:	cc 	int3
 101af3b:	cc 	int3
 101af3c:	cc 	int3
 101af3d:	cc 	int3
 101af3e:	cc 	int3
 101af3f:	cc 	int3

_runtime.(*mspan).ensureSwept:
 101af40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101af49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101af4d:	0f 86 db 00 00 00 	jbe	219 <_runtime.(*mspan).ensureSwept+0xee>
 101af53:	48 83 ec 28 	sub	rsp, 40
 101af57:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101af5c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101af61:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101af6a:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 101af6e:	83 ba 08 01 00 00 00 	cmp	dword ptr [rdx + 264], 0
 101af75:	75 12 	jne	18 <_runtime.(*mspan).ensureSwept+0x49>
 101af77:	83 ba f0 00 00 00 00 	cmp	dword ptr [rdx + 240], 0
 101af7e:	75 09 	jne	9 <_runtime.(*mspan).ensureSwept+0x49>
 101af80:	48 39 0a 	cmp	qword ptr [rdx], rcx
 101af83:	0f 85 8b 00 00 00 	jne	139 <_runtime.(*mspan).ensureSwept+0xd4>
 101af89:	8b 0d 51 a1 0d 00 	mov	ecx, dword ptr [rip + 893265]
 101af8f:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101af94:	8b 5a 58 	mov	ebx, dword ptr [rdx + 88]
 101af97:	39 cb 	cmp	ebx, ecx
 101af99:	74 6f 	je	111 <_runtime.(*mspan).ensureSwept+0xca>
 101af9b:	8d 71 03 	lea	esi, [rcx + 3]
 101af9e:	39 f3 	cmp	ebx, esi
 101afa0:	74 68 	je	104 <_runtime.(*mspan).ensureSwept+0xca>
 101afa2:	8d 41 fe 	lea	eax, [rcx - 2]
 101afa5:	8d 59 ff 	lea	ebx, [rcx - 1]
 101afa8:	f0 	lock
 101afa9:	0f b1 5a 58 	cmpxchg	dword ptr [rdx + 88], ebx
 101afad:	0f 94 c3 	sete	bl
 101afb0:	84 db 	test	bl, bl
 101afb2:	75 3e 	jne	62 <_runtime.(*mspan).ensureSwept+0xb2>
 101afb4:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 101afb8:	89 74 24 1c 	mov	dword ptr [rsp + 28], esi
 101afbc:	eb 1f 	jmp	31 <_runtime.(*mspan).ensureSwept+0x9d>
 101afbe:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 101afc5:	e8 16 82 02 00 	call	164374 <_runtime.usleep>
 101afca:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 101afce:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 101afd2:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101afd7:	89 c1 	mov	ecx, eax
 101afd9:	8b 74 24 1c 	mov	esi, dword ptr [rsp + 28]
 101afdd:	8b 42 58 	mov	eax, dword ptr [rdx + 88]
 101afe0:	39 c8 	cmp	eax, ecx
 101afe2:	74 04 	je	4 <_runtime.(*mspan).ensureSwept+0xa8>
 101afe4:	39 f0 	cmp	eax, esi
 101afe6:	75 d6 	jne	-42 <_runtime.(*mspan).ensureSwept+0x7e>
 101afe8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101afed:	48 83 c4 28 	add	rsp, 40
 101aff1:	c3 	ret
 101aff2:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101aff6:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 101affb:	e8 40 00 00 00 	call	64 <_runtime.(*mspan).sweep>
 101b000:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101b005:	48 83 c4 28 	add	rsp, 40
 101b009:	c3 	ret
 101b00a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101b00f:	48 83 c4 28 	add	rsp, 40
 101b013:	c3 	ret
 101b014:	48 8d 05 5e b0 05 00 	lea	rax, [rip + 372830]
 101b01b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b01f:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 101b028:	e8 33 dd 00 00 	call	56627 <_runtime.throw>
 101b02d:	90 	nop
 101b02e:	e8 9d 5b 03 00 	call	220061 <_runtime.morestack_noctxt>
 101b033:	e9 08 ff ff ff 	jmp	-248 <_runtime.(*mspan).ensureSwept>
 101b038:	cc 	int3
 101b039:	cc 	int3
 101b03a:	cc 	int3
 101b03b:	cc 	int3
 101b03c:	cc 	int3
 101b03d:	cc 	int3
 101b03e:	cc 	int3
 101b03f:	cc 	int3

_runtime.(*mspan).sweep:
 101b040:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101b049:	48 8d 44 24 a8 	lea	rax, [rsp - 88]
 101b04e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 101b052:	0f 86 66 09 00 00 	jbe	2406 <_runtime.(*mspan).sweep+0x97e>
 101b058:	48 81 ec d8 00 00 00 	sub	rsp, 216
 101b05f:	48 89 ac 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rbp
 101b067:	48 8d ac 24 d0 00 00 00 	lea	rbp, [rsp + 208]
 101b06f:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 101b078:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 101b07c:	83 bb 08 01 00 00 00 	cmp	dword ptr [rbx + 264], 0
 101b083:	75 12 	jne	18 <_runtime.(*mspan).sweep+0x57>
 101b085:	83 bb f0 00 00 00 00 	cmp	dword ptr [rbx + 240], 0
 101b08c:	75 09 	jne	9 <_runtime.(*mspan).sweep+0x57>
 101b08e:	48 39 13 	cmp	qword ptr [rbx], rdx
 101b091:	0f 85 0d 09 00 00 	jne	2317 <_runtime.(*mspan).sweep+0x964>
 101b097:	8b 1d 43 a0 0d 00 	mov	ebx, dword ptr [rip + 892995]
 101b09d:	89 5c 24 40 	mov	dword ptr [rsp + 64], ebx
 101b0a1:	48 8b b4 24 e0 00 00 00 	mov	rsi, qword ptr [rsp + 224]
 101b0a9:	40 8a 7e 63 	mov	dil, byte ptr [rsi + 99]
 101b0ad:	40 88 7c 24 3b 	mov	byte ptr [rsp + 59], dil
 101b0b2:	40 80 ff 01 	cmp	dil, 1
 101b0b6:	0f 85 41 08 00 00 	jne	2113 <_runtime.(*mspan).sweep+0x8bd>
 101b0bc:	44 8d 43 ff 	lea	r8d, [rbx - 1]
 101b0c0:	44 39 46 58 	cmp	dword ptr [rsi + 88], r8d
 101b0c4:	0f 85 33 08 00 00 	jne	2099 <_runtime.(*mspan).sweep+0x8bd>
 101b0ca:	44 89 44 24 44 	mov	dword ptr [rsp + 68], r8d
 101b0cf:	80 3d 5a 9e 0b 00 00 	cmp	byte ptr [rip + 761434], 0
 101b0d6:	0f 85 4c 06 00 00 	jne	1612 <_runtime.(*mspan).sweep+0x6e8>
 101b0dc:	48 8b 7e 20 	mov	rdi, qword ptr [rsi + 32]
 101b0e0:	4c 8d 0d 79 a0 0d 00 	lea	r9, [rip + 893049]
 101b0e7:	f0 	lock
 101b0e8:	49 0f c1 39 	xadd	qword ptr [r9], rdi
 101b0ec:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 101b0f0:	0f b6 7e 62 	movzx	edi, byte ptr [rsi + 98]
 101b0f4:	40 88 7c 24 36 	mov	byte ptr [rsp + 54], dil
 101b0f9:	4c 8b 4e 68 	mov	r9, qword ptr [rsi + 104]
 101b0fd:	4c 89 4c 24 50 	mov	qword ptr [rsp + 80], r9
 101b102:	48 8b 92 60 01 00 00 	mov	rdx, qword ptr [rdx + 352]
 101b109:	48 89 94 24 90 00 00 00 	mov	qword ptr [rsp + 144], rdx
 101b111:	4c 8d 96 80 00 00 00 	lea	r10, [rsi + 128]
 101b118:	4c 8b 9e 80 00 00 00 	mov	r11, qword ptr [rsi + 128]
 101b11f:	eb 09 	jmp	9 <_runtime.(*mspan).sweep+0xea>
 101b121:	4d 89 da 	mov	r10, r11
 101b124:	49 89 d3 	mov	r11, rdx
 101b127:	4c 89 ea 	mov	rdx, r13
 101b12a:	4d 85 db 	test	r11, r11
 101b12d:	0f 84 48 01 00 00 	je	328 <_runtime.(*mspan).sweep+0x23b>
 101b133:	41 0f b7 43 08 	movzx	eax, word ptr [r11 + 8]
 101b138:	4d 85 c9 	test	r9, r9
 101b13b:	0f 84 b7 07 00 00 	je	1975 <_runtime.(*mspan).sweep+0x8b8>
 101b141:	48 89 d1 	mov	rcx, rdx
 101b144:	31 d2 	xor	edx, edx
 101b146:	49 f7 f1 	div	r9
 101b149:	48 89 c2 	mov	rdx, rax
 101b14c:	49 0f af c1 	imul	rax, r9
 101b150:	90 	nop
 101b151:	90 	nop
 101b152:	49 89 d4 	mov	r12, rdx
 101b155:	48 c1 ea 03 	shr	rdx, 3
 101b159:	49 83 e4 07 	and	r12, 7
 101b15d:	49 89 cd 	mov	r13, rcx
 101b160:	4c 89 e1 	mov	rcx, r12
 101b163:	41 be 01 00 00 00 	mov	r14d, 1
 101b169:	41 d3 e6 	shl	r14d, cl
 101b16c:	90 	nop
 101b16d:	48 03 56 50 	add	rdx, qword ptr [rsi + 80]
 101b171:	44 0f b6 3a 	movzx	r15d, byte ptr [rdx]
 101b175:	45 84 f7 	test	r15b, r14b
 101b178:	74 05 	je	5 <_runtime.(*mspan).sweep+0x13f>
 101b17a:	49 8b 13 	mov	rdx, qword ptr [r11]
 101b17d:	eb a2 	jmp	-94 <_runtime.(*mspan).sweep+0xe1>
 101b17f:	4e 8d 34 08 	lea	r14, [rax + r9]
 101b183:	4c 89 d8 	mov	rax, r11
 101b186:	eb 0b 	jmp	11 <_runtime.(*mspan).sweep+0x153>
 101b188:	4d 8b 1b 	mov	r11, qword ptr [r11]
 101b18b:	4c 8b ac 24 90 00 00 00 	mov	r13, qword ptr [rsp + 144]
 101b193:	4d 85 db 	test	r11, r11
 101b196:	0f 84 d8 00 00 00 	je	216 <_runtime.(*mspan).sweep+0x234>
 101b19c:	45 0f b7 6b 08 	movzx	r13d, word ptr [r11 + 8]
 101b1a1:	4d 39 f5 	cmp	r13, r14
 101b1a4:	0f 83 c3 00 00 00 	jae	195 <_runtime.(*mspan).sweep+0x22d>
 101b1aa:	41 80 7b 0a 01 	cmp	byte ptr [r11 + 10], 1
 101b1af:	75 d7 	jne	-41 <_runtime.(*mspan).sweep+0x148>
 101b1b1:	90 	nop
 101b1b2:	41 0f ab cf 	bts	r15d, ecx
 101b1b6:	44 88 3a 	mov	byte ptr [rdx], r15b
 101b1b9:	b9 01 00 00 00 	mov	ecx, 1
 101b1be:	4c 89 74 24 60 	mov	qword ptr [rsp + 96], r14
 101b1c3:	88 4c 24 38 	mov	byte ptr [rsp + 56], cl
 101b1c7:	eb 06 	jmp	6 <_runtime.(*mspan).sweep+0x18f>
 101b1c9:	49 89 c2 	mov	r10, rax
 101b1cc:	48 89 d0 	mov	rax, rdx
 101b1cf:	48 85 c0 	test	rax, rax
 101b1d2:	0f 84 82 00 00 00 	je	130 <_runtime.(*mspan).sweep+0x21a>
 101b1d8:	0f b7 50 08 	movzx	edx, word ptr [rax + 8]
 101b1dc:	4c 39 f2 	cmp	rdx, r14
 101b1df:	73 79 	jae	121 <_runtime.(*mspan).sweep+0x21a>
 101b1e1:	4c 8b 5e 18 	mov	r11, qword ptr [rsi + 24]
 101b1e5:	4c 01 da 	add	rdx, r11
 101b1e8:	80 78 0a 01 	cmp	byte ptr [rax + 10], 1
 101b1ec:	74 09 	je	9 <_runtime.(*mspan).sweep+0x1b7>
 101b1ee:	84 c9 	test	cl, cl
 101b1f0:	74 05 	je	5 <_runtime.(*mspan).sweep+0x1b7>
 101b1f2:	48 8b 10 	mov	rdx, qword ptr [rax]
 101b1f5:	eb d2 	jmp	-46 <_runtime.(*mspan).sweep+0x189>
 101b1f7:	4c 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], r10
 101b1ff:	48 8b 08 	mov	rcx, qword ptr [rax]
 101b202:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 101b20a:	49 89 0a 	mov	qword ptr [r10], rcx
 101b20d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b211:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101b216:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 101b21b:	e8 d0 3f 00 00 	call	16336 <_runtime.freespecial>
 101b220:	0f b6 4c 24 38 	movzx	ecx, byte ptr [rsp + 56]
 101b225:	8b 5c 24 40 	mov	ebx, dword ptr [rsp + 64]
 101b229:	48 8b b4 24 e0 00 00 00 	mov	rsi, qword ptr [rsp + 224]
 101b231:	0f b6 7c 24 36 	movzx	edi, byte ptr [rsp + 54]
 101b236:	44 8b 44 24 44 	mov	r8d, dword ptr [rsp + 68]
 101b23b:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 101b240:	4c 8b 74 24 60 	mov	r14, qword ptr [rsp + 96]
 101b245:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 101b24d:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101b255:	e9 6f ff ff ff 	jmp	-145 <_runtime.(*mspan).sweep+0x189>
 101b25a:	4c 8b ac 24 90 00 00 00 	mov	r13, qword ptr [rsp + 144]
 101b262:	48 89 c2 	mov	rdx, rax
 101b265:	4d 89 d3 	mov	r11, r10
 101b268:	e9 b4 fe ff ff 	jmp	-332 <_runtime.(*mspan).sweep+0xe1>
 101b26d:	31 c9 	xor	ecx, ecx
 101b26f:	e9 4a ff ff ff 	jmp	-182 <_runtime.(*mspan).sweep+0x17e>
 101b274:	31 c9 	xor	ecx, ecx
 101b276:	e9 43 ff ff ff 	jmp	-189 <_runtime.(*mspan).sweep+0x17e>
 101b27b:	83 3d be c7 0d 00 00 	cmp	dword ptr [rip + 903102], 0
 101b282:	0f 84 8e 04 00 00 	je	1166 <_runtime.(*mspan).sweep+0x6d6>
 101b288:	48 8b 46 50 	mov	rax, qword ptr [rsi + 80]
 101b28c:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 101b294:	c6 84 24 a8 00 00 00 01 	mov	byte ptr [rsp + 168], 1
 101b29c:	48 c7 84 24 b0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 176], 0
 101b2a8:	48 8b 46 48 	mov	rax, qword ptr [rsi + 72]
 101b2ac:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 101b2b4:	c6 84 24 c0 00 00 00 01 	mov	byte ptr [rsp + 192], 1
 101b2bc:	48 c7 84 24 c8 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 200], 0
 101b2c8:	31 c0 	xor	eax, eax
 101b2ca:	eb 0b 	jmp	11 <_runtime.(*mspan).sweep+0x297>
 101b2cc:	48 ff 84 24 c8 00 00 00 	inc	qword ptr [rsp + 200]
 101b2d4:	48 ff c0 	inc	rax
 101b2d7:	48 39 46 38 	cmp	qword ptr [rsi + 56], rax
 101b2db:	0f 86 50 01 00 00 	jbe	336 <_runtime.(*mspan).sweep+0x3f1>
 101b2e1:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 101b2e9:	44 0f b6 94 24 a8 00 00 00 	movzx	r10d, byte ptr [rsp + 168]
 101b2f2:	0f b6 09 	movzx	ecx, byte ptr [rcx]
 101b2f5:	44 84 d1 	test	cl, r10b
 101b2f8:	74 5c 	je	92 <_runtime.(*mspan).sweep+0x316>
 101b2fa:	90 	nop
 101b2fb:	0f b6 8c 24 a8 00 00 00 	movzx	ecx, byte ptr [rsp + 168]
 101b303:	80 f9 80 	cmp	cl, -128
 101b306:	75 43 	jne	67 <_runtime.(*mspan).sweep+0x30b>
 101b308:	48 ff 84 24 a0 00 00 00 	inc	qword ptr [rsp + 160]
 101b310:	c6 84 24 a8 00 00 00 01 	mov	byte ptr [rsp + 168], 1
 101b318:	48 ff 84 24 b0 00 00 00 	inc	qword ptr [rsp + 176]
 101b320:	90 	nop
 101b321:	0f b6 8c 24 c0 00 00 00 	movzx	ecx, byte ptr [rsp + 192]
 101b329:	80 f9 80 	cmp	cl, -128
 101b32c:	75 12 	jne	18 <_runtime.(*mspan).sweep+0x300>
 101b32e:	48 ff 84 24 b8 00 00 00 	inc	qword ptr [rsp + 184]
 101b336:	c6 84 24 c0 00 00 00 01 	mov	byte ptr [rsp + 192], 1
 101b33e:	eb 8c 	jmp	-116 <_runtime.(*mspan).sweep+0x28c>
 101b340:	d1 e1 	shl	ecx
 101b342:	88 8c 24 c0 00 00 00 	mov	byte ptr [rsp + 192], cl
 101b349:	eb 81 	jmp	-127 <_runtime.(*mspan).sweep+0x28c>
 101b34b:	d1 e1 	shl	ecx
 101b34d:	88 8c 24 a8 00 00 00 	mov	byte ptr [rsp + 168], cl
 101b354:	eb c2 	jmp	-62 <_runtime.(*mspan).sweep+0x2d8>
 101b356:	48 8b 4e 30 	mov	rcx, qword ptr [rsi + 48]
 101b35a:	48 39 8c 24 c8 00 00 00 	cmp	qword ptr [rsp + 200], rcx
 101b362:	0f 83 a7 00 00 00 	jae	167 <_runtime.(*mspan).sweep+0x3cf>
 101b368:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 101b36d:	48 8b 4e 68 	mov	rcx, qword ptr [rsi + 104]
 101b371:	48 0f af c8 	imul	rcx, rax
 101b375:	48 03 4e 18 	add	rcx, qword ptr [rsi + 24]
 101b379:	83 3d c0 c6 0d 00 00 	cmp	dword ptr [rip + 902848], 0
 101b380:	75 48 	jne	72 <_runtime.(*mspan).sweep+0x38a>
 101b382:	83 3d bf c6 0d 00 00 	cmp	dword ptr [rip + 902847], 0
 101b389:	0f 84 6b ff ff ff 	je	-149 <_runtime.(*mspan).sweep+0x2ba>
 101b38f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101b393:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 101b398:	e8 93 07 00 00 	call	1939 <_runtime.clobberfree>
 101b39d:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101b3a2:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 101b3aa:	8b 5c 24 40 	mov	ebx, dword ptr [rsp + 64]
 101b3ae:	48 8b b4 24 e0 00 00 00 	mov	rsi, qword ptr [rsp + 224]
 101b3b6:	0f b6 7c 24 36 	movzx	edi, byte ptr [rsp + 54]
 101b3bb:	44 8b 44 24 44 	mov	r8d, dword ptr [rsp + 68]
 101b3c0:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 101b3c5:	e9 30 ff ff ff 	jmp	-208 <_runtime.(*mspan).sweep+0x2ba>
 101b3ca:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 101b3cf:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101b3d3:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 101b3d8:	e8 53 92 00 00 	call	37459 <_runtime.tracefree>
 101b3dd:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101b3e2:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 101b3e7:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 101b3ef:	8b 5c 24 40 	mov	ebx, dword ptr [rsp + 64]
 101b3f3:	48 8b b4 24 e0 00 00 00 	mov	rsi, qword ptr [rsp + 224]
 101b3fb:	0f b6 7c 24 36 	movzx	edi, byte ptr [rsp + 54]
 101b400:	44 8b 44 24 44 	mov	r8d, dword ptr [rsp + 68]
 101b405:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 101b40a:	e9 73 ff ff ff 	jmp	-141 <_runtime.(*mspan).sweep+0x342>
 101b40f:	48 8b 8c 24 b8 00 00 00 	mov	rcx, qword ptr [rsp + 184]
 101b417:	44 0f b6 94 24 c0 00 00 00 	movzx	r10d, byte ptr [rsp + 192]
 101b420:	0f b6 09 	movzx	ecx, byte ptr [rcx]
 101b423:	44 84 d1 	test	cl, r10b
 101b426:	0f 85 3c ff ff ff 	jne	-196 <_runtime.(*mspan).sweep+0x328>
 101b42c:	e9 c9 fe ff ff 	jmp	-311 <_runtime.(*mspan).sweep+0x2ba>
 101b431:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101b435:	e8 56 37 ff ff 	call	-51370 <_runtime.(*mspan).countAlloc>
 101b43a:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101b43f:	0f b6 4c 24 36 	movzx	ecx, byte ptr [rsp + 54]
 101b444:	89 ca 	mov	edx, ecx
 101b446:	d0 e9 	shr	cl
 101b448:	84 c9 	test	cl, cl
 101b44a:	0f 85 b7 02 00 00 	jne	695 <_runtime.(*mspan).sweep+0x6c7>
 101b450:	66 85 c0 	test	ax, ax
 101b453:	0f 85 ae 02 00 00 	jne	686 <_runtime.(*mspan).sweep+0x6c7>
 101b459:	48 8b 9c 24 e0 00 00 00 	mov	rbx, qword ptr [rsp + 224]
 101b461:	c6 43 64 01 	mov	byte ptr [rbx + 100], 1
 101b465:	be 01 00 00 00 	mov	esi, 1
 101b46a:	0f b7 7b 60 	movzx	edi, word ptr [rbx + 96]
 101b46e:	41 89 f8 	mov	r8d, edi
 101b471:	29 c7 	sub	edi, eax
 101b473:	66 89 7c 24 3c 	mov	word ptr [rsp + 60], di
 101b478:	66 44 39 c0 	cmp	ax, r8w
 101b47c:	0f 87 98 03 00 00 	ja	920 <_runtime.(*mspan).sweep+0x7da>
 101b482:	88 4c 24 3a 	mov	byte ptr [rsp + 58], cl
 101b486:	40 88 74 24 39 	mov	byte ptr [rsp + 57], sil
 101b48b:	66 89 43 60 	mov	word ptr [rbx + 96], ax
 101b48f:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101b493:	e8 c8 1f ff ff 	call	-57400 <_runtime.(*mspan).nextFreeIndex>
 101b498:	48 8b 84 24 e0 00 00 00 	mov	rax, qword ptr [rsp + 224]
 101b4a0:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 101b4a4:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 101b4a9:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 101b4ae:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 101b4b3:	48 39 ca 	cmp	rdx, rcx
 101b4b6:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 101b4be:	80 3d 6b 9a 0b 00 00 	cmp	byte ptr [rip + 760427], 0
 101b4c5:	74 2d 	je	45 <_runtime.(*mspan).sweep+0x4b4>
 101b4c7:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 101b4d0:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 101b4d4:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 101b4db:	84 03 	test	byte ptr [rbx], al
 101b4dd:	0f b7 74 24 3c 	movzx	esi, word ptr [rsp + 60]
 101b4e2:	0f b7 fe 	movzx	edi, si
 101b4e5:	4c 8b 40 68 	mov	r8, qword ptr [rax + 104]
 101b4e9:	4c 0f af c7 	imul	r8, rdi
 101b4ed:	4c 01 83 48 16 00 00 	add	qword ptr [rbx + 5704], r8
 101b4f4:	48 8b 48 50 	mov	rcx, qword ptr [rax + 80]
 101b4f8:	48 89 48 48 	mov	qword ptr [rax + 72], rcx
 101b4fc:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 101b500:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101b504:	e8 37 3e 00 00 	call	15927 <_runtime.newMarkBits>
 101b509:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101b50e:	48 8b 8c 24 e0 00 00 00 	mov	rcx, qword ptr [rsp + 224]
 101b516:	48 89 41 50 	mov	qword ptr [rcx + 80], rax
 101b51a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101b51e:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 101b527:	e8 14 1f ff ff 	call	-57580 <_runtime.(*mspan).refillAllocCache>
 101b52c:	0f b6 44 24 39 	movzx	eax, byte ptr [rsp + 57]
 101b531:	84 c0 	test	al, al
 101b533:	0f 84 af 01 00 00 	je	431 <_runtime.(*mspan).sweep+0x6a8>
 101b539:	48 8b 94 24 e0 00 00 00 	mov	rdx, qword ptr [rsp + 224]
 101b541:	8a 5a 63 	mov	bl, byte ptr [rdx + 99]
 101b544:	88 5c 24 3b 	mov	byte ptr [rsp + 59], bl
 101b548:	80 fb 01 	cmp	bl, 1
 101b54b:	0f 85 22 02 00 00 	jne	546 <_runtime.(*mspan).sweep+0x733>
 101b551:	8b 74 24 44 	mov	esi, dword ptr [rsp + 68]
 101b555:	39 72 58 	cmp	dword ptr [rdx + 88], esi
 101b558:	0f 85 15 02 00 00 	jne	533 <_runtime.(*mspan).sweep+0x733>
 101b55e:	8b 5c 24 40 	mov	ebx, dword ptr [rsp + 64]
 101b562:	89 de 	mov	esi, ebx
 101b564:	87 5a 58 	xchg	dword ptr [rdx + 88], ebx
 101b567:	0f b7 5c 24 3c 	movzx	ebx, word ptr [rsp + 60]
 101b56c:	66 85 db 	test	bx, bx
 101b56f:	0f 86 6c 01 00 00 	jbe	364 <_runtime.(*mspan).sweep+0x6a1>
 101b575:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 101b57a:	40 84 ff 	test	dil, dil
 101b57d:	0f 84 d4 00 00 00 	je	212 <_runtime.(*mspan).sweep+0x617>
 101b583:	4c 8b 84 24 90 00 00 00 	mov	r8, qword ptr [rsp + 144]
 101b58b:	41 84 00 	test	byte ptr [r8], al
 101b58e:	48 0f be c7 	movsx	rax, dil
 101b592:	48 83 f8 43 	cmp	rax, 67
 101b596:	0f 83 cd 01 00 00 	jae	461 <_runtime.(*mspan).sweep+0x729>
 101b59c:	49 8b bc c0 a8 04 00 00 	mov	rdi, qword ptr [r8 + 8*rax + 1192]
 101b5a4:	0f b7 db 	movzx	ebx, bx
 101b5a7:	48 01 fb 	add	rbx, rdi
 101b5aa:	49 89 9c c0 a8 04 00 00 	mov	qword ptr [r8 + 8*rax + 1192], rbx
 101b5b2:	0f b6 44 24 36 	movzx	eax, byte ptr [rsp + 54]
 101b5b7:	48 3d 86 00 00 00 	cmp	rax, 134
 101b5bd:	0f 83 9c 01 00 00 	jae	412 <_runtime.(*mspan).sweep+0x71f>
 101b5c3:	48 c1 e0 06 	shl	rax, 6
 101b5c7:	48 8d 0d 8a 9e 0d 00 	lea	rcx, [rip + 892554]
 101b5ce:	48 8d 04 01 	lea	rax, [rcx + rax]
 101b5d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b5d6:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101b5db:	0f b6 84 24 e8 00 00 00 	movzx	eax, byte ptr [rsp + 232]
 101b5e3:	88 44 24 10 	mov	byte ptr [rsp + 16], al
 101b5e7:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101b5ec:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 101b5f1:	48 39 c8 	cmp	rax, rcx
 101b5f4:	0f 94 44 24 11 	sete	byte ptr [rsp + 17]
 101b5f9:	e8 a2 55 ff ff 	call	-43614 <_runtime.(*mcentral).freeSpan>
 101b5fe:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 101b603:	84 c0 	test	al, al
 101b605:	74 17 	je	23 <_runtime.(*mspan).sweep+0x5de>
 101b607:	88 84 24 f0 00 00 00 	mov	byte ptr [rsp + 240], al
 101b60e:	48 8b ac 24 d0 00 00 00 	mov	rbp, qword ptr [rsp + 208]
 101b616:	48 81 c4 d8 00 00 00 	add	rsp, 216
 101b61d:	c3 	ret
 101b61e:	88 44 24 37 	mov	byte ptr [rsp + 55], al
 101b622:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 101b626:	d1 e8 	shr	eax
 101b628:	83 e0 01 	and	eax, 1
 101b62b:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 101b62f:	48 8d 0d d2 9a 0d 00 	lea	rcx, [rip + 891602]
 101b636:	48 8d 04 c1 	lea	rax, [rcx + 8*rax]
 101b63a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b63e:	48 8b 84 24 e0 00 00 00 	mov	rax, qword ptr [rsp + 224]
 101b646:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101b64b:	e8 00 05 00 00 	call	1280 <_runtime.(*gcSweepBuf).push>
 101b650:	0f b6 44 24 37 	movzx	eax, byte ptr [rsp + 55]
 101b655:	eb b0 	jmp	-80 <_runtime.(*mspan).sweep+0x5c7>
 101b657:	84 c0 	test	al, al
 101b659:	74 7f 	je	127 <_runtime.(*mspan).sweep+0x69a>
 101b65b:	83 3d ea c3 0d 00 00 	cmp	dword ptr [rip + 902122], 0
 101b662:	7e 5f 	jle	95 <_runtime.(*mspan).sweep+0x683>
 101b664:	48 c7 42 70 00 00 00 00 	mov	qword ptr [rdx + 112], 0
 101b66c:	90 	nop
 101b66d:	48 8b 42 18 	mov	rax, qword ptr [rdx + 24]
 101b671:	90 	nop
 101b672:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b676:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101b67b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101b680:	48 b9 00 00 00 00 12 10 00 00 	movabs	rcx, 17669495455744
 101b68a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101b68f:	b9 ff ff ff ff 	mov	ecx, 4294967295
 101b694:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101b699:	e8 92 78 02 00 	call	161938 <_runtime.mmap>
 101b69e:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 101b6a6:	48 ff 80 a0 04 00 00 	inc	qword ptr [rax + 1184]
 101b6ad:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 101b6b2:	48 01 88 98 04 00 00 	add	qword ptr [rax + 1176], rcx
 101b6b9:	b8 01 00 00 00 	mov	eax, 1
 101b6be:	e9 40 ff ff ff 	jmp	-192 <_runtime.(*mspan).sweep+0x5c3>
 101b6c3:	48 8d 05 36 99 0c 00 	lea	rax, [rip + 825654]
 101b6ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b6ce:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101b6d3:	e8 d8 2f 00 00 	call	12248 <_runtime.(*mheap).freeSpan>
 101b6d8:	eb c4 	jmp	-60 <_runtime.(*mspan).sweep+0x65e>
 101b6da:	31 c0 	xor	eax, eax
 101b6dc:	e9 22 ff ff ff 	jmp	-222 <_runtime.(*mspan).sweep+0x5c3>
 101b6e1:	84 c0 	test	al, al
 101b6e3:	e9 71 ff ff ff 	jmp	-143 <_runtime.(*mspan).sweep+0x619>
 101b6e8:	0f b7 54 24 3c 	movzx	edx, word ptr [rsp + 60]
 101b6ed:	66 85 d2 	test	dx, dx
 101b6f0:	0f 84 43 fe ff ff 	je	-445 <_runtime.(*mspan).sweep+0x4f9>
 101b6f6:	48 8b 94 24 e0 00 00 00 	mov	rdx, qword ptr [rsp + 224]
 101b6fe:	8b 74 24 40 	mov	esi, dword ptr [rsp + 64]
 101b702:	e9 60 fe ff ff 	jmp	-416 <_runtime.(*mspan).sweep+0x527>
 101b707:	48 8b 9c 24 e0 00 00 00 	mov	rbx, qword ptr [rsp + 224]
 101b70f:	31 f6 	xor	esi, esi
 101b711:	e9 54 fd ff ff 	jmp	-684 <_runtime.(*mspan).sweep+0x42a>
 101b716:	83 3d 2b c3 0d 00 00 	cmp	dword ptr [rip + 901931], 0
 101b71d:	0f 85 65 fb ff ff 	jne	-1179 <_runtime.(*mspan).sweep+0x248>
 101b723:	e9 09 fd ff ff 	jmp	-759 <_runtime.(*mspan).sweep+0x3f1>
 101b728:	48 89 94 24 98 00 00 00 	mov	qword ptr [rsp + 152], rdx
 101b730:	48 8b 46 20 	mov	rax, qword ptr [rsi + 32]
 101b734:	48 c1 e0 0d 	shl	rax, 13
 101b738:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b73c:	e8 1f b2 02 00 	call	176671 <_runtime.traceGCSweepSpan>
 101b741:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 101b749:	8b 5c 24 40 	mov	ebx, dword ptr [rsp + 64]
 101b74d:	48 8b b4 24 e0 00 00 00 	mov	rsi, qword ptr [rsp + 224]
 101b755:	44 8b 44 24 44 	mov	r8d, dword ptr [rsp + 68]
 101b75a:	e9 7d f9 ff ff 	jmp	-1667 <_runtime.(*mspan).sweep+0x9c>
 101b75f:	b9 86 00 00 00 	mov	ecx, 134
 101b764:	e8 e7 7b 03 00 	call	228327 <_runtime.panicIndex>
 101b769:	b9 43 00 00 00 	mov	ecx, 67
 101b76e:	e8 dd 7b 03 00 	call	228317 <_runtime.panicIndex>
 101b773:	8b 42 58 	mov	eax, dword ptr [rdx + 88]
 101b776:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 101b77b:	e8 20 ed 00 00 	call	60704 <_runtime.printlock>
 101b780:	48 8d 05 77 88 05 00 	lea	rax, [rip + 362615]
 101b787:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b78b:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 101b794:	e8 47 f6 00 00 	call	63047 <_runtime.printstring>
 101b799:	0f b6 44 24 3b 	movzx	eax, byte ptr [rsp + 59]
 101b79e:	0f b6 c0 	movzx	eax, al
 101b7a1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b7a5:	e8 76 f3 00 00 	call	62326 <_runtime.printuint>
 101b7aa:	48 8d 05 70 7a 05 00 	lea	rax, [rip + 359024]
 101b7b1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b7b5:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 101b7be:	e8 1d f6 00 00 	call	63005 <_runtime.printstring>
 101b7c3:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101b7c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b7cc:	e8 4f f3 00 00 	call	62287 <_runtime.printuint>
 101b7d1:	48 8d 05 5a 82 05 00 	lea	rax, [rip + 361050]
 101b7d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b7dc:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101b7e5:	e8 f6 f5 00 00 	call	62966 <_runtime.printstring>
 101b7ea:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 101b7ee:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b7f2:	e8 29 f3 00 00 	call	62249 <_runtime.printuint>
 101b7f7:	e8 34 ef 00 00 	call	61236 <_runtime.printnl>
 101b7fc:	e8 1f ed 00 00 	call	60703 <_runtime.printunlock>
 101b801:	48 8d 05 80 ae 05 00 	lea	rax, [rip + 372352]
 101b808:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b80c:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 101b815:	e8 46 d5 00 00 	call	54598 <_runtime.throw>
 101b81a:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 101b81f:	66 44 89 44 24 3e 	mov	word ptr [rsp + 62], r8w
 101b825:	48 8b 43 38 	mov	rax, qword ptr [rbx + 56]
 101b829:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 101b82e:	e8 6d ec 00 00 	call	60525 <_runtime.printlock>
 101b833:	48 8d 05 d8 83 05 00 	lea	rax, [rip + 361432]
 101b83a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b83e:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101b847:	e8 94 f5 00 00 	call	62868 <_runtime.printstring>
 101b84c:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 101b851:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b855:	e8 c6 f2 00 00 	call	62150 <_runtime.printuint>
 101b85a:	48 8d 05 7e 77 05 00 	lea	rax, [rip + 358270]
 101b861:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b865:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 101b86e:	e8 6d f5 00 00 	call	62829 <_runtime.printstring>
 101b873:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 101b878:	0f b7 c0 	movzx	eax, ax
 101b87b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b87f:	e8 9c f2 00 00 	call	62108 <_runtime.printuint>
 101b884:	48 8d 05 e9 8a 05 00 	lea	rax, [rip + 363241]
 101b88b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b88f:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 101b898:	e8 43 f5 00 00 	call	62787 <_runtime.printstring>
 101b89d:	0f b7 44 24 3e 	movzx	eax, word ptr [rsp + 62]
 101b8a2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b8a6:	e8 75 f2 00 00 	call	62069 <_runtime.printuint>
 101b8ab:	48 8d 05 3d 77 05 00 	lea	rax, [rip + 358205]
 101b8b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b8b6:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 101b8bf:	e8 1c f5 00 00 	call	62748 <_runtime.printstring>
 101b8c4:	0f b7 44 24 3c 	movzx	eax, word ptr [rsp + 60]
 101b8c9:	0f b7 c0 	movzx	eax, ax
 101b8cc:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b8d0:	e8 4b f2 00 00 	call	62027 <_runtime.printuint>
 101b8d5:	e8 56 ee 00 00 	call	61014 <_runtime.printnl>
 101b8da:	e8 41 ec 00 00 	call	60481 <_runtime.printunlock>
 101b8df:	48 8d 05 58 a4 05 00 	lea	rax, [rip + 369752]
 101b8e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b8ea:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 101b8f3:	e8 68 d4 00 00 	call	54376 <_runtime.throw>
 101b8f8:	e8 43 ba 00 00 	call	47683 <_runtime.panicdivide>
 101b8fd:	8b 46 58 	mov	eax, dword ptr [rsi + 88]
 101b900:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 101b905:	e8 96 eb 00 00 	call	60310 <_runtime.printlock>
 101b90a:	48 8d 05 ed 86 05 00 	lea	rax, [rip + 362221]
 101b911:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b915:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 101b91e:	e8 bd f4 00 00 	call	62653 <_runtime.printstring>
 101b923:	0f b6 44 24 3b 	movzx	eax, byte ptr [rsp + 59]
 101b928:	0f b6 c0 	movzx	eax, al
 101b92b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b92f:	e8 ec f1 00 00 	call	61932 <_runtime.printuint>
 101b934:	48 8d 05 e6 78 05 00 	lea	rax, [rip + 358630]
 101b93b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b93f:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 101b948:	e8 93 f4 00 00 	call	62611 <_runtime.printstring>
 101b94d:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101b952:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b956:	e8 c5 f1 00 00 	call	61893 <_runtime.printuint>
 101b95b:	48 8d 05 d0 80 05 00 	lea	rax, [rip + 360656]
 101b962:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b966:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101b96f:	e8 6c f4 00 00 	call	62572 <_runtime.printstring>
 101b974:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 101b978:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b97c:	e8 9f f1 00 00 	call	61855 <_runtime.printuint>
 101b981:	e8 aa ed 00 00 	call	60842 <_runtime.printnl>
 101b986:	e8 95 eb 00 00 	call	60309 <_runtime.printunlock>
 101b98b:	48 8d 05 c6 96 05 00 	lea	rax, [rip + 366278]
 101b992:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b996:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 101b99f:	e8 bc d3 00 00 	call	54204 <_runtime.throw>
 101b9a4:	48 8d 05 ca 99 05 00 	lea	rax, [rip + 367050]
 101b9ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 101b9af:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 101b9b8:	e8 a3 d3 00 00 	call	54179 <_runtime.throw>
 101b9bd:	90 	nop
 101b9be:	e8 0d 52 03 00 	call	217613 <_runtime.morestack_noctxt>
 101b9c3:	e9 78 f6 ff ff 	jmp	-2440 <_runtime.(*mspan).sweep>
 101b9c8:	cc 	int3
 101b9c9:	cc 	int3
 101b9ca:	cc 	int3
 101b9cb:	cc 	int3
 101b9cc:	cc 	int3
 101b9cd:	cc 	int3
 101b9ce:	cc 	int3
 101b9cf:	cc 	int3

_runtime.deductSweepCredit:
 101b9d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101b9d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101b9dd:	0f 86 3a 01 00 00 	jbe	314 <_runtime.deductSweepCredit+0x14d>
 101b9e3:	48 83 ec 20 	sub	rsp, 32
 101b9e7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101b9ec:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101b9f1:	f2 0f 10 05 7f 97 0d 00 	movsd	xmm0, qword ptr [rip + 890751]
 101b9f9:	0f 57 c9 	xorps	xmm1, xmm1
 101b9fc:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 101ba00:	75 06 	jne	6 <_runtime.deductSweepCredit+0x38>
 101ba02:	0f 8b 0b 01 00 00 	jnp	267 <_runtime.deductSweepCredit+0x143>
 101ba08:	80 3d 21 95 0b 00 00 	cmp	byte ptr [rip + 759073], 0
 101ba0f:	0f 85 f1 00 00 00 	jne	241 <_runtime.deductSweepCredit+0x136>
 101ba15:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101ba1a:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101ba1f:	eb 5a 	jmp	90 <_runtime.deductSweepCredit+0xab>
 101ba21:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101ba26:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101ba2b:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 101ba30:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101ba35:	0f 57 c9 	xorps	xmm1, xmm1
 101ba38:	48 8b 35 21 97 0d 00 	mov	rsi, qword ptr [rip + 890657]
 101ba3f:	48 29 d6 	sub	rsi, rdx
 101ba42:	48 39 f3 	cmp	rbx, rsi
 101ba45:	0f 8e 86 00 00 00 	jle	134 <_runtime.deductSweepCredit+0x101>
 101ba4b:	e8 00 f1 ff ff 	call	-3840 <_runtime.sweepone>
 101ba50:	48 83 3c 24 ff 	cmp	qword ptr [rsp], -1
 101ba55:	74 6f 	je	111 <_runtime.deductSweepCredit+0xf6>
 101ba57:	48 8b 05 0a 97 0d 00 	mov	rax, qword ptr [rip + 890634]
 101ba5e:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 101ba63:	48 39 c8 	cmp	rax, rcx
 101ba66:	74 b9 	je	-71 <_runtime.deductSweepCredit+0x51>
 101ba68:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101ba6d:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 101ba72:	48 89 d0 	mov	rax, rdx
 101ba75:	48 89 d9 	mov	rcx, rbx
 101ba78:	0f 57 c9 	xorps	xmm1, xmm1
 101ba7b:	48 8b 15 e6 96 0d 00 	mov	rdx, qword ptr [rip + 890598]
 101ba82:	48 8b 1d e7 e2 0d 00 	mov	rbx, qword ptr [rip + 910055]
 101ba89:	48 8b 35 e0 96 0d 00 	mov	rsi, qword ptr [rip + 890592]
 101ba90:	48 29 f3 	sub	rbx, rsi
 101ba93:	48 01 c3 	add	rbx, rax
 101ba96:	f2 0f 10 05 da 96 0d 00 	movsd	xmm0, qword ptr [rip + 890586]
 101ba9e:	48 85 db 	test	rbx, rbx
 101baa1:	7c 48 	jl	72 <_runtime.deductSweepCredit+0x11b>
 101baa3:	0f 57 d2 	xorps	xmm2, xmm2
 101baa6:	f2 48 0f 2a d3 	cvtsi2sd	xmm2, rbx
 101baab:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101bab0:	f2 0f 59 c2 	mulsd	xmm0, xmm2
 101bab4:	f2 48 0f 2c d8 	cvttsd2si	rbx, xmm0
 101bab9:	48 29 cb 	sub	rbx, rcx
 101babc:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 101bac1:	e9 72 ff ff ff 	jmp	-142 <_runtime.deductSweepCredit+0x68>
 101bac6:	0f 57 c0 	xorps	xmm0, xmm0
 101bac9:	f2 0f 11 05 a7 96 0d 00 	movsd	qword ptr [rip + 890535], xmm0
 101bad1:	80 3d 58 94 0b 00 00 	cmp	byte ptr [rip + 758872], 0
 101bad8:	75 0a 	jne	10 <_runtime.deductSweepCredit+0x114>
 101bada:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101badf:	48 83 c4 20 	add	rsp, 32
 101bae3:	c3 	ret
 101bae4:	e8 17 af 02 00 	call	175895 <_runtime.traceGCSweepDone>
 101bae9:	eb ef 	jmp	-17 <_runtime.deductSweepCredit+0x10a>
 101baeb:	48 89 de 	mov	rsi, rbx
 101baee:	48 83 e3 01 	and	rbx, 1
 101baf2:	48 d1 ee 	shr	rsi
 101baf5:	48 09 de 	or	rsi, rbx
 101baf8:	0f 57 d2 	xorps	xmm2, xmm2
 101bafb:	f2 48 0f 2a d6 	cvtsi2sd	xmm2, rsi
 101bb00:	f2 0f 58 d2 	addsd	xmm2, xmm2
 101bb04:	eb a5 	jmp	-91 <_runtime.deductSweepCredit+0xdb>
 101bb06:	e8 d5 ad 02 00 	call	175573 <_runtime.traceGCSweepStart>
 101bb0b:	0f 57 c9 	xorps	xmm1, xmm1
 101bb0e:	e9 02 ff ff ff 	jmp	-254 <_runtime.deductSweepCredit+0x45>
 101bb13:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101bb18:	48 83 c4 20 	add	rsp, 32
 101bb1c:	c3 	ret
 101bb1d:	e8 ae 50 03 00 	call	217262 <_runtime.morestack_noctxt>
 101bb22:	e9 a9 fe ff ff 	jmp	-343 <_runtime.deductSweepCredit>
 101bb27:	cc 	int3
 101bb28:	cc 	int3
 101bb29:	cc 	int3
 101bb2a:	cc 	int3
 101bb2b:	cc 	int3
 101bb2c:	cc 	int3
 101bb2d:	cc 	int3
 101bb2e:	cc 	int3
 101bb2f:	cc 	int3

_runtime.clobberfree:
 101bb30:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101bb35:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 101bb3a:	31 d2 	xor	edx, edx
 101bb3c:	eb 0b 	jmp	11 <_runtime.clobberfree+0x19>
 101bb3e:	c7 04 11 ef be ad de 	mov	dword ptr [rcx + rdx], 3735928559
 101bb45:	48 83 c2 04 	add	rdx, 4
 101bb49:	48 39 c2 	cmp	rdx, rax
 101bb4c:	72 f0 	jb	-16 <_runtime.clobberfree+0xe>
 101bb4e:	c3 	ret
 101bb4f:	cc 	int3

_runtime.(*gcSweepBuf).push:
 101bb50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101bb59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101bb5d:	0f 86 a4 01 00 00 	jbe	420 <_runtime.(*gcSweepBuf).push+0x1b7>
 101bb63:	48 83 ec 58 	sub	rsp, 88
 101bb67:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 101bb6c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 101bb71:	b8 01 00 00 00 	mov	eax, 1
 101bb76:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 101bb7b:	f0 	lock
 101bb7c:	0f c1 41 20 	xadd	dword ptr [rcx + 32], eax
 101bb80:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 101bb84:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 101bb88:	89 c3 	mov	ebx, eax
 101bb8a:	48 c1 e8 09 	shr	rax, 9
 101bb8e:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101bb93:	eb 1c 	jmp	28 <_runtime.(*gcSweepBuf).push+0x61>
 101bb95:	48 89 04 24 	mov	qword ptr [rsp], rax
 101bb99:	e8 72 c7 fe ff 	call	-80014 <_runtime.unlock>
 101bb9e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101bba3:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 101bba8:	8b 5c 24 24 	mov	ebx, dword ptr [rsp + 36]
 101bbac:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101bbb1:	48 39 d0 	cmp	rax, rdx
 101bbb4:	0f 82 39 01 00 00 	jb	313 <_runtime.(*gcSweepBuf).push+0x1a3>
 101bbba:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101bbbe:	e8 6d c5 fe ff 	call	-80531 <_runtime.lock>
 101bbc3:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 101bbc8:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 101bbcc:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 101bbd1:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 101bbd6:	48 39 ca 	cmp	rdx, rcx
 101bbd9:	72 ba 	jb	-70 <_runtime.(*gcSweepBuf).push+0x45>
 101bbdb:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 101bbdf:	48 39 d9 	cmp	rcx, rbx
 101bbe2:	0f 84 81 00 00 00 	je	129 <_runtime.(*gcSweepBuf).push+0x119>
 101bbe8:	48 c7 04 24 00 10 00 00 	mov	qword ptr [rsp], 4096
 101bbf0:	48 8b 05 89 f5 0a 00 	mov	rax, qword ptr [rip + 718217]
 101bbf7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101bbfc:	48 8d 05 b5 ca 0d 00 	lea	rax, [rip + 903861]
 101bc03:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101bc08:	e8 03 eb fe ff 	call	-70909 <_runtime.persistentalloc>
 101bc0d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101bc12:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 101bc17:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101bc1c:	48 c1 e1 03 	shl	rcx, 3
 101bc20:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 101bc25:	48 03 4a 08 	add	rcx, qword ptr [rdx + 8]
 101bc29:	48 87 01 	xchg	qword ptr [rcx], rax
 101bc2c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101bc31:	48 ff c0 	inc	rax
 101bc34:	48 87 42 10 	xchg	qword ptr [rdx + 16], rax
 101bc38:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101bc3c:	e8 cf c6 fe ff 	call	-80177 <_runtime.unlock>
 101bc41:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101bc46:	84 00 	test	byte ptr [rax], al
 101bc48:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 101bc4c:	48 81 e1 ff 01 00 00 	and	rcx, 511
 101bc53:	48 8d 04 c8 	lea	rax, [rax + 8*rcx]
 101bc57:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 101bc5c:	48 87 08 	xchg	qword ptr [rax], rcx
 101bc5f:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 101bc64:	48 83 c4 58 	add	rsp, 88
 101bc68:	c3 	ret
 101bc69:	48 d1 e3 	shl	rbx
 101bc6c:	48 85 db 	test	rbx, rbx
 101bc6f:	b8 00 01 00 00 	mov	eax, 256
 101bc74:	48 0f 44 d8 	cmove	rbx, rax
 101bc78:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 101bc7d:	48 c1 e3 03 	shl	rbx, 3
 101bc81:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101bc85:	48 8b 0d f4 f4 0a 00 	mov	rcx, qword ptr [rip + 718068]
 101bc8c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101bc91:	48 8d 0d 20 ca 0d 00 	lea	rcx, [rip + 903712]
 101bc98:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101bc9d:	e8 6e ea fe ff 	call	-71058 <_runtime.persistentalloc>
 101bca2:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101bca7:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 101bcac:	48 8b 51 18 	mov	rdx, qword ptr [rcx + 24]
 101bcb0:	48 85 d2 	test	rdx, rdx
 101bcb3:	75 12 	jne	18 <_runtime.(*gcSweepBuf).push+0x177>
 101bcb5:	48 87 41 08 	xchg	qword ptr [rcx + 8], rax
 101bcb9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101bcbe:	48 89 41 18 	mov	qword ptr [rcx + 24], rax
 101bcc2:	e9 21 ff ff ff 	jmp	-223 <_runtime.(*gcSweepBuf).push+0x98>
 101bcc7:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 101bccc:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 101bcd0:	48 89 04 24 	mov	qword ptr [rsp], rax
 101bcd4:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101bcd9:	48 c1 e2 03 	shl	rdx, 3
 101bcdd:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101bce2:	e8 69 7e 03 00 	call	228969 <_runtime.memmove>
 101bce7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101bcec:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 101bcf1:	eb c2 	jmp	-62 <_runtime.(*gcSweepBuf).push+0x165>
 101bcf3:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 101bcf7:	90 	nop
 101bcf8:	48 8d 0c c1 	lea	rcx, [rcx + 8*rax]
 101bcfc:	48 8b 09 	mov	rcx, qword ptr [rcx]
 101bcff:	48 89 c8 	mov	rax, rcx
 101bd02:	e9 3f ff ff ff 	jmp	-193 <_runtime.(*gcSweepBuf).push+0xf6>
 101bd07:	e8 c4 4e 03 00 	call	216772 <_runtime.morestack_noctxt>
 101bd0c:	e9 3f fe ff ff 	jmp	-449 <_runtime.(*gcSweepBuf).push>
 101bd11:	cc 	int3
 101bd12:	cc 	int3
 101bd13:	cc 	int3
 101bd14:	cc 	int3
 101bd15:	cc 	int3
 101bd16:	cc 	int3
 101bd17:	cc 	int3
 101bd18:	cc 	int3
 101bd19:	cc 	int3
 101bd1a:	cc 	int3
 101bd1b:	cc 	int3
 101bd1c:	cc 	int3
 101bd1d:	cc 	int3
 101bd1e:	cc 	int3
 101bd1f:	cc 	int3

_runtime.(*gcSweepBuf).block:
 101bd20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101bd29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101bd2d:	0f 86 a0 00 00 00 	jbe	160 <_runtime.(*gcSweepBuf).block+0xb3>
 101bd33:	48 83 ec 18 	sub	rsp, 24
 101bd37:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101bd3c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101bd41:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101bd46:	48 85 c0 	test	rax, rax
 101bd49:	7d 5d 	jge	93 <_runtime.(*gcSweepBuf).block+0x88>
 101bd4b:	b9 01 00 00 00 	mov	ecx, 1
 101bd50:	84 c9 	test	cl, cl
 101bd52:	75 65 	jne	101 <_runtime.(*gcSweepBuf).block+0x99>
 101bd54:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101bd59:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 101bd5d:	90 	nop
 101bd5e:	48 8d 14 c2 	lea	rdx, [rdx + 8*rax]
 101bd62:	48 8b 12 	mov	rdx, qword ptr [rdx]
 101bd65:	8b 49 20 	mov	ecx, dword ptr [rcx + 32]
 101bd68:	89 c9 	mov	ecx, ecx
 101bd6a:	48 89 cb 	mov	rbx, rcx
 101bd6d:	48 c1 e9 09 	shr	rcx, 9
 101bd71:	48 39 c8 	cmp	rax, rcx
 101bd74:	73 24 	jae	36 <_runtime.(*gcSweepBuf).block+0x7a>
 101bd76:	84 02 	test	byte ptr [rdx], al
 101bd78:	b8 00 02 00 00 	mov	eax, 512
 101bd7d:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 101bd82:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101bd87:	48 c7 44 24 40 00 02 00 00 	mov	qword ptr [rsp + 64], 512
 101bd90:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101bd95:	48 83 c4 18 	add	rsp, 24
 101bd99:	c3 	ret
 101bd9a:	84 02 	test	byte ptr [rdx], al
 101bd9c:	48 81 e3 ff 01 00 00 	and	rbx, 511
 101bda3:	48 89 d8 	mov	rax, rbx
 101bda6:	eb d5 	jmp	-43 <_runtime.(*gcSweepBuf).block+0x5d>
 101bda8:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 101bdad:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 101bdb1:	48 39 d8 	cmp	rax, rbx
 101bdb4:	0f 93 c1 	setae	cl
 101bdb7:	eb 97 	jmp	-105 <_runtime.(*gcSweepBuf).block+0x30>
 101bdb9:	48 8d 05 bd 8c 05 00 	lea	rax, [rip + 363709]
 101bdc0:	48 89 04 24 	mov	qword ptr [rsp], rax
 101bdc4:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 101bdcd:	e8 8e cf 00 00 	call	53134 <_runtime.throw>
 101bdd2:	90 	nop
 101bdd3:	e8 f8 4d 03 00 	call	216568 <_runtime.morestack_noctxt>
 101bdd8:	e9 43 ff ff ff 	jmp	-189 <_runtime.(*gcSweepBuf).block>
 101bddd:	cc 	int3
 101bdde:	cc 	int3
 101bddf:	cc 	int3

_runtime.(*gcWork).init:
 101bde0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101bde9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101bded:	76 4b 	jbe	75 <_runtime.(*gcWork).init+0x5a>
 101bdef:	48 83 ec 10 	sub	rsp, 16
 101bdf3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 101bdf8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 101bdfd:	e8 ce 06 00 00 	call	1742 <_runtime.getempty>
 101be02:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101be06:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101be0b:	48 89 01 	mov	qword ptr [rcx], rax
 101be0e:	e8 ad 09 00 00 	call	2477 <_runtime.trygetfull>
 101be13:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101be17:	48 85 c0 	test	rax, rax
 101be1a:	74 13 	je	19 <_runtime.(*gcWork).init+0x4f>
 101be1c:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101be21:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 101be25:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 101be2a:	48 83 c4 10 	add	rsp, 16
 101be2e:	c3 	ret
 101be2f:	e8 9c 06 00 00 	call	1692 <_runtime.getempty>
 101be34:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101be38:	eb e2 	jmp	-30 <_runtime.(*gcWork).init+0x3c>
 101be3a:	e8 91 4d 03 00 	call	216465 <_runtime.morestack_noctxt>
 101be3f:	eb 9f 	jmp	-97 <_runtime.(*gcWork).init>
 101be41:	cc 	int3
 101be42:	cc 	int3
 101be43:	cc 	int3
 101be44:	cc 	int3
 101be45:	cc 	int3
 101be46:	cc 	int3
 101be47:	cc 	int3
 101be48:	cc 	int3
 101be49:	cc 	int3
 101be4a:	cc 	int3
 101be4b:	cc 	int3
 101be4c:	cc 	int3
 101be4d:	cc 	int3
 101be4e:	cc 	int3
 101be4f:	cc 	int3

_runtime.(*gcWork).put:
 101be50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101be59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101be5d:	0f 86 f1 00 00 00 	jbe	241 <_runtime.(*gcWork).put+0x104>
 101be63:	48 83 ec 20 	sub	rsp, 32
 101be67:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101be6c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101be71:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101be76:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 101be79:	48 85 db 	test	rbx, rbx
 101be7c:	0f 84 af 00 00 00 	je	175 <_runtime.(*gcWork).put+0xe1>
 101be82:	48 81 7b 10 fd 00 00 00 	cmp	qword ptr [rbx + 16], 253
 101be8a:	0f 85 97 00 00 00 	jne	151 <_runtime.(*gcWork).put+0xd7>
 101be90:	48 8b 72 08 	mov	rsi, qword ptr [rdx + 8]
 101be94:	48 89 32 	mov	qword ptr [rdx], rsi
 101be97:	48 89 5a 08 	mov	qword ptr [rdx + 8], rbx
 101be9b:	48 8b 5e 10 	mov	rbx, qword ptr [rsi + 16]
 101be9f:	48 81 fb fd 00 00 00 	cmp	rbx, 253
 101bea6:	74 4a 	je	74 <_runtime.(*gcWork).put+0xa2>
 101bea8:	0f 94 c2 	sete	dl
 101beab:	48 8b 46 10 	mov	rax, qword ptr [rsi + 16]
 101beaf:	48 3d fd 00 00 00 	cmp	rax, 253
 101beb5:	0f 83 8e 00 00 00 	jae	142 <_runtime.(*gcWork).put+0xf9>
 101bebb:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101bec0:	48 89 4c c6 18 	mov	qword ptr [rsi + 8*rax + 24], rcx
 101bec5:	48 ff 46 10 	inc	qword ptr [rsi + 16]
 101bec9:	84 d2 	test	dl, dl
 101becb:	74 09 	je	9 <_runtime.(*gcWork).put+0x86>
 101becd:	83 3d c8 b8 0d 00 01 	cmp	dword ptr [rip + 899272], 1
 101bed4:	74 0a 	je	10 <_runtime.(*gcWork).put+0x90>
 101bed6:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101bedb:	48 83 c4 20 	add	rsp, 32
 101bedf:	c3 	ret
 101bee0:	48 8d 05 99 be 0d 00 	lea	rax, [rip + 900761]
 101bee7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101beeb:	e8 c0 61 ff ff 	call	-40512 <_runtime.(*gcControllerState).enlistWorker>
 101bef0:	eb e4 	jmp	-28 <_runtime.(*gcWork).put+0x86>
 101bef2:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 101bef7:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101befb:	e8 60 08 00 00 	call	2144 <_runtime.putfull>
 101bf00:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101bf05:	c6 40 20 01 	mov	byte ptr [rax + 32], 1
 101bf09:	e8 c2 05 00 00 	call	1474 <_runtime.getempty>
 101bf0e:	48 8b 34 24 	mov	rsi, qword ptr [rsp]
 101bf12:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101bf17:	48 89 30 	mov	qword ptr [rax], rsi
 101bf1a:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101bf1f:	48 3d fd 00 00 00 	cmp	rax, 253
 101bf25:	eb 81 	jmp	-127 <_runtime.(*gcWork).put+0x58>
 101bf27:	48 89 de 	mov	rsi, rbx
 101bf2a:	31 d2 	xor	edx, edx
 101bf2c:	e9 7a ff ff ff 	jmp	-134 <_runtime.(*gcWork).put+0x5b>
 101bf31:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101bf35:	e8 a6 fe ff ff 	call	-346 <_runtime.(*gcWork).init>
 101bf3a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101bf3f:	48 8b 30 	mov	rsi, qword ptr [rax]
 101bf42:	31 d2 	xor	edx, edx
 101bf44:	e9 62 ff ff ff 	jmp	-158 <_runtime.(*gcWork).put+0x5b>
 101bf49:	b9 fd 00 00 00 	mov	ecx, 253
 101bf4e:	e8 fd 73 03 00 	call	226301 <_runtime.panicIndex>
 101bf53:	90 	nop
 101bf54:	e8 77 4c 03 00 	call	216183 <_runtime.morestack_noctxt>
 101bf59:	e9 f2 fe ff ff 	jmp	-270 <_runtime.(*gcWork).put>
 101bf5e:	cc 	int3
 101bf5f:	cc 	int3

_runtime.(*gcWork).putBatch:
 101bf60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101bf69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101bf6d:	0f 86 b0 01 00 00 	jbe	432 <_runtime.(*gcWork).putBatch+0x1c3>
 101bf73:	48 83 ec 40 	sub	rsp, 64
 101bf77:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 101bf7c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 101bf81:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101bf86:	48 85 d2 	test	rdx, rdx
 101bf89:	0f 84 71 01 00 00 	je	369 <_runtime.(*gcWork).putBatch+0x1a0>
 101bf8f:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101bf94:	48 8b 33 	mov	rsi, qword ptr [rbx]
 101bf97:	48 85 f6 	test	rsi, rsi
 101bf9a:	0f 84 45 01 00 00 	je	325 <_runtime.(*gcWork).putBatch+0x185>
 101bfa0:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 101bfa5:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 101bfaa:	31 c0 	xor	eax, eax
 101bfac:	e9 a8 00 00 00 	jmp	168 <_runtime.(*gcWork).putBatch+0xf9>
 101bfb1:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101bfb5:	e8 a6 07 00 00 	call	1958 <_runtime.putfull>
 101bfba:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101bfbf:	c6 40 20 01 	mov	byte ptr [rax + 32], 1
 101bfc3:	e8 08 05 00 00 	call	1288 <_runtime.getempty>
 101bfc8:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101bfcd:	48 8b 73 08 	mov	rsi, qword ptr [rbx + 8]
 101bfd1:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101bfd5:	48 89 33 	mov	qword ptr [rbx], rsi
 101bfd8:	48 89 43 08 	mov	qword ptr [rbx + 8], rax
 101bfdc:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101bfe1:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 101bfe6:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 101bfeb:	b8 01 00 00 00 	mov	eax, 1
 101bff0:	4c 8b 4e 10 	mov	r9, qword ptr [rsi + 16]
 101bff4:	49 81 f9 fd 00 00 00 	cmp	r9, 253
 101bffb:	74 b4 	je	-76 <_runtime.(*gcWork).putBatch+0x51>
 101bffd:	0f 87 12 01 00 00 	ja	274 <_runtime.(*gcWork).putBatch+0x1b5>
 101c003:	4d 8d 91 03 ff ff ff 	lea	r10, [r9 - 253]
 101c00a:	4d 89 d3 	mov	r11, r10
 101c00d:	49 f7 da 	neg	r10
 101c010:	49 39 d2 	cmp	r10, rdx
 101c013:	4c 0f 4f d2 	cmovg	r10, rdx
 101c017:	49 c1 e1 03 	shl	r9, 3
 101c01b:	49 c1 fb 3f 	sar	r11, 63
 101c01f:	4d 21 cb 	and	r11, r9
 101c022:	4e 8d 0c 1e 	lea	r9, [rsi + r11]
 101c026:	4d 8d 49 18 	lea	r9, [r9 + 24]
 101c02a:	49 39 f9 	cmp	r9, rdi
 101c02d:	75 40 	jne	64 <_runtime.(*gcWork).putBatch+0x10f>
 101c02f:	4c 01 56 10 	add	qword ptr [rsi + 16], r10
 101c033:	49 39 d2 	cmp	r10, rdx
 101c036:	0f 87 ce 00 00 00 	ja	206 <_runtime.(*gcWork).putBatch+0x1aa>
 101c03c:	4c 29 d2 	sub	rdx, r10
 101c03f:	4d 29 d0 	sub	r8, r10
 101c042:	4d 89 c1 	mov	r9, r8
 101c045:	49 f7 d8 	neg	r8
 101c048:	49 c1 e2 03 	shl	r10, 3
 101c04c:	49 c1 f8 3f 	sar	r8, 63
 101c050:	4d 21 d0 	and	r8, r10
 101c053:	4c 01 c7 	add	rdi, r8
 101c056:	4d 89 c8 	mov	r8, r9
 101c059:	48 85 d2 	test	rdx, rdx
 101c05c:	7e 5e 	jle	94 <_runtime.(*gcWork).putBatch+0x15c>
 101c05e:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 101c063:	48 89 7c 24 30 	mov	qword ptr [rsp + 48], rdi
 101c068:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 101c06d:	eb 81 	jmp	-127 <_runtime.(*gcWork).putBatch+0x90>
 101c06f:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 101c074:	4c 89 54 24 20 	mov	qword ptr [rsp + 32], r10
 101c079:	88 44 24 1f 	mov	byte ptr [rsp + 31], al
 101c07d:	4c 89 0c 24 	mov	qword ptr [rsp], r9
 101c081:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 101c086:	49 c1 e2 03 	shl	r10, 3
 101c08a:	4c 89 54 24 10 	mov	qword ptr [rsp + 16], r10
 101c08f:	e8 bc 7a 03 00 	call	228028 <_runtime.memmove>
 101c094:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 101c099:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101c09e:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101c0a3:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 101c0a8:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 101c0ad:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 101c0b2:	4c 8b 54 24 20 	mov	r10, qword ptr [rsp + 32]
 101c0b7:	e9 73 ff ff ff 	jmp	-141 <_runtime.(*gcWork).putBatch+0xcf>
 101c0bc:	84 c0 	test	al, al
 101c0be:	74 09 	je	9 <_runtime.(*gcWork).putBatch+0x169>
 101c0c0:	83 3d d5 b6 0d 00 01 	cmp	dword ptr [rip + 898773], 1
 101c0c7:	74 0a 	je	10 <_runtime.(*gcWork).putBatch+0x173>
 101c0c9:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101c0ce:	48 83 c4 40 	add	rsp, 64
 101c0d2:	c3 	ret
 101c0d3:	48 8d 05 a6 bc 0d 00 	lea	rax, [rip + 900262]
 101c0da:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c0de:	e8 cd 5f ff ff 	call	-41011 <_runtime.(*gcControllerState).enlistWorker>
 101c0e3:	eb e4 	jmp	-28 <_runtime.(*gcWork).putBatch+0x169>
 101c0e5:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101c0e9:	e8 f2 fc ff ff 	call	-782 <_runtime.(*gcWork).init>
 101c0ee:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101c0f3:	48 8b 33 	mov	rsi, qword ptr [rbx]
 101c0f6:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101c0fb:	e9 a0 fe ff ff 	jmp	-352 <_runtime.(*gcWork).putBatch+0x40>
 101c100:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101c105:	48 83 c4 40 	add	rsp, 64
 101c109:	c3 	ret
 101c10a:	4c 89 d0 	mov	rax, r10
 101c10d:	48 89 d1 	mov	rcx, rdx
 101c110:	e8 9b 72 03 00 	call	225947 <_runtime.panicSliceB>
 101c115:	4c 89 c8 	mov	rax, r9
 101c118:	b9 fd 00 00 00 	mov	ecx, 253
 101c11d:	e8 8e 72 03 00 	call	225934 <_runtime.panicSliceB>
 101c122:	90 	nop
 101c123:	e8 a8 4a 03 00 	call	215720 <_runtime.morestack_noctxt>
 101c128:	e9 33 fe ff ff 	jmp	-461 <_runtime.(*gcWork).putBatch>
 101c12d:	cc 	int3
 101c12e:	cc 	int3
 101c12f:	cc 	int3

_runtime.(*gcWork).tryGet:
 101c130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c13d:	0f 86 cc 00 00 00 	jbe	204 <_runtime.(*gcWork).tryGet+0xdf>
 101c143:	48 83 ec 28 	sub	rsp, 40
 101c147:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101c14c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101c151:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101c156:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 101c159:	48 85 db 	test	rbx, rbx
 101c15c:	0f 84 8c 00 00 00 	je	140 <_runtime.(*gcWork).tryGet+0xbe>
 101c162:	48 83 7b 10 00 	cmp	qword ptr [rbx + 16], 0
 101c167:	75 15 	jne	21 <_runtime.(*gcWork).tryGet+0x4e>
 101c169:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 101c16d:	48 8b 32 	mov	rsi, qword ptr [rdx]
 101c170:	48 89 1a 	mov	qword ptr [rdx], rbx
 101c173:	48 89 72 08 	mov	qword ptr [rdx + 8], rsi
 101c177:	48 83 7b 10 00 	cmp	qword ptr [rbx + 16], 0
 101c17c:	74 28 	je	40 <_runtime.(*gcWork).tryGet+0x76>
 101c17e:	48 8b 53 10 	mov	rdx, qword ptr [rbx + 16]
 101c182:	48 8d 42 ff 	lea	rax, [rdx - 1]
 101c186:	48 89 43 10 	mov	qword ptr [rbx + 16], rax
 101c18a:	48 3d fd 00 00 00 	cmp	rax, 253
 101c190:	73 72 	jae	114 <_runtime.(*gcWork).tryGet+0xd4>
 101c192:	48 8b 44 d3 10 	mov	rax, qword ptr [rbx + 8*rdx + 16]
 101c197:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101c19c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101c1a1:	48 83 c4 28 	add	rsp, 40
 101c1a5:	c3 	ret
 101c1a6:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 101c1ab:	e8 10 06 00 00 	call	1552 <_runtime.trygetfull>
 101c1b0:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101c1b4:	48 85 c0 	test	rax, rax
 101c1b7:	74 22 	je	34 <_runtime.(*gcWork).tryGet+0xab>
 101c1b9:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101c1be:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c1c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c1c7:	e8 34 05 00 00 	call	1332 <_runtime.putempty>
 101c1cc:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101c1d1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101c1d6:	48 89 18 	mov	qword ptr [rax], rbx
 101c1d9:	eb a3 	jmp	-93 <_runtime.(*gcWork).tryGet+0x4e>
 101c1db:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 101c1e4:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101c1e9:	48 83 c4 28 	add	rsp, 40
 101c1ed:	c3 	ret
 101c1ee:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101c1f2:	e8 e9 fb ff ff 	call	-1047 <_runtime.(*gcWork).init>
 101c1f7:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 101c1fc:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 101c1ff:	e9 5e ff ff ff 	jmp	-162 <_runtime.(*gcWork).tryGet+0x32>
 101c204:	b9 fd 00 00 00 	mov	ecx, 253
 101c209:	e8 42 71 03 00 	call	225602 <_runtime.panicIndex>
 101c20e:	90 	nop
 101c20f:	e8 bc 49 03 00 	call	215484 <_runtime.morestack_noctxt>
 101c214:	e9 17 ff ff ff 	jmp	-233 <_runtime.(*gcWork).tryGet>
 101c219:	cc 	int3
 101c21a:	cc 	int3
 101c21b:	cc 	int3
 101c21c:	cc 	int3
 101c21d:	cc 	int3
 101c21e:	cc 	int3
 101c21f:	cc 	int3

_runtime.(*gcWork).dispose:
 101c220:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c229:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c22d:	0f 86 cb 00 00 00 	jbe	203 <_runtime.(*gcWork).dispose+0xde>
 101c233:	48 83 ec 10 	sub	rsp, 16
 101c237:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 101c23c:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 101c241:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c246:	48 8b 08 	mov	rcx, qword ptr [rax]
 101c249:	48 85 c9 	test	rcx, rcx
 101c24c:	74 41 	je	65 <_runtime.(*gcWork).dispose+0x6f>
 101c24e:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 101c253:	0f 85 8e 00 00 00 	jne	142 <_runtime.(*gcWork).dispose+0xc7>
 101c259:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c25d:	e8 9e 04 00 00 	call	1182 <_runtime.putempty>
 101c262:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c267:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 101c26e:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101c272:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 101c277:	75 5a 	jne	90 <_runtime.(*gcWork).dispose+0xb3>
 101c279:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c27d:	e8 7e 04 00 00 	call	1150 <_runtime.putempty>
 101c282:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c287:	48 c7 40 08 00 00 00 00 	mov	qword ptr [rax + 8], 0
 101c28f:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 101c293:	48 85 c9 	test	rcx, rcx
 101c296:	74 14 	je	20 <_runtime.(*gcWork).dispose+0x8c>
 101c298:	48 8d 15 21 27 0b 00 	lea	rdx, [rip + 730913]
 101c29f:	f0 	lock
 101c2a0:	48 0f c1 0a 	xadd	qword ptr [rdx], rcx
 101c2a4:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 101c2ac:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 101c2b0:	48 85 c9 	test	rcx, rcx
 101c2b3:	74 14 	je	20 <_runtime.(*gcWork).dispose+0xa9>
 101c2b5:	48 8d 15 c4 ba 0d 00 	lea	rdx, [rip + 899780]
 101c2bc:	f0 	lock
 101c2bd:	48 0f c1 0a 	xadd	qword ptr [rdx], rcx
 101c2c1:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 101c2c9:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 101c2ce:	48 83 c4 10 	add	rsp, 16
 101c2d2:	c3 	ret
 101c2d3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c2d7:	e8 84 04 00 00 	call	1156 <_runtime.putfull>
 101c2dc:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c2e1:	c6 40 20 01 	mov	byte ptr [rax + 32], 1
 101c2e5:	eb 9b 	jmp	-101 <_runtime.(*gcWork).dispose+0x62>
 101c2e7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c2eb:	e8 70 04 00 00 	call	1136 <_runtime.putfull>
 101c2f0:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c2f5:	c6 40 20 01 	mov	byte ptr [rax + 32], 1
 101c2f9:	e9 64 ff ff ff 	jmp	-156 <_runtime.(*gcWork).dispose+0x42>
 101c2fe:	e8 cd 48 03 00 	call	215245 <_runtime.morestack_noctxt>
 101c303:	e9 18 ff ff ff 	jmp	-232 <_runtime.(*gcWork).dispose>
 101c308:	cc 	int3
 101c309:	cc 	int3
 101c30a:	cc 	int3
 101c30b:	cc 	int3
 101c30c:	cc 	int3
 101c30d:	cc 	int3
 101c30e:	cc 	int3
 101c30f:	cc 	int3

_runtime.(*gcWork).balance:
 101c310:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c319:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c31d:	0f 86 da 00 00 00 	jbe	218 <_runtime.(*gcWork).balance+0xed>
 101c323:	48 83 ec 18 	sub	rsp, 24
 101c327:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101c32c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101c331:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c336:	48 8b 18 	mov	rbx, qword ptr [rax]
 101c339:	48 85 db 	test	rbx, rbx
 101c33c:	0f 84 9c 00 00 00 	je	156 <_runtime.(*gcWork).balance+0xce>
 101c342:	48 8b 70 08 	mov	rsi, qword ptr [rax + 8]
 101c346:	48 8b 4e 10 	mov	rcx, qword ptr [rsi + 16]
 101c34a:	48 85 c9 	test	rcx, rcx
 101c34d:	74 56 	je	86 <_runtime.(*gcWork).balance+0x95>
 101c34f:	48 81 f9 fd 00 00 00 	cmp	rcx, 253
 101c356:	0f 87 96 00 00 00 	ja	150 <_runtime.(*gcWork).balance+0xe2>
 101c35c:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101c360:	e8 fb 03 00 00 	call	1019 <_runtime.putfull>
 101c365:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c36a:	c6 40 20 01 	mov	byte ptr [rax + 32], 1
 101c36e:	e8 5d 01 00 00 	call	349 <_runtime.getempty>
 101c373:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101c377:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101c37c:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 101c380:	83 3d 15 b4 0d 00 01 	cmp	dword ptr [rip + 898069], 1
 101c387:	74 0a 	je	10 <_runtime.(*gcWork).balance+0x83>
 101c389:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c38e:	48 83 c4 18 	add	rsp, 24
 101c392:	c3 	ret
 101c393:	48 8d 05 e6 b9 0d 00 	lea	rax, [rip + 899558]
 101c39a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c39e:	e8 0d 5d ff ff 	call	-41715 <_runtime.(*gcControllerState).enlistWorker>
 101c3a3:	eb e4 	jmp	-28 <_runtime.(*gcWork).balance+0x79>
 101c3a5:	48 8b 4b 10 	mov	rcx, qword ptr [rbx + 16]
 101c3a9:	48 83 f9 04 	cmp	rcx, 4
 101c3ad:	7e 25 	jle	37 <_runtime.(*gcWork).balance+0xc4>
 101c3af:	48 81 f9 fd 00 00 00 	cmp	rcx, 253
 101c3b6:	77 30 	ja	48 <_runtime.(*gcWork).balance+0xd8>
 101c3b8:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101c3bc:	e8 6f 04 00 00 	call	1135 <_runtime.handoff>
 101c3c1:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101c3c6:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101c3cb:	48 89 01 	mov	qword ptr [rcx], rax
 101c3ce:	c6 41 20 01 	mov	byte ptr [rcx + 32], 1
 101c3d2:	eb ac 	jmp	-84 <_runtime.(*gcWork).balance+0x70>
 101c3d4:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c3d9:	48 83 c4 18 	add	rsp, 24
 101c3dd:	c3 	ret
 101c3de:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c3e3:	48 83 c4 18 	add	rsp, 24
 101c3e7:	c3 	ret
 101c3e8:	ba fd 00 00 00 	mov	edx, 253
 101c3ed:	e8 7e 6f 03 00 	call	225150 <_runtime.panicSliceAlen>
 101c3f2:	ba fd 00 00 00 	mov	edx, 253
 101c3f7:	e8 74 6f 03 00 	call	225140 <_runtime.panicSliceAlen>
 101c3fc:	90 	nop
 101c3fd:	e8 ce 47 03 00 	call	214990 <_runtime.morestack_noctxt>
 101c402:	e9 09 ff ff ff 	jmp	-247 <_runtime.(*gcWork).balance>
 101c407:	cc 	int3
 101c408:	cc 	int3
 101c409:	cc 	int3
 101c40a:	cc 	int3
 101c40b:	cc 	int3
 101c40c:	cc 	int3
 101c40d:	cc 	int3
 101c40e:	cc 	int3
 101c40f:	cc 	int3

_runtime.(*workbuf).checknonempty:
 101c410:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c419:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c41d:	76 3e 	jbe	62 <_runtime.(*workbuf).checknonempty+0x4d>
 101c41f:	48 83 ec 18 	sub	rsp, 24
 101c423:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101c428:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101c42d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c432:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 101c437:	74 0a 	je	10 <_runtime.(*workbuf).checknonempty+0x33>
 101c439:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c43e:	48 83 c4 18 	add	rsp, 24
 101c442:	c3 	ret
 101c443:	48 8d 05 e8 77 05 00 	lea	rax, [rip + 358376]
 101c44a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c44e:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101c457:	e8 04 c9 00 00 	call	51460 <_runtime.throw>
 101c45c:	90 	nop
 101c45d:	e8 6e 47 03 00 	call	214894 <_runtime.morestack_noctxt>
 101c462:	eb ac 	jmp	-84 <_runtime.(*workbuf).checknonempty>
 101c464:	cc 	int3
 101c465:	cc 	int3
 101c466:	cc 	int3
 101c467:	cc 	int3
 101c468:	cc 	int3
 101c469:	cc 	int3
 101c46a:	cc 	int3
 101c46b:	cc 	int3
 101c46c:	cc 	int3
 101c46d:	cc 	int3
 101c46e:	cc 	int3
 101c46f:	cc 	int3

_runtime.(*workbuf).checkempty:
 101c470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c479:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c47d:	76 3e 	jbe	62 <_runtime.(*workbuf).checkempty+0x4d>
 101c47f:	48 83 ec 18 	sub	rsp, 24
 101c483:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101c488:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101c48d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c492:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 101c497:	75 0a 	jne	10 <_runtime.(*workbuf).checkempty+0x33>
 101c499:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c49e:	48 83 c4 18 	add	rsp, 24
 101c4a2:	c3 	ret
 101c4a3:	48 8d 05 a2 7e 05 00 	lea	rax, [rip + 360098]
 101c4aa:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c4ae:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 101c4b7:	e8 a4 c8 00 00 	call	51364 <_runtime.throw>
 101c4bc:	90 	nop
 101c4bd:	e8 0e 47 03 00 	call	214798 <_runtime.morestack_noctxt>
 101c4c2:	eb ac 	jmp	-84 <_runtime.(*workbuf).checkempty>
 101c4c4:	cc 	int3
 101c4c5:	cc 	int3
 101c4c6:	cc 	int3
 101c4c7:	cc 	int3
 101c4c8:	cc 	int3
 101c4c9:	cc 	int3
 101c4ca:	cc 	int3
 101c4cb:	cc 	int3
 101c4cc:	cc 	int3
 101c4cd:	cc 	int3
 101c4ce:	cc 	int3
 101c4cf:	cc 	int3

_runtime.getempty:
 101c4d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c4d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c4dd:	0f 86 08 02 00 00 	jbe	520 <_runtime.getempty+0x21b>
 101c4e3:	48 83 ec 58 	sub	rsp, 88
 101c4e7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 101c4ec:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 101c4f1:	48 83 3d 4f 24 0b 00 00 	cmp	qword ptr [rip + 730191], 0
 101c4f9:	0f 85 9c 01 00 00 	jne	412 <_runtime.getempty+0x1cb>
 101c4ff:	31 c0 	xor	eax, eax
 101c501:	48 85 c0 	test	rax, rax
 101c504:	0f 85 9a 00 00 00 	jne	154 <_runtime.getempty+0xd4>
 101c50a:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101c50f:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 101c518:	48 83 3d 78 24 0b 00 00 	cmp	qword ptr [rip + 730232], 0
 101c520:	0f 85 09 01 00 00 	jne	265 <_runtime.getempty+0x15f>
 101c526:	48 83 7c 24 20 00 	cmp	qword ptr [rsp + 32], 0
 101c52c:	0f 84 81 00 00 00 	je	129 <_runtime.getempty+0xe3>
 101c532:	31 c9 	xor	ecx, ecx
 101c534:	eb 05 	jmp	5 <_runtime.getempty+0x6b>
 101c536:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101c53b:	48 8d 91 00 08 00 00 	lea	rdx, [rcx + 2048]
 101c542:	48 81 fa 00 80 00 00 	cmp	rdx, 32768
 101c549:	77 59 	ja	89 <_runtime.getempty+0xd4>
 101c54b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101c550:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 101c555:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101c55a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c55f:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 101c563:	48 01 ca 	add	rdx, rcx
 101c566:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 101c56b:	84 00 	test	byte ptr [rax], al
 101c56d:	48 c7 42 10 00 00 00 00 	mov	qword ptr [rdx + 16], 0
 101c575:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101c579:	e8 f2 ba fe ff 	call	-83214 <_runtime.lfnodeValidate>
 101c57e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101c583:	48 85 c0 	test	rax, rax
 101c586:	75 07 	jne	7 <_runtime.getempty+0xbf>
 101c588:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101c58d:	eb a7 	jmp	-89 <_runtime.getempty+0x66>
 101c58f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101c594:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c598:	e8 63 01 00 00 	call	355 <_runtime.putempty>
 101c59d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101c5a2:	eb 92 	jmp	-110 <_runtime.getempty+0x66>
 101c5a4:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 101c5a9:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 101c5ae:	48 83 c4 58 	add	rsp, 88
 101c5b2:	c3 	ret
 101c5b3:	0f 57 c0 	xorps	xmm0, xmm0
 101c5b6:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 101c5bb:	48 8d 05 4e 23 03 00 	lea	rax, [rip + 205646]
 101c5c2:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 101c5c7:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 101c5cc:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 101c5d1:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 101c5d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c5da:	e8 a1 44 03 00 	call	214177 <_runtime.systemstack>
 101c5df:	48 83 7c 24 20 00 	cmp	qword ptr [rsp + 32], 0
 101c5e5:	0f 84 e6 00 00 00 	je	230 <_runtime.getempty+0x201>
 101c5eb:	48 8d 05 9e 23 0b 00 	lea	rax, [rip + 730014]
 101c5f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c5f6:	e8 35 bb fe ff 	call	-83147 <_runtime.lock>
 101c5fb:	48 8d 05 a6 23 0b 00 	lea	rax, [rip + 730022]
 101c602:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c606:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c60b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101c610:	e8 cb 26 00 00 	call	9931 <_runtime.(*mSpanList).insert>
 101c615:	48 8d 05 74 23 0b 00 	lea	rax, [rip + 729972]
 101c61c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c620:	e8 eb bc fe ff 	call	-82709 <_runtime.unlock>
 101c625:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101c62a:	e9 03 ff ff ff 	jmp	-253 <_runtime.getempty+0x62>
 101c62f:	48 8d 05 5a 23 0b 00 	lea	rax, [rip + 729946]
 101c636:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c63a:	e8 f1 ba fe ff 	call	-83215 <_runtime.lock>
 101c63f:	48 8b 05 52 23 0b 00 	mov	rax, qword ptr [rip + 729938]
 101c646:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101c64b:	48 85 c0 	test	rax, rax
 101c64e:	75 1a 	jne	26 <_runtime.getempty+0x19a>
 101c650:	48 8d 05 39 23 0b 00 	lea	rax, [rip + 729913]
 101c657:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c65b:	e8 b0 bc fe ff 	call	-82768 <_runtime.unlock>
 101c660:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101c665:	e9 bc fe ff ff 	jmp	-324 <_runtime.getempty+0x56>
 101c66a:	48 8d 0d 27 23 0b 00 	lea	rcx, [rip + 729895]
 101c671:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c675:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101c67a:	e8 d1 24 00 00 	call	9425 <_runtime.(*mSpanList).remove>
 101c67f:	48 8d 05 22 23 0b 00 	lea	rax, [rip + 729890]
 101c686:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c68a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c68f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101c694:	e8 47 26 00 00 	call	9799 <_runtime.(*mSpanList).insert>
 101c699:	eb b5 	jmp	-75 <_runtime.getempty+0x180>
 101c69b:	48 8d 05 a6 22 0b 00 	lea	rax, [rip + 729766]
 101c6a2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c6a6:	e8 85 b9 fe ff 	call	-83579 <_runtime.(*lfstack).pop>
 101c6ab:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101c6b0:	48 85 c0 	test	rax, rax
 101c6b3:	0f 84 48 fe ff ff 	je	-440 <_runtime.getempty+0x31>
 101c6b9:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 101c6be:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c6c2:	e8 a9 fd ff ff 	call	-599 <_runtime.(*workbuf).checkempty>
 101c6c7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101c6cc:	e9 30 fe ff ff 	jmp	-464 <_runtime.getempty+0x31>
 101c6d1:	48 8d 05 ae 70 05 00 	lea	rax, [rip + 356526]
 101c6d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c6dc:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 101c6e5:	e8 76 c6 00 00 	call	50806 <_runtime.throw>
 101c6ea:	90 	nop
 101c6eb:	e8 e0 44 03 00 	call	214240 <_runtime.morestack_noctxt>
 101c6f0:	e9 db fd ff ff 	jmp	-549 <_runtime.getempty>
 101c6f5:	cc 	int3
 101c6f6:	cc 	int3
 101c6f7:	cc 	int3
 101c6f8:	cc 	int3
 101c6f9:	cc 	int3
 101c6fa:	cc 	int3
 101c6fb:	cc 	int3
 101c6fc:	cc 	int3
 101c6fd:	cc 	int3
 101c6fe:	cc 	int3
 101c6ff:	cc 	int3

_runtime.putempty:
 101c700:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c709:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c70d:	76 42 	jbe	66 <_runtime.putempty+0x51>
 101c70f:	48 83 ec 18 	sub	rsp, 24
 101c713:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101c718:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101c71d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c722:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c726:	e8 45 fd ff ff 	call	-699 <_runtime.(*workbuf).checkempty>
 101c72b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c730:	84 00 	test	byte ptr [rax], al
 101c732:	48 8d 0d 0f 22 0b 00 	lea	rcx, [rip + 729615]
 101c739:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c73d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101c742:	e8 89 b7 fe ff 	call	-84087 <_runtime.(*lfstack).push>
 101c747:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c74c:	48 83 c4 18 	add	rsp, 24
 101c750:	c3 	ret
 101c751:	e8 7a 44 03 00 	call	214138 <_runtime.morestack_noctxt>
 101c756:	eb a8 	jmp	-88 <_runtime.putempty>
 101c758:	cc 	int3
 101c759:	cc 	int3
 101c75a:	cc 	int3
 101c75b:	cc 	int3
 101c75c:	cc 	int3
 101c75d:	cc 	int3
 101c75e:	cc 	int3
 101c75f:	cc 	int3

_runtime.putfull:
 101c760:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c769:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c76d:	76 42 	jbe	66 <_runtime.putfull+0x51>
 101c76f:	48 83 ec 18 	sub	rsp, 24
 101c773:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101c778:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101c77d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c782:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c786:	e8 85 fc ff ff 	call	-891 <_runtime.(*workbuf).checknonempty>
 101c78b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101c790:	84 00 	test	byte ptr [rax], al
 101c792:	48 8d 0d a7 21 0b 00 	lea	rcx, [rip + 729511]
 101c799:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101c79d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101c7a2:	e8 29 b7 fe ff 	call	-84183 <_runtime.(*lfstack).push>
 101c7a7:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c7ac:	48 83 c4 18 	add	rsp, 24
 101c7b0:	c3 	ret
 101c7b1:	e8 1a 44 03 00 	call	214042 <_runtime.morestack_noctxt>
 101c7b6:	eb a8 	jmp	-88 <_runtime.putfull>
 101c7b8:	cc 	int3
 101c7b9:	cc 	int3
 101c7ba:	cc 	int3
 101c7bb:	cc 	int3
 101c7bc:	cc 	int3
 101c7bd:	cc 	int3
 101c7be:	cc 	int3
 101c7bf:	cc 	int3

_runtime.trygetfull:
 101c7c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c7c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c7cd:	76 59 	jbe	89 <_runtime.trygetfull+0x68>
 101c7cf:	48 83 ec 20 	sub	rsp, 32
 101c7d3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101c7d8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101c7dd:	48 8d 05 5c 21 0b 00 	lea	rax, [rip + 729436]
 101c7e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c7e8:	e8 43 b8 fe ff 	call	-83901 <_runtime.(*lfstack).pop>
 101c7ed:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101c7f2:	48 85 c0 	test	rax, rax
 101c7f5:	74 22 	je	34 <_runtime.trygetfull+0x59>
 101c7f7:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101c7fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c800:	e8 0b fc ff ff 	call	-1013 <_runtime.(*workbuf).checknonempty>
 101c805:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101c80a:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101c80f:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101c814:	48 83 c4 20 	add	rsp, 32
 101c818:	c3 	ret
 101c819:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101c81e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101c823:	48 83 c4 20 	add	rsp, 32
 101c827:	c3 	ret
 101c828:	e8 a3 43 03 00 	call	213923 <_runtime.morestack_noctxt>
 101c82d:	eb 91 	jmp	-111 <_runtime.trygetfull>
 101c82f:	cc 	int3

_runtime.handoff:
 101c830:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c839:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c83d:	0f 86 9d 00 00 00 	jbe	157 <_runtime.handoff+0xb0>
 101c843:	48 83 ec 28 	sub	rsp, 40
 101c847:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101c84c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101c851:	e8 7a fc ff ff 	call	-902 <_runtime.getempty>
 101c856:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101c85a:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101c85f:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 101c863:	48 89 d3 	mov	rbx, rdx
 101c866:	48 c1 ea 3f 	shr	rdx, 63
 101c86a:	48 01 da 	add	rdx, rbx
 101c86d:	48 d1 fa 	sar	rdx
 101c870:	48 29 d3 	sub	rbx, rdx
 101c873:	48 89 59 10 	mov	qword ptr [rcx + 16], rbx
 101c877:	48 89 50 10 	mov	qword ptr [rax + 16], rdx
 101c87b:	48 8b 59 10 	mov	rbx, qword ptr [rcx + 16]
 101c87f:	48 81 fb fd 00 00 00 	cmp	rbx, 253
 101c886:	73 4a 	jae	74 <_runtime.handoff+0xa2>
 101c888:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101c88d:	48 8d 70 18 	lea	rsi, [rax + 24]
 101c891:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101c895:	48 8d 1c d9 	lea	rbx, [rcx + 8*rbx]
 101c899:	48 8d 5b 18 	lea	rbx, [rbx + 24]
 101c89d:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101c8a2:	48 c1 e2 03 	shl	rdx, 3
 101c8a6:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101c8ab:	e8 a0 72 03 00 	call	225952 <_runtime.memmove>
 101c8b0:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101c8b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c8b9:	e8 a2 fe ff ff 	call	-350 <_runtime.putfull>
 101c8be:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101c8c3:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101c8c8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101c8cd:	48 83 c4 28 	add	rsp, 40
 101c8d1:	c3 	ret
 101c8d2:	48 89 d8 	mov	rax, rbx
 101c8d5:	b9 fd 00 00 00 	mov	ecx, 253
 101c8da:	e8 71 6a 03 00 	call	223857 <_runtime.panicIndex>
 101c8df:	90 	nop
 101c8e0:	e8 eb 42 03 00 	call	213739 <_runtime.morestack_noctxt>
 101c8e5:	e9 46 ff ff ff 	jmp	-186 <_runtime.handoff>
 101c8ea:	cc 	int3
 101c8eb:	cc 	int3
 101c8ec:	cc 	int3
 101c8ed:	cc 	int3
 101c8ee:	cc 	int3
 101c8ef:	cc 	int3

_runtime.prepareFreeWorkbufs:
 101c8f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c8f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c8fd:	0f 86 83 00 00 00 	jbe	131 <_runtime.prepareFreeWorkbufs+0x96>
 101c903:	48 83 ec 18 	sub	rsp, 24
 101c907:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101c90c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101c911:	48 8d 05 78 20 0b 00 	lea	rax, [rip + 729208]
 101c918:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c91c:	e8 0f b8 fe ff 	call	-83953 <_runtime.lock>
 101c921:	48 83 3d 17 20 0b 00 00 	cmp	qword ptr [rip + 729111], 0
 101c929:	75 41 	jne	65 <_runtime.prepareFreeWorkbufs+0x7c>
 101c92b:	48 c7 05 12 20 0b 00 00 00 00 00 	mov	qword ptr [rip + 729106], 0
 101c936:	48 8d 05 5b 20 0b 00 	lea	rax, [rip + 729179]
 101c93d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c941:	48 8d 05 60 20 0b 00 	lea	rax, [rip + 729184]
 101c948:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101c94d:	e8 ce 25 00 00 	call	9678 <_runtime.(*mSpanList).takeAll>
 101c952:	48 8d 05 37 20 0b 00 	lea	rax, [rip + 729143]
 101c959:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c95d:	e8 ae b9 fe ff 	call	-83538 <_runtime.unlock>
 101c962:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101c967:	48 83 c4 18 	add	rsp, 24
 101c96b:	c3 	ret
 101c96c:	48 8d 05 27 9e 05 00 	lea	rax, [rip + 368167]
 101c973:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c977:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 101c980:	e8 db c3 00 00 	call	50139 <_runtime.throw>
 101c985:	90 	nop
 101c986:	e8 45 42 03 00 	call	213573 <_runtime.morestack_noctxt>
 101c98b:	e9 60 ff ff ff 	jmp	-160 <_runtime.prepareFreeWorkbufs>

_runtime.freeSomeWbufs:
 101c990:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101c999:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101c99d:	0f 86 ba 00 00 00 	jbe	186 <_runtime.freeSomeWbufs+0xcd>
 101c9a3:	48 83 ec 28 	sub	rsp, 40
 101c9a7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101c9ac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101c9b1:	48 8d 05 d8 1f 0b 00 	lea	rax, [rip + 729048]
 101c9b8:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c9bc:	e8 6f b7 fe ff 	call	-84113 <_runtime.lock>
 101c9c1:	83 3d d4 ad 0d 00 00 	cmp	dword ptr [rip + 896468], 0
 101c9c8:	74 1f 	je	31 <_runtime.freeSomeWbufs+0x59>
 101c9ca:	48 8d 05 bf 1f 0b 00 	lea	rax, [rip + 729023]
 101c9d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101c9d5:	e8 36 b9 fe ff 	call	-83658 <_runtime.unlock>
 101c9da:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 101c9df:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101c9e4:	48 83 c4 28 	add	rsp, 40
 101c9e8:	c3 	ret
 101c9e9:	48 83 3d a7 1f 0b 00 00 	cmp	qword ptr [rip + 728999], 0
 101c9f1:	74 d7 	je	-41 <_runtime.freeSomeWbufs+0x3a>
 101c9f3:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 101c9fc:	c6 44 24 18 00 	mov	byte ptr [rsp + 24], 0
 101ca01:	48 8d 05 78 1f 03 00 	lea	rax, [rip + 204664]
 101ca08:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101ca0d:	0f b6 44 24 30 	movzx	eax, byte ptr [rsp + 48]
 101ca12:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 101ca16:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 101ca1b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ca1f:	e8 5c 40 03 00 	call	213084 <_runtime.systemstack>
 101ca24:	90 	nop
 101ca25:	48 8b 05 6c 1f 0b 00 	mov	rax, qword ptr [rip + 728940]
 101ca2c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101ca31:	48 83 f8 00 	cmp	rax, 0
 101ca35:	48 8d 0d 54 1f 0b 00 	lea	rcx, [rip + 728916]
 101ca3c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101ca40:	e8 cb b8 fe ff 	call	-83765 <_runtime.unlock>
 101ca45:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101ca4a:	48 83 f8 00 	cmp	rax, 0
 101ca4e:	0f 95 44 24 38 	setne	byte ptr [rsp + 56]
 101ca53:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101ca58:	48 83 c4 28 	add	rsp, 40
 101ca5c:	c3 	ret
 101ca5d:	e8 6e 41 03 00 	call	213358 <_runtime.morestack_noctxt>
 101ca62:	e9 29 ff ff ff 	jmp	-215 <_runtime.freeSomeWbufs>
 101ca67:	cc 	int3
 101ca68:	cc 	int3
 101ca69:	cc 	int3
 101ca6a:	cc 	int3
 101ca6b:	cc 	int3
 101ca6c:	cc 	int3
 101ca6d:	cc 	int3
 101ca6e:	cc 	int3
 101ca6f:	cc 	int3

_runtime.recordspan:
 101ca70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101ca79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101ca7d:	0f 86 b8 01 00 00 	jbe	440 <_runtime.recordspan+0x1cb>
 101ca83:	48 83 ec 40 	sub	rsp, 64
 101ca87:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 101ca8c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 101ca91:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101ca96:	84 03 	test	byte ptr [rbx], al
 101ca98:	48 8b b3 00 01 01 00 	mov	rsi, qword ptr [rbx + 65792]
 101ca9f:	48 39 b3 f8 00 01 00 	cmp	qword ptr [rbx + 65784], rsi
 101caa6:	7d 45 	jge	69 <_runtime.recordspan+0x7d>
 101caa8:	48 8b 83 f8 00 01 00 	mov	rax, qword ptr [rbx + 65784]
 101caaf:	48 8b 93 00 01 01 00 	mov	rdx, qword ptr [rbx + 65792]
 101cab6:	48 8d 48 01 	lea	rcx, [rax + 1]
 101caba:	48 39 d1 	cmp	rcx, rdx
 101cabd:	0f 87 59 01 00 00 	ja	345 <_runtime.recordspan+0x1ac>
 101cac3:	48 89 8b f8 00 01 00 	mov	qword ptr [rbx + 65784], rcx
 101caca:	48 8b 93 f0 00 01 00 	mov	rdx, qword ptr [rbx + 65776]
 101cad1:	48 39 c8 	cmp	rax, rcx
 101cad4:	0f 83 3d 01 00 00 	jae	317 <_runtime.recordspan+0x1a7>
 101cada:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 101cadf:	48 89 0c c2 	mov	qword ptr [rdx + 8*rax], rcx
 101cae3:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101cae8:	48 83 c4 40 	add	rsp, 64
 101caec:	c3 	ret
 101caed:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 101caf6:	0f 57 c0 	xorps	xmm0, xmm0
 101caf9:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 101cafe:	48 8d 04 76 	lea	rax, [rsi + 2*rsi]
 101cb02:	48 89 c1 	mov	rcx, rax
 101cb05:	48 c1 e8 3f 	shr	rax, 63
 101cb09:	48 01 c8 	add	rax, rcx
 101cb0c:	48 d1 f8 	sar	rax
 101cb0f:	48 3d 00 20 00 00 	cmp	rax, 8192
 101cb15:	b9 00 20 00 00 	mov	ecx, 8192
 101cb1a:	48 0f 4f c8 	cmovg	rcx, rax
 101cb1e:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101cb23:	48 c1 e1 03 	shl	rcx, 3
 101cb27:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101cb2b:	48 8d 0d 8e bb 0d 00 	lea	rcx, [rip + 899982]
 101cb32:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101cb37:	e8 84 43 ff ff 	call	-48252 <_runtime.sysAlloc>
 101cb3c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101cb41:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101cb46:	48 85 c0 	test	rax, rax
 101cb49:	0f 84 d2 00 00 00 	je	210 <_runtime.recordspan+0x1b1>
 101cb4f:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101cb54:	48 8b b3 f8 00 01 00 	mov	rsi, qword ptr [rbx + 65784]
 101cb5b:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 101cb60:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 101cb65:	48 89 7c 24 30 	mov	qword ptr [rsp + 48], rdi
 101cb6a:	48 8b bb f8 00 01 00 	mov	rdi, qword ptr [rbx + 65784]
 101cb71:	4c 8b 83 f0 00 01 00 	mov	r8, qword ptr [rbx + 65776]
 101cb78:	48 85 ff 	test	rdi, rdi
 101cb7b:	7e 11 	jle	17 <_runtime.recordspan+0x11e>
 101cb7d:	48 39 fe 	cmp	rsi, rdi
 101cb80:	48 0f 4f f7 	cmovg	rsi, rdi
 101cb84:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 101cb89:	4c 39 c7 	cmp	rdi, r8
 101cb8c:	75 68 	jne	104 <_runtime.recordspan+0x186>
 101cb8e:	48 8b b3 00 01 01 00 	mov	rsi, qword ptr [rbx + 65792]
 101cb95:	48 8b bb f0 00 01 00 	mov	rdi, qword ptr [rbx + 65776]
 101cb9c:	4c 8b 44 24 28 	mov	r8, qword ptr [rsp + 40]
 101cba1:	4c 8b 4c 24 30 	mov	r9, qword ptr [rsp + 48]
 101cba6:	4c 8b 54 24 20 	mov	r10, qword ptr [rsp + 32]
 101cbab:	48 83 bb f8 00 01 00 00 	cmp	qword ptr [rbx + 65784], 0
 101cbb3:	4c 89 83 f8 00 01 00 	mov	qword ptr [rbx + 65784], r8
 101cbba:	4c 89 8b 00 01 01 00 	mov	qword ptr [rbx + 65792], r9
 101cbc1:	4c 89 93 f0 00 01 00 	mov	qword ptr [rbx + 65776], r10
 101cbc8:	0f 84 da fe ff ff 	je	-294 <_runtime.recordspan+0x38>
 101cbce:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 101cbd2:	48 c1 e6 03 	shl	rsi, 3
 101cbd6:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 101cbdb:	48 8d 05 de ba 0d 00 	lea	rax, [rip + 899806]
 101cbe2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101cbe7:	e8 64 43 ff ff 	call	-48284 <_runtime.sysFree>
 101cbec:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101cbf1:	e9 b2 fe ff ff 	jmp	-334 <_runtime.recordspan+0x38>
 101cbf6:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 101cbfa:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 101cbff:	48 c1 e6 03 	shl	rsi, 3
 101cc03:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 101cc08:	e8 43 6f 03 00 	call	225091 <_runtime.memmove>
 101cc0d:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101cc12:	e9 77 ff ff ff 	jmp	-137 <_runtime.recordspan+0x11e>
 101cc17:	e8 34 67 03 00 	call	223028 <_runtime.panicIndex>
 101cc1c:	e8 6f 67 03 00 	call	223087 <_runtime.panicSliceAcap>
 101cc21:	48 8d 05 5a 8e 05 00 	lea	rax, [rip + 364122]
 101cc28:	48 89 04 24 	mov	qword ptr [rsp], rax
 101cc2c:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 101cc35:	e8 26 c1 00 00 	call	49446 <_runtime.throw>
 101cc3a:	90 	nop
 101cc3b:	e8 90 3f 03 00 	call	212880 <_runtime.morestack_noctxt>
 101cc40:	e9 2b fe ff ff 	jmp	-469 <_runtime.recordspan>
 101cc45:	cc 	int3
 101cc46:	cc 	int3
 101cc47:	cc 	int3
 101cc48:	cc 	int3
 101cc49:	cc 	int3
 101cc4a:	cc 	int3
 101cc4b:	cc 	int3
 101cc4c:	cc 	int3
 101cc4d:	cc 	int3
 101cc4e:	cc 	int3
 101cc4f:	cc 	int3

_runtime.inHeapOrStack:
 101cc50:	90 	nop
 101cc51:	48 b8 00 00 00 00 00 80 00 00 	movabs	rax, 140737488355328
 101cc5b:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 101cc60:	48 01 c8 	add	rax, rcx
 101cc63:	48 c1 e8 1a 	shr	rax, 26
 101cc67:	48 3d 00 00 40 00 	cmp	rax, 4194304
 101cc6d:	72 2e 	jb	46 <_runtime.inHeapOrStack+0x4d>
 101cc6f:	31 c0 	xor	eax, eax
 101cc71:	48 85 c0 	test	rax, rax
 101cc74:	74 06 	je	6 <_runtime.inHeapOrStack+0x2c>
 101cc76:	48 39 48 18 	cmp	qword ptr [rax + 24], rcx
 101cc7a:	76 06 	jbe	6 <_runtime.inHeapOrStack+0x32>
 101cc7c:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 101cc81:	c3 	ret
 101cc82:	90 	nop
 101cc83:	8a 50 63 	mov	dl, byte ptr [rax + 99]
 101cc86:	ff ca 	dec	edx
 101cc88:	80 fa 01 	cmp	dl, 1
 101cc8b:	77 0a 	ja	10 <_runtime.inHeapOrStack+0x47>
 101cc8d:	48 39 48 70 	cmp	qword ptr [rax + 112], rcx
 101cc91:	0f 97 44 24 10 	seta	byte ptr [rsp + 16]
 101cc96:	c3 	ret
 101cc97:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 101cc9c:	c3 	ret
 101cc9d:	48 8b 15 2c 87 0d 00 	mov	rdx, qword ptr [rip + 886572]
 101cca4:	84 02 	test	byte ptr [rdx], al
 101cca6:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 101ccaa:	48 85 c0 	test	rax, rax
 101ccad:	74 1b 	je	27 <_runtime.inHeapOrStack+0x7a>
 101ccaf:	48 89 ca 	mov	rdx, rcx
 101ccb2:	48 c1 e9 0d 	shr	rcx, 13
 101ccb6:	48 81 e1 ff 1f 00 00 	and	rcx, 8191
 101ccbd:	48 8b 84 c8 00 00 20 00 	mov	rax, qword ptr [rax + 8*rcx + 2097152]
 101ccc5:	48 89 d1 	mov	rcx, rdx
 101ccc8:	eb a7 	jmp	-89 <_runtime.inHeapOrStack+0x21>
 101ccca:	31 c0 	xor	eax, eax
 101cccc:	eb a3 	jmp	-93 <_runtime.inHeapOrStack+0x21>
 101ccce:	cc 	int3
 101cccf:	cc 	int3

_runtime.spanOfHeap:
 101ccd0:	90 	nop
 101ccd1:	48 b8 00 00 00 00 00 80 00 00 	movabs	rax, 140737488355328
 101ccdb:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 101cce0:	48 01 c8 	add	rax, rcx
 101cce3:	48 c1 e8 1a 	shr	rax, 26
 101cce7:	48 3d 00 00 40 00 	cmp	rax, 4194304
 101cced:	72 37 	jb	55 <_runtime.spanOfHeap+0x56>
 101ccef:	31 c0 	xor	eax, eax
 101ccf1:	48 85 c0 	test	rax, rax
 101ccf4:	74 29 	je	41 <_runtime.spanOfHeap+0x4f>
 101ccf6:	8a 50 63 	mov	dl, byte ptr [rax + 99]
 101ccf9:	80 fa 01 	cmp	dl, 1
 101ccfc:	0f 95 c2 	setne	dl
 101ccff:	84 d2 	test	dl, dl
 101cd01:	74 0a 	je	10 <_runtime.spanOfHeap+0x3d>
 101cd03:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 101cd0c:	c3 	ret
 101cd0d:	48 39 48 18 	cmp	qword ptr [rax + 24], rcx
 101cd11:	77 f0 	ja	-16 <_runtime.spanOfHeap+0x33>
 101cd13:	48 39 48 70 	cmp	qword ptr [rax + 112], rcx
 101cd17:	76 ea 	jbe	-22 <_runtime.spanOfHeap+0x33>
 101cd19:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101cd1e:	c3 	ret
 101cd1f:	ba 01 00 00 00 	mov	edx, 1
 101cd24:	eb d9 	jmp	-39 <_runtime.spanOfHeap+0x2f>
 101cd26:	48 8b 15 a3 86 0d 00 	mov	rdx, qword ptr [rip + 886435]
 101cd2d:	84 02 	test	byte ptr [rdx], al
 101cd2f:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 101cd33:	48 85 c0 	test	rax, rax
 101cd36:	74 1b 	je	27 <_runtime.spanOfHeap+0x83>
 101cd38:	48 89 ca 	mov	rdx, rcx
 101cd3b:	48 c1 e9 0d 	shr	rcx, 13
 101cd3f:	48 81 e1 ff 1f 00 00 	and	rcx, 8191
 101cd46:	48 8b 84 c8 00 00 20 00 	mov	rax, qword ptr [rax + 8*rcx + 2097152]
 101cd4e:	48 89 d1 	mov	rcx, rdx
 101cd51:	eb 9e 	jmp	-98 <_runtime.spanOfHeap+0x21>
 101cd53:	31 c0 	xor	eax, eax
 101cd55:	eb 9a 	jmp	-102 <_runtime.spanOfHeap+0x21>
 101cd57:	cc 	int3
 101cd58:	cc 	int3
 101cd59:	cc 	int3
 101cd5a:	cc 	int3
 101cd5b:	cc 	int3
 101cd5c:	cc 	int3
 101cd5d:	cc 	int3
 101cd5e:	cc 	int3
 101cd5f:	cc 	int3

_runtime.(*mheap).init:
 101cd60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101cd69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101cd6d:	0f 86 a6 03 00 00 	jbe	934 <_runtime.(*mheap).init+0x3b9>
 101cd73:	48 83 ec 20 	sub	rsp, 32
 101cd77:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101cd7c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101cd81:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101cd86:	84 01 	test	byte ptr [rcx], al
 101cd88:	48 c7 81 d8 25 01 00 88 00 00 00 	mov	qword ptr [rcx + 75224], 136
 101cd93:	83 3d 66 ab 0d 00 00 	cmp	dword ptr [rip + 895846], 0
 101cd9a:	0f 85 52 03 00 00 	jne	850 <_runtime.(*mheap).init+0x392>
 101cda0:	48 8d 15 61 ac 05 00 	lea	rdx, [rip + 371809]
 101cda7:	48 89 91 e0 25 01 00 	mov	qword ptr [rcx + 75232], rdx
 101cdae:	48 89 89 e8 25 01 00 	mov	qword ptr [rcx + 75240], rcx
 101cdb5:	0f 57 c0 	xorps	xmm0, xmm0
 101cdb8:	0f 11 81 f0 25 01 00 	movups	xmmword ptr [rcx + 75248], xmm0
 101cdbf:	c7 81 00 26 01 00 00 00 00 00 	mov	dword ptr [rcx + 75264], 0
 101cdc9:	48 c7 81 08 26 01 00 00 00 00 00 	mov	qword ptr [rcx + 75272], 0
 101cdd4:	83 3d 25 ab 0d 00 00 	cmp	dword ptr [rip + 895781], 0
 101cddb:	0f 85 f6 02 00 00 	jne	758 <_runtime.(*mheap).init+0x377>
 101cde1:	48 8d 15 b0 b8 0d 00 	lea	rdx, [rip + 899248]
 101cde8:	48 89 91 10 26 01 00 	mov	qword ptr [rcx + 75280], rdx
 101cdef:	c6 81 18 26 01 00 01 	mov	byte ptr [rcx + 75288], 1
 101cdf6:	90 	nop
 101cdf7:	48 c7 81 20 26 01 00 c8 06 00 00 	mov	qword ptr [rcx + 75296], 1736
 101ce02:	83 3d f7 aa 0d 00 00 	cmp	dword ptr [rip + 895735], 0
 101ce09:	0f 85 a4 02 00 00 	jne	676 <_runtime.(*mheap).init+0x353>
 101ce0f:	0f 11 81 28 26 01 00 	movups	xmmword ptr [rcx + 75304], xmm0
 101ce16:	0f 11 81 38 26 01 00 	movups	xmmword ptr [rcx + 75320], xmm0
 101ce1d:	c7 81 48 26 01 00 00 00 00 00 	mov	dword ptr [rcx + 75336], 0
 101ce27:	48 c7 81 50 26 01 00 00 00 00 00 	mov	qword ptr [rcx + 75344], 0
 101ce32:	83 3d c7 aa 0d 00 00 	cmp	dword ptr [rip + 895687], 0
 101ce39:	0f 85 59 02 00 00 	jne	601 <_runtime.(*mheap).init+0x338>
 101ce3f:	48 8d 15 62 b8 0d 00 	lea	rdx, [rip + 899170]
 101ce46:	48 89 91 58 26 01 00 	mov	qword ptr [rcx + 75352], rdx
 101ce4d:	c6 81 60 26 01 00 01 	mov	byte ptr [rcx + 75360], 1
 101ce54:	48 c7 81 68 26 01 00 30 00 00 00 	mov	qword ptr [rcx + 75368], 48
 101ce5f:	83 3d 9a aa 0d 00 00 	cmp	dword ptr [rip + 895642], 0
 101ce66:	0f 85 08 02 00 00 	jne	520 <_runtime.(*mheap).init+0x314>
 101ce6c:	0f 11 81 70 26 01 00 	movups	xmmword ptr [rcx + 75376], xmm0
 101ce73:	0f 11 81 80 26 01 00 	movups	xmmword ptr [rcx + 75392], xmm0
 101ce7a:	c7 81 90 26 01 00 00 00 00 00 	mov	dword ptr [rcx + 75408], 0
 101ce84:	48 c7 81 98 26 01 00 00 00 00 00 	mov	qword ptr [rcx + 75416], 0
 101ce8f:	83 3d 6a aa 0d 00 00 	cmp	dword ptr [rip + 895594], 0
 101ce96:	0f 85 bd 01 00 00 	jne	445 <_runtime.(*mheap).init+0x2f9>
 101ce9c:	48 8d 05 1d b8 0d 00 	lea	rax, [rip + 899101]
 101cea3:	48 89 81 a0 26 01 00 	mov	qword ptr [rcx + 75424], rax
 101ceaa:	c6 81 a8 26 01 00 01 	mov	byte ptr [rcx + 75432], 1
 101ceb1:	90 	nop
 101ceb2:	48 c7 81 b0 26 01 00 18 00 00 00 	mov	qword ptr [rcx + 75440], 24
 101cebd:	83 3d 3c aa 0d 00 00 	cmp	dword ptr [rip + 895548], 0
 101cec4:	0f 85 64 01 00 00 	jne	356 <_runtime.(*mheap).init+0x2ce>
 101ceca:	0f 11 81 b8 26 01 00 	movups	xmmword ptr [rcx + 75448], xmm0
 101ced1:	0f 11 81 c8 26 01 00 	movups	xmmword ptr [rcx + 75464], xmm0
 101ced8:	c7 81 d8 26 01 00 00 00 00 00 	mov	dword ptr [rcx + 75480], 0
 101cee2:	48 c7 81 e0 26 01 00 00 00 00 00 	mov	qword ptr [rcx + 75488], 0
 101ceed:	83 3d 0c aa 0d 00 00 	cmp	dword ptr [rip + 895500], 0
 101cef4:	0f 85 20 01 00 00 	jne	288 <_runtime.(*mheap).init+0x2ba>
 101cefa:	48 89 81 e8 26 01 00 	mov	qword ptr [rcx + 75496], rax
 101cf01:	c6 81 f0 26 01 00 01 	mov	byte ptr [rcx + 75504], 1
 101cf08:	90 	nop
 101cf09:	48 c7 81 00 27 01 00 18 00 00 00 	mov	qword ptr [rcx + 75520], 24
 101cf14:	83 3d e5 a9 0d 00 00 	cmp	dword ptr [rip + 895461], 0
 101cf1b:	0f 85 ce 00 00 00 	jne	206 <_runtime.(*mheap).init+0x28f>
 101cf21:	0f 11 81 08 27 01 00 	movups	xmmword ptr [rcx + 75528], xmm0
 101cf28:	0f 11 81 18 27 01 00 	movups	xmmword ptr [rcx + 75544], xmm0
 101cf2f:	c7 81 28 27 01 00 00 00 00 00 	mov	dword ptr [rcx + 75560], 0
 101cf39:	48 c7 81 30 27 01 00 00 00 00 00 	mov	qword ptr [rcx + 75568], 0
 101cf44:	83 3d b5 a9 0d 00 00 	cmp	dword ptr [rip + 895413], 0
 101cf4b:	0f 85 8d 00 00 00 	jne	141 <_runtime.(*mheap).init+0x27e>
 101cf51:	48 89 81 38 27 01 00 	mov	qword ptr [rcx + 75576], rax
 101cf58:	c6 81 40 27 01 00 01 	mov	byte ptr [rcx + 75584], 1
 101cf5f:	c6 81 18 26 01 00 00 	mov	byte ptr [rcx + 75288], 0
 101cf66:	31 c0 	xor	eax, eax
 101cf68:	eb 44 	jmp	68 <_runtime.(*mheap).init+0x24e>
 101cf6a:	48 89 c2 	mov	rdx, rax
 101cf6d:	48 c1 e0 06 	shl	rax, 6
 101cf71:	88 94 01 60 04 01 00 	mov	byte ptr [rcx + rax + 66656], dl
 101cf78:	90 	nop
 101cf79:	48 c7 84 01 68 04 01 00 00 00 00 00 	mov	qword ptr [rcx + rax + 66664], 0
 101cf85:	48 c7 84 01 70 04 01 00 00 00 00 00 	mov	qword ptr [rcx + rax + 66672], 0
 101cf91:	90 	nop
 101cf92:	48 c7 84 01 78 04 01 00 00 00 00 00 	mov	qword ptr [rcx + rax + 66680], 0
 101cf9e:	48 c7 84 01 80 04 01 00 00 00 00 00 	mov	qword ptr [rcx + rax + 66688], 0
 101cfaa:	48 8d 42 01 	lea	rax, [rdx + 1]
 101cfae:	48 3d 86 00 00 00 	cmp	rax, 134
 101cfb4:	7c b4 	jl	-76 <_runtime.(*mheap).init+0x20a>
 101cfb6:	48 8d 41 08 	lea	rax, [rcx + 8]
 101cfba:	48 89 04 24 	mov	qword ptr [rsp], rax
 101cfbe:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101cfc3:	48 8d 05 ee b6 0d 00 	lea	rax, [rip + 898798]
 101cfca:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101cfcf:	e8 bc 28 00 00 	call	10428 <_runtime.(*pageAlloc).init>
 101cfd4:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101cfd9:	48 83 c4 20 	add	rsp, 32
 101cfdd:	c3 	ret
 101cfde:	48 8d b9 38 27 01 00 	lea	rdi, [rcx + 75576]
 101cfe5:	e8 f6 59 03 00 	call	219638 <_runtime.gcWriteBarrier>
 101cfea:	e9 69 ff ff ff 	jmp	-151 <_runtime.(*mheap).init+0x1f8>
 101cfef:	48 8d b9 08 27 01 00 	lea	rdi, [rcx + 75528]
 101cff6:	31 c0 	xor	eax, eax
 101cff8:	e8 e3 59 03 00 	call	219619 <_runtime.gcWriteBarrier>
 101cffd:	48 8d b9 10 27 01 00 	lea	rdi, [rcx + 75536]
 101d004:	31 c0 	xor	eax, eax
 101d006:	e8 d5 59 03 00 	call	219605 <_runtime.gcWriteBarrier>
 101d00b:	48 8d 05 ae b6 0d 00 	lea	rax, [rip + 898734]
 101d012:	0f 57 c0 	xorps	xmm0, xmm0
 101d015:	e9 0e ff ff ff 	jmp	-242 <_runtime.(*mheap).init+0x1c8>
 101d01a:	48 8d b9 e8 26 01 00 	lea	rdi, [rcx + 75496]
 101d021:	e8 ba 59 03 00 	call	219578 <_runtime.gcWriteBarrier>
 101d026:	0f 57 c0 	xorps	xmm0, xmm0
 101d029:	e9 d3 fe ff ff 	jmp	-301 <_runtime.(*mheap).init+0x1a1>
 101d02e:	48 8d b9 b8 26 01 00 	lea	rdi, [rcx + 75448]
 101d035:	31 c0 	xor	eax, eax
 101d037:	e8 a4 59 03 00 	call	219556 <_runtime.gcWriteBarrier>
 101d03c:	48 8d b9 c0 26 01 00 	lea	rdi, [rcx + 75456]
 101d043:	31 c0 	xor	eax, eax
 101d045:	e8 96 59 03 00 	call	219542 <_runtime.gcWriteBarrier>
 101d04a:	48 8d 05 6f b6 0d 00 	lea	rax, [rip + 898671]
 101d051:	0f 57 c0 	xorps	xmm0, xmm0
 101d054:	e9 78 fe ff ff 	jmp	-392 <_runtime.(*mheap).init+0x171>
 101d059:	48 8d b9 a0 26 01 00 	lea	rdi, [rcx + 75424]
 101d060:	48 8d 05 59 b6 0d 00 	lea	rax, [rip + 898649]
 101d067:	e8 74 59 03 00 	call	219508 <_runtime.gcWriteBarrier>
 101d06c:	0f 57 c0 	xorps	xmm0, xmm0
 101d06f:	e9 36 fe ff ff 	jmp	-458 <_runtime.(*mheap).init+0x14a>
 101d074:	48 8d b9 70 26 01 00 	lea	rdi, [rcx + 75376]
 101d07b:	31 c0 	xor	eax, eax
 101d07d:	e8 5e 59 03 00 	call	219486 <_runtime.gcWriteBarrier>
 101d082:	48 8d b9 78 26 01 00 	lea	rdi, [rcx + 75384]
 101d089:	31 c0 	xor	eax, eax
 101d08b:	e8 50 59 03 00 	call	219472 <_runtime.gcWriteBarrier>
 101d090:	0f 57 c0 	xorps	xmm0, xmm0
 101d093:	e9 db fd ff ff 	jmp	-549 <_runtime.(*mheap).init+0x113>
 101d098:	48 8d b9 58 26 01 00 	lea	rdi, [rcx + 75352]
 101d09f:	48 8d 05 02 b6 0d 00 	lea	rax, [rip + 898562]
 101d0a6:	e8 35 59 03 00 	call	219445 <_runtime.gcWriteBarrier>
 101d0ab:	0f 57 c0 	xorps	xmm0, xmm0
 101d0ae:	e9 9a fd ff ff 	jmp	-614 <_runtime.(*mheap).init+0xed>
 101d0b3:	48 8d b9 28 26 01 00 	lea	rdi, [rcx + 75304]
 101d0ba:	31 c0 	xor	eax, eax
 101d0bc:	e8 1f 59 03 00 	call	219423 <_runtime.gcWriteBarrier>
 101d0c1:	48 8d b9 30 26 01 00 	lea	rdi, [rcx + 75312]
 101d0c8:	31 c0 	xor	eax, eax
 101d0ca:	e8 11 59 03 00 	call	219409 <_runtime.gcWriteBarrier>
 101d0cf:	0f 57 c0 	xorps	xmm0, xmm0
 101d0d2:	e9 3f fd ff ff 	jmp	-705 <_runtime.(*mheap).init+0xb6>
 101d0d7:	48 8d b9 10 26 01 00 	lea	rdi, [rcx + 75280]
 101d0de:	48 8d 05 b3 b5 0d 00 	lea	rax, [rip + 898483]
 101d0e5:	e8 f6 58 03 00 	call	219382 <_runtime.gcWriteBarrier>
 101d0ea:	0f 57 c0 	xorps	xmm0, xmm0
 101d0ed:	e9 fd fc ff ff 	jmp	-771 <_runtime.(*mheap).init+0x8f>
 101d0f2:	48 8d b9 e0 25 01 00 	lea	rdi, [rcx + 75232]
 101d0f9:	48 8d 05 08 a9 05 00 	lea	rax, [rip + 370952]
 101d100:	e8 db 58 03 00 	call	219355 <_runtime.gcWriteBarrier>
 101d105:	48 8d b9 e8 25 01 00 	lea	rdi, [rcx + 75240]
 101d10c:	48 89 c8 	mov	rax, rcx
 101d10f:	e8 cc 58 03 00 	call	219340 <_runtime.gcWriteBarrier>
 101d114:	e9 9c fc ff ff 	jmp	-868 <_runtime.(*mheap).init+0x55>
 101d119:	e8 b2 3a 03 00 	call	211634 <_runtime.morestack_noctxt>
 101d11e:	e9 3d fc ff ff 	jmp	-963 <_runtime.(*mheap).init>
 101d123:	cc 	int3
 101d124:	cc 	int3
 101d125:	cc 	int3
 101d126:	cc 	int3
 101d127:	cc 	int3
 101d128:	cc 	int3
 101d129:	cc 	int3
 101d12a:	cc 	int3
 101d12b:	cc 	int3
 101d12c:	cc 	int3
 101d12d:	cc 	int3
 101d12e:	cc 	int3
 101d12f:	cc 	int3

_runtime.(*mheap).reclaim:
 101d130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101d139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101d13d:	0f 86 3d 02 00 00 	jbe	573 <_runtime.(*mheap).reclaim+0x250>
 101d143:	48 83 ec 70 	sub	rsp, 112
 101d147:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 101d14c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 101d151:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 101d156:	84 01 	test	byte ptr [rcx], al
 101d158:	48 8b 91 88 01 01 00 	mov	rdx, qword ptr [rcx + 65928]
 101d15f:	48 bb 00 00 00 00 00 00 00 80 	movabs	rbx, -9223372036854775808
 101d169:	48 39 da 	cmp	rdx, rbx
 101d16c:	0f 83 04 02 00 00 	jae	516 <_runtime.(*mheap).reclaim+0x246>
 101d172:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 101d17b:	48 8b 72 30 	mov	rsi, qword ptr [rdx + 48]
 101d17f:	90 	nop
 101d180:	ff 86 08 01 00 00 	inc	dword ptr [rsi + 264]
 101d186:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 101d18a:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 101d18f:	80 3d 9a 7d 0b 00 00 	cmp	byte ptr [rip + 753050], 0
 101d196:	0f 85 bc 01 00 00 	jne	444 <_runtime.(*mheap).reclaim+0x228>
 101d19c:	48 8b b1 38 04 01 00 	mov	rsi, qword ptr [rcx + 66616]
 101d1a3:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 101d1a8:	48 8b b9 30 04 01 00 	mov	rdi, qword ptr [rcx + 66608]
 101d1af:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 101d1b4:	4c 8b 81 28 04 01 00 	mov	r8, qword ptr [rcx + 66600]
 101d1bb:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 101d1c0:	4c 8b 8c 24 80 00 00 00 	mov	r9, qword ptr [rsp + 128]
 101d1c8:	31 c0 	xor	eax, eax
 101d1ca:	eb 06 	jmp	6 <_runtime.(*mheap).reclaim+0xa2>
 101d1cc:	4d 89 e1 	mov	r9, r12
 101d1cf:	44 89 e8 	mov	eax, r13d
 101d1d2:	4d 85 c9 	test	r9, r9
 101d1d5:	0f 86 1b 01 00 00 	jbe	283 <_runtime.(*mheap).reclaim+0x1c6>
 101d1db:	4c 8b 91 90 01 01 00 	mov	r10, qword ptr [rcx + 65936]
 101d1e2:	4d 85 d2 	test	r10, r10
 101d1e5:	76 36 	jbe	54 <_runtime.(*mheap).reclaim+0xed>
 101d1e7:	4d 39 ca 	cmp	r10, r9
 101d1ea:	4d 89 d3 	mov	r11, r10
 101d1ed:	4d 0f 47 d1 	cmova	r10, r9
 101d1f1:	4d 89 dc 	mov	r12, r11
 101d1f4:	4d 29 d3 	sub	r11, r10
 101d1f7:	41 89 c5 	mov	r13d, eax
 101d1fa:	4c 89 e0 	mov	rax, r12
 101d1fd:	f0 	lock
 101d1fe:	4c 0f b1 99 90 01 01 00 	cmpxchg	qword ptr [rcx + 65936], r11
 101d206:	41 0f 94 c3 	sete	r11b
 101d20a:	45 0f b6 db 	movzx	r11d, r11b
 101d20e:	4d 89 cc 	mov	r12, r9
 101d211:	4d 29 d1 	sub	r9, r10
 101d214:	4d 85 db 	test	r11, r11
 101d217:	4d 0f 45 e1 	cmovne	r12, r9
 101d21b:	eb af 	jmp	-81 <_runtime.(*mheap).reclaim+0x9c>
 101d21d:	41 ba 00 02 00 00 	mov	r10d, 512
 101d223:	f0 	lock
 101d224:	4c 0f c1 91 88 01 01 00 	xadd	qword ptr [rcx + 65928], r10
 101d22c:	4d 89 d3 	mov	r11, r10
 101d22f:	49 c1 ea 0d 	shr	r10, 13
 101d233:	49 39 fa 	cmp	r10, rdi
 101d236:	0f 83 b3 00 00 00 	jae	179 <_runtime.(*mheap).reclaim+0x1bf>
 101d23c:	4c 89 4c 24 38 	mov	qword ptr [rsp + 56], r9
 101d241:	84 c0 	test	al, al
 101d243:	74 7e 	je	126 <_runtime.(*mheap).reclaim+0x193>
 101d245:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101d249:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 101d24e:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 101d253:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 101d258:	4c 89 5c 24 20 	mov	qword ptr [rsp + 32], r11
 101d25d:	48 c7 44 24 28 00 02 00 00 	mov	qword ptr [rsp + 40], 512
 101d266:	e8 25 01 00 00 	call	293 <_runtime.(*mheap).reclaimChunk>
 101d26b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101d270:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101d275:	48 39 c8 	cmp	rax, rcx
 101d278:	77 34 	ja	52 <_runtime.(*mheap).reclaim+0x17e>
 101d27a:	48 29 c1 	sub	rcx, rax
 101d27d:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101d282:	48 bb 00 00 00 00 00 00 00 80 	movabs	rbx, -9223372036854775808
 101d28c:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101d291:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 101d296:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 101d29b:	49 89 cc 	mov	r12, rcx
 101d29e:	41 bd 01 00 00 00 	mov	r13d, 1
 101d2a4:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 101d2a9:	e9 1e ff ff ff 	jmp	-226 <_runtime.(*mheap).reclaim+0x9c>
 101d2ae:	48 29 c8 	sub	rax, rcx
 101d2b1:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 101d2b6:	f0 	lock
 101d2b7:	48 0f c1 82 90 01 01 00 	xadd	qword ptr [rdx + 65936], rax
 101d2bf:	31 c9 	xor	ecx, ecx
 101d2c1:	eb ba 	jmp	-70 <_runtime.(*mheap).reclaim+0x14d>
 101d2c3:	4c 89 5c 24 50 	mov	qword ptr [rsp + 80], r11
 101d2c8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101d2cc:	e8 5f ae fe ff 	call	-86433 <_runtime.lock>
 101d2d1:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 101d2d6:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101d2db:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 101d2e0:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 101d2e5:	4c 8b 5c 24 50 	mov	r11, qword ptr [rsp + 80]
 101d2ea:	e9 56 ff ff ff 	jmp	-170 <_runtime.(*mheap).reclaim+0x115>
 101d2ef:	48 87 99 88 01 01 00 	xchg	qword ptr [rcx + 65928], rbx
 101d2f6:	84 c0 	test	al, al
 101d2f8:	75 4e 	jne	78 <_runtime.(*mheap).reclaim+0x218>
 101d2fa:	80 3d 2f 7c 0b 00 00 	cmp	byte ptr [rip + 752687], 0
 101d301:	75 39 	jne	57 <_runtime.(*mheap).reclaim+0x20c>
 101d303:	90 	nop
 101d304:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101d30d:	8b 8a 08 01 00 00 	mov	ecx, dword ptr [rdx + 264]
 101d313:	8d 59 ff 	lea	ebx, [rcx - 1]
 101d316:	89 9a 08 01 00 00 	mov	dword ptr [rdx + 264], ebx
 101d31c:	83 f9 01 	cmp	ecx, 1
 101d31f:	75 11 	jne	17 <_runtime.(*mheap).reclaim+0x202>
 101d321:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 101d328:	74 08 	je	8 <_runtime.(*mheap).reclaim+0x202>
 101d32a:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 101d332:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 101d337:	48 83 c4 70 	add	rsp, 112
 101d33b:	c3 	ret
 101d33c:	e8 bf 96 02 00 	call	169663 <_runtime.traceGCSweepDone>
 101d341:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101d346:	eb bb 	jmp	-69 <_runtime.(*mheap).reclaim+0x1d3>
 101d348:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101d34c:	e8 bf af fe ff 	call	-86081 <_runtime.unlock>
 101d351:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101d356:	eb a2 	jmp	-94 <_runtime.(*mheap).reclaim+0x1ca>
 101d358:	e8 83 95 02 00 	call	169347 <_runtime.traceGCSweepStart>
 101d35d:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 101d362:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 101d367:	48 bb 00 00 00 00 00 00 00 80 	movabs	rbx, -9223372036854775808
 101d371:	e9 26 fe ff ff 	jmp	-474 <_runtime.(*mheap).reclaim+0x6c>
 101d376:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 101d37b:	48 83 c4 70 	add	rsp, 112
 101d37f:	c3 	ret
 101d380:	e8 4b 38 03 00 	call	211019 <_runtime.morestack_noctxt>
 101d385:	e9 a6 fd ff ff 	jmp	-602 <_runtime.(*mheap).reclaim>
 101d38a:	cc 	int3
 101d38b:	cc 	int3
 101d38c:	cc 	int3
 101d38d:	cc 	int3
 101d38e:	cc 	int3
 101d38f:	cc 	int3

_runtime.(*mheap).reclaimChunk:
 101d390:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101d399:	48 8d 44 24 e0 	lea	rax, [rsp - 32]
 101d39e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 101d3a2:	0f 86 67 03 00 00 	jbe	871 <_runtime.(*mheap).reclaimChunk+0x37f>
 101d3a8:	48 81 ec a0 00 00 00 	sub	rsp, 160
 101d3af:	48 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], rbp
 101d3b7:	48 8d ac 24 98 00 00 00 	lea	rbp, [rsp + 152]
 101d3bf:	48 8b 94 24 a8 00 00 00 	mov	rdx, qword ptr [rsp + 168]
 101d3c7:	84 02 	test	byte ptr [rdx], al
 101d3c9:	8b 9a e0 00 01 00 	mov	ebx, dword ptr [rdx + 65760]
 101d3cf:	89 5c 24 1c 	mov	dword ptr [rsp + 28], ebx
 101d3d3:	48 8b b4 24 b8 00 00 00 	mov	rsi, qword ptr [rsp + 184]
 101d3db:	48 8b bc 24 b0 00 00 00 	mov	rdi, qword ptr [rsp + 176]
 101d3e3:	4c 8b 84 24 d0 00 00 00 	mov	r8, qword ptr [rsp + 208]
 101d3eb:	4c 8b 8c 24 c8 00 00 00 	mov	r9, qword ptr [rsp + 200]
 101d3f3:	4c 89 c0 	mov	rax, r8
 101d3f6:	31 c9 	xor	ecx, ecx
 101d3f8:	e9 ab 01 00 00 	jmp	427 <_runtime.(*mheap).reclaimChunk+0x218>
 101d3fd:	49 ff c6 	inc	r14
 101d400:	48 8b 94 24 a8 00 00 00 	mov	rdx, qword ptr [rsp + 168]
 101d408:	48 8b b4 24 b8 00 00 00 	mov	rsi, qword ptr [rsp + 184]
 101d410:	48 8b bc 24 b0 00 00 00 	mov	rdi, qword ptr [rsp + 176]
 101d418:	4d 39 c6 	cmp	r14, r8
 101d41b:	0f 8d 79 01 00 00 	jge	377 <_runtime.(*mheap).reclaimChunk+0x20a>
 101d421:	4b 8d 7c 35 00 	lea	rdi, [r13 + r14]
 101d426:	48 89 bc 24 90 00 00 00 	mov	qword ptr [rsp + 144], rdi
 101d42e:	40 8a 3f 	mov	dil, byte ptr [rdi]
 101d431:	4d 39 c6 	cmp	r14, r8
 101d434:	0f 83 a4 02 00 00 	jae	676 <_runtime.(*mheap).reclaimChunk+0x34e>
 101d43a:	40 88 7c 24 1b 	mov	byte ptr [rsp + 27], dil
 101d43f:	43 0f b6 14 16 	movzx	edx, byte ptr [r14 + r10]
 101d444:	f7 d2 	not	edx
 101d446:	21 d7 	and	edi, edx
 101d448:	0f b6 74 24 1b 	movzx	esi, byte ptr [rsp + 27]
 101d44d:	40 84 d6 	test	sil, dl
 101d450:	74 ab 	je	-85 <_runtime.(*mheap).reclaimChunk+0x6d>
 101d452:	4c 89 74 24 38 	mov	qword ptr [rsp + 56], r14
 101d457:	31 d2 	xor	edx, edx
 101d459:	eb 1e 	jmp	30 <_runtime.(*mheap).reclaimChunk+0xe9>
 101d45b:	48 8d 51 01 	lea	rdx, [rcx + 1]
 101d45f:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 101d467:	4c 8b 54 24 78 	mov	r10, qword ptr [rsp + 120]
 101d46c:	4c 8b 5c 24 58 	mov	r11, qword ptr [rsp + 88]
 101d471:	4c 8b 7c 24 68 	mov	r15, qword ptr [rsp + 104]
 101d476:	48 89 f1 	mov	rcx, rsi
 101d479:	48 83 fa 08 	cmp	rdx, 8
 101d47d:	0f 83 7a ff ff ff 	jae	-134 <_runtime.(*mheap).reclaimChunk+0x6d>
 101d483:	48 89 ce 	mov	rsi, rcx
 101d486:	48 89 d1 	mov	rcx, rdx
 101d489:	41 bf 01 00 00 00 	mov	r15d, 1
 101d48f:	41 d3 e7 	shl	r15d, cl
 101d492:	41 84 ff 	test	r15b, dil
 101d495:	74 c4 	je	-60 <_runtime.(*mheap).reclaimChunk+0xcb>
 101d497:	4f 8d 3c f4 	lea	r15, [r12 + 8*r14]
 101d49b:	49 01 cf 	add	r15, rcx
 101d49e:	49 81 ff 00 20 00 00 	cmp	r15, 8192
 101d4a5:	0f 83 26 02 00 00 	jae	550 <_runtime.(*mheap).reclaimChunk+0x341>
 101d4ab:	4f 8b bc f9 00 00 20 00 	mov	r15, qword ptr [r9 + 8*r15 + 2097152]
 101d4b3:	45 8b 5f 58 	mov	r11d, dword ptr [r15 + 88]
 101d4b7:	44 8d 53 fe 	lea	r10d, [rbx - 2]
 101d4bb:	45 39 d3 	cmp	r11d, r10d
 101d4be:	0f 85 ce 00 00 00 	jne	206 <_runtime.(*mheap).reclaimChunk+0x202>
 101d4c4:	44 8d 5b ff 	lea	r11d, [rbx - 1]
 101d4c8:	44 89 d0 	mov	eax, r10d
 101d4cb:	f0 	lock
 101d4cc:	45 0f b1 5f 58 	cmpxchg	dword ptr [r15 + 88], r11d
 101d4d1:	41 0f 94 c2 	sete	r10b
 101d4d5:	45 84 d2 	test	r10b, r10b
 101d4d8:	74 81 	je	-127 <_runtime.(*mheap).reclaimChunk+0xcb>
 101d4da:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 101d4df:	4c 89 7c 24 70 	mov	qword ptr [rsp + 112], r15
 101d4e4:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 101d4e9:	49 8b 47 20 	mov	rax, qword ptr [r15 + 32]
 101d4ed:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101d4f2:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 101d4fa:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101d4fe:	e8 0d ae fe ff 	call	-86515 <_runtime.unlock>
 101d503:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101d508:	48 89 04 24 	mov	qword ptr [rsp], rax
 101d50c:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 101d511:	e8 2a db ff ff 	call	-9430 <_runtime.(*mspan).sweep>
 101d516:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 101d51b:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 101d520:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 101d528:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101d52c:	e8 ff ab fe ff 	call	-87041 <_runtime.lock>
 101d531:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 101d539:	8a 08 	mov	cl, byte ptr [rax]
 101d53b:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 101d540:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101d545:	48 01 f2 	add	rdx, rsi
 101d548:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 101d54d:	48 85 db 	test	rbx, rbx
 101d550:	48 0f 45 f2 	cmovne	rsi, rdx
 101d554:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 101d559:	4c 8b 74 24 38 	mov	r14, qword ptr [rsp + 56]
 101d55e:	41 0f b6 3c 16 	movzx	edi, byte ptr [r14 + rdx]
 101d563:	f7 d7 	not	edi
 101d565:	21 cf 	and	edi, ecx
 101d567:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 101d56c:	48 89 ca 	mov	rdx, rcx
 101d56f:	8b 5c 24 1c 	mov	ebx, dword ptr [rsp + 28]
 101d573:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 101d578:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 101d580:	4c 8b 64 24 60 	mov	r12, qword ptr [rsp + 96]
 101d585:	4c 8b ac 24 80 00 00 00 	mov	r13, qword ptr [rsp + 128]
 101d58d:	e9 c9 fe ff ff 	jmp	-311 <_runtime.(*mheap).reclaimChunk+0xcb>
 101d592:	45 31 d2 	xor	r10d, r10d
 101d595:	e9 3b ff ff ff 	jmp	-197 <_runtime.(*mheap).reclaimChunk+0x145>
 101d59a:	4f 8d 0c c3 	lea	r9, [r11 + 8*r8]
 101d59e:	49 c1 e0 03 	shl	r8, 3
 101d5a2:	4d 29 c7 	sub	r15, r8
 101d5a5:	4d 89 f8 	mov	r8, r15
 101d5a8:	4d 85 c0 	test	r8, r8
 101d5ab:	0f 86 bc 00 00 00 	jbe	188 <_runtime.(*mheap).reclaimChunk+0x2dd>
 101d5b1:	4d 89 ca 	mov	r10, r9
 101d5b4:	49 c1 e9 0d 	shr	r9, 13
 101d5b8:	49 39 f1 	cmp	r9, rsi
 101d5bb:	0f 83 42 01 00 00 	jae	322 <_runtime.(*mheap).reclaimChunk+0x373>
 101d5c1:	4c 8b 9a d0 03 01 00 	mov	r11, qword ptr [rdx + 66512]
 101d5c8:	41 84 03 	test	byte ptr [r11], al
 101d5cb:	4e 8b 0c cf 	mov	r9, qword ptr [rdi + 8*r9]
 101d5cf:	49 81 f9 00 00 40 00 	cmp	r9, 4194304
 101d5d6:	0f 83 1a 01 00 00 	jae	282 <_runtime.(*mheap).reclaimChunk+0x366>
 101d5dc:	4f 8b 0c cb 	mov	r9, qword ptr [r11 + 8*r9]
 101d5e0:	41 84 01 	test	byte ptr [r9], al
 101d5e3:	4d 89 d3 	mov	r11, r10
 101d5e6:	49 81 e2 ff 1f 00 00 	and	r10, 8191
 101d5ed:	4d 89 d4 	mov	r12, r10
 101d5f0:	49 c1 ea 03 	shr	r10, 3
 101d5f4:	49 81 fa 00 04 00 00 	cmp	r10, 1024
 101d5fb:	0f 87 e8 00 00 00 	ja	232 <_runtime.(*mheap).reclaimChunk+0x359>
 101d601:	4d 8d aa 00 fc ff ff 	lea	r13, [r10 - 1024]
 101d608:	4d 89 ee 	mov	r14, r13
 101d60b:	49 c1 fd 3f 	sar	r13, 63
 101d60f:	4d 21 ea 	and	r10, r13
 101d612:	4f 8d 2c 11 	lea	r13, [r9 + r10]
 101d616:	4d 8d ad 00 00 21 00 	lea	r13, [r13 + 2162688]
 101d61d:	49 f7 de 	neg	r14
 101d620:	4f 8d 14 11 	lea	r10, [r9 + r10]
 101d624:	4d 8d 92 00 04 21 00 	lea	r10, [r10 + 2163712]
 101d62b:	4d 89 c7 	mov	r15, r8
 101d62e:	49 c1 e8 03 	shr	r8, 3
 101d632:	4d 39 c6 	cmp	r14, r8
 101d635:	76 31 	jbe	49 <_runtime.(*mheap).reclaimChunk+0x2d8>
 101d637:	4c 89 7c 24 68 	mov	qword ptr [rsp + 104], r15
 101d63c:	4c 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], r9
 101d644:	4c 89 64 24 60 	mov	qword ptr [rsp + 96], r12
 101d649:	4c 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], r13
 101d651:	4c 89 54 24 78 	mov	qword ptr [rsp + 120], r10
 101d656:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 101d65b:	4c 89 5c 24 58 	mov	qword ptr [rsp + 88], r11
 101d660:	45 31 f6 	xor	r14d, r14d
 101d663:	e9 b0 fd ff ff 	jmp	-592 <_runtime.(*mheap).reclaimChunk+0x88>
 101d668:	4d 89 f0 	mov	r8, r14
 101d66b:	eb ca 	jmp	-54 <_runtime.(*mheap).reclaimChunk+0x2a7>
 101d66d:	80 3d bc 78 0b 00 00 	cmp	byte ptr [rip + 751804], 0
 101d674:	75 18 	jne	24 <_runtime.(*mheap).reclaimChunk+0x2fe>
 101d676:	48 89 8c 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rcx
 101d67e:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 101d686:	48 81 c4 a0 00 00 00 	add	rsp, 160
 101d68d:	c3 	ret
 101d68e:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 101d693:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101d697:	e8 74 ac fe ff 	call	-86924 <_runtime.unlock>
 101d69c:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 101d6a4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101d6a9:	48 29 c8 	sub	rax, rcx
 101d6ac:	48 c1 e0 0d 	shl	rax, 13
 101d6b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 101d6b4:	e8 a7 92 02 00 	call	168615 <_runtime.traceGCSweepSpan>
 101d6b9:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 101d6c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101d6c5:	e8 66 aa fe ff 	call	-87450 <_runtime.lock>
 101d6ca:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101d6cf:	eb a5 	jmp	-91 <_runtime.(*mheap).reclaimChunk+0x2e6>
 101d6d1:	4c 89 f8 	mov	rax, r15
 101d6d4:	b9 00 20 00 00 	mov	ecx, 8192
 101d6d9:	e8 82 5c 03 00 	call	220290 <_runtime.panicIndexU>
 101d6de:	4c 89 f0 	mov	rax, r14
 101d6e1:	4c 89 c1 	mov	rcx, r8
 101d6e4:	e8 67 5c 03 00 	call	220263 <_runtime.panicIndex>
 101d6e9:	4c 89 d0 	mov	rax, r10
 101d6ec:	b9 00 04 00 00 	mov	ecx, 1024
 101d6f1:	e8 ca 5c 03 00 	call	220362 <_runtime.panicSliceBU>
 101d6f6:	4c 89 c8 	mov	rax, r9
 101d6f9:	b9 00 00 40 00 	mov	ecx, 4194304
 101d6fe:	e8 5d 5c 03 00 	call	220253 <_runtime.panicIndexU>
 101d703:	4c 89 c8 	mov	rax, r9
 101d706:	48 89 f1 	mov	rcx, rsi
 101d709:	e8 52 5c 03 00 	call	220242 <_runtime.panicIndexU>
 101d70e:	90 	nop
 101d70f:	e8 bc 34 03 00 	call	210108 <_runtime.morestack_noctxt>
 101d714:	e9 77 fc ff ff 	jmp	-905 <_runtime.(*mheap).reclaimChunk>
 101d719:	cc 	int3
 101d71a:	cc 	int3
 101d71b:	cc 	int3
 101d71c:	cc 	int3
 101d71d:	cc 	int3
 101d71e:	cc 	int3
 101d71f:	cc 	int3

_runtime.(*mheap).alloc:
 101d720:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101d729:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101d72d:	0f 86 c0 00 00 00 	jbe	192 <_runtime.(*mheap).alloc+0xd3>
 101d733:	48 83 ec 48 	sub	rsp, 72
 101d737:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 101d73c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 101d741:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 101d74a:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 101d753:	0f 57 c0 	xorps	xmm0, xmm0
 101d756:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 101d75b:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 101d760:	48 8d 05 f9 12 03 00 	lea	rax, [rip + 201465]
 101d767:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101d76c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101d771:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101d776:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101d77b:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101d780:	0f b6 44 24 60 	movzx	eax, byte ptr [rsp + 96]
 101d785:	88 44 24 30 	mov	byte ptr [rsp + 48], al
 101d789:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 101d78e:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101d793:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 101d798:	48 89 04 24 	mov	qword ptr [rsp], rax
 101d79c:	e8 df 32 03 00 	call	209631 <_runtime.systemstack>
 101d7a1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101d7a6:	48 85 c0 	test	rax, rax
 101d7a9:	74 18 	je	24 <_runtime.(*mheap).alloc+0xa3>
 101d7ab:	0f b6 4c 24 61 	movzx	ecx, byte ptr [rsp + 97]
 101d7b0:	84 c9 	test	cl, cl
 101d7b2:	74 06 	je	6 <_runtime.(*mheap).alloc+0x9a>
 101d7b4:	80 78 64 00 	cmp	byte ptr [rax + 100], 0
 101d7b8:	75 1d 	jne	29 <_runtime.(*mheap).alloc+0xb7>
 101d7ba:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101d7bf:	c6 40 64 00 	mov	byte ptr [rax + 100], 0
 101d7c3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101d7c8:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 101d7cd:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 101d7d2:	48 83 c4 48 	add	rsp, 72
 101d7d6:	c3 	ret
 101d7d7:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 101d7db:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 101d7df:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101d7e3:	48 c1 e0 0d 	shl	rax, 13
 101d7e7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101d7ec:	e8 cf 60 03 00 	call	221391 <_runtime.memclrNoHeapPointers>
 101d7f1:	eb c7 	jmp	-57 <_runtime.(*mheap).alloc+0x9a>
 101d7f3:	e8 d8 33 03 00 	call	209880 <_runtime.morestack_noctxt>
 101d7f8:	e9 23 ff ff ff 	jmp	-221 <_runtime.(*mheap).alloc>
 101d7fd:	cc 	int3
 101d7fe:	cc 	int3
 101d7ff:	cc 	int3

_runtime.(*mheap).allocManual:
 101d800:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101d809:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101d80d:	76 4b 	jbe	75 <_runtime.(*mheap).allocManual+0x5a>
 101d80f:	48 83 ec 30 	sub	rsp, 48
 101d813:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101d818:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101d81d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101d822:	48 89 04 24 	mov	qword ptr [rsp], rax
 101d826:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101d82b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101d830:	66 c7 44 24 10 01 00 	mov	word ptr [rsp + 16], 1
 101d837:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101d83c:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101d841:	e8 5a 03 00 00 	call	858 <_runtime.(*mheap).allocSpan>
 101d846:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101d84b:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101d850:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101d855:	48 83 c4 30 	add	rsp, 48
 101d859:	c3 	ret
 101d85a:	e8 a1 2e 02 00 	call	143009 <_runtime.morestackc>
 101d85f:	eb 9f 	jmp	-97 <_runtime.(*mheap).allocManual>
 101d861:	cc 	int3
 101d862:	cc 	int3
 101d863:	cc 	int3
 101d864:	cc 	int3
 101d865:	cc 	int3
 101d866:	cc 	int3
 101d867:	cc 	int3
 101d868:	cc 	int3
 101d869:	cc 	int3
 101d86a:	cc 	int3
 101d86b:	cc 	int3
 101d86c:	cc 	int3
 101d86d:	cc 	int3
 101d86e:	cc 	int3
 101d86f:	cc 	int3

_runtime.(*mheap).setSpans:
 101d870:	48 83 ec 18 	sub	rsp, 24
 101d874:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101d879:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101d87e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 101d883:	84 02 	test	byte ptr [rdx], al
 101d885:	48 8b 9a d0 03 01 00 	mov	rbx, qword ptr [rdx + 66512]
 101d88c:	84 03 	test	byte ptr [rbx], al
 101d88e:	90 	nop
 101d88f:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 101d894:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 101d89e:	48 8d 04 37 	lea	rax, [rdi + rsi]
 101d8a2:	48 c1 e8 1a 	shr	rax, 26
 101d8a6:	48 3d 00 00 40 00 	cmp	rax, 4194304
 101d8ac:	0f 83 84 00 00 00 	jae	132 <_runtime.(*mheap).setSpans+0xc6>
 101d8b2:	49 89 f0 	mov	r8, rsi
 101d8b5:	48 c1 ee 0d 	shr	rsi, 13
 101d8b9:	48 8b 1c c3 	mov	rbx, qword ptr [rbx + 8*rax]
 101d8bd:	4c 8b 4c 24 30 	mov	r9, qword ptr [rsp + 48]
 101d8c2:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 101d8c7:	31 c0 	xor	eax, eax
 101d8c9:	eb 16 	jmp	22 <_runtime.(*mheap).setSpans+0x71>
 101d8cb:	84 03 	test	byte ptr [rbx], al
 101d8cd:	49 81 e3 ff 1f 00 00 	and	r11, 8191
 101d8d4:	4e 89 94 db 00 00 20 00 	mov	qword ptr [rbx + 8*r11 + 2097152], r10
 101d8dc:	49 8d 44 24 01 	lea	rax, [r12 + 1]
 101d8e1:	4c 39 c8 	cmp	rax, r9
 101d8e4:	73 3c 	jae	60 <_runtime.(*mheap).setSpans+0xb2>
 101d8e6:	4c 8d 1c 06 	lea	r11, [rsi + rax]
 101d8ea:	49 f7 c3 ff 1f 00 00 	test	r11, 8191
 101d8f1:	75 2a 	jne	42 <_runtime.(*mheap).setSpans+0xad>
 101d8f3:	48 8b 9a d0 03 01 00 	mov	rbx, qword ptr [rdx + 66512]
 101d8fa:	84 03 	test	byte ptr [rbx], al
 101d8fc:	49 89 c4 	mov	r12, rax
 101d8ff:	48 c1 e0 0d 	shl	rax, 13
 101d903:	4e 8d 2c 00 	lea	r13, [rax + r8]
 101d907:	4a 8d 04 2f 	lea	rax, [rdi + r13]
 101d90b:	48 c1 e8 1a 	shr	rax, 26
 101d90f:	48 3d 00 00 40 00 	cmp	rax, 4194304
 101d915:	73 15 	jae	21 <_runtime.(*mheap).setSpans+0xbc>
 101d917:	48 8b 1c c3 	mov	rbx, qword ptr [rbx + 8*rax]
 101d91b:	eb ae 	jmp	-82 <_runtime.(*mheap).setSpans+0x5b>
 101d91d:	49 89 c4 	mov	r12, rax
 101d920:	eb a9 	jmp	-87 <_runtime.(*mheap).setSpans+0x5b>
 101d922:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101d927:	48 83 c4 18 	add	rsp, 24
 101d92b:	c3 	ret
 101d92c:	b9 00 00 40 00 	mov	ecx, 4194304
 101d931:	e8 2a 5a 03 00 	call	219690 <_runtime.panicIndexU>
 101d936:	b9 00 00 40 00 	mov	ecx, 4194304
 101d93b:	e8 20 5a 03 00 	call	219680 <_runtime.panicIndexU>
 101d940:	90 	nop
 101d941:	cc 	int3
 101d942:	cc 	int3
 101d943:	cc 	int3
 101d944:	cc 	int3
 101d945:	cc 	int3
 101d946:	cc 	int3
 101d947:	cc 	int3
 101d948:	cc 	int3
 101d949:	cc 	int3
 101d94a:	cc 	int3
 101d94b:	cc 	int3
 101d94c:	cc 	int3
 101d94d:	cc 	int3
 101d94e:	cc 	int3
 101d94f:	cc 	int3

_runtime.(*mheap).allocNeedsZero:
 101d950:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101d959:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101d95d:	0f 86 21 01 00 00 	jbe	289 <_runtime.(*mheap).allocNeedsZero+0x134>
 101d963:	48 83 ec 18 	sub	rsp, 24
 101d967:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101d96c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101d971:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 101d976:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 101d97b:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 101d980:	31 c0 	xor	eax, eax
 101d982:	eb 51 	jmp	81 <_runtime.(*mheap).allocNeedsZero+0x85>
 101d984:	48 89 c8 	mov	rax, rcx
 101d987:	49 89 f1 	mov	r9, rsi
 101d98a:	4c 39 c8 	cmp	rax, r9
 101d98d:	0f 86 ac 00 00 00 	jbe	172 <_runtime.(*mheap).allocNeedsZero+0xef>
 101d993:	48 89 c1 	mov	rcx, rax
 101d996:	4c 89 c8 	mov	rax, r9
 101d999:	f0 	lock
 101d99a:	48 0f b1 8f 00 08 21 00 	cmpxchg	qword ptr [rdi + 2164736], rcx
 101d9a2:	40 0f 94 c6 	sete	sil
 101d9a6:	40 84 f6 	test	sil, sil
 101d9a9:	75 16 	jne	22 <_runtime.(*mheap).allocNeedsZero+0x71>
 101d9ab:	48 8b b7 00 08 21 00 	mov	rsi, qword ptr [rdi + 2164736]
 101d9b2:	48 39 ce 	cmp	rsi, rcx
 101d9b5:	77 cd 	ja	-51 <_runtime.(*mheap).allocNeedsZero+0x34>
 101d9b7:	48 39 de 	cmp	rsi, rbx
 101d9ba:	76 c8 	jbe	-56 <_runtime.(*mheap).allocNeedsZero+0x34>
 101d9bc:	e9 9c 00 00 00 	jmp	156 <_runtime.(*mheap).allocNeedsZero+0x10d>
 101d9c1:	48 29 d9 	sub	rcx, rbx
 101d9c4:	4a 8d 1c 11 	lea	rbx, [rcx + r10]
 101d9c8:	48 c1 e9 0d 	shr	rcx, 13
 101d9cc:	49 29 cc 	sub	r12, rcx
 101d9cf:	4c 89 e6 	mov	rsi, r12
 101d9d2:	44 89 d8 	mov	eax, r11d
 101d9d5:	48 85 f6 	test	rsi, rsi
 101d9d8:	76 75 	jbe	117 <_runtime.(*mheap).allocNeedsZero+0xff>
 101d9da:	84 02 	test	byte ptr [rdx], al
 101d9dc:	48 8b ba d0 03 01 00 	mov	rdi, qword ptr [rdx + 66512]
 101d9e3:	84 07 	test	byte ptr [rdi], al
 101d9e5:	90 	nop
 101d9e6:	49 b8 00 00 00 00 00 80 00 00 	movabs	r8, 140737488355328
 101d9f0:	4d 8d 0c 18 	lea	r9, [r8 + rbx]
 101d9f4:	49 c1 e9 1a 	shr	r9, 26
 101d9f8:	49 81 f9 00 00 40 00 	cmp	r9, 4194304
 101d9ff:	73 75 	jae	117 <_runtime.(*mheap).allocNeedsZero+0x126>
 101da01:	4a 8b 3c cf 	mov	rdi, qword ptr [rdi + 8*r9]
 101da05:	84 07 	test	byte ptr [rdi], al
 101da07:	4c 8b 8f 00 08 21 00 	mov	r9, qword ptr [rdi + 2164736]
 101da0e:	49 89 da 	mov	r10, rbx
 101da11:	48 81 e3 ff ff ff 03 	and	rbx, 67108863
 101da18:	4c 39 cb 	cmp	rbx, r9
 101da1b:	41 0f 92 c3 	setb	r11b
 101da1f:	49 89 f4 	mov	r12, rsi
 101da22:	48 c1 e6 0d 	shl	rsi, 13
 101da26:	48 01 de 	add	rsi, rbx
 101da29:	41 09 c3 	or	r11d, eax
 101da2c:	48 81 fe 00 00 00 04 	cmp	rsi, 67108864
 101da33:	76 12 	jbe	18 <_runtime.(*mheap).allocNeedsZero+0xf7>
 101da35:	b8 00 00 00 04 	mov	eax, 67108864
 101da3a:	e9 4b ff ff ff 	jmp	-181 <_runtime.(*mheap).allocNeedsZero+0x3a>
 101da3f:	48 89 c1 	mov	rcx, rax
 101da42:	e9 7a ff ff ff 	jmp	-134 <_runtime.(*mheap).allocNeedsZero+0x71>
 101da47:	48 89 f0 	mov	rax, rsi
 101da4a:	e9 3b ff ff ff 	jmp	-197 <_runtime.(*mheap).allocNeedsZero+0x3a>
 101da4f:	88 44 24 38 	mov	byte ptr [rsp + 56], al
 101da53:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101da58:	48 83 c4 18 	add	rsp, 24
 101da5c:	c3 	ret
 101da5d:	48 8d 05 a9 97 05 00 	lea	rax, [rip + 366505]
 101da64:	48 89 04 24 	mov	qword ptr [rsp], rax
 101da68:	48 c7 44 24 08 33 00 00 00 	mov	qword ptr [rsp + 8], 51
 101da71:	e8 ea b2 00 00 	call	45802 <_runtime.throw>
 101da76:	4c 89 c8 	mov	rax, r9
 101da79:	b9 00 00 40 00 	mov	ecx, 4194304
 101da7e:	e8 dd 58 03 00 	call	219357 <_runtime.panicIndexU>
 101da83:	90 	nop
 101da84:	e8 47 31 03 00 	call	209223 <_runtime.morestack_noctxt>
 101da89:	e9 c2 fe ff ff 	jmp	-318 <_runtime.(*mheap).allocNeedsZero>
 101da8e:	cc 	int3
 101da8f:	cc 	int3

_runtime.(*mheap).allocMSpanLocked:
 101da90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101da99:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101da9d:	0f 86 ec 00 00 00 	jbe	236 <_runtime.(*mheap).allocMSpanLocked+0xff>
 101daa3:	48 83 ec 28 	sub	rsp, 40
 101daa7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101daac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101dab1:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 101daba:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 101dabe:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 101dac5:	48 85 d2 	test	rdx, rdx
 101dac8:	0f 84 8c 00 00 00 	je	140 <_runtime.(*mheap).allocMSpanLocked+0xca>
 101dace:	48 83 ba 28 12 00 00 00 	cmp	qword ptr [rdx + 4648], 0
 101dad6:	75 51 	jne	81 <_runtime.(*mheap).allocMSpanLocked+0x99>
 101dad8:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 101dadd:	31 c0 	xor	eax, eax
 101dadf:	eb 37 	jmp	55 <_runtime.(*mheap).allocMSpanLocked+0x88>
 101dae1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101dae6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101daeb:	84 00 	test	byte ptr [rax], al
 101daed:	48 8d 88 d8 25 01 00 	lea	rcx, [rax + 75224]
 101daf4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101daf8:	e8 53 38 ff ff 	call	-51117 <_runtime.(*fixalloc).alloc>
 101dafd:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101db02:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 101db07:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101db0c:	48 89 84 ca 30 12 00 00 	mov	qword ptr [rdx + 8*rcx + 4656], rax
 101db14:	48 8d 41 01 	lea	rax, [rcx + 1]
 101db18:	48 83 f8 40 	cmp	rax, 64
 101db1c:	7c c3 	jl	-61 <_runtime.(*mheap).allocMSpanLocked+0x51>
 101db1e:	48 c7 82 28 12 00 00 40 00 00 00 	mov	qword ptr [rdx + 4648], 64
 101db29:	48 8b 9a 28 12 00 00 	mov	rbx, qword ptr [rdx + 4648]
 101db30:	48 8d 43 ff 	lea	rax, [rbx - 1]
 101db34:	48 3d 80 00 00 00 	cmp	rax, 128
 101db3a:	73 48 	jae	72 <_runtime.(*mheap).allocMSpanLocked+0xf4>
 101db3c:	48 8b 8c da 28 12 00 00 	mov	rcx, qword ptr [rdx + 8*rbx + 4648]
 101db44:	48 89 82 28 12 00 00 	mov	qword ptr [rdx + 4648], rax
 101db4b:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 101db50:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101db55:	48 83 c4 28 	add	rsp, 40
 101db59:	c3 	ret
 101db5a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101db5f:	84 00 	test	byte ptr [rax], al
 101db61:	48 05 d8 25 01 00 	add	rax, 75224
 101db67:	48 89 04 24 	mov	qword ptr [rsp], rax
 101db6b:	e8 e0 37 ff ff 	call	-51232 <_runtime.(*fixalloc).alloc>
 101db70:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101db75:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101db7a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101db7f:	48 83 c4 28 	add	rsp, 40
 101db83:	c3 	ret
 101db84:	b9 80 00 00 00 	mov	ecx, 128
 101db89:	e8 c2 57 03 00 	call	219074 <_runtime.panicIndex>
 101db8e:	90 	nop
 101db8f:	e8 6c 2b 02 00 	call	142188 <_runtime.morestackc>
 101db94:	e9 f7 fe ff ff 	jmp	-265 <_runtime.(*mheap).allocMSpanLocked>
 101db99:	cc 	int3
 101db9a:	cc 	int3
 101db9b:	cc 	int3
 101db9c:	cc 	int3
 101db9d:	cc 	int3
 101db9e:	cc 	int3
 101db9f:	cc 	int3

_runtime.(*mheap).allocSpan:
 101dba0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101dba9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101dbad:	0f 86 2a 08 00 00 	jbe	2090 <_runtime.(*mheap).allocSpan+0x83d>
 101dbb3:	48 83 ec 78 	sub	rsp, 120
 101dbb7:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 101dbbc:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 101dbc1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101dbca:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 101dbcf:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 101dbd3:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 101dbda:	48 85 c9 	test	rcx, rcx
 101dbdd:	0f 84 aa 07 00 00 	je	1962 <_runtime.(*mheap).allocSpan+0x7ed>
 101dbe3:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 101dbeb:	48 83 fa 10 	cmp	rdx, 16
 101dbef:	0f 83 8d 07 00 00 	jae	1933 <_runtime.(*mheap).allocSpan+0x7e2>
 101dbf5:	48 83 79 50 00 	cmp	qword ptr [rcx + 80], 0
 101dbfa:	0f 84 12 07 00 00 	je	1810 <_runtime.(*mheap).allocSpan+0x772>
 101dc00:	48 8d 41 48 	lea	rax, [rcx + 72]
 101dc04:	48 89 04 24 	mov	qword ptr [rsp], rax
 101dc08:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101dc0d:	e8 be 44 00 00 	call	17598 <_runtime.(*pageCache).alloc>
 101dc12:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101dc17:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101dc1c:	48 85 c0 	test	rax, rax
 101dc1f:	0f 84 d6 06 00 00 	je	1750 <_runtime.(*mheap).allocSpan+0x75b>
 101dc25:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 101dc2e:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 101dc32:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 101dc39:	48 85 d2 	test	rdx, rdx
 101dc3c:	74 10 	je	16 <_runtime.(*mheap).allocSpan+0xae>
 101dc3e:	48 8b 9a 28 12 00 00 	mov	rbx, qword ptr [rdx + 4648]
 101dc45:	48 85 db 	test	rbx, rbx
 101dc48:	0f 85 85 06 00 00 	jne	1669 <_runtime.(*mheap).allocSpan+0x733>
 101dc4e:	31 d2 	xor	edx, edx
 101dc50:	48 85 d2 	test	rdx, rdx
 101dc53:	0f 84 65 06 00 00 	je	1637 <_runtime.(*mheap).allocSpan+0x71e>
 101dc59:	83 3d 30 9b 0d 00 00 	cmp	dword ptr [rip + 891696], 0
 101dc60:	0f 85 43 06 00 00 	jne	1603 <_runtime.(*mheap).allocSpan+0x709>
 101dc66:	0f b6 9c 24 90 00 00 00 	movzx	ebx, byte ptr [rsp + 144]
 101dc6e:	84 db 	test	bl, bl
 101dc70:	0f 84 d7 03 00 00 	je	983 <_runtime.(*mheap).allocSpan+0x4ad>
 101dc76:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 101dc7b:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101dc80:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101dc85:	0f 57 c0 	xorps	xmm0, xmm0
 101dc88:	0f 11 02 	movups	xmmword ptr [rdx], xmm0
 101dc8b:	48 c7 42 10 00 00 00 00 	mov	qword ptr [rdx + 16], 0
 101dc93:	48 89 42 18 	mov	qword ptr [rdx + 24], rax
 101dc97:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 101dc9f:	48 89 5a 20 	mov	qword ptr [rdx + 32], rbx
 101dca3:	66 c7 42 60 00 00 	mov	word ptr [rdx + 96], 0
 101dca9:	c6 42 62 00 	mov	byte ptr [rdx + 98], 0
 101dcad:	48 c7 42 68 00 00 00 00 	mov	qword ptr [rdx + 104], 0
 101dcb5:	0f 11 42 78 	movups	xmmword ptr [rdx + 120], xmm0
 101dcb9:	c6 42 64 00 	mov	byte ptr [rdx + 100], 0
 101dcbd:	48 c7 42 30 00 00 00 00 	mov	qword ptr [rdx + 48], 0
 101dcc5:	0f 11 42 48 	movups	xmmword ptr [rdx + 72], xmm0
 101dcc9:	90 	nop
 101dcca:	48 8d 72 63 	lea	rsi, [rdx + 99]
 101dcce:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 101dcd3:	31 ff 	xor	edi, edi
 101dcd5:	40 86 3e 	xchg	byte ptr [rsi], dil
 101dcd8:	48 8b bc 24 80 00 00 00 	mov	rdi, qword ptr [rsp + 128]
 101dce0:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 101dce4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101dce9:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 101dcee:	e8 5d fc ff ff 	call	-931 <_runtime.(*mheap).allocNeedsZero>
 101dcf3:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 101dcf8:	0f 84 45 03 00 00 	je	837 <_runtime.(*mheap).allocSpan+0x4a3>
 101dcfe:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101dd03:	c6 42 64 01 	mov	byte ptr [rdx + 100], 1
 101dd07:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 101dd0f:	48 c1 e0 0d 	shl	rax, 13
 101dd13:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101dd18:	0f b6 b4 24 90 00 00 00 	movzx	esi, byte ptr [rsp + 144]
 101dd20:	40 84 f6 	test	sil, sil
 101dd23:	0f 85 bf 02 00 00 	jne	703 <_runtime.(*mheap).allocSpan+0x448>
 101dd29:	0f b6 bc 24 91 00 00 00 	movzx	edi, byte ptr [rsp + 145]
 101dd31:	40 88 7a 62 	mov	byte ptr [rdx + 98], dil
 101dd35:	40 d0 ef 	shr	dil
 101dd38:	40 84 ff 	test	dil, dil
 101dd3b:	0f 85 33 02 00 00 	jne	563 <_runtime.(*mheap).allocSpan+0x3d4>
 101dd41:	48 89 42 68 	mov	qword ptr [rdx + 104], rax
 101dd45:	48 c7 42 38 01 00 00 00 	mov	qword ptr [rdx + 56], 1
 101dd4d:	c6 42 65 00 	mov	byte ptr [rdx + 101], 0
 101dd51:	66 c7 42 5c 00 00 	mov	word ptr [rdx + 92], 0
 101dd57:	c6 42 66 00 	mov	byte ptr [rdx + 102], 0
 101dd5b:	66 c7 42 5e 00 00 	mov	word ptr [rdx + 94], 0
 101dd61:	48 c7 42 30 00 00 00 00 	mov	qword ptr [rdx + 48], 0
 101dd69:	48 c7 42 40 ff ff ff ff 	mov	qword ptr [rdx + 64], -1
 101dd71:	48 8b 42 38 	mov	rax, qword ptr [rdx + 56]
 101dd75:	48 89 04 24 	mov	qword ptr [rsp], rax
 101dd79:	e8 c2 15 00 00 	call	5570 <_runtime.newMarkBits>
 101dd7e:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101dd83:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101dd88:	48 89 41 50 	mov	qword ptr [rcx + 80], rax
 101dd8c:	48 8b 41 38 	mov	rax, qword ptr [rcx + 56]
 101dd90:	48 89 04 24 	mov	qword ptr [rsp], rax
 101dd94:	e8 f7 18 00 00 	call	6391 <_runtime.newAllocBits>
 101dd99:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101dd9e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101dda3:	48 89 41 48 	mov	qword ptr [rcx + 72], rax
 101dda7:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101ddaf:	84 00 	test	byte ptr [rax], al
 101ddb1:	8b 90 e0 00 01 00 	mov	edx, dword ptr [rax + 65760]
 101ddb7:	87 51 58 	xchg	dword ptr [rcx + 88], edx
 101ddba:	90 	nop
 101ddbb:	ba 01 00 00 00 	mov	edx, 1
 101ddc0:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 101ddc5:	86 13 	xchg	byte ptr [rbx], dl
 101ddc7:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 101ddcc:	48 85 d2 	test	rdx, rdx
 101ddcf:	0f 85 60 01 00 00 	jne	352 <_runtime.(*mheap).allocSpan+0x395>
 101ddd5:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 101dddd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101dde1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101dde6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101ddeb:	e8 70 73 00 00 	call	29552 <_runtime.mSysStatInc>
 101ddf0:	48 8d 05 69 a8 0d 00 	lea	rax, [rip + 895081]
 101ddf7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ddfb:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101de00:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101de05:	e8 16 74 00 00 	call	29718 <_runtime.mSysStatDec>
 101de0a:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101de0f:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 101de13:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 101de1b:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101de1f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101de24:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 101de2c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101de31:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101de36:	e8 35 fa ff ff 	call	-1483 <_runtime.(*mheap).setSpans>
 101de3b:	0f b6 84 24 90 00 00 00 	movzx	eax, byte ptr [rsp + 144]
 101de43:	84 c0 	test	al, al
 101de45:	74 17 	je	23 <_runtime.(*mheap).allocSpan+0x2be>
 101de47:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101de4c:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 101de54:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 101de59:	48 83 c4 78 	add	rsp, 120
 101de5d:	c3 	ret
 101de5e:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101de66:	84 00 	test	byte ptr [rax], al
 101de68:	8b 88 e0 00 01 00 	mov	ecx, dword ptr [rax + 65760]
 101de6e:	d1 e9 	shr	ecx
 101de70:	83 e1 01 	and	ecx, 1
 101de73:	48 8d 0c 89 	lea	rcx, [rcx + 4*rcx]
 101de77:	48 8d 0c c8 	lea	rcx, [rax + 8*rcx]
 101de7b:	48 8d 89 08 01 01 00 	lea	rcx, [rcx + 65800]
 101de82:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101de86:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101de8b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101de90:	e8 bb dc ff ff 	call	-9029 <_runtime.(*gcSweepBuf).push>
 101de95:	48 8b 05 34 75 0d 00 	mov	rax, qword ptr [rip + 881972]
 101de9c:	84 00 	test	byte ptr [rax], al
 101de9e:	90 	nop
 101de9f:	90 	nop
 101dea0:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101dea5:	48 8b 51 18 	mov	rdx, qword ptr [rcx + 24]
 101dea9:	90 	nop
 101deaa:	48 bb 00 00 00 00 00 80 00 00 	movabs	rbx, 140737488355328
 101deb4:	48 01 d3 	add	rbx, rdx
 101deb7:	48 c1 eb 1a 	shr	rbx, 26
 101debb:	48 81 fb 00 00 40 00 	cmp	rbx, 4194304
 101dec2:	0f 83 cf 04 00 00 	jae	1231 <_runtime.(*mheap).allocSpan+0x7f7>
 101dec8:	48 8b 04 d8 	mov	rax, qword ptr [rax + 8*rbx]
 101decc:	84 00 	test	byte ptr [rax], al
 101dece:	48 89 d3 	mov	rbx, rdx
 101ded1:	48 c1 ea 10 	shr	rdx, 16
 101ded5:	48 81 e2 ff 03 00 00 	and	rdx, 1023
 101dedc:	48 8d 04 10 	lea	rax, [rax + rdx]
 101dee0:	48 8d 80 00 00 21 00 	lea	rax, [rax + 2162688]
 101dee7:	48 c1 eb 0d 	shr	rbx, 13
 101deeb:	48 83 e3 07 	and	rbx, 7
 101deef:	48 89 ca 	mov	rdx, rcx
 101def2:	48 89 d9 	mov	rcx, rbx
 101def5:	be 01 00 00 00 	mov	esi, 1
 101defa:	d3 e6 	shl	esi, cl
 101defc:	f0 	lock
 101defd:	40 08 30 	or	byte ptr [rax], sil
 101df00:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 101df08:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 101df10:	f0 	lock
 101df11:	48 0f c1 83 58 01 01 00 	xadd	qword ptr [rbx + 65880], rax
 101df19:	80 3d 10 70 0b 00 00 	cmp	byte ptr [rip + 749584], 0
 101df20:	0f 84 21 ff ff ff 	je	-223 <_runtime.(*mheap).allocSpan+0x2a7>
 101df26:	e8 f5 91 02 00 	call	168437 <_runtime.traceHeapAlloc>
 101df2b:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101df30:	e9 12 ff ff ff 	jmp	-238 <_runtime.(*mheap).allocSpan+0x2a7>
 101df35:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101df3a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101df3e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101df43:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101df48:	c7 44 24 10 08 00 00 00 	mov	dword ptr [rsp + 16], 8
 101df50:	e8 eb 50 02 00 	call	151787 <_runtime.madvise>
 101df55:	48 8d 05 14 a7 0d 00 	lea	rax, [rip + 894740]
 101df5c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101df60:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101df65:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101df6a:	e8 b1 72 00 00 	call	29361 <_runtime.mSysStatDec>
 101df6f:	e9 61 fe ff ff 	jmp	-415 <_runtime.(*mheap).allocSpan+0x235>
 101df74:	48 0f be ff 	movsx	rdi, dil
 101df78:	48 83 ff 43 	cmp	rdi, 67
 101df7c:	0f 83 27 04 00 00 	jae	1063 <_runtime.(*mheap).allocSpan+0x809>
 101df82:	48 8d 0d 77 d5 0a 00 	lea	rcx, [rip + 710007]
 101df89:	0f b7 0c 79 	movzx	ecx, word ptr [rcx + 2*rdi]
 101df8d:	48 89 4a 68 	mov	qword ptr [rdx + 104], rcx
 101df91:	48 85 c9 	test	rcx, rcx
 101df94:	0f 84 0a 04 00 00 	je	1034 <_runtime.(*mheap).allocSpan+0x804>
 101df9a:	49 89 d1 	mov	r9, rdx
 101df9d:	31 d2 	xor	edx, edx
 101df9f:	48 f7 f1 	div	rcx
 101dfa2:	49 89 41 38 	mov	qword ptr [r9 + 56], rax
 101dfa6:	48 8d 0c 7f 	lea	rcx, [rdi + 2*rdi]
 101dfaa:	48 89 cf 	mov	rdi, rcx
 101dfad:	48 d1 e1 	shl	rcx
 101dfb0:	4c 8d 15 09 dc 0a 00 	lea	r10, [rip + 711689]
 101dfb7:	45 0f b6 1c 0a 	movzx	r11d, byte ptr [r10 + rcx]
 101dfbc:	45 88 59 65 	mov	byte ptr [r9 + 101], r11b
 101dfc0:	45 0f b7 5c 7a 02 	movzx	r11d, word ptr [r10 + 2*rdi + 2]
 101dfc6:	66 45 89 59 5c 	mov	word ptr [r9 + 92], r11w
 101dfcb:	41 0f b6 4c 0a 01 	movzx	ecx, byte ptr [r10 + rcx + 1]
 101dfd1:	41 88 49 66 	mov	byte ptr [r9 + 102], cl
 101dfd5:	41 0f b7 4c 7a 04 	movzx	ecx, word ptr [r10 + 2*rdi + 4]
 101dfdb:	66 41 89 49 5e 	mov	word ptr [r9 + 94], cx
 101dfe0:	4c 89 ca 	mov	rdx, r9
 101dfe3:	e9 79 fd ff ff 	jmp	-647 <_runtime.(*mheap).allocSpan+0x1c1>
 101dfe8:	48 c7 42 28 00 00 00 00 	mov	qword ptr [rdx + 40], 0
 101dff0:	48 c7 42 38 00 00 00 00 	mov	qword ptr [rdx + 56], 0
 101dff8:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 101dffc:	48 c1 e0 0d 	shl	rax, 13
 101e000:	48 03 42 18 	add	rax, qword ptr [rdx + 24]
 101e004:	48 89 42 70 	mov	qword ptr [rdx + 112], rax
 101e008:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 101e00c:	48 8d 0d 45 a6 0d 00 	lea	rcx, [rip + 894533]
 101e013:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e017:	48 c1 e0 0d 	shl	rax, 13
 101e01b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e020:	e8 fb 71 00 00 	call	29179 <_runtime.mSysStatDec>
 101e025:	b8 02 00 00 00 	mov	eax, 2
 101e02a:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 101e02f:	86 01 	xchg	byte ptr [rcx], al
 101e031:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e039:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 101e03e:	e9 84 fd ff ff 	jmp	-636 <_runtime.(*mheap).allocSpan+0x227>
 101e043:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101e048:	e9 ba fc ff ff 	jmp	-838 <_runtime.(*mheap).allocSpan+0x167>
 101e04d:	0f b6 b4 24 91 00 00 00 	movzx	esi, byte ptr [rsp + 145]
 101e055:	89 f7 	mov	edi, esi
 101e057:	40 d0 ee 	shr	sil
 101e05a:	40 84 f6 	test	sil, sil
 101e05d:	0f 85 13 fc ff ff 	jne	-1005 <_runtime.(*mheap).allocSpan+0xd6>
 101e063:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 101e068:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101e06d:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 101e072:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 101e07a:	84 03 	test	byte ptr [rbx], al
 101e07c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101e080:	e8 ab a0 fe ff 	call	-89941 <_runtime.lock>
 101e085:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e08a:	48 85 c0 	test	rax, rax
 101e08d:	0f 84 5d 01 00 00 	je	349 <_runtime.(*mheap).allocSpan+0x650>
 101e093:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101e098:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101e09d:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 101e0a2:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 101e0a7:	48 85 d2 	test	rdx, rdx
 101e0aa:	0f 84 1b 01 00 00 	je	283 <_runtime.(*mheap).allocSpan+0x62b>
 101e0b0:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 101e0b5:	0f b6 9c 24 90 00 00 00 	movzx	ebx, byte ptr [rsp + 144]
 101e0bd:	84 db 	test	bl, bl
 101e0bf:	74 25 	je	37 <_runtime.(*mheap).allocSpan+0x546>
 101e0c1:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e0c9:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e0cd:	e8 3e a2 fe ff 	call	-89538 <_runtime.unlock>
 101e0d2:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 101e0d7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e0dc:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101e0e1:	e9 90 fb ff ff 	jmp	-1136 <_runtime.(*mheap).allocSpan+0xd6>
 101e0e6:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101e0eb:	48 8b 7e 30 	mov	rdi, qword ptr [rsi + 48]
 101e0ef:	48 8b bf 60 01 00 00 	mov	rdi, qword ptr [rdi + 352]
 101e0f6:	48 8b 7f 08 	mov	rdi, qword ptr [rdi + 8]
 101e0fa:	48 01 3d 77 bc 0d 00 	add	qword ptr [rip + 900215], rdi
 101e101:	48 8b 7e 30 	mov	rdi, qword ptr [rsi + 48]
 101e105:	48 8b bf 60 01 00 00 	mov	rdi, qword ptr [rdi + 352]
 101e10c:	48 c7 47 08 00 00 00 00 	mov	qword ptr [rdi + 8], 0
 101e114:	48 8b 7e 30 	mov	rdi, qword ptr [rsi + 48]
 101e118:	48 8b bf 60 01 00 00 	mov	rdi, qword ptr [rdi + 352]
 101e11f:	48 8b 7f 20 	mov	rdi, qword ptr [rdi + 32]
 101e123:	48 01 3d 1e bc 0d 00 	add	qword ptr [rip + 900126], rdi
 101e12a:	48 8b 76 30 	mov	rsi, qword ptr [rsi + 48]
 101e12e:	48 8b b6 60 01 00 00 	mov	rsi, qword ptr [rsi + 352]
 101e135:	48 c7 46 20 00 00 00 00 	mov	qword ptr [rsi + 32], 0
 101e13d:	0f b6 b4 24 91 00 00 00 	movzx	esi, byte ptr [rsp + 145]
 101e145:	89 f7 	mov	edi, esi
 101e147:	40 d0 ee 	shr	sil
 101e14a:	40 84 f6 	test	sil, sil
 101e14d:	75 72 	jne	114 <_runtime.(*mheap).allocSpan+0x621>
 101e14f:	48 8b b4 24 88 00 00 00 	mov	rsi, qword ptr [rsp + 136]
 101e157:	49 89 f0 	mov	r8, rsi
 101e15a:	48 c1 e6 0d 	shl	rsi, 13
 101e15e:	48 01 35 33 70 0d 00 	add	qword ptr [rip + 880691], rsi
 101e165:	48 ff 05 34 70 0d 00 	inc	qword ptr [rip + 880692]
 101e16c:	4c 8d 0d fd bb 0d 00 	lea	r9, [rip + 900093]
 101e173:	f0 	lock
 101e174:	49 0f c1 31 	xadd	qword ptr [r9], rsi
 101e178:	83 3d 11 96 0d 00 00 	cmp	dword ptr [rip + 890385], 0
 101e17f:	0f 84 3c ff ff ff 	je	-196 <_runtime.(*mheap).allocSpan+0x521>
 101e185:	48 8d 05 f4 9b 0d 00 	lea	rax, [rip + 891892]
 101e18c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e190:	e8 eb 38 ff ff 	call	-50965 <_runtime.(*gcControllerState).revise>
 101e195:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e19a:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101e19f:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 101e1a4:	0f b6 9c 24 90 00 00 00 	movzx	ebx, byte ptr [rsp + 144]
 101e1ac:	0f b6 bc 24 91 00 00 00 	movzx	edi, byte ptr [rsp + 145]
 101e1b4:	4c 8b 84 24 88 00 00 00 	mov	r8, qword ptr [rsp + 136]
 101e1bc:	e9 00 ff ff ff 	jmp	-256 <_runtime.(*mheap).allocSpan+0x521>
 101e1c1:	4c 8b 84 24 88 00 00 00 	mov	r8, qword ptr [rsp + 136]
 101e1c9:	eb ad 	jmp	-83 <_runtime.(*mheap).allocSpan+0x5d8>
 101e1cb:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e1d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e1d7:	e8 b4 f8 ff ff 	call	-1868 <_runtime.(*mheap).allocMSpanLocked>
 101e1dc:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 101e1e1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e1e6:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101e1eb:	e9 c0 fe ff ff 	jmp	-320 <_runtime.(*mheap).allocSpan+0x510>
 101e1f0:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e1f8:	48 8d 48 08 	lea	rcx, [rax + 8]
 101e1fc:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 101e201:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e205:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 101e20d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101e212:	e8 69 31 00 00 	call	12649 <_runtime.(*pageAlloc).alloc>
 101e217:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101e21c:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101e221:	48 85 c0 	test	rax, rax
 101e224:	0f 85 6e fe ff ff 	jne	-402 <_runtime.(*mheap).allocSpan+0x4f8>
 101e22a:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e232:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e236:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 101e23e:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101e243:	e8 a8 01 00 00 	call	424 <_runtime.(*mheap).grow>
 101e248:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 101e24d:	75 27 	jne	39 <_runtime.(*mheap).allocSpan+0x6d6>
 101e24f:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e257:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e25b:	e8 b0 a0 fe ff 	call	-89936 <_runtime.unlock>
 101e260:	48 c7 84 24 a0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 160], 0
 101e26c:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 101e271:	48 83 c4 78 	add	rsp, 120
 101e275:	c3 	ret
 101e276:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 101e27b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e27f:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 101e287:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e28c:	e8 ef 30 00 00 	call	12527 <_runtime.(*pageAlloc).alloc>
 101e291:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101e296:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101e29b:	48 85 c0 	test	rax, rax
 101e29e:	0f 85 f4 fd ff ff 	jne	-524 <_runtime.(*mheap).allocSpan+0x4f8>
 101e2a4:	e9 0d 01 00 00 	jmp	269 <_runtime.(*mheap).allocSpan+0x816>
 101e2a9:	0f b6 9c 24 90 00 00 00 	movzx	ebx, byte ptr [rsp + 144]
 101e2b1:	0f b6 bc 24 91 00 00 00 	movzx	edi, byte ptr [rsp + 145]
 101e2b9:	e9 a5 fd ff ff 	jmp	-603 <_runtime.(*mheap).allocSpan+0x4c3>
 101e2be:	0f b6 9c 24 90 00 00 00 	movzx	ebx, byte ptr [rsp + 144]
 101e2c6:	0f b6 bc 24 91 00 00 00 	movzx	edi, byte ptr [rsp + 145]
 101e2ce:	e9 90 fd ff ff 	jmp	-624 <_runtime.(*mheap).allocSpan+0x4c3>
 101e2d3:	48 8d 73 ff 	lea	rsi, [rbx - 1]
 101e2d7:	48 81 fe 80 00 00 00 	cmp	rsi, 128
 101e2de:	0f 83 eb 00 00 00 	jae	235 <_runtime.(*mheap).allocSpan+0x82f>
 101e2e4:	48 8b 9c da 28 12 00 00 	mov	rbx, qword ptr [rdx + 8*rbx + 4648]
 101e2ec:	48 89 b2 28 12 00 00 	mov	qword ptr [rdx + 4648], rsi
 101e2f3:	48 89 da 	mov	rdx, rbx
 101e2f6:	e9 55 f9 ff ff 	jmp	-1707 <_runtime.(*mheap).allocSpan+0xb0>
 101e2fb:	0f b6 9c 24 90 00 00 00 	movzx	ebx, byte ptr [rsp + 144]
 101e303:	0f b6 bc 24 91 00 00 00 	movzx	edi, byte ptr [rsp + 145]
 101e30b:	31 d2 	xor	edx, edx
 101e30d:	e9 51 fd ff ff 	jmp	-687 <_runtime.(*mheap).allocSpan+0x4c3>
 101e312:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 101e317:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e31f:	84 00 	test	byte ptr [rax], al
 101e321:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e325:	e8 06 9e fe ff 	call	-90618 <_runtime.lock>
 101e32a:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e332:	48 8d 48 08 	lea	rcx, [rax + 8]
 101e336:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e33a:	e8 01 42 00 00 	call	16897 <_runtime.(*pageAlloc).allocToCache>
 101e33f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101e344:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 101e349:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101e34e:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 101e353:	48 89 43 48 	mov	qword ptr [rbx + 72], rax
 101e357:	48 89 4b 50 	mov	qword ptr [rbx + 80], rcx
 101e35b:	48 89 53 58 	mov	qword ptr [rbx + 88], rdx
 101e35f:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101e367:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e36b:	e8 a0 9f fe ff 	call	-90208 <_runtime.unlock>
 101e370:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 101e375:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 101e37d:	e9 7e f8 ff ff 	jmp	-1922 <_runtime.(*mheap).allocSpan+0x60>
 101e382:	31 c0 	xor	eax, eax
 101e384:	31 d2 	xor	edx, edx
 101e386:	31 c9 	xor	ecx, ecx
 101e388:	e9 d6 fc ff ff 	jmp	-810 <_runtime.(*mheap).allocSpan+0x4c3>
 101e38d:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 101e395:	eb eb 	jmp	-21 <_runtime.(*mheap).allocSpan+0x7e2>
 101e397:	48 89 d8 	mov	rax, rbx
 101e39a:	b9 00 00 40 00 	mov	ecx, 4194304
 101e39f:	e8 bc 4f 03 00 	call	217020 <_runtime.panicIndexU>
 101e3a4:	e8 97 8f 00 00 	call	36759 <_runtime.panicdivide>
 101e3a9:	48 89 f8 	mov	rax, rdi
 101e3ac:	b9 43 00 00 00 	mov	ecx, 67
 101e3b1:	e8 9a 4f 03 00 	call	216986 <_runtime.panicIndex>
 101e3b6:	48 8d 05 14 87 05 00 	lea	rax, [rip + 362260]
 101e3bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e3c1:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 101e3ca:	e8 91 a9 00 00 	call	43409 <_runtime.throw>
 101e3cf:	48 89 f0 	mov	rax, rsi
 101e3d2:	b9 80 00 00 00 	mov	ecx, 128
 101e3d7:	e8 74 4f 03 00 	call	216948 <_runtime.panicIndex>
 101e3dc:	90 	nop
 101e3dd:	e8 1e 23 02 00 	call	140062 <_runtime.morestackc>
 101e3e2:	e9 b9 f7 ff ff 	jmp	-2119 <_runtime.(*mheap).allocSpan>
 101e3e7:	cc 	int3
 101e3e8:	cc 	int3
 101e3e9:	cc 	int3
 101e3ea:	cc 	int3
 101e3eb:	cc 	int3
 101e3ec:	cc 	int3
 101e3ed:	cc 	int3
 101e3ee:	cc 	int3
 101e3ef:	cc 	int3

_runtime.(*mheap).grow:
 101e3f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101e3f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101e3fd:	0f 86 96 02 00 00 	jbe	662 <_runtime.(*mheap).grow+0x2a9>
 101e403:	48 83 ec 60 	sub	rsp, 96
 101e407:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 101e40c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 101e411:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 101e416:	84 00 	test	byte ptr [rax], al
 101e418:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 101e41d:	48 81 c1 ff 01 00 00 	add	rcx, 511
 101e424:	48 81 e1 00 fe ff ff 	and	rcx, -512
 101e42b:	48 c1 e1 0d 	shl	rcx, 13
 101e42f:	48 8b 15 62 94 0d 00 	mov	rdx, qword ptr [rip + 889954]
 101e436:	48 8b 98 40 04 01 00 	mov	rbx, qword ptr [rax + 66624]
 101e43d:	48 01 cb 	add	rbx, rcx
 101e440:	48 8d 1c 1a 	lea	rbx, [rdx + rbx]
 101e444:	48 8d 5b ff 	lea	rbx, [rbx - 1]
 101e448:	48 f7 da 	neg	rdx
 101e44b:	48 21 da 	and	rdx, rbx
 101e44e:	48 39 90 48 04 01 00 	cmp	qword ptr [rax + 66632], rdx
 101e455:	0f 82 9e 00 00 00 	jb	158 <_runtime.(*mheap).grow+0x109>
 101e45b:	31 c9 	xor	ecx, ecx
 101e45d:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101e462:	48 8b 98 40 04 01 00 	mov	rbx, qword ptr [rax + 66624]
 101e469:	48 89 90 40 04 01 00 	mov	qword ptr [rax + 66624], rdx
 101e470:	48 8d 70 08 	lea	rsi, [rax + 8]
 101e474:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 101e479:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101e47d:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101e482:	48 29 da 	sub	rdx, rbx
 101e485:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 101e48a:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101e48f:	e8 8c 15 00 00 	call	5516 <_runtime.(*pageAlloc).grow>
 101e494:	48 8b 05 bd a1 0d 00 	mov	rax, qword ptr [rip + 893373]
 101e49b:	48 8b 0d ce a1 0d 00 	mov	rcx, qword ptr [rip + 893390]
 101e4a2:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 101e4a7:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 101e4ac:	48 01 da 	add	rdx, rbx
 101e4af:	48 29 c8 	sub	rax, rcx
 101e4b2:	48 01 d0 	add	rax, rdx
 101e4b5:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 101e4ba:	48 8b 89 80 01 01 00 	mov	rcx, qword ptr [rcx + 65920]
 101e4c1:	48 39 c8 	cmp	rax, rcx
 101e4c4:	77 0f 	ja	15 <_runtime.(*mheap).grow+0xe5>
 101e4c6:	c6 44 24 78 01 	mov	byte ptr [rsp + 120], 1
 101e4cb:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 101e4d0:	48 83 c4 60 	add	rsp, 96
 101e4d4:	c3 	ret
 101e4d5:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 101e4da:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101e4de:	48 29 c8 	sub	rax, rcx
 101e4e1:	48 39 c2 	cmp	rdx, rax
 101e4e4:	48 0f 47 d0 	cmova	rdx, rax
 101e4e8:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101e4ed:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 101e4f2:	e8 19 ad ff ff 	call	-21223 <_runtime.(*pageAlloc).scavenge>
 101e4f7:	eb cd 	jmp	-51 <_runtime.(*mheap).grow+0xd6>
 101e4f9:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 101e4fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e502:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101e507:	e8 04 a8 fe ff 	call	-88060 <_runtime.(*mheap).sysAlloc>
 101e50c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101e511:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 101e516:	48 85 c0 	test	rax, rax
 101e519:	0f 84 ee 00 00 00 	je	238 <_runtime.(*mheap).grow+0x21d>
 101e51f:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 101e524:	48 89 c2 	mov	rdx, rax
 101e527:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 101e52c:	48 8b b3 48 04 01 00 	mov	rsi, qword ptr [rbx + 66632]
 101e533:	48 39 f0 	cmp	rax, rsi
 101e536:	75 73 	jne	115 <_runtime.(*mheap).grow+0x1bb>
 101e538:	48 01 c8 	add	rax, rcx
 101e53b:	48 89 83 48 04 01 00 	mov	qword ptr [rbx + 66632], rax
 101e542:	31 c0 	xor	eax, eax
 101e544:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101e549:	48 8d 15 20 a1 0d 00 	lea	rdx, [rip + 893216]
 101e550:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101e554:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101e559:	e8 02 6c 00 00 	call	27650 <_runtime.mSysStatInc>
 101e55e:	48 8d 05 fb a0 0d 00 	lea	rax, [rip + 893179]
 101e565:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e569:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e56e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e573:	e8 e8 6b 00 00 	call	27624 <_runtime.mSysStatInc>
 101e578:	48 8b 15 19 93 0d 00 	mov	rdx, qword ptr [rip + 889625]
 101e57f:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 101e584:	48 8b 88 40 04 01 00 	mov	rcx, qword ptr [rax + 66624]
 101e58b:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 101e590:	48 01 d9 	add	rcx, rbx
 101e593:	48 8d 0c 0a 	lea	rcx, [rdx + rcx]
 101e597:	48 8d 49 ff 	lea	rcx, [rcx - 1]
 101e59b:	48 f7 da 	neg	rdx
 101e59e:	48 21 ca 	and	rdx, rcx
 101e5a1:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101e5a6:	e9 b2 fe ff ff 	jmp	-334 <_runtime.(*mheap).grow+0x6d>
 101e5ab:	48 8b 83 40 04 01 00 	mov	rax, qword ptr [rbx + 66624]
 101e5b2:	48 29 c6 	sub	rsi, rax
 101e5b5:	48 85 f6 	test	rsi, rsi
 101e5b8:	75 1c 	jne	28 <_runtime.(*mheap).grow+0x1e6>
 101e5ba:	31 c0 	xor	eax, eax
 101e5bc:	48 89 d6 	mov	rsi, rdx
 101e5bf:	48 89 93 40 04 01 00 	mov	qword ptr [rbx + 66624], rdx
 101e5c6:	48 8d 14 0e 	lea	rdx, [rsi + rcx]
 101e5ca:	48 89 93 48 04 01 00 	mov	qword ptr [rbx + 66632], rdx
 101e5d1:	e9 6e ff ff ff 	jmp	-146 <_runtime.(*mheap).grow+0x154>
 101e5d6:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 101e5db:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 101e5e0:	48 8d 4b 08 	lea	rcx, [rbx + 8]
 101e5e4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e5e8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e5ed:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 101e5f2:	e8 29 14 00 00 	call	5161 <_runtime.(*pageAlloc).grow>
 101e5f7:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101e5fc:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 101e601:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 101e606:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101e60b:	eb af 	jmp	-81 <_runtime.(*mheap).grow+0x1cc>
 101e60d:	48 8b 05 44 a0 0d 00 	mov	rax, qword ptr [rip + 892996]
 101e614:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101e619:	e8 82 be 00 00 	call	48770 <_runtime.printlock>
 101e61e:	48 8d 05 ed 81 05 00 	lea	rax, [rip + 360941]
 101e625:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e629:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 101e632:	e8 a9 c7 00 00 	call	51113 <_runtime.printstring>
 101e637:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101e63c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e640:	e8 db c4 00 00 	call	50395 <_runtime.printuint>
 101e645:	48 8d 05 9e 50 05 00 	lea	rax, [rip + 348318]
 101e64c:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e650:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 101e659:	e8 82 c7 00 00 	call	51074 <_runtime.printstring>
 101e65e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101e663:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e667:	e8 b4 c4 00 00 	call	50356 <_runtime.printuint>
 101e66c:	48 8d 05 20 4a 05 00 	lea	rax, [rip + 346656]
 101e673:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e677:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 101e680:	e8 5b c7 00 00 	call	51035 <_runtime.printstring>
 101e685:	e8 96 be 00 00 	call	48790 <_runtime.printunlock>
 101e68a:	c6 44 24 78 00 	mov	byte ptr [rsp + 120], 0
 101e68f:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 101e694:	48 83 c4 60 	add	rsp, 96
 101e698:	c3 	ret
 101e699:	e8 32 25 03 00 	call	206130 <_runtime.morestack_noctxt>
 101e69e:	e9 4d fd ff ff 	jmp	-691 <_runtime.(*mheap).grow>
 101e6a3:	cc 	int3
 101e6a4:	cc 	int3
 101e6a5:	cc 	int3
 101e6a6:	cc 	int3
 101e6a7:	cc 	int3
 101e6a8:	cc 	int3
 101e6a9:	cc 	int3
 101e6aa:	cc 	int3
 101e6ab:	cc 	int3
 101e6ac:	cc 	int3
 101e6ad:	cc 	int3
 101e6ae:	cc 	int3
 101e6af:	cc 	int3

_runtime.(*mheap).freeSpan:
 101e6b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101e6b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101e6bd:	76 57 	jbe	87 <_runtime.(*mheap).freeSpan+0x66>
 101e6bf:	48 83 ec 28 	sub	rsp, 40
 101e6c3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101e6c8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101e6cd:	0f 57 c0 	xorps	xmm0, xmm0
 101e6d0:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 101e6d5:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 101e6de:	48 8d 05 3b 04 03 00 	lea	rax, [rip + 197691]
 101e6e5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e6ea:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e6ef:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101e6f4:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101e6f9:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101e6fe:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 101e703:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e707:	e8 74 23 03 00 	call	205684 <_runtime.systemstack>
 101e70c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101e711:	48 83 c4 28 	add	rsp, 40
 101e715:	c3 	ret
 101e716:	e8 b5 24 03 00 	call	206005 <_runtime.morestack_noctxt>
 101e71b:	eb 93 	jmp	-109 <_runtime.(*mheap).freeSpan>
 101e71d:	cc 	int3
 101e71e:	cc 	int3
 101e71f:	cc 	int3

_runtime.(*mheap).freeManual:
 101e720:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101e729:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 101e72d:	0f 86 a0 00 00 00 	jbe	160 <_runtime.(*mheap).freeManual+0xb3>
 101e733:	48 83 ec 20 	sub	rsp, 32
 101e737:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101e73c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101e741:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e746:	c6 40 64 01 	mov	byte ptr [rax + 100], 1
 101e74a:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101e74f:	84 01 	test	byte ptr [rcx], al
 101e751:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e755:	e8 d6 99 fe ff 	call	-91690 <_runtime.lock>
 101e75a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e75f:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 101e763:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 101e768:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101e76c:	48 c1 e1 0d 	shl	rcx, 13
 101e770:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101e775:	e8 a6 6a 00 00 	call	27302 <_runtime.mSysStatDec>
 101e77a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101e77f:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 101e783:	48 8d 15 ce 9e 0d 00 	lea	rdx, [rip + 892622]
 101e78a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101e78e:	48 c1 e1 0d 	shl	rcx, 13
 101e792:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101e797:	e8 c4 69 00 00 	call	27076 <_runtime.mSysStatInc>
 101e79c:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101e7a1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e7a5:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101e7aa:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101e7af:	66 c7 44 24 10 00 01 	mov	word ptr [rsp + 16], 256
 101e7b6:	e8 25 00 00 00 	call	37 <_runtime.(*mheap).freeSpanLocked>
 101e7bb:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101e7c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e7c4:	e8 47 9b fe ff 	call	-91321 <_runtime.unlock>
 101e7c9:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101e7ce:	48 83 c4 20 	add	rsp, 32
 101e7d2:	c3 	ret
 101e7d3:	e8 28 1f 02 00 	call	139048 <_runtime.morestackc>
 101e7d8:	e9 43 ff ff ff 	jmp	-189 <_runtime.(*mheap).freeManual>
 101e7dd:	cc 	int3
 101e7de:	cc 	int3
 101e7df:	cc 	int3

_runtime.(*mheap).freeSpanLocked:
 101e7e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101e7e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101e7ed:	0f 86 49 03 00 00 	jbe	841 <_runtime.(*mheap).freeSpanLocked+0x35c>
 101e7f3:	48 83 ec 40 	sub	rsp, 64
 101e7f7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 101e7fc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 101e801:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101e806:	8a 5a 63 	mov	bl, byte ptr [rdx + 99]
 101e809:	80 fb 01 	cmp	bl, 1
 101e80c:	0f 85 b4 01 00 00 	jne	436 <_runtime.(*mheap).freeSpanLocked+0x1e6>
 101e812:	0f b7 5a 60 	movzx	ebx, word ptr [rdx + 96]
 101e816:	66 89 5c 24 1e 	mov	word ptr [rsp + 30], bx
 101e81b:	66 85 db 	test	bx, bx
 101e81e:	0f 85 d7 01 00 00 	jne	471 <_runtime.(*mheap).freeSpanLocked+0x21b>
 101e824:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101e829:	84 06 	test	byte ptr [rsi], al
 101e82b:	8b be e0 00 01 00 	mov	edi, dword ptr [rsi + 65760]
 101e831:	39 7a 58 	cmp	dword ptr [rdx + 88], edi
 101e834:	0f 85 c1 01 00 00 	jne	449 <_runtime.(*mheap).freeSpanLocked+0x21b>
 101e83a:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 101e83e:	48 f7 db 	neg	rbx
 101e841:	f0 	lock
 101e842:	48 0f c1 9e 58 01 01 00 	xadd	qword ptr [rsi + 65880], rbx
 101e84a:	48 8b 1d 7f 6b 0d 00 	mov	rbx, qword ptr [rip + 879487]
 101e851:	84 03 	test	byte ptr [rbx], al
 101e853:	90 	nop
 101e854:	90 	nop
 101e855:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 101e859:	90 	nop
 101e85a:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 101e864:	48 8d 04 39 	lea	rax, [rcx + rdi]
 101e868:	48 c1 e8 1a 	shr	rax, 26
 101e86c:	48 3d 00 00 40 00 	cmp	rax, 4194304
 101e872:	0f 83 79 01 00 00 	jae	377 <_runtime.(*mheap).freeSpanLocked+0x211>
 101e878:	48 8b 04 c3 	mov	rax, qword ptr [rbx + 8*rax]
 101e87c:	84 00 	test	byte ptr [rax], al
 101e87e:	48 89 cb 	mov	rbx, rcx
 101e881:	48 c1 e9 10 	shr	rcx, 16
 101e885:	48 81 e1 ff 03 00 00 	and	rcx, 1023
 101e88c:	48 8d 04 08 	lea	rax, [rax + rcx]
 101e890:	48 8d 80 00 00 21 00 	lea	rax, [rax + 2162688]
 101e897:	48 c1 eb 0d 	shr	rbx, 13
 101e89b:	48 83 e3 07 	and	rbx, 7
 101e89f:	48 89 d9 	mov	rcx, rbx
 101e8a2:	bf 01 00 00 00 	mov	edi, 1
 101e8a7:	d3 e7 	shl	edi, cl
 101e8a9:	f7 d7 	not	edi
 101e8ab:	f0 	lock
 101e8ac:	40 20 38 	and	byte ptr [rax], dil
 101e8af:	0f b6 44 24 58 	movzx	eax, byte ptr [rsp + 88]
 101e8b4:	84 c0 	test	al, al
 101e8b6:	0f 85 de 00 00 00 	jne	222 <_runtime.(*mheap).freeSpanLocked+0x1ba>
 101e8bc:	0f b6 44 24 59 	movzx	eax, byte ptr [rsp + 89]
 101e8c1:	84 c0 	test	al, al
 101e8c3:	0f 85 a5 00 00 00 	jne	165 <_runtime.(*mheap).freeSpanLocked+0x18e>
 101e8c9:	84 06 	test	byte ptr [rsi], al
 101e8cb:	48 8d 46 08 	lea	rax, [rsi + 8]
 101e8cf:	48 8b 4a 20 	mov	rcx, qword ptr [rdx + 32]
 101e8d3:	48 8b 5a 18 	mov	rbx, qword ptr [rdx + 24]
 101e8d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101e8db:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101e8e0:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101e8e5:	e8 d6 2d 00 00 	call	11734 <_runtime.(*pageAlloc).free>
 101e8ea:	90 	nop
 101e8eb:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101e8f0:	48 8d 48 63 	lea	rcx, [rax + 99]
 101e8f4:	31 d2 	xor	edx, edx
 101e8f6:	86 11 	xchg	byte ptr [rcx], dl
 101e8f8:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101e901:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 101e905:	90 	nop
 101e906:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 101e90d:	48 85 c9 	test	rcx, rcx
 101e910:	74 2f 	je	47 <_runtime.(*mheap).freeSpanLocked+0x161>
 101e912:	48 8b 91 28 12 00 00 	mov	rdx, qword ptr [rcx + 4648]
 101e919:	48 81 fa 80 00 00 00 	cmp	rdx, 128
 101e920:	7d 1f 	jge	31 <_runtime.(*mheap).freeSpanLocked+0x161>
 101e922:	0f 83 bc 00 00 00 	jae	188 <_runtime.(*mheap).freeSpanLocked+0x204>
 101e928:	48 89 84 d1 30 12 00 00 	mov	qword ptr [rcx + 8*rdx + 4656], rax
 101e930:	48 ff 81 28 12 00 00 	inc	qword ptr [rcx + 4648]
 101e937:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101e93c:	48 83 c4 40 	add	rsp, 64
 101e940:	c3 	ret
 101e941:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 101e946:	48 8b 91 08 26 01 00 	mov	rdx, qword ptr [rcx + 75272]
 101e94d:	48 2b 91 d8 25 01 00 	sub	rdx, qword ptr [rcx + 75224]
 101e954:	48 89 91 08 26 01 00 	mov	qword ptr [rcx + 75272], rdx
 101e95b:	48 8b 91 f0 25 01 00 	mov	rdx, qword ptr [rcx + 75248]
 101e962:	48 89 10 	mov	qword ptr [rax], rdx
 101e965:	48 89 81 f0 25 01 00 	mov	qword ptr [rcx + 75248], rax
 101e96c:	eb c9 	jmp	-55 <_runtime.(*mheap).freeSpanLocked+0x157>
 101e96e:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 101e972:	48 8d 0d e7 9c 0d 00 	lea	rcx, [rip + 892135]
 101e979:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e97d:	48 c1 e0 0d 	shl	rax, 13
 101e981:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e986:	e8 d5 67 00 00 	call	26581 <_runtime.mSysStatInc>
 101e98b:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101e990:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101e995:	e9 2f ff ff ff 	jmp	-209 <_runtime.(*mheap).freeSpanLocked+0xe9>
 101e99a:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 101e99e:	48 8d 0d c3 9c 0d 00 	lea	rcx, [rip + 892099]
 101e9a5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101e9a9:	48 c1 e0 0d 	shl	rax, 13
 101e9ad:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101e9b2:	e8 69 68 00 00 	call	26729 <_runtime.mSysStatDec>
 101e9b7:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101e9bc:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101e9c1:	e9 f6 fe ff ff 	jmp	-266 <_runtime.(*mheap).freeSpanLocked+0xdc>
 101e9c6:	80 fb 02 	cmp	bl, 2
 101e9c9:	0f 85 53 01 00 00 	jne	339 <_runtime.(*mheap).freeSpanLocked+0x342>
 101e9cf:	66 83 7a 60 00 	cmp	word ptr [rdx + 96], 0
 101e9d4:	0f 85 2f 01 00 00 	jne	303 <_runtime.(*mheap).freeSpanLocked+0x329>
 101e9da:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101e9df:	e9 cb fe ff ff 	jmp	-309 <_runtime.(*mheap).freeSpanLocked+0xcf>
 101e9e4:	48 89 d0 	mov	rax, rdx
 101e9e7:	b9 80 00 00 00 	mov	ecx, 128
 101e9ec:	e8 5f 49 03 00 	call	215391 <_runtime.panicIndex>
 101e9f1:	b9 00 00 40 00 	mov	ecx, 4194304
 101e9f6:	e8 65 49 03 00 	call	215397 <_runtime.panicIndexU>
 101e9fb:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101ea00:	84 00 	test	byte ptr [rax], al
 101ea02:	8b 4a 58 	mov	ecx, dword ptr [rdx + 88]
 101ea05:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 101ea0a:	8b 80 e0 00 01 00 	mov	eax, dword ptr [rax + 65760]
 101ea10:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101ea15:	48 8b 5a 18 	mov	rbx, qword ptr [rdx + 24]
 101ea19:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 101ea1e:	e8 7d ba 00 00 	call	47741 <_runtime.printlock>
 101ea23:	48 8d 05 13 69 05 00 	lea	rax, [rip + 354579]
 101ea2a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ea2e:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 101ea37:	e8 a4 c3 00 00 	call	50084 <_runtime.printstring>
 101ea3c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 101ea41:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ea45:	e8 56 c3 00 00 	call	50006 <_runtime.printpointer>
 101ea4a:	48 8d 05 4a 43 05 00 	lea	rax, [rip + 344906]
 101ea51:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ea55:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 101ea5e:	e8 7d c3 00 00 	call	50045 <_runtime.printstring>
 101ea63:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101ea68:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ea6c:	e8 1f c2 00 00 	call	49695 <_runtime.printhex>
 101ea71:	48 8d 05 0b 4a 05 00 	lea	rax, [rip + 346635]
 101ea78:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ea7c:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 101ea85:	e8 56 c3 00 00 	call	50006 <_runtime.printstring>
 101ea8a:	0f b7 44 24 1e 	movzx	eax, word ptr [rsp + 30]
 101ea8f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ea93:	e8 88 c0 00 00 	call	49288 <_runtime.printuint>
 101ea98:	48 8d 05 78 47 05 00 	lea	rax, [rip + 345976]
 101ea9f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eaa3:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 101eaac:	e8 2f c3 00 00 	call	49967 <_runtime.printstring>
 101eab1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101eab6:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eaba:	e8 61 c0 00 00 	call	49249 <_runtime.printuint>
 101eabf:	48 8d 05 99 41 05 00 	lea	rax, [rip + 344473]
 101eac6:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eaca:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 101ead3:	e8 08 c3 00 00 	call	49928 <_runtime.printstring>
 101ead8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101eadd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eae1:	e8 3a c0 00 00 	call	49210 <_runtime.printuint>
 101eae6:	e8 45 bc 00 00 	call	48197 <_runtime.printnl>
 101eaeb:	e8 30 ba 00 00 	call	47664 <_runtime.printunlock>
 101eaf0:	48 8d 05 fb 76 05 00 	lea	rax, [rip + 358139]
 101eaf7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eafb:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 101eb04:	e8 57 a2 00 00 	call	41559 <_runtime.throw>
 101eb09:	48 8d 05 cd 7d 05 00 	lea	rax, [rip + 359885]
 101eb10:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eb14:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 101eb1d:	e8 3e a2 00 00 	call	41534 <_runtime.throw>
 101eb22:	48 8d 05 8b 7d 05 00 	lea	rax, [rip + 359819]
 101eb29:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eb2d:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 101eb36:	e8 25 a2 00 00 	call	41509 <_runtime.throw>
 101eb3b:	90 	nop
 101eb3c:	e8 8f 20 03 00 	call	204943 <_runtime.morestack_noctxt>
 101eb41:	e9 9a fc ff ff 	jmp	-870 <_runtime.(*mheap).freeSpanLocked>
 101eb46:	cc 	int3
 101eb47:	cc 	int3
 101eb48:	cc 	int3
 101eb49:	cc 	int3
 101eb4a:	cc 	int3
 101eb4b:	cc 	int3
 101eb4c:	cc 	int3
 101eb4d:	cc 	int3
 101eb4e:	cc 	int3
 101eb4f:	cc 	int3

_runtime.(*mSpanList).remove:
 101eb50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101eb59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101eb5d:	0f 86 6e 01 00 00 	jbe	366 <_runtime.(*mSpanList).remove+0x181>
 101eb63:	48 83 ec 30 	sub	rsp, 48
 101eb67:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101eb6c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101eb71:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101eb76:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 101eb7a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 101eb7f:	48 39 d1 	cmp	rcx, rdx
 101eb82:	75 4a 	jne	74 <_runtime.(*mSpanList).remove+0x7e>
 101eb84:	48 39 02 	cmp	qword ptr [rdx], rax
 101eb87:	75 39 	jne	57 <_runtime.(*mSpanList).remove+0x72>
 101eb89:	48 8b 08 	mov	rcx, qword ptr [rax]
 101eb8c:	48 89 0a 	mov	qword ptr [rdx], rcx
 101eb8f:	48 39 42 08 	cmp	qword ptr [rdx + 8], rax
 101eb93:	75 20 	jne	32 <_runtime.(*mSpanList).remove+0x65>
 101eb95:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101eb99:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 101eb9d:	0f 57 c0 	xorps	xmm0, xmm0
 101eba0:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 101eba3:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 101ebab:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101ebb0:	48 83 c4 30 	add	rsp, 48
 101ebb4:	c3 	ret
 101ebb5:	48 8b 08 	mov	rcx, qword ptr [rax]
 101ebb8:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 101ebbc:	48 89 51 08 	mov	qword ptr [rcx + 8], rdx
 101ebc0:	eb db 	jmp	-37 <_runtime.(*mSpanList).remove+0x4d>
 101ebc2:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101ebc6:	48 8b 18 	mov	rbx, qword ptr [rax]
 101ebc9:	48 89 19 	mov	qword ptr [rcx], rbx
 101ebcc:	eb c1 	jmp	-63 <_runtime.(*mSpanList).remove+0x3f>
 101ebce:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101ebd3:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 101ebd7:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101ebdc:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 101ebe0:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 101ebe5:	e8 b6 b8 00 00 	call	47286 <_runtime.printlock>
 101ebea:	48 8d 05 16 81 05 00 	lea	rax, [rip + 360726]
 101ebf1:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ebf5:	48 c7 44 24 08 2d 00 00 00 	mov	qword ptr [rsp + 8], 45
 101ebfe:	e8 dd c1 00 00 	call	49629 <_runtime.printstring>
 101ec03:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101ec08:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec0c:	e8 0f bf 00 00 	call	48911 <_runtime.printuint>
 101ec11:	48 8d 05 2a 42 05 00 	lea	rax, [rip + 344618]
 101ec18:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec1c:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 101ec25:	e8 b6 c1 00 00 	call	49590 <_runtime.printstring>
 101ec2a:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101ec2f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec33:	e8 68 c1 00 00 	call	49512 <_runtime.printpointer>
 101ec38:	48 8d 05 fd 41 05 00 	lea	rax, [rip + 344573]
 101ec3f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec43:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 101ec4c:	e8 8f c1 00 00 	call	49551 <_runtime.printstring>
 101ec51:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101ec56:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec5a:	e8 41 c1 00 00 	call	49473 <_runtime.printpointer>
 101ec5f:	48 8d 05 1e 47 05 00 	lea	rax, [rip + 345886]
 101ec66:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec6a:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 101ec73:	e8 68 c1 00 00 	call	49512 <_runtime.printstring>
 101ec78:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101ec7d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec81:	e8 1a c1 00 00 	call	49434 <_runtime.printpointer>
 101ec86:	48 8d 05 97 41 05 00 	lea	rax, [rip + 344471]
 101ec8d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ec91:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 101ec9a:	e8 41 c1 00 00 	call	49473 <_runtime.printstring>
 101ec9f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101eca4:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eca8:	e8 f3 c0 00 00 	call	49395 <_runtime.printpointer>
 101ecad:	e8 7e ba 00 00 	call	47742 <_runtime.printnl>
 101ecb2:	e8 69 b8 00 00 	call	47209 <_runtime.printunlock>
 101ecb7:	48 8d 05 c4 4e 05 00 	lea	rax, [rip + 347844]
 101ecbe:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ecc2:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101eccb:	e8 90 a0 00 00 	call	41104 <_runtime.throw>
 101ecd0:	90 	nop
 101ecd1:	e8 fa 1e 03 00 	call	204538 <_runtime.morestack_noctxt>
 101ecd6:	e9 75 fe ff ff 	jmp	-395 <_runtime.(*mSpanList).remove>
 101ecdb:	cc 	int3
 101ecdc:	cc 	int3
 101ecdd:	cc 	int3
 101ecde:	cc 	int3
 101ecdf:	cc 	int3

_runtime.(*mSpanList).insert:
 101ece0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101ece9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101eced:	0f 86 f7 00 00 00 	jbe	247 <_runtime.(*mSpanList).insert+0x10a>
 101ecf3:	48 83 ec 30 	sub	rsp, 48
 101ecf7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101ecfc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101ed01:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101ed06:	48 8b 08 	mov	rcx, qword ptr [rax]
 101ed09:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101ed0e:	48 85 c9 	test	rcx, rcx
 101ed11:	75 3c 	jne	60 <_runtime.(*mSpanList).insert+0x6f>
 101ed13:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 101ed18:	75 35 	jne	53 <_runtime.(*mSpanList).insert+0x6f>
 101ed1a:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 101ed1f:	75 2e 	jne	46 <_runtime.(*mSpanList).insert+0x6f>
 101ed21:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101ed26:	48 8b 11 	mov	rdx, qword ptr [rcx]
 101ed29:	48 89 10 	mov	qword ptr [rax], rdx
 101ed2c:	48 8b 11 	mov	rdx, qword ptr [rcx]
 101ed2f:	48 85 d2 	test	rdx, rdx
 101ed32:	74 15 	je	21 <_runtime.(*mSpanList).insert+0x69>
 101ed34:	48 89 42 08 	mov	qword ptr [rdx + 8], rax
 101ed38:	48 89 01 	mov	qword ptr [rcx], rax
 101ed3b:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 101ed3f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101ed44:	48 83 c4 30 	add	rsp, 48
 101ed48:	c3 	ret
 101ed49:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 101ed4d:	eb e9 	jmp	-23 <_runtime.(*mSpanList).insert+0x58>
 101ed4f:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101ed53:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101ed58:	48 8b 50 10 	mov	rdx, qword ptr [rax + 16]
 101ed5c:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101ed61:	e8 3a b7 00 00 	call	46906 <_runtime.printlock>
 101ed66:	48 8d 05 7d 71 05 00 	lea	rax, [rip + 356733]
 101ed6d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ed71:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 101ed7a:	e8 61 c0 00 00 	call	49249 <_runtime.printstring>
 101ed7f:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101ed84:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ed88:	e8 13 c0 00 00 	call	49171 <_runtime.printpointer>
 101ed8d:	e8 4e b9 00 00 	call	47438 <_runtime.printsp>
 101ed92:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101ed97:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ed9b:	e8 00 c0 00 00 	call	49152 <_runtime.printpointer>
 101eda0:	e8 3b b9 00 00 	call	47419 <_runtime.printsp>
 101eda5:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101edaa:	48 89 04 24 	mov	qword ptr [rsp], rax
 101edae:	e8 ed bf 00 00 	call	49133 <_runtime.printpointer>
 101edb3:	e8 28 b9 00 00 	call	47400 <_runtime.printsp>
 101edb8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101edbd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101edc1:	e8 da bf 00 00 	call	49114 <_runtime.printpointer>
 101edc6:	e8 65 b9 00 00 	call	47461 <_runtime.printnl>
 101edcb:	e8 50 b7 00 00 	call	46928 <_runtime.printunlock>
 101edd0:	48 8d 05 9b 4d 05 00 	lea	rax, [rip + 347547]
 101edd7:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eddb:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101ede4:	e8 77 9f 00 00 	call	40823 <_runtime.throw>
 101ede9:	90 	nop
 101edea:	e8 e1 1d 03 00 	call	204257 <_runtime.morestack_noctxt>
 101edef:	e9 ec fe ff ff 	jmp	-276 <_runtime.(*mSpanList).insert>
 101edf4:	cc 	int3
 101edf5:	cc 	int3
 101edf6:	cc 	int3
 101edf7:	cc 	int3
 101edf8:	cc 	int3
 101edf9:	cc 	int3
 101edfa:	cc 	int3
 101edfb:	cc 	int3
 101edfc:	cc 	int3
 101edfd:	cc 	int3
 101edfe:	cc 	int3
 101edff:	cc 	int3

_runtime.(*mSpanList).insertBack:
 101ee00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101ee09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101ee0d:	0f 86 f9 00 00 00 	jbe	249 <_runtime.(*mSpanList).insertBack+0x10c>
 101ee13:	48 83 ec 30 	sub	rsp, 48
 101ee17:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101ee1c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101ee21:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101ee26:	48 8b 08 	mov	rcx, qword ptr [rax]
 101ee29:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101ee2e:	48 85 c9 	test	rcx, rcx
 101ee31:	75 3e 	jne	62 <_runtime.(*mSpanList).insertBack+0x71>
 101ee33:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 101ee38:	75 37 	jne	55 <_runtime.(*mSpanList).insertBack+0x71>
 101ee3a:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 101ee3f:	75 30 	jne	48 <_runtime.(*mSpanList).insertBack+0x71>
 101ee41:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101ee46:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 101ee4a:	48 89 50 08 	mov	qword ptr [rax + 8], rdx
 101ee4e:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 101ee52:	48 85 d2 	test	rdx, rdx
 101ee55:	74 15 	je	21 <_runtime.(*mSpanList).insertBack+0x6c>
 101ee57:	48 89 02 	mov	qword ptr [rdx], rax
 101ee5a:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 101ee5e:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 101ee62:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101ee67:	48 83 c4 30 	add	rsp, 48
 101ee6b:	c3 	ret
 101ee6c:	48 89 01 	mov	qword ptr [rcx], rax
 101ee6f:	eb e9 	jmp	-23 <_runtime.(*mSpanList).insertBack+0x5a>
 101ee71:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101ee75:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 101ee7a:	48 8b 50 10 	mov	rdx, qword ptr [rax + 16]
 101ee7e:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101ee83:	e8 18 b6 00 00 	call	46616 <_runtime.printlock>
 101ee88:	48 8d 05 59 76 05 00 	lea	rax, [rip + 357977]
 101ee8f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101ee93:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 101ee9c:	e8 3f bf 00 00 	call	48959 <_runtime.printstring>
 101eea1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101eea6:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eeaa:	e8 f1 be 00 00 	call	48881 <_runtime.printpointer>
 101eeaf:	e8 2c b8 00 00 	call	47148 <_runtime.printsp>
 101eeb4:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101eeb9:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eebd:	e8 de be 00 00 	call	48862 <_runtime.printpointer>
 101eec2:	e8 19 b8 00 00 	call	47129 <_runtime.printsp>
 101eec7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101eecc:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eed0:	e8 cb be 00 00 	call	48843 <_runtime.printpointer>
 101eed5:	e8 06 b8 00 00 	call	47110 <_runtime.printsp>
 101eeda:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101eedf:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eee3:	e8 b8 be 00 00 	call	48824 <_runtime.printpointer>
 101eee8:	e8 43 b8 00 00 	call	47171 <_runtime.printnl>
 101eeed:	e8 2e b6 00 00 	call	46638 <_runtime.printunlock>
 101eef2:	48 8d 05 4f 53 05 00 	lea	rax, [rip + 349007]
 101eef9:	48 89 04 24 	mov	qword ptr [rsp], rax
 101eefd:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 101ef06:	e8 55 9e 00 00 	call	40533 <_runtime.throw>
 101ef0b:	90 	nop
 101ef0c:	e8 bf 1c 03 00 	call	203967 <_runtime.morestack_noctxt>
 101ef11:	e9 ea fe ff ff 	jmp	-278 <_runtime.(*mSpanList).insertBack>
 101ef16:	cc 	int3
 101ef17:	cc 	int3
 101ef18:	cc 	int3
 101ef19:	cc 	int3
 101ef1a:	cc 	int3
 101ef1b:	cc 	int3
 101ef1c:	cc 	int3
 101ef1d:	cc 	int3
 101ef1e:	cc 	int3
 101ef1f:	cc 	int3

_runtime.(*mSpanList).takeAll:
 101ef20:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101ef25:	48 8b 08 	mov	rcx, qword ptr [rax]
 101ef28:	48 85 c9 	test	rcx, rcx
 101ef2b:	74 4a 	je	74 <_runtime.(*mSpanList).takeAll+0x57>
 101ef2d:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 101ef32:	eb 07 	jmp	7 <_runtime.(*mSpanList).takeAll+0x1b>
 101ef34:	48 89 51 10 	mov	qword ptr [rcx + 16], rdx
 101ef38:	48 8b 09 	mov	rcx, qword ptr [rcx]
 101ef3b:	48 85 c9 	test	rcx, rcx
 101ef3e:	75 f4 	jne	-12 <_runtime.(*mSpanList).takeAll+0x14>
 101ef40:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 101ef43:	48 85 c9 	test	rcx, rcx
 101ef46:	74 1f 	je	31 <_runtime.(*mSpanList).takeAll+0x47>
 101ef48:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 101ef4c:	48 89 0b 	mov	qword ptr [rbx], rcx
 101ef4f:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 101ef52:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 101ef56:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 101ef5a:	48 8b 08 	mov	rcx, qword ptr [rax]
 101ef5d:	48 89 0a 	mov	qword ptr [rdx], rcx
 101ef60:	0f 57 c0 	xorps	xmm0, xmm0
 101ef63:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 101ef66:	c3 	ret
 101ef67:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101ef6b:	48 8b 18 	mov	rbx, qword ptr [rax]
 101ef6e:	48 89 1a 	mov	qword ptr [rdx], rbx
 101ef71:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 101ef75:	eb e9 	jmp	-23 <_runtime.(*mSpanList).takeAll+0x40>
 101ef77:	c3 	ret
 101ef78:	cc 	int3
 101ef79:	cc 	int3
 101ef7a:	cc 	int3
 101ef7b:	cc 	int3
 101ef7c:	cc 	int3
 101ef7d:	cc 	int3
 101ef7e:	cc 	int3
 101ef7f:	cc 	int3

_runtime.addspecial:
 101ef80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101ef89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101ef8d:	0f 86 8f 01 00 00 	jbe	399 <_runtime.addspecial+0x1a2>
 101ef93:	48 83 ec 40 	sub	rsp, 64
 101ef97:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 101ef9c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 101efa1:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101efa6:	48 89 04 24 	mov	qword ptr [rsp], rax
 101efaa:	e8 21 dd ff ff 	call	-8927 <_runtime.spanOfHeap>
 101efaf:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101efb4:	48 85 c0 	test	rax, rax
 101efb7:	0f 84 4b 01 00 00 	je	331 <_runtime.addspecial+0x188>
 101efbd:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101efc2:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101efcb:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 101efcf:	90 	nop
 101efd0:	ff 82 08 01 00 00 	inc	dword ptr [rdx + 264]
 101efd6:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 101efda:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 101efdf:	48 89 04 24 	mov	qword ptr [rsp], rax
 101efe3:	e8 58 bf ff ff 	call	-16552 <_runtime.(*mspan).ensureSwept>
 101efe8:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 101efed:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101eff2:	48 2b 41 18 	sub	rax, qword ptr [rcx + 24]
 101eff6:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101effb:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101f000:	0f b6 5a 0a 	movzx	ebx, byte ptr [rdx + 10]
 101f004:	88 5c 24 17 	mov	byte ptr [rsp + 23], bl
 101f008:	48 8d 71 78 	lea	rsi, [rcx + 120]
 101f00c:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 101f011:	48 89 34 24 	mov	qword ptr [rsp], rsi
 101f015:	e8 16 91 fe ff 	call	-93930 <_runtime.lock>
 101f01a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101f01f:	48 83 e8 80 	sub	rax, -128
 101f023:	0f b6 4c 24 17 	movzx	ecx, byte ptr [rsp + 23]
 101f028:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101f02d:	eb 03 	jmp	3 <_runtime.addspecial+0xb2>
 101f02f:	48 89 d8 	mov	rax, rbx
 101f032:	48 8b 18 	mov	rbx, qword ptr [rax]
 101f035:	48 85 db 	test	rbx, rbx
 101f038:	74 1a 	je	26 <_runtime.addspecial+0xd4>
 101f03a:	0f b7 73 08 	movzx	esi, word ptr [rbx + 8]
 101f03e:	48 39 f2 	cmp	rdx, rsi
 101f041:	75 08 	jne	8 <_runtime.addspecial+0xcb>
 101f043:	38 4b 0a 	cmp	byte ptr [rbx + 10], cl
 101f046:	74 6f 	je	111 <_runtime.addspecial+0x137>
 101f048:	48 39 f2 	cmp	rdx, rsi
 101f04b:	72 07 	jb	7 <_runtime.addspecial+0xd4>
 101f04d:	75 e0 	jne	-32 <_runtime.addspecial+0xaf>
 101f04f:	38 4b 0a 	cmp	byte ptr [rbx + 10], cl
 101f052:	76 db 	jbe	-37 <_runtime.addspecial+0xaf>
 101f054:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 101f059:	66 89 51 08 	mov	word ptr [rcx + 8], dx
 101f05d:	48 8b 10 	mov	rdx, qword ptr [rax]
 101f060:	48 89 11 	mov	qword ptr [rcx], rdx
 101f063:	48 89 08 	mov	qword ptr [rax], rcx
 101f066:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101f06b:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f06f:	e8 9c 92 fe ff 	call	-93540 <_runtime.unlock>
 101f074:	90 	nop
 101f075:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101f07e:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101f083:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 101f089:	8d 5a ff 	lea	ebx, [rdx - 1]
 101f08c:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 101f092:	83 fa 01 	cmp	edx, 1
 101f095:	75 11 	jne	17 <_runtime.addspecial+0x128>
 101f097:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 101f09e:	74 08 	je	8 <_runtime.addspecial+0x128>
 101f0a0:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 101f0a8:	c6 44 24 58 01 	mov	byte ptr [rsp + 88], 1
 101f0ad:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101f0b2:	48 83 c4 40 	add	rsp, 64
 101f0b6:	c3 	ret
 101f0b7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101f0bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f0c0:	e8 4b 92 fe ff 	call	-93621 <_runtime.unlock>
 101f0c5:	90 	nop
 101f0c6:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 101f0cf:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101f0d4:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 101f0da:	8d 5a ff 	lea	ebx, [rdx - 1]
 101f0dd:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 101f0e3:	83 fa 01 	cmp	edx, 1
 101f0e6:	75 11 	jne	17 <_runtime.addspecial+0x179>
 101f0e8:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 101f0ef:	74 08 	je	8 <_runtime.addspecial+0x179>
 101f0f1:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 101f0f9:	c6 44 24 58 00 	mov	byte ptr [rsp + 88], 0
 101f0fe:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101f103:	48 83 c4 40 	add	rsp, 64
 101f107:	c3 	ret
 101f108:	48 8d 05 9b 63 05 00 	lea	rax, [rip + 353179]
 101f10f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f113:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 101f11c:	e8 3f 9c 00 00 	call	39999 <_runtime.throw>
 101f121:	90 	nop
 101f122:	e8 a9 1a 03 00 	call	203433 <_runtime.morestack_noctxt>
 101f127:	e9 54 fe ff ff 	jmp	-428 <_runtime.addspecial>
 101f12c:	cc 	int3
 101f12d:	cc 	int3
 101f12e:	cc 	int3
 101f12f:	cc 	int3

_runtime.setprofilebucket:
 101f130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f13d:	0f 86 98 00 00 00 	jbe	152 <_runtime.setprofilebucket+0xab>
 101f143:	48 83 ec 28 	sub	rsp, 40
 101f147:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 101f14c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 101f151:	48 8d 05 a0 85 0d 00 	lea	rax, [rip + 886176]
 101f158:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f15c:	e8 cf 8f fe ff 	call	-94257 <_runtime.lock>
 101f161:	48 8d 05 48 85 0d 00 	lea	rax, [rip + 886088]
 101f168:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f16c:	e8 df 21 ff ff 	call	-56865 <_runtime.(*fixalloc).alloc>
 101f171:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101f176:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101f17b:	48 8d 0d 76 85 0d 00 	lea	rcx, [rip + 886134]
 101f182:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101f186:	e8 85 91 fe ff 	call	-93819 <_runtime.unlock>
 101f18b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101f190:	c6 40 0a 02 	mov	byte ptr [rax + 10], 2
 101f194:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101f199:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 101f19d:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 101f1a2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101f1a6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101f1ab:	e8 d0 fd ff ff 	call	-560 <_runtime.addspecial>
 101f1b0:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 101f1b5:	74 0a 	je	10 <_runtime.setprofilebucket+0x91>
 101f1b7:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 101f1bc:	48 83 c4 28 	add	rsp, 40
 101f1c0:	c3 	ret
 101f1c1:	48 8d 05 6a 73 05 00 	lea	rax, [rip + 357226]
 101f1c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f1cc:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 101f1d5:	e8 86 9b 00 00 	call	39814 <_runtime.throw>
 101f1da:	90 	nop
 101f1db:	e8 f0 19 03 00 	call	203248 <_runtime.morestack_noctxt>
 101f1e0:	e9 4b ff ff ff 	jmp	-181 <_runtime.setprofilebucket>
 101f1e5:	cc 	int3
 101f1e6:	cc 	int3
 101f1e7:	cc 	int3
 101f1e8:	cc 	int3
 101f1e9:	cc 	int3
 101f1ea:	cc 	int3
 101f1eb:	cc 	int3
 101f1ec:	cc 	int3
 101f1ed:	cc 	int3
 101f1ee:	cc 	int3
 101f1ef:	cc 	int3

_runtime.freespecial:
 101f1f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f1f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f1fd:	0f 86 2f 01 00 00 	jbe	303 <_runtime.freespecial+0x142>
 101f203:	48 83 ec 30 	sub	rsp, 48
 101f207:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101f20c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101f211:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101f216:	0f b6 48 0a 	movzx	ecx, byte ptr [rax + 10]
 101f21a:	80 f9 01 	cmp	cl, 1
 101f21d:	74 76 	je	118 <_runtime.freespecial+0xa5>
 101f21f:	80 f9 02 	cmp	cl, 2
 101f222:	0f 85 f0 00 00 00 	jne	240 <_runtime.freespecial+0x128>
 101f228:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 101f22c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101f230:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 101f235:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101f23a:	e8 21 4d 00 00 	call	19745 <_runtime.mProf_Free>
 101f23f:	48 8d 05 b2 84 0d 00 	lea	rax, [rip + 885938]
 101f246:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f24a:	e8 e1 8e fe ff 	call	-94495 <_runtime.lock>
 101f24f:	90 	nop
 101f250:	48 8b 05 89 84 0d 00 	mov	rax, qword ptr [rip + 885897]
 101f257:	48 2b 05 52 84 0d 00 	sub	rax, qword ptr [rip + 885842]
 101f25e:	48 89 05 7b 84 0d 00 	mov	qword ptr [rip + 885883], rax
 101f265:	48 8b 05 5c 84 0d 00 	mov	rax, qword ptr [rip + 885852]
 101f26c:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101f271:	48 89 01 	mov	qword ptr [rcx], rax
 101f274:	48 89 0d 4d 84 0d 00 	mov	qword ptr [rip + 885837], rcx
 101f27b:	48 8d 05 76 84 0d 00 	lea	rax, [rip + 885878]
 101f282:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f286:	e8 85 90 fe ff 	call	-94075 <_runtime.unlock>
 101f28b:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101f290:	48 83 c4 30 	add	rsp, 48
 101f294:	c3 	ret
 101f295:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 101f299:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 101f29d:	48 8b 58 20 	mov	rbx, qword ptr [rax + 32]
 101f2a1:	48 8b 70 28 	mov	rsi, qword ptr [rax + 40]
 101f2a5:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 101f2aa:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 101f2ae:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101f2b3:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101f2b8:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 101f2bd:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 101f2c2:	e8 a9 1d ff ff 	call	-57943 <_runtime.queuefinalizer>
 101f2c7:	48 8d 05 2a 84 0d 00 	lea	rax, [rip + 885802]
 101f2ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f2d2:	e8 59 8e fe ff 	call	-94631 <_runtime.lock>
 101f2d7:	90 	nop
 101f2d8:	48 8b 05 b9 83 0d 00 	mov	rax, qword ptr [rip + 885689]
 101f2df:	48 2b 05 82 83 0d 00 	sub	rax, qword ptr [rip + 885634]
 101f2e6:	48 89 05 ab 83 0d 00 	mov	qword ptr [rip + 885675], rax
 101f2ed:	48 8b 05 8c 83 0d 00 	mov	rax, qword ptr [rip + 885644]
 101f2f4:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 101f2f9:	48 89 01 	mov	qword ptr [rcx], rax
 101f2fc:	48 89 0d 7d 83 0d 00 	mov	qword ptr [rip + 885629], rcx
 101f303:	48 8d 05 ee 83 0d 00 	lea	rax, [rip + 885742]
 101f30a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f30e:	e8 fd 8f fe ff 	call	-94211 <_runtime.unlock>
 101f313:	e9 73 ff ff ff 	jmp	-141 <_runtime.freespecial+0x9b>
 101f318:	48 8d 05 c3 47 05 00 	lea	rax, [rip + 346051]
 101f31f:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f323:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 101f32c:	e8 2f 9a 00 00 	call	39471 <_runtime.throw>
 101f331:	90 	nop
 101f332:	e8 99 18 03 00 	call	202905 <_runtime.morestack_noctxt>
 101f337:	e9 b4 fe ff ff 	jmp	-332 <_runtime.freespecial>
 101f33c:	cc 	int3
 101f33d:	cc 	int3
 101f33e:	cc 	int3
 101f33f:	cc 	int3

_runtime.newMarkBits:
 101f340:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f349:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f34d:	0f 86 31 03 00 00 	jbe	817 <_runtime.newMarkBits+0x344>
 101f353:	48 83 ec 40 	sub	rsp, 64
 101f357:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 101f35c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 101f361:	48 8b 15 28 f1 0a 00 	mov	rdx, qword ptr [rip + 717096]
 101f368:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 101f36d:	48 83 c3 3f 	add	rbx, 63
 101f371:	48 c1 eb 06 	shr	rbx, 6
 101f375:	48 85 d2 	test	rdx, rdx
 101f378:	0f 84 b1 02 00 00 	je	689 <_runtime.newMarkBits+0x2ef>
 101f37e:	48 8b 32 	mov	rsi, qword ptr [rdx]
 101f381:	48 8d 34 de 	lea	rsi, [rsi + 8*rbx]
 101f385:	48 81 fe f0 ff 00 00 	cmp	rsi, 65520
 101f38c:	40 0f 97 c6 	seta	sil
 101f390:	48 89 df 	mov	rdi, rbx
 101f393:	48 c1 e3 03 	shl	rbx, 3
 101f397:	40 84 f6 	test	sil, sil
 101f39a:	0f 84 56 02 00 00 	je	598 <_runtime.newMarkBits+0x2b6>
 101f3a0:	31 c0 	xor	eax, eax
 101f3a2:	48 85 c0 	test	rax, rax
 101f3a5:	0f 85 3c 02 00 00 	jne	572 <_runtime.newMarkBits+0x2a7>
 101f3ab:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 101f3b0:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 101f3b5:	48 8d 05 c4 f0 0a 00 	lea	rax, [rip + 716996]
 101f3bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f3c0:	e8 6b 8d fe ff 	call	-94869 <_runtime.lock>
 101f3c5:	48 8b 05 c4 f0 0a 00 	mov	rax, qword ptr [rip + 716996]
 101f3cc:	48 85 c0 	test	rax, rax
 101f3cf:	0f 84 03 02 00 00 	je	515 <_runtime.newMarkBits+0x298>
 101f3d5:	48 8b 10 	mov	rdx, qword ptr [rax]
 101f3d8:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101f3dd:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 101f3e1:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f3e8:	0f 97 c2 	seta	dl
 101f3eb:	84 d2 	test	dl, dl
 101f3ed:	0f 84 a7 01 00 00 	je	423 <_runtime.newMarkBits+0x25a>
 101f3f3:	31 c0 	xor	eax, eax
 101f3f5:	48 85 c0 	test	rax, rax
 101f3f8:	0f 85 73 01 00 00 	jne	371 <_runtime.newMarkBits+0x231>
 101f3fe:	e8 9d 03 00 00 	call	925 <_runtime.newArenaMayUnlock>
 101f403:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 101f407:	48 8b 0d 82 f0 0a 00 	mov	rcx, qword ptr [rip + 716930]
 101f40e:	48 85 c9 	test	rcx, rcx
 101f411:	0f 84 4b 01 00 00 	je	331 <_runtime.newMarkBits+0x222>
 101f417:	48 8b 11 	mov	rdx, qword ptr [rcx]
 101f41a:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101f41f:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 101f423:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f42a:	0f 97 c2 	seta	dl
 101f42d:	84 d2 	test	dl, dl
 101f42f:	0f 84 ef 00 00 00 	je	239 <_runtime.newMarkBits+0x1e4>
 101f435:	31 c9 	xor	ecx, ecx
 101f437:	48 85 c9 	test	rcx, rcx
 101f43a:	0f 85 a9 00 00 00 	jne	169 <_runtime.newMarkBits+0x1a9>
 101f440:	48 85 c0 	test	rax, rax
 101f443:	0f 84 96 00 00 00 	je	150 <_runtime.newMarkBits+0x19f>
 101f449:	48 8b 10 	mov	rdx, qword ptr [rax]
 101f44c:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 101f450:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f457:	0f 97 c2 	seta	dl
 101f45a:	84 d2 	test	dl, dl
 101f45c:	74 49 	je	73 <_runtime.newMarkBits+0x167>
 101f45e:	31 c9 	xor	ecx, ecx
 101f460:	48 85 c9 	test	rcx, rcx
 101f463:	0f 84 d0 01 00 00 	je	464 <_runtime.newMarkBits+0x2f9>
 101f469:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 101f46e:	48 8b 0d 1b f0 0a 00 	mov	rcx, qword ptr [rip + 716827]
 101f475:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 101f479:	48 8d 0d 10 f0 0a 00 	lea	rcx, [rip + 716816]
 101f480:	48 87 01 	xchg	qword ptr [rcx], rax
 101f483:	48 8d 05 f6 ef 0a 00 	lea	rax, [rip + 716790]
 101f48a:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f48e:	e8 7d 8e fe ff 	call	-94595 <_runtime.unlock>
 101f493:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101f498:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101f49d:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101f4a2:	48 83 c4 40 	add	rsp, 64
 101f4a6:	c3 	ret
 101f4a7:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101f4ac:	48 89 d6 	mov	rsi, rdx
 101f4af:	f0 	lock
 101f4b0:	48 0f c1 10 	xadd	qword ptr [rax], rdx
 101f4b4:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 101f4b8:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f4bf:	76 04 	jbe	4 <_runtime.newMarkBits+0x185>
 101f4c1:	31 c9 	xor	ecx, ecx
 101f4c3:	eb 9b 	jmp	-101 <_runtime.newMarkBits+0x120>
 101f4c5:	48 29 f2 	sub	rdx, rsi
 101f4c8:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f4cf:	0f 83 7d 01 00 00 	jae	381 <_runtime.newMarkBits+0x312>
 101f4d5:	48 8d 0c 10 	lea	rcx, [rax + rdx]
 101f4d9:	48 8d 49 10 	lea	rcx, [rcx + 16]
 101f4dd:	eb 81 	jmp	-127 <_runtime.newMarkBits+0x120>
 101f4df:	ba 01 00 00 00 	mov	edx, 1
 101f4e4:	e9 71 ff ff ff 	jmp	-143 <_runtime.newMarkBits+0x11a>
 101f4e9:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 101f4ee:	48 8b 0d 93 ef 0a 00 	mov	rcx, qword ptr [rip + 716691]
 101f4f5:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 101f4f9:	48 89 05 88 ef 0a 00 	mov	qword ptr [rip + 716680], rax
 101f500:	48 8d 05 79 ef 0a 00 	lea	rax, [rip + 716665]
 101f507:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f50b:	e8 00 8e fe ff 	call	-94720 <_runtime.unlock>
 101f510:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101f515:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101f51a:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101f51f:	48 83 c4 40 	add	rsp, 64
 101f523:	c3 	ret
 101f524:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101f529:	48 89 d6 	mov	rsi, rdx
 101f52c:	f0 	lock
 101f52d:	48 0f c1 11 	xadd	qword ptr [rcx], rdx
 101f531:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 101f535:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f53c:	76 07 	jbe	7 <_runtime.newMarkBits+0x205>
 101f53e:	31 c9 	xor	ecx, ecx
 101f540:	e9 f2 fe ff ff 	jmp	-270 <_runtime.newMarkBits+0xf7>
 101f545:	48 29 f2 	sub	rdx, rsi
 101f548:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f54f:	0f 83 0a 01 00 00 	jae	266 <_runtime.newMarkBits+0x31f>
 101f555:	48 8d 0c 0a 	lea	rcx, [rdx + rcx]
 101f559:	48 8d 49 10 	lea	rcx, [rcx + 16]
 101f55d:	e9 d5 fe ff ff 	jmp	-299 <_runtime.newMarkBits+0xf7>
 101f562:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101f567:	ba 01 00 00 00 	mov	edx, 1
 101f56c:	e9 bc fe ff ff 	jmp	-324 <_runtime.newMarkBits+0xed>
 101f571:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 101f576:	48 8d 05 03 ef 0a 00 	lea	rax, [rip + 716547]
 101f57d:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f581:	e8 8a 8d fe ff 	call	-94838 <_runtime.unlock>
 101f586:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101f58b:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101f590:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101f595:	48 83 c4 40 	add	rsp, 64
 101f599:	c3 	ret
 101f59a:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 101f59f:	48 89 d6 	mov	rsi, rdx
 101f5a2:	f0 	lock
 101f5a3:	48 0f c1 10 	xadd	qword ptr [rax], rdx
 101f5a7:	48 8d 14 da 	lea	rdx, [rdx + 8*rbx]
 101f5ab:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f5b2:	76 07 	jbe	7 <_runtime.newMarkBits+0x27b>
 101f5b4:	31 c0 	xor	eax, eax
 101f5b6:	e9 3a fe ff ff 	jmp	-454 <_runtime.newMarkBits+0xb5>
 101f5bb:	48 29 f2 	sub	rdx, rsi
 101f5be:	48 81 fa f0 ff 00 00 	cmp	rdx, 65520
 101f5c5:	0f 83 a1 00 00 00 	jae	161 <_runtime.newMarkBits+0x32c>
 101f5cb:	48 8d 04 02 	lea	rax, [rdx + rax]
 101f5cf:	48 8d 40 10 	lea	rax, [rax + 16]
 101f5d3:	e9 1d fe ff ff 	jmp	-483 <_runtime.newMarkBits+0xb5>
 101f5d8:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 101f5dd:	ba 01 00 00 00 	mov	edx, 1
 101f5e2:	e9 04 fe ff ff 	jmp	-508 <_runtime.newMarkBits+0xab>
 101f5e7:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 101f5ec:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 101f5f1:	48 83 c4 40 	add	rsp, 64
 101f5f5:	c3 	ret
 101f5f6:	48 89 de 	mov	rsi, rbx
 101f5f9:	f0 	lock
 101f5fa:	48 0f c1 1a 	xadd	qword ptr [rdx], rbx
 101f5fe:	48 8d 04 fb 	lea	rax, [rbx + 8*rdi]
 101f602:	48 3d f0 ff 00 00 	cmp	rax, 65520
 101f608:	76 0a 	jbe	10 <_runtime.newMarkBits+0x2d4>
 101f60a:	48 89 f3 	mov	rbx, rsi
 101f60d:	31 c0 	xor	eax, eax
 101f60f:	e9 8e fd ff ff 	jmp	-626 <_runtime.newMarkBits+0x62>
 101f614:	48 29 f0 	sub	rax, rsi
 101f617:	48 3d f0 ff 00 00 	cmp	rax, 65520
 101f61d:	73 5a 	jae	90 <_runtime.newMarkBits+0x339>
 101f61f:	48 8d 04 02 	lea	rax, [rdx + rax]
 101f623:	48 8d 40 10 	lea	rax, [rax + 16]
 101f627:	48 89 f3 	mov	rbx, rsi
 101f62a:	e9 73 fd ff ff 	jmp	-653 <_runtime.newMarkBits+0x62>
 101f62f:	be 01 00 00 00 	mov	esi, 1
 101f634:	e9 57 fd ff ff 	jmp	-681 <_runtime.newMarkBits+0x50>
 101f639:	48 8d 05 ce 46 05 00 	lea	rax, [rip + 345806]
 101f640:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f644:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 101f64d:	e8 0e 97 00 00 	call	38670 <_runtime.throw>
 101f652:	48 89 d0 	mov	rax, rdx
 101f655:	b9 f0 ff 00 00 	mov	ecx, 65520
 101f65a:	e8 01 3d 03 00 	call	212225 <_runtime.panicIndexU>
 101f65f:	48 89 d0 	mov	rax, rdx
 101f662:	b9 f0 ff 00 00 	mov	ecx, 65520
 101f667:	e8 f4 3c 03 00 	call	212212 <_runtime.panicIndexU>
 101f66c:	48 89 d0 	mov	rax, rdx
 101f66f:	b9 f0 ff 00 00 	mov	ecx, 65520
 101f674:	e8 e7 3c 03 00 	call	212199 <_runtime.panicIndexU>
 101f679:	b9 f0 ff 00 00 	mov	ecx, 65520
 101f67e:	e8 dd 3c 03 00 	call	212189 <_runtime.panicIndexU>
 101f683:	90 	nop
 101f684:	e8 47 15 03 00 	call	202055 <_runtime.morestack_noctxt>
 101f689:	e9 b2 fc ff ff 	jmp	-846 <_runtime.newMarkBits>
 101f68e:	cc 	int3
 101f68f:	cc 	int3

_runtime.newAllocBits:
 101f690:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f699:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f69d:	76 30 	jbe	48 <_runtime.newAllocBits+0x3f>
 101f69f:	48 83 ec 18 	sub	rsp, 24
 101f6a3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 101f6a8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 101f6ad:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101f6b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f6b6:	e8 85 fc ff ff 	call	-891 <_runtime.newMarkBits>
 101f6bb:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101f6c0:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 101f6c5:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 101f6ca:	48 83 c4 18 	add	rsp, 24
 101f6ce:	c3 	ret
 101f6cf:	e8 fc 14 03 00 	call	201980 <_runtime.morestack_noctxt>
 101f6d4:	eb ba 	jmp	-70 <_runtime.newAllocBits>
 101f6d6:	cc 	int3
 101f6d7:	cc 	int3
 101f6d8:	cc 	int3
 101f6d9:	cc 	int3
 101f6da:	cc 	int3
 101f6db:	cc 	int3
 101f6dc:	cc 	int3
 101f6dd:	cc 	int3
 101f6de:	cc 	int3
 101f6df:	cc 	int3

_runtime.nextMarkBitArenaEpoch:
 101f6e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f6e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f6ed:	0f 86 a1 00 00 00 	jbe	161 <_runtime.nextMarkBitArenaEpoch+0xb4>
 101f6f3:	48 83 ec 10 	sub	rsp, 16
 101f6f7:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 101f6fc:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 101f701:	48 8d 05 78 ed 0a 00 	lea	rax, [rip + 716152]
 101f708:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f70c:	e8 1f 8a fe ff 	call	-95713 <_runtime.lock>
 101f711:	48 8b 05 88 ed 0a 00 	mov	rax, qword ptr [rip + 716168]
 101f718:	48 85 c0 	test	rax, rax
 101f71b:	74 2c 	je	44 <_runtime.nextMarkBitArenaEpoch+0x69>
 101f71d:	48 8b 0d 64 ed 0a 00 	mov	rcx, qword ptr [rip + 716132]
 101f724:	48 85 c9 	test	rcx, rcx
 101f727:	75 05 	jne	5 <_runtime.nextMarkBitArenaEpoch+0x4e>
 101f729:	eb 60 	jmp	96 <_runtime.nextMarkBitArenaEpoch+0xab>
 101f72b:	48 89 d0 	mov	rax, rdx
 101f72e:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 101f732:	48 85 d2 	test	rdx, rdx
 101f735:	75 f4 	jne	-12 <_runtime.nextMarkBitArenaEpoch+0x4b>
 101f737:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 101f73b:	48 8b 05 5e ed 0a 00 	mov	rax, qword ptr [rip + 716126]
 101f742:	48 89 05 3f ed 0a 00 	mov	qword ptr [rip + 716095], rax
 101f749:	48 8b 05 48 ed 0a 00 	mov	rax, qword ptr [rip + 716104]
 101f750:	48 89 05 49 ed 0a 00 	mov	qword ptr [rip + 716105], rax
 101f757:	48 8b 05 32 ed 0a 00 	mov	rax, qword ptr [rip + 716082]
 101f75e:	48 89 05 33 ed 0a 00 	mov	qword ptr [rip + 716083], rax
 101f765:	31 c0 	xor	eax, eax
 101f767:	48 8d 0d 22 ed 0a 00 	lea	rcx, [rip + 716066]
 101f76e:	48 87 01 	xchg	qword ptr [rcx], rax
 101f771:	48 8d 05 08 ed 0a 00 	lea	rax, [rip + 716040]
 101f778:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f77c:	e8 8f 8b fe ff 	call	-95345 <_runtime.unlock>
 101f781:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 101f786:	48 83 c4 10 	add	rsp, 16
 101f78a:	c3 	ret
 101f78b:	48 89 05 f6 ec 0a 00 	mov	qword ptr [rip + 716022], rax
 101f792:	eb b5 	jmp	-75 <_runtime.nextMarkBitArenaEpoch+0x69>
 101f794:	e8 37 14 03 00 	call	201783 <_runtime.morestack_noctxt>
 101f799:	e9 42 ff ff ff 	jmp	-190 <_runtime.nextMarkBitArenaEpoch>
 101f79e:	cc 	int3
 101f79f:	cc 	int3

_runtime.newArenaMayUnlock:
 101f7a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f7a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f7ad:	0f 86 c8 00 00 00 	jbe	200 <_runtime.newArenaMayUnlock+0xdb>
 101f7b3:	48 83 ec 30 	sub	rsp, 48
 101f7b7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 101f7bc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 101f7c1:	48 8b 05 c0 ec 0a 00 	mov	rax, qword ptr [rip + 715968]
 101f7c8:	48 85 c0 	test	rax, rax
 101f7cb:	74 45 	je	69 <_runtime.newArenaMayUnlock+0x72>
 101f7cd:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 101f7d2:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 101f7d6:	48 89 0d ab ec 0a 00 	mov	qword ptr [rip + 715947], rcx
 101f7dd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f7e1:	48 c7 44 24 08 00 00 01 00 	mov	qword ptr [rsp + 8], 65536
 101f7ea:	e8 d1 40 03 00 	call	213201 <_runtime.memclrNoHeapPointers>
 101f7ef:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101f7f4:	48 c7 40 08 00 00 00 00 	mov	qword ptr [rax + 8], 0
 101f7fc:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 101f803:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 101f808:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 101f80d:	48 83 c4 30 	add	rsp, 48
 101f811:	c3 	ret
 101f812:	48 8d 05 67 ec 0a 00 	lea	rax, [rip + 715879]
 101f819:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f81d:	e8 ee 8a fe ff 	call	-95506 <_runtime.unlock>
 101f822:	48 c7 04 24 00 00 01 00 	mov	qword ptr [rsp], 65536
 101f82a:	48 8d 05 87 8e 0d 00 	lea	rax, [rip + 888455]
 101f831:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101f836:	e8 85 16 ff ff 	call	-59771 <_runtime.sysAlloc>
 101f83b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101f840:	48 85 c0 	test	rax, rax
 101f843:	74 1c 	je	28 <_runtime.newArenaMayUnlock+0xc1>
 101f845:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 101f84a:	48 8d 05 2f ec 0a 00 	lea	rax, [rip + 715823]
 101f851:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f855:	e8 d6 88 fe ff 	call	-96042 <_runtime.lock>
 101f85a:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 101f85f:	eb 93 	jmp	-109 <_runtime.newArenaMayUnlock+0x54>
 101f861:	48 8d 05 1a 62 05 00 	lea	rax, [rip + 352794]
 101f868:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f86c:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 101f875:	e8 e6 94 00 00 	call	38118 <_runtime.throw>
 101f87a:	90 	nop
 101f87b:	e8 50 13 03 00 	call	201552 <_runtime.morestack_noctxt>
 101f880:	e9 1b ff ff ff 	jmp	-229 <_runtime.newArenaMayUnlock>
 101f885:	cc 	int3
 101f886:	cc 	int3
 101f887:	cc 	int3
 101f888:	cc 	int3
 101f889:	cc 	int3
 101f88a:	cc 	int3
 101f88b:	cc 	int3
 101f88c:	cc 	int3
 101f88d:	cc 	int3
 101f88e:	cc 	int3
 101f88f:	cc 	int3

_runtime.(*pageAlloc).init:
 101f890:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101f899:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101f89d:	0f 86 6d 01 00 00 	jbe	365 <_runtime.(*pageAlloc).init+0x180>
 101f8a3:	48 83 ec 20 	sub	rsp, 32
 101f8a7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 101f8ac:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 101f8b1:	48 8b 0d e8 b9 0a 00 	mov	rcx, qword ptr [rip + 702952]
 101f8b8:	48 83 f9 15 	cmp	rcx, 21
 101f8bc:	0f 87 b2 00 00 00 	ja	178 <_runtime.(*pageAlloc).init+0xe4>
 101f8c2:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101f8c7:	84 01 	test	byte ptr [rcx], al
 101f8c9:	83 3d 30 80 0d 00 00 	cmp	dword ptr [rip + 884784], 0
 101f8d0:	0f 85 88 00 00 00 	jne	136 <_runtime.(*pageAlloc).init+0xce>
 101f8d6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101f8db:	48 89 81 c8 00 01 00 	mov	qword ptr [rcx + 65736], rax
 101f8e2:	48 8d 91 a0 00 01 00 	lea	rdx, [rcx + 65696]
 101f8e9:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101f8ed:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 101f8f2:	e8 59 50 00 00 	call	20569 <_runtime.(*addrRanges).init>
 101f8f7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 101f8fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f900:	e8 2b 22 00 00 	call	8747 <_runtime.(*pageAlloc).sysInit>
 101f905:	48 b8 ff ff ff ff ff 7f ff ff 	movabs	rax, -140737488355329
 101f90f:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 101f914:	48 89 81 78 00 01 00 	mov	qword ptr [rcx + 65656], rax
 101f91b:	48 b8 00 00 00 00 00 80 ff ff 	movabs	rax, -140737488355328
 101f925:	48 89 81 80 00 01 00 	mov	qword ptr [rcx + 65664], rax
 101f92c:	83 3d cd 7f 0d 00 00 	cmp	dword ptr [rip + 884685], 0
 101f933:	75 16 	jne	22 <_runtime.(*pageAlloc).init+0xbb>
 101f935:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101f93a:	48 89 81 c0 00 01 00 	mov	qword ptr [rcx + 65728], rax
 101f941:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 101f946:	48 83 c4 20 	add	rsp, 32
 101f94a:	c3 	ret
 101f94b:	48 8d b9 c0 00 01 00 	lea	rdi, [rcx + 65728]
 101f952:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 101f957:	e8 84 30 03 00 	call	209028 <_runtime.gcWriteBarrier>
 101f95c:	eb e3 	jmp	-29 <_runtime.(*pageAlloc).init+0xb1>
 101f95e:	48 8d b9 c8 00 01 00 	lea	rdi, [rcx + 65736]
 101f965:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101f96a:	e8 71 30 03 00 	call	209009 <_runtime.gcWriteBarrier>
 101f96f:	e9 6e ff ff ff 	jmp	-146 <_runtime.(*pageAlloc).init+0x52>
 101f974:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101f979:	e8 22 ab 00 00 	call	43810 <_runtime.printlock>
 101f97e:	48 8d 05 99 62 05 00 	lea	rax, [rip + 352921]
 101f985:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f989:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 101f992:	e8 49 b4 00 00 	call	46153 <_runtime.printstring>
 101f997:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 101f99c:	48 83 f9 40 	cmp	rcx, 64
 101f9a0:	48 19 c0 	sbb	rax, rax
 101f9a3:	ba 01 00 00 00 	mov	edx, 1
 101f9a8:	48 d3 e2 	shl	rdx, cl
 101f9ab:	48 21 c2 	and	rdx, rax
 101f9ae:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101f9b2:	e8 69 b2 00 00 	call	45673 <_runtime.printint>
 101f9b7:	e8 74 ad 00 00 	call	44404 <_runtime.printnl>
 101f9bc:	e8 5f ab 00 00 	call	43871 <_runtime.printunlock>
 101f9c1:	e8 da aa 00 00 	call	43738 <_runtime.printlock>
 101f9c6:	48 8d 05 56 5c 05 00 	lea	rax, [rip + 351318]
 101f9cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101f9d1:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 101f9da:	e8 01 b4 00 00 	call	46081 <_runtime.printstring>
 101f9df:	48 c7 04 24 00 00 20 00 	mov	qword ptr [rsp], 2097152
 101f9e7:	e8 34 b2 00 00 	call	45620 <_runtime.printint>
 101f9ec:	e8 3f ad 00 00 	call	44351 <_runtime.printnl>
 101f9f1:	e8 2a ab 00 00 	call	43818 <_runtime.printunlock>
 101f9f6:	48 8d 05 2a 71 05 00 	lea	rax, [rip + 356650]
 101f9fd:	48 89 04 24 	mov	qword ptr [rsp], rax
 101fa01:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 101fa0a:	e8 51 93 00 00 	call	37713 <_runtime.throw>
 101fa0f:	90 	nop
 101fa10:	e8 bb 11 03 00 	call	201147 <_runtime.morestack_noctxt>
 101fa15:	e9 76 fe ff ff 	jmp	-394 <_runtime.(*pageAlloc).init>
 101fa1a:	cc 	int3
 101fa1b:	cc 	int3
 101fa1c:	cc 	int3
 101fa1d:	cc 	int3
 101fa1e:	cc 	int3
 101fa1f:	cc 	int3

_runtime.(*pageAlloc).grow:
 101fa20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101fa29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 101fa2d:	0f 86 5f 02 00 00 	jbe	607 <_runtime.(*pageAlloc).grow+0x272>
 101fa33:	48 83 ec 68 	sub	rsp, 104
 101fa37:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 101fa3c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 101fa41:	90 	nop
 101fa42:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101fa47:	48 89 04 24 	mov	qword ptr [rsp], rax
 101fa4b:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 101fa50:	48 89 ca 	mov	rdx, rcx
 101fa53:	48 81 e1 00 00 c0 ff 	and	rcx, -4194304
 101fa5a:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 101fa5f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101fa64:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 101fa6c:	48 8d 14 13 	lea	rdx, [rbx + rdx]
 101fa70:	48 8d 92 ff ff 3f 00 	lea	rdx, [rdx + 4194303]
 101fa77:	48 81 e2 00 00 c0 ff 	and	rdx, -4194304
 101fa7e:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 101fa83:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 101fa88:	e8 33 22 00 00 	call	8755 <_runtime.(*pageAlloc).sysGrow>
 101fa8d:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101fa92:	84 00 	test	byte ptr [rax], al
 101fa94:	48 8b 88 90 00 01 00 	mov	rcx, qword ptr [rax + 65680]
 101fa9b:	90 	nop
 101fa9c:	90 	nop
 101fa9d:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101faa2:	48 bb 00 00 00 00 00 80 00 00 	movabs	rbx, 140737488355328
 101faac:	48 8d 34 13 	lea	rsi, [rbx + rdx]
 101fab0:	48 89 f7 	mov	rdi, rsi
 101fab3:	48 c1 ee 16 	shr	rsi, 22
 101fab7:	48 85 c9 	test	rcx, rcx
 101faba:	0f 85 b6 01 00 00 	jne	438 <_runtime.(*pageAlloc).grow+0x256>
 101fac0:	48 89 b0 90 00 01 00 	mov	qword ptr [rax + 65680], rsi
 101fac7:	48 89 7c 24 50 	mov	qword ptr [rsp + 80], rdi
 101facc:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 101fad1:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 101fad6:	4c 8d 04 0b 	lea	r8, [rbx + rcx]
 101fada:	49 c1 e8 16 	shr	r8, 22
 101fade:	4c 89 44 24 40 	mov	qword ptr [rsp + 64], r8
 101fae3:	4c 39 80 98 00 01 00 	cmp	qword ptr [rax + 65688], r8
 101faea:	73 07 	jae	7 <_runtime.(*pageAlloc).grow+0xd3>
 101faec:	4c 89 80 98 00 01 00 	mov	qword ptr [rax + 65688], r8
 101faf3:	48 8d 98 a0 00 01 00 	lea	rbx, [rax + 65696]
 101fafa:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 101fafe:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101fb03:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 101fb08:	e8 d3 4f 00 00 	call	20435 <_runtime.(*addrRanges).add>
 101fb0d:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101fb12:	48 8b 88 78 00 01 00 	mov	rcx, qword ptr [rax + 65656]
 101fb19:	48 ba 00 00 00 00 00 80 00 00 	movabs	rdx, 140737488355328
 101fb23:	48 01 d1 	add	rcx, rdx
 101fb26:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 101fb2b:	48 39 ca 	cmp	rdx, rcx
 101fb2e:	0f 83 2f 01 00 00 	jae	303 <_runtime.(*pageAlloc).grow+0x243>
 101fb34:	48 c7 c1 ff ff ff ff 	mov	rcx, -1
 101fb3b:	48 85 c9 	test	rcx, rcx
 101fb3e:	0f 8d 15 01 00 00 	jge	277 <_runtime.(*pageAlloc).grow+0x239>
 101fb44:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101fb49:	48 89 90 78 00 01 00 	mov	qword ptr [rax + 65656], rdx
 101fb50:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 101fb55:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101fb5a:	eb 55 	jmp	85 <_runtime.(*pageAlloc).grow+0x191>
 101fb5c:	48 8b 4c f0 78 	mov	rcx, qword ptr [rax + 8*rsi + 120]
 101fb61:	84 01 	test	byte ptr [rcx], al
 101fb63:	48 81 e7 ff 1f 00 00 	and	rdi, 8191
 101fb6a:	48 c1 e7 07 	shl	rdi, 7
 101fb6e:	48 8d 0c 39 	lea	rcx, [rcx + rdi]
 101fb72:	48 8d 49 40 	lea	rcx, [rcx + 64]
 101fb76:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 101fb7a:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 101fb83:	48 c7 44 24 10 00 02 00 00 	mov	qword ptr [rsp + 16], 512
 101fb8c:	e8 bf 2c 00 00 	call	11455 <_runtime.(*pageBits).setRange>
 101fb91:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 101fb96:	48 8d 70 01 	lea	rsi, [rax + 1]
 101fb9a:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 101fb9f:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 101fba4:	48 89 c8 	mov	rax, rcx
 101fba7:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101fbac:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 101fbb1:	48 39 de 	cmp	rsi, rbx
 101fbb4:	73 73 	jae	115 <_runtime.(*pageAlloc).grow+0x209>
 101fbb6:	48 89 f7 	mov	rdi, rsi
 101fbb9:	48 c1 ee 0d 	shr	rsi, 13
 101fbbd:	48 81 fe 00 20 00 00 	cmp	rsi, 8192
 101fbc4:	0f 83 ba 00 00 00 	jae	186 <_runtime.(*pageAlloc).grow+0x264>
 101fbca:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 101fbcf:	48 8b 4c f0 78 	mov	rcx, qword ptr [rax + 8*rsi + 120]
 101fbd4:	4c 8d 04 f0 	lea	r8, [rax + 8*rsi]
 101fbd8:	4d 8d 40 78 	lea	r8, [r8 + 120]
 101fbdc:	48 85 c9 	test	rcx, rcx
 101fbdf:	0f 85 77 ff ff ff 	jne	-137 <_runtime.(*pageAlloc).grow+0x13c>
 101fbe5:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 101fbea:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 101fbef:	48 8b 88 c8 00 01 00 	mov	rcx, qword ptr [rax + 65736]
 101fbf6:	48 c7 04 24 00 00 10 00 	mov	qword ptr [rsp], 1048576
 101fbfe:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 101fc03:	e8 b8 12 ff ff 	call	-60744 <_runtime.sysAlloc>
 101fc08:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 101fc0d:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 101fc12:	48 87 01 	xchg	qword ptr [rcx], rax
 101fc15:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 101fc1a:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 101fc1f:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 101fc24:	e9 33 ff ff ff 	jmp	-205 <_runtime.(*pageAlloc).grow+0x13c>
 101fc29:	48 89 04 24 	mov	qword ptr [rsp], rax
 101fc2d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 101fc32:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 101fc3a:	48 c1 e8 0d 	shr	rax, 13
 101fc3e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101fc43:	66 c7 44 24 18 01 00 	mov	word ptr [rsp + 24], 1
 101fc4a:	e8 51 00 00 00 	call	81 <_runtime.(*pageAlloc).update>
 101fc4f:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 101fc54:	48 83 c4 68 	add	rsp, 104
 101fc58:	c3 	ret
 101fc59:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 101fc5e:	e9 ed fe ff ff 	jmp	-275 <_runtime.(*pageAlloc).grow+0x130>
 101fc63:	76 0a 	jbe	10 <_runtime.(*pageAlloc).grow+0x24f>
 101fc65:	b9 01 00 00 00 	mov	ecx, 1
 101fc6a:	e9 cc fe ff ff 	jmp	-308 <_runtime.(*pageAlloc).grow+0x11b>
 101fc6f:	31 c9 	xor	ecx, ecx
 101fc71:	e9 c5 fe ff ff 	jmp	-315 <_runtime.(*pageAlloc).grow+0x11b>
 101fc76:	48 39 ce 	cmp	rsi, rcx
 101fc79:	0f 82 41 fe ff ff 	jb	-447 <_runtime.(*pageAlloc).grow+0xa0>
 101fc7f:	e9 43 fe ff ff 	jmp	-445 <_runtime.(*pageAlloc).grow+0xa7>
 101fc84:	48 89 f0 	mov	rax, rsi
 101fc87:	b9 00 20 00 00 	mov	ecx, 8192
 101fc8c:	e8 cf 36 03 00 	call	210639 <_runtime.panicIndexU>
 101fc91:	90 	nop
 101fc92:	e8 39 0f 03 00 	call	200505 <_runtime.morestack_noctxt>
 101fc97:	e9 84 fd ff ff 	jmp	-636 <_runtime.(*pageAlloc).grow>
 101fc9c:	cc 	int3
 101fc9d:	cc 	int3
 101fc9e:	cc 	int3
 101fc9f:	cc 	int3

_runtime.(*pageAlloc).update:
 101fca0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 101fca9:	48 8d 44 24 c0 	lea	rax, [rsp - 64]
 101fcae:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 101fcb2:	0f 86 e5 05 00 00 	jbe	1509 <_runtime.(*pageAlloc).update+0x5fd>
 101fcb8:	48 81 ec c0 00 00 00 	sub	rsp, 192
 101fcbf:	48 89 ac 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rbp
 101fcc7:	48 8d ac 24 b8 00 00 00 	lea	rbp, [rsp + 184]
 101fccf:	48 8b 9c 24 d8 00 00 00 	mov	rbx, qword ptr [rsp + 216]
 101fcd7:	48 c1 e3 0d 	shl	rbx, 13
 101fcdb:	48 8b b4 24 d0 00 00 00 	mov	rsi, qword ptr [rsp + 208]
 101fce3:	48 01 f3 	add	rbx, rsi
 101fce6:	90 	nop
 101fce7:	90 	nop
 101fce8:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 101fcf2:	48 8d 04 37 	lea	rax, [rdi + rsi]
 101fcf6:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 101fcfe:	48 89 c6 	mov	rsi, rax
 101fd01:	48 c1 e8 16 	shr	rax, 22
 101fd05:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 101fd0d:	48 bf ff ff ff ff ff 7f 00 00 	movabs	rdi, 140737488355327
 101fd17:	48 01 fb 	add	rbx, rdi
 101fd1a:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 101fd22:	48 89 df 	mov	rdi, rbx
 101fd25:	48 c1 eb 16 	shr	rbx, 22
 101fd29:	48 39 c3 	cmp	rbx, rax
 101fd2c:	0f 84 2d 04 00 00 	je	1069 <_runtime.(*pageAlloc).update+0x4bf>
 101fd32:	48 89 9c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rbx
 101fd3a:	44 0f b6 84 24 e0 00 00 00 	movzx	r8d, byte ptr [rsp + 224]
 101fd43:	45 84 c0 	test	r8b, r8b
 101fd46:	0f 85 77 02 00 00 	jne	631 <_runtime.(*pageAlloc).update+0x323>
 101fd4c:	4c 8b 84 24 c8 00 00 00 	mov	r8, qword ptr [rsp + 200]
 101fd54:	4d 8b 48 68 	mov	r9, qword ptr [r8 + 104]
 101fd58:	4c 89 4c 24 40 	mov	qword ptr [rsp + 64], r9
 101fd5d:	4d 8b 50 60 	mov	r10, qword ptr [r8 + 96]
 101fd61:	4c 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], r10
 101fd69:	eb 39 	jmp	57 <_runtime.(*pageAlloc).update+0x104>
 101fd6b:	4c 8b 94 24 a8 00 00 00 	mov	r10, qword ptr [rsp + 168]
 101fd73:	49 89 04 ca 	mov	qword ptr [r10 + 8*rcx], rax
 101fd77:	48 8d 41 01 	lea	rax, [rcx + 1]
 101fd7b:	4c 8b 9c 24 88 00 00 00 	mov	r11, qword ptr [rsp + 136]
 101fd83:	4c 8b a4 24 c8 00 00 00 	mov	r12, qword ptr [rsp + 200]
 101fd8b:	4c 89 db 	mov	rbx, r11
 101fd8e:	48 8b b4 24 a0 00 00 00 	mov	rsi, qword ptr [rsp + 160]
 101fd96:	48 8b bc 24 90 00 00 00 	mov	rdi, qword ptr [rsp + 144]
 101fd9e:	4d 89 e0 	mov	r8, r12
 101fda1:	49 89 d1 	mov	r9, rdx
 101fda4:	48 39 d8 	cmp	rax, rbx
 101fda7:	77 5a 	ja	90 <_runtime.(*pageAlloc).update+0x163>
 101fda9:	48 89 c2 	mov	rdx, rax
 101fdac:	48 c1 e8 0d 	shr	rax, 13
 101fdb0:	48 3d 00 20 00 00 	cmp	rax, 8192
 101fdb6:	0f 83 7c 04 00 00 	jae	1148 <_runtime.(*pageAlloc).update+0x598>
 101fdbc:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 101fdc4:	49 8b 44 c0 78 	mov	rax, qword ptr [r8 + 8*rax + 120]
 101fdc9:	84 00 	test	byte ptr [rax], al
 101fdcb:	48 81 e2 ff 1f 00 00 	and	rdx, 8191
 101fdd2:	48 c1 e2 07 	shl	rdx, 7
 101fdd6:	48 8d 04 10 	lea	rax, [rax + rdx]
 101fdda:	48 89 04 24 	mov	qword ptr [rsp], rax
 101fdde:	e8 ad 2f 00 00 	call	12205 <_runtime.(*pallocBits).summarize>
 101fde3:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 101fde8:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 101fdf0:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 101fdf5:	48 39 d1 	cmp	rcx, rdx
 101fdf8:	0f 82 6d ff ff ff 	jb	-147 <_runtime.(*pageAlloc).update+0xcb>
 101fdfe:	e9 2a 04 00 00 	jmp	1066 <_runtime.(*pageAlloc).update+0x58d>
 101fe03:	b8 03 00 00 00 	mov	eax, 3
 101fe08:	b9 01 00 00 00 	mov	ecx, 1
 101fe0d:	e9 3d 01 00 00 	jmp	317 <_runtime.(*pageAlloc).update+0x2af>
 101fe12:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 101fe17:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 101fe1c:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 101fe21:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 101fe26:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 101fe2b:	48 8d 1d ae b4 0a 00 	lea	rbx, [rip + 701614]
 101fe32:	48 89 cf 	mov	rdi, rcx
 101fe35:	49 89 d0 	mov	r8, rdx
 101fe38:	4c 8d 15 21 b4 0a 00 	lea	r10, [rip + 701473]
 101fe3f:	4d 89 cb 	mov	r11, r9
 101fe42:	4c 8d 25 57 b4 0a 00 	lea	r12, [rip + 701527]
 101fe49:	49 89 f5 	mov	r13, rsi
 101fe4c:	4c 8b b4 24 a0 00 00 00 	mov	r14, qword ptr [rsp + 160]
 101fe54:	4c 8b bc 24 90 00 00 00 	mov	r15, qword ptr [rsp + 144]
 101fe5c:	89 c1 	mov	ecx, eax
 101fe5e:	48 8b 74 24 78 	mov	rsi, qword ptr [rsp + 120]
 101fe63:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 101fe68:	48 39 fe 	cmp	rsi, rdi
 101fe6b:	0f 8d d5 00 00 00 	jge	213 <_runtime.(*pageAlloc).update+0x2a6>
 101fe71:	48 89 74 24 60 	mov	qword ptr [rsp + 96], rsi
 101fe76:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 101fe7a:	41 84 00 	test	byte ptr [r8], al
 101fe7d:	49 83 fb 40 	cmp	r11, 64
 101fe81:	4d 19 c9 	sbb	r9, r9
 101fe84:	4c 8d 3c 40 	lea	r15, [rax + 2*rax]
 101fe88:	4f 8b 74 f8 28 	mov	r14, qword ptr [r8 + 8*r15 + 40]
 101fe8d:	4f 8b 64 f8 18 	mov	r12, qword ptr [r8 + 8*r15 + 24]
 101fe92:	4c 89 d9 	mov	rcx, r11
 101fe95:	48 d3 e6 	shl	rsi, cl
 101fe98:	4c 21 ce 	and	rsi, r9
 101fe9b:	4c 8b 54 24 60 	mov	r10, qword ptr [rsp + 96]
 101fea0:	49 8d 5a 01 	lea	rbx, [r10 + 1]
 101fea4:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 101fea9:	48 d3 e3 	shl	rbx, cl
 101feac:	4c 21 cb 	and	rbx, r9
 101feaf:	4c 39 f3 	cmp	rbx, r14
 101feb2:	0f 87 6a 03 00 00 	ja	874 <_runtime.(*pageAlloc).update+0x582>
 101feb8:	48 39 de 	cmp	rsi, rbx
 101febb:	0f 87 56 03 00 00 	ja	854 <_runtime.(*pageAlloc).update+0x577>
 101fec1:	4c 89 7c 24 70 	mov	qword ptr [rsp + 112], r15
 101fec6:	49 29 f6 	sub	r14, rsi
 101fec9:	4c 89 f0 	mov	rax, r14
 101fecc:	49 f7 de 	neg	r14
 101fecf:	49 c1 fe 3f 	sar	r14, 63
 101fed3:	48 89 f1 	mov	rcx, rsi
 101fed6:	48 c1 e6 03 	shl	rsi, 3
 101feda:	4c 21 f6 	and	rsi, r14
 101fedd:	49 8d 14 34 	lea	rdx, [r12 + rsi]
 101fee1:	48 89 14 24 	mov	qword ptr [rsp], rdx
 101fee5:	48 29 cb 	sub	rbx, rcx
 101fee8:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 101feed:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 101fef2:	4c 89 6c 24 18 	mov	qword ptr [rsp + 24], r13
 101fef7:	e8 c4 1a 00 00 	call	6852 <_runtime.mergeSummaries>
 101fefc:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 101ff01:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 101ff06:	48 8b 94 24 c8 00 00 00 	mov	rdx, qword ptr [rsp + 200]
 101ff0e:	48 8b 5c ca 08 	mov	rbx, qword ptr [rdx + 8*rcx + 8]
 101ff13:	48 8b 0c ca 	mov	rcx, qword ptr [rdx + 8*rcx]
 101ff17:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 101ff1c:	48 39 de 	cmp	rsi, rbx
 101ff1f:	0f 83 e7 02 00 00 	jae	743 <_runtime.(*pageAlloc).update+0x56c>
 101ff25:	48 8b 1c f1 	mov	rbx, qword ptr [rcx + 8*rsi]
 101ff29:	48 39 c3 	cmp	rbx, rax
 101ff2c:	74 0e 	je	14 <_runtime.(*pageAlloc).update+0x29c>
 101ff2e:	48 89 04 f1 	mov	qword ptr [rcx + 8*rsi], rax
 101ff32:	b8 01 00 00 00 	mov	eax, 1
 101ff37:	e9 d6 fe ff ff 	jmp	-298 <_runtime.(*pageAlloc).update+0x172>
 101ff3c:	0f b6 44 24 2f 	movzx	eax, byte ptr [rsp + 47]
 101ff41:	e9 cc fe ff ff 	jmp	-308 <_runtime.(*pageAlloc).update+0x172>
 101ff46:	48 ff c8 	dec	rax
 101ff49:	4c 89 f6 	mov	rsi, r14
 101ff4c:	4c 89 ff 	mov	rdi, r15
 101ff4f:	48 85 c0 	test	rax, rax
 101ff52:	7c 5f 	jl	95 <_runtime.(*pageAlloc).update+0x313>
 101ff54:	84 c9 	test	cl, cl
 101ff56:	74 5b 	je	91 <_runtime.(*pageAlloc).update+0x313>
 101ff58:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 101ff5d:	48 8d 1d 7c b3 0a 00 	lea	rbx, [rip + 701308]
 101ff64:	48 8b 0c c3 	mov	rcx, qword ptr [rbx + 8*rax]
 101ff68:	48 83 f9 40 	cmp	rcx, 64
 101ff6c:	4d 19 c9 	sbb	r9, r9
 101ff6f:	4c 8d 15 ea b2 0a 00 	lea	r10, [rip + 701162]
 101ff76:	4d 8b 5c c2 08 	mov	r11, qword ptr [r10 + 8*rax + 8]
 101ff7b:	4c 89 5c 24 50 	mov	qword ptr [rsp + 80], r11
 101ff80:	4c 8d 25 19 b3 0a 00 	lea	r12, [rip + 701209]
 101ff87:	4d 8b 6c c4 08 	mov	r13, qword ptr [r12 + 8*rax + 8]
 101ff8c:	4c 89 6c 24 48 	mov	qword ptr [rsp + 72], r13
 101ff91:	90 	nop
 101ff92:	49 89 f6 	mov	r14, rsi
 101ff95:	48 d3 ee 	shr	rsi, cl
 101ff98:	4c 21 ce 	and	rsi, r9
 101ff9b:	49 89 ff 	mov	r15, rdi
 101ff9e:	48 d3 ef 	shr	rdi, cl
 101ffa1:	4c 21 cf 	and	rdi, r9
 101ffa4:	48 ff c7 	inc	rdi
 101ffa7:	48 89 7c 24 68 	mov	qword ptr [rsp + 104], rdi
 101ffac:	31 c9 	xor	ecx, ecx
 101ffae:	e9 b5 fe ff ff 	jmp	-331 <_runtime.(*pageAlloc).update+0x1c8>
 101ffb3:	48 8b ac 24 b8 00 00 00 	mov	rbp, qword ptr [rsp + 184]
 101ffbb:	48 81 c4 c0 00 00 00 	add	rsp, 192
 101ffc2:	c3 	ret
 101ffc3:	48 8b 94 24 c8 00 00 00 	mov	rdx, qword ptr [rsp + 200]
 101ffcb:	4c 8b 42 68 	mov	r8, qword ptr [rdx + 104]
 101ffcf:	4c 8b 4a 60 	mov	r9, qword ptr [rdx + 96]
 101ffd3:	48 c1 ee 23 	shr	rsi, 35
 101ffd7:	48 81 fe 00 20 00 00 	cmp	rsi, 8192
 101ffde:	0f 83 91 02 00 00 	jae	657 <_runtime.(*pageAlloc).update+0x5d5>
 101ffe4:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 101ffe9:	4c 89 8c 24 b0 00 00 00 	mov	qword ptr [rsp + 176], r9
 101fff1:	48 8b 4c f2 78 	mov	rcx, qword ptr [rdx + 8*rsi + 120]
 101fff6:	84 01 	test	byte ptr [rcx], al
 101fff8:	48 25 ff 1f 00 00 	and	rax, 8191
 101fffe:	48 c1 e0 07 	shl	rax, 7
 1020002:	48 8d 04 01 	lea	rax, [rcx + rax]
 1020006:	48 89 04 24 	mov	qword ptr [rsp], rax
 102000a:	e8 81 2d 00 00 	call	11649 <_runtime.(*pallocBits).summarize>
 102000f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1020014:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 102001c:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1020021:	48 39 d1 	cmp	rcx, rdx
 1020024:	0f 83 40 02 00 00 	jae	576 <_runtime.(*pageAlloc).update+0x5ca>
 102002a:	48 8b 9c 24 b0 00 00 00 	mov	rbx, qword ptr [rsp + 176]
 1020032:	48 89 04 cb 	mov	qword ptr [rbx + 8*rcx], rax
 1020036:	48 8b b4 24 c8 00 00 00 	mov	rsi, qword ptr [rsp + 200]
 102003e:	48 8b 7e 70 	mov	rdi, qword ptr [rsi + 112]
 1020042:	4c 8b 46 60 	mov	r8, qword ptr [rsi + 96]
 1020046:	4c 8b 8c 24 88 00 00 00 	mov	r9, qword ptr [rsp + 136]
 102004e:	49 39 f9 	cmp	r9, rdi
 1020051:	0f 87 08 02 00 00 	ja	520 <_runtime.(*pageAlloc).update+0x5bf>
 1020057:	48 8d 41 01 	lea	rax, [rcx + 1]
 102005b:	4c 39 c8 	cmp	rax, r9
 102005e:	0f 87 f3 01 00 00 	ja	499 <_runtime.(*pageAlloc).update+0x5b7>
 1020064:	4d 89 ca 	mov	r10, r9
 1020067:	49 29 c1 	sub	r9, rax
 102006a:	49 89 c3 	mov	r11, rax
 102006d:	48 29 f8 	sub	rax, rdi
 1020070:	48 c1 f8 3f 	sar	rax, 63
 1020074:	49 c1 e3 03 	shl	r11, 3
 1020078:	49 21 c3 	and	r11, rax
 102007b:	4b 8d 3c 03 	lea	rdi, [r11 + r8]
 102007f:	44 0f b6 84 24 e1 00 00 00 	movzx	r8d, byte ptr [rsp + 225]
 1020088:	45 84 c0 	test	r8b, r8b
 102008b:	0f 85 95 00 00 00 	jne	149 <_runtime.(*pageAlloc).update+0x486>
 1020091:	31 c0 	xor	eax, eax
 1020093:	eb 11 	jmp	17 <_runtime.(*pageAlloc).update+0x406>
 1020095:	49 b8 00 02 00 40 00 00 08 00 	movabs	r8, 2251800887427584
 102009f:	4c 89 04 c7 	mov	qword ptr [rdi + 8*rax], r8
 10200a3:	48 ff c0 	inc	rax
 10200a6:	4c 39 c8 	cmp	rax, r9
 10200a9:	7c ea 	jl	-22 <_runtime.(*pageAlloc).update+0x3f5>
 10200ab:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10200b3:	48 c1 e8 23 	shr	rax, 35
 10200b7:	48 3d 00 20 00 00 	cmp	rax, 8192
 10200bd:	0f 83 8a 01 00 00 	jae	394 <_runtime.(*pageAlloc).update+0x5ad>
 10200c3:	48 8b 44 c6 78 	mov	rax, qword ptr [rsi + 8*rax + 120]
 10200c8:	84 00 	test	byte ptr [rax], al
 10200ca:	49 81 e2 ff 1f 00 00 	and	r10, 8191
 10200d1:	49 c1 e2 07 	shl	r10, 7
 10200d5:	4a 8d 04 10 	lea	rax, [rax + r10]
 10200d9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10200dd:	e8 ae 2c 00 00 	call	11438 <_runtime.(*pallocBits).summarize>
 10200e2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10200e7:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 10200ef:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10200f4:	48 39 d1 	cmp	rcx, rdx
 10200f7:	0f 83 45 01 00 00 	jae	325 <_runtime.(*pageAlloc).update+0x5a2>
 10200fd:	48 8b 9c 24 b0 00 00 00 	mov	rbx, qword ptr [rsp + 176]
 1020105:	48 89 04 cb 	mov	qword ptr [rbx + 8*rcx], rax
 1020109:	48 8b b4 24 a0 00 00 00 	mov	rsi, qword ptr [rsp + 160]
 1020111:	48 8b bc 24 90 00 00 00 	mov	rdi, qword ptr [rsp + 144]
 1020119:	4c 8b 84 24 c8 00 00 00 	mov	r8, qword ptr [rsp + 200]
 1020121:	e9 dd fc ff ff 	jmp	-803 <_runtime.(*pageAlloc).update+0x163>
 1020126:	4d 85 c9 	test	r9, r9
 1020129:	74 80 	je	-128 <_runtime.(*pageAlloc).update+0x40b>
 102012b:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 102012f:	49 c1 e1 03 	shl	r9, 3
 1020133:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 1020138:	e8 83 37 03 00 	call	210819 <_runtime.memclrNoHeapPointers>
 102013d:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1020142:	48 8b 9c 24 b0 00 00 00 	mov	rbx, qword ptr [rsp + 176]
 102014a:	48 8b b4 24 c8 00 00 00 	mov	rsi, qword ptr [rsp + 200]
 1020152:	4c 8b 94 24 88 00 00 00 	mov	r10, qword ptr [rsp + 136]
 102015a:	e9 4c ff ff ff 	jmp	-180 <_runtime.(*pageAlloc).update+0x40b>
 102015f:	48 8b 94 24 c8 00 00 00 	mov	rdx, qword ptr [rsp + 200]
 1020167:	48 8b 5a 60 	mov	rbx, qword ptr [rdx + 96]
 102016b:	48 8b 4a 68 	mov	rcx, qword ptr [rdx + 104]
 102016f:	48 39 c8 	cmp	rax, rcx
 1020172:	0f 83 1f 01 00 00 	jae	287 <_runtime.(*pageAlloc).update+0x5f7>
 1020178:	48 8b 1c c3 	mov	rbx, qword ptr [rbx + 8*rax]
 102017c:	48 c1 ee 23 	shr	rsi, 35
 1020180:	48 81 fe 00 20 00 00 	cmp	rsi, 8192
 1020187:	0f 83 fd 00 00 00 	jae	253 <_runtime.(*pageAlloc).update+0x5ea>
 102018d:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1020192:	48 8b 4c f2 78 	mov	rcx, qword ptr [rdx + 8*rsi + 120]
 1020197:	84 01 	test	byte ptr [rcx], al
 1020199:	48 25 ff 1f 00 00 	and	rax, 8191
 102019f:	48 c1 e0 07 	shl	rax, 7
 10201a3:	48 8d 04 01 	lea	rax, [rcx + rax]
 10201a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10201ab:	e8 e0 2b 00 00 	call	11232 <_runtime.(*pallocBits).summarize>
 10201b0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10201b5:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10201ba:	48 39 c1 	cmp	rcx, rax
 10201bd:	74 3d 	je	61 <_runtime.(*pageAlloc).update+0x55c>
 10201bf:	48 8b 9c 24 c8 00 00 00 	mov	rbx, qword ptr [rsp + 200]
 10201c7:	48 8b 4b 68 	mov	rcx, qword ptr [rbx + 104]
 10201cb:	48 8b 73 60 	mov	rsi, qword ptr [rbx + 96]
 10201cf:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 10201d7:	48 39 cf 	cmp	rdi, rcx
 10201da:	0f 83 a2 00 00 00 	jae	162 <_runtime.(*pageAlloc).update+0x5e2>
 10201e0:	48 89 04 fe 	mov	qword ptr [rsi + 8*rdi], rax
 10201e4:	48 8b b4 24 a0 00 00 00 	mov	rsi, qword ptr [rsp + 160]
 10201ec:	48 8b bc 24 90 00 00 00 	mov	rdi, qword ptr [rsp + 144]
 10201f4:	49 89 d8 	mov	r8, rbx
 10201f7:	e9 07 fc ff ff 	jmp	-1017 <_runtime.(*pageAlloc).update+0x163>
 10201fc:	48 8b ac 24 b8 00 00 00 	mov	rbp, qword ptr [rsp + 184]
 1020204:	48 81 c4 c0 00 00 00 	add	rsp, 192
 102020b:	c3 	ret
 102020c:	48 89 f0 	mov	rax, rsi
 102020f:	48 89 d9 	mov	rcx, rbx
 1020212:	e8 39 31 03 00 	call	209209 <_runtime.panicIndex>
 1020217:	48 89 f0 	mov	rax, rsi
 102021a:	48 89 d9 	mov	rcx, rbx
 102021d:	e8 8e 31 03 00 	call	209294 <_runtime.panicSliceB>
 1020222:	48 89 d9 	mov	rcx, rbx
 1020225:	4c 89 f2 	mov	rdx, r14
 1020228:	e8 63 31 03 00 	call	209251 <_runtime.panicSliceAcap>
 102022d:	48 89 c8 	mov	rax, rcx
 1020230:	48 89 d1 	mov	rcx, rdx
 1020233:	e8 28 31 03 00 	call	209192 <_runtime.panicIndexU>
 1020238:	b9 00 20 00 00 	mov	ecx, 8192
 102023d:	e8 1e 31 03 00 	call	209182 <_runtime.panicIndexU>
 1020242:	48 89 c8 	mov	rax, rcx
 1020245:	48 89 d1 	mov	rcx, rdx
 1020248:	e8 13 31 03 00 	call	209171 <_runtime.panicIndexU>
 102024d:	b9 00 20 00 00 	mov	ecx, 8192
 1020252:	e8 09 31 03 00 	call	209161 <_runtime.panicIndexU>
 1020257:	4c 89 c9 	mov	rcx, r9
 102025a:	e8 61 31 03 00 	call	209249 <_runtime.panicSliceBU>
 102025f:	4c 89 c9 	mov	rcx, r9
 1020262:	48 89 fa 	mov	rdx, rdi
 1020265:	e8 36 31 03 00 	call	209206 <_runtime.panicSliceAcapU>
 102026a:	48 89 c8 	mov	rax, rcx
 102026d:	48 89 d1 	mov	rcx, rdx
 1020270:	e8 eb 30 03 00 	call	209131 <_runtime.panicIndexU>
 1020275:	48 89 f0 	mov	rax, rsi
 1020278:	b9 00 20 00 00 	mov	ecx, 8192
 102027d:	e8 de 30 03 00 	call	209118 <_runtime.panicIndexU>
 1020282:	48 89 f8 	mov	rax, rdi
 1020285:	e8 d6 30 03 00 	call	209110 <_runtime.panicIndexU>
 102028a:	48 89 f0 	mov	rax, rsi
 102028d:	b9 00 20 00 00 	mov	ecx, 8192
 1020292:	e8 c9 30 03 00 	call	209097 <_runtime.panicIndexU>
 1020297:	e8 c4 30 03 00 	call	209092 <_runtime.panicIndexU>
 102029c:	90 	nop
 102029d:	e8 2e 09 03 00 	call	198958 <_runtime.morestack_noctxt>
 10202a2:	e9 f9 f9 ff ff 	jmp	-1543 <_runtime.(*pageAlloc).update>
 10202a7:	cc 	int3
 10202a8:	cc 	int3
 10202a9:	cc 	int3
 10202aa:	cc 	int3
 10202ab:	cc 	int3
 10202ac:	cc 	int3
 10202ad:	cc 	int3
 10202ae:	cc 	int3
 10202af:	cc 	int3

_runtime.(*pageAlloc).allocRange:
 10202b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10202b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10202bd:	0f 86 ac 03 00 00 	jbe	940 <_runtime.(*pageAlloc).allocRange+0x3bf>
 10202c3:	48 83 c4 80 	add	rsp, -128
 10202c7:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 10202cc:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 10202d1:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 10202d9:	48 c1 e2 0d 	shl	rdx, 13
 10202dd:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 10202e5:	48 8d 3c 16 	lea	rdi, [rsi + rdx]
 10202e9:	48 8d 14 16 	lea	rdx, [rsi + rdx]
 10202ed:	48 8d 52 ff 	lea	rdx, [rdx - 1]
 10202f1:	90 	nop
 10202f2:	90 	nop
 10202f3:	90 	nop
 10202f4:	90 	nop
 10202f5:	49 b8 00 00 00 00 00 80 00 00 	movabs	r8, 140737488355328
 10202ff:	49 8d 04 30 	lea	rax, [r8 + rsi]
 1020303:	49 89 c0 	mov	r8, rax
 1020306:	48 c1 e8 16 	shr	rax, 22
 102030a:	49 b9 ff ff ff ff ff 7f 00 00 	movabs	r9, 140737488355327
 1020314:	4c 01 cf 	add	rdi, r9
 1020317:	49 89 f9 	mov	r9, rdi
 102031a:	48 c1 ef 16 	shr	rdi, 22
 102031e:	48 81 e6 ff ff 3f 00 	and	rsi, 4194303
 1020325:	48 c1 ee 0d 	shr	rsi, 13
 1020329:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 102032e:	48 81 e2 ff ff 3f 00 	and	rdx, 4194303
 1020335:	48 c1 ea 0d 	shr	rdx, 13
 1020339:	48 39 f8 	cmp	rax, rdi
 102033c:	0f 84 63 02 00 00 	je	611 <_runtime.(*pageAlloc).allocRange+0x2f5>
 1020342:	4c 8b 9c 24 88 00 00 00 	mov	r11, qword ptr [rsp + 136]
 102034a:	41 84 03 	test	byte ptr [r11], al
 102034d:	90 	nop
 102034e:	49 c1 e8 23 	shr	r8, 35
 1020352:	49 81 f8 00 20 00 00 	cmp	r8, 8192
 1020359:	0f 83 f5 02 00 00 	jae	757 <_runtime.(*pageAlloc).allocRange+0x3a4>
 102035f:	4c 89 4c 24 60 	mov	qword ptr [rsp + 96], r9
 1020364:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 1020369:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 102036e:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1020373:	4b 8b 4c c3 78 	mov	rcx, qword ptr [r11 + 8*r8 + 120]
 1020378:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 102037d:	84 01 	test	byte ptr [rcx], al
 102037f:	48 25 ff 1f 00 00 	and	rax, 8191
 1020385:	48 c1 e0 07 	shl	rax, 7
 1020389:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 102038e:	48 8d 1c 01 	lea	rbx, [rcx + rax]
 1020392:	48 8d 5b 40 	lea	rbx, [rbx + 64]
 1020396:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102039a:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 102039f:	48 8d 9e 00 fe ff ff 	lea	rbx, [rsi - 512]
 10203a6:	48 f7 db 	neg	rbx
 10203a9:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 10203ae:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 10203b3:	e8 28 27 00 00 	call	10024 <_runtime.(*pageBits).popcntRange>
 10203b8:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10203bd:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10203c2:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10203c7:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 10203cc:	48 01 d1 	add	rcx, rdx
 10203cf:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10203d3:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 10203d8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10203dd:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10203e2:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10203e7:	e8 c4 31 00 00 	call	12740 <_runtime.(*pallocData).allocRange>
 10203ec:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10203f1:	48 ff c0 	inc	rax
 10203f4:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10203f9:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1020401:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1020406:	e9 87 00 00 00 	jmp	135 <_runtime.(*pageAlloc).allocRange+0x1e2>
 102040b:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 1020410:	48 8b 44 c2 78 	mov	rax, qword ptr [rdx + 8*rax + 120]
 1020415:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 102041a:	84 00 	test	byte ptr [rax], al
 102041c:	48 81 e6 ff 1f 00 00 	and	rsi, 8191
 1020423:	48 c1 e6 07 	shl	rsi, 7
 1020427:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 102042c:	48 8d 1c 30 	lea	rbx, [rax + rsi]
 1020430:	48 8d 5b 40 	lea	rbx, [rbx + 64]
 1020434:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1020438:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1020441:	48 c7 44 24 10 00 02 00 00 	mov	qword ptr [rsp + 16], 512
 102044a:	e8 91 26 00 00 	call	9873 <_runtime.(*pageBits).popcntRange>
 102044f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1020454:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1020459:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102045e:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1020463:	48 01 d1 	add	rcx, rdx
 1020466:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102046a:	e8 c1 31 00 00 	call	12737 <_runtime.(*pallocData).allocAll>
 102046f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1020474:	48 ff c0 	inc	rax
 1020477:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102047c:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1020481:	48 8d 1c 0a 	lea	rbx, [rdx + rcx]
 1020485:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 102048a:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1020492:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1020497:	48 39 c8 	cmp	rax, rcx
 102049a:	73 19 	jae	25 <_runtime.(*pageAlloc).allocRange+0x205>
 102049c:	90 	nop
 102049d:	48 89 c6 	mov	rsi, rax
 10204a0:	48 c1 e8 0d 	shr	rax, 13
 10204a4:	48 3d 00 20 00 00 	cmp	rax, 8192
 10204aa:	0f 82 5b ff ff ff 	jb	-165 <_runtime.(*pageAlloc).allocRange+0x15b>
 10204b0:	e9 95 01 00 00 	jmp	405 <_runtime.(*pageAlloc).allocRange+0x39a>
 10204b5:	90 	nop
 10204b6:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10204bb:	48 c1 e8 23 	shr	rax, 35
 10204bf:	48 3d 00 20 00 00 	cmp	rax, 8192
 10204c5:	0f 83 75 01 00 00 	jae	373 <_runtime.(*pageAlloc).allocRange+0x390>
 10204cb:	48 8b 44 c2 78 	mov	rax, qword ptr [rdx + 8*rax + 120]
 10204d0:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 10204d5:	84 00 	test	byte ptr [rax], al
 10204d7:	48 81 e1 ff 1f 00 00 	and	rcx, 8191
 10204de:	48 c1 e1 07 	shl	rcx, 7
 10204e2:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10204e7:	48 8d 1c 08 	lea	rbx, [rax + rcx]
 10204eb:	48 8d 5b 40 	lea	rbx, [rbx + 64]
 10204ef:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10204f3:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10204fc:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1020501:	48 ff c3 	inc	rbx
 1020504:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 1020509:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 102050e:	e8 cd 25 00 00 	call	9677 <_runtime.(*pageBits).popcntRange>
 1020513:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1020518:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102051d:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1020522:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1020527:	48 01 d1 	add	rcx, rdx
 102052a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102052e:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1020537:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102053c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1020541:	e8 6a 30 00 00 	call	12394 <_runtime.(*pallocData).allocRange>
 1020546:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102054b:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1020550:	48 01 c8 	add	rax, rcx
 1020553:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1020558:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1020560:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1020564:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 102056c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1020571:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 1020579:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102057e:	66 c7 44 24 18 01 01 	mov	word ptr [rsp + 24], 257
 1020585:	e8 16 f7 ff ff 	call	-2282 <_runtime.(*pageAlloc).update>
 102058a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102058f:	48 c1 e0 0d 	shl	rax, 13
 1020593:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 102059b:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 10205a0:	48 83 ec 80 	sub	rsp, -128
 10205a4:	c3 	ret
 10205a5:	48 8b bc 24 88 00 00 00 	mov	rdi, qword ptr [rsp + 136]
 10205ad:	84 07 	test	byte ptr [rdi], al
 10205af:	90 	nop
 10205b0:	49 c1 e8 23 	shr	r8, 35
 10205b4:	49 81 f8 00 20 00 00 	cmp	r8, 8192
 10205bb:	0f 83 a0 00 00 00 	jae	160 <_runtime.(*pageAlloc).allocRange+0x3b1>
 10205c1:	4a 8b 4c c7 78 	mov	rcx, qword ptr [rdi + 8*r8 + 120]
 10205c6:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 10205cb:	84 01 	test	byte ptr [rcx], al
 10205cd:	48 25 ff 1f 00 00 	and	rax, 8191
 10205d3:	48 c1 e0 07 	shl	rax, 7
 10205d7:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10205dc:	48 8d 1c 01 	lea	rbx, [rcx + rax]
 10205e0:	48 8d 5b 40 	lea	rbx, [rbx + 64]
 10205e4:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10205e8:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 10205ed:	48 ff c2 	inc	rdx
 10205f0:	48 29 f2 	sub	rdx, rsi
 10205f3:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 10205f8:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10205fd:	e8 de 24 00 00 	call	9438 <_runtime.(*pageBits).popcntRange>
 1020602:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1020607:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102060c:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1020611:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1020616:	48 01 d1 	add	rcx, rdx
 1020619:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102061d:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1020622:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1020627:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102062c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1020631:	e8 7a 2f 00 00 	call	12154 <_runtime.(*pallocData).allocRange>
 1020636:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102063b:	e9 13 ff ff ff 	jmp	-237 <_runtime.(*pageAlloc).allocRange+0x2a3>
 1020640:	b9 00 20 00 00 	mov	ecx, 8192
 1020645:	e8 16 2d 03 00 	call	208150 <_runtime.panicIndexU>
 102064a:	b9 00 20 00 00 	mov	ecx, 8192
 102064f:	e8 0c 2d 03 00 	call	208140 <_runtime.panicIndexU>
 1020654:	4c 89 c0 	mov	rax, r8
 1020657:	b9 00 20 00 00 	mov	ecx, 8192
 102065c:	e8 ff 2c 03 00 	call	208127 <_runtime.panicIndexU>
 1020661:	4c 89 c0 	mov	rax, r8
 1020664:	b9 00 20 00 00 	mov	ecx, 8192
 1020669:	e8 f2 2c 03 00 	call	208114 <_runtime.panicIndexU>
 102066e:	90 	nop
 102066f:	e8 5c 05 03 00 	call	197980 <_runtime.morestack_noctxt>
 1020674:	e9 37 fc ff ff 	jmp	-969 <_runtime.(*pageAlloc).allocRange>
 1020679:	cc 	int3
 102067a:	cc 	int3
 102067b:	cc 	int3
 102067c:	cc 	int3
 102067d:	cc 	int3
 102067e:	cc 	int3
 102067f:	cc 	int3

_runtime.(*pageAlloc).find:
 1020680:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1020689:	48 8d 84 24 58 ff ff ff 	lea	rax, [rsp - 168]
 1020691:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1020695:	0f 86 d0 0c 00 00 	jbe	3280 <_runtime.(*pageAlloc).find+0xceb>
 102069b:	48 81 ec 28 01 00 00 	sub	rsp, 296
 10206a2:	48 89 ac 24 20 01 00 00 	mov	qword ptr [rsp + 288], rbp
 10206aa:	48 8d ac 24 20 01 00 00 	lea	rbp, [rsp + 288]
 10206b2:	0f 57 c0 	xorps	xmm0, xmm0
 10206b5:	0f 11 84 24 f8 00 00 00 	movups	xmmword ptr [rsp + 248], xmm0
 10206bd:	48 c7 84 24 f8 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 248], 0
 10206c9:	48 bb ff ff ff ff ff ff 00 00 	movabs	rbx, 281474976710655
 10206d3:	48 89 9c 24 00 01 00 00 	mov	qword ptr [rsp + 256], rbx
 10206db:	0f 11 84 24 10 01 00 00 	movups	xmmword ptr [rsp + 272], xmm0
 10206e3:	48 8d 1d 36 e5 02 00 	lea	rbx, [rip + 189750]
 10206ea:	48 89 9c 24 10 01 00 00 	mov	qword ptr [rsp + 272], rbx
 10206f2:	48 8d 9c 24 f8 00 00 00 	lea	rbx, [rsp + 248]
 10206fa:	48 89 9c 24 18 01 00 00 	mov	qword ptr [rsp + 280], rbx
 1020702:	48 8b 9c 24 30 01 00 00 	mov	rbx, qword ptr [rsp + 304]
 102070a:	31 c0 	xor	eax, eax
 102070c:	31 c9 	xor	ecx, ecx
 102070e:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 1020715:	31 f6 	xor	esi, esi
 1020717:	e9 74 02 00 00 	jmp	628 <_runtime.(*pageAlloc).find+0x310>
 102071c:	49 ff c3 	inc	r11
 102071f:	4c 89 4c 24 70 	mov	qword ptr [rsp + 112], r9
 1020724:	4c 8b 8c 24 a8 00 00 00 	mov	r9, qword ptr [rsp + 168]
 102072c:	49 39 cb 	cmp	r11, rcx
 102072f:	0f 8d f0 08 00 00 	jge	2288 <_runtime.(*pageAlloc).find+0x9a5>
 1020735:	0f 83 17 0c 00 00 	jae	3095 <_runtime.(*pageAlloc).find+0xcd2>
 102073b:	4f 8b 0c d8 	mov	r9, qword ptr [r8 + 8*r11]
 102073f:	4d 85 c9 	test	r9, r9
 1020742:	75 05 	jne	5 <_runtime.(*pageAlloc).find+0xc9>
 1020744:	45 31 c9 	xor	r9d, r9d
 1020747:	eb d3 	jmp	-45 <_runtime.(*pageAlloc).find+0x9c>
 1020749:	4c 89 9c 24 e8 00 00 00 	mov	qword ptr [rsp + 232], r11
 1020751:	4c 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], r9
 1020759:	49 8b 0c c6 	mov	rcx, qword ptr [r14 + 8*rax]
 102075d:	48 83 f9 40 	cmp	rcx, 64
 1020761:	48 19 db 	sbb	rbx, rbx
 1020764:	4b 8d 34 3b 	lea	rsi, [r11 + r15]
 1020768:	48 89 b4 24 e0 00 00 00 	mov	qword ptr [rsp + 224], rsi
 1020770:	48 d3 e6 	shl	rsi, cl
 1020773:	48 21 de 	and	rsi, rbx
 1020776:	48 89 34 24 	mov	qword ptr [rsp], rsi
 102077a:	49 83 fd 40 	cmp	r13, 64
 102077e:	48 19 db 	sbb	rbx, rbx
 1020781:	4c 89 e9 	mov	rcx, r13
 1020784:	be 01 00 00 00 	mov	esi, 1
 1020789:	48 d3 e6 	shl	rsi, cl
 102078c:	48 21 de 	and	rsi, rbx
 102078f:	48 c1 e6 0d 	shl	rsi, 13
 1020793:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1020798:	48 8b 9c 24 10 01 00 00 	mov	rbx, qword ptr [rsp + 272]
 10207a0:	48 8d 94 24 10 01 00 00 	lea	rdx, [rsp + 272]
 10207a8:	ff d3 	call	rbx
 10207aa:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10207b2:	48 89 c3 	mov	rbx, rax
 10207b5:	48 25 ff ff 1f 00 	and	rax, 2097151
 10207bb:	48 be 00 00 00 00 00 00 00 80 	movabs	rsi, -9223372036854775808
 10207c5:	48 85 f3 	test	rbx, rsi
 10207c8:	bf 00 00 20 00 	mov	edi, 2097152
 10207cd:	48 0f 45 c7 	cmovne	rax, rdi
 10207d1:	4c 8b 44 24 70 	mov	r8, qword ptr [rsp + 112]
 10207d6:	4d 8d 0c 00 	lea	r9, [r8 + rax]
 10207da:	4c 8b 94 24 38 01 00 00 	mov	r10, qword ptr [rsp + 312]
 10207e2:	4d 39 d1 	cmp	r9, r10
 10207e5:	0f 83 e5 02 00 00 	jae	741 <_runtime.(*pageAlloc).find+0x450>
 10207eb:	48 0f ba e3 3f 	bt	rbx, 63
 10207f0:	0f 83 c7 02 00 00 	jae	711 <_runtime.(*pageAlloc).find+0x43d>
 10207f6:	b9 00 00 20 00 	mov	ecx, 2097152
 10207fb:	4c 39 d1 	cmp	rcx, r10
 10207fe:	0f 83 5f 01 00 00 	jae	351 <_runtime.(*pageAlloc).find+0x2e3>
 1020804:	4d 85 c0 	test	r8, r8
 1020807:	0f 85 bf 00 00 00 	jne	191 <_runtime.(*pageAlloc).find+0x24c>
 102080d:	48 0f ba e3 3f 	bt	rbx, 63
 1020812:	0f 83 95 00 00 00 	jae	149 <_runtime.(*pageAlloc).find+0x22d>
 1020818:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1020820:	48 83 f9 40 	cmp	rcx, 64
 1020824:	b8 00 00 20 00 	mov	eax, 2097152
 1020829:	48 19 d2 	sbb	rdx, rdx
 102082c:	4c 8b 9c 24 e8 00 00 00 	mov	r11, qword ptr [rsp + 232]
 1020834:	49 8d 5b 01 	lea	rbx, [r11 + 1]
 1020838:	48 d3 e3 	shl	rbx, cl
 102083b:	48 21 d3 	and	rbx, rdx
 102083e:	48 29 c3 	sub	rbx, rax
 1020841:	48 8b 8c 24 f0 00 00 00 	mov	rcx, qword ptr [rsp + 240]
 1020849:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1020851:	48 8b 74 24 78 	mov	rsi, qword ptr [rsp + 120]
 1020856:	48 8d 3d 03 aa 0a 00 	lea	rdi, [rip + 698883]
 102085d:	4c 8b 84 24 08 01 00 00 	mov	r8, qword ptr [rsp + 264]
 1020865:	49 ba 00 00 00 00 00 80 00 00 	movabs	r10, 140737488355328
 102086f:	4c 8d 25 2a aa 0a 00 	lea	r12, [rip + 698922]
 1020876:	4c 8b ac 24 88 00 00 00 	mov	r13, qword ptr [rsp + 136]
 102087e:	4c 8d 35 5b aa 0a 00 	lea	r14, [rip + 698971]
 1020885:	4c 8b bc 24 b8 00 00 00 	mov	r15, qword ptr [rsp + 184]
 102088d:	49 89 c1 	mov	r9, rax
 1020890:	48 89 9c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rbx
 1020898:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 10208a0:	48 8b 9c 24 30 01 00 00 	mov	rbx, qword ptr [rsp + 304]
 10208a8:	e9 6f fe ff ff 	jmp	-401 <_runtime.(*pageAlloc).find+0x9c>
 10208ad:	48 c1 eb 2a 	shr	rbx, 42
 10208b1:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 10208b8:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 10208c0:	48 83 f9 40 	cmp	rcx, 64
 10208c4:	48 89 d8 	mov	rax, rbx
 10208c7:	e9 5d ff ff ff 	jmp	-163 <_runtime.(*pageAlloc).find+0x1a9>
 10208cc:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 10208d4:	48 83 f9 40 	cmp	rcx, 64
 10208d8:	4d 19 c9 	sbb	r9, r9
 10208db:	41 bb 01 00 00 00 	mov	r11d, 1
 10208e1:	49 d3 e3 	shl	r11, cl
 10208e4:	4d 21 cb 	and	r11, r9
 10208e7:	4c 39 d8 	cmp	rax, r11
 10208ea:	73 0a 	jae	10 <_runtime.(*pageAlloc).find+0x276>
 10208ec:	48 0f ba e3 3f 	bt	rbx, 63
 10208f1:	e9 1c ff ff ff 	jmp	-228 <_runtime.(*pageAlloc).find+0x192>
 10208f6:	4f 8d 0c 18 	lea	r9, [r8 + r11]
 10208fa:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1020902:	48 8b 8c 24 f0 00 00 00 	mov	rcx, qword ptr [rsp + 240]
 102090a:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1020912:	48 8b 9c 24 30 01 00 00 	mov	rbx, qword ptr [rsp + 304]
 102091a:	48 8b 74 24 78 	mov	rsi, qword ptr [rsp + 120]
 102091f:	48 8d 3d 3a a9 0a 00 	lea	rdi, [rip + 698682]
 1020926:	4c 8b 84 24 08 01 00 00 	mov	r8, qword ptr [rsp + 264]
 102092e:	49 ba 00 00 00 00 00 80 00 00 	movabs	r10, 140737488355328
 1020938:	4c 8b 9c 24 e8 00 00 00 	mov	r11, qword ptr [rsp + 232]
 1020940:	4c 8d 25 59 a9 0a 00 	lea	r12, [rip + 698713]
 1020947:	4c 8b ac 24 88 00 00 00 	mov	r13, qword ptr [rsp + 136]
 102094f:	4c 8d 35 8a a9 0a 00 	lea	r14, [rip + 698762]
 1020956:	4c 8b bc 24 b8 00 00 00 	mov	r15, qword ptr [rsp + 184]
 102095e:	e9 b9 fd ff ff 	jmp	-583 <_runtime.(*pageAlloc).find+0x9c>
 1020963:	4c 8b 84 24 98 00 00 00 	mov	r8, qword ptr [rsp + 152]
 102096b:	49 8d 40 01 	lea	rax, [r8 + 1]
 102096f:	4c 8b 84 24 30 01 00 00 	mov	r8, qword ptr [rsp + 304]
 1020977:	4c 8b 8c 24 e0 00 00 00 	mov	r9, qword ptr [rsp + 224]
 102097f:	4c 89 c3 	mov	rbx, r8
 1020982:	4c 89 c9 	mov	rcx, r9
 1020985:	48 89 ca 	mov	rdx, rcx
 1020988:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 1020990:	48 83 f8 05 	cmp	rax, 5
 1020994:	0f 8d bc 06 00 00 	jge	1724 <_runtime.(*pageAlloc).find+0x9d6>
 102099a:	84 03 	test	byte ptr [rbx], al
 102099c:	48 8d 3d bd a8 0a 00 	lea	rdi, [rip + 698557]
 10209a3:	4c 8b 04 c7 	mov	r8, qword ptr [rdi + 8*rax]
 10209a7:	49 83 f8 40 	cmp	r8, 64
 10209ab:	4d 19 c9 	sbb	r9, r9
 10209ae:	49 89 ca 	mov	r10, rcx
 10209b1:	4c 89 c1 	mov	rcx, r8
 10209b4:	41 bb 01 00 00 00 	mov	r11d, 1
 10209ba:	49 d3 e3 	shl	r11, cl
 10209bd:	4d 21 cb 	and	r11, r9
 10209c0:	4c 8d 25 d9 a8 0a 00 	lea	r12, [rip + 698585]
 10209c7:	4d 8b 2c c4 	mov	r13, qword ptr [r12 + 8*rax]
 10209cb:	49 d3 e2 	shl	r10, cl
 10209ce:	4d 21 ca 	and	r10, r9
 10209d1:	4c 8d 04 40 	lea	r8, [rax + 2*rax]
 10209d5:	4e 8b 4c c3 10 	mov	r9, qword ptr [rbx + 8*r8 + 16]
 10209da:	4e 8b 04 c3 	mov	r8, qword ptr [rbx + 8*r8]
 10209de:	4b 8d 0c 1a 	lea	rcx, [r10 + r11]
 10209e2:	4c 39 c9 	cmp	rcx, r9
 10209e5:	0f 87 77 09 00 00 	ja	2423 <_runtime.(*pageAlloc).find+0xce2>
 10209eb:	49 39 ca 	cmp	r10, rcx
 10209ee:	0f 87 66 09 00 00 	ja	2406 <_runtime.(*pageAlloc).find+0xcda>
 10209f4:	4c 89 94 24 b8 00 00 00 	mov	qword ptr [rsp + 184], r10
 10209fc:	4c 8d 35 dd a8 0a 00 	lea	r14, [rip + 698589]
 1020a03:	49 8b 0c c6 	mov	rcx, qword ptr [r14 + 8*rax]
 1020a07:	48 83 f9 40 	cmp	rcx, 64
 1020a0b:	4d 19 ff 	sbb	r15, r15
 1020a0e:	4d 29 ca 	sub	r10, r9
 1020a11:	49 c1 fa 3f 	sar	r10, 63
 1020a15:	4c 8b 8c 24 b8 00 00 00 	mov	r9, qword ptr [rsp + 184]
 1020a1d:	49 c1 e1 03 	shl	r9, 3
 1020a21:	4d 21 d1 	and	r9, r10
 1020a24:	4d 01 c8 	add	r8, r9
 1020a27:	4c 8b 8b 78 00 01 00 	mov	r9, qword ptr [rbx + 65656]
 1020a2e:	49 ba 00 00 00 00 00 80 00 00 	movabs	r10, 140737488355328
 1020a38:	4d 01 d1 	add	r9, r10
 1020a3b:	49 d3 e9 	shr	r9, cl
 1020a3e:	4d 21 f9 	and	r9, r15
 1020a41:	4c 89 d9 	mov	rcx, r11
 1020a44:	49 f7 db 	neg	r11
 1020a47:	4d 21 cb 	and	r11, r9
 1020a4a:	4c 8b bc 24 b8 00 00 00 	mov	r15, qword ptr [rsp + 184]
 1020a52:	4d 39 fb 	cmp	r11, r15
 1020a55:	0f 85 f3 05 00 00 	jne	1523 <_runtime.(*pageAlloc).find+0x9ce>
 1020a5b:	4c 8d 59 ff 	lea	r11, [rcx - 1]
 1020a5f:	4d 21 cb 	and	r11, r9
 1020a62:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 1020a6a:	48 89 8c 24 f0 00 00 00 	mov	qword ptr [rsp + 240], rcx
 1020a72:	4c 89 ac 24 88 00 00 00 	mov	qword ptr [rsp + 136], r13
 1020a7a:	4c 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], r8
 1020a82:	4c 89 9c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], r11
 1020a8a:	48 89 94 24 90 00 00 00 	mov	qword ptr [rsp + 144], rdx
 1020a92:	48 89 74 24 78 	mov	qword ptr [rsp + 120], rsi
 1020a97:	4d 89 d9 	mov	r9, r11
 1020a9a:	45 31 c9 	xor	r9d, r9d
 1020a9d:	4c 89 4c 24 70 	mov	qword ptr [rsp + 112], r9
 1020aa2:	45 31 db 	xor	r11d, r11d
 1020aa5:	4c 89 9c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], r11
 1020aad:	4c 8b 8c 24 a8 00 00 00 	mov	r9, qword ptr [rsp + 168]
 1020ab5:	4d 89 cb 	mov	r11, r9
 1020ab8:	e9 6f fc ff ff 	jmp	-913 <_runtime.(*pageAlloc).find+0xac>
 1020abd:	48 89 d9 	mov	rcx, rbx
 1020ac0:	48 c1 e9 15 	shr	rcx, 21
 1020ac4:	48 81 e1 ff ff 1f 00 	and	rcx, 2097151
 1020acb:	e9 2b fd ff ff 	jmp	-725 <_runtime.(*pageAlloc).find+0x17b>
 1020ad0:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1020ad8:	48 83 f9 40 	cmp	rcx, 64
 1020adc:	48 19 c0 	sbb	rax, rax
 1020adf:	48 8b 94 24 e8 00 00 00 	mov	rdx, qword ptr [rsp + 232]
 1020ae7:	48 d3 e2 	shl	rdx, cl
 1020aea:	48 21 c2 	and	rdx, rax
 1020aed:	4d 85 c0 	test	r8, r8
 1020af0:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1020af8:	48 0f 44 c2 	cmove	rax, rdx
 1020afc:	4d 39 d1 	cmp	r9, r10
 1020aff:	0f 83 b8 04 00 00 	jae	1208 <_runtime.(*pageAlloc).find+0x93d>
 1020b05:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1020b0d:	48 85 c0 	test	rax, rax
 1020b10:	0f 84 79 04 00 00 	je	1145 <_runtime.(*pageAlloc).find+0x90f>
 1020b16:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1020b1b:	48 89 ca 	mov	rdx, rcx
 1020b1e:	48 81 e1 ff ff 1f 00 	and	rcx, 2097151
 1020b25:	48 85 d6 	test	rsi, rdx
 1020b28:	48 0f 45 cf 	cmovne	rcx, rdi
 1020b2c:	48 0f ba e2 3f 	bt	rdx, 63
 1020b31:	0f 83 40 04 00 00 	jae	1088 <_runtime.(*pageAlloc).find+0x8f7>
 1020b37:	bb 00 00 20 00 	mov	ebx, 2097152
 1020b3c:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 1020b41:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1020b46:	0f 83 1b 04 00 00 	jae	1051 <_runtime.(*pageAlloc).find+0x8e7>
 1020b4c:	ba 00 00 20 00 	mov	edx, 2097152
 1020b51:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1020b56:	e8 45 99 00 00 	call	39237 <_runtime.printlock>
 1020b5b:	48 8d 05 34 32 05 00 	lea	rax, [rip + 340532]
 1020b62:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020b66:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1020b6f:	e8 6c a2 00 00 	call	41580 <_runtime.printstring>
 1020b74:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1020b7c:	48 8d 48 ff 	lea	rcx, [rax - 1]
 1020b80:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1020b84:	e8 97 a0 00 00 	call	41111 <_runtime.printint>
 1020b89:	48 8d 05 f0 20 05 00 	lea	rax, [rip + 336112]
 1020b90:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020b94:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020b9d:	e8 3e a2 00 00 	call	41534 <_runtime.printstring>
 1020ba2:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1020baa:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020bae:	e8 6d a0 00 00 	call	41069 <_runtime.printint>
 1020bb3:	48 8d 05 59 21 05 00 	lea	rax, [rip + 336217]
 1020bba:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020bbe:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1020bc7:	e8 14 a2 00 00 	call	41492 <_runtime.printstring>
 1020bcc:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1020bd1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020bd5:	e8 46 9f 00 00 	call	40774 <_runtime.printuint>
 1020bda:	48 8d 05 93 20 05 00 	lea	rax, [rip + 336019]
 1020be1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020be5:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020bee:	e8 ed a1 00 00 	call	41453 <_runtime.printstring>
 1020bf3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1020bf8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020bfc:	e8 1f 9f 00 00 	call	40735 <_runtime.printuint>
 1020c01:	48 8d 05 6c 20 05 00 	lea	rax, [rip + 335980]
 1020c08:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c0c:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020c15:	e8 c6 a1 00 00 	call	41414 <_runtime.printstring>
 1020c1a:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1020c1f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c23:	e8 f8 9e 00 00 	call	40696 <_runtime.printuint>
 1020c28:	e8 03 9b 00 00 	call	39683 <_runtime.printnl>
 1020c2d:	e8 ee 98 00 00 	call	39150 <_runtime.printunlock>
 1020c32:	e8 69 98 00 00 	call	39017 <_runtime.printlock>
 1020c37:	48 8d 05 14 31 05 00 	lea	rax, [rip + 340244]
 1020c3e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c42:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1020c4b:	e8 90 a1 00 00 	call	41360 <_runtime.printstring>
 1020c50:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1020c58:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c5c:	e8 bf 9f 00 00 	call	40895 <_runtime.printint>
 1020c61:	48 8d 05 32 27 05 00 	lea	rax, [rip + 337714]
 1020c68:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c6c:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1020c75:	e8 66 a1 00 00 	call	41318 <_runtime.printstring>
 1020c7a:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 1020c82:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c86:	e8 95 9e 00 00 	call	40597 <_runtime.printuint>
 1020c8b:	48 8d 05 37 22 05 00 	lea	rax, [rip + 336439]
 1020c92:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020c96:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1020c9f:	e8 3c a1 00 00 	call	41276 <_runtime.printstring>
 1020ca4:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1020cac:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020cb0:	e8 6b 9f 00 00 	call	40811 <_runtime.printint>
 1020cb5:	e8 76 9a 00 00 	call	39542 <_runtime.printnl>
 1020cba:	e8 61 98 00 00 	call	39009 <_runtime.printunlock>
 1020cbf:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 1020cc7:	48 8b 80 78 00 01 00 	mov	rax, qword ptr [rax + 65656]
 1020cce:	48 89 84 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rax
 1020cd6:	e8 c5 97 00 00 	call	38853 <_runtime.printlock>
 1020cdb:	48 8d 05 8b 3e 05 00 	lea	rax, [rip + 343691]
 1020ce2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020ce6:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1020cef:	e8 ec a0 00 00 	call	41196 <_runtime.printstring>
 1020cf4:	48 8b 84 24 d8 00 00 00 	mov	rax, qword ptr [rsp + 216]
 1020cfc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020d00:	e8 8b 9f 00 00 	call	40843 <_runtime.printhex>
 1020d05:	48 8d 05 4e 21 05 00 	lea	rax, [rip + 336206]
 1020d0c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020d10:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1020d19:	e8 c2 a0 00 00 	call	41154 <_runtime.printstring>
 1020d1e:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1020d26:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020d2a:	e8 f1 9e 00 00 	call	40689 <_runtime.printint>
 1020d2f:	e8 fc 99 00 00 	call	39420 <_runtime.printnl>
 1020d34:	e8 e7 97 00 00 	call	38887 <_runtime.printunlock>
 1020d39:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1020d41:	48 8d 0d 98 a5 0a 00 	lea	rcx, [rip + 697752]
 1020d48:	48 8b 0c c1 	mov	rcx, qword ptr [rcx + 8*rax]
 1020d4c:	48 89 8c 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rcx
 1020d54:	48 8d 15 05 a5 0a 00 	lea	rdx, [rip + 697605]
 1020d5b:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 1020d5f:	48 89 94 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rdx
 1020d67:	e8 34 97 00 00 	call	38708 <_runtime.printlock>
 1020d6c:	48 8d 05 02 48 05 00 	lea	rax, [rip + 346114]
 1020d73:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020d77:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1020d80:	e8 5b a0 00 00 	call	41051 <_runtime.printstring>
 1020d85:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 1020d8d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020d91:	e8 8a 9d 00 00 	call	40330 <_runtime.printuint>
 1020d96:	48 8d 05 ec 35 05 00 	lea	rax, [rip + 341484]
 1020d9d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020da1:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 1020daa:	e8 31 a0 00 00 	call	41009 <_runtime.printstring>
 1020daf:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1020db7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020dbb:	e8 60 9d 00 00 	call	40288 <_runtime.printuint>
 1020dc0:	e8 6b 99 00 00 	call	39275 <_runtime.printnl>
 1020dc5:	e8 56 97 00 00 	call	38742 <_runtime.printunlock>
 1020dca:	31 c0 	xor	eax, eax
 1020dcc:	e9 08 01 00 00 	jmp	264 <_runtime.(*pageAlloc).find+0x859>
 1020dd1:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 1020dd6:	e8 c5 96 00 00 	call	38597 <_runtime.printlock>
 1020ddb:	48 8d 05 b4 2f 05 00 	lea	rax, [rip + 339892]
 1020de2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020de6:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1020def:	e8 ec 9f 00 00 	call	40940 <_runtime.printstring>
 1020df4:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1020dfc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e00:	e8 1b 9e 00 00 	call	40475 <_runtime.printint>
 1020e05:	48 8d 05 74 1e 05 00 	lea	rax, [rip + 335476]
 1020e0c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e10:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020e19:	e8 c2 9f 00 00 	call	40898 <_runtime.printstring>
 1020e1e:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1020e26:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 1020e2e:	48 8d 14 01 	lea	rdx, [rcx + rax]
 1020e32:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1020e36:	e8 e5 9d 00 00 	call	40421 <_runtime.printint>
 1020e3b:	48 8d 05 81 1f 05 00 	lea	rax, [rip + 335745]
 1020e42:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e46:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1020e4f:	e8 8c 9f 00 00 	call	40844 <_runtime.printstring>
 1020e54:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1020e59:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e5d:	e8 be 9c 00 00 	call	40126 <_runtime.printuint>
 1020e62:	48 8d 05 0b 1e 05 00 	lea	rax, [rip + 335371]
 1020e69:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e6d:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020e76:	e8 65 9f 00 00 	call	40805 <_runtime.printstring>
 1020e7b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1020e80:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e84:	e8 97 9c 00 00 	call	40087 <_runtime.printuint>
 1020e89:	48 8d 05 e4 1d 05 00 	lea	rax, [rip + 335332]
 1020e90:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020e94:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020e9d:	e8 3e 9f 00 00 	call	40766 <_runtime.printstring>
 1020ea2:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1020ea7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020eab:	e8 70 9c 00 00 	call	40048 <_runtime.printuint>
 1020eb0:	48 8d 05 bb 1d 05 00 	lea	rax, [rip + 335291]
 1020eb7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1020ebb:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1020ec4:	e8 17 9f 00 00 	call	40727 <_runtime.printstring>
 1020ec9:	e8 52 96 00 00 	call	38482 <_runtime.printunlock>
 1020ece:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1020ed6:	48 ff c0 	inc	rax
 1020ed9:	48 8b 8c 24 f0 00 00 00 	mov	rcx, qword ptr [rsp + 240]
 1020ee1:	48 39 c8 	cmp	rax, rcx
 1020ee4:	0f 8d 4f 04 00 00 	jge	1103 <_runtime.(*pageAlloc).find+0xcb9>
 1020eea:	48 8b 94 24 08 01 00 00 	mov	rdx, qword ptr [rsp + 264]
 1020ef2:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 1020ef6:	48 89 de 	mov	rsi, rbx
 1020ef9:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 1020f00:	48 bf 00 00 00 00 00 00 00 80 	movabs	rdi, -9223372036854775808
 1020f0a:	48 85 f7 	test	rdi, rsi
 1020f0d:	41 b8 00 00 20 00 	mov	r8d, 2097152
 1020f13:	49 0f 45 d8 	cmovne	rbx, r8
 1020f17:	48 0f ba e6 3f 	bt	rsi, 63
 1020f1c:	73 34 	jae	52 <_runtime.(*pageAlloc).find+0x8d2>
 1020f1e:	41 b9 00 00 20 00 	mov	r9d, 2097152
 1020f24:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 1020f2c:	4c 89 4c 24 28 	mov	qword ptr [rsp + 40], r9
 1020f31:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 1020f36:	73 0a 	jae	10 <_runtime.(*pageAlloc).find+0x8c2>
 1020f38:	be 00 00 20 00 	mov	esi, 2097152
 1020f3d:	e9 8f fe ff ff 	jmp	-369 <_runtime.(*pageAlloc).find+0x751>
 1020f42:	48 c1 ee 2a 	shr	rsi, 42
 1020f46:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 1020f4d:	e9 7f fe ff ff 	jmp	-385 <_runtime.(*pageAlloc).find+0x751>
 1020f52:	49 89 f1 	mov	r9, rsi
 1020f55:	49 c1 e9 15 	shr	r9, 21
 1020f59:	49 81 e1 ff ff 1f 00 	and	r9, 2097151
 1020f60:	48 0f ba e6 3f 	bt	rsi, 63
 1020f65:	eb bd 	jmp	-67 <_runtime.(*pageAlloc).find+0x8a4>
 1020f67:	48 c1 ea 2a 	shr	rdx, 42
 1020f6b:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 1020f72:	e9 da fb ff ff 	jmp	-1062 <_runtime.(*pageAlloc).find+0x4d1>
 1020f77:	48 89 d3 	mov	rbx, rdx
 1020f7a:	48 c1 eb 15 	shr	rbx, 21
 1020f7e:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 1020f85:	48 0f ba e2 3f 	bt	rdx, 63
 1020f8a:	e9 ad fb ff ff 	jmp	-1107 <_runtime.(*pageAlloc).find+0x4bc>
 1020f8f:	48 c7 84 24 40 01 00 00 00 00 00 00 	mov	qword ptr [rsp + 320], 0
 1020f9b:	48 b8 ff ff ff ff ff 7f ff ff 	movabs	rax, -140737488355329
 1020fa5:	48 89 84 24 48 01 00 00 	mov	qword ptr [rsp + 328], rax
 1020fad:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 1020fb5:	48 81 c4 28 01 00 00 	add	rsp, 296
 1020fbc:	c3 	ret
 1020fbd:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1020fc5:	48 8d 1d 14 a3 0a 00 	lea	rbx, [rip + 697108]
 1020fcc:	48 8b 0c d3 	mov	rcx, qword ptr [rbx + 8*rdx]
 1020fd0:	48 8b 94 24 f8 00 00 00 	mov	rdx, qword ptr [rsp + 248]
 1020fd8:	48 83 f9 40 	cmp	rcx, 64
 1020fdc:	48 19 db 	sbb	rbx, rbx
 1020fdf:	48 8b b4 24 b8 00 00 00 	mov	rsi, qword ptr [rsp + 184]
 1020fe7:	48 d3 e6 	shl	rsi, cl
 1020fea:	48 21 de 	and	rsi, rbx
 1020fed:	48 c1 e0 0d 	shl	rax, 13
 1020ff1:	48 01 f0 	add	rax, rsi
 1020ff4:	48 bb 00 00 00 00 00 80 ff ff 	movabs	rbx, -140737488355328
 1020ffe:	48 01 d8 	add	rax, rbx
 1021001:	48 89 84 24 40 01 00 00 	mov	qword ptr [rsp + 320], rax
 1021009:	48 8d 04 13 	lea	rax, [rbx + rdx]
 102100d:	48 89 84 24 48 01 00 00 	mov	qword ptr [rsp + 328], rax
 1021015:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 102101d:	48 81 c4 28 01 00 00 	add	rsp, 296
 1021024:	c3 	ret
 1021025:	48 be 00 00 00 00 00 00 00 80 	movabs	rsi, -9223372036854775808
 102102f:	bf 00 00 20 00 	mov	edi, 2097152
 1021034:	4c 8b 94 24 38 01 00 00 	mov	r10, qword ptr [rsp + 312]
 102103c:	4c 8b 4c 24 70 	mov	r9, qword ptr [rsp + 112]
 1021041:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1021049:	e9 ae fa ff ff 	jmp	-1362 <_runtime.(*pageAlloc).find+0x47c>
 102104e:	45 31 db 	xor	r11d, r11d
 1021051:	e9 0c fa ff ff 	jmp	-1524 <_runtime.(*pageAlloc).find+0x3e2>
 1021056:	84 03 	test	byte ptr [rbx], al
 1021058:	48 89 c8 	mov	rax, rcx
 102105b:	48 c1 e8 0d 	shr	rax, 13
 102105f:	48 3d 00 20 00 00 	cmp	rax, 8192
 1021065:	0f 83 c4 02 00 00 	jae	708 <_runtime.(*pageAlloc).find+0xcaf>
 102106b:	48 89 8c 24 f0 00 00 00 	mov	qword ptr [rsp + 240], rcx
 1021073:	48 8b 44 c3 78 	mov	rax, qword ptr [rbx + 8*rax + 120]
 1021078:	84 00 	test	byte ptr [rax], al
 102107a:	48 81 e1 ff 1f 00 00 	and	rcx, 8191
 1021081:	48 c1 e1 07 	shl	rcx, 7
 1021085:	48 8d 04 08 	lea	rax, [rax + rcx]
 1021089:	48 89 04 24 	mov	qword ptr [rsp], rax
 102108d:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 1021095:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102109a:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10210a3:	e8 d8 1d 00 00 	call	7640 <_runtime.(*pallocBits).find>
 10210a8:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10210ad:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10210b2:	48 85 c0 	test	rax, rax
 10210b5:	0f 82 aa 00 00 00 	jb	170 <_runtime.(*pageAlloc).find+0xae5>
 10210bb:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 10210c3:	48 c1 e1 0d 	shl	rcx, 13
 10210c7:	48 8b 84 24 f0 00 00 00 	mov	rax, qword ptr [rsp + 240]
 10210cf:	48 89 c3 	mov	rbx, rax
 10210d2:	48 c1 e0 16 	shl	rax, 22
 10210d6:	48 89 84 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rax
 10210de:	48 01 c1 	add	rcx, rax
 10210e1:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10210e5:	48 be 00 00 00 00 00 80 ff ff 	movabs	rsi, -140737488355328
 10210ef:	48 01 f1 	add	rcx, rsi
 10210f2:	48 ff c3 	inc	rbx
 10210f5:	48 c1 e3 16 	shl	rbx, 22
 10210f9:	48 01 f3 	add	rbx, rsi
 10210fc:	48 29 cb 	sub	rbx, rcx
 10210ff:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1021104:	48 8b 8c 24 10 01 00 00 	mov	rcx, qword ptr [rsp + 272]
 102110c:	48 8d 94 24 10 01 00 00 	lea	rdx, [rsp + 272]
 1021114:	ff d1 	call	rcx
 1021116:	48 8b 84 24 f8 00 00 00 	mov	rax, qword ptr [rsp + 248]
 102111e:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 1021126:	48 c1 e1 0d 	shl	rcx, 13
 102112a:	48 8b 9c 24 d8 00 00 00 	mov	rbx, qword ptr [rsp + 216]
 1021132:	48 01 d9 	add	rcx, rbx
 1021135:	48 bb 00 00 00 00 00 80 ff ff 	movabs	rbx, -140737488355328
 102113f:	48 01 d9 	add	rcx, rbx
 1021142:	48 89 8c 24 40 01 00 00 	mov	qword ptr [rsp + 320], rcx
 102114a:	48 01 d8 	add	rax, rbx
 102114d:	48 89 84 24 48 01 00 00 	mov	qword ptr [rsp + 328], rax
 1021155:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 102115d:	48 81 c4 28 01 00 00 	add	rsp, 296
 1021164:	c3 	ret
 1021165:	48 8b 94 24 30 01 00 00 	mov	rdx, qword ptr [rsp + 304]
 102116d:	48 8b 4a 68 	mov	rcx, qword ptr [rdx + 104]
 1021171:	48 8b 52 60 	mov	rdx, qword ptr [rdx + 96]
 1021175:	48 8b 84 24 f0 00 00 00 	mov	rax, qword ptr [rsp + 240]
 102117d:	48 39 c8 	cmp	rax, rcx
 1021180:	0f 83 a4 01 00 00 	jae	420 <_runtime.(*pageAlloc).find+0xcaa>
 1021186:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 102118a:	48 89 ca 	mov	rdx, rcx
 102118d:	48 81 e1 ff ff 1f 00 	and	rcx, 2097151
 1021194:	48 bb 00 00 00 00 00 00 00 80 	movabs	rbx, -9223372036854775808
 102119e:	48 85 d3 	test	rbx, rdx
 10211a1:	bb 00 00 20 00 	mov	ebx, 2097152
 10211a6:	48 0f 45 cb 	cmovne	rcx, rbx
 10211aa:	48 0f ba e2 3f 	bt	rdx, 63
 10211af:	73 25 	jae	37 <_runtime.(*pageAlloc).find+0xb56>
 10211b1:	bb 00 00 20 00 	mov	ebx, 2097152
 10211b6:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 10211bb:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10211c0:	73 07 	jae	7 <_runtime.(*pageAlloc).find+0xb49>
 10211c2:	ba 00 00 20 00 	mov	edx, 2097152
 10211c7:	eb 22 	jmp	34 <_runtime.(*pageAlloc).find+0xb6b>
 10211c9:	48 c1 ea 2a 	shr	rdx, 42
 10211cd:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 10211d4:	eb 15 	jmp	21 <_runtime.(*pageAlloc).find+0xb6b>
 10211d6:	48 89 d3 	mov	rbx, rdx
 10211d9:	48 c1 eb 15 	shr	rbx, 21
 10211dd:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 10211e4:	48 0f ba e2 3f 	bt	rdx, 63
 10211e9:	eb cb 	jmp	-53 <_runtime.(*pageAlloc).find+0xb36>
 10211eb:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 10211f0:	e8 ab 92 00 00 	call	37547 <_runtime.printlock>
 10211f5:	48 8d 05 9a 2b 05 00 	lea	rax, [rip + 338842]
 10211fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021200:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1021209:	e8 d2 9b 00 00 	call	39890 <_runtime.printstring>
 102120e:	48 c7 04 24 04 00 00 00 	mov	qword ptr [rsp], 4
 1021216:	e8 05 9a 00 00 	call	39429 <_runtime.printint>
 102121b:	48 8d 05 5e 1a 05 00 	lea	rax, [rip + 334430]
 1021222:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021226:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 102122f:	e8 ac 9b 00 00 	call	39852 <_runtime.printstring>
 1021234:	48 8b 84 24 f0 00 00 00 	mov	rax, qword ptr [rsp + 240]
 102123c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021240:	e8 db 99 00 00 	call	39387 <_runtime.printint>
 1021245:	48 8d 05 77 1b 05 00 	lea	rax, [rip + 334711]
 102124c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021250:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1021259:	e8 82 9b 00 00 	call	39810 <_runtime.printstring>
 102125e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1021263:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021267:	e8 b4 98 00 00 	call	39092 <_runtime.printuint>
 102126c:	48 8d 05 01 1a 05 00 	lea	rax, [rip + 334337]
 1021273:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021277:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1021280:	e8 5b 9b 00 00 	call	39771 <_runtime.printstring>
 1021285:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102128a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102128e:	e8 8d 98 00 00 	call	39053 <_runtime.printuint>
 1021293:	48 8d 05 da 19 05 00 	lea	rax, [rip + 334298]
 102129a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102129e:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10212a7:	e8 34 9b 00 00 	call	39732 <_runtime.printstring>
 10212ac:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10212b1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10212b5:	e8 66 98 00 00 	call	39014 <_runtime.printuint>
 10212ba:	48 8d 05 b1 19 05 00 	lea	rax, [rip + 334257]
 10212c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10212c5:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10212ce:	e8 0d 9b 00 00 	call	39693 <_runtime.printstring>
 10212d3:	e8 48 92 00 00 	call	37448 <_runtime.printunlock>
 10212d8:	e8 c3 91 00 00 	call	37315 <_runtime.printlock>
 10212dd:	48 8d 05 ed 2b 05 00 	lea	rax, [rip + 338925]
 10212e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10212e8:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 10212f1:	e8 ea 9a 00 00 	call	39658 <_runtime.printstring>
 10212f6:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 10212fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021302:	e8 19 98 00 00 	call	38937 <_runtime.printuint>
 1021307:	e8 24 94 00 00 	call	37924 <_runtime.printnl>
 102130c:	e8 0f 92 00 00 	call	37391 <_runtime.printunlock>
 1021311:	48 8d 05 da 27 05 00 	lea	rax, [rip + 337882]
 1021318:	48 89 04 24 	mov	qword ptr [rsp], rax
 102131c:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1021325:	e8 36 7a 00 00 	call	31286 <_runtime.throw>
 102132a:	e8 21 20 03 00 	call	204833 <_runtime.panicIndex>
 102132f:	b9 00 20 00 00 	mov	ecx, 8192
 1021334:	e8 27 20 03 00 	call	204839 <_runtime.panicIndexU>
 1021339:	48 8d 05 b2 27 05 00 	lea	rax, [rip + 337842]
 1021340:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021344:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102134d:	e8 0e 7a 00 00 	call	31246 <_runtime.throw>
 1021352:	4c 89 d8 	mov	rax, r11
 1021355:	e8 f6 1f 03 00 	call	204790 <_runtime.panicIndex>
 102135a:	4c 89 d0 	mov	rax, r10
 102135d:	e8 4e 20 03 00 	call	204878 <_runtime.panicSliceB>
 1021362:	4c 89 ca 	mov	rdx, r9
 1021365:	e8 26 20 03 00 	call	204838 <_runtime.panicSliceAcap>
 102136a:	90 	nop
 102136b:	e8 60 f8 02 00 	call	194656 <_runtime.morestack_noctxt>
 1021370:	e9 0b f3 ff ff 	jmp	-3317 <_runtime.(*pageAlloc).find>
 1021375:	cc 	int3
 1021376:	cc 	int3
 1021377:	cc 	int3
 1021378:	cc 	int3
 1021379:	cc 	int3
 102137a:	cc 	int3
 102137b:	cc 	int3
 102137c:	cc 	int3
 102137d:	cc 	int3
 102137e:	cc 	int3
 102137f:	cc 	int3

_runtime.(*pageAlloc).alloc:
 1021380:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1021389:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102138d:	0f 86 22 03 00 00 	jbe	802 <_runtime.(*pageAlloc).alloc+0x335>
 1021393:	48 83 ec 50 	sub	rsp, 80
 1021397:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 102139c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 10213a1:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 10213a6:	84 02 	test	byte ptr [rdx], al
 10213a8:	48 8b 9a 78 00 01 00 	mov	rbx, qword ptr [rdx + 65656]
 10213af:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 10213b9:	48 8d 04 1e 	lea	rax, [rsi + rbx]
 10213bd:	48 89 c7 	mov	rdi, rax
 10213c0:	48 c1 e8 16 	shr	rax, 22
 10213c4:	48 39 82 98 00 01 00 	cmp	qword ptr [rdx + 65688], rax
 10213cb:	0f 86 c7 01 00 00 	jbe	455 <_runtime.(*pageAlloc).alloc+0x218>
 10213d1:	48 81 e3 ff ff 3f 00 	and	rbx, 4194303
 10213d8:	48 c1 eb 0d 	shr	rbx, 13
 10213dc:	4c 8d 83 00 fe ff ff 	lea	r8, [rbx - 512]
 10213e3:	49 f7 d8 	neg	r8
 10213e6:	4c 8b 4c 24 60 	mov	r9, qword ptr [rsp + 96]
 10213eb:	4d 39 c8 	cmp	r8, r9
 10213ee:	72 2e 	jb	46 <_runtime.(*pageAlloc).alloc+0x9e>
 10213f0:	48 8b 4a 68 	mov	rcx, qword ptr [rdx + 104]
 10213f4:	4c 8b 42 60 	mov	r8, qword ptr [rdx + 96]
 10213f8:	48 39 c8 	cmp	rax, rcx
 10213fb:	0f 83 ae 02 00 00 	jae	686 <_runtime.(*pageAlloc).alloc+0x32f>
 1021401:	4d 8b 04 c0 	mov	r8, qword ptr [r8 + 8*rax]
 1021405:	49 0f ba e0 3f 	bt	r8, 63
 102140a:	0f 83 75 01 00 00 	jae	373 <_runtime.(*pageAlloc).alloc+0x205>
 1021410:	b9 00 00 20 00 	mov	ecx, 2097152
 1021415:	4c 39 c9 	cmp	rcx, r9
 1021418:	0f 83 e6 00 00 00 	jae	230 <_runtime.(*pageAlloc).alloc+0x184>
 102141e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1021422:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 1021427:	e8 54 f2 ff ff 	call	-3500 <_runtime.(*pageAlloc).find>
 102142c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1021431:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1021436:	48 85 c0 	test	rax, rax
 1021439:	75 3d 	jne	61 <_runtime.(*pageAlloc).alloc+0xf8>
 102143b:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1021440:	48 83 f8 01 	cmp	rax, 1
 1021444:	75 16 	jne	22 <_runtime.(*pageAlloc).alloc+0xdc>
 1021446:	48 b8 ff ff ff ff ff 7f ff ff 	movabs	rax, -140737488355329
 1021450:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1021455:	48 89 81 78 00 01 00 	mov	qword ptr [rcx + 65656], rax
 102145c:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 1021465:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 102146e:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1021473:	48 83 c4 50 	add	rsp, 80
 1021477:	c3 	ret
 1021478:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 102147d:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1021482:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1021487:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102148b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1021490:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1021495:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 102149a:	e8 11 ee ff ff 	call	-4591 <_runtime.(*pageAlloc).allocRange>
 102149f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10214a4:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10214a9:	48 ba 00 00 00 00 00 80 00 00 	movabs	rdx, 140737488355328
 10214b3:	48 8d 1c 0a 	lea	rbx, [rdx + rcx]
 10214b7:	48 8b 74 24 58 	mov	rsi, qword ptr [rsp + 88]
 10214bc:	48 8b be 78 00 01 00 	mov	rdi, qword ptr [rsi + 65656]
 10214c3:	48 01 fa 	add	rdx, rdi
 10214c6:	48 39 d3 	cmp	rbx, rdx
 10214c9:	73 2c 	jae	44 <_runtime.(*pageAlloc).alloc+0x177>
 10214cb:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 10214d2:	48 85 d2 	test	rdx, rdx
 10214d5:	7e 07 	jle	7 <_runtime.(*pageAlloc).alloc+0x15e>
 10214d7:	48 89 8e 78 00 01 00 	mov	qword ptr [rsi + 65656], rcx
 10214de:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10214e3:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 10214e8:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 10214ed:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10214f2:	48 83 c4 50 	add	rsp, 80
 10214f6:	c3 	ret
 10214f7:	76 07 	jbe	7 <_runtime.(*pageAlloc).alloc+0x180>
 10214f9:	ba 01 00 00 00 	mov	edx, 1
 10214fe:	eb d2 	jmp	-46 <_runtime.(*pageAlloc).alloc+0x152>
 1021500:	31 d2 	xor	edx, edx
 1021502:	eb ce 	jmp	-50 <_runtime.(*pageAlloc).alloc+0x152>
 1021504:	48 c1 ef 23 	shr	rdi, 35
 1021508:	48 81 ff 00 20 00 00 	cmp	rdi, 8192
 102150f:	0f 83 8d 01 00 00 	jae	397 <_runtime.(*pageAlloc).alloc+0x322>
 1021515:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 102151a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 102151f:	48 8b 4c fa 78 	mov	rcx, qword ptr [rdx + 8*rdi + 120]
 1021524:	84 01 	test	byte ptr [rcx], al
 1021526:	48 25 ff 1f 00 00 	and	rax, 8191
 102152c:	48 c1 e0 07 	shl	rax, 7
 1021530:	48 8d 04 01 	lea	rax, [rcx + rax]
 1021534:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021538:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 102153d:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1021542:	e8 39 19 00 00 	call	6457 <_runtime.(*pallocBits).find>
 1021547:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102154c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1021551:	48 85 c0 	test	rax, rax
 1021554:	72 5e 	jb	94 <_runtime.(*pageAlloc).alloc+0x234>
 1021556:	48 c1 e0 0d 	shl	rax, 13
 102155a:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 102155f:	48 c1 e2 16 	shl	rdx, 22
 1021563:	48 8d 1c 10 	lea	rbx, [rax + rdx]
 1021567:	48 be 00 00 00 00 00 80 ff ff 	movabs	rsi, -140737488355328
 1021571:	48 8d 04 1e 	lea	rax, [rsi + rbx]
 1021575:	48 c1 e1 0d 	shl	rcx, 13
 1021579:	48 01 ca 	add	rdx, rcx
 102157c:	48 8d 0c 16 	lea	rcx, [rsi + rdx]
 1021580:	e9 f3 fe ff ff 	jmp	-269 <_runtime.(*pageAlloc).alloc+0xf8>
 1021585:	49 c1 e8 15 	shr	r8, 21
 1021589:	49 81 e0 ff ff 1f 00 	and	r8, 2097151
 1021590:	4c 89 c1 	mov	rcx, r8
 1021593:	e9 7d fe ff ff 	jmp	-387 <_runtime.(*pageAlloc).alloc+0x95>
 1021598:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 10215a1:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 10215aa:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10215af:	48 83 c4 50 	add	rsp, 80
 10215b3:	c3 	ret
 10215b4:	e8 e7 8e 00 00 	call	36583 <_runtime.printlock>
 10215b9:	48 8d 05 18 24 05 00 	lea	rax, [rip + 336920]
 10215c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10215c4:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 10215cd:	e8 0e 98 00 00 	call	38926 <_runtime.printstring>
 10215d2:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10215d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10215db:	e8 40 95 00 00 	call	38208 <_runtime.printuint>
 10215e0:	48 8d 05 b3 1d 05 00 	lea	rax, [rip + 335283]
 10215e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10215eb:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 10215f4:	e8 e7 97 00 00 	call	38887 <_runtime.printstring>
 10215f9:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10215fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021602:	e8 19 95 00 00 	call	38169 <_runtime.printuint>
 1021607:	e8 24 91 00 00 	call	37156 <_runtime.printnl>
 102160c:	e8 0f 8f 00 00 	call	36623 <_runtime.printunlock>
 1021611:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1021616:	48 8b 80 78 00 01 00 	mov	rax, qword ptr [rax + 65656]
 102161d:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1021622:	e8 79 8e 00 00 	call	36473 <_runtime.printlock>
 1021627:	48 8d 05 57 2e 05 00 	lea	rax, [rip + 339543]
 102162e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021632:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 102163b:	e8 a0 97 00 00 	call	38816 <_runtime.printstring>
 1021640:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1021645:	48 25 ff ff 3f 00 	and	rax, 4194303
 102164b:	48 c1 e8 0d 	shr	rax, 13
 102164f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021653:	e8 c8 94 00 00 	call	38088 <_runtime.printuint>
 1021658:	48 8d 05 05 26 05 00 	lea	rax, [rip + 337413]
 102165f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021663:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 102166c:	e8 6f 97 00 00 	call	38767 <_runtime.printstring>
 1021671:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1021676:	48 89 04 24 	mov	qword ptr [rsp], rax
 102167a:	e8 11 96 00 00 	call	38417 <_runtime.printhex>
 102167f:	e8 ac 90 00 00 	call	37036 <_runtime.printnl>
 1021684:	e8 97 8e 00 00 	call	36503 <_runtime.printunlock>
 1021689:	48 8d 05 62 24 05 00 	lea	rax, [rip + 336994]
 1021690:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021694:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102169d:	e8 be 76 00 00 	call	30398 <_runtime.throw>
 10216a2:	48 89 f8 	mov	rax, rdi
 10216a5:	b9 00 20 00 00 	mov	ecx, 8192
 10216aa:	e8 b1 1c 03 00 	call	203953 <_runtime.panicIndexU>
 10216af:	e8 ac 1c 03 00 	call	203948 <_runtime.panicIndexU>
 10216b4:	90 	nop
 10216b5:	e8 16 f5 02 00 	call	193814 <_runtime.morestack_noctxt>
 10216ba:	e9 c1 fc ff ff 	jmp	-831 <_runtime.(*pageAlloc).alloc>
 10216bf:	cc 	int3

_runtime.(*pageAlloc).free:
 10216c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10216c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10216cd:	0f 86 d4 02 00 00 	jbe	724 <_runtime.(*pageAlloc).free+0x2e7>
 10216d3:	48 83 ec 50 	sub	rsp, 80
 10216d7:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 10216dc:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 10216e1:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 10216e6:	84 02 	test	byte ptr [rdx], al
 10216e8:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10216ed:	48 bb 00 00 00 00 00 80 00 00 	movabs	rbx, 140737488355328
 10216f7:	48 8d 34 03 	lea	rsi, [rbx + rax]
 10216fb:	48 8b ba 78 00 01 00 	mov	rdi, qword ptr [rdx + 65656]
 1021702:	48 01 fb 	add	rbx, rdi
 1021705:	48 39 de 	cmp	rsi, rbx
 1021708:	0f 83 40 02 00 00 	jae	576 <_runtime.(*pageAlloc).free+0x28e>
 102170e:	48 c7 c1 ff ff ff ff 	mov	rcx, -1
 1021715:	48 85 c9 	test	rcx, rcx
 1021718:	7d 07 	jge	7 <_runtime.(*pageAlloc).free+0x61>
 102171a:	48 89 82 78 00 01 00 	mov	qword ptr [rdx + 65656], rax
 1021721:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1021726:	48 83 fb 01 	cmp	rbx, 1
 102172a:	0f 84 c7 01 00 00 	je	455 <_runtime.(*pageAlloc).free+0x237>
 1021730:	48 c1 e3 0d 	shl	rbx, 13
 1021734:	4c 8d 04 03 	lea	r8, [rbx + rax]
 1021738:	48 8d 1c 03 	lea	rbx, [rbx + rax]
 102173c:	48 8d 5b ff 	lea	rbx, [rbx - 1]
 1021740:	90 	nop
 1021741:	90 	nop
 1021742:	90 	nop
 1021743:	90 	nop
 1021744:	49 89 f1 	mov	r9, rsi
 1021747:	48 c1 ee 16 	shr	rsi, 22
 102174b:	49 ba ff ff ff ff ff 7f 00 00 	movabs	r10, 140737488355327
 1021755:	4d 01 d0 	add	r8, r10
 1021758:	4d 89 c2 	mov	r10, r8
 102175b:	49 c1 e8 16 	shr	r8, 22
 102175f:	48 25 ff ff 3f 00 	and	rax, 4194303
 1021765:	48 c1 e8 0d 	shr	rax, 13
 1021769:	48 81 e3 ff ff 3f 00 	and	rbx, 4194303
 1021770:	48 c1 eb 0d 	shr	rbx, 13
 1021774:	49 39 f0 	cmp	r8, rsi
 1021777:	0f 84 37 01 00 00 	je	311 <_runtime.(*pageAlloc).free+0x1f4>
 102177d:	49 c1 e9 23 	shr	r9, 35
 1021781:	49 81 f9 00 20 00 00 	cmp	r9, 8192
 1021788:	0f 83 e7 01 00 00 	jae	487 <_runtime.(*pageAlloc).free+0x2b5>
 102178e:	4c 89 54 24 40 	mov	qword ptr [rsp + 64], r10
 1021793:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 1021798:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 102179d:	4c 89 44 24 28 	mov	qword ptr [rsp + 40], r8
 10217a2:	4a 8b 4c ca 78 	mov	rcx, qword ptr [rdx + 8*r9 + 120]
 10217a7:	84 01 	test	byte ptr [rcx], al
 10217a9:	48 81 e6 ff 1f 00 00 	and	rsi, 8191
 10217b0:	48 c1 e6 07 	shl	rsi, 7
 10217b4:	48 8d 0c 31 	lea	rcx, [rcx + rsi]
 10217b8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10217bc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10217c1:	48 05 00 fe ff ff 	add	rax, -512
 10217c7:	48 f7 d8 	neg	rax
 10217ca:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10217cf:	e8 bc 11 00 00 	call	4540 <_runtime.(*pageBits).clearRange>
 10217d4:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10217d9:	48 ff c0 	inc	rax
 10217dc:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10217e1:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 10217e6:	eb 36 	jmp	54 <_runtime.(*pageAlloc).free+0x15e>
 10217e8:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 10217ed:	48 8b 44 c1 78 	mov	rax, qword ptr [rcx + 8*rax + 120]
 10217f2:	84 00 	test	byte ptr [rax], al
 10217f4:	48 81 e3 ff 1f 00 00 	and	rbx, 8191
 10217fb:	48 c1 e3 07 	shl	rbx, 7
 10217ff:	48 8d 04 18 	lea	rax, [rax + rbx]
 1021803:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021807:	e8 b4 12 00 00 	call	4788 <_runtime.(*pageBits).clearAll>
 102180c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1021811:	48 ff c0 	inc	rax
 1021814:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1021819:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 102181e:	48 39 d0 	cmp	rax, rdx
 1021821:	73 14 	jae	20 <_runtime.(*pageAlloc).free+0x177>
 1021823:	48 89 c3 	mov	rbx, rax
 1021826:	48 c1 e8 0d 	shr	rax, 13
 102182a:	48 3d 00 20 00 00 	cmp	rax, 8192
 1021830:	72 b6 	jb	-74 <_runtime.(*pageAlloc).free+0x128>
 1021832:	e9 34 01 00 00 	jmp	308 <_runtime.(*pageAlloc).free+0x2ab>
 1021837:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102183c:	48 c1 e8 23 	shr	rax, 35
 1021840:	48 3d 00 20 00 00 	cmp	rax, 8192
 1021846:	0f 83 15 01 00 00 	jae	277 <_runtime.(*pageAlloc).free+0x2a1>
 102184c:	48 8b 44 c1 78 	mov	rax, qword ptr [rcx + 8*rax + 120]
 1021851:	84 00 	test	byte ptr [rax], al
 1021853:	48 81 e2 ff 1f 00 00 	and	rdx, 8191
 102185a:	48 c1 e2 07 	shl	rdx, 7
 102185e:	48 8d 04 10 	lea	rax, [rax + rdx]
 1021862:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021866:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 102186f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1021874:	48 ff c0 	inc	rax
 1021877:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102187c:	e8 0f 11 00 00 	call	4367 <_runtime.(*pageBits).clearRange>
 1021881:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1021886:	48 89 04 24 	mov	qword ptr [rsp], rax
 102188a:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 102188f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1021894:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1021899:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102189e:	66 c7 44 24 18 01 00 	mov	word ptr [rsp + 24], 1
 10218a5:	e8 f6 e3 ff ff 	call	-7178 <_runtime.(*pageAlloc).update>
 10218aa:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10218af:	48 83 c4 50 	add	rsp, 80
 10218b3:	c3 	ret
 10218b4:	49 c1 e9 23 	shr	r9, 35
 10218b8:	49 81 f9 00 20 00 00 	cmp	r9, 8192
 10218bf:	0f 83 bd 00 00 00 	jae	189 <_runtime.(*pageAlloc).free+0x2c2>
 10218c5:	4a 8b 4c ca 78 	mov	rcx, qword ptr [rdx + 8*r9 + 120]
 10218ca:	84 01 	test	byte ptr [rcx], al
 10218cc:	48 81 e6 ff 1f 00 00 	and	rsi, 8191
 10218d3:	48 c1 e6 07 	shl	rsi, 7
 10218d7:	48 8d 0c 31 	lea	rcx, [rcx + rsi]
 10218db:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10218df:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10218e4:	48 8d 4b 01 	lea	rcx, [rbx + 1]
 10218e8:	48 29 c1 	sub	rcx, rax
 10218eb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10218f0:	e8 9b 10 00 00 	call	4251 <_runtime.(*pageBits).clearRange>
 10218f5:	eb 8a 	jmp	-118 <_runtime.(*pageAlloc).free+0x1c1>
 10218f7:	90 	nop
 10218f8:	48 89 f7 	mov	rdi, rsi
 10218fb:	48 c1 ee 23 	shr	rsi, 35
 10218ff:	48 81 fe 00 20 00 00 	cmp	rsi, 8192
 1021906:	0f 83 8d 00 00 00 	jae	141 <_runtime.(*pageAlloc).free+0x2d9>
 102190c:	48 8b 74 f2 78 	mov	rsi, qword ptr [rdx + 8*rsi + 120]
 1021911:	84 06 	test	byte ptr [rsi], al
 1021913:	48 c1 ef 16 	shr	rdi, 22
 1021917:	48 81 e7 ff 1f 00 00 	and	rdi, 8191
 102191e:	48 c1 e7 07 	shl	rdi, 7
 1021922:	48 8d 34 3e 	lea	rsi, [rsi + rdi]
 1021926:	48 25 ff ff 3f 00 	and	rax, 4194303
 102192c:	49 89 c0 	mov	r8, rax
 102192f:	48 c1 e8 13 	shr	rax, 19
 1021933:	48 83 f8 08 	cmp	rax, 8
 1021937:	73 56 	jae	86 <_runtime.(*pageAlloc).free+0x2cf>
 1021939:	49 c1 e8 0d 	shr	r8, 13
 102193d:	48 8b 0c c6 	mov	rcx, qword ptr [rsi + 8*rax]
 1021941:	4c 0f b3 c1 	btr	rcx, r8
 1021945:	48 89 0c c6 	mov	qword ptr [rsi + 8*rax], rcx
 1021949:	e9 33 ff ff ff 	jmp	-205 <_runtime.(*pageAlloc).free+0x1c1>
 102194e:	76 0a 	jbe	10 <_runtime.(*pageAlloc).free+0x29a>
 1021950:	b9 01 00 00 00 	mov	ecx, 1
 1021955:	e9 bb fd ff ff 	jmp	-581 <_runtime.(*pageAlloc).free+0x55>
 102195a:	31 c9 	xor	ecx, ecx
 102195c:	e9 b4 fd ff ff 	jmp	-588 <_runtime.(*pageAlloc).free+0x55>
 1021961:	b9 00 20 00 00 	mov	ecx, 8192
 1021966:	e8 f5 19 03 00 	call	203253 <_runtime.panicIndexU>
 102196b:	b9 00 20 00 00 	mov	ecx, 8192
 1021970:	e8 eb 19 03 00 	call	203243 <_runtime.panicIndexU>
 1021975:	4c 89 c8 	mov	rax, r9
 1021978:	b9 00 20 00 00 	mov	ecx, 8192
 102197d:	e8 de 19 03 00 	call	203230 <_runtime.panicIndexU>
 1021982:	4c 89 c8 	mov	rax, r9
 1021985:	b9 00 20 00 00 	mov	ecx, 8192
 102198a:	e8 d1 19 03 00 	call	203217 <_runtime.panicIndexU>
 102198f:	b9 08 00 00 00 	mov	ecx, 8
 1021994:	e8 c7 19 03 00 	call	203207 <_runtime.panicIndexU>
 1021999:	48 89 f0 	mov	rax, rsi
 102199c:	b9 00 20 00 00 	mov	ecx, 8192
 10219a1:	e8 ba 19 03 00 	call	203194 <_runtime.panicIndexU>
 10219a6:	90 	nop
 10219a7:	e8 24 f2 02 00 	call	193060 <_runtime.morestack_noctxt>
 10219ac:	e9 0f fd ff ff 	jmp	-753 <_runtime.(*pageAlloc).free>
 10219b1:	cc 	int3
 10219b2:	cc 	int3
 10219b3:	cc 	int3
 10219b4:	cc 	int3
 10219b5:	cc 	int3
 10219b6:	cc 	int3
 10219b7:	cc 	int3
 10219b8:	cc 	int3
 10219b9:	cc 	int3
 10219ba:	cc 	int3
 10219bb:	cc 	int3
 10219bc:	cc 	int3
 10219bd:	cc 	int3
 10219be:	cc 	int3
 10219bf:	cc 	int3

_runtime.mergeSummaries:
 10219c0:	48 83 ec 18 	sub	rsp, 24
 10219c4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10219c9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10219ce:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10219d3:	48 85 c9 	test	rcx, rcx
 10219d6:	0f 86 40 01 00 00 	jbe	320 <_runtime.mergeSummaries+0x15c>
 10219dc:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10219e1:	48 8b 10 	mov	rdx, qword ptr [rax]
 10219e4:	48 0f ba e2 3f 	bt	rdx, 63
 10219e9:	0f 83 05 01 00 00 	jae	261 <_runtime.mergeSummaries+0x134>
 10219ef:	ba 00 00 20 00 	mov	edx, 2097152
 10219f4:	bb 00 00 20 00 	mov	ebx, 2097152
 10219f9:	be 00 00 20 00 	mov	esi, 2097152
 10219fe:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1021a03:	41 b8 01 00 00 00 	mov	r8d, 1
 1021a09:	eb 53 	jmp	83 <_runtime.mergeSummaries+0x9e>
 1021a0b:	48 83 ff 40 	cmp	rdi, 64
 1021a0f:	4d 19 e4 	sbb	r12, r12
 1021a12:	49 89 cd 	mov	r13, rcx
 1021a15:	48 89 f9 	mov	rcx, rdi
 1021a18:	4d 89 c6 	mov	r14, r8
 1021a1b:	49 d3 e0 	shl	r8, cl
 1021a1e:	4d 21 e0 	and	r8, r12
 1021a21:	4e 8d 3c 0a 	lea	r15, [rdx + r9]
 1021a25:	49 39 d0 	cmp	r8, rdx
 1021a28:	49 0f 44 d7 	cmove	rdx, r15
 1021a2c:	41 bf 01 00 00 00 	mov	r15d, 1
 1021a32:	49 d3 e7 	shl	r15, cl
 1021a35:	4d 21 e7 	and	r15, r12
 1021a38:	4d 8d 24 37 	lea	r12, [r15 + rsi]
 1021a3c:	4d 39 fb 	cmp	r11, r15
 1021a3f:	4d 0f 44 dc 	cmove	r11, r12
 1021a43:	49 01 f1 	add	r9, rsi
 1021a46:	49 39 d9 	cmp	r9, rbx
 1021a49:	49 0f 47 d9 	cmova	rbx, r9
 1021a4d:	49 39 da 	cmp	r10, rbx
 1021a50:	49 0f 47 da 	cmova	rbx, r10
 1021a54:	4d 8d 46 01 	lea	r8, [r14 + 1]
 1021a58:	4c 89 e9 	mov	rcx, r13
 1021a5b:	4c 89 de 	mov	rsi, r11
 1021a5e:	49 39 c8 	cmp	r8, rcx
 1021a61:	7d 47 	jge	71 <_runtime.mergeSummaries+0xea>
 1021a63:	4e 8b 0c c0 	mov	r9, qword ptr [rax + 8*r8]
 1021a67:	49 0f ba e1 3f 	bt	r9, 63
 1021a6c:	73 14 	jae	20 <_runtime.mergeSummaries+0xc2>
 1021a6e:	41 b9 00 00 20 00 	mov	r9d, 2097152
 1021a74:	41 ba 00 00 20 00 	mov	r10d, 2097152
 1021a7a:	41 bb 00 00 20 00 	mov	r11d, 2097152
 1021a80:	eb 89 	jmp	-119 <_runtime.mergeSummaries+0x4b>
 1021a82:	4d 89 ca 	mov	r10, r9
 1021a85:	49 81 e1 ff ff 1f 00 	and	r9, 2097151
 1021a8c:	4d 89 d3 	mov	r11, r10
 1021a8f:	49 c1 ea 15 	shr	r10, 21
 1021a93:	49 81 e2 ff ff 1f 00 	and	r10, 2097151
 1021a9a:	49 c1 eb 2a 	shr	r11, 42
 1021a9e:	49 81 e3 ff ff 1f 00 	and	r11, 2097151
 1021aa5:	e9 61 ff ff ff 	jmp	-159 <_runtime.mergeSummaries+0x4b>
 1021aaa:	48 81 fb 00 00 20 00 	cmp	rbx, 2097152
 1021ab1:	75 19 	jne	25 <_runtime.mergeSummaries+0x10c>
 1021ab3:	48 b8 00 00 00 00 00 00 00 80 	movabs	rax, -9223372036854775808
 1021abd:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1021ac2:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1021ac7:	48 83 c4 18 	add	rsp, 24
 1021acb:	c3 	ret
 1021acc:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 1021ad3:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 1021ada:	48 c1 e3 15 	shl	rbx, 21
 1021ade:	48 09 d3 	or	rbx, rdx
 1021ae1:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 1021ae8:	48 c1 e6 2a 	shl	rsi, 42
 1021aec:	48 09 de 	or	rsi, rbx
 1021aef:	48 89 f0 	mov	rax, rsi
 1021af2:	eb c9 	jmp	-55 <_runtime.mergeSummaries+0xfd>
 1021af4:	48 89 d3 	mov	rbx, rdx
 1021af7:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 1021afe:	48 89 de 	mov	rsi, rbx
 1021b01:	48 c1 eb 15 	shr	rbx, 21
 1021b05:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 1021b0c:	48 c1 ee 2a 	shr	rsi, 42
 1021b10:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 1021b17:	e9 e2 fe ff ff 	jmp	-286 <_runtime.mergeSummaries+0x3e>
 1021b1c:	31 c0 	xor	eax, eax
 1021b1e:	e8 2d 18 03 00 	call	202797 <_runtime.panicIndex>
 1021b23:	90 	nop
 1021b24:	cc 	int3
 1021b25:	cc 	int3
 1021b26:	cc 	int3
 1021b27:	cc 	int3
 1021b28:	cc 	int3
 1021b29:	cc 	int3
 1021b2a:	cc 	int3
 1021b2b:	cc 	int3
 1021b2c:	cc 	int3
 1021b2d:	cc 	int3
 1021b2e:	cc 	int3
 1021b2f:	cc 	int3

_runtime.(*pageAlloc).sysInit:
 1021b30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1021b39:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 1021b3e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1021b42:	0f 86 67 01 00 00 	jbe	359 <_runtime.(*pageAlloc).sysInit+0x17f>
 1021b48:	48 81 ec 88 00 00 00 	sub	rsp, 136
 1021b4f:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1021b57:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 1021b5f:	48 8b 05 7a 97 0a 00 	mov	rax, qword ptr [rip + 694138]
 1021b66:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1021b6b:	0f 10 05 76 97 0a 00 	movups	xmm0, xmmword ptr [rip + 694134]
 1021b72:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 1021b77:	0f 10 05 7a 97 0a 00 	movups	xmm0, xmmword ptr [rip + 694138]
 1021b7e:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 1021b83:	31 c0 	xor	eax, eax
 1021b85:	eb 04 	jmp	4 <_runtime.(*pageAlloc).sysInit+0x5b>
 1021b87:	49 8d 40 01 	lea	rax, [r8 + 1]
 1021b8b:	48 83 f8 05 	cmp	rax, 5
 1021b8f:	0f 8d f0 00 00 00 	jge	240 <_runtime.(*pageAlloc).sysInit+0x155>
 1021b95:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1021b9a:	48 8b 54 c4 40 	mov	rdx, qword ptr [rsp + 8*rax + 64]
 1021b9f:	48 8b 1d f2 5c 0d 00 	mov	rbx, qword ptr [rip + 875762]
 1021ba6:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1021bae:	48 8d 4a d0 	lea	rcx, [rdx - 48]
 1021bb2:	48 f7 d9 	neg	rcx
 1021bb5:	48 83 f9 40 	cmp	rcx, 64
 1021bb9:	48 19 d2 	sbb	rdx, rdx
 1021bbc:	be 01 00 00 00 	mov	esi, 1
 1021bc1:	48 d3 e6 	shl	rsi, cl
 1021bc4:	48 21 d6 	and	rsi, rdx
 1021bc7:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 1021bcc:	48 8d 14 f3 	lea	rdx, [rbx + 8*rsi]
 1021bd0:	48 8d 52 ff 	lea	rdx, [rdx - 1]
 1021bd4:	48 f7 db 	neg	rbx
 1021bd7:	48 21 da 	and	rdx, rbx
 1021bda:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1021bdf:	48 ba 00 00 00 00 02 10 00 00 	movabs	rdx, 17600775979008
 1021be9:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1021bee:	ba ff ff ff ff 	mov	edx, 4294967295
 1021bf3:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1021bf8:	e8 33 13 02 00 	call	135987 <_runtime.mmap>
 1021bfd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1021c02:	48 83 7c 24 28 00 	cmp	qword ptr [rsp + 40], 0
 1021c08:	ba 00 00 00 00 	mov	edx, 0
 1021c0d:	48 0f 45 c2 	cmovne	rax, rdx
 1021c11:	48 85 c0 	test	rax, rax
 1021c14:	74 7f 	je	127 <_runtime.(*pageAlloc).sysInit+0x165>
 1021c16:	0f 57 c0 	xorps	xmm0, xmm0
 1021c19:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 1021c1e:	48 c7 44 24 78 00 00 00 00 	mov	qword ptr [rsp + 120], 0
 1021c27:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1021c2c:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 1021c35:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1021c3a:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 1021c3f:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1021c47:	84 06 	test	byte ptr [rsi], al
 1021c49:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 1021c4e:	4f 8d 0c 40 	lea	r9, [r8 + 2*r8]
 1021c52:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1021c57:	4a c7 44 ce 08 00 00 00 00 	mov	qword ptr [rsi + 8*r9 + 8], 0
 1021c60:	4a 89 5c ce 10 	mov	qword ptr [rsi + 8*r9 + 16], rbx
 1021c65:	4a 8d 3c ce 	lea	rdi, [rsi + 8*r9]
 1021c69:	83 3d 90 5c 0d 00 00 	cmp	dword ptr [rip + 875664], 0
 1021c70:	75 09 	jne	9 <_runtime.(*pageAlloc).sysInit+0x14b>
 1021c72:	4a 89 04 ce 	mov	qword ptr [rsi + 8*r9], rax
 1021c76:	e9 0c ff ff ff 	jmp	-244 <_runtime.(*pageAlloc).sysInit+0x57>
 1021c7b:	e8 60 0d 03 00 	call	200032 <_runtime.gcWriteBarrier>
 1021c80:	e9 02 ff ff ff 	jmp	-254 <_runtime.(*pageAlloc).sysInit+0x57>
 1021c85:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1021c8d:	48 81 c4 88 00 00 00 	add	rsp, 136
 1021c94:	c3 	ret
 1021c95:	48 8d 05 02 48 05 00 	lea	rax, [rip + 346114]
 1021c9c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021ca0:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 1021ca9:	e8 b2 70 00 00 	call	28850 <_runtime.throw>
 1021cae:	90 	nop
 1021caf:	e8 1c ef 02 00 	call	192284 <_runtime.morestack_noctxt>
 1021cb4:	e9 77 fe ff ff 	jmp	-393 <_runtime.(*pageAlloc).sysInit>
 1021cb9:	cc 	int3
 1021cba:	cc 	int3
 1021cbb:	cc 	int3
 1021cbc:	cc 	int3
 1021cbd:	cc 	int3
 1021cbe:	cc 	int3
 1021cbf:	cc 	int3

_runtime.(*pageAlloc).sysGrow:
 1021cc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1021cc9:	48 8d 44 24 e0 	lea	rax, [rsp - 32]
 1021cce:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1021cd2:	0f 86 e6 03 00 00 	jbe	998 <_runtime.(*pageAlloc).sysGrow+0x3fe>
 1021cd8:	48 81 ec a0 00 00 00 	sub	rsp, 160
 1021cdf:	48 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], rbp
 1021ce7:	48 8d ac 24 98 00 00 00 	lea	rbp, [rsp + 152]
 1021cef:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1021cf7:	48 a9 ff ff 3f 00 	test	rax, 4194303
 1021cfd:	0f 85 3e 03 00 00 	jne	830 <_runtime.(*pageAlloc).sysGrow+0x381>
 1021d03:	48 8b 8c 24 b8 00 00 00 	mov	rcx, qword ptr [rsp + 184]
 1021d0b:	48 f7 c1 ff ff 3f 00 	test	rcx, 4194303
 1021d12:	0f 85 29 03 00 00 	jne	809 <_runtime.(*pageAlloc).sysGrow+0x381>
 1021d18:	0f 57 c0 	xorps	xmm0, xmm0
 1021d1b:	0f 11 44 24 70 	movups	xmmword ptr [rsp + 112], xmm0
 1021d20:	48 8d 0d 29 d1 02 00 	lea	rcx, [rip + 184617]
 1021d27:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1021d2c:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 1021d34:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 1021d39:	0f 11 84 24 80 00 00 00 	movups	xmmword ptr [rsp + 128], xmm0
 1021d41:	48 c7 84 24 90 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 144], 0
 1021d4d:	48 8d 15 8c d1 02 00 	lea	rdx, [rip + 184716]
 1021d54:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 1021d5c:	48 8d 15 7d 59 05 00 	lea	rdx, [rip + 350589]
 1021d63:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 1021d6b:	48 8d 5c 24 70 	lea	rbx, [rsp + 112]
 1021d70:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 1021d78:	84 01 	test	byte ptr [rcx], al
 1021d7a:	48 8d 99 a0 00 01 00 	lea	rbx, [rcx + 65696]
 1021d81:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1021d85:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1021d8a:	e8 61 2c 00 00 	call	11361 <_runtime.(*addrRanges).findSucc>
 1021d8f:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1021d94:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1021d99:	31 c9 	xor	ecx, ecx
 1021d9b:	eb 06 	jmp	6 <_runtime.(*pageAlloc).sysGrow+0xe3>
 1021d9d:	48 ff c3 	inc	rbx
 1021da0:	48 89 d9 	mov	rcx, rbx
 1021da3:	48 83 f9 05 	cmp	rcx, 5
 1021da7:	0f 8d 68 02 00 00 	jge	616 <_runtime.(*pageAlloc).sysGrow+0x355>
 1021dad:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1021db2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1021db6:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1021dbe:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1021dc3:	48 8b 9c 24 b8 00 00 00 	mov	rbx, qword ptr [rsp + 184]
 1021dcb:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1021dd0:	48 8b 35 09 59 05 00 	mov	rsi, qword ptr [rip + 350473]
 1021dd7:	48 8d 15 02 59 05 00 	lea	rdx, [rip + 350466]
 1021dde:	ff d6 	call	rsi
 1021de0:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1021de5:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1021dea:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1021def:	48 8d 34 5b 	lea	rsi, [rbx + 2*rbx]
 1021df3:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 1021dfb:	48 8b 54 f7 10 	mov	rdx, qword ptr [rdi + 8*rsi + 16]
 1021e00:	4c 8d 04 f7 	lea	r8, [rdi + 8*rsi]
 1021e04:	49 39 48 08 	cmp	qword ptr [r8 + 8], rcx
 1021e08:	7d 0e 	jge	14 <_runtime.(*pageAlloc).sysGrow+0x158>
 1021e0a:	48 39 d1 	cmp	rcx, rdx
 1021e0d:	0f 87 29 02 00 00 	ja	553 <_runtime.(*pageAlloc).sysGrow+0x37c>
 1021e13:	48 89 4c f7 08 	mov	qword ptr [rdi + 8*rsi + 8], rcx
 1021e18:	90 	nop
 1021e19:	4c 8b 05 78 5a 0d 00 	mov	r8, qword ptr [rip + 875128]
 1021e20:	48 c1 e0 03 	shl	rax, 3
 1021e24:	90 	nop
 1021e25:	4c 8b 0c f7 	mov	r9, qword ptr [rdi + 8*rsi]
 1021e29:	48 8b 74 f7 08 	mov	rsi, qword ptr [rdi + 8*rsi + 8]
 1021e2e:	4d 89 c2 	mov	r10, r8
 1021e31:	49 f7 d8 	neg	r8
 1021e34:	4c 21 c0 	and	rax, r8
 1021e37:	4d 8d 14 ca 	lea	r10, [r10 + 8*rcx]
 1021e3b:	4d 8d 52 ff 	lea	r10, [r10 - 1]
 1021e3f:	4d 21 c2 	and	r10, r8
 1021e42:	48 85 f6 	test	rsi, rsi
 1021e45:	0f 86 e7 01 00 00 	jbe	487 <_runtime.(*pageAlloc).sysGrow+0x372>
 1021e4b:	49 8d 34 01 	lea	rsi, [r9 + rax]
 1021e4f:	4f 8d 04 11 	lea	r8, [r9 + r10]
 1021e53:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1021e58:	48 85 c0 	test	rax, rax
 1021e5b:	0f 8f 15 01 00 00 	jg	277 <_runtime.(*pageAlloc).sysGrow+0x2b6>
 1021e61:	4c 8b 8f a0 00 01 00 	mov	r9, qword ptr [rdi + 65696]
 1021e68:	48 8b 8f a8 00 01 00 	mov	rcx, qword ptr [rdi + 65704]
 1021e6f:	48 39 c8 	cmp	rax, rcx
 1021e72:	7c 78 	jl	120 <_runtime.(*pageAlloc).sysGrow+0x22c>
 1021e74:	4c 89 c1 	mov	rcx, r8
 1021e77:	49 29 f0 	sub	r8, rsi
 1021e7a:	48 39 f1 	cmp	rcx, rsi
 1021e7d:	b9 00 00 00 00 	mov	ecx, 0
 1021e82:	4c 0f 46 c1 	cmovbe	r8, rcx
 1021e86:	4d 85 c0 	test	r8, r8
 1021e89:	0f 84 0e ff ff ff 	je	-242 <_runtime.(*pageAlloc).sysGrow+0xdd>
 1021e8f:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 1021e94:	48 89 74 24 58 	mov	qword ptr [rsp + 88], rsi
 1021e99:	48 8b 8f c8 00 01 00 	mov	rcx, qword ptr [rdi + 65736]
 1021ea0:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1021ea4:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1021ea9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1021eae:	e8 ed f0 fe ff 	call	-69395 <_runtime.sysMap>
 1021eb3:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1021eb8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1021ebc:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1021ec1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1021ec6:	c7 44 24 10 08 00 00 00 	mov	dword ptr [rsp + 16], 8
 1021ece:	e8 6d 11 02 00 	call	135533 <_runtime.madvise>
 1021ed3:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1021ed8:	31 c9 	xor	ecx, ecx
 1021eda:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1021edf:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 1021ee7:	e9 b1 fe ff ff 	jmp	-335 <_runtime.(*pageAlloc).sysGrow+0xdd>
 1021eec:	0f 83 33 01 00 00 	jae	307 <_runtime.(*pageAlloc).sysGrow+0x365>
 1021ef2:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 1021ef7:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 1021efc:	48 c1 e0 04 	shl	rax, 4
 1021f00:	4a 8b 74 08 08 	mov	rsi, qword ptr [rax + r9 + 8]
 1021f05:	4a 8b 04 08 	mov	rax, qword ptr [rax + r9]
 1021f09:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1021f0d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1021f12:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1021f17:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1021f1f:	48 8d 94 24 80 00 00 00 	lea	rdx, [rsp + 128]
 1021f27:	ff d0 	call	rax
 1021f29:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1021f2e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1021f33:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1021f38:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1021f3c:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1021f41:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1021f46:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1021f4b:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1021f50:	e8 2b 29 00 00 	call	10539 <_runtime.addrRange.subtract>
 1021f55:	4c 8b 44 24 28 	mov	r8, qword ptr [rsp + 40]
 1021f5a:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1021f5f:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1021f64:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1021f69:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 1021f71:	e9 fe fe ff ff 	jmp	-258 <_runtime.(*pageAlloc).sysGrow+0x1b4>
 1021f76:	4c 8b 8f a0 00 01 00 	mov	r9, qword ptr [rdi + 65696]
 1021f7d:	48 8b 8f a8 00 01 00 	mov	rcx, qword ptr [rdi + 65704]
 1021f84:	4c 8d 50 ff 	lea	r10, [rax - 1]
 1021f88:	49 39 ca 	cmp	r10, rcx
 1021f8b:	0f 83 99 00 00 00 	jae	153 <_runtime.(*pageAlloc).sysGrow+0x36a>
 1021f91:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 1021f96:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 1021f9b:	49 c1 e2 04 	shl	r10, 4
 1021f9f:	4b 8b 44 0a 08 	mov	rax, qword ptr [r10 + r9 + 8]
 1021fa4:	4b 8b 0c 0a 	mov	rcx, qword ptr [r10 + r9]
 1021fa8:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1021fac:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1021fb1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1021fb6:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1021fbe:	48 8d 94 24 80 00 00 00 	lea	rdx, [rsp + 128]
 1021fc6:	ff d0 	call	rax
 1021fc8:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1021fcd:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1021fd2:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1021fd7:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1021fdb:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1021fe0:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1021fe5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1021fea:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1021fef:	e8 8c 28 00 00 	call	10380 <_runtime.addrRange.subtract>
 1021ff4:	4c 8b 44 24 28 	mov	r8, qword ptr [rsp + 40]
 1021ff9:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1021ffe:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1022003:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1022008:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 1022010:	e9 4c fe ff ff 	jmp	-436 <_runtime.(*pageAlloc).sysGrow+0x1a1>
 1022015:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 102201d:	48 81 c4 a0 00 00 00 	add	rsp, 160
 1022024:	c3 	ret
 1022025:	e8 26 13 03 00 	call	201510 <_runtime.panicIndex>
 102202a:	4c 89 d0 	mov	rax, r10
 102202d:	e8 1e 13 03 00 	call	201502 <_runtime.panicIndex>
 1022032:	31 c0 	xor	eax, eax
 1022034:	48 89 f1 	mov	rcx, rsi
 1022037:	e8 14 13 03 00 	call	201492 <_runtime.panicIndex>
 102203c:	e8 4f 13 03 00 	call	201551 <_runtime.panicSliceAcap>
 1022041:	e8 5a 84 00 00 	call	33882 <_runtime.printlock>
 1022046:	48 8d 05 a5 1b 05 00 	lea	rax, [rip + 334757]
 102204d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1022051:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102205a:	e8 81 8d 00 00 	call	36225 <_runtime.printstring>
 102205f:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1022067:	48 89 04 24 	mov	qword ptr [rsp], rax
 102206b:	e8 20 8c 00 00 	call	35872 <_runtime.printhex>
 1022070:	48 8d 05 dc 11 05 00 	lea	rax, [rip + 332252]
 1022077:	48 89 04 24 	mov	qword ptr [rsp], rax
 102207b:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1022084:	e8 57 8d 00 00 	call	36183 <_runtime.printstring>
 1022089:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1022091:	48 89 04 24 	mov	qword ptr [rsp], rax
 1022095:	e8 f6 8b 00 00 	call	35830 <_runtime.printhex>
 102209a:	e8 91 86 00 00 	call	34449 <_runtime.printnl>
 102209f:	e8 7c 84 00 00 	call	33916 <_runtime.printunlock>
 10220a4:	48 8d 05 55 4e 05 00 	lea	rax, [rip + 347733]
 10220ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10220af:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 10220b8:	e8 a3 6c 00 00 	call	27811 <_runtime.throw>
 10220bd:	90 	nop
 10220be:	e8 0d eb 02 00 	call	191245 <_runtime.morestack_noctxt>
 10220c3:	e9 f8 fb ff ff 	jmp	-1032 <_runtime.(*pageAlloc).sysGrow>
 10220c8:	cc 	int3
 10220c9:	cc 	int3
 10220ca:	cc 	int3
 10220cb:	cc 	int3
 10220cc:	cc 	int3
 10220cd:	cc 	int3
 10220ce:	cc 	int3
 10220cf:	cc 	int3

_runtime.(*pageCache).alloc:
 10220d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10220d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10220dd:	0f 86 eb 00 00 00 	jbe	235 <_runtime.(*pageCache).alloc+0xfe>
 10220e3:	48 83 ec 28 	sub	rsp, 40
 10220e7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10220ec:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10220f1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10220f6:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 10220fa:	48 85 d2 	test	rdx, rdx
 10220fd:	0f 84 af 00 00 00 	je	175 <_runtime.(*pageCache).alloc+0xe2>
 1022103:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1022108:	48 83 fb 01 	cmp	rbx, 1
 102210c:	75 78 	jne	120 <_runtime.(*pageCache).alloc+0xb6>
 102210e:	48 89 d3 	mov	rbx, rdx
 1022111:	48 f7 da 	neg	rdx
 1022114:	48 21 da 	and	rdx, rbx
 1022117:	48 be 09 8b ca b4 71 9d f7 03 	movabs	rsi, 285870213051353865
 1022121:	48 0f af d6 	imul	rdx, rsi
 1022125:	48 c1 ea 3a 	shr	rdx, 58
 1022129:	48 8d 35 30 92 0a 00 	lea	rsi, [rip + 692784]
 1022130:	0f b6 0c 16 	movzx	ecx, byte ptr [rsi + rdx]
 1022134:	48 83 f9 40 	cmp	rcx, 64
 1022138:	48 19 d2 	sbb	rdx, rdx
 102213b:	90 	nop
 102213c:	48 8b 70 10 	mov	rsi, qword ptr [rax + 16]
 1022140:	bf 01 00 00 00 	mov	edi, 1
 1022145:	48 d3 e7 	shl	rdi, cl
 1022148:	48 21 d7 	and	rdi, rdx
 102214b:	48 f7 d7 	not	rdi
 102214e:	48 21 fb 	and	rbx, rdi
 1022151:	48 89 58 08 	mov	qword ptr [rax + 8], rbx
 1022155:	48 21 78 10 	and	qword ptr [rax + 16], rdi
 1022159:	89 cb 	mov	ebx, ecx
 102215b:	48 c1 e1 0d 	shl	rcx, 13
 102215f:	48 03 08 	add	rcx, qword ptr [rax]
 1022162:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1022167:	89 d9 	mov	ecx, ebx
 1022169:	48 d3 ee 	shr	rsi, cl
 102216c:	48 21 d6 	and	rsi, rdx
 102216f:	48 83 e6 01 	and	rsi, 1
 1022173:	48 c1 e6 0d 	shl	rsi, 13
 1022177:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 102217c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1022181:	48 83 c4 28 	add	rsp, 40
 1022185:	c3 	ret
 1022186:	48 89 04 24 	mov	qword ptr [rsp], rax
 102218a:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 102218f:	e8 4c 00 00 00 	call	76 <_runtime.(*pageCache).allocN>
 1022194:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1022199:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102219e:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10221a3:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10221a8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10221ad:	48 83 c4 28 	add	rsp, 40
 10221b1:	c3 	ret
 10221b2:	48 c7 44 24 40 00 00 00 00 	mov	qword ptr [rsp + 64], 0
 10221bb:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 10221c4:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10221c9:	48 83 c4 28 	add	rsp, 40
 10221cd:	c3 	ret
 10221ce:	e8 fd e9 02 00 	call	190973 <_runtime.morestack_noctxt>
 10221d3:	e9 f8 fe ff ff 	jmp	-264 <_runtime.(*pageCache).alloc>
 10221d8:	cc 	int3
 10221d9:	cc 	int3
 10221da:	cc 	int3
 10221db:	cc 	int3
 10221dc:	cc 	int3
 10221dd:	cc 	int3
 10221de:	cc 	int3
 10221df:	cc 	int3

_runtime.(*pageCache).allocN:
 10221e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10221e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10221ed:	0f 86 18 01 00 00 	jbe	280 <_runtime.(*pageCache).allocN+0x12b>
 10221f3:	48 83 ec 20 	sub	rsp, 32
 10221f7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10221fc:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1022201:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1022206:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102220a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102220e:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1022213:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1022218:	e8 93 12 00 00 	call	4755 <_runtime.findBitRange64>
 102221d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1022222:	48 83 f8 40 	cmp	rax, 64
 1022226:	72 1c 	jb	28 <_runtime.(*pageCache).allocN+0x64>
 1022228:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 1022231:	48 c7 44 24 40 00 00 00 00 	mov	qword ptr [rsp + 64], 0
 102223a:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102223f:	48 83 c4 20 	add	rsp, 32
 1022243:	c3 	ret
 1022244:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1022249:	48 83 f9 40 	cmp	rcx, 64
 102224d:	48 19 d2 	sbb	rdx, rdx
 1022250:	bb 01 00 00 00 	mov	ebx, 1
 1022255:	48 d3 e3 	shl	rbx, cl
 1022258:	48 21 d3 	and	rbx, rdx
 102225b:	48 8d 53 ff 	lea	rdx, [rbx - 1]
 102225f:	48 89 c1 	mov	rcx, rax
 1022262:	48 d3 e2 	shl	rdx, cl
 1022265:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 102226a:	48 8b 73 10 	mov	rsi, qword ptr [rbx + 16]
 102226e:	48 89 d7 	mov	rdi, rdx
 1022271:	48 f7 d2 	not	rdx
 1022274:	48 21 53 08 	and	qword ptr [rbx + 8], rdx
 1022278:	48 21 53 10 	and	qword ptr [rbx + 16], rdx
 102227c:	48 c1 e0 0d 	shl	rax, 13
 1022280:	48 03 03 	add	rax, qword ptr [rbx]
 1022283:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1022288:	48 21 fe 	and	rsi, rdi
 102228b:	48 89 f0 	mov	rax, rsi
 102228e:	48 d1 ee 	shr	rsi
 1022291:	48 ba 55 55 55 55 55 55 55 55 	movabs	rdx, 6148914691236517205
 102229b:	48 21 d6 	and	rsi, rdx
 102229e:	48 21 c2 	and	rdx, rax
 10222a1:	48 8d 04 32 	lea	rax, [rdx + rsi]
 10222a5:	48 89 c2 	mov	rdx, rax
 10222a8:	48 c1 e8 02 	shr	rax, 2
 10222ac:	48 bb 33 33 33 33 33 33 33 33 	movabs	rbx, 3689348814741910323
 10222b6:	48 21 d8 	and	rax, rbx
 10222b9:	48 21 d3 	and	rbx, rdx
 10222bc:	48 01 d8 	add	rax, rbx
 10222bf:	48 89 c2 	mov	rdx, rax
 10222c2:	48 c1 e8 04 	shr	rax, 4
 10222c6:	48 01 d0 	add	rax, rdx
 10222c9:	48 ba 0f 0f 0f 0f 0f 0f 0f 0f 	movabs	rdx, 1085102592571150095
 10222d3:	48 21 c2 	and	rdx, rax
 10222d6:	48 89 d0 	mov	rax, rdx
 10222d9:	48 c1 ea 08 	shr	rdx, 8
 10222dd:	48 01 d0 	add	rax, rdx
 10222e0:	48 89 c2 	mov	rdx, rax
 10222e3:	48 c1 e8 10 	shr	rax, 16
 10222e7:	48 01 d0 	add	rax, rdx
 10222ea:	48 89 c2 	mov	rdx, rax
 10222ed:	48 c1 e8 20 	shr	rax, 32
 10222f1:	48 01 d0 	add	rax, rdx
 10222f4:	48 83 e0 7f 	and	rax, 127
 10222f8:	48 c1 e0 0d 	shl	rax, 13
 10222fc:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1022301:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1022306:	48 83 c4 20 	add	rsp, 32
 102230a:	c3 	ret
 102230b:	e8 c0 e8 02 00 	call	190656 <_runtime.morestack_noctxt>
 1022310:	e9 cb fe ff ff 	jmp	-309 <_runtime.(*pageCache).allocN>
 1022315:	cc 	int3
 1022316:	cc 	int3
 1022317:	cc 	int3
 1022318:	cc 	int3
 1022319:	cc 	int3
 102231a:	cc 	int3
 102231b:	cc 	int3
 102231c:	cc 	int3
 102231d:	cc 	int3
 102231e:	cc 	int3
 102231f:	cc 	int3

_runtime.(*pageCache).flush:
 1022320:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1022329:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102232d:	0f 86 01 02 00 00 	jbe	513 <_runtime.(*pageCache).flush+0x214>
 1022333:	48 83 ec 48 	sub	rsp, 72
 1022337:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 102233c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1022341:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1022346:	48 83 7a 08 00 	cmp	qword ptr [rdx + 8], 0
 102234b:	0f 84 b7 01 00 00 	je	439 <_runtime.(*pageCache).flush+0x1e8>
 1022351:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1022354:	90 	nop
 1022355:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 102235f:	48 8d 04 1e 	lea	rax, [rsi + rbx]
 1022363:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1022368:	48 89 c7 	mov	rdi, rax
 102236b:	48 c1 e8 16 	shr	rax, 22
 102236f:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1022374:	48 81 e3 ff ff 3f 00 	and	rbx, 4194303
 102237b:	48 c1 eb 0d 	shr	rbx, 13
 102237f:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1022384:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 1022389:	31 c9 	xor	ecx, ecx
 102238b:	eb 09 	jmp	9 <_runtime.(*pageCache).flush+0x76>
 102238d:	48 ff c1 	inc	rcx
 1022390:	4c 89 d0 	mov	rax, r10
 1022393:	4c 89 cf 	mov	rdi, r9
 1022396:	48 83 f9 40 	cmp	rcx, 64
 102239a:	0f 83 f1 00 00 00 	jae	241 <_runtime.(*pageCache).flush+0x171>
 10223a0:	4c 8b 4a 08 	mov	r9, qword ptr [rdx + 8]
 10223a4:	49 0f a3 c9 	bt	r9, rcx
 10223a8:	0f 83 d8 00 00 00 	jae	216 <_runtime.(*pageCache).flush+0x166>
 10223ae:	41 84 00 	test	byte ptr [r8], al
 10223b1:	49 89 f9 	mov	r9, rdi
 10223b4:	48 c1 ef 23 	shr	rdi, 35
 10223b8:	48 81 ff 00 20 00 00 	cmp	rdi, 8192
 10223bf:	0f 83 61 01 00 00 	jae	353 <_runtime.(*pageCache).flush+0x206>
 10223c5:	49 8b 7c f8 78 	mov	rdi, qword ptr [r8 + 8*rdi + 120]
 10223ca:	84 07 	test	byte ptr [rdi], al
 10223cc:	49 89 c2 	mov	r10, rax
 10223cf:	48 25 ff 1f 00 00 	and	rax, 8191
 10223d5:	48 c1 e0 07 	shl	rax, 7
 10223d9:	48 8d 3c 07 	lea	rdi, [rdi + rax]
 10223dd:	48 8d 04 0b 	lea	rax, [rbx + rcx]
 10223e1:	90 	nop
 10223e2:	49 89 c3 	mov	r11, rax
 10223e5:	48 c1 e8 06 	shr	rax, 6
 10223e9:	48 83 f8 08 	cmp	rax, 8
 10223ed:	0f 83 29 01 00 00 	jae	297 <_runtime.(*pageCache).flush+0x1fc>
 10223f3:	4c 8b 24 c7 	mov	r12, qword ptr [rdi + 8*rax]
 10223f7:	4d 0f b3 dc 	btr	r12, r11
 10223fb:	4c 89 24 c7 	mov	qword ptr [rdi + 8*rax], r12
 10223ff:	48 8b 7a 10 	mov	rdi, qword ptr [rdx + 16]
 1022403:	48 0f a3 cf 	bt	rdi, rcx
 1022407:	73 84 	jae	-124 <_runtime.(*pageCache).flush+0x6d>
 1022409:	41 84 00 	test	byte ptr [r8], al
 102240c:	4c 89 c8 	mov	rax, r9
 102240f:	48 c1 e8 23 	shr	rax, 35
 1022413:	48 3d 00 20 00 00 	cmp	rax, 8192
 1022419:	0f 83 f3 00 00 00 	jae	243 <_runtime.(*pageCache).flush+0x1f2>
 102241f:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1022424:	49 8b 44 c0 78 	mov	rax, qword ptr [r8 + 8*rax + 120]
 1022429:	84 00 	test	byte ptr [rax], al
 102242b:	49 81 e2 ff 1f 00 00 	and	r10, 8191
 1022432:	49 c1 e2 07 	shl	r10, 7
 1022436:	4a 8d 04 10 	lea	rax, [rax + r10]
 102243a:	48 8d 40 40 	lea	rax, [rax + 64]
 102243e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1022442:	48 8d 04 0b 	lea	rax, [rbx + rcx]
 1022446:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102244b:	48 c7 44 24 10 01 00 00 00 	mov	qword ptr [rsp + 16], 1
 1022454:	e8 f7 03 00 00 	call	1015 <_runtime.(*pageBits).setRange>
 1022459:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102245e:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1022463:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1022468:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 1022472:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 1022477:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 102247c:	4c 8b 54 24 30 	mov	r10, qword ptr [rsp + 48]
 1022481:	e9 07 ff ff ff 	jmp	-249 <_runtime.(*pageCache).flush+0x6d>
 1022486:	49 89 f9 	mov	r9, rdi
 1022489:	49 89 c2 	mov	r10, rax
 102248c:	e9 6e ff ff ff 	jmp	-146 <_runtime.(*pageCache).flush+0xdf>
 1022491:	41 84 00 	test	byte ptr [r8], al
 1022494:	48 8b 02 	mov	rax, qword ptr [rdx]
 1022497:	48 8d 0c 30 	lea	rcx, [rax + rsi]
 102249b:	49 8b 98 78 00 01 00 	mov	rbx, qword ptr [r8 + 65656]
 10224a2:	48 01 f3 	add	rbx, rsi
 10224a5:	48 39 d9 	cmp	rcx, rbx
 10224a8:	73 51 	jae	81 <_runtime.(*pageCache).flush+0x1db>
 10224aa:	48 c7 c1 ff ff ff ff 	mov	rcx, -1
 10224b1:	48 85 c9 	test	rcx, rcx
 10224b4:	7d 07 	jge	7 <_runtime.(*pageCache).flush+0x19d>
 10224b6:	49 89 80 78 00 01 00 	mov	qword ptr [r8 + 65656], rax
 10224bd:	48 8b 02 	mov	rax, qword ptr [rdx]
 10224c0:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10224c4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10224c9:	48 c7 44 24 10 40 00 00 00 	mov	qword ptr [rsp + 16], 64
 10224d2:	66 c7 44 24 18 00 00 	mov	word ptr [rsp + 24], 0
 10224d9:	e8 c2 d7 ff ff 	call	-10302 <_runtime.(*pageAlloc).update>
 10224de:	0f 57 c0 	xorps	xmm0, xmm0
 10224e1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10224e6:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 10224e9:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 10224f1:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10224f6:	48 83 c4 48 	add	rsp, 72
 10224fa:	c3 	ret
 10224fb:	76 07 	jbe	7 <_runtime.(*pageCache).flush+0x1e4>
 10224fd:	b9 01 00 00 00 	mov	ecx, 1
 1022502:	eb ad 	jmp	-83 <_runtime.(*pageCache).flush+0x191>
 1022504:	31 c9 	xor	ecx, ecx
 1022506:	eb a9 	jmp	-87 <_runtime.(*pageCache).flush+0x191>
 1022508:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 102250d:	48 83 c4 48 	add	rsp, 72
 1022511:	c3 	ret
 1022512:	b9 00 20 00 00 	mov	ecx, 8192
 1022517:	e8 44 0e 03 00 	call	200260 <_runtime.panicIndexU>
 102251c:	b9 08 00 00 00 	mov	ecx, 8
 1022521:	e8 3a 0e 03 00 	call	200250 <_runtime.panicIndexU>
 1022526:	48 89 f8 	mov	rax, rdi
 1022529:	b9 00 20 00 00 	mov	ecx, 8192
 102252e:	e8 2d 0e 03 00 	call	200237 <_runtime.panicIndexU>
 1022533:	90 	nop
 1022534:	e8 97 e6 02 00 	call	190103 <_runtime.morestack_noctxt>
 1022539:	e9 e2 fd ff ff 	jmp	-542 <_runtime.(*pageCache).flush>
 102253e:	cc 	int3
 102253f:	cc 	int3

_runtime.(*pageAlloc).allocToCache:
 1022540:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1022549:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102254d:	0f 86 ea 02 00 00 	jbe	746 <_runtime.(*pageAlloc).allocToCache+0x2fd>
 1022553:	48 83 ec 68 	sub	rsp, 104
 1022557:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 102255c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1022561:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1022566:	84 02 	test	byte ptr [rdx], al
 1022568:	48 8b 9a 78 00 01 00 	mov	rbx, qword ptr [rdx + 65656]
 102256f:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 1022579:	48 8d 04 1e 	lea	rax, [rsi + rbx]
 102257d:	48 89 c7 	mov	rdi, rax
 1022580:	48 c1 e8 16 	shr	rax, 22
 1022584:	48 39 82 98 00 01 00 	cmp	qword ptr [rdx + 65688], rax
 102258b:	0f 86 41 02 00 00 	jbe	577 <_runtime.(*pageAlloc).allocToCache+0x292>
 1022591:	48 8b 4a 68 	mov	rcx, qword ptr [rdx + 104]
 1022595:	4c 8b 42 60 	mov	r8, qword ptr [rdx + 96]
 1022599:	48 39 c8 	cmp	rax, rcx
 102259c:	0f 83 95 02 00 00 	jae	661 <_runtime.(*pageAlloc).allocToCache+0x2f7>
 10225a2:	4d 8b 04 c0 	mov	r8, qword ptr [r8 + 8*rax]
 10225a6:	4d 85 c0 	test	r8, r8
 10225a9:	0f 85 58 01 00 00 	jne	344 <_runtime.(*pageAlloc).allocToCache+0x1c7>
 10225af:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10225b3:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10225bc:	e8 bf e0 ff ff 	call	-8001 <_runtime.(*pageAlloc).find>
 10225c1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10225c6:	48 85 c0 	test	rax, rax
 10225c9:	0f 84 04 01 00 00 	je	260 <_runtime.(*pageAlloc).allocToCache+0x193>
 10225cf:	90 	nop
 10225d0:	90 	nop
 10225d1:	48 ba 00 00 00 00 00 80 00 00 	movabs	rdx, 140737488355328
 10225db:	48 01 c2 	add	rdx, rax
 10225de:	48 89 d3 	mov	rbx, rdx
 10225e1:	48 c1 ea 23 	shr	rdx, 35
 10225e5:	48 81 fa 00 20 00 00 	cmp	rdx, 8192
 10225ec:	0f 83 08 02 00 00 	jae	520 <_runtime.(*pageAlloc).allocToCache+0x2ba>
 10225f2:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 10225f7:	48 8b 54 d6 78 	mov	rdx, qword ptr [rsi + 8*rdx + 120]
 10225fc:	84 02 	test	byte ptr [rdx], al
 10225fe:	90 	nop
 10225ff:	48 c1 eb 16 	shr	rbx, 22
 1022603:	48 81 e3 ff 1f 00 00 	and	rbx, 8191
 102260a:	48 c1 e3 07 	shl	rbx, 7
 102260e:	48 8d 3c 1a 	lea	rdi, [rdx + rbx]
 1022612:	49 89 c0 	mov	r8, rax
 1022615:	48 25 ff ff 3f 00 	and	rax, 4194303
 102261b:	90 	nop
 102261c:	48 c1 e8 13 	shr	rax, 19
 1022620:	48 83 f8 08 	cmp	rax, 8
 1022624:	0f 83 c6 01 00 00 	jae	454 <_runtime.(*pageAlloc).allocToCache+0x2b0>
 102262a:	48 8b 0c c7 	mov	rcx, qword ptr [rdi + 8*rax]
 102262e:	48 f7 d1 	not	rcx
 1022631:	48 8d 14 1a 	lea	rdx, [rdx + rbx]
 1022635:	48 8d 52 40 	lea	rdx, [rdx + 64]
 1022639:	49 81 e0 00 00 f8 ff 	and	r8, -524288
 1022640:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 1022644:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1022649:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 102264e:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 1022653:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1022657:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 102265c:	48 c7 44 24 10 40 00 00 00 	mov	qword ptr [rsp + 16], 64
 1022665:	e8 46 dc ff ff 	call	-9146 <_runtime.(*pageAlloc).allocRange>
 102266a:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 102266f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1022673:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1022678:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102267d:	48 c7 44 24 10 40 00 00 00 	mov	qword ptr [rsp + 16], 64
 1022686:	66 c7 44 24 18 00 01 	mov	word ptr [rsp + 24], 256
 102268d:	e8 0e d6 ff ff 	call	-10738 <_runtime.(*pageAlloc).update>
 1022692:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1022697:	48 8d 88 00 e0 07 00 	lea	rcx, [rax + 516096]
 102269e:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 10226a3:	48 89 8a 78 00 01 00 	mov	qword ptr [rdx + 65656], rcx
 10226aa:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 10226af:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10226b4:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 10226bc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10226c1:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 10226c9:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10226ce:	48 83 c4 68 	add	rsp, 104
 10226d2:	c3 	ret
 10226d3:	48 b8 ff ff ff ff ff 7f ff ff 	movabs	rax, -140737488355329
 10226dd:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 10226e2:	48 89 81 78 00 01 00 	mov	qword ptr [rcx + 65656], rax
 10226e9:	0f 57 c0 	xorps	xmm0, xmm0
 10226ec:	0f 11 44 24 78 	movups	xmmword ptr [rsp + 120], xmm0
 10226f1:	48 c7 84 24 88 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 136], 0
 10226fd:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1022702:	48 83 c4 68 	add	rsp, 104
 1022706:	c3 	ret
 1022707:	90 	nop
 1022708:	48 c1 ef 23 	shr	rdi, 35
 102270c:	48 81 ff 00 20 00 00 	cmp	rdi, 8192
 1022713:	0f 83 11 01 00 00 	jae	273 <_runtime.(*pageAlloc).allocToCache+0x2ea>
 1022719:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 102271e:	48 8b 4c fa 78 	mov	rcx, qword ptr [rdx + 8*rdi + 120]
 1022723:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1022728:	84 01 	test	byte ptr [rcx], al
 102272a:	48 25 ff 1f 00 00 	and	rax, 8191
 1022730:	48 c1 e0 07 	shl	rax, 7
 1022734:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1022739:	48 8d 3c 01 	lea	rdi, [rcx + rax]
 102273d:	48 89 7c 24 50 	mov	qword ptr [rsp + 80], rdi
 1022742:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1022746:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102274f:	48 81 e3 ff ff 3f 00 	and	rbx, 4194303
 1022756:	48 c1 eb 0d 	shr	rbx, 13
 102275a:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 102275f:	e8 1c 07 00 00 	call	1820 <_runtime.(*pallocBits).find>
 1022764:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1022769:	48 85 c0 	test	rax, rax
 102276c:	0f 82 9f 00 00 00 	jb	159 <_runtime.(*pageAlloc).allocToCache+0x2d1>
 1022772:	90 	nop
 1022773:	48 89 c2 	mov	rdx, rax
 1022776:	48 c1 e8 06 	shr	rax, 6
 102277a:	48 83 f8 08 	cmp	rax, 8
 102277e:	0f 83 83 00 00 00 	jae	131 <_runtime.(*pageAlloc).allocToCache+0x2c7>
 1022784:	48 83 e2 c0 	and	rdx, -64
 1022788:	48 c1 e2 0d 	shl	rdx, 13
 102278c:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1022791:	48 c1 e3 16 	shl	rbx, 22
 1022795:	48 01 da 	add	rdx, rbx
 1022798:	48 bb 00 00 00 00 00 80 ff ff 	movabs	rbx, -140737488355328
 10227a2:	4c 8d 04 13 	lea	r8, [rbx + rdx]
 10227a6:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10227ab:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 10227af:	48 f7 d1 	not	rcx
 10227b2:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10227b7:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 10227bc:	48 8d 14 13 	lea	rdx, [rbx + rdx]
 10227c0:	48 8d 52 40 	lea	rdx, [rdx + 64]
 10227c4:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 10227c8:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 10227cd:	e9 72 fe ff ff 	jmp	-398 <_runtime.(*pageAlloc).allocToCache+0x104>
 10227d2:	48 c7 44 24 78 00 00 00 00 	mov	qword ptr [rsp + 120], 0
 10227db:	0f 57 c0 	xorps	xmm0, xmm0
 10227de:	0f 11 84 24 80 00 00 00 	movups	xmmword ptr [rsp + 128], xmm0
 10227e6:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10227eb:	48 83 c4 68 	add	rsp, 104
 10227ef:	c3 	ret
 10227f0:	b9 08 00 00 00 	mov	ecx, 8
 10227f5:	e8 66 0b 03 00 	call	199526 <_runtime.panicIndexU>
 10227fa:	48 89 d0 	mov	rax, rdx
 10227fd:	b9 00 20 00 00 	mov	ecx, 8192
 1022802:	e8 59 0b 03 00 	call	199513 <_runtime.panicIndexU>
 1022807:	b9 08 00 00 00 	mov	ecx, 8
 102280c:	e8 4f 0b 03 00 	call	199503 <_runtime.panicIndexU>
 1022811:	48 8d 05 da 12 05 00 	lea	rax, [rip + 332506]
 1022818:	48 89 04 24 	mov	qword ptr [rsp], rax
 102281c:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1022825:	e8 36 65 00 00 	call	25910 <_runtime.throw>
 102282a:	48 89 f8 	mov	rax, rdi
 102282d:	b9 00 20 00 00 	mov	ecx, 8192
 1022832:	e8 29 0b 03 00 	call	199465 <_runtime.panicIndexU>
 1022837:	e8 24 0b 03 00 	call	199460 <_runtime.panicIndexU>
 102283c:	90 	nop
 102283d:	e8 8e e3 02 00 	call	189326 <_runtime.morestack_noctxt>
 1022842:	e9 f9 fc ff ff 	jmp	-775 <_runtime.(*pageAlloc).allocToCache>
 1022847:	cc 	int3
 1022848:	cc 	int3
 1022849:	cc 	int3
 102284a:	cc 	int3
 102284b:	cc 	int3
 102284c:	cc 	int3
 102284d:	cc 	int3
 102284e:	cc 	int3
 102284f:	cc 	int3

_runtime.(*pageBits).setRange:
 1022850:	48 83 ec 18 	sub	rsp, 24
 1022854:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1022859:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102285e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1022863:	84 02 	test	byte ptr [rdx], al
 1022865:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102286a:	48 89 c1 	mov	rcx, rax
 102286d:	48 c1 e8 06 	shr	rax, 6
 1022871:	48 83 f8 08 	cmp	rax, 8
 1022875:	0f 83 e6 00 00 00 	jae	230 <_runtime.(*pageBits).setRange+0x111>
 102287b:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1022880:	48 83 fb 01 	cmp	rbx, 1
 1022884:	0f 84 b3 00 00 00 	je	179 <_runtime.(*pageBits).setRange+0xed>
 102288a:	48 8d 34 0b 	lea	rsi, [rbx + rcx]
 102288e:	48 8d 76 ff 	lea	rsi, [rsi - 1]
 1022892:	48 89 f7 	mov	rdi, rsi
 1022895:	48 c1 ee 06 	shr	rsi, 6
 1022899:	48 39 c6 	cmp	rsi, rax
 102289c:	74 67 	je	103 <_runtime.(*pageBits).setRange+0xb5>
 102289e:	48 83 fe 08 	cmp	rsi, 8
 10228a2:	0f 83 ac 00 00 00 	jae	172 <_runtime.(*pageBits).setRange+0x104>
 10228a8:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 10228ac:	49 c7 c0 ff ff ff ff 	mov	r8, -1
 10228b3:	49 d3 e0 	shl	r8, cl
 10228b6:	49 09 d8 	or	r8, rbx
 10228b9:	4c 89 04 c2 	mov	qword ptr [rdx + 8*rax], r8
 10228bd:	48 ff c0 	inc	rax
 10228c0:	eb 0b 	jmp	11 <_runtime.(*pageBits).setRange+0x7d>
 10228c2:	48 c7 04 c2 ff ff ff ff 	mov	qword ptr [rdx + 8*rax], -1
 10228ca:	48 ff c0 	inc	rax
 10228cd:	48 39 f0 	cmp	rax, rsi
 10228d0:	72 f0 	jb	-16 <_runtime.(*pageBits).setRange+0x72>
 10228d2:	48 83 e7 3f 	and	rdi, 63
 10228d6:	48 8d 4f 01 	lea	rcx, [rdi + 1]
 10228da:	48 83 f9 40 	cmp	rcx, 64
 10228de:	48 19 c0 	sbb	rax, rax
 10228e1:	48 8b 1c f2 	mov	rbx, qword ptr [rdx + 8*rsi]
 10228e5:	bf 01 00 00 00 	mov	edi, 1
 10228ea:	48 d3 e7 	shl	rdi, cl
 10228ed:	48 21 c7 	and	rdi, rax
 10228f0:	48 8d 47 ff 	lea	rax, [rdi - 1]
 10228f4:	48 09 c3 	or	rbx, rax
 10228f7:	48 89 1c f2 	mov	qword ptr [rdx + 8*rsi], rbx
 10228fb:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022900:	48 83 c4 18 	add	rsp, 24
 1022904:	c3 	ret
 1022905:	48 83 fb 40 	cmp	rbx, 64
 1022909:	48 19 f6 	sbb	rsi, rsi
 102290c:	48 8b 3c c2 	mov	rdi, qword ptr [rdx + 8*rax]
 1022910:	49 89 c8 	mov	r8, rcx
 1022913:	48 89 d9 	mov	rcx, rbx
 1022916:	41 b9 01 00 00 00 	mov	r9d, 1
 102291c:	49 d3 e1 	shl	r9, cl
 102291f:	4c 21 ce 	and	rsi, r9
 1022922:	48 8d 5e ff 	lea	rbx, [rsi - 1]
 1022926:	4c 89 c1 	mov	rcx, r8
 1022929:	48 d3 e3 	shl	rbx, cl
 102292c:	48 09 fb 	or	rbx, rdi
 102292f:	48 89 1c c2 	mov	qword ptr [rdx + 8*rax], rbx
 1022933:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022938:	48 83 c4 18 	add	rsp, 24
 102293c:	c3 	ret
 102293d:	90 	nop
 102293e:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 1022942:	48 0f ab cb 	bts	rbx, rcx
 1022946:	48 89 1c c2 	mov	qword ptr [rdx + 8*rax], rbx
 102294a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102294f:	48 83 c4 18 	add	rsp, 24
 1022953:	c3 	ret
 1022954:	48 89 f0 	mov	rax, rsi
 1022957:	b9 08 00 00 00 	mov	ecx, 8
 102295c:	e8 ff 09 03 00 	call	199167 <_runtime.panicIndexU>
 1022961:	b9 08 00 00 00 	mov	ecx, 8
 1022966:	e8 f5 09 03 00 	call	199157 <_runtime.panicIndexU>
 102296b:	90 	nop
 102296c:	cc 	int3
 102296d:	cc 	int3
 102296e:	cc 	int3
 102296f:	cc 	int3

_runtime.(*pageBits).setAll:
 1022970:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1022975:	31 c9 	xor	ecx, ecx
 1022977:	eb 0d 	jmp	13 <_runtime.(*pageBits).setAll+0x16>
 1022979:	84 00 	test	byte ptr [rax], al
 102297b:	48 c7 04 c8 ff ff ff ff 	mov	qword ptr [rax + 8*rcx], -1
 1022983:	48 ff c1 	inc	rcx
 1022986:	48 83 f9 08 	cmp	rcx, 8
 102298a:	7c ed 	jl	-19 <_runtime.(*pageBits).setAll+0x9>
 102298c:	c3 	ret
 102298d:	cc 	int3
 102298e:	cc 	int3
 102298f:	cc 	int3

_runtime.(*pageBits).clearRange:
 1022990:	48 83 ec 18 	sub	rsp, 24
 1022994:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1022999:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102299e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10229a3:	84 02 	test	byte ptr [rdx], al
 10229a5:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10229aa:	48 89 c1 	mov	rcx, rax
 10229ad:	48 c1 e8 06 	shr	rax, 6
 10229b1:	48 83 f8 08 	cmp	rax, 8
 10229b5:	0f 83 eb 00 00 00 	jae	235 <_runtime.(*pageBits).clearRange+0x116>
 10229bb:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10229c0:	48 83 fb 01 	cmp	rbx, 1
 10229c4:	0f 84 b8 00 00 00 	je	184 <_runtime.(*pageBits).clearRange+0xf2>
 10229ca:	48 8d 34 0b 	lea	rsi, [rbx + rcx]
 10229ce:	48 8d 76 ff 	lea	rsi, [rsi - 1]
 10229d2:	48 89 f7 	mov	rdi, rsi
 10229d5:	48 c1 ee 06 	shr	rsi, 6
 10229d9:	48 39 c6 	cmp	rsi, rax
 10229dc:	74 69 	je	105 <_runtime.(*pageBits).clearRange+0xb7>
 10229de:	48 83 fe 08 	cmp	rsi, 8
 10229e2:	0f 83 b1 00 00 00 	jae	177 <_runtime.(*pageBits).clearRange+0x109>
 10229e8:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 10229ec:	49 c7 c0 ff ff ff ff 	mov	r8, -1
 10229f3:	49 d3 e0 	shl	r8, cl
 10229f6:	49 f7 d0 	not	r8
 10229f9:	49 21 d8 	and	r8, rbx
 10229fc:	4c 89 04 c2 	mov	qword ptr [rdx + 8*rax], r8
 1022a00:	48 ff c0 	inc	rax
 1022a03:	eb 0b 	jmp	11 <_runtime.(*pageBits).clearRange+0x80>
 1022a05:	48 c7 04 c2 00 00 00 00 	mov	qword ptr [rdx + 8*rax], 0
 1022a0d:	48 ff c0 	inc	rax
 1022a10:	48 39 f0 	cmp	rax, rsi
 1022a13:	72 f0 	jb	-16 <_runtime.(*pageBits).clearRange+0x75>
 1022a15:	48 83 e7 3f 	and	rdi, 63
 1022a19:	48 8d 4f 01 	lea	rcx, [rdi + 1]
 1022a1d:	48 83 f9 40 	cmp	rcx, 64
 1022a21:	48 19 c0 	sbb	rax, rax
 1022a24:	48 8b 1c f2 	mov	rbx, qword ptr [rdx + 8*rsi]
 1022a28:	bf 01 00 00 00 	mov	edi, 1
 1022a2d:	48 d3 e7 	shl	rdi, cl
 1022a30:	48 21 c7 	and	rdi, rax
 1022a33:	48 f7 df 	neg	rdi
 1022a36:	48 21 df 	and	rdi, rbx
 1022a39:	48 89 3c f2 	mov	qword ptr [rdx + 8*rsi], rdi
 1022a3d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022a42:	48 83 c4 18 	add	rsp, 24
 1022a46:	c3 	ret
 1022a47:	48 83 fb 40 	cmp	rbx, 64
 1022a4b:	48 19 f6 	sbb	rsi, rsi
 1022a4e:	48 8b 3c c2 	mov	rdi, qword ptr [rdx + 8*rax]
 1022a52:	49 89 c8 	mov	r8, rcx
 1022a55:	48 89 d9 	mov	rcx, rbx
 1022a58:	41 b9 01 00 00 00 	mov	r9d, 1
 1022a5e:	49 d3 e1 	shl	r9, cl
 1022a61:	4c 21 ce 	and	rsi, r9
 1022a64:	48 8d 5e ff 	lea	rbx, [rsi - 1]
 1022a68:	4c 89 c1 	mov	rcx, r8
 1022a6b:	48 d3 e3 	shl	rbx, cl
 1022a6e:	48 f7 d3 	not	rbx
 1022a71:	48 21 fb 	and	rbx, rdi
 1022a74:	48 89 1c c2 	mov	qword ptr [rdx + 8*rax], rbx
 1022a78:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022a7d:	48 83 c4 18 	add	rsp, 24
 1022a81:	c3 	ret
 1022a82:	90 	nop
 1022a83:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 1022a87:	48 0f b3 cb 	btr	rbx, rcx
 1022a8b:	48 89 1c c2 	mov	qword ptr [rdx + 8*rax], rbx
 1022a8f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022a94:	48 83 c4 18 	add	rsp, 24
 1022a98:	c3 	ret
 1022a99:	48 89 f0 	mov	rax, rsi
 1022a9c:	b9 08 00 00 00 	mov	ecx, 8
 1022aa1:	e8 ba 08 03 00 	call	198842 <_runtime.panicIndexU>
 1022aa6:	b9 08 00 00 00 	mov	ecx, 8
 1022aab:	e8 b0 08 03 00 	call	198832 <_runtime.panicIndexU>
 1022ab0:	90 	nop
 1022ab1:	cc 	int3
 1022ab2:	cc 	int3
 1022ab3:	cc 	int3
 1022ab4:	cc 	int3
 1022ab5:	cc 	int3
 1022ab6:	cc 	int3
 1022ab7:	cc 	int3
 1022ab8:	cc 	int3
 1022ab9:	cc 	int3
 1022aba:	cc 	int3
 1022abb:	cc 	int3
 1022abc:	cc 	int3
 1022abd:	cc 	int3
 1022abe:	cc 	int3
 1022abf:	cc 	int3

_runtime.(*pageBits).clearAll:
 1022ac0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1022ac5:	31 c9 	xor	ecx, ecx
 1022ac7:	eb 0d 	jmp	13 <_runtime.(*pageBits).clearAll+0x16>
 1022ac9:	84 00 	test	byte ptr [rax], al
 1022acb:	48 c7 04 c8 00 00 00 00 	mov	qword ptr [rax + 8*rcx], 0
 1022ad3:	48 ff c1 	inc	rcx
 1022ad6:	48 83 f9 08 	cmp	rcx, 8
 1022ada:	7c ed 	jl	-19 <_runtime.(*pageBits).clearAll+0x9>
 1022adc:	c3 	ret
 1022add:	cc 	int3
 1022ade:	cc 	int3
 1022adf:	cc 	int3

_runtime.(*pageBits).popcntRange:
 1022ae0:	48 83 ec 18 	sub	rsp, 24
 1022ae4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1022ae9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1022aee:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1022af3:	48 83 fa 01 	cmp	rdx, 1
 1022af7:	0f 84 3b 02 00 00 	je	571 <_runtime.(*pageBits).popcntRange+0x258>
 1022afd:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1022b02:	84 03 	test	byte ptr [rbx], al
 1022b04:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1022b09:	48 89 c1 	mov	rcx, rax
 1022b0c:	48 c1 e8 06 	shr	rax, 6
 1022b10:	48 83 f8 08 	cmp	rax, 8
 1022b14:	0f 83 5e 02 00 00 	jae	606 <_runtime.(*pageBits).popcntRange+0x298>
 1022b1a:	48 8d 34 0a 	lea	rsi, [rdx + rcx]
 1022b1e:	48 8d 76 ff 	lea	rsi, [rsi - 1]
 1022b22:	48 89 f7 	mov	rdi, rsi
 1022b25:	48 c1 ee 06 	shr	rsi, 6
 1022b29:	48 39 c6 	cmp	rsi, rax
 1022b2c:	0f 84 67 01 00 00 	je	359 <_runtime.(*pageBits).popcntRange+0x1b9>
 1022b32:	48 83 fe 08 	cmp	rsi, 8
 1022b36:	0f 83 2f 02 00 00 	jae	559 <_runtime.(*pageBits).popcntRange+0x28b>
 1022b3c:	48 8b 14 c3 	mov	rdx, qword ptr [rbx + 8*rax]
 1022b40:	48 d3 ea 	shr	rdx, cl
 1022b43:	48 ff c0 	inc	rax
 1022b46:	49 89 d0 	mov	r8, rdx
 1022b49:	48 d1 ea 	shr	rdx
 1022b4c:	49 b9 55 55 55 55 55 55 55 55 	movabs	r9, 6148914691236517205
 1022b56:	4c 21 ca 	and	rdx, r9
 1022b59:	4d 21 c8 	and	r8, r9
 1022b5c:	4c 01 c2 	add	rdx, r8
 1022b5f:	49 89 d0 	mov	r8, rdx
 1022b62:	48 c1 ea 02 	shr	rdx, 2
 1022b66:	49 ba 33 33 33 33 33 33 33 33 	movabs	r10, 3689348814741910323
 1022b70:	4c 21 d2 	and	rdx, r10
 1022b73:	4d 21 d0 	and	r8, r10
 1022b76:	4c 01 c2 	add	rdx, r8
 1022b79:	49 89 d0 	mov	r8, rdx
 1022b7c:	48 c1 ea 04 	shr	rdx, 4
 1022b80:	4c 01 c2 	add	rdx, r8
 1022b83:	49 b8 0f 0f 0f 0f 0f 0f 0f 0f 	movabs	r8, 1085102592571150095
 1022b8d:	4c 21 c2 	and	rdx, r8
 1022b90:	49 89 d3 	mov	r11, rdx
 1022b93:	48 c1 ea 08 	shr	rdx, 8
 1022b97:	4c 01 da 	add	rdx, r11
 1022b9a:	49 89 d3 	mov	r11, rdx
 1022b9d:	48 c1 ea 10 	shr	rdx, 16
 1022ba1:	4c 01 da 	add	rdx, r11
 1022ba4:	49 89 d3 	mov	r11, rdx
 1022ba7:	48 c1 ea 20 	shr	rdx, 32
 1022bab:	4c 01 da 	add	rdx, r11
 1022bae:	48 83 e2 7f 	and	rdx, 127
 1022bb2:	eb 5c 	jmp	92 <_runtime.(*pageBits).popcntRange+0x130>
 1022bb4:	4c 8d 58 01 	lea	r11, [rax + 1]
 1022bb8:	4c 8b 24 c3 	mov	r12, qword ptr [rbx + 8*rax]
 1022bbc:	4d 89 e5 	mov	r13, r12
 1022bbf:	49 d1 ec 	shr	r12
 1022bc2:	4d 21 cc 	and	r12, r9
 1022bc5:	4d 21 cd 	and	r13, r9
 1022bc8:	4d 01 ec 	add	r12, r13
 1022bcb:	4d 89 e5 	mov	r13, r12
 1022bce:	49 c1 ec 02 	shr	r12, 2
 1022bd2:	4d 21 d4 	and	r12, r10
 1022bd5:	4d 21 d5 	and	r13, r10
 1022bd8:	4d 01 ec 	add	r12, r13
 1022bdb:	4d 89 e5 	mov	r13, r12
 1022bde:	49 c1 ec 04 	shr	r12, 4
 1022be2:	4d 01 ec 	add	r12, r13
 1022be5:	4d 21 c4 	and	r12, r8
 1022be8:	4d 89 e5 	mov	r13, r12
 1022beb:	49 c1 ec 08 	shr	r12, 8
 1022bef:	4d 01 ec 	add	r12, r13
 1022bf2:	4d 89 e5 	mov	r13, r12
 1022bf5:	49 c1 ec 10 	shr	r12, 16
 1022bf9:	4d 01 ec 	add	r12, r13
 1022bfc:	4d 89 e5 	mov	r13, r12
 1022bff:	49 c1 ec 20 	shr	r12, 32
 1022c03:	4d 01 ec 	add	r12, r13
 1022c06:	49 83 e4 7f 	and	r12, 127
 1022c0a:	4c 01 e2 	add	rdx, r12
 1022c0d:	4c 89 d8 	mov	rax, r11
 1022c10:	48 39 f0 	cmp	rax, rsi
 1022c13:	72 9f 	jb	-97 <_runtime.(*pageBits).popcntRange+0xd4>
 1022c15:	48 8b 04 f3 	mov	rax, qword ptr [rbx + 8*rsi]
 1022c19:	48 83 e7 3f 	and	rdi, 63
 1022c1d:	48 8d 4f 01 	lea	rcx, [rdi + 1]
 1022c21:	48 83 f9 40 	cmp	rcx, 64
 1022c25:	48 19 db 	sbb	rbx, rbx
 1022c28:	be 01 00 00 00 	mov	esi, 1
 1022c2d:	48 d3 e6 	shl	rsi, cl
 1022c30:	48 21 f3 	and	rbx, rsi
 1022c33:	48 ff cb 	dec	rbx
 1022c36:	48 21 c3 	and	rbx, rax
 1022c39:	48 89 d8 	mov	rax, rbx
 1022c3c:	48 d1 eb 	shr	rbx
 1022c3f:	4c 21 cb 	and	rbx, r9
 1022c42:	4c 21 c8 	and	rax, r9
 1022c45:	48 01 d8 	add	rax, rbx
 1022c48:	48 89 c3 	mov	rbx, rax
 1022c4b:	48 c1 e8 02 	shr	rax, 2
 1022c4f:	4c 21 d0 	and	rax, r10
 1022c52:	4c 21 d3 	and	rbx, r10
 1022c55:	48 01 d8 	add	rax, rbx
 1022c58:	48 89 c3 	mov	rbx, rax
 1022c5b:	48 c1 e8 04 	shr	rax, 4
 1022c5f:	48 01 d8 	add	rax, rbx
 1022c62:	4c 21 c0 	and	rax, r8
 1022c65:	48 89 c3 	mov	rbx, rax
 1022c68:	48 c1 e8 08 	shr	rax, 8
 1022c6c:	48 01 d8 	add	rax, rbx
 1022c6f:	48 89 c3 	mov	rbx, rax
 1022c72:	48 c1 e8 10 	shr	rax, 16
 1022c76:	48 01 d8 	add	rax, rbx
 1022c79:	48 89 c3 	mov	rbx, rax
 1022c7c:	48 c1 e8 20 	shr	rax, 32
 1022c80:	48 01 d8 	add	rax, rbx
 1022c83:	48 83 e0 7f 	and	rax, 127
 1022c87:	48 01 d0 	add	rax, rdx
 1022c8a:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1022c8f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022c94:	48 83 c4 18 	add	rsp, 24
 1022c98:	c3 	ret
 1022c99:	48 8b 04 c3 	mov	rax, qword ptr [rbx + 8*rax]
 1022c9d:	48 83 fa 40 	cmp	rdx, 64
 1022ca1:	48 19 db 	sbb	rbx, rbx
 1022ca4:	48 d3 e8 	shr	rax, cl
 1022ca7:	48 89 d1 	mov	rcx, rdx
 1022caa:	be 01 00 00 00 	mov	esi, 1
 1022caf:	48 d3 e6 	shl	rsi, cl
 1022cb2:	48 21 f3 	and	rbx, rsi
 1022cb5:	48 8d 53 ff 	lea	rdx, [rbx - 1]
 1022cb9:	48 21 c2 	and	rdx, rax
 1022cbc:	48 89 d0 	mov	rax, rdx
 1022cbf:	48 d1 ea 	shr	rdx
 1022cc2:	48 bb 55 55 55 55 55 55 55 55 	movabs	rbx, 6148914691236517205
 1022ccc:	48 21 da 	and	rdx, rbx
 1022ccf:	48 21 c3 	and	rbx, rax
 1022cd2:	48 8d 04 13 	lea	rax, [rbx + rdx]
 1022cd6:	48 89 c2 	mov	rdx, rax
 1022cd9:	48 c1 e8 02 	shr	rax, 2
 1022cdd:	48 bb 33 33 33 33 33 33 33 33 	movabs	rbx, 3689348814741910323
 1022ce7:	48 21 d8 	and	rax, rbx
 1022cea:	48 21 d3 	and	rbx, rdx
 1022ced:	48 01 d8 	add	rax, rbx
 1022cf0:	48 89 c2 	mov	rdx, rax
 1022cf3:	48 c1 e8 04 	shr	rax, 4
 1022cf7:	48 01 d0 	add	rax, rdx
 1022cfa:	48 ba 0f 0f 0f 0f 0f 0f 0f 0f 	movabs	rdx, 1085102592571150095
 1022d04:	48 21 c2 	and	rdx, rax
 1022d07:	48 89 d0 	mov	rax, rdx
 1022d0a:	48 c1 ea 08 	shr	rdx, 8
 1022d0e:	48 01 d0 	add	rax, rdx
 1022d11:	48 89 c2 	mov	rdx, rax
 1022d14:	48 c1 e8 10 	shr	rax, 16
 1022d18:	48 01 d0 	add	rax, rdx
 1022d1b:	48 89 c2 	mov	rdx, rax
 1022d1e:	48 c1 e8 20 	shr	rax, 32
 1022d22:	48 01 d0 	add	rax, rdx
 1022d25:	48 83 e0 7f 	and	rax, 127
 1022d29:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1022d2e:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022d33:	48 83 c4 18 	add	rsp, 24
 1022d37:	c3 	ret
 1022d38:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1022d3d:	84 02 	test	byte ptr [rdx], al
 1022d3f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1022d44:	48 89 c1 	mov	rcx, rax
 1022d47:	48 c1 e8 06 	shr	rax, 6
 1022d4b:	48 83 f8 08 	cmp	rax, 8
 1022d4f:	73 31 	jae	49 <_runtime.(*pageBits).popcntRange+0x2a2>
 1022d51:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 1022d55:	48 d3 e8 	shr	rax, cl
 1022d58:	48 83 e0 01 	and	rax, 1
 1022d5c:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1022d61:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1022d66:	48 83 c4 18 	add	rsp, 24
 1022d6a:	c3 	ret
 1022d6b:	48 89 f0 	mov	rax, rsi
 1022d6e:	b9 08 00 00 00 	mov	ecx, 8
 1022d73:	e8 e8 05 03 00 	call	198120 <_runtime.panicIndexU>
 1022d78:	b9 08 00 00 00 	mov	ecx, 8
 1022d7d:	e8 de 05 03 00 	call	198110 <_runtime.panicIndexU>
 1022d82:	b9 08 00 00 00 	mov	ecx, 8
 1022d87:	e8 d4 05 03 00 	call	198100 <_runtime.panicIndexU>
 1022d8c:	90 	nop
 1022d8d:	cc 	int3
 1022d8e:	cc 	int3
 1022d8f:	cc 	int3

_runtime.(*pallocBits).summarize:
 1022d90:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1022d95:	31 c9 	xor	ecx, ecx
 1022d97:	31 d2 	xor	edx, edx
 1022d99:	31 db 	xor	ebx, ebx
 1022d9b:	31 f6 	xor	esi, esi
 1022d9d:	e9 83 00 00 00 	jmp	131 <_runtime.(*pallocBits).summarize+0x95>
 1022da2:	4c 8d 41 08 	lea	r8, [rcx + 8]
 1022da6:	4c 89 d9 	mov	rcx, r11
 1022da9:	4c 89 d7 	mov	rdi, r10
 1022dac:	49 83 f8 40 	cmp	r8, 64
 1022db0:	7d 70 	jge	112 <_runtime.(*pallocBits).summarize+0x92>
 1022db2:	49 89 c9 	mov	r9, rcx
 1022db5:	4c 89 c1 	mov	rcx, r8
 1022db8:	49 89 fa 	mov	r10, rdi
 1022dbb:	48 d3 ef 	shr	rdi, cl
 1022dbe:	4d 89 cb 	mov	r11, r9
 1022dc1:	49 c1 e1 06 	shl	r9, 6
 1022dc5:	49 01 c9 	add	r9, rcx
 1022dc8:	44 0f b6 e7 	movzx	r12d, dil
 1022dcc:	4c 8d 2d cd 8b 0a 00 	lea	r13, [rip + 691149]
 1022dd3:	47 0f b6 34 2c 	movzx	r14d, byte ptr [r12 + r13]
 1022dd8:	4e 8d 3c 32 	lea	r15, [rdx + r14]
 1022ddc:	4c 39 ca 	cmp	rdx, r9
 1022ddf:	49 0f 44 d7 	cmove	rdx, r15
 1022de3:	4e 8d 0c 33 	lea	r9, [rbx + r14]
 1022de7:	49 39 f1 	cmp	r9, rsi
 1022dea:	49 0f 47 f1 	cmova	rsi, r9
 1022dee:	4c 8d 0d 4b 91 0a 00 	lea	r9, [rip + 692555]
 1022df5:	4f 8b 34 e1 	mov	r14, qword ptr [r9 + 8*r12]
 1022df9:	49 39 f6 	cmp	r14, rsi
 1022dfc:	49 0f 47 f6 	cmova	rsi, r14
 1022e00:	90 	nop
 1022e01:	40 84 ff 	test	dil, dil
 1022e04:	75 06 	jne	6 <_runtime.(*pallocBits).summarize+0x7c>
 1022e06:	48 83 c3 08 	add	rbx, 8
 1022e0a:	eb 96 	jmp	-106 <_runtime.(*pallocBits).summarize+0x12>
 1022e0c:	48 8d 3d 8d 8a 0a 00 	lea	rdi, [rip + 690829]
 1022e13:	46 0f b6 24 27 	movzx	r12d, byte ptr [rdi + r12]
 1022e18:	49 8d 5c 24 f8 	lea	rbx, [r12 - 8]
 1022e1d:	48 f7 db 	neg	rbx
 1022e20:	eb 80 	jmp	-128 <_runtime.(*pallocBits).summarize+0x12>
 1022e22:	48 ff c1 	inc	rcx
 1022e25:	48 83 f9 08 	cmp	rcx, 8
 1022e29:	7d 0e 	jge	14 <_runtime.(*pallocBits).summarize+0xa9>
 1022e2b:	84 00 	test	byte ptr [rax], al
 1022e2d:	48 8b 3c c8 	mov	rdi, qword ptr [rax + 8*rcx]
 1022e31:	45 31 c0 	xor	r8d, r8d
 1022e34:	e9 73 ff ff ff 	jmp	-141 <_runtime.(*pallocBits).summarize+0x1c>
 1022e39:	48 81 fe 00 00 20 00 	cmp	rsi, 2097152
 1022e40:	75 10 	jne	16 <_runtime.(*pallocBits).summarize+0xc2>
 1022e42:	48 b8 00 00 00 00 00 00 00 80 	movabs	rax, -9223372036854775808
 1022e4c:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1022e51:	c3 	ret
 1022e52:	48 81 e2 ff ff 1f 00 	and	rdx, 2097151
 1022e59:	48 81 e6 ff ff 1f 00 	and	rsi, 2097151
 1022e60:	48 c1 e6 15 	shl	rsi, 21
 1022e64:	48 09 d6 	or	rsi, rdx
 1022e67:	48 81 e3 ff ff 1f 00 	and	rbx, 2097151
 1022e6e:	48 c1 e3 2a 	shl	rbx, 42
 1022e72:	48 09 f3 	or	rbx, rsi
 1022e75:	48 89 d8 	mov	rax, rbx
 1022e78:	eb d2 	jmp	-46 <_runtime.(*pallocBits).summarize+0xbc>
 1022e7a:	cc 	int3
 1022e7b:	cc 	int3
 1022e7c:	cc 	int3
 1022e7d:	cc 	int3
 1022e7e:	cc 	int3
 1022e7f:	cc 	int3

_runtime.(*pallocBits).find:
 1022e80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1022e89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1022e8d:	0f 86 c6 00 00 00 	jbe	198 <_runtime.(*pallocBits).find+0xd9>
 1022e93:	48 83 ec 30 	sub	rsp, 48
 1022e97:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1022e9c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1022ea1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1022ea6:	48 83 f8 01 	cmp	rax, 1
 1022eaa:	74 7c 	je	124 <_runtime.(*pallocBits).find+0xa8>
 1022eac:	48 83 f8 40 	cmp	rax, 64
 1022eb0:	77 3b 	ja	59 <_runtime.(*pallocBits).find+0x6d>
 1022eb2:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1022eb7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1022ebb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1022ec0:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1022ec5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1022eca:	e8 21 01 00 00 	call	289 <_runtime.(*pallocBits).findSmallN>
 1022ecf:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1022ed4:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1022ed9:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1022ede:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1022ee3:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1022ee8:	48 83 c4 30 	add	rsp, 48
 1022eec:	c3 	ret
 1022eed:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1022ef2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1022ef6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1022efb:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1022f00:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1022f05:	e8 16 03 00 00 	call	790 <_runtime.(*pallocBits).findLargeN>
 1022f0a:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1022f0f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1022f14:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1022f19:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1022f1e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1022f23:	48 83 c4 30 	add	rsp, 48
 1022f27:	c3 	ret
 1022f28:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1022f2d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1022f31:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1022f36:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1022f3b:	e8 30 00 00 00 	call	48 <_runtime.(*pallocBits).find1>
 1022f40:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1022f45:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1022f4a:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1022f4f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1022f54:	48 83 c4 30 	add	rsp, 48
 1022f58:	c3 	ret
 1022f59:	e8 72 dc 02 00 	call	187506 <_runtime.morestack_noctxt>
 1022f5e:	e9 1d ff ff ff 	jmp	-227 <_runtime.(*pallocBits).find>
 1022f63:	cc 	int3
 1022f64:	cc 	int3
 1022f65:	cc 	int3
 1022f66:	cc 	int3
 1022f67:	cc 	int3
 1022f68:	cc 	int3
 1022f69:	cc 	int3
 1022f6a:	cc 	int3
 1022f6b:	cc 	int3
 1022f6c:	cc 	int3
 1022f6d:	cc 	int3
 1022f6e:	cc 	int3
 1022f6f:	cc 	int3

_runtime.(*pallocBits).find1:
 1022f70:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1022f75:	48 c1 e8 06 	shr	rax, 6
 1022f79:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1022f7e:	eb 03 	jmp	3 <_runtime.(*pallocBits).find1+0x13>
 1022f80:	48 ff c0 	inc	rax
 1022f83:	48 83 f8 08 	cmp	rax, 8
 1022f87:	73 4f 	jae	79 <_runtime.(*pallocBits).find1+0x68>
 1022f89:	84 01 	test	byte ptr [rcx], al
 1022f8b:	48 8b 14 c1 	mov	rdx, qword ptr [rcx + 8*rax]
 1022f8f:	48 83 fa ff 	cmp	rdx, -1
 1022f93:	74 eb 	je	-21 <_runtime.(*pallocBits).find1+0x10>
 1022f95:	48 89 d1 	mov	rcx, rdx
 1022f98:	48 f7 d2 	not	rdx
 1022f9b:	48 85 d2 	test	rdx, rdx
 1022f9e:	75 12 	jne	18 <_runtime.(*pallocBits).find1+0x42>
 1022fa0:	b9 40 00 00 00 	mov	ecx, 64
 1022fa5:	48 c1 e0 06 	shl	rax, 6
 1022fa9:	48 01 c8 	add	rax, rcx
 1022fac:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1022fb1:	c3 	ret
 1022fb2:	48 8d 59 01 	lea	rbx, [rcx + 1]
 1022fb6:	48 21 da 	and	rdx, rbx
 1022fb9:	48 bb 09 8b ca b4 71 9d f7 03 	movabs	rbx, 285870213051353865
 1022fc3:	48 0f af d3 	imul	rdx, rbx
 1022fc7:	48 c1 ea 3a 	shr	rdx, 58
 1022fcb:	48 8d 1d 8e 83 0a 00 	lea	rbx, [rip + 689038]
 1022fd2:	0f b6 0c 13 	movzx	ecx, byte ptr [rbx + rdx]
 1022fd6:	eb cd 	jmp	-51 <_runtime.(*pallocBits).find1+0x35>
 1022fd8:	48 c7 44 24 18 ff ff ff ff 	mov	qword ptr [rsp + 24], -1
 1022fe1:	c3 	ret
 1022fe2:	cc 	int3
 1022fe3:	cc 	int3
 1022fe4:	cc 	int3
 1022fe5:	cc 	int3
 1022fe6:	cc 	int3
 1022fe7:	cc 	int3
 1022fe8:	cc 	int3
 1022fe9:	cc 	int3
 1022fea:	cc 	int3
 1022feb:	cc 	int3
 1022fec:	cc 	int3
 1022fed:	cc 	int3
 1022fee:	cc 	int3
 1022fef:	cc 	int3

_runtime.(*pallocBits).findSmallN:
 1022ff0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1022ff9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1022ffd:	0f 86 0b 02 00 00 	jbe	523 <_runtime.(*pallocBits).findSmallN+0x21e>
 1023003:	48 83 ec 38 	sub	rsp, 56
 1023007:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102300c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1023011:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1023016:	48 c1 e8 06 	shr	rax, 6
 102301a:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102301f:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 1023026:	31 db 	xor	ebx, ebx
 1023028:	eb 03 	jmp	3 <_runtime.(*pallocBits).findSmallN+0x3d>
 102302a:	48 ff c0 	inc	rax
 102302d:	48 83 f8 08 	cmp	rax, 8
 1023031:	0f 83 b1 01 00 00 	jae	433 <_runtime.(*pallocBits).findSmallN+0x1f8>
 1023037:	84 01 	test	byte ptr [rcx], al
 1023039:	48 8b 34 c1 	mov	rsi, qword ptr [rcx + 8*rax]
 102303d:	48 83 fe ff 	cmp	rsi, -1
 1023041:	75 04 	jne	4 <_runtime.(*pallocBits).findSmallN+0x57>
 1023043:	31 db 	xor	ebx, ebx
 1023045:	eb e3 	jmp	-29 <_runtime.(*pallocBits).findSmallN+0x3a>
 1023047:	48 85 f6 	test	rsi, rsi
 102304a:	0f 85 69 01 00 00 	jne	361 <_runtime.(*pallocBits).findSmallN+0x1c9>
 1023050:	bf 40 00 00 00 	mov	edi, 64
 1023055:	48 83 fa ff 	cmp	rdx, -1
 1023059:	0f 85 4c 01 00 00 	jne	332 <_runtime.(*pallocBits).findSmallN+0x1bb>
 102305f:	48 89 f2 	mov	rdx, rsi
 1023062:	48 f7 d6 	not	rsi
 1023065:	48 85 f6 	test	rsi, rsi
 1023068:	0f 85 13 01 00 00 	jne	275 <_runtime.(*pallocBits).findSmallN+0x191>
 102306e:	be 40 00 00 00 	mov	esi, 64
 1023073:	49 89 c0 	mov	r8, rax
 1023076:	48 c1 e0 06 	shl	rax, 6
 102307a:	48 01 f0 	add	rax, rsi
 102307d:	48 8d 34 1f 	lea	rsi, [rdi + rbx]
 1023081:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 1023086:	48 39 fe 	cmp	rsi, rdi
 1023089:	0f 83 d7 00 00 00 	jae	215 <_runtime.(*pallocBits).findSmallN+0x176>
 102308f:	4c 89 44 24 28 	mov	qword ptr [rsp + 40], r8
 1023094:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1023099:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102309e:	48 f7 d2 	not	rdx
 10230a1:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10230a5:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 10230aa:	e8 01 04 00 00 	call	1025 <_runtime.findBitRange64>
 10230af:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10230b4:	48 83 f8 40 	cmp	rax, 64
 10230b8:	0f 82 83 00 00 00 	jb	131 <_runtime.(*pallocBits).findSmallN+0x151>
 10230be:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10230c3:	48 bb 00 00 00 00 01 00 00 00 	movabs	rbx, 4294967296
 10230cd:	48 39 da 	cmp	rdx, rbx
 10230d0:	72 6b 	jb	107 <_runtime.(*pallocBits).findSmallN+0x14d>
 10230d2:	48 c1 ea 20 	shr	rdx, 32
 10230d6:	b8 20 00 00 00 	mov	eax, 32
 10230db:	48 81 fa 00 00 01 00 	cmp	rdx, 65536
 10230e2:	72 54 	jb	84 <_runtime.(*pallocBits).findSmallN+0x148>
 10230e4:	48 c1 ea 10 	shr	rdx, 16
 10230e8:	48 8d 70 10 	lea	rsi, [rax + 16]
 10230ec:	48 81 fa 00 01 00 00 	cmp	rdx, 256
 10230f3:	72 08 	jb	8 <_runtime.(*pallocBits).findSmallN+0x10d>
 10230f5:	48 c1 ea 08 	shr	rdx, 8
 10230f9:	48 83 c6 08 	add	rsi, 8
 10230fd:	48 81 fa 00 01 00 00 	cmp	rdx, 256
 1023104:	0f 83 f6 00 00 00 	jae	246 <_runtime.(*pallocBits).findSmallN+0x210>
 102310a:	48 8d 3d 8f 87 0a 00 	lea	rdi, [rip + 690063]
 1023111:	44 0f b6 04 3a 	movzx	r8d, byte ptr [rdx + rdi]
 1023116:	4a 8d 34 06 	lea	rsi, [rsi + r8]
 102311a:	48 8d 76 c0 	lea	rsi, [rsi - 64]
 102311e:	48 f7 de 	neg	rsi
 1023121:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1023126:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102312b:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1023130:	48 89 f3 	mov	rbx, rsi
 1023133:	e9 f2 fe ff ff 	jmp	-270 <_runtime.(*pallocBits).findSmallN+0x3a>
 1023138:	48 89 c6 	mov	rsi, rax
 102313b:	eb af 	jmp	-81 <_runtime.(*pallocBits).findSmallN+0xfc>
 102313d:	31 c0 	xor	eax, eax
 102313f:	eb 9a 	jmp	-102 <_runtime.(*pallocBits).findSmallN+0xeb>
 1023141:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1023146:	48 c1 e1 06 	shl	rcx, 6
 102314a:	48 01 c8 	add	rax, rcx
 102314d:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1023152:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1023157:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 102315c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1023161:	48 83 c4 38 	add	rsp, 56
 1023165:	c3 	ret
 1023166:	49 c1 e0 06 	shl	r8, 6
 102316a:	49 29 d8 	sub	r8, rbx
 102316d:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 1023172:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1023177:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102317c:	48 83 c4 38 	add	rsp, 56
 1023180:	c3 	ret
 1023181:	4c 8d 42 01 	lea	r8, [rdx + 1]
 1023185:	49 21 f0 	and	r8, rsi
 1023188:	49 b9 09 8b ca b4 71 9d f7 03 	movabs	r9, 285870213051353865
 1023192:	4d 0f af c1 	imul	r8, r9
 1023196:	49 c1 e8 3a 	shr	r8, 58
 102319a:	4c 8d 15 bf 81 0a 00 	lea	r10, [rip + 688575]
 10231a1:	43 0f b6 34 10 	movzx	esi, byte ptr [r8 + r10]
 10231a6:	e9 c8 fe ff ff 	jmp	-312 <_runtime.(*pallocBits).findSmallN+0x83>
 10231ab:	49 89 c0 	mov	r8, rax
 10231ae:	48 89 d0 	mov	rax, rdx
 10231b1:	48 89 f2 	mov	rdx, rsi
 10231b4:	e9 c4 fe ff ff 	jmp	-316 <_runtime.(*pallocBits).findSmallN+0x8d>
 10231b9:	49 89 f0 	mov	r8, rsi
 10231bc:	48 f7 de 	neg	rsi
 10231bf:	4c 21 c6 	and	rsi, r8
 10231c2:	49 b9 09 8b ca b4 71 9d f7 03 	movabs	r9, 285870213051353865
 10231cc:	49 0f af f1 	imul	rsi, r9
 10231d0:	48 c1 ee 3a 	shr	rsi, 58
 10231d4:	4c 8d 15 85 81 0a 00 	lea	r10, [rip + 688517]
 10231db:	42 0f b6 3c 16 	movzx	edi, byte ptr [rsi + r10]
 10231e0:	4c 89 c6 	mov	rsi, r8
 10231e3:	e9 6d fe ff ff 	jmp	-403 <_runtime.(*pallocBits).findSmallN+0x65>
 10231e8:	48 c7 44 24 58 ff ff ff ff 	mov	qword ptr [rsp + 88], -1
 10231f1:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 10231f6:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10231fb:	48 83 c4 38 	add	rsp, 56
 10231ff:	c3 	ret
 1023200:	48 89 d0 	mov	rax, rdx
 1023203:	b9 00 01 00 00 	mov	ecx, 256
 1023208:	e8 53 01 03 00 	call	196947 <_runtime.panicIndexU>
 102320d:	90 	nop
 102320e:	e8 bd d9 02 00 	call	186813 <_runtime.morestack_noctxt>
 1023213:	e9 d8 fd ff ff 	jmp	-552 <_runtime.(*pallocBits).findSmallN>
 1023218:	cc 	int3
 1023219:	cc 	int3
 102321a:	cc 	int3
 102321b:	cc 	int3
 102321c:	cc 	int3
 102321d:	cc 	int3
 102321e:	cc 	int3
 102321f:	cc 	int3

_runtime.(*pallocBits).findLargeN:
 1023220:	48 83 ec 18 	sub	rsp, 24
 1023224:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1023229:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102322e:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1023233:	48 c1 ea 06 	shr	rdx, 6
 1023237:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 102323c:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1023241:	31 c0 	xor	eax, eax
 1023243:	48 c7 c1 ff ff ff ff 	mov	rcx, -1
 102324a:	48 c7 c7 ff ff ff ff 	mov	rdi, -1
 1023251:	eb 03 	jmp	3 <_runtime.(*pallocBits).findLargeN+0x36>
 1023253:	48 ff c2 	inc	rdx
 1023256:	48 83 fa 08 	cmp	rdx, 8
 102325a:	0f 83 fc 01 00 00 	jae	508 <_runtime.(*pallocBits).findLargeN+0x23c>
 1023260:	84 03 	test	byte ptr [rbx], al
 1023262:	4c 8b 04 d3 	mov	r8, qword ptr [rbx + 8*rdx]
 1023266:	49 83 f8 ff 	cmp	r8, -1
 102326a:	75 04 	jne	4 <_runtime.(*pallocBits).findLargeN+0x50>
 102326c:	31 c0 	xor	eax, eax
 102326e:	eb e3 	jmp	-29 <_runtime.(*pallocBits).findLargeN+0x33>
 1023270:	48 83 f9 ff 	cmp	rcx, -1
 1023274:	0f 85 d4 01 00 00 	jne	468 <_runtime.(*pallocBits).findLargeN+0x22e>
 102327a:	4d 89 c1 	mov	r9, r8
 102327d:	49 f7 d0 	not	r8
 1023280:	4d 85 c0 	test	r8, r8
 1023283:	0f 85 9b 01 00 00 	jne	411 <_runtime.(*pallocBits).findLargeN+0x204>
 1023289:	b9 40 00 00 00 	mov	ecx, 64
 102328e:	49 89 d0 	mov	r8, rdx
 1023291:	48 c1 e2 06 	shl	rdx, 6
 1023295:	48 01 ca 	add	rdx, rcx
 1023298:	48 85 c0 	test	rax, rax
 102329b:	0f 85 86 00 00 00 	jne	134 <_runtime.(*pallocBits).findLargeN+0x107>
 10232a1:	90 	nop
 10232a2:	48 bf 00 00 00 00 01 00 00 00 	movabs	rdi, 4294967296
 10232ac:	49 39 f9 	cmp	r9, rdi
 10232af:	72 72 	jb	114 <_runtime.(*pallocBits).findLargeN+0x103>
 10232b1:	49 c1 e9 20 	shr	r9, 32
 10232b5:	b8 20 00 00 00 	mov	eax, 32
 10232ba:	49 81 f9 00 00 01 00 	cmp	r9, 65536
 10232c1:	72 5b 	jb	91 <_runtime.(*pallocBits).findLargeN+0xfe>
 10232c3:	49 c1 e9 10 	shr	r9, 16
 10232c7:	4c 8d 50 10 	lea	r10, [rax + 16]
 10232cb:	49 81 f9 00 01 00 00 	cmp	r9, 256
 10232d2:	72 08 	jb	8 <_runtime.(*pallocBits).findLargeN+0xbc>
 10232d4:	49 c1 e9 08 	shr	r9, 8
 10232d8:	49 83 c2 08 	add	r10, 8
 10232dc:	49 81 f9 00 01 00 00 	cmp	r9, 256
 10232e3:	0f 83 b1 01 00 00 	jae	433 <_runtime.(*pallocBits).findLargeN+0x27a>
 10232e9:	4d 89 c3 	mov	r11, r8
 10232ec:	49 c1 e0 06 	shl	r8, 6
 10232f0:	4c 8d 25 a9 85 0a 00 	lea	r12, [rip + 689577]
 10232f7:	47 0f b6 0c 21 	movzx	r9d, byte ptr [r9 + r12]
 10232fc:	4f 8d 2c 0a 	lea	r13, [r10 + r9]
 1023300:	4f 8d 44 05 00 	lea	r8, [r13 + r8]
 1023305:	4b 8d 04 11 	lea	rax, [r9 + r10]
 1023309:	48 8d 40 c0 	lea	rax, [rax - 64]
 102330d:	48 f7 d8 	neg	rax
 1023310:	48 89 d1 	mov	rcx, rdx
 1023313:	4c 89 c7 	mov	rdi, r8
 1023316:	4c 89 da 	mov	rdx, r11
 1023319:	e9 35 ff ff ff 	jmp	-203 <_runtime.(*pallocBits).findLargeN+0x33>
 102331e:	49 89 c2 	mov	r10, rax
 1023321:	eb a8 	jmp	-88 <_runtime.(*pallocBits).findLargeN+0xab>
 1023323:	31 c0 	xor	eax, eax
 1023325:	eb 93 	jmp	-109 <_runtime.(*pallocBits).findLargeN+0x9a>
 1023327:	4d 85 c9 	test	r9, r9
 102332a:	0f 85 c5 00 00 00 	jne	197 <_runtime.(*pallocBits).findLargeN+0x1d5>
 1023330:	b9 40 00 00 00 	mov	ecx, 64
 1023335:	4c 8d 14 08 	lea	r10, [rax + rcx]
 1023339:	49 39 f2 	cmp	r10, rsi
 102333c:	0f 83 9f 00 00 00 	jae	159 <_runtime.(*pallocBits).findLargeN+0x1c1>
 1023342:	48 83 f9 40 	cmp	rcx, 64
 1023346:	0f 83 86 00 00 00 	jae	134 <_runtime.(*pallocBits).findLargeN+0x1b2>
 102334c:	90 	nop
 102334d:	48 bf 00 00 00 00 01 00 00 00 	movabs	rdi, 4294967296
 1023357:	49 39 f9 	cmp	r9, rdi
 102335a:	72 72 	jb	114 <_runtime.(*pallocBits).findLargeN+0x1ae>
 102335c:	49 c1 e9 20 	shr	r9, 32
 1023360:	b8 20 00 00 00 	mov	eax, 32
 1023365:	49 81 f9 00 00 01 00 	cmp	r9, 65536
 102336c:	72 5b 	jb	91 <_runtime.(*pallocBits).findLargeN+0x1a9>
 102336e:	49 c1 e9 10 	shr	r9, 16
 1023372:	4c 8d 50 10 	lea	r10, [rax + 16]
 1023376:	49 81 f9 00 01 00 00 	cmp	r9, 256
 102337d:	72 08 	jb	8 <_runtime.(*pallocBits).findLargeN+0x167>
 102337f:	49 c1 e9 08 	shr	r9, 8
 1023383:	49 83 c2 08 	add	r10, 8
 1023387:	49 81 f9 00 01 00 00 	cmp	r9, 256
 102338e:	0f 83 f9 00 00 00 	jae	249 <_runtime.(*pallocBits).findLargeN+0x26d>
 1023394:	4d 89 c3 	mov	r11, r8
 1023397:	49 c1 e0 06 	shl	r8, 6
 102339b:	4c 8d 25 fe 84 0a 00 	lea	r12, [rip + 689406]
 10233a2:	47 0f b6 0c 21 	movzx	r9d, byte ptr [r9 + r12]
 10233a7:	4f 8d 2c 0a 	lea	r13, [r10 + r9]
 10233ab:	4f 8d 44 05 00 	lea	r8, [r13 + r8]
 10233b0:	4b 8d 04 11 	lea	rax, [r9 + r10]
 10233b4:	48 8d 40 c0 	lea	rax, [rax - 64]
 10233b8:	48 f7 d8 	neg	rax
 10233bb:	48 89 d1 	mov	rcx, rdx
 10233be:	4c 89 c7 	mov	rdi, r8
 10233c1:	4c 89 da 	mov	rdx, r11
 10233c4:	e9 8a fe ff ff 	jmp	-374 <_runtime.(*pallocBits).findLargeN+0x33>
 10233c9:	49 89 c2 	mov	r10, rax
 10233cc:	eb a8 	jmp	-88 <_runtime.(*pallocBits).findLargeN+0x156>
 10233ce:	31 c0 	xor	eax, eax
 10233d0:	eb 93 	jmp	-109 <_runtime.(*pallocBits).findLargeN+0x145>
 10233d2:	48 83 c0 40 	add	rax, 64
 10233d6:	48 89 d1 	mov	rcx, rdx
 10233d9:	4c 89 c2 	mov	rdx, r8
 10233dc:	e9 72 fe ff ff 	jmp	-398 <_runtime.(*pallocBits).findLargeN+0x33>
 10233e1:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 10233e6:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 10233eb:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10233f0:	48 83 c4 18 	add	rsp, 24
 10233f4:	c3 	ret
 10233f5:	4d 89 ca 	mov	r10, r9
 10233f8:	49 f7 d9 	neg	r9
 10233fb:	4d 21 d1 	and	r9, r10
 10233fe:	49 bb 09 8b ca b4 71 9d f7 03 	movabs	r11, 285870213051353865
 1023408:	4d 0f af cb 	imul	r9, r11
 102340c:	49 c1 e9 3a 	shr	r9, 58
 1023410:	4c 8d 25 49 7f 0a 00 	lea	r12, [rip + 687945]
 1023417:	43 0f b6 0c 21 	movzx	ecx, byte ptr [r9 + r12]
 102341c:	4d 89 d1 	mov	r9, r10
 102341f:	e9 11 ff ff ff 	jmp	-239 <_runtime.(*pallocBits).findLargeN+0x115>
 1023424:	4d 8d 51 01 	lea	r10, [r9 + 1]
 1023428:	4d 21 c2 	and	r10, r8
 102342b:	49 b8 09 8b ca b4 71 9d f7 03 	movabs	r8, 285870213051353865
 1023435:	4d 0f af d0 	imul	r10, r8
 1023439:	49 c1 ea 3a 	shr	r10, 58
 102343d:	4c 8d 1d 1c 7f 0a 00 	lea	r11, [rip + 687900]
 1023444:	43 0f b6 0c 1a 	movzx	ecx, byte ptr [r10 + r11]
 1023449:	e9 40 fe ff ff 	jmp	-448 <_runtime.(*pallocBits).findLargeN+0x6e>
 102344e:	4d 89 c1 	mov	r9, r8
 1023451:	49 89 d0 	mov	r8, rdx
 1023454:	48 89 ca 	mov	rdx, rcx
 1023457:	e9 3c fe ff ff 	jmp	-452 <_runtime.(*pallocBits).findLargeN+0x78>
 102345c:	48 39 f0 	cmp	rax, rsi
 102345f:	73 18 	jae	24 <_runtime.(*pallocBits).findLargeN+0x259>
 1023461:	48 c7 44 24 38 ff ff ff ff 	mov	qword ptr [rsp + 56], -1
 102346a:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 102346f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1023474:	48 83 c4 18 	add	rsp, 24
 1023478:	c3 	ret
 1023479:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 102347e:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1023483:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1023488:	48 83 c4 18 	add	rsp, 24
 102348c:	c3 	ret
 102348d:	4c 89 c8 	mov	rax, r9
 1023490:	b9 00 01 00 00 	mov	ecx, 256
 1023495:	e8 c6 fe 02 00 	call	196294 <_runtime.panicIndexU>
 102349a:	4c 89 c8 	mov	rax, r9
 102349d:	b9 00 01 00 00 	mov	ecx, 256
 10234a2:	e8 b9 fe 02 00 	call	196281 <_runtime.panicIndexU>
 10234a7:	90 	nop
 10234a8:	cc 	int3
 10234a9:	cc 	int3
 10234aa:	cc 	int3
 10234ab:	cc 	int3
 10234ac:	cc 	int3
 10234ad:	cc 	int3
 10234ae:	cc 	int3
 10234af:	cc 	int3

_runtime.findBitRange64:
 10234b0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10234b5:	48 89 c2 	mov	rdx, rax
 10234b8:	48 f7 d0 	not	rax
 10234bb:	48 85 c0 	test	rax, rax
 10234be:	0f 85 b9 00 00 00 	jne	185 <_runtime.findBitRange64+0xcd>
 10234c4:	b8 40 00 00 00 	mov	eax, 64
 10234c9:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10234ce:	31 c9 	xor	ecx, ecx
 10234d0:	48 39 d8 	cmp	rax, rbx
 10234d3:	0f 83 9e 00 00 00 	jae	158 <_runtime.findBitRange64+0xc7>
 10234d9:	48 83 f9 40 	cmp	rcx, 64
 10234dd:	0f 83 94 00 00 00 	jae	148 <_runtime.findBitRange64+0xc7>
 10234e3:	48 01 c1 	add	rcx, rax
 10234e6:	48 83 f9 40 	cmp	rcx, 64
 10234ea:	48 19 c0 	sbb	rax, rax
 10234ed:	48 89 d6 	mov	rsi, rdx
 10234f0:	48 d3 ea 	shr	rdx, cl
 10234f3:	48 89 d7 	mov	rdi, rdx
 10234f6:	48 21 c2 	and	rdx, rax
 10234f9:	48 85 f8 	test	rax, rdi
 10234fc:	75 50 	jne	80 <_runtime.findBitRange64+0x9e>
 10234fe:	b8 40 00 00 00 	mov	eax, 64
 1023503:	48 01 c1 	add	rcx, rax
 1023506:	48 83 f9 40 	cmp	rcx, 64
 102350a:	48 19 c0 	sbb	rax, rax
 102350d:	48 89 f2 	mov	rdx, rsi
 1023510:	48 d3 ee 	shr	rsi, cl
 1023513:	48 21 f0 	and	rax, rsi
 1023516:	48 89 c6 	mov	rsi, rax
 1023519:	48 f7 d0 	not	rax
 102351c:	48 85 c0 	test	rax, rax
 102351f:	75 07 	jne	7 <_runtime.findBitRange64+0x78>
 1023521:	b8 40 00 00 00 	mov	eax, 64
 1023526:	eb a8 	jmp	-88 <_runtime.findBitRange64+0x20>
 1023528:	48 ff c6 	inc	rsi
 102352b:	48 21 c6 	and	rsi, rax
 102352e:	48 bf 09 8b ca b4 71 9d f7 03 	movabs	rdi, 285870213051353865
 1023538:	48 0f af f7 	imul	rsi, rdi
 102353c:	48 c1 ee 3a 	shr	rsi, 58
 1023540:	4c 8d 05 19 7e 0a 00 	lea	r8, [rip + 687641]
 1023547:	42 0f b6 04 06 	movzx	eax, byte ptr [rsi + r8]
 102354c:	eb 82 	jmp	-126 <_runtime.findBitRange64+0x20>
 102354e:	48 89 d7 	mov	rdi, rdx
 1023551:	48 f7 da 	neg	rdx
 1023554:	48 21 fa 	and	rdx, rdi
 1023557:	48 bf 09 8b ca b4 71 9d f7 03 	movabs	rdi, 285870213051353865
 1023561:	48 0f af d7 	imul	rdx, rdi
 1023565:	48 c1 ea 3a 	shr	rdx, 58
 1023569:	4c 8d 05 f0 7d 0a 00 	lea	r8, [rip + 687600]
 1023570:	42 0f b6 04 02 	movzx	eax, byte ptr [rdx + r8]
 1023575:	eb 8c 	jmp	-116 <_runtime.findBitRange64+0x53>
 1023577:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 102357c:	c3 	ret
 102357d:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 1023581:	48 21 c3 	and	rbx, rax
 1023584:	48 be 09 8b ca b4 71 9d f7 03 	movabs	rsi, 285870213051353865
 102358e:	48 0f af de 	imul	rbx, rsi
 1023592:	48 c1 eb 3a 	shr	rbx, 58
 1023596:	48 8d 3d c3 7d 0a 00 	lea	rdi, [rip + 687555]
 102359d:	0f b6 04 3b 	movzx	eax, byte ptr [rbx + rdi]
 10235a1:	e9 23 ff ff ff 	jmp	-221 <_runtime.findBitRange64+0x19>
 10235a6:	cc 	int3
 10235a7:	cc 	int3
 10235a8:	cc 	int3
 10235a9:	cc 	int3
 10235aa:	cc 	int3
 10235ab:	cc 	int3
 10235ac:	cc 	int3
 10235ad:	cc 	int3
 10235ae:	cc 	int3
 10235af:	cc 	int3

_runtime.(*pallocData).allocRange:
 10235b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10235b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10235bd:	76 62 	jbe	98 <_runtime.(*pallocData).allocRange+0x71>
 10235bf:	48 83 ec 20 	sub	rsp, 32
 10235c3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10235c8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10235cd:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10235d2:	84 00 	test	byte ptr [rax], al
 10235d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10235d8:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10235dd:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10235e2:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10235e7:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10235ec:	e8 5f f2 ff ff 	call	-3489 <_runtime.(*pageBits).setRange>
 10235f1:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10235f6:	48 83 c0 40 	add	rax, 64
 10235fa:	48 89 04 24 	mov	qword ptr [rsp], rax
 10235fe:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1023603:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1023608:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102360d:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1023612:	e8 79 f3 ff ff 	call	-3207 <_runtime.(*pageBits).clearRange>
 1023617:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102361c:	48 83 c4 20 	add	rsp, 32
 1023620:	c3 	ret
 1023621:	e8 aa d5 02 00 	call	185770 <_runtime.morestack_noctxt>
 1023626:	eb 88 	jmp	-120 <_runtime.(*pallocData).allocRange>
 1023628:	cc 	int3
 1023629:	cc 	int3
 102362a:	cc 	int3
 102362b:	cc 	int3
 102362c:	cc 	int3
 102362d:	cc 	int3
 102362e:	cc 	int3
 102362f:	cc 	int3

_runtime.(*pallocData).allocAll:
 1023630:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023639:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102363d:	76 3a 	jbe	58 <_runtime.(*pallocData).allocAll+0x49>
 102363f:	48 83 ec 10 	sub	rsp, 16
 1023643:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1023648:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102364d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1023652:	84 00 	test	byte ptr [rax], al
 1023654:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023658:	e8 13 f3 ff ff 	call	-3309 <_runtime.(*pageBits).setAll>
 102365d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1023662:	48 83 c0 40 	add	rax, 64
 1023666:	48 89 04 24 	mov	qword ptr [rsp], rax
 102366a:	e8 51 f4 ff ff 	call	-2991 <_runtime.(*pageBits).clearAll>
 102366f:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1023674:	48 83 c4 10 	add	rsp, 16
 1023678:	c3 	ret
 1023679:	e8 52 d5 02 00 	call	185682 <_runtime.morestack_noctxt>
 102367e:	eb b0 	jmp	-80 <_runtime.(*pallocData).allocAll>

_runtime.newBucket:
 1023680:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023689:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102368d:	0f 86 a7 00 00 00 	jbe	167 <_runtime.newBucket+0xba>
 1023693:	48 83 ec 30 	sub	rsp, 48
 1023697:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 102369c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10236a1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10236a6:	48 c1 e0 03 	shl	rax, 3
 10236aa:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10236af:	48 83 fa 01 	cmp	rdx, 1
 10236b3:	75 5b 	jne	91 <_runtime.newBucket+0x90>
 10236b5:	48 05 b0 00 00 00 	add	rax, 176
 10236bb:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10236c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10236c4:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10236cd:	48 8d 0d dc 4f 0d 00 	lea	rcx, [rip + 872412]
 10236d4:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10236d9:	e8 32 70 fe ff 	call	-102350 <_runtime.persistentalloc>
 10236de:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10236e3:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10236e8:	48 01 0d 11 41 0d 00 	add	qword ptr [rip + 868625], rcx
 10236ef:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10236f4:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 10236f8:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10236fd:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 1023701:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1023706:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 102370b:	48 83 c4 30 	add	rsp, 48
 102370f:	c3 	ret
 1023710:	48 8d 5a fe 	lea	rbx, [rdx - 2]
 1023714:	48 83 fb 01 	cmp	rbx, 1
 1023718:	77 06 	ja	6 <_runtime.newBucket+0xa0>
 102371a:	48 83 c0 40 	add	rax, 64
 102371e:	eb 9b 	jmp	-101 <_runtime.newBucket+0x3b>
 1023720:	48 8d 05 c5 18 05 00 	lea	rax, [rip + 334021]
 1023727:	48 89 04 24 	mov	qword ptr [rsp], rax
 102372b:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1023734:	e8 27 56 00 00 	call	22055 <_runtime.throw>
 1023739:	90 	nop
 102373a:	e8 91 d4 02 00 	call	185489 <_runtime.morestack_noctxt>
 102373f:	e9 3c ff ff ff 	jmp	-196 <_runtime.newBucket>
 1023744:	cc 	int3
 1023745:	cc 	int3
 1023746:	cc 	int3
 1023747:	cc 	int3
 1023748:	cc 	int3
 1023749:	cc 	int3
 102374a:	cc 	int3
 102374b:	cc 	int3
 102374c:	cc 	int3
 102374d:	cc 	int3
 102374e:	cc 	int3
 102374f:	cc 	int3

_runtime.(*bucket).mp:
 1023750:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023759:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102375d:	76 4f 	jbe	79 <_runtime.(*bucket).mp+0x5e>
 102375f:	48 83 ec 18 	sub	rsp, 24
 1023763:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1023768:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102376d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1023772:	48 83 78 10 01 	cmp	qword ptr [rax + 16], 1
 1023777:	75 1b 	jne	27 <_runtime.(*bucket).mp+0x44>
 1023779:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 102377d:	48 8d 04 c8 	lea	rax, [rax + 8*rcx]
 1023781:	48 8d 40 30 	lea	rax, [rax + 48]
 1023785:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102378a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102378f:	48 83 c4 18 	add	rsp, 24
 1023793:	c3 	ret
 1023794:	48 8d 05 f9 09 05 00 	lea	rax, [rip + 330233]
 102379b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102379f:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 10237a8:	e8 b3 55 00 00 	call	21939 <_runtime.throw>
 10237ad:	90 	nop
 10237ae:	e8 1d d4 02 00 	call	185373 <_runtime.morestack_noctxt>
 10237b3:	eb 9b 	jmp	-101 <_runtime.(*bucket).mp>
 10237b5:	cc 	int3
 10237b6:	cc 	int3
 10237b7:	cc 	int3
 10237b8:	cc 	int3
 10237b9:	cc 	int3
 10237ba:	cc 	int3
 10237bb:	cc 	int3
 10237bc:	cc 	int3
 10237bd:	cc 	int3
 10237be:	cc 	int3
 10237bf:	cc 	int3

_runtime.(*bucket).bp:
 10237c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10237c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10237cd:	76 58 	jbe	88 <_runtime.(*bucket).bp+0x67>
 10237cf:	48 83 ec 18 	sub	rsp, 24
 10237d3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10237d8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10237dd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10237e2:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 10237e6:	48 83 f9 02 	cmp	rcx, 2
 10237ea:	74 06 	je	6 <_runtime.(*bucket).bp+0x32>
 10237ec:	48 83 f9 03 	cmp	rcx, 3
 10237f0:	75 1b 	jne	27 <_runtime.(*bucket).bp+0x4d>
 10237f2:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 10237f6:	48 8d 04 c8 	lea	rax, [rax + 8*rcx]
 10237fa:	48 8d 40 30 	lea	rax, [rax + 48]
 10237fe:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1023803:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1023808:	48 83 c4 18 	add	rsp, 24
 102380c:	c3 	ret
 102380d:	48 8d 05 6c 09 05 00 	lea	rax, [rip + 330092]
 1023814:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023818:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1023821:	e8 3a 55 00 00 	call	21818 <_runtime.throw>
 1023826:	90 	nop
 1023827:	e8 a4 d3 02 00 	call	185252 <_runtime.morestack_noctxt>
 102382c:	eb 92 	jmp	-110 <_runtime.(*bucket).bp>
 102382e:	cc 	int3
 102382f:	cc 	int3

_runtime.stkbucket:
 1023830:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023839:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102383d:	0f 86 20 03 00 00 	jbe	800 <_runtime.stkbucket+0x333>
 1023843:	48 83 ec 58 	sub	rsp, 88
 1023847:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 102384c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1023851:	48 83 3d bf a9 0a 00 00 	cmp	qword ptr [rip + 698815], 0
 1023859:	0f 84 80 02 00 00 	je	640 <_runtime.stkbucket+0x2af>
 102385f:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 1023864:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 1023869:	31 c0 	xor	eax, eax
 102386b:	31 c9 	xor	ecx, ecx
 102386d:	eb 1f 	jmp	31 <_runtime.stkbucket+0x5e>
 102386f:	4c 8b 04 c6 	mov	r8, qword ptr [rsi + 8*rax]
 1023873:	48 ff c0 	inc	rax
 1023876:	49 01 c8 	add	r8, rcx
 1023879:	4d 89 c1 	mov	r9, r8
 102387c:	49 c1 e0 0a 	shl	r8, 10
 1023880:	4b 8d 0c 01 	lea	rcx, [r9 + r8]
 1023884:	49 89 c8 	mov	r8, rcx
 1023887:	48 c1 e9 06 	shr	rcx, 6
 102388b:	4c 31 c1 	xor	rcx, r8
 102388e:	48 39 f8 	cmp	rax, rdi
 1023891:	7c dc 	jl	-36 <_runtime.stkbucket+0x3f>
 1023893:	4c 8b 05 7e a9 0a 00 	mov	r8, qword ptr [rip + 698750]
 102389a:	41 84 00 	test	byte ptr [r8], al
 102389d:	4c 8b 4c 24 68 	mov	r9, qword ptr [rsp + 104]
 10238a2:	4e 8d 14 09 	lea	r10, [rcx + r9]
 10238a6:	4d 89 d3 	mov	r11, r10
 10238a9:	49 c1 e2 0a 	shl	r10, 10
 10238ad:	4d 01 da 	add	r10, r11
 10238b0:	4d 89 d3 	mov	r11, r10
 10238b3:	49 c1 ea 06 	shr	r10, 6
 10238b7:	4d 31 da 	xor	r10, r11
 10238ba:	4f 8d 14 d2 	lea	r10, [r10 + 8*r10]
 10238be:	4d 89 d3 	mov	r11, r10
 10238c1:	49 c1 ea 0b 	shr	r10, 11
 10238c5:	4d 31 da 	xor	r10, r11
 10238c8:	48 b8 92 1a 19 53 bc 1f 6a ba 	movabs	rax, -5014160341415159150
 10238d2:	49 f7 e2 	mul	r10
 10238d5:	48 c1 ea 11 	shr	rdx, 17
 10238d9:	4c 69 da 1f bf 02 00 	imul	r11, rdx, 179999
 10238e0:	4c 89 d0 	mov	rax, r10
 10238e3:	4c 29 d8 	sub	rax, r11
 10238e6:	48 3d 1f bf 02 00 	cmp	rax, 179999
 10238ec:	0f 83 4d 02 00 00 	jae	589 <_runtime.stkbucket+0x30f>
 10238f2:	4c 89 54 24 38 	mov	qword ptr [rsp + 56], r10
 10238f7:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10238fc:	49 8b 0c c0 	mov	rcx, qword ptr [r8 + 8*rax]
 1023900:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 1023905:	eb 03 	jmp	3 <_runtime.stkbucket+0xda>
 1023907:	48 8b 09 	mov	rcx, qword ptr [rcx]
 102390a:	48 85 c9 	test	rcx, rcx
 102390d:	0f 84 af 00 00 00 	je	175 <_runtime.stkbucket+0x192>
 1023913:	4c 39 41 10 	cmp	qword ptr [rcx + 16], r8
 1023917:	0f 85 9e 00 00 00 	jne	158 <_runtime.stkbucket+0x18b>
 102391d:	4c 39 51 18 	cmp	qword ptr [rcx + 24], r10
 1023921:	0f 85 8d 00 00 00 	jne	141 <_runtime.stkbucket+0x184>
 1023927:	4c 39 49 20 	cmp	qword ptr [rcx + 32], r9
 102392b:	74 18 	je	24 <_runtime.stkbucket+0x115>
 102392d:	31 d2 	xor	edx, edx
 102392f:	84 d2 	test	dl, dl
 1023931:	74 d4 	je	-44 <_runtime.stkbucket+0xd7>
 1023933:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 102393b:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1023940:	48 83 c4 58 	add	rsp, 88
 1023944:	c3 	ret
 1023945:	90 	nop
 1023946:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 102394a:	48 83 fa 20 	cmp	rdx, 32
 102394e:	0f 87 e1 01 00 00 	ja	481 <_runtime.stkbucket+0x305>
 1023954:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1023959:	48 8d 41 30 	lea	rax, [rcx + 48]
 102395d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023961:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1023966:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 102396b:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1023970:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 1023975:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 102397d:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1023982:	e8 e9 01 00 00 	call	489 <_runtime.eqslice>
 1023987:	0f b6 54 24 30 	movzx	edx, byte ptr [rsp + 48]
 102398c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1023991:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1023996:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 102399b:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 10239a0:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 10239a5:	4c 8b 4c 24 68 	mov	r9, qword ptr [rsp + 104]
 10239aa:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 10239af:	e9 7b ff ff ff 	jmp	-133 <_runtime.stkbucket+0xff>
 10239b4:	31 d2 	xor	edx, edx
 10239b6:	e9 74 ff ff ff 	jmp	-140 <_runtime.stkbucket+0xff>
 10239bb:	31 d2 	xor	edx, edx
 10239bd:	e9 6d ff ff ff 	jmp	-147 <_runtime.stkbucket+0xff>
 10239c2:	0f b6 8c 24 88 00 00 00 	movzx	ecx, byte ptr [rsp + 136]
 10239ca:	84 c9 	test	cl, cl
 10239cc:	0f 84 f7 00 00 00 	je	247 <_runtime.stkbucket+0x299>
 10239d2:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10239d6:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 10239db:	e8 a0 fc ff ff 	call	-864 <_runtime.newBucket>
 10239e0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10239e5:	90 	nop
 10239e6:	48 8b 50 28 	mov	rdx, qword ptr [rax + 40]
 10239ea:	48 83 fa 20 	cmp	rdx, 32
 10239ee:	0f 87 37 01 00 00 	ja	311 <_runtime.stkbucket+0x2fb>
 10239f4:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10239f9:	48 39 ca 	cmp	rdx, rcx
 10239fc:	48 0f 4f d1 	cmovg	rdx, rcx
 1023a00:	48 8d 48 30 	lea	rcx, [rax + 48]
 1023a04:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1023a09:	48 39 d9 	cmp	rcx, rbx
 1023a0c:	0f 85 91 00 00 00 	jne	145 <_runtime.stkbucket+0x273>
 1023a12:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1023a17:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 1023a1b:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1023a20:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 1023a24:	48 8b 0d ed a7 0a 00 	mov	rcx, qword ptr [rip + 698349]
 1023a2b:	84 01 	test	byte ptr [rcx], al
 1023a2d:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1023a32:	48 8b 0c d1 	mov	rcx, qword ptr [rcx + 8*rdx]
 1023a36:	48 89 08 	mov	qword ptr [rax], rcx
 1023a39:	48 8b 0d d8 a7 0a 00 	mov	rcx, qword ptr [rip + 698328]
 1023a40:	84 01 	test	byte ptr [rcx], al
 1023a42:	48 89 04 d1 	mov	qword ptr [rcx + 8*rdx], rax
 1023a46:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1023a4b:	48 83 f9 01 	cmp	rcx, 1
 1023a4f:	75 24 	jne	36 <_runtime.stkbucket+0x245>
 1023a51:	48 8b 0d 00 a8 0a 00 	mov	rcx, qword ptr [rip + 698368]
 1023a58:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1023a5c:	48 89 05 f5 a7 0a 00 	mov	qword ptr [rip + 698357], rax
 1023a63:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 1023a6b:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1023a70:	48 83 c4 58 	add	rsp, 88
 1023a74:	c3 	ret
 1023a75:	48 83 f9 03 	cmp	rcx, 3
 1023a79:	75 14 	jne	20 <_runtime.stkbucket+0x25f>
 1023a7b:	48 8b 0d 36 a8 0a 00 	mov	rcx, qword ptr [rip + 698422]
 1023a82:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1023a86:	48 89 05 2b a8 0a 00 	mov	qword ptr [rip + 698411], rax
 1023a8d:	eb d4 	jmp	-44 <_runtime.stkbucket+0x233>
 1023a8f:	48 8b 0d 7a a7 0a 00 	mov	rcx, qword ptr [rip + 698234]
 1023a96:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1023a9a:	48 89 05 6f a7 0a 00 	mov	qword ptr [rip + 698223], rax
 1023aa1:	eb c0 	jmp	-64 <_runtime.stkbucket+0x233>
 1023aa3:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1023aa8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1023aac:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1023ab1:	48 c1 e2 03 	shl	rdx, 3
 1023ab5:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1023aba:	e8 91 00 03 00 	call	196753 <_runtime.memmove>
 1023abf:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1023ac4:	e9 49 ff ff ff 	jmp	-183 <_runtime.stkbucket+0x1e2>
 1023ac9:	48 c7 84 24 90 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 144], 0
 1023ad5:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1023ada:	48 83 c4 58 	add	rsp, 88
 1023ade:	c3 	ret
 1023adf:	48 c7 04 24 f8 f8 15 00 	mov	qword ptr [rsp], 1439992
 1023ae7:	48 8d 05 c2 4b 0d 00 	lea	rax, [rip + 871362]
 1023aee:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1023af3:	e8 c8 d3 fe ff 	call	-76856 <_runtime.sysAlloc>
 1023af8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1023afd:	83 3d fc 3d 0d 00 00 	cmp	dword ptr [rip + 867836], 0
 1023b04:	75 17 	jne	23 <_runtime.stkbucket+0x2ed>
 1023b06:	48 89 05 0b a7 0a 00 	mov	qword ptr [rip + 698123], rax
 1023b0d:	48 83 3d 03 a7 0a 00 00 	cmp	qword ptr [rip + 698115], 0
 1023b15:	0f 85 44 fd ff ff 	jne	-700 <_runtime.stkbucket+0x2f>
 1023b1b:	eb 2c 	jmp	44 <_runtime.stkbucket+0x319>
 1023b1d:	48 8d 3d f4 a6 0a 00 	lea	rdi, [rip + 698100]
 1023b24:	e8 b7 ee 02 00 	call	192183 <_runtime.gcWriteBarrier>
 1023b29:	eb e2 	jmp	-30 <_runtime.stkbucket+0x2dd>
 1023b2b:	bb 20 00 00 00 	mov	ebx, 32
 1023b30:	e8 ab f8 02 00 	call	194731 <_runtime.panicSlice3AlenU>
 1023b35:	bb 20 00 00 00 	mov	ebx, 32
 1023b3a:	e8 a1 f8 02 00 	call	194721 <_runtime.panicSlice3AlenU>
 1023b3f:	b9 1f bf 02 00 	mov	ecx, 179999
 1023b44:	e8 07 f8 02 00 	call	194567 <_runtime.panicIndex>
 1023b49:	48 8d 05 32 1f 05 00 	lea	rax, [rip + 335666]
 1023b50:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023b54:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 1023b5d:	e8 fe 51 00 00 	call	20990 <_runtime.throw>
 1023b62:	90 	nop
 1023b63:	e8 68 d0 02 00 	call	184424 <_runtime.morestack_noctxt>
 1023b68:	e9 c3 fc ff ff 	jmp	-829 <_runtime.stkbucket>
 1023b6d:	cc 	int3
 1023b6e:	cc 	int3
 1023b6f:	cc 	int3

_runtime.eqslice:
 1023b70:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1023b75:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1023b7a:	48 39 c8 	cmp	rax, rcx
 1023b7d:	75 2f 	jne	47 <_runtime.eqslice+0x3e>
 1023b7f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1023b84:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1023b89:	31 db 	xor	ebx, ebx
 1023b8b:	eb 03 	jmp	3 <_runtime.eqslice+0x20>
 1023b8d:	48 ff c3 	inc	rbx
 1023b90:	48 39 c3 	cmp	rbx, rax
 1023b93:	7d 13 	jge	19 <_runtime.eqslice+0x38>
 1023b95:	48 8b 34 da 	mov	rsi, qword ptr [rdx + 8*rbx]
 1023b99:	48 8b 3c d9 	mov	rdi, qword ptr [rcx + 8*rbx]
 1023b9d:	48 39 fe 	cmp	rsi, rdi
 1023ba0:	74 eb 	je	-21 <_runtime.eqslice+0x1d>
 1023ba2:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1023ba7:	c3 	ret
 1023ba8:	c6 44 24 38 01 	mov	byte ptr [rsp + 56], 1
 1023bad:	c3 	ret
 1023bae:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1023bb3:	c3 	ret
 1023bb4:	cc 	int3
 1023bb5:	cc 	int3
 1023bb6:	cc 	int3
 1023bb7:	cc 	int3
 1023bb8:	cc 	int3
 1023bb9:	cc 	int3
 1023bba:	cc 	int3
 1023bbb:	cc 	int3
 1023bbc:	cc 	int3
 1023bbd:	cc 	int3
 1023bbe:	cc 	int3
 1023bbf:	cc 	int3

_runtime.mProf_NextCycle:
 1023bc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023bc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1023bcd:	76 62 	jbe	98 <_runtime.mProf_NextCycle+0x71>
 1023bcf:	48 83 ec 10 	sub	rsp, 16
 1023bd3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1023bd8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1023bdd:	48 8d 05 cc 3c 0d 00 	lea	rax, [rip + 867532]
 1023be4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023be8:	e8 43 45 fe ff 	call	-113341 <_runtime.lock>
 1023bed:	8b 05 65 3c 0d 00 	mov	eax, dword ptr [rip + 867429]
 1023bf3:	ff c0 	inc	eax
 1023bf5:	b9 ab aa aa aa 	mov	ecx, 2863311531
 1023bfa:	48 0f af c8 	imul	rcx, rax
 1023bfe:	48 c1 e9 3a 	shr	rcx, 58
 1023c02:	8d 0c 49 	lea	ecx, [rcx + 2*rcx]
 1023c05:	c1 e1 19 	shl	ecx, 25
 1023c08:	29 c8 	sub	eax, ecx
 1023c0a:	89 05 48 3c 0d 00 	mov	dword ptr [rip + 867400], eax
 1023c10:	c6 05 45 3c 0d 00 00 	mov	byte ptr [rip + 867397], 0
 1023c17:	48 8d 05 92 3c 0d 00 	lea	rax, [rip + 867474]
 1023c1e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023c22:	e8 e9 46 fe ff 	call	-112919 <_runtime.unlock>
 1023c27:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1023c2c:	48 83 c4 10 	add	rsp, 16
 1023c30:	c3 	ret
 1023c31:	e8 9a cf 02 00 	call	184218 <_runtime.morestack_noctxt>
 1023c36:	eb 88 	jmp	-120 <_runtime.mProf_NextCycle>
 1023c38:	cc 	int3
 1023c39:	cc 	int3
 1023c3a:	cc 	int3
 1023c3b:	cc 	int3
 1023c3c:	cc 	int3
 1023c3d:	cc 	int3
 1023c3e:	cc 	int3
 1023c3f:	cc 	int3

_runtime.mProf_Flush:
 1023c40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023c49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1023c4d:	76 4f 	jbe	79 <_runtime.mProf_Flush+0x5e>
 1023c4f:	48 83 ec 10 	sub	rsp, 16
 1023c53:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1023c58:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1023c5d:	48 8d 05 4c 3c 0d 00 	lea	rax, [rip + 867404]
 1023c64:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023c68:	e8 c3 44 fe ff 	call	-113469 <_runtime.lock>
 1023c6d:	80 3d e8 3b 0d 00 00 	cmp	byte ptr [rip + 867304], 0
 1023c74:	74 1a 	je	26 <_runtime.mProf_Flush+0x50>
 1023c76:	48 8d 05 33 3c 0d 00 	lea	rax, [rip + 867379]
 1023c7d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023c81:	e8 8a 46 fe ff 	call	-113014 <_runtime.unlock>
 1023c86:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1023c8b:	48 83 c4 10 	add	rsp, 16
 1023c8f:	c3 	ret
 1023c90:	e8 1b 00 00 00 	call	27 <_runtime.mProf_FlushLocked>
 1023c95:	c6 05 c0 3b 0d 00 01 	mov	byte ptr [rip + 867264], 1
 1023c9c:	eb d8 	jmp	-40 <_runtime.mProf_Flush+0x36>
 1023c9e:	e8 2d cf 02 00 	call	184109 <_runtime.morestack_noctxt>
 1023ca3:	eb 9b 	jmp	-101 <_runtime.mProf_Flush>
 1023ca5:	cc 	int3
 1023ca6:	cc 	int3
 1023ca7:	cc 	int3
 1023ca8:	cc 	int3
 1023ca9:	cc 	int3
 1023caa:	cc 	int3
 1023cab:	cc 	int3
 1023cac:	cc 	int3
 1023cad:	cc 	int3
 1023cae:	cc 	int3
 1023caf:	cc 	int3

_runtime.mProf_FlushLocked:
 1023cb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023cb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1023cbd:	0f 86 b9 00 00 00 	jbe	185 <_runtime.mProf_FlushLocked+0xcc>
 1023cc3:	48 83 ec 28 	sub	rsp, 40
 1023cc7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1023ccc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1023cd1:	8b 05 81 3b 0d 00 	mov	eax, dword ptr [rip + 867201]
 1023cd7:	89 44 24 14 	mov	dword ptr [rsp + 20], eax
 1023cdb:	48 8b 0d 76 a5 0a 00 	mov	rcx, qword ptr [rip + 697718]
 1023ce2:	e9 82 00 00 00 	jmp	130 <_runtime.mProf_FlushLocked+0xb9>
 1023ce7:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1023cec:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1023cf0:	e8 5b fa ff ff 	call	-1445 <_runtime.(*bucket).mp>
 1023cf5:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1023cfa:	b9 ab aa aa aa 	mov	ecx, 2863311531
 1023cff:	8b 54 24 14 	mov	edx, dword ptr [rsp + 20]
 1023d03:	48 0f af ca 	imul	rcx, rdx
 1023d07:	48 c1 e9 21 	shr	rcx, 33
 1023d0b:	8d 0c 49 	lea	ecx, [rcx + 2*rcx]
 1023d0e:	89 d3 	mov	ebx, edx
 1023d10:	29 ca 	sub	edx, ecx
 1023d12:	48 c1 e2 05 	shl	rdx, 5
 1023d16:	90 	nop
 1023d17:	48 8b 4c 10 20 	mov	rcx, qword ptr [rax + rdx + 32]
 1023d1c:	48 01 08 	add	qword ptr [rax], rcx
 1023d1f:	48 8b 4c 10 28 	mov	rcx, qword ptr [rax + rdx + 40]
 1023d24:	48 01 48 08 	add	qword ptr [rax + 8], rcx
 1023d28:	48 8b 4c 10 30 	mov	rcx, qword ptr [rax + rdx + 48]
 1023d2d:	48 01 48 10 	add	qword ptr [rax + 16], rcx
 1023d31:	48 8b 4c 10 38 	mov	rcx, qword ptr [rax + rdx + 56]
 1023d36:	48 01 48 18 	add	qword ptr [rax + 24], rcx
 1023d3a:	48 c7 44 10 20 00 00 00 00 	mov	qword ptr [rax + rdx + 32], 0
 1023d43:	48 c7 44 10 28 00 00 00 00 	mov	qword ptr [rax + rdx + 40], 0
 1023d4c:	48 c7 44 10 30 00 00 00 00 	mov	qword ptr [rax + rdx + 48], 0
 1023d55:	48 c7 44 10 38 00 00 00 00 	mov	qword ptr [rax + rdx + 56], 0
 1023d5e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1023d63:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1023d67:	89 d8 	mov	eax, ebx
 1023d69:	48 85 c9 	test	rcx, rcx
 1023d6c:	0f 85 75 ff ff ff 	jne	-139 <_runtime.mProf_FlushLocked+0x37>
 1023d72:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1023d77:	48 83 c4 28 	add	rsp, 40
 1023d7b:	c3 	ret
 1023d7c:	e8 4f ce 02 00 	call	183887 <_runtime.morestack_noctxt>
 1023d81:	e9 2a ff ff ff 	jmp	-214 <_runtime.mProf_FlushLocked>
 1023d86:	cc 	int3
 1023d87:	cc 	int3
 1023d88:	cc 	int3
 1023d89:	cc 	int3
 1023d8a:	cc 	int3
 1023d8b:	cc 	int3
 1023d8c:	cc 	int3
 1023d8d:	cc 	int3
 1023d8e:	cc 	int3
 1023d8f:	cc 	int3

_runtime.mProf_Malloc:
 1023d90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023d99:	48 8d 84 24 10 ff ff ff 	lea	rax, [rsp - 240]
 1023da1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1023da5:	0f 86 a3 01 00 00 	jbe	419 <_runtime.mProf_Malloc+0x1be>
 1023dab:	48 81 ec 70 01 00 00 	sub	rsp, 368
 1023db2:	48 89 ac 24 68 01 00 00 	mov	qword ptr [rsp + 360], rbp
 1023dba:	48 8d ac 24 68 01 00 00 	lea	rbp, [rsp + 360]
 1023dc2:	48 8d 7c 24 48 	lea	rdi, [rsp + 72]
 1023dc7:	0f 57 c0 	xorps	xmm0, xmm0
 1023dca:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1023dcf:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1023dd4:	e8 fb f6 02 00 	call	194299 <_runtime.duffzero+0xe4>
 1023dd9:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1023ddd:	48 c7 04 24 04 00 00 00 	mov	qword ptr [rsp], 4
 1023de5:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1023dea:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1023def:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 1023df8:	48 c7 44 24 18 20 00 00 00 	mov	qword ptr [rsp + 24], 32
 1023e01:	e8 2a 61 02 00 	call	155946 <_runtime.callers>
 1023e06:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1023e0b:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1023e10:	48 8d 0d 99 3a 0d 00 	lea	rcx, [rip + 866969]
 1023e17:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1023e1b:	e8 10 43 fe ff 	call	-113904 <_runtime.lock>
 1023e20:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1023e25:	48 83 f9 20 	cmp	rcx, 32
 1023e29:	0f 87 14 01 00 00 	ja	276 <_runtime.mProf_Malloc+0x1b3>
 1023e2f:	48 c7 04 24 01 00 00 00 	mov	qword ptr [rsp], 1
 1023e37:	48 8b 84 24 80 01 00 00 	mov	rax, qword ptr [rsp + 384]
 1023e3f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1023e44:	48 8d 54 24 48 	lea	rdx, [rsp + 72]
 1023e49:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1023e4e:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1023e53:	48 c7 44 24 20 20 00 00 00 	mov	qword ptr [rsp + 32], 32
 1023e5c:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1023e61:	e8 ca f9 ff ff 	call	-1590 <_runtime.stkbucket>
 1023e66:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1023e6b:	48 89 84 24 48 01 00 00 	mov	qword ptr [rsp + 328], rax
 1023e73:	8b 0d df 39 0d 00 	mov	ecx, dword ptr [rip + 866783]
 1023e79:	89 4c 24 3c 	mov	dword ptr [rsp + 60], ecx
 1023e7d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023e81:	e8 ca f8 ff ff 	call	-1846 <_runtime.(*bucket).mp>
 1023e86:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1023e8b:	84 00 	test	byte ptr [rax], al
 1023e8d:	8b 4c 24 3c 	mov	ecx, dword ptr [rsp + 60]
 1023e91:	83 c1 02 	add	ecx, 2
 1023e94:	ba ab aa aa aa 	mov	edx, 2863311531
 1023e99:	48 0f af d1 	imul	rdx, rcx
 1023e9d:	48 c1 ea 21 	shr	rdx, 33
 1023ea1:	8d 14 52 	lea	edx, [rdx + 2*rdx]
 1023ea4:	29 d1 	sub	ecx, edx
 1023ea6:	48 c1 e1 05 	shl	rcx, 5
 1023eaa:	48 8b 54 08 20 	mov	rdx, qword ptr [rax + rcx + 32]
 1023eaf:	48 ff c2 	inc	rdx
 1023eb2:	48 89 54 08 20 	mov	qword ptr [rax + rcx + 32], rdx
 1023eb7:	48 8b 54 08 30 	mov	rdx, qword ptr [rax + rcx + 48]
 1023ebc:	48 8b 9c 24 80 01 00 00 	mov	rbx, qword ptr [rsp + 384]
 1023ec4:	48 01 da 	add	rdx, rbx
 1023ec7:	48 89 54 08 30 	mov	qword ptr [rax + rcx + 48], rdx
 1023ecc:	48 8d 05 dd 39 0d 00 	lea	rax, [rip + 866781]
 1023ed3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023ed7:	e8 34 44 fe ff 	call	-113612 <_runtime.unlock>
 1023edc:	0f 57 c0 	xorps	xmm0, xmm0
 1023edf:	0f 11 84 24 50 01 00 00 	movups	xmmword ptr [rsp + 336], xmm0
 1023ee7:	48 c7 84 24 60 01 00 00 00 00 00 00 	mov	qword ptr [rsp + 352], 0
 1023ef3:	48 8d 05 86 b0 02 00 	lea	rax, [rip + 176262]
 1023efa:	48 89 84 24 50 01 00 00 	mov	qword ptr [rsp + 336], rax
 1023f02:	48 8b 84 24 78 01 00 00 	mov	rax, qword ptr [rsp + 376]
 1023f0a:	48 89 84 24 58 01 00 00 	mov	qword ptr [rsp + 344], rax
 1023f12:	48 8b 84 24 48 01 00 00 	mov	rax, qword ptr [rsp + 328]
 1023f1a:	48 89 84 24 60 01 00 00 	mov	qword ptr [rsp + 352], rax
 1023f22:	48 8d 84 24 50 01 00 00 	lea	rax, [rsp + 336]
 1023f2a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023f2e:	e8 4d cb 02 00 	call	183117 <_runtime.systemstack>
 1023f33:	48 8b ac 24 68 01 00 00 	mov	rbp, qword ptr [rsp + 360]
 1023f3b:	48 81 c4 70 01 00 00 	add	rsp, 368
 1023f42:	c3 	ret
 1023f43:	ba 20 00 00 00 	mov	edx, 32
 1023f48:	e8 23 f4 02 00 	call	193571 <_runtime.panicSliceAlen>
 1023f4d:	90 	nop
 1023f4e:	e8 7d cc 02 00 	call	183421 <_runtime.morestack_noctxt>
 1023f53:	e9 38 fe ff ff 	jmp	-456 <_runtime.mProf_Malloc>
 1023f58:	cc 	int3
 1023f59:	cc 	int3
 1023f5a:	cc 	int3
 1023f5b:	cc 	int3
 1023f5c:	cc 	int3
 1023f5d:	cc 	int3
 1023f5e:	cc 	int3
 1023f5f:	cc 	int3

_runtime.mProf_Free:
 1023f60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1023f69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1023f6d:	0f 86 92 00 00 00 	jbe	146 <_runtime.mProf_Free+0xa5>
 1023f73:	48 83 ec 20 	sub	rsp, 32
 1023f77:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1023f7c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1023f81:	48 8d 05 28 39 0d 00 	lea	rax, [rip + 866600]
 1023f88:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023f8c:	e8 9f 41 fe ff 	call	-114273 <_runtime.lock>
 1023f91:	8b 05 c1 38 0d 00 	mov	eax, dword ptr [rip + 866497]
 1023f97:	89 44 24 14 	mov	dword ptr [rsp + 20], eax
 1023f9b:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1023fa0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1023fa4:	e8 a7 f7 ff ff 	call	-2137 <_runtime.(*bucket).mp>
 1023fa9:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1023fae:	84 00 	test	byte ptr [rax], al
 1023fb0:	8b 4c 24 14 	mov	ecx, dword ptr [rsp + 20]
 1023fb4:	ff c1 	inc	ecx
 1023fb6:	ba ab aa aa aa 	mov	edx, 2863311531
 1023fbb:	48 0f af d1 	imul	rdx, rcx
 1023fbf:	48 c1 ea 21 	shr	rdx, 33
 1023fc3:	8d 14 52 	lea	edx, [rdx + 2*rdx]
 1023fc6:	29 d1 	sub	ecx, edx
 1023fc8:	48 c1 e1 05 	shl	rcx, 5
 1023fcc:	48 8b 54 08 28 	mov	rdx, qword ptr [rax + rcx + 40]
 1023fd1:	48 ff c2 	inc	rdx
 1023fd4:	48 89 54 08 28 	mov	qword ptr [rax + rcx + 40], rdx
 1023fd9:	48 8b 54 08 38 	mov	rdx, qword ptr [rax + rcx + 56]
 1023fde:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1023fe3:	48 01 da 	add	rdx, rbx
 1023fe6:	48 89 54 08 38 	mov	qword ptr [rax + rcx + 56], rdx
 1023feb:	48 8d 05 be 38 0d 00 	lea	rax, [rip + 866494]
 1023ff2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1023ff6:	e8 15 43 fe ff 	call	-113899 <_runtime.unlock>
 1023ffb:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1024000:	48 83 c4 20 	add	rsp, 32
 1024004:	c3 	ret
 1024005:	e8 c6 cb 02 00 	call	183238 <_runtime.morestack_noctxt>
 102400a:	e9 51 ff ff ff 	jmp	-175 <_runtime.mProf_Free>
 102400f:	cc 	int3

_runtime.blockevent:
 1024010:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024019:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102401d:	76 64 	jbe	100 <_runtime.blockevent+0x73>
 102401f:	48 83 ec 20 	sub	rsp, 32
 1024023:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1024028:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102402d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1024032:	48 85 c0 	test	rax, rax
 1024035:	b9 01 00 00 00 	mov	ecx, 1
 102403a:	48 0f 4e c1 	cmovle	rax, rcx
 102403e:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1024043:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024047:	e8 44 00 00 00 	call	68 <_runtime.blocksampled>
 102404c:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1024051:	75 0a 	jne	10 <_runtime.blockevent+0x4d>
 1024053:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1024058:	48 83 c4 20 	add	rsp, 32
 102405c:	c3 	ret
 102405d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1024062:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024066:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102406b:	48 ff c0 	inc	rax
 102406e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1024073:	48 c7 44 24 10 02 00 00 00 	mov	qword ptr [rsp + 16], 2
 102407c:	e8 9f 00 00 00 	call	159 <_runtime.saveblockevent>
 1024081:	eb d0 	jmp	-48 <_runtime.blockevent+0x43>
 1024083:	e8 48 cb 02 00 	call	183112 <_runtime.morestack_noctxt>
 1024088:	eb 86 	jmp	-122 <_runtime.blockevent>
 102408a:	cc 	int3
 102408b:	cc 	int3
 102408c:	cc 	int3
 102408d:	cc 	int3
 102408e:	cc 	int3
 102408f:	cc 	int3

_runtime.blocksampled:
 1024090:	48 8b 0d 61 37 0d 00 	mov	rcx, qword ptr [rip + 866145]
 1024097:	48 85 c9 	test	rcx, rcx
 102409a:	7f 15 	jg	21 <_runtime.blocksampled+0x21>
 102409c:	b8 01 00 00 00 	mov	eax, 1
 10240a1:	84 c0 	test	al, al
 10240a3:	74 06 	je	6 <_runtime.blocksampled+0x1b>
 10240a5:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 10240aa:	c3 	ret
 10240ab:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10240b0:	c3 	ret
 10240b1:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 10240b6:	48 39 d1 	cmp	rcx, rdx
 10240b9:	7e 59 	jle	89 <_runtime.blocksampled+0x84>
 10240bb:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 10240c4:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 10240c8:	8b b3 20 01 00 00 	mov	esi, dword ptr [rbx + 288]
 10240ce:	8b bb 24 01 00 00 	mov	edi, dword ptr [rbx + 292]
 10240d4:	41 89 f0 	mov	r8d, esi
 10240d7:	c1 e6 11 	shl	esi, 17
 10240da:	44 31 c6 	xor	esi, r8d
 10240dd:	41 89 f8 	mov	r8d, edi
 10240e0:	31 f7 	xor	edi, esi
 10240e2:	c1 ee 07 	shr	esi, 7
 10240e5:	31 fe 	xor	esi, edi
 10240e7:	44 89 c7 	mov	edi, r8d
 10240ea:	41 c1 e8 10 	shr	r8d, 16
 10240ee:	41 31 f0 	xor	r8d, esi
 10240f1:	42 8d 04 07 	lea	eax, [rdi + r8]
 10240f5:	48 89 d6 	mov	rsi, rdx
 10240f8:	48 99 	cqo
 10240fa:	48 f7 f9 	idiv	rcx
 10240fd:	89 bb 20 01 00 00 	mov	dword ptr [rbx + 288], edi
 1024103:	44 89 83 24 01 00 00 	mov	dword ptr [rbx + 292], r8d
 102410a:	48 39 f2 	cmp	rdx, rsi
 102410d:	0f 9f c1 	setg	cl
 1024110:	89 c8 	mov	eax, ecx
 1024112:	eb 8d 	jmp	-115 <_runtime.blocksampled+0x11>
 1024114:	31 c9 	xor	ecx, ecx
 1024116:	eb f8 	jmp	-8 <_runtime.blocksampled+0x80>
 1024118:	cc 	int3
 1024119:	cc 	int3
 102411a:	cc 	int3
 102411b:	cc 	int3
 102411c:	cc 	int3
 102411d:	cc 	int3
 102411e:	cc 	int3
 102411f:	cc 	int3

_runtime.saveblockevent:
 1024120:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024129:	48 8d 84 24 30 ff ff ff 	lea	rax, [rsp - 208]
 1024131:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1024135:	0f 86 88 01 00 00 	jbe	392 <_runtime.saveblockevent+0x1a3>
 102413b:	48 81 ec 50 01 00 00 	sub	rsp, 336
 1024142:	48 89 ac 24 48 01 00 00 	mov	qword ptr [rsp + 328], rbp
 102414a:	48 8d ac 24 48 01 00 00 	lea	rbp, [rsp + 328]
 1024152:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102415b:	48 8d 7c 24 40 	lea	rdi, [rsp + 64]
 1024160:	0f 57 c0 	xorps	xmm0, xmm0
 1024163:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1024168:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 102416d:	e8 62 f3 02 00 	call	193378 <_runtime.duffzero+0xe4>
 1024172:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1024176:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102417a:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1024181:	48 85 c9 	test	rcx, rcx
 1024184:	74 09 	je	9 <_runtime.saveblockevent+0x6f>
 1024186:	48 39 c1 	cmp	rcx, rax
 1024189:	0f 85 ed 00 00 00 	jne	237 <_runtime.saveblockevent+0x15c>
 102418f:	48 8b 84 24 60 01 00 00 	mov	rax, qword ptr [rsp + 352]
 1024197:	48 89 04 24 	mov	qword ptr [rsp], rax
 102419b:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 10241a0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10241a5:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 10241ae:	48 c7 44 24 18 20 00 00 00 	mov	qword ptr [rsp + 24], 32
 10241b7:	e8 74 5d 02 00 	call	154996 <_runtime.callers>
 10241bc:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10241c1:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10241c6:	48 8d 0d e3 36 0d 00 	lea	rcx, [rip + 866019]
 10241cd:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10241d1:	e8 5a 3f fe ff 	call	-114854 <_runtime.lock>
 10241d6:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10241db:	48 83 f9 20 	cmp	rcx, 32
 10241df:	0f 87 d3 00 00 00 	ja	211 <_runtime.saveblockevent+0x198>
 10241e5:	48 8b 84 24 68 01 00 00 	mov	rax, qword ptr [rsp + 360]
 10241ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10241f1:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10241fa:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 10241ff:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1024204:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1024209:	48 c7 44 24 20 20 00 00 00 	mov	qword ptr [rsp + 32], 32
 1024212:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1024217:	e8 14 f6 ff ff 	call	-2540 <_runtime.stkbucket>
 102421c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1024221:	48 89 84 24 40 01 00 00 	mov	qword ptr [rsp + 320], rax
 1024229:	48 89 04 24 	mov	qword ptr [rsp], rax
 102422d:	e8 8e f5 ff ff 	call	-2674 <_runtime.(*bucket).bp>
 1024232:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1024237:	48 ff 00 	inc	qword ptr [rax]
 102423a:	48 8b 84 24 40 01 00 00 	mov	rax, qword ptr [rsp + 320]
 1024242:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024246:	e8 75 f5 ff ff 	call	-2699 <_runtime.(*bucket).bp>
 102424b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1024250:	48 8b 8c 24 58 01 00 00 	mov	rcx, qword ptr [rsp + 344]
 1024258:	48 01 48 08 	add	qword ptr [rax + 8], rcx
 102425c:	48 8d 05 4d 36 0d 00 	lea	rax, [rip + 865869]
 1024263:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024267:	e8 a4 40 fe ff 	call	-114524 <_runtime.unlock>
 102426c:	48 8b ac 24 48 01 00 00 	mov	rbp, qword ptr [rsp + 328]
 1024274:	48 81 c4 50 01 00 00 	add	rsp, 336
 102427b:	c3 	ret
 102427c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1024280:	48 8b 84 24 60 01 00 00 	mov	rax, qword ptr [rsp + 352]
 1024288:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102428d:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 1024292:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1024297:	48 c7 44 24 18 20 00 00 00 	mov	qword ptr [rsp + 24], 32
 10242a0:	48 c7 44 24 20 20 00 00 00 	mov	qword ptr [rsp + 32], 32
 10242a9:	e8 62 5d 02 00 	call	154978 <_runtime.gcallers>
 10242ae:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10242b3:	e9 09 ff ff ff 	jmp	-247 <_runtime.saveblockevent+0xa1>
 10242b8:	ba 20 00 00 00 	mov	edx, 32
 10242bd:	e8 ae f0 02 00 	call	192686 <_runtime.panicSliceAlen>
 10242c2:	90 	nop
 10242c3:	e8 08 c9 02 00 	call	182536 <_runtime.morestack_noctxt>
 10242c8:	e9 53 fe ff ff 	jmp	-429 <_runtime.saveblockevent>
 10242cd:	cc 	int3
 10242ce:	cc 	int3
 10242cf:	cc 	int3

_sync.event:
 10242d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10242d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10242dd:	0f 86 b8 00 00 00 	jbe	184 <_sync.event+0xcb>
 10242e3:	48 83 ec 20 	sub	rsp, 32
 10242e7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10242ec:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10242f1:	48 8b 0d 68 35 0d 00 	mov	rcx, qword ptr [rip + 865640]
 10242f8:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 10242fd:	48 85 d2 	test	rdx, rdx
 1024300:	bb 00 00 00 00 	mov	ebx, 0
 1024305:	48 0f 4c d3 	cmovl	rdx, rbx
 1024309:	48 85 c9 	test	rcx, rcx
 102430c:	0f 8e 82 00 00 00 	jle	130 <_sync.event+0xc4>
 1024312:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 102431b:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 102431f:	8b b3 20 01 00 00 	mov	esi, dword ptr [rbx + 288]
 1024325:	8b bb 24 01 00 00 	mov	edi, dword ptr [rbx + 292]
 102432b:	41 89 f0 	mov	r8d, esi
 102432e:	c1 e6 11 	shl	esi, 17
 1024331:	41 31 f0 	xor	r8d, esi
 1024334:	89 fe 	mov	esi, edi
 1024336:	44 31 c7 	xor	edi, r8d
 1024339:	41 c1 e8 07 	shr	r8d, 7
 102433d:	41 31 f8 	xor	r8d, edi
 1024340:	89 f7 	mov	edi, esi
 1024342:	c1 ee 10 	shr	esi, 16
 1024345:	44 31 c6 	xor	esi, r8d
 1024348:	8d 04 37 	lea	eax, [rdi + rsi]
 102434b:	49 89 d0 	mov	r8, rdx
 102434e:	48 99 	cqo
 1024350:	48 f7 f9 	idiv	rcx
 1024353:	89 bb 20 01 00 00 	mov	dword ptr [rbx + 288], edi
 1024359:	89 b3 24 01 00 00 	mov	dword ptr [rbx + 292], esi
 102435f:	48 85 d2 	test	rdx, rdx
 1024362:	0f 94 c1 	sete	cl
 1024365:	84 c9 	test	cl, cl
 1024367:	75 0a 	jne	10 <_sync.event+0xa3>
 1024369:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102436e:	48 83 c4 20 	add	rsp, 32
 1024372:	c3 	ret
 1024373:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1024377:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102437c:	48 ff c0 	inc	rax
 102437f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1024384:	48 c7 44 24 10 03 00 00 00 	mov	qword ptr [rsp + 16], 3
 102438d:	e8 8e fd ff ff 	call	-626 <_runtime.saveblockevent>
 1024392:	eb d5 	jmp	-43 <_sync.event+0x99>
 1024394:	49 89 d0 	mov	r8, rdx
 1024397:	31 c9 	xor	ecx, ecx
 1024399:	eb ca 	jmp	-54 <_sync.event+0x95>
 102439b:	e8 30 c8 02 00 	call	182320 <_runtime.morestack_noctxt>
 10243a0:	e9 2b ff ff ff 	jmp	-213 <_sync.event>
 10243a5:	cc 	int3
 10243a6:	cc 	int3
 10243a7:	cc 	int3
 10243a8:	cc 	int3
 10243a9:	cc 	int3
 10243aa:	cc 	int3
 10243ab:	cc 	int3
 10243ac:	cc 	int3
 10243ad:	cc 	int3
 10243ae:	cc 	int3
 10243af:	cc 	int3

_runtime.tracealloc:
 10243b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10243b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10243bd:	0f 86 5e 02 00 00 	jbe	606 <_runtime.tracealloc+0x271>
 10243c3:	48 83 ec 60 	sub	rsp, 96
 10243c7:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 10243cc:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 10243d1:	48 8d 05 08 35 0d 00 	lea	rax, [rip + 865544]
 10243d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10243dc:	e8 4f 3d fe ff 	call	-115377 <_runtime.lock>
 10243e1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10243ea:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10243ef:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10243f3:	c6 81 29 01 00 00 02 	mov	byte ptr [rcx + 297], 2
 10243fa:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10243ff:	48 85 c9 	test	rcx, rcx
 1024402:	0f 84 a3 01 00 00 	je	419 <_runtime.tracealloc+0x1fb>
 1024408:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102440c:	e8 8f 6c 02 00 	call	158863 <_runtime.(*_type).string>
 1024411:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1024416:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102441b:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1024420:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1024425:	e8 76 60 00 00 	call	24694 <_runtime.printlock>
 102442a:	48 8d 05 24 f0 04 00 	lea	rax, [rip + 323620]
 1024431:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024435:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 102443e:	e8 9d 69 00 00 	call	27037 <_runtime.printstring>
 1024443:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1024448:	48 89 04 24 	mov	qword ptr [rsp], rax
 102444c:	e8 4f 69 00 00 	call	26959 <_runtime.printpointer>
 1024451:	48 8d 05 1c e8 04 00 	lea	rax, [rip + 321564]
 1024458:	48 89 04 24 	mov	qword ptr [rsp], rax
 102445c:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1024465:	e8 76 69 00 00 	call	26998 <_runtime.printstring>
 102446a:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 102446f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024473:	e8 18 68 00 00 	call	26648 <_runtime.printhex>
 1024478:	48 8d 05 f5 e7 04 00 	lea	rax, [rip + 321525]
 102447f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024483:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 102448c:	e8 4f 69 00 00 	call	26959 <_runtime.printstring>
 1024491:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1024496:	48 89 04 24 	mov	qword ptr [rsp], rax
 102449a:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102449f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10244a4:	e8 37 69 00 00 	call	26935 <_runtime.printstring>
 10244a9:	48 8d 05 c2 e7 04 00 	lea	rax, [rip + 321474]
 10244b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10244b4:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10244bd:	e8 1e 69 00 00 	call	26910 <_runtime.printstring>
 10244c2:	e8 59 60 00 00 	call	24665 <_runtime.printunlock>
 10244c7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10244cc:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10244d0:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 10244d7:	48 85 c9 	test	rcx, rcx
 10244da:	74 09 	je	9 <_runtime.tracealloc+0x135>
 10244dc:	48 39 c8 	cmp	rax, rcx
 10244df:	0f 85 87 00 00 00 	jne	135 <_runtime.tracealloc+0x1bc>
 10244e5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10244e9:	e8 72 5e 02 00 	call	155250 <_runtime.goroutineheader>
 10244ee:	0f 57 c0 	xorps	xmm0, xmm0
 10244f1:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 10244f6:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 10244fb:	48 8d 05 ce aa 02 00 	lea	rax, [rip + 174798]
 1024502:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1024507:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 102450c:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1024511:	48 8d 44 24 68 	lea	rax, [rsp + 104]
 1024516:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 102451b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1024520:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1024525:	48 8d 4c 24 38 	lea	rcx, [rsp + 56]
 102452a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102452e:	e8 4d c5 02 00 	call	181581 <_runtime.systemstack>
 1024533:	e8 68 5f 00 00 	call	24424 <_runtime.printlock>
 1024538:	e8 f3 61 00 00 	call	25075 <_runtime.printnl>
 102453d:	e8 de 5f 00 00 	call	24542 <_runtime.printunlock>
 1024542:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1024547:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102454b:	c6 80 29 01 00 00 00 	mov	byte ptr [rax + 297], 0
 1024552:	48 8d 05 87 33 0d 00 	lea	rax, [rip + 865159]
 1024559:	48 89 04 24 	mov	qword ptr [rsp], rax
 102455d:	e8 ae 3d fe ff 	call	-115282 <_runtime.unlock>
 1024562:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1024567:	48 83 c4 60 	add	rsp, 96
 102456b:	c3 	ret
 102456c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1024570:	e8 eb 5d 02 00 	call	155115 <_runtime.goroutineheader>
 1024575:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102457a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102457e:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1024585:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 102458d:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1024596:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102459f:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10245a4:	e8 17 50 02 00 	call	151575 <_runtime.traceback>
 10245a9:	eb 88 	jmp	-120 <_runtime.tracealloc+0x183>
 10245ab:	e8 f0 5e 00 00 	call	24304 <_runtime.printlock>
 10245b0:	48 8d 05 9e ee 04 00 	lea	rax, [rip + 323230]
 10245b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10245bb:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 10245c4:	e8 17 68 00 00 	call	26647 <_runtime.printstring>
 10245c9:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10245ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10245d2:	e8 c9 67 00 00 	call	26569 <_runtime.printpointer>
 10245d7:	48 8d 05 96 e6 04 00 	lea	rax, [rip + 321174]
 10245de:	48 89 04 24 	mov	qword ptr [rsp], rax
 10245e2:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10245eb:	e8 f0 67 00 00 	call	26608 <_runtime.printstring>
 10245f0:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10245f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10245f9:	e8 92 66 00 00 	call	26258 <_runtime.printhex>
 10245fe:	48 8d 05 6d e6 04 00 	lea	rax, [rip + 321133]
 1024605:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024609:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1024612:	e8 c9 67 00 00 	call	26569 <_runtime.printstring>
 1024617:	e8 04 5f 00 00 	call	24324 <_runtime.printunlock>
 102461c:	e9 a6 fe ff ff 	jmp	-346 <_runtime.tracealloc+0x117>
 1024621:	e8 aa c5 02 00 	call	181674 <_runtime.morestack_noctxt>
 1024626:	e9 85 fd ff ff 	jmp	-635 <_runtime.tracealloc>
 102462b:	cc 	int3
 102462c:	cc 	int3
 102462d:	cc 	int3
 102462e:	cc 	int3
 102462f:	cc 	int3

_runtime.tracefree:
 1024630:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024639:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102463d:	0f 86 34 01 00 00 	jbe	308 <_runtime.tracefree+0x147>
 1024643:	48 83 ec 40 	sub	rsp, 64
 1024647:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102464c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1024651:	48 8d 05 88 32 0d 00 	lea	rax, [rip + 864904]
 1024658:	48 89 04 24 	mov	qword ptr [rsp], rax
 102465c:	e8 cf 3a fe ff 	call	-116017 <_runtime.lock>
 1024661:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102466a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102466f:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1024673:	c6 81 29 01 00 00 02 	mov	byte ptr [rcx + 297], 2
 102467a:	e8 21 5e 00 00 	call	24097 <_runtime.printlock>
 102467f:	48 8d 05 3b ec 04 00 	lea	rax, [rip + 322619]
 1024686:	48 89 04 24 	mov	qword ptr [rsp], rax
 102468a:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1024693:	e8 48 67 00 00 	call	26440 <_runtime.printstring>
 1024698:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102469d:	48 89 04 24 	mov	qword ptr [rsp], rax
 10246a1:	e8 fa 66 00 00 	call	26362 <_runtime.printpointer>
 10246a6:	48 8d 05 c7 e5 04 00 	lea	rax, [rip + 320967]
 10246ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 10246b1:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10246ba:	e8 21 67 00 00 	call	26401 <_runtime.printstring>
 10246bf:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10246c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10246c8:	e8 c3 65 00 00 	call	26051 <_runtime.printhex>
 10246cd:	48 8d 05 9e e5 04 00 	lea	rax, [rip + 320926]
 10246d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10246d8:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10246e1:	e8 fa 66 00 00 	call	26362 <_runtime.printstring>
 10246e6:	e8 35 5e 00 00 	call	24117 <_runtime.printunlock>
 10246eb:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10246f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10246f4:	e8 67 5c 02 00 	call	154727 <_runtime.goroutineheader>
 10246f9:	0f 57 c0 	xorps	xmm0, xmm0
 10246fc:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1024701:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1024706:	48 8d 05 23 a9 02 00 	lea	rax, [rip + 174371]
 102470d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1024712:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1024717:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102471c:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1024721:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1024726:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102472b:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1024730:	48 8d 4c 24 18 	lea	rcx, [rsp + 24]
 1024735:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1024739:	e8 42 c3 02 00 	call	181058 <_runtime.systemstack>
 102473e:	e8 5d 5d 00 00 	call	23901 <_runtime.printlock>
 1024743:	e8 e8 5f 00 00 	call	24552 <_runtime.printnl>
 1024748:	e8 d3 5d 00 00 	call	24019 <_runtime.printunlock>
 102474d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1024752:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1024756:	c6 80 29 01 00 00 00 	mov	byte ptr [rax + 297], 0
 102475d:	48 8d 05 7c 31 0d 00 	lea	rax, [rip + 864636]
 1024764:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024768:	e8 a3 3b fe ff 	call	-115805 <_runtime.unlock>
 102476d:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1024772:	48 83 c4 40 	add	rsp, 64
 1024776:	c3 	ret
 1024777:	e8 54 c4 02 00 	call	181332 <_runtime.morestack_noctxt>
 102477c:	e9 af fe ff ff 	jmp	-337 <_runtime.tracefree>
 1024781:	cc 	int3
 1024782:	cc 	int3
 1024783:	cc 	int3
 1024784:	cc 	int3
 1024785:	cc 	int3
 1024786:	cc 	int3
 1024787:	cc 	int3
 1024788:	cc 	int3
 1024789:	cc 	int3
 102478a:	cc 	int3
 102478b:	cc 	int3
 102478c:	cc 	int3
 102478d:	cc 	int3
 102478e:	cc 	int3
 102478f:	cc 	int3

_runtime.tracegc:
 1024790:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024799:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102479d:	0f 86 c4 00 00 00 	jbe	196 <_runtime.tracegc+0xd7>
 10247a3:	48 83 ec 20 	sub	rsp, 32
 10247a7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10247ac:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10247b1:	48 8d 05 28 31 0d 00 	lea	rax, [rip + 864552]
 10247b8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10247bc:	e8 6f 39 fe ff 	call	-116369 <_runtime.lock>
 10247c1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10247ca:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10247cf:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10247d3:	c6 81 29 01 00 00 02 	mov	byte ptr [rcx + 297], 2
 10247da:	e8 c1 5c 00 00 	call	23745 <_runtime.printlock>
 10247df:	48 8d 05 e5 ea 04 00 	lea	rax, [rip + 322277]
 10247e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10247ea:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 10247f3:	e8 e8 65 00 00 	call	26088 <_runtime.printstring>
 10247f8:	e8 23 5d 00 00 	call	23843 <_runtime.printunlock>
 10247fd:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1024802:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024806:	e8 15 5e 02 00 	call	155157 <_runtime.tracebackothers>
 102480b:	e8 90 5c 00 00 	call	23696 <_runtime.printlock>
 1024810:	48 8d 05 a4 ed 04 00 	lea	rax, [rip + 322980]
 1024817:	48 89 04 24 	mov	qword ptr [rsp], rax
 102481b:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1024824:	e8 b7 65 00 00 	call	26039 <_runtime.printstring>
 1024829:	e8 f2 5c 00 00 	call	23794 <_runtime.printunlock>
 102482e:	e8 6d 5c 00 00 	call	23661 <_runtime.printlock>
 1024833:	e8 f8 5e 00 00 	call	24312 <_runtime.printnl>
 1024838:	e8 e3 5c 00 00 	call	23779 <_runtime.printunlock>
 102483d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1024842:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1024846:	c6 80 29 01 00 00 00 	mov	byte ptr [rax + 297], 0
 102484d:	48 8d 05 8c 30 0d 00 	lea	rax, [rip + 864396]
 1024854:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024858:	e8 b3 3a fe ff 	call	-116045 <_runtime.unlock>
 102485d:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1024862:	48 83 c4 20 	add	rsp, 32
 1024866:	c3 	ret
 1024867:	e8 64 c3 02 00 	call	181092 <_runtime.morestack_noctxt>
 102486c:	e9 1f ff ff ff 	jmp	-225 <_runtime.tracegc>
 1024871:	cc 	int3
 1024872:	cc 	int3
 1024873:	cc 	int3
 1024874:	cc 	int3
 1024875:	cc 	int3
 1024876:	cc 	int3
 1024877:	cc 	int3
 1024878:	cc 	int3
 1024879:	cc 	int3
 102487a:	cc 	int3
 102487b:	cc 	int3
 102487c:	cc 	int3
 102487d:	cc 	int3
 102487e:	cc 	int3
 102487f:	cc 	int3

_runtime.addrRange.subtract:
 1024880:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024889:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102488d:	0f 86 a8 00 00 00 	jbe	168 <_runtime.addrRange.subtract+0xbb>
 1024893:	48 83 ec 18 	sub	rsp, 24
 1024897:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102489c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10248a1:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10248a6:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10248ab:	48 39 c8 	cmp	rax, rcx
 10248ae:	72 65 	jb	101 <_runtime.addrRange.subtract+0x95>
 10248b0:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 10248b5:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10248ba:	48 39 da 	cmp	rdx, rbx
 10248bd:	76 44 	jbe	68 <_runtime.addrRange.subtract+0x83>
 10248bf:	48 39 c8 	cmp	rax, rcx
 10248c2:	73 05 	jae	5 <_runtime.addrRange.subtract+0x49>
 10248c4:	48 39 da 	cmp	rdx, rbx
 10248c7:	77 58 	ja	88 <_runtime.addrRange.subtract+0xa1>
 10248c9:	48 39 da 	cmp	rdx, rbx
 10248cc:	76 30 	jbe	48 <_runtime.addrRange.subtract+0x7e>
 10248ce:	48 39 d8 	cmp	rax, rbx
 10248d1:	73 14 	jae	20 <_runtime.addrRange.subtract+0x67>
 10248d3:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 10248d8:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 10248dd:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10248e2:	48 83 c4 18 	add	rsp, 24
 10248e6:	c3 	ret
 10248e7:	48 39 c8 	cmp	rax, rcx
 10248ea:	73 0d 	jae	13 <_runtime.addrRange.subtract+0x79>
 10248ec:	48 39 ca 	cmp	rdx, rcx
 10248ef:	76 08 	jbe	8 <_runtime.addrRange.subtract+0x79>
 10248f1:	48 89 ca 	mov	rdx, rcx
 10248f4:	48 89 c3 	mov	rbx, rax
 10248f7:	eb da 	jmp	-38 <_runtime.addrRange.subtract+0x53>
 10248f9:	48 89 d1 	mov	rcx, rdx
 10248fc:	eb f3 	jmp	-13 <_runtime.addrRange.subtract+0x71>
 10248fe:	48 39 c8 	cmp	rax, rcx
 1024901:	eb e7 	jmp	-25 <_runtime.addrRange.subtract+0x6a>
 1024903:	0f 57 c0 	xorps	xmm0, xmm0
 1024906:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 102490b:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1024910:	48 83 c4 18 	add	rsp, 24
 1024914:	c3 	ret
 1024915:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 102491a:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 102491f:	eb a1 	jmp	-95 <_runtime.addrRange.subtract+0x42>
 1024921:	48 8d 05 16 e8 04 00 	lea	rax, [rip + 321558]
 1024928:	48 89 04 24 	mov	qword ptr [rsp], rax
 102492c:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1024935:	e8 26 44 00 00 	call	17446 <_runtime.throw>
 102493a:	90 	nop
 102493b:	e8 90 c2 02 00 	call	180880 <_runtime.morestack_noctxt>
 1024940:	e9 3b ff ff ff 	jmp	-197 <_runtime.addrRange.subtract>
 1024945:	cc 	int3
 1024946:	cc 	int3
 1024947:	cc 	int3
 1024948:	cc 	int3
 1024949:	cc 	int3
 102494a:	cc 	int3
 102494b:	cc 	int3
 102494c:	cc 	int3
 102494d:	cc 	int3
 102494e:	cc 	int3
 102494f:	cc 	int3

_runtime.(*addrRanges).init:
 1024950:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024959:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102495d:	76 7c 	jbe	124 <_runtime.(*addrRanges).init+0x8b>
 102495f:	48 83 ec 28 	sub	rsp, 40
 1024963:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1024968:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102496d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1024972:	48 c7 40 08 00 00 00 00 	mov	qword ptr [rax + 8], 0
 102497a:	48 c7 40 10 10 00 00 00 	mov	qword ptr [rax + 16], 16
 1024982:	48 c7 04 24 00 01 00 00 	mov	qword ptr [rsp], 256
 102498a:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1024993:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1024998:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102499d:	e8 6e 5d fe ff 	call	-107154 <_runtime.persistentalloc>
 10249a2:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10249a7:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10249ac:	48 89 01 	mov	qword ptr [rcx], rax
 10249af:	83 3d 4a 2f 0d 00 00 	cmp	dword ptr [rip + 864074], 0
 10249b6:	75 13 	jne	19 <_runtime.(*addrRanges).init+0x7b>
 10249b8:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10249bd:	48 89 41 18 	mov	qword ptr [rcx + 24], rax
 10249c1:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10249c6:	48 83 c4 28 	add	rsp, 40
 10249ca:	c3 	ret
 10249cb:	48 8d 79 18 	lea	rdi, [rcx + 24]
 10249cf:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10249d4:	e8 07 e0 02 00 	call	188423 <_runtime.gcWriteBarrier>
 10249d9:	eb e6 	jmp	-26 <_runtime.(*addrRanges).init+0x71>
 10249db:	e8 f0 c1 02 00 	call	180720 <_runtime.morestack_noctxt>
 10249e0:	e9 6b ff ff ff 	jmp	-149 <_runtime.(*addrRanges).init>
 10249e5:	cc 	int3
 10249e6:	cc 	int3
 10249e7:	cc 	int3
 10249e8:	cc 	int3
 10249e9:	cc 	int3
 10249ea:	cc 	int3
 10249eb:	cc 	int3
 10249ec:	cc 	int3
 10249ed:	cc 	int3
 10249ee:	cc 	int3
 10249ef:	cc 	int3

_runtime.(*addrRanges).findSucc:
 10249f0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10249f5:	48 8b 08 	mov	rcx, qword ptr [rax]
 10249f8:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 10249fc:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 1024a01:	31 db 	xor	ebx, ebx
 1024a03:	eb 04 	jmp	4 <_runtime.(*addrRanges).findSucc+0x19>
 1024a05:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 1024a09:	48 39 c3 	cmp	rbx, rax
 1024a0c:	7d 16 	jge	22 <_runtime.(*addrRanges).findSucc+0x34>
 1024a0e:	48 89 de 	mov	rsi, rbx
 1024a11:	48 c1 e3 04 	shl	rbx, 4
 1024a15:	48 8b 1c 19 	mov	rbx, qword ptr [rcx + rbx]
 1024a19:	48 39 da 	cmp	rdx, rbx
 1024a1c:	73 e7 	jae	-25 <_runtime.(*addrRanges).findSucc+0x15>
 1024a1e:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1024a23:	c3 	ret
 1024a24:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1024a29:	c3 	ret
 1024a2a:	cc 	int3
 1024a2b:	cc 	int3
 1024a2c:	cc 	int3
 1024a2d:	cc 	int3
 1024a2e:	cc 	int3
 1024a2f:	cc 	int3

_runtime.(*addrRanges).contains:
 1024a30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024a39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1024a3d:	0f 86 87 00 00 00 	jbe	135 <_runtime.(*addrRanges).contains+0x9a>
 1024a43:	48 83 ec 20 	sub	rsp, 32
 1024a47:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1024a4c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1024a51:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1024a56:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024a5a:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1024a5f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1024a64:	e8 87 ff ff ff 	call	-121 <_runtime.(*addrRanges).findSucc>
 1024a69:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1024a6e:	48 85 c0 	test	rax, rax
 1024a71:	74 42 	je	66 <_runtime.(*addrRanges).contains+0x85>
 1024a73:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1024a78:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 1024a7c:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1024a7f:	48 ff c8 	dec	rax
 1024a82:	48 39 c8 	cmp	rax, rcx
 1024a85:	73 3d 	jae	61 <_runtime.(*addrRanges).contains+0x94>
 1024a87:	48 c1 e0 04 	shl	rax, 4
 1024a8b:	48 8b 4c 02 08 	mov	rcx, qword ptr [rdx + rax + 8]
 1024a90:	48 01 d0 	add	rax, rdx
 1024a93:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1024a98:	48 39 10 	cmp	qword ptr [rax], rdx
 1024a9b:	77 14 	ja	20 <_runtime.(*addrRanges).contains+0x81>
 1024a9d:	48 39 ca 	cmp	rdx, rcx
 1024aa0:	0f 92 c0 	setb	al
 1024aa3:	88 44 24 38 	mov	byte ptr [rsp + 56], al
 1024aa7:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1024aac:	48 83 c4 20 	add	rsp, 32
 1024ab0:	c3 	ret
 1024ab1:	31 c0 	xor	eax, eax
 1024ab3:	eb ee 	jmp	-18 <_runtime.(*addrRanges).contains+0x73>
 1024ab5:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1024aba:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1024abf:	48 83 c4 20 	add	rsp, 32
 1024ac3:	c3 	ret
 1024ac4:	e8 87 e8 02 00 	call	190599 <_runtime.panicIndex>
 1024ac9:	90 	nop
 1024aca:	e8 01 c1 02 00 	call	180481 <_runtime.morestack_noctxt>
 1024acf:	e9 5c ff ff ff 	jmp	-164 <_runtime.(*addrRanges).contains>
 1024ad4:	cc 	int3
 1024ad5:	cc 	int3
 1024ad6:	cc 	int3
 1024ad7:	cc 	int3
 1024ad8:	cc 	int3
 1024ad9:	cc 	int3
 1024ada:	cc 	int3
 1024adb:	cc 	int3
 1024adc:	cc 	int3
 1024add:	cc 	int3
 1024ade:	cc 	int3
 1024adf:	cc 	int3

_runtime.(*addrRanges).add:
 1024ae0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024ae9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1024aed:	0f 86 2f 04 00 00 	jbe	1071 <_runtime.(*addrRanges).add+0x442>
 1024af3:	48 83 ec 48 	sub	rsp, 72
 1024af7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1024afc:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1024b01:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1024b06:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024b0a:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1024b0f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1024b14:	e8 d7 fe ff ff 	call	-297 <_runtime.(*addrRanges).findSucc>
 1024b19:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1024b1e:	48 85 c0 	test	rax, rax
 1024b21:	0f 8e 75 03 00 00 	jle	885 <_runtime.(*addrRanges).add+0x3bc>
 1024b27:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1024b2c:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1024b30:	48 8b 33 	mov	rsi, qword ptr [rbx]
 1024b33:	48 8d 78 ff 	lea	rdi, [rax - 1]
 1024b37:	48 39 cf 	cmp	rdi, rcx
 1024b3a:	0f 83 d9 03 00 00 	jae	985 <_runtime.(*addrRanges).add+0x439>
 1024b40:	48 c1 e7 04 	shl	rdi, 4
 1024b44:	48 8b 74 37 08 	mov	rsi, qword ptr [rdi + rsi + 8]
 1024b49:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1024b4e:	48 39 f7 	cmp	rdi, rsi
 1024b51:	40 0f 94 c6 	sete	sil
 1024b55:	48 8b 53 10 	mov	rdx, qword ptr [rbx + 16]
 1024b59:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1024b5d:	4c 8b 03 	mov	r8, qword ptr [rbx]
 1024b60:	48 39 c8 	cmp	rax, rcx
 1024b63:	0f 8d 23 03 00 00 	jge	803 <_runtime.(*addrRanges).add+0x3ac>
 1024b69:	0f 83 a5 03 00 00 	jae	933 <_runtime.(*addrRanges).add+0x434>
 1024b6f:	49 89 c1 	mov	r9, rax
 1024b72:	48 c1 e0 04 	shl	rax, 4
 1024b76:	4d 8b 14 00 	mov	r10, qword ptr [r8 + rax]
 1024b7a:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1024b7f:	4d 39 d3 	cmp	r11, r10
 1024b82:	41 0f 94 c2 	sete	r10b
 1024b86:	45 84 d2 	test	r10b, r10b
 1024b89:	0f 84 cf 00 00 00 	je	207 <_runtime.(*addrRanges).add+0x17e>
 1024b8f:	40 84 f6 	test	sil, sil
 1024b92:	0f 84 c6 00 00 00 	je	198 <_runtime.(*addrRanges).add+0x17e>
 1024b98:	49 39 c9 	cmp	r9, rcx
 1024b9b:	0f 83 6b 03 00 00 	jae	875 <_runtime.(*addrRanges).add+0x42c>
 1024ba1:	49 8d 41 ff 	lea	rax, [r9 - 1]
 1024ba5:	4c 89 ce 	mov	rsi, r9
 1024ba8:	49 c1 e1 04 	shl	r9, 4
 1024bac:	4b 8b 7c 01 08 	mov	rdi, qword ptr [r9 + r8 + 8]
 1024bb1:	48 39 c8 	cmp	rax, rcx
 1024bb4:	0f 83 4d 03 00 00 	jae	845 <_runtime.(*addrRanges).add+0x427>
 1024bba:	48 c1 e0 04 	shl	rax, 4
 1024bbe:	49 89 7c 00 08 	mov	qword ptr [r8 + rax + 8], rdi
 1024bc3:	48 8b 7b 10 	mov	rdi, qword ptr [rbx + 16]
 1024bc7:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1024bcb:	4c 8b 03 	mov	r8, qword ptr [rbx]
 1024bce:	48 39 ce 	cmp	rsi, rcx
 1024bd1:	0f 87 28 03 00 00 	ja	808 <_runtime.(*addrRanges).add+0x41f>
 1024bd7:	49 89 ca 	mov	r10, rcx
 1024bda:	48 29 f1 	sub	rcx, rsi
 1024bdd:	49 89 f3 	mov	r11, rsi
 1024be0:	48 29 fe 	sub	rsi, rdi
 1024be3:	48 c1 fe 3f 	sar	rsi, 63
 1024be7:	4c 21 ce 	and	rsi, r9
 1024bea:	4c 01 c6 	add	rsi, r8
 1024bed:	49 8d 43 01 	lea	rax, [r11 + 1]
 1024bf1:	4c 39 d0 	cmp	rax, r10
 1024bf4:	0f 87 fd 02 00 00 	ja	765 <_runtime.(*addrRanges).add+0x417>
 1024bfa:	49 29 c2 	sub	r10, rax
 1024bfd:	4c 39 d1 	cmp	rcx, r10
 1024c00:	49 0f 4f ca 	cmovg	rcx, r10
 1024c04:	49 89 c1 	mov	r9, rax
 1024c07:	48 29 f8 	sub	rax, rdi
 1024c0a:	49 c1 e1 04 	shl	r9, 4
 1024c0e:	48 c1 f8 3f 	sar	rax, 63
 1024c12:	4c 21 c8 	and	rax, r9
 1024c15:	4c 01 c0 	add	rax, r8
 1024c18:	48 39 f0 	cmp	rax, rsi
 1024c1b:	75 23 	jne	35 <_runtime.(*addrRanges).add+0x160>
 1024c1d:	48 8b 53 10 	mov	rdx, qword ptr [rbx + 16]
 1024c21:	48 8b 43 08 	mov	rax, qword ptr [rbx + 8]
 1024c25:	48 8d 48 ff 	lea	rcx, [rax - 1]
 1024c29:	48 39 d1 	cmp	rcx, rdx
 1024c2c:	0f 87 c0 02 00 00 	ja	704 <_runtime.(*addrRanges).add+0x412>
 1024c32:	48 89 4b 08 	mov	qword ptr [rbx + 8], rcx
 1024c36:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1024c3b:	48 83 c4 48 	add	rsp, 72
 1024c3f:	c3 	ret
 1024c40:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1024c44:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1024c49:	48 c1 e1 04 	shl	rcx, 4
 1024c4d:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1024c52:	e8 f9 ee 02 00 	call	192249 <_runtime.memmove>
 1024c57:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1024c5c:	eb bf 	jmp	-65 <_runtime.(*addrRanges).add+0x13d>
 1024c5e:	40 84 f6 	test	sil, sil
 1024c61:	74 18 	je	24 <_runtime.(*addrRanges).add+0x19b>
 1024c63:	49 8d 41 ff 	lea	rax, [r9 - 1]
 1024c67:	48 39 c8 	cmp	rax, rcx
 1024c6a:	0f 83 7d 02 00 00 	jae	637 <_runtime.(*addrRanges).add+0x40d>
 1024c70:	48 c1 e0 04 	shl	rax, 4
 1024c74:	4d 89 5c 00 08 	mov	qword ptr [r8 + rax + 8], r11
 1024c79:	eb bb 	jmp	-69 <_runtime.(*addrRanges).add+0x156>
 1024c7b:	45 84 d2 	test	r10b, r10b
 1024c7e:	74 13 	je	19 <_runtime.(*addrRanges).add+0x1b3>
 1024c80:	49 39 c9 	cmp	r9, rcx
 1024c83:	0f 83 5c 02 00 00 	jae	604 <_runtime.(*addrRanges).add+0x405>
 1024c89:	49 c1 e1 04 	shl	r9, 4
 1024c8d:	4b 89 3c 08 	mov	qword ptr [r8 + r9], rdi
 1024c91:	eb a3 	jmp	-93 <_runtime.(*addrRanges).add+0x156>
 1024c93:	4c 89 4c 24 30 	mov	qword ptr [rsp + 48], r9
 1024c98:	48 8d 71 01 	lea	rsi, [rcx + 1]
 1024c9c:	48 39 d6 	cmp	rsi, rdx
 1024c9f:	0f 8f b7 00 00 00 	jg	183 <_runtime.(*addrRanges).add+0x27c>
 1024ca5:	0f 87 1a 02 00 00 	ja	538 <_runtime.(*addrRanges).add+0x3e5>
 1024cab:	48 89 73 08 	mov	qword ptr [rbx + 8], rsi
 1024caf:	48 8b 53 10 	mov	rdx, qword ptr [rbx + 16]
 1024cb3:	4c 8b 03 	mov	r8, qword ptr [rbx]
 1024cb6:	49 8d 41 01 	lea	rax, [r9 + 1]
 1024cba:	48 39 f0 	cmp	rax, rsi
 1024cbd:	0f 87 fa 01 00 00 	ja	506 <_runtime.(*addrRanges).add+0x3dd>
 1024cc3:	49 89 c2 	mov	r10, rax
 1024cc6:	48 29 d0 	sub	rax, rdx
 1024cc9:	48 89 f1 	mov	rcx, rsi
 1024ccc:	4c 29 d6 	sub	rsi, r10
 1024ccf:	49 c1 e2 04 	shl	r10, 4
 1024cd3:	48 c1 f8 3f 	sar	rax, 63
 1024cd7:	4c 21 d0 	and	rax, r10
 1024cda:	4d 8d 14 00 	lea	r10, [r8 + rax]
 1024cde:	49 39 c9 	cmp	r9, rcx
 1024ce1:	0f 87 ce 01 00 00 	ja	462 <_runtime.(*addrRanges).add+0x3d5>
 1024ce7:	4c 29 c9 	sub	rcx, r9
 1024cea:	48 39 ce 	cmp	rsi, rcx
 1024ced:	48 0f 4f f1 	cmovg	rsi, rcx
 1024cf1:	4c 89 c8 	mov	rax, r9
 1024cf4:	49 29 d1 	sub	r9, rdx
 1024cf7:	48 89 c2 	mov	rdx, rax
 1024cfa:	48 c1 e0 04 	shl	rax, 4
 1024cfe:	49 c1 f9 3f 	sar	r9, 63
 1024d02:	49 21 c1 	and	r9, rax
 1024d05:	4d 01 c8 	add	r8, r9
 1024d08:	4d 39 c2 	cmp	r10, r8
 1024d0b:	75 22 	jne	34 <_runtime.(*addrRanges).add+0x24f>
 1024d0d:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1024d11:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 1024d14:	48 39 ca 	cmp	rdx, rcx
 1024d17:	0f 83 90 01 00 00 	jae	400 <_runtime.(*addrRanges).add+0x3cd>
 1024d1d:	48 c1 e2 04 	shl	rdx, 4
 1024d21:	48 89 3c 13 	mov	qword ptr [rbx + rdx], rdi
 1024d25:	4c 89 5c 13 08 	mov	qword ptr [rbx + rdx + 8], r11
 1024d2a:	e9 07 ff ff ff 	jmp	-249 <_runtime.(*addrRanges).add+0x156>
 1024d2f:	4c 89 14 24 	mov	qword ptr [rsp], r10
 1024d33:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1024d38:	48 c1 e6 04 	shl	rsi, 4
 1024d3c:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1024d41:	e8 0a ee 02 00 	call	192010 <_runtime.memmove>
 1024d46:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1024d4b:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1024d50:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1024d55:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1024d5a:	eb b1 	jmp	-79 <_runtime.(*addrRanges).add+0x22d>
 1024d5c:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1024d61:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1024d66:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 1024d6b:	48 89 73 08 	mov	qword ptr [rbx + 8], rsi
 1024d6f:	48 89 d0 	mov	rax, rdx
 1024d72:	48 d1 e2 	shl	rdx
 1024d75:	48 89 53 10 	mov	qword ptr [rbx + 16], rdx
 1024d79:	48 c1 e0 05 	shl	rax, 5
 1024d7d:	48 8b 53 18 	mov	rdx, qword ptr [rbx + 24]
 1024d81:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024d85:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1024d8e:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1024d93:	e8 78 59 fe ff 	call	-108168 <_runtime.persistentalloc>
 1024d98:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1024d9d:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1024da2:	48 89 01 	mov	qword ptr [rcx], rax
 1024da5:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 1024da9:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1024dae:	48 39 d3 	cmp	rbx, rdx
 1024db1:	0f 87 26 01 00 00 	ja	294 <_runtime.(*addrRanges).add+0x3fd>
 1024db7:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1024dbc:	48 39 d3 	cmp	rbx, rdx
 1024dbf:	0f 87 10 01 00 00 	ja	272 <_runtime.(*addrRanges).add+0x3f5>
 1024dc5:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1024dca:	48 39 f0 	cmp	rax, rsi
 1024dcd:	74 17 	je	23 <_runtime.(*addrRanges).add+0x306>
 1024dcf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024dd3:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1024dd8:	48 c1 e3 04 	shl	rbx, 4
 1024ddc:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1024de1:	e8 6a ed 02 00 	call	191850 <_runtime.memmove>
 1024de6:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1024deb:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 1024def:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1024df2:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 1024df6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1024dfb:	48 8d 78 01 	lea	rdi, [rax + 1]
 1024dff:	48 39 cf 	cmp	rdi, rcx
 1024e02:	0f 87 c5 00 00 00 	ja	197 <_runtime.(*addrRanges).add+0x3ed>
 1024e08:	48 29 f9 	sub	rcx, rdi
 1024e0b:	4c 8b 44 24 20 	mov	r8, qword ptr [rsp + 32]
 1024e10:	49 29 c0 	sub	r8, rax
 1024e13:	4c 39 c1 	cmp	rcx, r8
 1024e16:	49 0f 4f c8 	cmovg	rcx, r8
 1024e1a:	49 89 f8 	mov	r8, rdi
 1024e1d:	48 29 f7 	sub	rdi, rsi
 1024e20:	49 c1 e0 04 	shl	r8, 4
 1024e24:	48 c1 ff 3f 	sar	rdi, 63
 1024e28:	4c 21 c7 	and	rdi, r8
 1024e2b:	48 01 fb 	add	rbx, rdi
 1024e2e:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1024e33:	48 89 c7 	mov	rdi, rax
 1024e36:	48 29 f0 	sub	rax, rsi
 1024e39:	48 89 fe 	mov	rsi, rdi
 1024e3c:	48 c1 e7 04 	shl	rdi, 4
 1024e40:	48 c1 f8 3f 	sar	rax, 63
 1024e44:	48 21 f8 	and	rax, rdi
 1024e47:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 1024e4c:	48 01 c7 	add	rdi, rax
 1024e4f:	48 39 fb 	cmp	rbx, rdi
 1024e52:	75 15 	jne	21 <_runtime.(*addrRanges).add+0x389>
 1024e54:	48 89 d3 	mov	rbx, rdx
 1024e57:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1024e5c:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1024e61:	48 89 f2 	mov	rdx, rsi
 1024e64:	e9 a4 fe ff ff 	jmp	-348 <_runtime.(*addrRanges).add+0x22d>
 1024e69:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1024e6d:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1024e72:	48 c1 e1 04 	shl	rcx, 4
 1024e76:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1024e7b:	e8 d0 ec 02 00 	call	191696 <_runtime.memmove>
 1024e80:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1024e85:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 1024e8a:	eb c8 	jmp	-56 <_runtime.(*addrRanges).add+0x374>
 1024e8c:	49 89 c1 	mov	r9, rax
 1024e8f:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1024e94:	45 31 d2 	xor	r10d, r10d
 1024e97:	e9 ea fc ff ff 	jmp	-790 <_runtime.(*addrRanges).add+0xa6>
 1024e9c:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1024ea1:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 1024ea6:	31 f6 	xor	esi, esi
 1024ea8:	e9 a8 fc ff ff 	jmp	-856 <_runtime.(*addrRanges).add+0x75>
 1024ead:	48 89 d0 	mov	rax, rdx
 1024eb0:	e8 9b e4 02 00 	call	189595 <_runtime.panicIndex>
 1024eb5:	4c 89 c8 	mov	rax, r9
 1024eb8:	e8 f3 e4 02 00 	call	189683 <_runtime.panicSliceB>
 1024ebd:	48 89 f1 	mov	rcx, rsi
 1024ec0:	e8 eb e4 02 00 	call	189675 <_runtime.panicSliceB>
 1024ec5:	48 89 f1 	mov	rcx, rsi
 1024ec8:	e8 c3 e4 02 00 	call	189635 <_runtime.panicSliceAcap>
 1024ecd:	48 89 f8 	mov	rax, rdi
 1024ed0:	e8 db e4 02 00 	call	189659 <_runtime.panicSliceB>
 1024ed5:	48 89 d9 	mov	rcx, rbx
 1024ed8:	e8 b3 e4 02 00 	call	189619 <_runtime.panicSliceAcap>
 1024edd:	48 89 d9 	mov	rcx, rbx
 1024ee0:	e8 ab e4 02 00 	call	189611 <_runtime.panicSliceAcap>
 1024ee5:	4c 89 c8 	mov	rax, r9
 1024ee8:	e8 63 e4 02 00 	call	189539 <_runtime.panicIndex>
 1024eed:	e8 5e e4 02 00 	call	189534 <_runtime.panicIndex>
 1024ef2:	e8 99 e4 02 00 	call	189593 <_runtime.panicSliceAcap>
 1024ef7:	4c 89 d1 	mov	rcx, r10
 1024efa:	e8 b1 e4 02 00 	call	189617 <_runtime.panicSliceB>
 1024eff:	48 89 f0 	mov	rax, rsi
 1024f02:	e8 a9 e4 02 00 	call	189609 <_runtime.panicSliceB>
 1024f07:	e8 44 e4 02 00 	call	189508 <_runtime.panicIndex>
 1024f0c:	4c 89 c8 	mov	rax, r9
 1024f0f:	e8 3c e4 02 00 	call	189500 <_runtime.panicIndex>
 1024f14:	e8 37 e4 02 00 	call	189495 <_runtime.panicIndex>
 1024f19:	48 89 f8 	mov	rax, rdi
 1024f1c:	e8 2f e4 02 00 	call	189487 <_runtime.panicIndex>
 1024f21:	90 	nop
 1024f22:	e8 a9 bc 02 00 	call	179369 <_runtime.morestack_noctxt>
 1024f27:	e9 b4 fb ff ff 	jmp	-1100 <_runtime.(*addrRanges).add>
 1024f2c:	cc 	int3
 1024f2d:	cc 	int3
 1024f2e:	cc 	int3
 1024f2f:	cc 	int3

_runtime.init.3:
 1024f30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024f39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1024f3d:	76 70 	jbe	112 <_runtime.init.3+0x7f>
 1024f3f:	48 83 ec 18 	sub	rsp, 24
 1024f43:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1024f48:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1024f4d:	48 81 3d 60 62 0a 00 90 16 00 00 	cmp	qword ptr [rip + 680544], 5776
 1024f58:	75 0a 	jne	10 <_runtime.init.3+0x34>
 1024f5a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1024f5f:	48 83 c4 18 	add	rsp, 24
 1024f63:	c3 	ret
 1024f64:	e8 37 55 00 00 	call	21815 <_runtime.printlock>
 1024f69:	48 8b 05 48 62 0a 00 	mov	rax, qword ptr [rip + 680520]
 1024f70:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024f74:	e8 a7 5b 00 00 	call	23463 <_runtime.printuint>
 1024f79:	e8 62 57 00 00 	call	22370 <_runtime.printsp>
 1024f7e:	48 c7 04 24 90 16 00 00 	mov	qword ptr [rsp], 5776
 1024f86:	e8 95 5b 00 00 	call	23445 <_runtime.printuint>
 1024f8b:	e8 a0 57 00 00 	call	22432 <_runtime.printnl>
 1024f90:	e8 8b 55 00 00 	call	21899 <_runtime.printunlock>
 1024f95:	48 8d 05 2a 13 05 00 	lea	rax, [rip + 332586]
 1024f9c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1024fa0:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 1024fa9:	e8 b2 3d 00 00 	call	15794 <_runtime.throw>
 1024fae:	90 	nop
 1024faf:	e8 1c bc 02 00 	call	179228 <_runtime.morestack_noctxt>
 1024fb4:	e9 77 ff ff ff 	jmp	-137 <_runtime.init.3>
 1024fb9:	cc 	int3
 1024fba:	cc 	int3
 1024fbb:	cc 	int3
 1024fbc:	cc 	int3
 1024fbd:	cc 	int3
 1024fbe:	cc 	int3
 1024fbf:	cc 	int3

_runtime.cachestats:
 1024fc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1024fc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1024fcd:	76 68 	jbe	104 <_runtime.cachestats+0x77>
 1024fcf:	48 83 ec 28 	sub	rsp, 40
 1024fd3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1024fd8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1024fdd:	48 8b 05 64 93 0a 00 	mov	rax, qword ptr [rip + 693092]
 1024fe4:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1024fe9:	48 8b 0d 50 93 0a 00 	mov	rcx, qword ptr [rip + 693072]
 1024ff0:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1024ff5:	31 d2 	xor	edx, edx
 1024ff7:	eb 03 	jmp	3 <_runtime.cachestats+0x3c>
 1024ff9:	48 ff c2 	inc	rdx
 1024ffc:	48 39 c2 	cmp	rdx, rax
 1024fff:	7d 2c 	jge	44 <_runtime.cachestats+0x6d>
 1025001:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 1025005:	48 8b 5b 40 	mov	rbx, qword ptr [rbx + 64]
 1025009:	48 85 db 	test	rbx, rbx
 102500c:	74 eb 	je	-21 <_runtime.cachestats+0x39>
 102500e:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1025013:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1025017:	e8 a4 00 00 00 	call	164 <_runtime.purgecachedstats>
 102501c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1025021:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1025026:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 102502b:	eb cc 	jmp	-52 <_runtime.cachestats+0x39>
 102502d:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1025032:	48 83 c4 28 	add	rsp, 40
 1025036:	c3 	ret
 1025037:	e8 94 bb 02 00 	call	179092 <_runtime.morestack_noctxt>
 102503c:	eb 82 	jmp	-126 <_runtime.cachestats>
 102503e:	cc 	int3
 102503f:	cc 	int3

_runtime.flushmcache:
 1025040:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1025049:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102504d:	76 69 	jbe	105 <_runtime.flushmcache+0x78>
 102504f:	48 83 ec 20 	sub	rsp, 32
 1025053:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1025058:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102505d:	48 8b 0d e4 92 0a 00 	mov	rcx, qword ptr [rip + 692964]
 1025064:	48 8b 15 d5 92 0a 00 	mov	rdx, qword ptr [rip + 692949]
 102506b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1025070:	48 39 c8 	cmp	rax, rcx
 1025073:	73 3d 	jae	61 <_runtime.flushmcache+0x72>
 1025075:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 1025079:	48 8b 40 40 	mov	rax, qword ptr [rax + 64]
 102507d:	48 85 c0 	test	rax, rax
 1025080:	74 26 	je	38 <_runtime.flushmcache+0x68>
 1025082:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1025087:	48 89 04 24 	mov	qword ptr [rsp], rax
 102508b:	e8 f0 b3 fe ff 	call	-85008 <_runtime.(*mcache).releaseAll>
 1025090:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1025095:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025099:	e8 62 88 01 00 	call	100450 <_runtime.stackcache_clear>
 102509e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10250a3:	48 83 c4 20 	add	rsp, 32
 10250a7:	c3 	ret
 10250a8:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10250ad:	48 83 c4 20 	add	rsp, 32
 10250b1:	c3 	ret
 10250b2:	e8 99 e2 02 00 	call	189081 <_runtime.panicIndex>
 10250b7:	90 	nop
 10250b8:	e8 13 bb 02 00 	call	178963 <_runtime.morestack_noctxt>
 10250bd:	eb 81 	jmp	-127 <_runtime.flushmcache>
 10250bf:	cc 	int3

_runtime.purgecachedstats:
 10250c0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10250c5:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 10250c9:	48 01 0d a8 4c 0d 00 	add	qword ptr [rip + 871592], rcx
 10250d0:	48 c7 40 08 00 00 00 00 	mov	qword ptr [rax + 8], 0
 10250d8:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 10250dc:	48 01 0d 65 4c 0d 00 	add	qword ptr [rip + 871525], rcx
 10250e3:	48 c7 40 20 00 00 00 00 	mov	qword ptr [rax + 32], 0
 10250eb:	48 8b 88 98 04 00 00 	mov	rcx, qword ptr [rax + 1176]
 10250f2:	48 01 0d af 00 0d 00 	add	qword ptr [rip + 852143], rcx
 10250f9:	48 c7 80 98 04 00 00 00 00 00 00 	mov	qword ptr [rax + 1176], 0
 1025104:	48 8b 88 a0 04 00 00 	mov	rcx, qword ptr [rax + 1184]
 102510b:	48 01 0d 9e 00 0d 00 	add	qword ptr [rip + 852126], rcx
 1025112:	48 c7 80 a0 04 00 00 00 00 00 00 	mov	qword ptr [rax + 1184], 0
 102511d:	31 c9 	xor	ecx, ecx
 102511f:	eb 29 	jmp	41 <_runtime.purgecachedstats+0x8a>
 1025121:	48 8d 15 90 00 0d 00 	lea	rdx, [rip + 852112]
 1025128:	48 8b 1c ca 	mov	rbx, qword ptr [rdx + 8*rcx]
 102512c:	48 8b b4 c8 a8 04 00 00 	mov	rsi, qword ptr [rax + 8*rcx + 1192]
 1025134:	48 01 f3 	add	rbx, rsi
 1025137:	48 89 1c ca 	mov	qword ptr [rdx + 8*rcx], rbx
 102513b:	48 c7 84 c8 a8 04 00 00 00 00 00 00 	mov	qword ptr [rax + 8*rcx + 1192], 0
 1025147:	48 ff c1 	inc	rcx
 102514a:	48 83 f9 43 	cmp	rcx, 67
 102514e:	7c d1 	jl	-47 <_runtime.purgecachedstats+0x61>
 1025150:	c3 	ret
 1025151:	cc 	int3
 1025152:	cc 	int3
 1025153:	cc 	int3
 1025154:	cc 	int3
 1025155:	cc 	int3
 1025156:	cc 	int3
 1025157:	cc 	int3
 1025158:	cc 	int3
 1025159:	cc 	int3
 102515a:	cc 	int3
 102515b:	cc 	int3
 102515c:	cc 	int3
 102515d:	cc 	int3
 102515e:	cc 	int3
 102515f:	cc 	int3

_runtime.mSysStatInc:
 1025160:	48 83 ec 20 	sub	rsp, 32
 1025164:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1025169:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102516e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1025173:	48 85 c0 	test	rax, rax
 1025176:	0f 84 90 00 00 00 	je	144 <_runtime.mSysStatInc+0xac>
 102517c:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1025181:	48 89 ca 	mov	rdx, rcx
 1025184:	f0 	lock
 1025185:	48 0f c1 08 	xadd	qword ptr [rax], rcx
 1025189:	48 8d 04 0a 	lea	rax, [rdx + rcx]
 102518d:	48 39 d0 	cmp	rax, rdx
 1025190:	72 0a 	jb	10 <_runtime.mSysStatInc+0x3c>
 1025192:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1025197:	48 83 c4 20 	add	rsp, 32
 102519b:	c3 	ret
 102519c:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10251a1:	e8 fa 52 00 00 	call	21242 <_runtime.printlock>
 10251a6:	48 8d 05 c4 02 05 00 	lea	rax, [rip + 328388]
 10251ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 10251b1:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 10251ba:	e8 21 5c 00 00 	call	23585 <_runtime.printstring>
 10251bf:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10251c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10251c8:	e8 53 59 00 00 	call	22867 <_runtime.printuint>
 10251cd:	48 8d 05 2b db 04 00 	lea	rax, [rip + 318251]
 10251d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10251d8:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 10251e1:	e8 fa 5b 00 00 	call	23546 <_runtime.printstring>
 10251e6:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10251eb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10251ef:	e8 2c 59 00 00 	call	22828 <_runtime.printuint>
 10251f4:	e8 37 55 00 00 	call	21815 <_runtime.printnl>
 10251f9:	e8 22 53 00 00 	call	21282 <_runtime.printunlock>
 10251fe:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 1025205:	e8 96 df 01 00 	call	122774 <_runtime.exit>
 102520a:	eb 86 	jmp	-122 <_runtime.mSysStatInc+0x32>
 102520c:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1025211:	48 83 c4 20 	add	rsp, 32
 1025215:	c3 	ret
 1025216:	cc 	int3
 1025217:	cc 	int3
 1025218:	cc 	int3
 1025219:	cc 	int3
 102521a:	cc 	int3
 102521b:	cc 	int3
 102521c:	cc 	int3
 102521d:	cc 	int3
 102521e:	cc 	int3
 102521f:	cc 	int3

_runtime.mSysStatDec:
 1025220:	48 83 ec 20 	sub	rsp, 32
 1025224:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1025229:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102522e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1025233:	48 85 c0 	test	rax, rax
 1025236:	0f 84 96 00 00 00 	je	150 <_runtime.mSysStatDec+0xb2>
 102523c:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1025241:	48 89 ca 	mov	rdx, rcx
 1025244:	48 f7 d9 	neg	rcx
 1025247:	f0 	lock
 1025248:	48 0f c1 08 	xadd	qword ptr [rax], rcx
 102524c:	48 29 d1 	sub	rcx, rdx
 102524f:	48 8d 04 11 	lea	rax, [rcx + rdx]
 1025253:	48 39 d0 	cmp	rax, rdx
 1025256:	72 0a 	jb	10 <_runtime.mSysStatDec+0x42>
 1025258:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102525d:	48 83 c4 20 	add	rsp, 32
 1025261:	c3 	ret
 1025262:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1025267:	e8 34 52 00 00 	call	21044 <_runtime.printlock>
 102526c:	48 8d 05 76 03 05 00 	lea	rax, [rip + 328566]
 1025273:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025277:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1025280:	e8 5b 5b 00 00 	call	23387 <_runtime.printstring>
 1025285:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102528a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102528e:	e8 8d 58 00 00 	call	22669 <_runtime.printuint>
 1025293:	48 8d 05 65 da 04 00 	lea	rax, [rip + 318053]
 102529a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102529e:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 10252a7:	e8 34 5b 00 00 	call	23348 <_runtime.printstring>
 10252ac:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10252b1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10252b5:	e8 66 58 00 00 	call	22630 <_runtime.printuint>
 10252ba:	e8 71 54 00 00 	call	21617 <_runtime.printnl>
 10252bf:	e8 5c 52 00 00 	call	21084 <_runtime.printunlock>
 10252c4:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 10252cb:	e8 d0 de 01 00 	call	122576 <_runtime.exit>
 10252d0:	eb 86 	jmp	-122 <_runtime.mSysStatDec+0x38>
 10252d2:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10252d7:	48 83 c4 20 	add	rsp, 32
 10252db:	c3 	ret
 10252dc:	cc 	int3
 10252dd:	cc 	int3
 10252de:	cc 	int3
 10252df:	cc 	int3

_runtime.(*wbBuf).reset:
 10252e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10252e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10252ed:	76 6c 	jbe	108 <_runtime.(*wbBuf).reset+0x7b>
 10252ef:	48 83 ec 18 	sub	rsp, 24
 10252f3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10252f8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10252fd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1025302:	48 8d 48 10 	lea	rcx, [rax + 16]
 1025306:	48 89 08 	mov	qword ptr [rax], rcx
 1025309:	80 3d f5 25 0d 00 00 	cmp	byte ptr [rip + 861685], 0
 1025310:	74 22 	je	34 <_runtime.(*wbBuf).reset+0x54>
 1025312:	48 8d 48 20 	lea	rcx, [rax + 32]
 1025316:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 102531a:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102531e:	48 2b 08 	sub	rcx, qword ptr [rax]
 1025321:	48 f7 c1 0f 00 00 00 	test	rcx, 15
 1025328:	75 17 	jne	23 <_runtime.(*wbBuf).reset+0x61>
 102532a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102532f:	48 83 c4 18 	add	rsp, 24
 1025333:	c3 	ret
 1025334:	48 81 c1 00 10 00 00 	add	rcx, 4096
 102533b:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 102533f:	eb d9 	jmp	-39 <_runtime.(*wbBuf).reset+0x3a>
 1025341:	48 8d 05 04 06 05 00 	lea	rax, [rip + 329220]
 1025348:	48 89 04 24 	mov	qword ptr [rsp], rax
 102534c:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 1025355:	e8 06 3a 00 00 	call	14854 <_runtime.throw>
 102535a:	90 	nop
 102535b:	e8 70 b8 02 00 	call	178288 <_runtime.morestack_noctxt>
 1025360:	e9 7b ff ff ff 	jmp	-133 <_runtime.(*wbBuf).reset>
 1025365:	cc 	int3
 1025366:	cc 	int3
 1025367:	cc 	int3
 1025368:	cc 	int3
 1025369:	cc 	int3
 102536a:	cc 	int3
 102536b:	cc 	int3
 102536c:	cc 	int3
 102536d:	cc 	int3
 102536e:	cc 	int3
 102536f:	cc 	int3

_runtime.wbBufFlush:
 1025370:	48 83 ec 28 	sub	rsp, 40
 1025374:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1025379:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102537e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1025387:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102538b:	83 b8 0c 01 00 00 00 	cmp	dword ptr [rax + 268], 0
 1025392:	0f 8f a3 00 00 00 	jg	163 <_runtime.wbBufFlush+0xcb>
 1025398:	80 3d 66 25 0d 00 00 	cmp	byte ptr [rip + 861542], 0
 102539f:	0f 84 8c 00 00 00 	je	140 <_runtime.wbBufFlush+0xc1>
 10253a5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10253aa:	48 85 c0 	test	rax, rax
 10253ad:	75 31 	jne	49 <_runtime.wbBufFlush+0x70>
 10253af:	0f 57 c0 	xorps	xmm0, xmm0
 10253b2:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 10253b7:	48 8d 0d d2 9c 02 00 	lea	rcx, [rip + 171218]
 10253be:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10253c3:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10253c8:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 10253cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10253d1:	e8 aa b6 02 00 	call	177834 <_runtime.systemstack>
 10253d6:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10253db:	48 83 c4 28 	add	rsp, 40
 10253df:	c3 	ret
 10253e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10253e4:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10253e9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10253ee:	e8 1d d9 fd ff 	call	-141027 <_runtime.cgoCheckWriteBarrier>
 10253f3:	80 3d 0a 25 0d 00 00 	cmp	byte ptr [rip + 861450], 0
 10253fa:	74 07 	je	7 <_runtime.wbBufFlush+0x93>
 10253fc:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1025401:	eb ac 	jmp	-84 <_runtime.wbBufFlush+0x3f>
 1025403:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102540c:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1025410:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1025417:	84 00 	test	byte ptr [rax], al
 1025419:	48 8d 88 58 17 00 00 	lea	rcx, [rax + 5976]
 1025420:	48 89 88 48 17 00 00 	mov	qword ptr [rax + 5960], rcx
 1025427:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102542c:	48 83 c4 28 	add	rsp, 40
 1025430:	c3 	ret
 1025431:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1025436:	e9 74 ff ff ff 	jmp	-140 <_runtime.wbBufFlush+0x3f>
 102543b:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1025442:	84 00 	test	byte ptr [rax], al
 1025444:	48 8d 88 58 17 00 00 	lea	rcx, [rax + 5976]
 102544b:	48 89 88 48 17 00 00 	mov	qword ptr [rax + 5960], rcx
 1025452:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1025457:	48 83 c4 28 	add	rsp, 40
 102545b:	c3 	ret
 102545c:	cc 	int3
 102545d:	cc 	int3
 102545e:	cc 	int3
 102545f:	cc 	int3

_runtime.wbBufFlush1:
 1025460:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1025469:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 102546d:	0f 86 24 02 00 00 	jbe	548 <_runtime.wbBufFlush1+0x237>
 1025473:	48 83 ec 50 	sub	rsp, 80
 1025477:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 102547c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1025481:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1025486:	84 00 	test	byte ptr [rax], al
 1025488:	48 8d 98 58 17 00 00 	lea	rbx, [rax + 5976]
 102548f:	48 8b 88 48 17 00 00 	mov	rcx, qword ptr [rax + 5960]
 1025496:	48 29 d9 	sub	rcx, rbx
 1025499:	48 c1 e9 03 	shr	rcx, 3
 102549d:	48 81 f9 00 02 00 00 	cmp	rcx, 512
 10254a4:	0f 87 e2 01 00 00 	ja	482 <_runtime.wbBufFlush1+0x22c>
 10254aa:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10254af:	48 c7 80 48 17 00 00 00 00 00 00 	mov	qword ptr [rax + 5960], 0
 10254ba:	80 3d b1 22 0d 00 00 	cmp	byte ptr [rip + 860849], 0
 10254c1:	0f 85 65 01 00 00 	jne	357 <_runtime.wbBufFlush1+0x1cc>
 10254c7:	31 d2 	xor	edx, edx
 10254c9:	31 db 	xor	ebx, ebx
 10254cb:	eb 03 	jmp	3 <_runtime.wbBufFlush1+0x70>
 10254cd:	48 ff c2 	inc	rdx
 10254d0:	48 39 ca 	cmp	rdx, rcx
 10254d3:	0f 8d fe 00 00 00 	jge	254 <_runtime.wbBufFlush1+0x177>
 10254d9:	48 8b b4 d0 58 17 00 00 	mov	rsi, qword ptr [rax + 8*rdx + 5976]
 10254e1:	48 81 fe 00 10 00 00 	cmp	rsi, 4096
 10254e8:	72 e3 	jb	-29 <_runtime.wbBufFlush1+0x6d>
 10254ea:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 10254ef:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 10254f4:	48 89 34 24 	mov	qword ptr [rsp], rsi
 10254f8:	0f 57 c0 	xorps	xmm0, xmm0
 10254fb:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1025500:	e8 0b 84 fe ff 	call	-97269 <_runtime.findObject>
 1025505:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102550a:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102550f:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1025514:	48 85 c0 	test	rax, rax
 1025517:	75 16 	jne	22 <_runtime.wbBufFlush1+0xcf>
 1025519:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102551e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1025523:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1025528:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 102552d:	eb 9e 	jmp	-98 <_runtime.wbBufFlush1+0x6d>
 102552f:	90 	nop
 1025530:	48 89 d3 	mov	rbx, rdx
 1025533:	48 c1 ea 03 	shr	rdx, 3
 1025537:	48 83 e3 07 	and	rbx, 7
 102553b:	48 89 ce 	mov	rsi, rcx
 102553e:	48 89 d9 	mov	rcx, rbx
 1025541:	bf 01 00 00 00 	mov	edi, 1
 1025546:	d3 e7 	shl	edi, cl
 1025548:	90 	nop
 1025549:	48 03 56 50 	add	rdx, qword ptr [rsi + 80]
 102554d:	0f b6 1a 	movzx	ebx, byte ptr [rdx]
 1025550:	40 84 df 	test	dil, bl
 1025553:	74 19 	je	25 <_runtime.wbBufFlush1+0x10e>
 1025555:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102555a:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102555f:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1025564:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1025569:	e9 5f ff ff ff 	jmp	-161 <_runtime.wbBufFlush1+0x6d>
 102556e:	90 	nop
 102556f:	f0 	lock
 1025570:	40 08 3a 	or	byte ptr [rdx], dil
 1025573:	0f b6 5e 62 	movzx	ebx, byte ptr [rsi + 98]
 1025577:	f6 c3 01 	test	bl, 1
 102557a:	74 2b 	je	43 <_runtime.wbBufFlush1+0x147>
 102557c:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1025581:	48 8b b8 a8 16 00 00 	mov	rdi, qword ptr [rax + 5800]
 1025588:	48 03 7e 68 	add	rdi, qword ptr [rsi + 104]
 102558c:	48 89 b8 a8 16 00 00 	mov	qword ptr [rax + 5800], rdi
 1025593:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1025598:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 102559d:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10255a2:	e9 26 ff ff ff 	jmp	-218 <_runtime.wbBufFlush1+0x6d>
 10255a7:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10255ac:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10255b1:	48 39 cb 	cmp	rbx, rcx
 10255b4:	0f 83 ca 00 00 00 	jae	202 <_runtime.wbBufFlush1+0x224>
 10255ba:	48 8b 74 24 58 	mov	rsi, qword ptr [rsp + 88]
 10255bf:	48 89 84 de 58 17 00 00 	mov	qword ptr [rsi + 8*rbx + 5976], rax
 10255c7:	48 ff c3 	inc	rbx
 10255ca:	48 89 f0 	mov	rax, rsi
 10255cd:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10255d2:	e9 f6 fe ff ff 	jmp	-266 <_runtime.wbBufFlush1+0x6d>
 10255d7:	48 81 fb 00 02 00 00 	cmp	rbx, 512
 10255de:	0f 87 93 00 00 00 	ja	147 <_runtime.wbBufFlush1+0x217>
 10255e4:	48 8d 88 98 16 00 00 	lea	rcx, [rax + 5784]
 10255eb:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10255ef:	48 8d 88 58 17 00 00 	lea	rcx, [rax + 5976]
 10255f6:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10255fb:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1025600:	48 c7 44 24 18 00 02 00 00 	mov	qword ptr [rsp + 24], 512
 1025609:	e8 52 69 ff ff 	call	-38574 <_runtime.(*gcWork).putBatch>
 102560e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1025613:	48 05 48 17 00 00 	add	rax, 5960
 1025619:	48 89 04 24 	mov	qword ptr [rsp], rax
 102561d:	e8 be fc ff ff 	call	-834 <_runtime.(*wbBuf).reset>
 1025622:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1025627:	48 83 c4 50 	add	rsp, 80
 102562b:	c3 	ret
 102562c:	31 d2 	xor	edx, edx
 102562e:	eb 29 	jmp	41 <_runtime.wbBufFlush1+0x1f9>
 1025630:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1025635:	48 8b 8c d0 58 17 00 00 	mov	rcx, qword ptr [rax + 8*rdx + 5976]
 102563d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1025641:	e8 8a 26 ff ff 	call	-55670 <_runtime.shade>
 1025646:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102564b:	48 8d 50 01 	lea	rdx, [rax + 1]
 102564f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1025654:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1025659:	48 39 ca 	cmp	rdx, rcx
 102565c:	7c d2 	jl	-46 <_runtime.wbBufFlush1+0x1d0>
 102565e:	48 05 48 17 00 00 	add	rax, 5960
 1025664:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025668:	e8 73 fc ff ff 	call	-909 <_runtime.(*wbBuf).reset>
 102566d:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1025672:	48 83 c4 50 	add	rsp, 80
 1025676:	c3 	ret
 1025677:	48 89 d9 	mov	rcx, rbx
 102567a:	ba 00 02 00 00 	mov	edx, 512
 102567f:	e8 0c dd 02 00 	call	187660 <_runtime.panicSliceAcap>
 1025684:	48 89 d8 	mov	rax, rbx
 1025687:	e8 c4 dc 02 00 	call	187588 <_runtime.panicIndex>
 102568c:	ba 00 02 00 00 	mov	edx, 512
 1025691:	e8 ea dc 02 00 	call	187626 <_runtime.panicSliceAlenU>
 1025696:	90 	nop
 1025697:	e8 64 b0 01 00 	call	110692 <_runtime.morestackc>
 102569c:	e9 bf fd ff ff 	jmp	-577 <_runtime.wbBufFlush1>
 10256a1:	cc 	int3
 10256a2:	cc 	int3
 10256a3:	cc 	int3
 10256a4:	cc 	int3
 10256a5:	cc 	int3
 10256a6:	cc 	int3
 10256a7:	cc 	int3
 10256a8:	cc 	int3
 10256a9:	cc 	int3
 10256aa:	cc 	int3
 10256ab:	cc 	int3
 10256ac:	cc 	int3
 10256ad:	cc 	int3
 10256ae:	cc 	int3
 10256af:	cc 	int3

_runtime.nonblockingPipe:
 10256b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10256b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10256bd:	0f 86 b7 00 00 00 	jbe	183 <_runtime.nonblockingPipe+0xca>
 10256c3:	48 83 ec 30 	sub	rsp, 48
 10256c7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10256cc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10256d1:	e8 fa d9 01 00 	call	121338 <_runtime.pipe>
 10256d6:	8b 04 24 	mov	eax, dword ptr [rsp]
 10256d9:	8b 4c 24 04 	mov	ecx, dword ptr [rsp + 4]
 10256dd:	8b 54 24 08 	mov	edx, dword ptr [rsp + 8]
 10256e1:	85 d2 	test	edx, edx
 10256e3:	74 1e 	je	30 <_runtime.nonblockingPipe+0x53>
 10256e5:	c7 44 24 38 ff ff ff ff 	mov	dword ptr [rsp + 56], 4294967295
 10256ed:	c7 44 24 3c ff ff ff ff 	mov	dword ptr [rsp + 60], 4294967295
 10256f5:	89 54 24 40 	mov	dword ptr [rsp + 64], edx
 10256f9:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10256fe:	48 83 c4 30 	add	rsp, 48
 1025702:	c3 	ret
 1025703:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 1025707:	89 4c 24 1c 	mov	dword ptr [rsp + 28], ecx
 102570b:	89 54 24 24 	mov	dword ptr [rsp + 36], edx
 102570f:	90 	nop
 1025710:	48 b8 02 00 00 00 01 00 00 00 	movabs	rax, 4294967298
 102571a:	48 89 44 24 04 	mov	qword ptr [rsp + 4], rax
 102571f:	e8 5c de 01 00 	call	122460 <_runtime.fcntl>
 1025724:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 1025728:	89 04 24 	mov	dword ptr [rsp], eax
 102572b:	e8 70 e1 01 00 	call	123248 <_runtime.setNonblock>
 1025730:	90 	nop
 1025731:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1025735:	89 04 24 	mov	dword ptr [rsp], eax
 1025738:	48 b9 02 00 00 00 01 00 00 00 	movabs	rcx, 4294967298
 1025742:	48 89 4c 24 04 	mov	qword ptr [rsp + 4], rcx
 1025747:	e8 34 de 01 00 	call	122420 <_runtime.fcntl>
 102574c:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1025750:	89 04 24 	mov	dword ptr [rsp], eax
 1025753:	e8 48 e1 01 00 	call	123208 <_runtime.setNonblock>
 1025758:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 102575c:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 1025760:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1025764:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 1025768:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 102576c:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 1025770:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1025775:	48 83 c4 30 	add	rsp, 48
 1025779:	c3 	ret
 102577a:	e8 51 b4 02 00 	call	177233 <_runtime.morestack_noctxt>
 102577f:	e9 2c ff ff ff 	jmp	-212 <_runtime.nonblockingPipe>
 1025784:	cc 	int3
 1025785:	cc 	int3
 1025786:	cc 	int3
 1025787:	cc 	int3
 1025788:	cc 	int3
 1025789:	cc 	int3
 102578a:	cc 	int3
 102578b:	cc 	int3
 102578c:	cc 	int3
 102578d:	cc 	int3
 102578e:	cc 	int3
 102578f:	cc 	int3

_runtime.netpollGenericInit:
 1025790:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1025799:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102579d:	76 62 	jbe	98 <_runtime.netpollGenericInit+0x71>
 102579f:	48 83 ec 10 	sub	rsp, 16
 10257a3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 10257a8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 10257ad:	8b 05 f9 1f 0d 00 	mov	eax, dword ptr [rip + 860153]
 10257b3:	85 c0 	test	eax, eax
 10257b5:	74 0a 	je	10 <_runtime.netpollGenericInit+0x31>
 10257b7:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10257bc:	48 83 c4 10 	add	rsp, 16
 10257c0:	c3 	ret
 10257c1:	48 8d 05 b0 20 0d 00 	lea	rax, [rip + 860336]
 10257c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10257cc:	e8 5f 29 fe ff 	call	-120481 <_runtime.lock>
 10257d1:	83 3d d4 1f 0d 00 00 	cmp	dword ptr [rip + 860116], 0
 10257d8:	74 12 	je	18 <_runtime.netpollGenericInit+0x5c>
 10257da:	48 8d 05 97 20 0d 00 	lea	rax, [rip + 860311]
 10257e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10257e5:	e8 26 2b fe ff 	call	-120026 <_runtime.unlock>
 10257ea:	eb cb 	jmp	-53 <_runtime.netpollGenericInit+0x27>
 10257ec:	e8 af 01 00 00 	call	431 <_runtime.netpollinit>
 10257f1:	b8 01 00 00 00 	mov	eax, 1
 10257f6:	48 8d 0d af 1f 0d 00 	lea	rcx, [rip + 860079]
 10257fd:	87 01 	xchg	dword ptr [rcx], eax
 10257ff:	eb d9 	jmp	-39 <_runtime.netpollGenericInit+0x4a>
 1025801:	e8 ca b3 02 00 	call	177098 <_runtime.morestack_noctxt>
 1025806:	eb 88 	jmp	-120 <_runtime.netpollGenericInit>
 1025808:	cc 	int3
 1025809:	cc 	int3
 102580a:	cc 	int3
 102580b:	cc 	int3
 102580c:	cc 	int3
 102580d:	cc 	int3
 102580e:	cc 	int3
 102580f:	cc 	int3

_runtime.netpollready:
 1025810:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1025819:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102581d:	0f 86 ca 00 00 00 	jbe	202 <_runtime.netpollready+0xdd>
 1025823:	48 83 ec 28 	sub	rsp, 40
 1025827:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102582c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1025831:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 1025835:	83 f8 72 	cmp	eax, 114
 1025838:	0f 85 9d 00 00 00 	jne	157 <_runtime.netpollready+0xcb>
 102583e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1025843:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025847:	c7 44 24 08 72 00 00 00 	mov	dword ptr [rsp + 8], 114
 102584f:	c6 44 24 0c 01 	mov	byte ptr [rsp + 12], 1
 1025854:	e8 a7 00 00 00 	call	167 <_runtime.netpollunblock>
 1025859:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102585e:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1025863:	8b 4c 24 40 	mov	ecx, dword ptr [rsp + 64]
 1025867:	83 f9 77 	cmp	ecx, 119
 102586a:	75 63 	jne	99 <_runtime.netpollready+0xbf>
 102586c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1025871:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025875:	c7 44 24 08 77 00 00 00 	mov	dword ptr [rsp + 8], 119
 102587d:	c6 44 24 0c 01 	mov	byte ptr [rsp + 12], 1
 1025882:	e8 79 00 00 00 	call	121 <_runtime.netpollunblock>
 1025887:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102588c:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1025891:	48 85 c9 	test	rcx, rcx
 1025894:	74 32 	je	50 <_runtime.netpollready+0xb8>
 1025896:	90 	nop
 1025897:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 102589c:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 102589f:	48 89 99 a0 00 00 00 	mov	qword ptr [rcx + 160], rbx
 10258a6:	90 	nop
 10258a7:	48 89 0a 	mov	qword ptr [rdx], rcx
 10258aa:	48 85 c0 	test	rax, rax
 10258ad:	74 0f 	je	15 <_runtime.netpollready+0xae>
 10258af:	90 	nop
 10258b0:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 10258b3:	48 89 88 a0 00 00 00 	mov	qword ptr [rax + 160], rcx
 10258ba:	90 	nop
 10258bb:	48 89 02 	mov	qword ptr [rdx], rax
 10258be:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10258c3:	48 83 c4 28 	add	rsp, 40
 10258c7:	c3 	ret
 10258c8:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10258cd:	eb db 	jmp	-37 <_runtime.netpollready+0x9a>
 10258cf:	81 f9 e9 00 00 00 	cmp	ecx, 233
 10258d5:	74 95 	je	-107 <_runtime.netpollready+0x5c>
 10258d7:	31 c0 	xor	eax, eax
 10258d9:	eb b1 	jmp	-79 <_runtime.netpollready+0x7c>
 10258db:	3d e9 00 00 00 	cmp	eax, 233
 10258e0:	0f 84 58 ff ff ff 	je	-168 <_runtime.netpollready+0x2e>
 10258e6:	31 c0 	xor	eax, eax
 10258e8:	e9 71 ff ff ff 	jmp	-143 <_runtime.netpollready+0x4e>
 10258ed:	e8 de b2 02 00 	call	176862 <_runtime.morestack_noctxt>
 10258f2:	e9 19 ff ff ff 	jmp	-231 <_runtime.netpollready>
 10258f7:	cc 	int3
 10258f8:	cc 	int3
 10258f9:	cc 	int3
 10258fa:	cc 	int3
 10258fb:	cc 	int3
 10258fc:	cc 	int3
 10258fd:	cc 	int3
 10258fe:	cc 	int3
 10258ff:	cc 	int3

_runtime.netpollunblock:
 1025900:	48 83 ec 10 	sub	rsp, 16
 1025904:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1025909:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102590e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1025913:	84 01 	test	byte ptr [rcx], al
 1025915:	48 8d 51 28 	lea	rdx, [rcx + 40]
 1025919:	8b 5c 24 20 	mov	ebx, dword ptr [rsp + 32]
 102591d:	83 fb 77 	cmp	ebx, 119
 1025920:	75 74 	jne	116 <_runtime.netpollunblock+0x96>
 1025922:	48 81 c1 88 00 00 00 	add	rcx, 136
 1025929:	0f b6 54 24 24 	movzx	edx, byte ptr [rsp + 36]
 102592e:	48 8b 01 	mov	rax, qword ptr [rcx]
 1025931:	48 83 f8 01 	cmp	rax, 1
 1025935:	74 4c 	je	76 <_runtime.netpollunblock+0x83>
 1025937:	48 85 c0 	test	rax, rax
 102593a:	75 04 	jne	4 <_runtime.netpollunblock+0x40>
 102593c:	84 d2 	test	dl, dl
 102593e:	74 30 	je	48 <_runtime.netpollunblock+0x70>
 1025940:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025944:	f0 	lock
 1025945:	48 0f b1 11 	cmpxchg	qword ptr [rcx], rdx
 1025949:	0f 94 c3 	sete	bl
 102594c:	84 db 	test	bl, bl
 102594e:	74 de 	je	-34 <_runtime.netpollunblock+0x2e>
 1025950:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1025954:	48 83 f8 02 	cmp	rax, 2
 1025958:	b9 00 00 00 00 	mov	ecx, 0
 102595d:	48 0f 44 c1 	cmove	rax, rcx
 1025961:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1025966:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102596b:	48 83 c4 10 	add	rsp, 16
 102596f:	c3 	ret
 1025970:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1025979:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102597e:	48 83 c4 10 	add	rsp, 16
 1025982:	c3 	ret
 1025983:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 102598c:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1025991:	48 83 c4 10 	add	rsp, 16
 1025995:	c3 	ret
 1025996:	48 89 d1 	mov	rcx, rdx
 1025999:	eb 8e 	jmp	-114 <_runtime.netpollunblock+0x29>
 102599b:	cc 	int3
 102599c:	cc 	int3
 102599d:	cc 	int3
 102599e:	cc 	int3
 102599f:	cc 	int3

_runtime.netpollinit:
 10259a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10259a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10259ad:	0f 86 e1 01 00 00 	jbe	481 <_runtime.netpollinit+0x1f4>
 10259b3:	48 83 c4 80 	add	rsp, -128
 10259b7:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 10259bc:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 10259c1:	e8 0a dc 01 00 	call	121866 <_runtime.kqueue>
 10259c6:	8b 04 24 	mov	eax, dword ptr [rsp]
 10259c9:	89 05 95 57 0a 00 	mov	dword ptr [rip + 677781], eax
 10259cf:	85 c0 	test	eax, eax
 10259d1:	0f 8c 65 01 00 00 	jl	357 <_runtime.netpollinit+0x19c>
 10259d7:	90 	nop
 10259d8:	48 b8 02 00 00 00 01 00 00 00 	movabs	rax, 4294967298
 10259e2:	48 89 44 24 04 	mov	qword ptr [rsp + 4], rax
 10259e7:	e8 94 db 01 00 	call	121748 <_runtime.fcntl>
 10259ec:	e8 bf fc ff ff 	call	-833 <_runtime.nonblockingPipe>
 10259f1:	48 63 04 24 	movsxd	rax, dword ptr [rsp]
 10259f5:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 10259f9:	48 63 54 24 04 	movsxd	rdx, dword ptr [rsp + 4]
 10259fe:	85 c9 	test	ecx, ecx
 1025a00:	0f 85 df 00 00 00 	jne	223 <_runtime.netpollinit+0x145>
 1025a06:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1025a0b:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 1025a10:	0f 57 c0 	xorps	xmm0, xmm0
 1025a13:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 1025a18:	0f 11 44 24 68 	movups	xmmword ptr [rsp + 104], xmm0
 1025a1d:	c7 44 24 60 ff ff 01 00 	mov	dword ptr [rsp + 96], 131071
 1025a25:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1025a2a:	8b 0d 34 57 0a 00 	mov	ecx, dword ptr [rip + 677684]
 1025a30:	89 0c 24 	mov	dword ptr [rsp], ecx
 1025a33:	48 8d 4c 24 58 	lea	rcx, [rsp + 88]
 1025a38:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1025a3d:	c7 44 24 10 01 00 00 00 	mov	dword ptr [rsp + 16], 1
 1025a45:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1025a4e:	c7 44 24 20 00 00 00 00 	mov	dword ptr [rsp + 32], 0
 1025a56:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1025a5f:	e8 bc db 01 00 	call	121788 <_runtime.kevent>
 1025a64:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 1025a68:	85 c0 	test	eax, eax
 1025a6a:	7c 22 	jl	34 <_runtime.netpollinit+0xee>
 1025a6c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1025a71:	48 89 05 f0 1d 0d 00 	mov	qword ptr [rip + 859632], rax
 1025a78:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1025a7d:	48 89 05 ec 1d 0d 00 	mov	qword ptr [rip + 859628], rax
 1025a84:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1025a89:	48 83 ec 80 	sub	rsp, -128
 1025a8d:	c3 	ret
 1025a8e:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 1025a92:	e8 09 4a 00 00 	call	18953 <_runtime.printlock>
 1025a97:	48 8d 05 7f f9 04 00 	lea	rax, [rip + 326015]
 1025a9e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025aa2:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1025aab:	e8 30 53 00 00 	call	21296 <_runtime.printstring>
 1025ab0:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1025ab4:	f7 d8 	neg	eax
 1025ab6:	48 63 c0 	movsxd	rax, eax
 1025ab9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025abd:	e8 5e 51 00 00 	call	20830 <_runtime.printint>
 1025ac2:	e8 69 4c 00 00 	call	19561 <_runtime.printnl>
 1025ac7:	e8 54 4a 00 00 	call	19028 <_runtime.printunlock>
 1025acc:	48 8d 05 65 eb 04 00 	lea	rax, [rip + 322405]
 1025ad3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025ad7:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1025ae0:	e8 7b 32 00 00 	call	12923 <_runtime.throw>
 1025ae5:	89 4c 24 40 	mov	dword ptr [rsp + 64], ecx
 1025ae9:	e8 b2 49 00 00 	call	18866 <_runtime.printlock>
 1025aee:	48 8d 05 ec f3 04 00 	lea	rax, [rip + 324588]
 1025af5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025af9:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 1025b02:	e8 d9 52 00 00 	call	21209 <_runtime.printstring>
 1025b07:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 1025b0b:	f7 d8 	neg	eax
 1025b0d:	48 63 c0 	movsxd	rax, eax
 1025b10:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025b14:	e8 07 51 00 00 	call	20743 <_runtime.printint>
 1025b19:	e8 12 4c 00 00 	call	19474 <_runtime.printnl>
 1025b1e:	e8 fd 49 00 00 	call	18941 <_runtime.printunlock>
 1025b23:	48 8d 05 be e7 04 00 	lea	rax, [rip + 321470]
 1025b2a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025b2e:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1025b37:	e8 24 32 00 00 	call	12836 <_runtime.throw>
 1025b3c:	89 44 24 44 	mov	dword ptr [rsp + 68], eax
 1025b40:	e8 5b 49 00 00 	call	18779 <_runtime.printlock>
 1025b45:	48 8d 05 ed f8 04 00 	lea	rax, [rip + 325869]
 1025b4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025b50:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1025b59:	e8 82 52 00 00 	call	21122 <_runtime.printstring>
 1025b5e:	8b 44 24 44 	mov	eax, dword ptr [rsp + 68]
 1025b62:	f7 d8 	neg	eax
 1025b64:	48 63 c0 	movsxd	rax, eax
 1025b67:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025b6b:	e8 b0 50 00 00 	call	20656 <_runtime.printint>
 1025b70:	e8 bb 4b 00 00 	call	19387 <_runtime.printnl>
 1025b75:	e8 a6 49 00 00 	call	18854 <_runtime.printunlock>
 1025b7a:	48 8d 05 79 f5 04 00 	lea	rax, [rip + 324985]
 1025b81:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025b85:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1025b8e:	e8 cd 31 00 00 	call	12749 <_runtime.throw>
 1025b93:	90 	nop
 1025b94:	e8 37 b0 02 00 	call	176183 <_runtime.morestack_noctxt>
 1025b99:	e9 02 fe ff ff 	jmp	-510 <_runtime.netpollinit>
 1025b9e:	cc 	int3
 1025b9f:	cc 	int3

_runtime.netpollBreak:
 1025ba0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1025ba9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1025bad:	0f 86 ac 00 00 00 	jbe	172 <_runtime.netpollBreak+0xbf>
 1025bb3:	48 83 ec 30 	sub	rsp, 48
 1025bb7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1025bbc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1025bc1:	c6 44 24 23 00 	mov	byte ptr [rsp + 35], 0
 1025bc6:	48 8b 05 a3 1c 0d 00 	mov	rax, qword ptr [rip + 859299]
 1025bcd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025bd1:	48 8d 44 24 23 	lea	rax, [rsp + 35]
 1025bd6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1025bdb:	c7 44 24 10 01 00 00 00 	mov	dword ptr [rsp + 16], 1
 1025be3:	e8 38 d6 01 00 	call	120376 <_runtime.write1>
 1025be8:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1025bec:	83 f8 01 	cmp	eax, 1
 1025bef:	74 0c 	je	12 <_runtime.netpollBreak+0x5d>
 1025bf1:	83 f8 dd 	cmp	eax, -35
 1025bf4:	74 07 	je	7 <_runtime.netpollBreak+0x5d>
 1025bf6:	83 f8 fc 	cmp	eax, -4
 1025bf9:	74 c6 	je	-58 <_runtime.netpollBreak+0x21>
 1025bfb:	eb 0a 	jmp	10 <_runtime.netpollBreak+0x67>
 1025bfd:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1025c02:	48 83 c4 30 	add	rsp, 48
 1025c06:	c3 	ret
 1025c07:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 1025c0b:	e8 90 48 00 00 	call	18576 <_runtime.printlock>
 1025c10:	48 8d 05 d3 0b 05 00 	lea	rax, [rip + 330707]
 1025c17:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025c1b:	48 c7 44 24 08 28 00 00 00 	mov	qword ptr [rsp + 8], 40
 1025c24:	e8 b7 51 00 00 	call	20919 <_runtime.printstring>
 1025c29:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 1025c2d:	f7 d8 	neg	eax
 1025c2f:	48 63 c0 	movsxd	rax, eax
 1025c32:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025c36:	e8 e5 4f 00 00 	call	20453 <_runtime.printint>
 1025c3b:	e8 f0 4a 00 00 	call	19184 <_runtime.printnl>
 1025c40:	e8 db 48 00 00 	call	18651 <_runtime.printunlock>
 1025c45:	48 8d 05 93 04 05 00 	lea	rax, [rip + 328851]
 1025c4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025c50:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 1025c59:	e8 02 31 00 00 	call	12546 <_runtime.throw>
 1025c5e:	90 	nop
 1025c5f:	e8 6c af 02 00 	call	175980 <_runtime.morestack_noctxt>
 1025c64:	e9 37 ff ff ff 	jmp	-201 <_runtime.netpollBreak>
 1025c69:	cc 	int3
 1025c6a:	cc 	int3
 1025c6b:	cc 	int3
 1025c6c:	cc 	int3
 1025c6d:	cc 	int3
 1025c6e:	cc 	int3
 1025c6f:	cc 	int3

_runtime.netpoll:
 1025c70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1025c79:	48 8d 84 24 00 f8 ff ff 	lea	rax, [rsp - 2048]
 1025c81:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1025c85:	0f 86 79 03 00 00 	jbe	889 <_runtime.netpoll+0x394>
 1025c8b:	48 81 ec 80 08 00 00 	sub	rsp, 2176
 1025c92:	48 89 ac 24 78 08 00 00 	mov	qword ptr [rsp + 2168], rbp
 1025c9a:	48 8d ac 24 78 08 00 00 	lea	rbp, [rsp + 2168]
 1025ca2:	83 3d bb 54 0a 00 ff 	cmp	dword ptr [rip + 677051], -1
 1025ca9:	0f 84 57 02 00 00 	je	599 <_runtime.netpoll+0x296>
 1025caf:	0f 57 c0 	xorps	xmm0, xmm0
 1025cb2:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1025cb7:	48 8b 94 24 88 08 00 00 	mov	rdx, qword ptr [rsp + 2184]
 1025cbf:	48 85 d2 	test	rdx, rdx
 1025cc2:	0f 8d dd 01 00 00 	jge	477 <_runtime.netpoll+0x235>
 1025cc8:	31 c0 	xor	eax, eax
 1025cca:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1025ccf:	48 8d 7c 24 78 	lea	rdi, [rsp + 120]
 1025cd4:	b9 00 01 00 00 	mov	ecx, 256
 1025cd9:	48 89 c3 	mov	rbx, rax
 1025cdc:	31 c0 	xor	eax, eax
 1025cde:	f3 48 ab 	rep		stosq	qword ptr es:[rdi], rax
 1025ce1:	eb 05 	jmp	5 <_runtime.netpoll+0x78>
 1025ce3:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1025ce8:	8b 05 76 54 0a 00 	mov	eax, dword ptr [rip + 676982]
 1025cee:	89 04 24 	mov	dword ptr [rsp], eax
 1025cf1:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1025cfa:	c7 44 24 10 00 00 00 00 	mov	dword ptr [rsp + 16], 0
 1025d02:	48 8d 44 24 78 	lea	rax, [rsp + 120]
 1025d07:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1025d0c:	c7 44 24 20 40 00 00 00 	mov	dword ptr [rsp + 32], 64
 1025d14:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1025d19:	e8 02 d9 01 00 	call	121090 <_runtime.kevent>
 1025d1e:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 1025d22:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 1025d26:	85 c0 	test	eax, eax
 1025d28:	7d 32 	jge	50 <_runtime.netpoll+0xec>
 1025d2a:	83 f8 fc 	cmp	eax, -4
 1025d2d:	0f 85 54 02 00 00 	jne	596 <_runtime.netpoll+0x317>
 1025d33:	48 8b 84 24 88 08 00 00 	mov	rax, qword ptr [rsp + 2184]
 1025d3b:	48 85 c0 	test	rax, rax
 1025d3e:	7e a3 	jle	-93 <_runtime.netpoll+0x73>
 1025d40:	48 c7 84 24 90 08 00 00 00 00 00 00 	mov	qword ptr [rsp + 2192], 0
 1025d4c:	48 8b ac 24 78 08 00 00 	mov	rbp, qword ptr [rsp + 2168]
 1025d54:	48 81 c4 80 08 00 00 	add	rsp, 2176
 1025d5b:	c3 	ret
 1025d5c:	48 c7 44 24 40 00 00 00 00 	mov	qword ptr [rsp + 64], 0
 1025d65:	48 8b 94 24 88 08 00 00 	mov	rdx, qword ptr [rsp + 2184]
 1025d6d:	31 c9 	xor	ecx, ecx
 1025d6f:	eb 04 	jmp	4 <_runtime.netpoll+0x105>
 1025d71:	48 8d 4b 01 	lea	rcx, [rbx + 1]
 1025d75:	48 63 d8 	movsxd	rbx, eax
 1025d78:	48 39 d9 	cmp	rcx, rbx
 1025d7b:	0f 8d 07 01 00 00 	jge	263 <_runtime.netpoll+0x218>
 1025d81:	48 83 f9 40 	cmp	rcx, 64
 1025d85:	0f 83 ef 01 00 00 	jae	495 <_runtime.netpoll+0x30a>
 1025d8b:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1025d90:	48 89 cb 	mov	rbx, rcx
 1025d93:	48 c1 e1 05 	shl	rcx, 5
 1025d97:	48 8b 74 0c 78 	mov	rsi, qword ptr [rsp + rcx + 120]
 1025d9c:	48 39 35 c5 1a 0d 00 	cmp	qword ptr [rip + 858821], rsi
 1025da3:	75 56 	jne	86 <_runtime.netpoll+0x18b>
 1025da5:	0f b7 b4 0c 80 00 00 00 	movzx	esi, word ptr [rsp + rcx + 128]
 1025dad:	66 83 fe ff 	cmp	si, -1
 1025db1:	0f 85 6b 01 00 00 	jne	363 <_runtime.netpoll+0x2b2>
 1025db7:	48 85 d2 	test	rdx, rdx
 1025dba:	74 b5 	je	-75 <_runtime.netpoll+0x101>
 1025dbc:	0f 57 c0 	xorps	xmm0, xmm0
 1025dbf:	0f 11 44 24 60 	movups	xmmword ptr [rsp + 96], xmm0
 1025dc4:	48 8b 05 9d 1a 0d 00 	mov	rax, qword ptr [rip + 858781]
 1025dcb:	89 04 24 	mov	dword ptr [rsp], eax
 1025dce:	48 8d 44 24 60 	lea	rax, [rsp + 96]
 1025dd3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1025dd8:	c7 44 24 10 10 00 00 00 	mov	dword ptr [rsp + 16], 16
 1025de0:	e8 9b d2 01 00 	call	119451 <_runtime.read>
 1025de5:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1025de9:	48 8b 94 24 88 08 00 00 	mov	rdx, qword ptr [rsp + 2184]
 1025df1:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1025df6:	e9 76 ff ff ff 	jmp	-138 <_runtime.netpoll+0x101>
 1025dfb:	0f b7 b4 0c 80 00 00 00 	movzx	esi, word ptr [rsp + rcx + 128]
 1025e03:	66 83 fe fe 	cmp	si, -2
 1025e07:	75 59 	jne	89 <_runtime.netpoll+0x1f2>
 1025e09:	be 77 00 00 00 	mov	esi, 119
 1025e0e:	85 f6 	test	esi, esi
 1025e10:	0f 84 5b ff ff ff 	je	-165 <_runtime.netpoll+0x101>
 1025e16:	48 8b bc 0c 90 00 00 00 	mov	rdi, qword ptr [rsp + rcx + 144]
 1025e1e:	c6 47 19 00 	mov	byte ptr [rdi + 25], 0
 1025e22:	0f b7 8c 0c 82 00 00 00 	movzx	ecx, word ptr [rsp + rcx + 130]
 1025e2a:	66 81 f9 00 40 	cmp	cx, 16384
 1025e2f:	75 04 	jne	4 <_runtime.netpoll+0x1c5>
 1025e31:	c6 47 19 01 	mov	byte ptr [rdi + 25], 1
 1025e35:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 1025e3a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025e3e:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1025e43:	89 74 24 10 	mov	dword ptr [rsp + 16], esi
 1025e47:	e8 c4 f9 ff ff 	call	-1596 <_runtime.netpollready>
 1025e4c:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1025e50:	48 8b 94 24 88 08 00 00 	mov	rdx, qword ptr [rsp + 2184]
 1025e58:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1025e5d:	e9 0f ff ff ff 	jmp	-241 <_runtime.netpoll+0x101>
 1025e62:	66 83 fe ff 	cmp	si, -1
 1025e66:	75 1c 	jne	28 <_runtime.netpoll+0x214>
 1025e68:	0f b7 bc 0c 82 00 00 00 	movzx	edi, word ptr [rsp + rcx + 130]
 1025e70:	66 f7 c7 00 80 	test	di, 32768
 1025e75:	be 72 00 00 00 	mov	esi, 114
 1025e7a:	bf e9 00 00 00 	mov	edi, 233
 1025e7f:	0f 45 f7 	cmovne	esi, edi
 1025e82:	eb 8a 	jmp	-118 <_runtime.netpoll+0x19e>
 1025e84:	31 f6 	xor	esi, esi
 1025e86:	eb 86 	jmp	-122 <_runtime.netpoll+0x19e>
 1025e88:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1025e8d:	48 89 84 24 90 08 00 00 	mov	qword ptr [rsp + 2192], rax
 1025e95:	48 8b ac 24 78 08 00 00 	mov	rbp, qword ptr [rsp + 2168]
 1025e9d:	48 81 c4 80 08 00 00 	add	rsp, 2176
 1025ea4:	c3 	ret
 1025ea5:	75 0a 	jne	10 <_runtime.netpoll+0x241>
 1025ea7:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1025eac:	e9 19 fe ff ff 	jmp	-487 <_runtime.netpoll+0x5a>
 1025eb1:	90 	nop
 1025eb2:	48 b8 cc 52 5a 9b a0 2f b8 44 	movabs	rax, 4951760157141521100
 1025ebc:	48 89 d1 	mov	rcx, rdx
 1025ebf:	48 f7 ea 	imul	rdx
 1025ec2:	48 c1 fa 1c 	sar	rdx, 28
 1025ec6:	48 89 cb 	mov	rbx, rcx
 1025ec9:	48 c1 f9 3f 	sar	rcx, 63
 1025ecd:	48 29 ca 	sub	rdx, rcx
 1025ed0:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 1025ed5:	48 69 f2 00 ca 9a 3b 	imul	rsi, rdx, 1000000000
 1025edc:	49 89 d8 	mov	r8, rbx
 1025edf:	48 29 f3 	sub	rbx, rsi
 1025ee2:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1025ee7:	48 81 fa 40 42 0f 00 	cmp	rdx, 1000000
 1025eee:	7e 09 	jle	9 <_runtime.netpoll+0x289>
 1025ef0:	48 c7 44 24 50 40 42 0f 00 	mov	qword ptr [rsp + 80], 1000000
 1025ef9:	4c 89 c2 	mov	rdx, r8
 1025efc:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1025f01:	e9 c4 fd ff ff 	jmp	-572 <_runtime.netpoll+0x5a>
 1025f06:	48 c7 84 24 90 08 00 00 00 00 00 00 	mov	qword ptr [rsp + 2192], 0
 1025f12:	48 8b ac 24 78 08 00 00 	mov	rbp, qword ptr [rsp + 2168]
 1025f1a:	48 81 c4 80 08 00 00 	add	rsp, 2176
 1025f21:	c3 	ret
 1025f22:	66 89 74 24 3a 	mov	word ptr [rsp + 58], si
 1025f27:	e8 74 45 00 00 	call	17780 <_runtime.printlock>
 1025f2c:	48 8d 05 da 05 05 00 	lea	rax, [rip + 329178]
 1025f33:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025f37:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 1025f40:	e8 9b 4e 00 00 	call	20123 <_runtime.printstring>
 1025f45:	0f b7 44 24 3a 	movzx	eax, word ptr [rsp + 58]
 1025f4a:	48 0f bf c0 	movsx	rax, ax
 1025f4e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025f52:	e8 c9 4c 00 00 	call	19657 <_runtime.printint>
 1025f57:	e8 d4 47 00 00 	call	18388 <_runtime.printnl>
 1025f5c:	e8 bf 45 00 00 	call	17855 <_runtime.printunlock>
 1025f61:	48 8d 05 66 15 05 00 	lea	rax, [rip + 333158]
 1025f68:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025f6c:	48 c7 44 24 08 39 00 00 00 	mov	qword ptr [rsp + 8], 57
 1025f75:	e8 e6 2d 00 00 	call	11750 <_runtime.throw>
 1025f7a:	48 89 c8 	mov	rax, rcx
 1025f7d:	b9 40 00 00 00 	mov	ecx, 64
 1025f82:	e8 c9 d3 02 00 	call	185289 <_runtime.panicIndex>
 1025f87:	e8 14 45 00 00 	call	17684 <_runtime.printlock>
 1025f8c:	48 8d 05 bb e6 04 00 	lea	rax, [rip + 321211]
 1025f93:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025f97:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1025fa0:	e8 3b 4e 00 00 	call	20027 <_runtime.printstring>
 1025fa5:	48 63 05 b8 51 0a 00 	movsxd	rax, dword ptr [rip + 676280]
 1025fac:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025fb0:	e8 6b 4c 00 00 	call	19563 <_runtime.printint>
 1025fb5:	48 8d 05 92 d6 04 00 	lea	rax, [rip + 317074]
 1025fbc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025fc0:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1025fc9:	e8 12 4e 00 00 	call	19986 <_runtime.printstring>
 1025fce:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1025fd2:	f7 d8 	neg	eax
 1025fd4:	48 63 c0 	movsxd	rax, eax
 1025fd7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025fdb:	e8 40 4c 00 00 	call	19520 <_runtime.printint>
 1025fe0:	e8 4b 47 00 00 	call	18251 <_runtime.printnl>
 1025fe5:	e8 36 45 00 00 	call	17718 <_runtime.printunlock>
 1025fea:	48 8d 05 5e e9 04 00 	lea	rax, [rip + 321886]
 1025ff1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1025ff5:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1025ffe:	e8 5d 2d 00 00 	call	11613 <_runtime.throw>
 1026003:	90 	nop
 1026004:	e8 c7 ab 02 00 	call	175047 <_runtime.morestack_noctxt>
 1026009:	e9 62 fc ff ff 	jmp	-926 <_runtime.netpoll>
 102600e:	cc 	int3
 102600f:	cc 	int3

_runtime.semacreate:
 1026010:	48 83 ec 20 	sub	rsp, 32
 1026014:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1026019:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102601e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1026023:	80 b8 40 03 00 00 00 	cmp	byte ptr [rax + 832], 0
 102602a:	74 0a 	je	10 <_runtime.semacreate+0x26>
 102602c:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1026031:	48 83 c4 20 	add	rsp, 32
 1026035:	c3 	ret
 1026036:	c6 80 40 03 00 00 01 	mov	byte ptr [rax + 832], 1
 102603d:	48 8d 88 48 03 00 00 	lea	rcx, [rax + 840]
 1026044:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1026048:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1026051:	e8 1a d6 01 00 	call	120346 <_runtime.pthread_mutex_init>
 1026056:	83 7c 24 10 00 	cmp	dword ptr [rsp + 16], 0
 102605b:	75 47 	jne	71 <_runtime.semacreate+0x94>
 102605d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1026062:	48 05 88 03 00 00 	add	rax, 904
 1026068:	48 89 04 24 	mov	qword ptr [rsp], rax
 102606c:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1026075:	e8 e6 d6 01 00 	call	120550 <_runtime.pthread_cond_init>
 102607a:	83 7c 24 10 00 	cmp	dword ptr [rsp + 16], 0
 102607f:	75 0a 	jne	10 <_runtime.semacreate+0x7b>
 1026081:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1026086:	48 83 c4 20 	add	rsp, 32
 102608a:	c3 	ret
 102608b:	48 8d 05 9e dc 04 00 	lea	rax, [rip + 318622]
 1026092:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026096:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 102609f:	e8 bc 2c 00 00 	call	11452 <_runtime.throw>
 10260a4:	48 8d 05 14 de 04 00 	lea	rax, [rip + 318996]
 10260ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10260af:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 10260b8:	e8 a3 2c 00 00 	call	11427 <_runtime.throw>
 10260bd:	90 	nop
 10260be:	cc 	int3
 10260bf:	cc 	int3

_runtime.semasleep:
 10260c0:	48 83 ec 50 	sub	rsp, 80
 10260c4:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 10260c9:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 10260ce:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10260d3:	48 85 c0 	test	rax, rax
 10260d6:	0f 8d 65 01 00 00 	jge	357 <_runtime.semasleep+0x181>
 10260dc:	31 c9 	xor	ecx, ecx
 10260de:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10260e3:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10260ec:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10260f0:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10260f5:	84 00 	test	byte ptr [rax], al
 10260f7:	48 8d 90 48 03 00 00 	lea	rdx, [rax + 840]
 10260fe:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1026103:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1026107:	e8 b4 d5 01 00 	call	120244 <_runtime.pthread_mutex_lock>
 102610c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1026111:	48 8b 88 b8 03 00 00 	mov	rcx, qword ptr [rax + 952]
 1026118:	48 85 c9 	test	rcx, rcx
 102611b:	0f 8f f6 00 00 00 	jg	246 <_runtime.semasleep+0x157>
 1026121:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1026126:	48 85 c9 	test	rcx, rcx
 1026129:	7d 1c 	jge	28 <_runtime.semasleep+0x87>
 102612b:	48 8d 88 88 03 00 00 	lea	rcx, [rax + 904]
 1026132:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1026136:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102613b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026140:	e8 6b d6 01 00 	call	120427 <_runtime.pthread_cond_wait>
 1026145:	eb c5 	jmp	-59 <_runtime.semasleep+0x4c>
 1026147:	e8 74 d1 01 00 	call	119156 <_runtime.nanotime1>
 102614c:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1026150:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1026155:	48 29 c8 	sub	rax, rcx
 1026158:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 102615d:	48 39 d0 	cmp	rax, rdx
 1026160:	0f 8d 91 00 00 00 	jge	145 <_runtime.semasleep+0x137>
 1026166:	0f 57 c0 	xorps	xmm0, xmm0
 1026169:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 102616e:	48 29 c2 	sub	rdx, rax
 1026171:	48 b8 cc 52 5a 9b a0 2f b8 44 	movabs	rax, 4951760157141521100
 102617b:	48 89 d3 	mov	rbx, rdx
 102617e:	48 f7 ea 	imul	rdx
 1026181:	48 c1 fa 1c 	sar	rdx, 28
 1026185:	48 89 de 	mov	rsi, rbx
 1026188:	48 c1 fb 3f 	sar	rbx, 63
 102618c:	48 29 da 	sub	rdx, rbx
 102618f:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1026194:	48 69 d2 00 ca 9a 3b 	imul	rdx, rdx, 1000000000
 102619b:	48 29 d6 	sub	rsi, rdx
 102619e:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 10261a3:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10261a8:	48 8d 9a 88 03 00 00 	lea	rbx, [rdx + 904]
 10261af:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10261b3:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 10261b8:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10261bd:	48 8d 74 24 28 	lea	rsi, [rsp + 40]
 10261c2:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10261c7:	e8 34 d6 01 00 	call	120372 <_runtime.pthread_cond_timedwait_relative_np>
 10261cc:	83 7c 24 18 3c 	cmp	dword ptr [rsp + 24], 60
 10261d1:	0f 85 35 ff ff ff 	jne	-203 <_runtime.semasleep+0x4c>
 10261d7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10261dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10261e0:	e8 2b d5 01 00 	call	120107 <_runtime.pthread_mutex_unlock>
 10261e5:	c7 44 24 60 ff ff ff ff 	mov	dword ptr [rsp + 96], 4294967295
 10261ed:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10261f2:	48 83 c4 50 	add	rsp, 80
 10261f6:	c3 	ret
 10261f7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10261fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026200:	e8 0b d5 01 00 	call	120075 <_runtime.pthread_mutex_unlock>
 1026205:	c7 44 24 60 ff ff ff ff 	mov	dword ptr [rsp + 96], 4294967295
 102620d:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1026212:	48 83 c4 50 	add	rsp, 80
 1026216:	c3 	ret
 1026217:	48 ff c9 	dec	rcx
 102621a:	48 89 88 b8 03 00 00 	mov	qword ptr [rax + 952], rcx
 1026221:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026226:	48 89 04 24 	mov	qword ptr [rsp], rax
 102622a:	e8 e1 d4 01 00 	call	120033 <_runtime.pthread_mutex_unlock>
 102622f:	c7 44 24 60 00 00 00 00 	mov	dword ptr [rsp + 96], 0
 1026237:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 102623c:	48 83 c4 50 	add	rsp, 80
 1026240:	c3 	ret
 1026241:	e8 7a d0 01 00 	call	118906 <_runtime.nanotime1>
 1026246:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 102624a:	e9 8f fe ff ff 	jmp	-369 <_runtime.semasleep+0x1e>
 102624f:	cc 	int3

_runtime.semawakeup:
 1026250:	48 83 ec 20 	sub	rsp, 32
 1026254:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1026259:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102625e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1026263:	84 00 	test	byte ptr [rax], al
 1026265:	48 8d 88 48 03 00 00 	lea	rcx, [rax + 840]
 102626c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1026271:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1026275:	e8 46 d4 01 00 	call	119878 <_runtime.pthread_mutex_lock>
 102627a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102627f:	48 8b 88 b8 03 00 00 	mov	rcx, qword ptr [rax + 952]
 1026286:	48 ff c1 	inc	rcx
 1026289:	48 89 88 b8 03 00 00 	mov	qword ptr [rax + 952], rcx
 1026290:	48 85 c9 	test	rcx, rcx
 1026293:	7f 18 	jg	24 <_runtime.semawakeup+0x5d>
 1026295:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102629a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102629e:	e8 6d d4 01 00 	call	119917 <_runtime.pthread_mutex_unlock>
 10262a3:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10262a8:	48 83 c4 20 	add	rsp, 32
 10262ac:	c3 	ret
 10262ad:	48 05 88 03 00 00 	add	rax, 904
 10262b3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10262b7:	e8 94 d5 01 00 	call	120212 <_runtime.pthread_cond_signal>
 10262bc:	eb d7 	jmp	-41 <_runtime.semawakeup+0x45>
 10262be:	cc 	int3
 10262bf:	cc 	int3

_runtime.osinit:
 10262c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10262c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10262cd:	76 36 	jbe	54 <_runtime.osinit+0x45>
 10262cf:	48 83 ec 10 	sub	rsp, 16
 10262d3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 10262d8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 10262dd:	e8 2e 00 00 00 	call	46 <_runtime.getncpu>
 10262e2:	8b 04 24 	mov	eax, dword ptr [rsp]
 10262e5:	89 05 bd 14 0d 00 	mov	dword ptr [rip + 857277], eax
 10262eb:	e8 e0 00 00 00 	call	224 <_runtime.getPageSize>
 10262f0:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10262f4:	48 89 05 9d 15 0d 00 	mov	qword ptr [rip + 857501], rax
 10262fb:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1026300:	48 83 c4 10 	add	rsp, 16
 1026304:	c3 	ret
 1026305:	e8 c6 a8 02 00 	call	174278 <_runtime.morestack_noctxt>
 102630a:	eb b4 	jmp	-76 <_runtime.osinit>
 102630c:	cc 	int3
 102630d:	cc 	int3
 102630e:	cc 	int3
 102630f:	cc 	int3

_runtime.getncpu:
 1026310:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026319:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102631d:	0f 86 98 00 00 00 	jbe	152 <_runtime.getncpu+0xab>
 1026323:	48 83 ec 58 	sub	rsp, 88
 1026327:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 102632c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1026331:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 102633a:	48 b8 06 00 00 00 03 00 00 00 	movabs	rax, 12884901894
 1026344:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1026349:	c7 44 24 3c 00 00 00 00 	mov	dword ptr [rsp + 60], 0
 1026351:	48 c7 44 24 40 04 00 00 00 	mov	qword ptr [rsp + 64], 4
 102635a:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 102635f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026363:	c7 44 24 08 02 00 00 00 	mov	dword ptr [rsp + 8], 2
 102636b:	48 8d 44 24 3c 	lea	rax, [rsp + 60]
 1026370:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1026375:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 102637a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102637f:	0f 57 c0 	xorps	xmm0, xmm0
 1026382:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026387:	e8 a4 d1 01 00 	call	119204 <_runtime.sysctl>
 102638c:	83 7c 24 30 00 	cmp	dword ptr [rsp + 48], 0
 1026391:	7c 08 	jl	8 <_runtime.getncpu+0x8b>
 1026393:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1026397:	85 c0 	test	eax, eax
 1026399:	7f 12 	jg	18 <_runtime.getncpu+0x9d>
 102639b:	c7 44 24 60 01 00 00 00 	mov	dword ptr [rsp + 96], 1
 10263a3:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 10263a8:	48 83 c4 58 	add	rsp, 88
 10263ac:	c3 	ret
 10263ad:	89 44 24 60 	mov	dword ptr [rsp + 96], eax
 10263b1:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 10263b6:	48 83 c4 58 	add	rsp, 88
 10263ba:	c3 	ret
 10263bb:	e8 10 a8 02 00 	call	174096 <_runtime.morestack_noctxt>
 10263c0:	e9 4b ff ff ff 	jmp	-181 <_runtime.getncpu>
 10263c5:	cc 	int3
 10263c6:	cc 	int3
 10263c7:	cc 	int3
 10263c8:	cc 	int3
 10263c9:	cc 	int3
 10263ca:	cc 	int3
 10263cb:	cc 	int3
 10263cc:	cc 	int3
 10263cd:	cc 	int3
 10263ce:	cc 	int3
 10263cf:	cc 	int3

_runtime.getPageSize:
 10263d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10263d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10263dd:	0f 86 9a 00 00 00 	jbe	154 <_runtime.getPageSize+0xad>
 10263e3:	48 83 ec 58 	sub	rsp, 88
 10263e7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 10263ec:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 10263f1:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 10263fa:	48 b8 06 00 00 00 07 00 00 00 	movabs	rax, 30064771078
 1026404:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1026409:	c7 44 24 3c 00 00 00 00 	mov	dword ptr [rsp + 60], 0
 1026411:	48 c7 44 24 40 04 00 00 00 	mov	qword ptr [rsp + 64], 4
 102641a:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 102641f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026423:	c7 44 24 08 02 00 00 00 	mov	dword ptr [rsp + 8], 2
 102642b:	48 8d 44 24 3c 	lea	rax, [rsp + 60]
 1026430:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1026435:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 102643a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102643f:	0f 57 c0 	xorps	xmm0, xmm0
 1026442:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026447:	e8 e4 d0 01 00 	call	119012 <_runtime.sysctl>
 102644c:	83 7c 24 30 00 	cmp	dword ptr [rsp + 48], 0
 1026451:	7c 08 	jl	8 <_runtime.getPageSize+0x8b>
 1026453:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1026457:	85 c0 	test	eax, eax
 1026459:	7f 13 	jg	19 <_runtime.getPageSize+0x9e>
 102645b:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 1026464:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1026469:	48 83 c4 58 	add	rsp, 88
 102646d:	c3 	ret
 102646e:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1026473:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1026478:	48 83 c4 58 	add	rsp, 88
 102647c:	c3 	ret
 102647d:	e8 4e a7 02 00 	call	173902 <_runtime.morestack_noctxt>
 1026482:	e9 49 ff ff ff 	jmp	-183 <_runtime.getPageSize>
 1026487:	cc 	int3
 1026488:	cc 	int3
 1026489:	cc 	int3
 102648a:	cc 	int3
 102648b:	cc 	int3
 102648c:	cc 	int3
 102648d:	cc 	int3
 102648e:	cc 	int3
 102648f:	cc 	int3

_runtime.getRandomData:
 1026490:	48 83 ec 38 	sub	rsp, 56
 1026494:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1026499:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102649e:	48 8b 15 8b 64 0a 00 	mov	rdx, qword ptr [rip + 681099]
 10264a5:	48 8b 0d 8c 64 0a 00 	mov	rcx, qword ptr [rip + 681100]
 10264ac:	48 85 c9 	test	rcx, rcx
 10264af:	0f 86 8d 00 00 00 	jbe	141 <_runtime.getRandomData+0xb2>
 10264b5:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10264b9:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10264c2:	e8 a9 cd 01 00 	call	118185 <_runtime.open>
 10264c7:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10264cb:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10264d0:	48 85 c9 	test	rcx, rcx
 10264d3:	76 66 	jbe	102 <_runtime.getRandomData+0xab>
 10264d5:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 10264d9:	89 04 24 	mov	dword ptr [rsp], eax
 10264dc:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10264e1:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10264e6:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 10264ea:	e8 91 cb 01 00 	call	117649 <_runtime.read>
 10264ef:	48 63 44 24 18 	movsxd	rax, dword ptr [rsp + 24]
 10264f4:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10264f9:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 10264fd:	89 0c 24 	mov	dword ptr [rsp], ecx
 1026500:	e8 4b cc 01 00 	call	117835 <_runtime.closefd>
 1026505:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102650a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102650e:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026513:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026518:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102651d:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1026522:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1026527:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102652c:	e8 6f 29 01 00 	call	76143 <_runtime.extendRandom>
 1026531:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1026536:	48 83 c4 38 	add	rsp, 56
 102653a:	c3 	ret
 102653b:	31 c0 	xor	eax, eax
 102653d:	e8 0e ce 02 00 	call	183822 <_runtime.panicIndex>
 1026542:	31 c0 	xor	eax, eax
 1026544:	e8 07 ce 02 00 	call	183815 <_runtime.panicIndex>
 1026549:	90 	nop
 102654a:	cc 	int3
 102654b:	cc 	int3
 102654c:	cc 	int3
 102654d:	cc 	int3
 102654e:	cc 	int3
 102654f:	cc 	int3

_runtime.newosproc:
 1026550:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026559:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102655d:	0f 86 35 02 00 00 	jbe	565 <_runtime.newosproc+0x248>
 1026563:	48 83 ec 78 	sub	rsp, 120
 1026567:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 102656c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 1026571:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1026579:	48 8b 00 	mov	rax, qword ptr [rax]
 102657c:	84 00 	test	byte ptr [rax], al
 102657e:	0f 57 c0 	xorps	xmm0, xmm0
 1026581:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 1026586:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 102658b:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1026590:	0f 11 44 24 60 	movups	xmmword ptr [rsp + 96], xmm0
 1026595:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 102659a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102659e:	e8 7d c7 01 00 	call	116605 <_runtime.pthread_attr_init>
 10265a3:	83 7c 24 08 00 	cmp	dword ptr [rsp + 8], 0
 10265a8:	74 39 	je	57 <_runtime.newosproc+0x93>
 10265aa:	48 8b 0d 47 63 0a 00 	mov	rcx, qword ptr [rip + 680775]
 10265b1:	48 8b 15 38 63 0a 00 	mov	rdx, qword ptr [rip + 680760]
 10265b8:	48 85 c9 	test	rcx, rcx
 10265bb:	0f 86 cf 01 00 00 	jbe	463 <_runtime.newosproc+0x240>
 10265c1:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 10265c9:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10265ce:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 10265d2:	e8 49 cc 01 00 	call	117833 <_runtime.write1>
 10265d7:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 10265de:	e8 bd cb 01 00 	call	117693 <_runtime.exit>
 10265e3:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 10265ec:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 10265f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10265f5:	48 8d 4c 24 28 	lea	rcx, [rsp + 40]
 10265fa:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10265ff:	e8 6c c7 01 00 	call	116588 <_runtime.pthread_attr_getstacksize>
 1026604:	83 7c 24 10 00 	cmp	dword ptr [rsp + 16], 0
 1026609:	74 39 	je	57 <_runtime.newosproc+0xf4>
 102660b:	48 8b 0d e6 62 0a 00 	mov	rcx, qword ptr [rip + 680678]
 1026612:	48 8b 15 d7 62 0a 00 	mov	rdx, qword ptr [rip + 680663]
 1026619:	48 85 c9 	test	rcx, rcx
 102661c:	0f 86 67 01 00 00 	jbe	359 <_runtime.newosproc+0x239>
 1026622:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 102662a:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102662f:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1026633:	e8 e8 cb 01 00 	call	117736 <_runtime.write1>
 1026638:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102663f:	e8 5c cb 01 00 	call	117596 <_runtime.exit>
 1026644:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 102664c:	48 8b 00 	mov	rax, qword ptr [rax]
 102664f:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1026654:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1026658:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 102665d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026661:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 102666a:	e8 51 c7 01 00 	call	116561 <_runtime.pthread_attr_setdetachstate>
 102666f:	83 7c 24 10 00 	cmp	dword ptr [rsp + 16], 0
 1026674:	74 39 	je	57 <_runtime.newosproc+0x15f>
 1026676:	48 8b 0d 7b 62 0a 00 	mov	rcx, qword ptr [rip + 680571]
 102667d:	48 8b 15 6c 62 0a 00 	mov	rdx, qword ptr [rip + 680556]
 1026684:	48 85 c9 	test	rcx, rcx
 1026687:	0f 86 f5 00 00 00 	jbe	245 <_runtime.newosproc+0x232>
 102668d:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 1026695:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102669a:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 102669e:	e8 7d cb 01 00 	call	117629 <_runtime.write1>
 10266a3:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 10266aa:	e8 f1 ca 01 00 	call	117489 <_runtime.exit>
 10266af:	c7 44 24 20 00 00 00 00 	mov	dword ptr [rsp + 32], 0
 10266b7:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 10266be:	48 8d 05 a3 4a 0a 00 	lea	rax, [rip + 674467]
 10266c5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10266ca:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 10266cf:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10266d4:	e8 37 cd 01 00 	call	118071 <_runtime.sigprocmask>
 10266d9:	48 8d 05 38 12 05 00 	lea	rax, [rip + 332344]
 10266e0:	84 00 	test	byte ptr [rax], al
 10266e2:	48 8b 05 2f 12 05 00 	mov	rax, qword ptr [rip + 332335]
 10266e9:	48 8d 4c 24 30 	lea	rcx, [rsp + 48]
 10266ee:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10266f2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10266f7:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10266ff:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1026704:	e8 07 c7 01 00 	call	116487 <_runtime.pthread_create>
 1026709:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 102670d:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 1026711:	83 f8 00 	cmp	eax, 0
 1026714:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102671b:	48 8d 4c 24 20 	lea	rcx, [rsp + 32]
 1026720:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026725:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102672e:	e8 dd cc 01 00 	call	117981 <_runtime.sigprocmask>
 1026733:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 1026737:	83 f8 00 	cmp	eax, 0
 102673a:	74 35 	je	53 <_runtime.newosproc+0x221>
 102673c:	48 8b 15 ad 61 0a 00 	mov	rdx, qword ptr [rip + 680365]
 1026743:	48 8b 0d ae 61 0a 00 	mov	rcx, qword ptr [rip + 680366]
 102674a:	48 85 c9 	test	rcx, rcx
 102674d:	76 2c 	jbe	44 <_runtime.newosproc+0x22b>
 102674f:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 1026757:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102675c:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1026760:	e8 bb ca 01 00 	call	117435 <_runtime.write1>
 1026765:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102676c:	e8 2f ca 01 00 	call	117295 <_runtime.exit>
 1026771:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1026776:	48 83 c4 78 	add	rsp, 120
 102677a:	c3 	ret
 102677b:	31 c0 	xor	eax, eax
 102677d:	e8 ce cb 02 00 	call	183246 <_runtime.panicIndex>
 1026782:	31 c0 	xor	eax, eax
 1026784:	e8 c7 cb 02 00 	call	183239 <_runtime.panicIndex>
 1026789:	31 c0 	xor	eax, eax
 102678b:	e8 c0 cb 02 00 	call	183232 <_runtime.panicIndex>
 1026790:	31 c0 	xor	eax, eax
 1026792:	e8 b9 cb 02 00 	call	183225 <_runtime.panicIndex>
 1026797:	90 	nop
 1026798:	e8 33 a4 02 00 	call	173107 <_runtime.morestack_noctxt>
 102679d:	e9 ae fd ff ff 	jmp	-594 <_runtime.newosproc>
 10267a2:	cc 	int3
 10267a3:	cc 	int3
 10267a4:	cc 	int3
 10267a5:	cc 	int3
 10267a6:	cc 	int3
 10267a7:	cc 	int3
 10267a8:	cc 	int3
 10267a9:	cc 	int3
 10267aa:	cc 	int3
 10267ab:	cc 	int3
 10267ac:	cc 	int3
 10267ad:	cc 	int3
 10267ae:	cc 	int3
 10267af:	cc 	int3

_runtime.minit:
 10267b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10267b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10267bd:	76 3c 	jbe	60 <_runtime.minit+0x4b>
 10267bf:	48 83 ec 10 	sub	rsp, 16
 10267c3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 10267c8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 10267cd:	e8 6e 5e 01 00 	call	89710 <_runtime.minitSignalStack>
 10267d2:	e8 c9 5f 01 00 	call	90057 <_runtime.minitSignalMask>
 10267d7:	e8 c4 c6 01 00 	call	116420 <_runtime.pthread_self>
 10267dc:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10267e5:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10267e9:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 10267ed:	48 89 48 48 	mov	qword ptr [rax + 72], rcx
 10267f1:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10267f6:	48 83 c4 10 	add	rsp, 16
 10267fa:	c3 	ret
 10267fb:	e8 d0 a3 02 00 	call	173008 <_runtime.morestack_noctxt>
 1026800:	eb ae 	jmp	-82 <_runtime.minit>
 1026802:	cc 	int3
 1026803:	cc 	int3
 1026804:	cc 	int3
 1026805:	cc 	int3
 1026806:	cc 	int3
 1026807:	cc 	int3
 1026808:	cc 	int3
 1026809:	cc 	int3
 102680a:	cc 	int3
 102680b:	cc 	int3
 102680c:	cc 	int3
 102680d:	cc 	int3
 102680e:	cc 	int3
 102680f:	cc 	int3

_runtime.osyield:
 1026810:	48 83 ec 10 	sub	rsp, 16
 1026814:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1026819:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102681e:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1026825:	e8 b6 c9 01 00 	call	117174 <_runtime.usleep>
 102682a:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102682f:	48 83 c4 10 	add	rsp, 16
 1026833:	c3 	ret
 1026834:	cc 	int3
 1026835:	cc 	int3
 1026836:	cc 	int3
 1026837:	cc 	int3
 1026838:	cc 	int3
 1026839:	cc 	int3
 102683a:	cc 	int3
 102683b:	cc 	int3
 102683c:	cc 	int3
 102683d:	cc 	int3
 102683e:	cc 	int3
 102683f:	cc 	int3

_runtime.setsig:
 1026840:	48 83 ec 30 	sub	rsp, 48
 1026844:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1026849:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 102684e:	0f 57 c0 	xorps	xmm0, xmm0
 1026851:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1026856:	48 b8 ff ff ff ff 43 00 00 00 	movabs	rax, 292057776127
 1026860:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026865:	48 8d 05 cc 11 05 00 	lea	rax, [rip + 332236]
 102686c:	84 00 	test	byte ptr [rax], al
 102686e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026873:	48 39 05 be 11 05 00 	cmp	qword ptr [rip + 332222], rax
 102687a:	75 1a 	jne	26 <_runtime.setsig+0x56>
 102687c:	80 3d e7 0e 0d 00 00 	cmp	byte ptr [rip + 855783], 0
 1026883:	74 3f 	je	63 <_runtime.setsig+0x84>
 1026885:	48 8d 05 dc 0e 05 00 	lea	rax, [rip + 331484]
 102688c:	84 00 	test	byte ptr [rax], al
 102688e:	90 	nop
 102688f:	48 8b 05 d2 0e 05 00 	mov	rax, qword ptr [rip + 331474]
 1026896:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102689b:	8b 44 24 38 	mov	eax, dword ptr [rsp + 56]
 102689f:	89 04 24 	mov	dword ptr [rsp], eax
 10268a2:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 10268a7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10268ac:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10268b5:	e8 16 cb 01 00 	call	117526 <_runtime.sigaction>
 10268ba:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10268bf:	48 83 c4 30 	add	rsp, 48
 10268c3:	c3 	ret
 10268c4:	48 8d 0d 85 11 05 00 	lea	rcx, [rip + 332165]
 10268cb:	84 01 	test	byte ptr [rcx], al
 10268cd:	48 8b 05 7c 11 05 00 	mov	rax, qword ptr [rip + 332156]
 10268d4:	eb c0 	jmp	-64 <_runtime.setsig+0x56>
 10268d6:	cc 	int3
 10268d7:	cc 	int3
 10268d8:	cc 	int3
 10268d9:	cc 	int3
 10268da:	cc 	int3
 10268db:	cc 	int3
 10268dc:	cc 	int3
 10268dd:	cc 	int3
 10268de:	cc 	int3
 10268df:	cc 	int3

_runtime.setsigstack:
 10268e0:	48 83 ec 40 	sub	rsp, 64
 10268e4:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 10268e9:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10268ee:	0f 57 c0 	xorps	xmm0, xmm0
 10268f1:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 10268f6:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 10268fa:	89 04 24 	mov	dword ptr [rsp], eax
 10268fd:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1026906:	48 8d 4c 24 28 	lea	rcx, [rsp + 40]
 102690b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1026910:	e8 bb ca 01 00 	call	117435 <_runtime.sigaction>
 1026915:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102691a:	8b 4c 24 34 	mov	ecx, dword ptr [rsp + 52]
 102691e:	0f ba e1 00 	bt	ecx, 0
 1026922:	73 0a 	jae	10 <_runtime.setsigstack+0x4e>
 1026924:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1026929:	48 83 c4 40 	add	rsp, 64
 102692d:	c3 	ret
 102692e:	0f 57 c0 	xorps	xmm0, xmm0
 1026931:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1026936:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102693b:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 102693f:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 1026943:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 1026947:	83 c8 01 	or	eax, 1
 102694a:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 102694e:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 1026952:	89 04 24 	mov	dword ptr [rsp], eax
 1026955:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 102695a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102695f:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1026968:	e8 63 ca 01 00 	call	117347 <_runtime.sigaction>
 102696d:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1026972:	48 83 c4 40 	add	rsp, 64
 1026976:	c3 	ret
 1026977:	cc 	int3
 1026978:	cc 	int3
 1026979:	cc 	int3
 102697a:	cc 	int3
 102697b:	cc 	int3
 102697c:	cc 	int3
 102697d:	cc 	int3
 102697e:	cc 	int3
 102697f:	cc 	int3

_runtime.sysargs:
 1026980:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026989:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102698d:	0f 86 eb 00 00 00 	jbe	235 <_runtime.sysargs+0xfe>
 1026993:	48 83 ec 30 	sub	rsp, 48
 1026997:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 102699c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10269a1:	8b 44 24 38 	mov	eax, dword ptr [rsp + 56]
 10269a5:	ff c0 	inc	eax
 10269a7:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10269ac:	eb 02 	jmp	2 <_runtime.sysargs+0x30>
 10269ae:	ff c0 	inc	eax
 10269b0:	48 63 d0 	movsxd	rdx, eax
 10269b3:	48 8b 14 d1 	mov	rdx, qword ptr [rcx + 8*rdx]
 10269b7:	48 85 d2 	test	rdx, rdx
 10269ba:	75 f2 	jne	-14 <_runtime.sysargs+0x2e>
 10269bc:	ff c0 	inc	eax
 10269be:	48 63 c0 	movsxd	rax, eax
 10269c1:	48 8b 04 c1 	mov	rax, qword ptr [rcx + 8*rax]
 10269c5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10269ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 10269ce:	e8 5d a6 01 00 	call	108125 <_runtime.findnull>
 10269d3:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10269d8:	0f 57 c0 	xorps	xmm0, xmm0
 10269db:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10269e0:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10269e5:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10269ea:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10269ef:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10269f4:	48 89 05 cd 78 0a 00 	mov	qword ptr [rip + 686285], rax
 10269fb:	83 3d fe 0e 0d 00 00 	cmp	dword ptr [rip + 855806], 0
 1026a02:	75 63 	jne	99 <_runtime.sysargs+0xe7>
 1026a04:	48 89 0d b5 78 0a 00 	mov	qword ptr [rip + 686261], rcx
 1026a0b:	48 83 f8 10 	cmp	rax, 16
 1026a0f:	7e 3e 	jle	62 <_runtime.sysargs+0xcf>
 1026a11:	48 ba 65 78 65 63 75 74 61 62 	movabs	rdx, 7089075335985461349
 1026a1b:	48 39 11 	cmp	qword ptr [rcx], rdx
 1026a1e:	75 2f 	jne	47 <_runtime.sysargs+0xcf>
 1026a20:	48 ba 6c 65 5f 70 61 74 68 3d 	movabs	rdx, 4424914595737462124
 1026a2a:	48 39 51 08 	cmp	qword ptr [rcx + 8], rdx
 1026a2e:	75 1f 	jne	31 <_runtime.sysargs+0xcf>
 1026a30:	48 8d 50 f0 	lea	rdx, [rax - 16]
 1026a34:	48 89 15 8d 78 0a 00 	mov	qword ptr [rip + 686221], rdx
 1026a3b:	48 8d 41 10 	lea	rax, [rcx + 16]
 1026a3f:	83 3d ba 0e 0d 00 00 	cmp	dword ptr [rip + 855738], 0
 1026a46:	75 11 	jne	17 <_runtime.sysargs+0xd9>
 1026a48:	48 89 05 71 78 0a 00 	mov	qword ptr [rip + 686193], rax
 1026a4f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1026a54:	48 83 c4 30 	add	rsp, 48
 1026a58:	c3 	ret
 1026a59:	48 8d 3d 60 78 0a 00 	lea	rdi, [rip + 686176]
 1026a60:	e8 7b bf 02 00 	call	180091 <_runtime.gcWriteBarrier>
 1026a65:	eb e8 	jmp	-24 <_runtime.sysargs+0xcf>
 1026a67:	48 8d 3d 52 78 0a 00 	lea	rdi, [rip + 686162]
 1026a6e:	48 89 c2 	mov	rdx, rax
 1026a71:	48 89 c8 	mov	rax, rcx
 1026a74:	e8 67 bf 02 00 	call	180071 <_runtime.gcWriteBarrier>
 1026a79:	48 89 d0 	mov	rax, rdx
 1026a7c:	eb 8d 	jmp	-115 <_runtime.sysargs+0x8b>
 1026a7e:	e8 4d a1 02 00 	call	172365 <_runtime.morestack_noctxt>
 1026a83:	e9 f8 fe ff ff 	jmp	-264 <_runtime.sysargs>
 1026a88:	cc 	int3
 1026a89:	cc 	int3
 1026a8a:	cc 	int3
 1026a8b:	cc 	int3
 1026a8c:	cc 	int3
 1026a8d:	cc 	int3
 1026a8e:	cc 	int3
 1026a8f:	cc 	int3

_runtime.panicCheck1:
 1026a90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026a99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026a9d:	0f 86 c7 00 00 00 	jbe	199 <_runtime.panicCheck1+0xda>
 1026aa3:	48 83 ec 28 	sub	rsp, 40
 1026aa7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1026aac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1026ab1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1026ab6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026aba:	e8 b1 b0 01 00 	call	110769 <_runtime.findfunc>
 1026abf:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026ac4:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1026ac9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1026acd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026ad2:	e8 e9 b7 01 00 	call	112617 <_runtime.funcname>
 1026ad7:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026adc:	48 83 7c 24 18 08 	cmp	qword ptr [rsp + 24], 8
 1026ae2:	7d 30 	jge	48 <_runtime.panicCheck1+0x84>
 1026ae4:	31 c0 	xor	eax, eax
 1026ae6:	84 c0 	test	al, al
 1026ae8:	75 67 	jne	103 <_runtime.panicCheck1+0xc1>
 1026aea:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1026af3:	48 85 c0 	test	rax, rax
 1026af6:	74 12 	je	18 <_runtime.panicCheck1+0x7a>
 1026af8:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1026afc:	48 85 c0 	test	rax, rax
 1026aff:	74 09 	je	9 <_runtime.panicCheck1+0x7a>
 1026b01:	83 b8 f0 00 00 00 00 	cmp	dword ptr [rax + 240], 0
 1026b08:	75 2f 	jne	47 <_runtime.panicCheck1+0xa9>
 1026b0a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1026b0f:	48 83 c4 28 	add	rsp, 40
 1026b13:	c3 	ret
 1026b14:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026b18:	48 8d 05 38 c5 04 00 	lea	rax, [rip + 312632]
 1026b1f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026b24:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 1026b2d:	e8 be b5 fd ff 	call	-150082 <_runtime.memequal>
 1026b32:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1026b37:	eb ad 	jmp	-83 <_runtime.panicCheck1+0x56>
 1026b39:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1026b3e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026b42:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026b47:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026b4c:	e8 0f 22 00 00 	call	8719 <_runtime.throw>
 1026b51:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1026b56:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026b5a:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026b5f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026b64:	e8 f7 21 00 00 	call	8695 <_runtime.throw>
 1026b69:	90 	nop
 1026b6a:	e8 61 a0 02 00 	call	172129 <_runtime.morestack_noctxt>
 1026b6f:	e9 1c ff ff ff 	jmp	-228 <_runtime.panicCheck1>
 1026b74:	cc 	int3
 1026b75:	cc 	int3
 1026b76:	cc 	int3
 1026b77:	cc 	int3
 1026b78:	cc 	int3
 1026b79:	cc 	int3
 1026b7a:	cc 	int3
 1026b7b:	cc 	int3
 1026b7c:	cc 	int3
 1026b7d:	cc 	int3
 1026b7e:	cc 	int3
 1026b7f:	cc 	int3

_runtime.panicCheck2:
 1026b80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026b89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026b8d:	76 51 	jbe	81 <_runtime.panicCheck2+0x60>
 1026b8f:	48 83 ec 18 	sub	rsp, 24
 1026b93:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1026b98:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1026b9d:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1026ba6:	48 85 c0 	test	rax, rax
 1026ba9:	74 12 	je	18 <_runtime.panicCheck2+0x3d>
 1026bab:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1026baf:	48 85 c0 	test	rax, rax
 1026bb2:	74 09 	je	9 <_runtime.panicCheck2+0x3d>
 1026bb4:	83 b8 f0 00 00 00 00 	cmp	dword ptr [rax + 240], 0
 1026bbb:	75 0a 	jne	10 <_runtime.panicCheck2+0x47>
 1026bbd:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1026bc2:	48 83 c4 18 	add	rsp, 24
 1026bc6:	c3 	ret
 1026bc7:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1026bcc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026bd0:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1026bd5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026bda:	e8 81 21 00 00 	call	8577 <_runtime.throw>
 1026bdf:	90 	nop
 1026be0:	e8 eb 9f 02 00 	call	172011 <_runtime.morestack_noctxt>
 1026be5:	eb 99 	jmp	-103 <_runtime.panicCheck2>
 1026be7:	cc 	int3
 1026be8:	cc 	int3
 1026be9:	cc 	int3
 1026bea:	cc 	int3
 1026beb:	cc 	int3
 1026bec:	cc 	int3
 1026bed:	cc 	int3
 1026bee:	cc 	int3
 1026bef:	cc 	int3

_runtime.goPanicIndex:
 1026bf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026bf9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026bfd:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicIndex+0xa4>
 1026c03:	48 83 ec 40 	sub	rsp, 64
 1026c07:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1026c0c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1026c11:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026c16:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026c1a:	48 8d 05 8c d2 04 00 	lea	rax, [rip + 316044]
 1026c21:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026c26:	48 c7 44 24 10 12 00 00 00 	mov	qword ptr [rsp + 16], 18
 1026c2f:	e8 5c fe ff ff 	call	-420 <_runtime.panicCheck1>
 1026c34:	0f 57 c0 	xorps	xmm0, xmm0
 1026c37:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026c3c:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1026c43:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026c48:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026c4d:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 1026c52:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1026c57:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1026c5c:	c6 44 24 31 00 	mov	byte ptr [rsp + 49], 0
 1026c61:	48 8d 05 38 57 04 00 	lea	rax, [rip + 284472]
 1026c68:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026c6c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1026c71:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026c76:	e8 a5 10 fe ff 	call	-126811 <_runtime.convT2Enoptr>
 1026c7b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026c80:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1026c85:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026c89:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026c8e:	e8 2d 19 00 00 	call	6445 <_runtime.gopanic>
 1026c93:	90 	nop
 1026c94:	e8 37 9f 02 00 	call	171831 <_runtime.morestack_noctxt>
 1026c99:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicIndex>
 1026c9e:	cc 	int3
 1026c9f:	cc 	int3

_runtime.goPanicIndexU:
 1026ca0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026ca9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026cad:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicIndexU+0xa4>
 1026cb3:	48 83 ec 40 	sub	rsp, 64
 1026cb7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1026cbc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1026cc1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026cc6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026cca:	48 8d 05 dc d1 04 00 	lea	rax, [rip + 315868]
 1026cd1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026cd6:	48 c7 44 24 10 12 00 00 00 	mov	qword ptr [rsp + 16], 18
 1026cdf:	e8 ac fd ff ff 	call	-596 <_runtime.panicCheck1>
 1026ce4:	0f 57 c0 	xorps	xmm0, xmm0
 1026ce7:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026cec:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1026cf3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026cf8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026cfd:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 1026d02:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1026d07:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1026d0c:	c6 44 24 31 00 	mov	byte ptr [rsp + 49], 0
 1026d11:	48 8d 05 88 56 04 00 	lea	rax, [rip + 284296]
 1026d18:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026d1c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1026d21:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026d26:	e8 f5 0f fe ff 	call	-126987 <_runtime.convT2Enoptr>
 1026d2b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026d30:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1026d35:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026d39:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026d3e:	e8 7d 18 00 00 	call	6269 <_runtime.gopanic>
 1026d43:	90 	nop
 1026d44:	e8 87 9e 02 00 	call	171655 <_runtime.morestack_noctxt>
 1026d49:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicIndexU>
 1026d4e:	cc 	int3
 1026d4f:	cc 	int3

_runtime.goPanicSliceAlen:
 1026d50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026d59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026d5d:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSliceAlen+0xa4>
 1026d63:	48 83 ec 40 	sub	rsp, 64
 1026d67:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1026d6c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1026d71:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026d76:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026d7a:	48 8d 05 c4 df 04 00 	lea	rax, [rip + 319428]
 1026d81:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026d86:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 1026d8f:	e8 fc fc ff ff 	call	-772 <_runtime.panicCheck1>
 1026d94:	0f 57 c0 	xorps	xmm0, xmm0
 1026d97:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026d9c:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1026da3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026da8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026dad:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 1026db2:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1026db7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1026dbc:	c6 44 24 31 01 	mov	byte ptr [rsp + 49], 1
 1026dc1:	48 8d 05 d8 55 04 00 	lea	rax, [rip + 284120]
 1026dc8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026dcc:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1026dd1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026dd6:	e8 45 0f fe ff 	call	-127163 <_runtime.convT2Enoptr>
 1026ddb:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026de0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1026de5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026de9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026dee:	e8 cd 17 00 00 	call	6093 <_runtime.gopanic>
 1026df3:	90 	nop
 1026df4:	e8 d7 9d 02 00 	call	171479 <_runtime.morestack_noctxt>
 1026df9:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSliceAlen>
 1026dfe:	cc 	int3
 1026dff:	cc 	int3

_runtime.goPanicSliceAlenU:
 1026e00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026e09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026e0d:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSliceAlenU+0xa4>
 1026e13:	48 83 ec 40 	sub	rsp, 64
 1026e17:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1026e1c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1026e21:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026e26:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026e2a:	48 8d 05 14 df 04 00 	lea	rax, [rip + 319252]
 1026e31:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026e36:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 1026e3f:	e8 4c fc ff ff 	call	-948 <_runtime.panicCheck1>
 1026e44:	0f 57 c0 	xorps	xmm0, xmm0
 1026e47:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026e4c:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1026e53:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026e58:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026e5d:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 1026e62:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1026e67:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1026e6c:	c6 44 24 31 01 	mov	byte ptr [rsp + 49], 1
 1026e71:	48 8d 05 28 55 04 00 	lea	rax, [rip + 283944]
 1026e78:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026e7c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1026e81:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026e86:	e8 95 0e fe ff 	call	-127339 <_runtime.convT2Enoptr>
 1026e8b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026e90:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1026e95:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026e99:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026e9e:	e8 1d 17 00 00 	call	5917 <_runtime.gopanic>
 1026ea3:	90 	nop
 1026ea4:	e8 27 9d 02 00 	call	171303 <_runtime.morestack_noctxt>
 1026ea9:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSliceAlenU>
 1026eae:	cc 	int3
 1026eaf:	cc 	int3

_runtime.goPanicSliceAcap:
 1026eb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026eb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026ebd:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSliceAcap+0xa4>
 1026ec3:	48 83 ec 40 	sub	rsp, 64
 1026ec7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1026ecc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1026ed1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026ed6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026eda:	48 8d 05 64 de 04 00 	lea	rax, [rip + 319076]
 1026ee1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026ee6:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 1026eef:	e8 9c fb ff ff 	call	-1124 <_runtime.panicCheck1>
 1026ef4:	0f 57 c0 	xorps	xmm0, xmm0
 1026ef7:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026efc:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1026f03:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026f08:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026f0d:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 1026f12:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1026f17:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1026f1c:	c6 44 24 31 02 	mov	byte ptr [rsp + 49], 2
 1026f21:	48 8d 05 78 54 04 00 	lea	rax, [rip + 283768]
 1026f28:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026f2c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1026f31:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026f36:	e8 e5 0d fe ff 	call	-127515 <_runtime.convT2Enoptr>
 1026f3b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026f40:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1026f45:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026f49:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026f4e:	e8 6d 16 00 00 	call	5741 <_runtime.gopanic>
 1026f53:	90 	nop
 1026f54:	e8 77 9c 02 00 	call	171127 <_runtime.morestack_noctxt>
 1026f59:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSliceAcap>
 1026f5e:	cc 	int3
 1026f5f:	cc 	int3

_runtime.goPanicSliceAcapU:
 1026f60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1026f69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1026f6d:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSliceAcapU+0xa4>
 1026f73:	48 83 ec 40 	sub	rsp, 64
 1026f77:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1026f7c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1026f81:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1026f86:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026f8a:	48 8d 05 b4 dd 04 00 	lea	rax, [rip + 318900]
 1026f91:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026f96:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 1026f9f:	e8 ec fa ff ff 	call	-1300 <_runtime.panicCheck1>
 1026fa4:	0f 57 c0 	xorps	xmm0, xmm0
 1026fa7:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1026fac:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1026fb3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1026fb8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1026fbd:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 1026fc2:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1026fc7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1026fcc:	c6 44 24 31 02 	mov	byte ptr [rsp + 49], 2
 1026fd1:	48 8d 05 c8 53 04 00 	lea	rax, [rip + 283592]
 1026fd8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026fdc:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1026fe1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1026fe6:	e8 35 0d fe ff 	call	-127691 <_runtime.convT2Enoptr>
 1026feb:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1026ff0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1026ff5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1026ff9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1026ffe:	e8 bd 15 00 00 	call	5565 <_runtime.gopanic>
 1027003:	90 	nop
 1027004:	e8 c7 9b 02 00 	call	170951 <_runtime.morestack_noctxt>
 1027009:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSliceAcapU>
 102700e:	cc 	int3
 102700f:	cc 	int3

_runtime.goPanicSliceB:
 1027010:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027019:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102701d:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSliceB+0xa4>
 1027023:	48 83 ec 40 	sub	rsp, 64
 1027027:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102702c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1027031:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1027036:	48 89 04 24 	mov	qword ptr [rsp], rax
 102703a:	48 8d 05 04 dd 04 00 	lea	rax, [rip + 318724]
 1027041:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027046:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 102704f:	e8 3c fa ff ff 	call	-1476 <_runtime.panicCheck1>
 1027054:	0f 57 c0 	xorps	xmm0, xmm0
 1027057:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 102705c:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1027063:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1027068:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102706d:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 1027072:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1027077:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102707c:	c6 44 24 31 03 	mov	byte ptr [rsp + 49], 3
 1027081:	48 8d 05 18 53 04 00 	lea	rax, [rip + 283416]
 1027088:	48 89 04 24 	mov	qword ptr [rsp], rax
 102708c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1027091:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027096:	e8 85 0c fe ff 	call	-127867 <_runtime.convT2Enoptr>
 102709b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10270a0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10270a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10270a9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10270ae:	e8 0d 15 00 00 	call	5389 <_runtime.gopanic>
 10270b3:	90 	nop
 10270b4:	e8 17 9b 02 00 	call	170775 <_runtime.morestack_noctxt>
 10270b9:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSliceB>
 10270be:	cc 	int3
 10270bf:	cc 	int3

_runtime.goPanicSliceBU:
 10270c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10270c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10270cd:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSliceBU+0xa4>
 10270d3:	48 83 ec 40 	sub	rsp, 64
 10270d7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 10270dc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10270e1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10270e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10270ea:	48 8d 05 54 dc 04 00 	lea	rax, [rip + 318548]
 10270f1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10270f6:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 10270ff:	e8 8c f9 ff ff 	call	-1652 <_runtime.panicCheck1>
 1027104:	0f 57 c0 	xorps	xmm0, xmm0
 1027107:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 102710c:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1027113:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1027118:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102711d:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 1027122:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1027127:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102712c:	c6 44 24 31 03 	mov	byte ptr [rsp + 49], 3
 1027131:	48 8d 05 68 52 04 00 	lea	rax, [rip + 283240]
 1027138:	48 89 04 24 	mov	qword ptr [rsp], rax
 102713c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 1027141:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027146:	e8 d5 0b fe ff 	call	-128043 <_runtime.convT2Enoptr>
 102714b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027150:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1027155:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027159:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102715e:	e8 5d 14 00 00 	call	5213 <_runtime.gopanic>
 1027163:	90 	nop
 1027164:	e8 67 9a 02 00 	call	170599 <_runtime.morestack_noctxt>
 1027169:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSliceBU>
 102716e:	cc 	int3
 102716f:	cc 	int3

_runtime.goPanicSlice3Alen:
 1027170:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027179:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102717d:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSlice3Alen+0xa4>
 1027183:	48 83 ec 40 	sub	rsp, 64
 1027187:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102718c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1027191:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1027196:	48 89 04 24 	mov	qword ptr [rsp], rax
 102719a:	48 8d 05 a4 db 04 00 	lea	rax, [rip + 318372]
 10271a1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10271a6:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 10271af:	e8 dc f8 ff ff 	call	-1828 <_runtime.panicCheck1>
 10271b4:	0f 57 c0 	xorps	xmm0, xmm0
 10271b7:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 10271bc:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 10271c3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10271c8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10271cd:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 10271d2:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10271d7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10271dc:	c6 44 24 31 04 	mov	byte ptr [rsp + 49], 4
 10271e1:	48 8d 05 b8 51 04 00 	lea	rax, [rip + 283064]
 10271e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10271ec:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 10271f1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10271f6:	e8 25 0b fe ff 	call	-128219 <_runtime.convT2Enoptr>
 10271fb:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027200:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1027205:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027209:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102720e:	e8 ad 13 00 00 	call	5037 <_runtime.gopanic>
 1027213:	90 	nop
 1027214:	e8 b7 99 02 00 	call	170423 <_runtime.morestack_noctxt>
 1027219:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSlice3Alen>
 102721e:	cc 	int3
 102721f:	cc 	int3

_runtime.goPanicSlice3AlenU:
 1027220:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027229:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102722d:	0f 86 91 00 00 00 	jbe	145 <_runtime.goPanicSlice3AlenU+0xa4>
 1027233:	48 83 ec 40 	sub	rsp, 64
 1027237:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102723c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1027241:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1027246:	48 89 04 24 	mov	qword ptr [rsp], rax
 102724a:	48 8d 05 f4 da 04 00 	lea	rax, [rip + 318196]
 1027251:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027256:	48 c7 44 24 10 19 00 00 00 	mov	qword ptr [rsp + 16], 25
 102725f:	e8 2c f8 ff ff 	call	-2004 <_runtime.panicCheck1>
 1027264:	0f 57 c0 	xorps	xmm0, xmm0
 1027267:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 102726c:	66 c7 44 24 30 00 00 	mov	word ptr [rsp + 48], 0
 1027273:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1027278:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102727d:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 1027282:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1027287:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102728c:	c6 44 24 31 04 	mov	byte ptr [rsp + 49], 4
 1027291:	48 8d 05 08 51 04 00 	lea	rax, [rip + 282888]
 1027298:	48 89 04 24 	mov	qword ptr [rsp], rax
 102729c:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 10272a1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10272a6:	e8 75 0a fe ff 	call	-128395 <_runtime.convT2Enoptr>
 10272ab:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10272b0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10272b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10272b9:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10272be:	e8 fd 12 00 00 	call	4861 <_runtime.gopanic>
 10272c3:	90 	nop
 10272c4:	e8 07 99 02 00 	call	170247 <_runtime.morestack_noctxt>
 10272c9:	e9 52 ff ff ff 	jmp	-174 <_runtime.goPanicSlice3AlenU>
 10272ce:	cc 	int3
 10272cf:	cc 	int3

_runtime.panicshift:
 10272d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10272d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10272dd:	76 57 	jbe	87 <_runtime.panicshift+0x66>
 10272df:	48 83 ec 20 	sub	rsp, 32
 10272e3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10272e8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10272ed:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10272f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10272f6:	48 8d 05 0a d1 04 00 	lea	rax, [rip + 315658]
 10272fd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027302:	48 c7 44 24 10 15 00 00 00 	mov	qword ptr [rsp + 16], 21
 102730b:	e8 80 f7 ff ff 	call	-2176 <_runtime.panicCheck1>
 1027310:	48 8b 05 39 55 0a 00 	mov	rax, qword ptr [rip + 677177]
 1027317:	48 8b 0d 3a 55 0a 00 	mov	rcx, qword ptr [rip + 677178]
 102731e:	48 85 c0 	test	rax, rax
 1027321:	74 04 	je	4 <_runtime.panicshift+0x57>
 1027323:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1027327:	48 89 04 24 	mov	qword ptr [rsp], rax
 102732b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1027330:	e8 8b 12 00 00 	call	4747 <_runtime.gopanic>
 1027335:	90 	nop
 1027336:	e8 95 98 02 00 	call	170133 <_runtime.morestack_noctxt>
 102733b:	eb 93 	jmp	-109 <_runtime.panicshift>
 102733d:	cc 	int3
 102733e:	cc 	int3
 102733f:	cc 	int3

_runtime.panicdivide:
 1027340:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027349:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102734d:	76 4d 	jbe	77 <_runtime.panicdivide+0x5c>
 102734f:	48 83 ec 18 	sub	rsp, 24
 1027353:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1027358:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102735d:	48 8d 05 50 d2 04 00 	lea	rax, [rip + 315984]
 1027364:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027368:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1027371:	e8 0a f8 ff ff 	call	-2038 <_runtime.panicCheck2>
 1027376:	48 8b 05 83 54 0a 00 	mov	rax, qword ptr [rip + 676995]
 102737d:	48 8b 0d 84 54 0a 00 	mov	rcx, qword ptr [rip + 676996]
 1027384:	48 85 c0 	test	rax, rax
 1027387:	74 04 	je	4 <_runtime.panicdivide+0x4d>
 1027389:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 102738d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027391:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1027396:	e8 25 12 00 00 	call	4645 <_runtime.gopanic>
 102739b:	90 	nop
 102739c:	e8 2f 98 02 00 	call	170031 <_runtime.morestack_noctxt>
 10273a1:	eb 9d 	jmp	-99 <_runtime.panicdivide>
 10273a3:	cc 	int3
 10273a4:	cc 	int3
 10273a5:	cc 	int3
 10273a6:	cc 	int3
 10273a7:	cc 	int3
 10273a8:	cc 	int3
 10273a9:	cc 	int3
 10273aa:	cc 	int3
 10273ab:	cc 	int3
 10273ac:	cc 	int3
 10273ad:	cc 	int3
 10273ae:	cc 	int3
 10273af:	cc 	int3

_runtime.testdefersizes:
 10273b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10273b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10273bd:	0f 86 53 02 00 00 	jbe	595 <_runtime.testdefersizes+0x266>
 10273c3:	48 83 ec 48 	sub	rsp, 72
 10273c7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 10273cc:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 10273d1:	48 c7 44 24 2c 00 00 00 00 	mov	qword ptr [rsp + 44], 0
 10273da:	0f 57 c0 	xorps	xmm0, xmm0
 10273dd:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 10273e2:	31 c0 	xor	eax, eax
 10273e4:	eb 13 	jmp	19 <_runtime.testdefersizes+0x49>
 10273e6:	48 89 c2 	mov	rdx, rax
 10273e9:	48 c1 e0 02 	shl	rax, 2
 10273ed:	c7 44 04 2c ff ff ff ff 	mov	dword ptr [rsp + rax + 44], 4294967295
 10273f5:	48 8d 42 01 	lea	rax, [rdx + 1]
 10273f9:	48 83 f8 05 	cmp	rax, 5
 10273fd:	7c e7 	jl	-25 <_runtime.testdefersizes+0x36>
 10273ff:	31 c0 	xor	eax, eax
 1027401:	eb 03 	jmp	3 <_runtime.testdefersizes+0x56>
 1027403:	48 ff c0 	inc	rax
 1027406:	48 83 f8 08 	cmp	rax, 8
 102740a:	0f 87 1a 01 00 00 	ja	282 <_runtime.testdefersizes+0x17a>
 1027410:	31 c9 	xor	ecx, ecx
 1027412:	48 83 f9 05 	cmp	rcx, 5
 1027416:	0f 83 04 01 00 00 	jae	260 <_runtime.testdefersizes+0x170>
 102741c:	48 83 f8 08 	cmp	rax, 8
 1027420:	0f 87 f1 00 00 00 	ja	241 <_runtime.testdefersizes+0x167>
 1027426:	ba 50 00 00 00 	mov	edx, 80
 102742b:	48 81 fa 00 80 00 00 	cmp	rdx, 32768
 1027432:	0f 83 a1 00 00 00 	jae	161 <_runtime.testdefersizes+0x129>
 1027438:	48 81 fa f8 03 00 00 	cmp	rdx, 1016
 102743f:	77 57 	ja	87 <_runtime.testdefersizes+0xe8>
 1027441:	48 83 c2 07 	add	rdx, 7
 1027445:	48 c1 ea 03 	shr	rdx, 3
 1027449:	48 81 fa 81 00 00 00 	cmp	rdx, 129
 1027450:	0f 83 b2 01 00 00 	jae	434 <_runtime.testdefersizes+0x258>
 1027456:	48 8d 1d 03 40 0a 00 	lea	rbx, [rip + 671747]
 102745d:	0f b6 14 1a 	movzx	edx, byte ptr [rdx + rbx]
 1027461:	48 83 fa 43 	cmp	rdx, 67
 1027465:	0f 83 91 01 00 00 	jae	401 <_runtime.testdefersizes+0x24c>
 102746b:	48 8d 35 8e 40 0a 00 	lea	rsi, [rip + 671886]
 1027472:	0f b7 14 56 	movzx	edx, word ptr [rsi + 2*rdx]
 1027476:	8b 7c 8c 2c 	mov	edi, dword ptr [rsp + 4*rcx + 44]
 102747a:	85 ff 	test	edi, edi
 102747c:	7d 0d 	jge	13 <_runtime.testdefersizes+0xdb>
 102747e:	48 c1 e1 02 	shl	rcx, 2
 1027482:	89 54 0c 2c 	mov	dword ptr [rsp + rcx + 44], edx
 1027486:	e9 78 ff ff ff 	jmp	-136 <_runtime.testdefersizes+0x53>
 102748b:	39 d7 	cmp	edi, edx
 102748d:	0f 84 70 ff ff ff 	je	-144 <_runtime.testdefersizes+0x53>
 1027493:	e9 9f 00 00 00 	jmp	159 <_runtime.testdefersizes+0x187>
 1027498:	48 81 c2 7f fc ff ff 	add	rdx, -897
 102749f:	48 c1 ea 07 	shr	rdx, 7
 10274a3:	48 81 fa f9 00 00 00 	cmp	rdx, 249
 10274aa:	0f 83 3f 01 00 00 	jae	319 <_runtime.testdefersizes+0x23f>
 10274b0:	48 8d 1d e9 40 0a 00 	lea	rbx, [rip + 671977]
 10274b7:	0f b6 14 1a 	movzx	edx, byte ptr [rdx + rbx]
 10274bb:	48 83 fa 43 	cmp	rdx, 67
 10274bf:	0f 83 1e 01 00 00 	jae	286 <_runtime.testdefersizes+0x233>
 10274c5:	48 8d 35 34 40 0a 00 	lea	rsi, [rip + 671796]
 10274cc:	0f b7 14 56 	movzx	edx, word ptr [rsi + 2*rdx]
 10274d0:	48 8d 1d 89 3f 0a 00 	lea	rbx, [rip + 671625]
 10274d7:	eb 9d 	jmp	-99 <_runtime.testdefersizes+0xc6>
 10274d9:	48 8d 9a 00 20 00 00 	lea	rbx, [rdx + 8192]
 10274e0:	48 39 d3 	cmp	rbx, rdx
 10274e3:	73 10 	jae	16 <_runtime.testdefersizes+0x145>
 10274e5:	48 8d 1d 74 3f 0a 00 	lea	rbx, [rip + 671604]
 10274ec:	48 8d 35 0d 40 0a 00 	lea	rsi, [rip + 671757]
 10274f3:	eb 81 	jmp	-127 <_runtime.testdefersizes+0xc6>
 10274f5:	90 	nop
 10274f6:	48 81 c2 ff 1f 00 00 	add	rdx, 8191
 10274fd:	48 81 e2 00 e0 ff ff 	and	rdx, -8192
 1027504:	48 8d 1d 55 3f 0a 00 	lea	rbx, [rip + 671573]
 102750b:	48 8d 35 ee 3f 0a 00 	lea	rsi, [rip + 671726]
 1027512:	e9 5f ff ff ff 	jmp	-161 <_runtime.testdefersizes+0xc6>
 1027517:	48 8d 50 48 	lea	rdx, [rax + 72]
 102751b:	e9 0b ff ff ff 	jmp	-245 <_runtime.testdefersizes+0x7b>
 1027520:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1027525:	48 83 c4 48 	add	rsp, 72
 1027529:	c3 	ret
 102752a:	48 8d 48 07 	lea	rcx, [rax + 7]
 102752e:	48 c1 e9 04 	shr	rcx, 4
 1027532:	e9 db fe ff ff 	jmp	-293 <_runtime.testdefersizes+0x62>
 1027537:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 102753c:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1027541:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1027546:	e8 55 2f 00 00 	call	12117 <_runtime.printlock>
 102754b:	48 8d 05 13 d5 04 00 	lea	rax, [rip + 316691]
 1027552:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027556:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 102755f:	e8 7c 38 00 00 	call	14460 <_runtime.printstring>
 1027564:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1027569:	48 89 04 24 	mov	qword ptr [rsp], rax
 102756d:	e8 ae 35 00 00 	call	13742 <_runtime.printuint>
 1027572:	48 8d 05 27 b8 04 00 	lea	rax, [rip + 309287]
 1027579:	48 89 04 24 	mov	qword ptr [rsp], rax
 102757d:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1027586:	e8 55 38 00 00 	call	14421 <_runtime.printstring>
 102758b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027590:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027594:	e8 87 35 00 00 	call	13703 <_runtime.printuint>
 1027599:	48 8d 05 ea ba 04 00 	lea	rax, [rip + 309994]
 10275a0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10275a4:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 10275ad:	e8 2e 38 00 00 	call	14382 <_runtime.printstring>
 10275b2:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10275b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10275bb:	e8 60 35 00 00 	call	13664 <_runtime.printuint>
 10275c0:	e8 6b 31 00 00 	call	12651 <_runtime.printnl>
 10275c5:	e8 56 2f 00 00 	call	12118 <_runtime.printunlock>
 10275ca:	48 8d 05 87 cb 04 00 	lea	rax, [rip + 314247]
 10275d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10275d5:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 10275de:	e8 7d 17 00 00 	call	6013 <_runtime.throw>
 10275e3:	89 d0 	mov	eax, edx
 10275e5:	b9 43 00 00 00 	mov	ecx, 67
 10275ea:	e8 61 bd 02 00 	call	179553 <_runtime.panicIndex>
 10275ef:	48 89 d0 	mov	rax, rdx
 10275f2:	b9 f9 00 00 00 	mov	ecx, 249
 10275f7:	e8 64 bd 02 00 	call	179556 <_runtime.panicIndexU>
 10275fc:	89 d0 	mov	eax, edx
 10275fe:	b9 43 00 00 00 	mov	ecx, 67
 1027603:	e8 48 bd 02 00 	call	179528 <_runtime.panicIndex>
 1027608:	48 89 d0 	mov	rax, rdx
 102760b:	b9 81 00 00 00 	mov	ecx, 129
 1027610:	e8 4b bd 02 00 	call	179531 <_runtime.panicIndexU>
 1027615:	90 	nop
 1027616:	e8 b5 95 02 00 	call	169397 <_runtime.morestack_noctxt>
 102761b:	e9 90 fd ff ff 	jmp	-624 <_runtime.testdefersizes>

_runtime.init.4:
 1027620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102762d:	76 59 	jbe	89 <_runtime.init.4+0x68>
 102762f:	48 83 ec 18 	sub	rsp, 24
 1027633:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1027638:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102763d:	0f 57 c0 	xorps	xmm0, xmm0
 1027640:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 1027644:	48 8d 0d f5 53 03 00 	lea	rcx, [rip + 218101]
 102764b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102764f:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1027658:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 102765c:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1027660:	83 3d 99 02 0d 00 00 	cmp	dword ptr [rip + 852633], 0
 1027667:	75 11 	jne	17 <_runtime.init.4+0x5a>
 1027669:	48 89 05 c0 6b 0a 00 	mov	qword ptr [rip + 682944], rax
 1027670:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1027675:	48 83 c4 18 	add	rsp, 24
 1027679:	c3 	ret
 102767a:	48 8d 3d af 6b 0a 00 	lea	rdi, [rip + 682927]
 1027681:	e8 5a b3 02 00 	call	176986 <_runtime.gcWriteBarrier>
 1027686:	eb e8 	jmp	-24 <_runtime.init.4+0x50>
 1027688:	e8 43 95 02 00 	call	169283 <_runtime.morestack_noctxt>
 102768d:	eb 91 	jmp	-111 <_runtime.init.4>
 102768f:	cc 	int3

_runtime.newdefer:
 1027690:	48 83 ec 60 	sub	rsp, 96
 1027694:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 1027699:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 102769e:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 10276a7:	8b 5c 24 68 	mov	ebx, dword ptr [rsp + 104]
 10276ab:	48 63 f3 	movsxd	rsi, ebx
 10276ae:	48 83 fe 08 	cmp	rsi, 8
 10276b2:	0f 87 7d 01 00 00 	ja	381 <_runtime.newdefer+0x1a5>
 10276b8:	31 c0 	xor	eax, eax
 10276ba:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 10276c3:	48 83 f8 05 	cmp	rax, 5
 10276c7:	0f 83 90 00 00 00 	jae	144 <_runtime.newdefer+0xcd>
 10276cd:	48 8b 76 30 	mov	rsi, qword ptr [rsi + 48]
 10276d1:	48 8b b6 d0 00 00 00 	mov	rsi, qword ptr [rsi + 208]
 10276d8:	84 06 	test	byte ptr [rsi], al
 10276da:	4c 8d 04 40 	lea	r8, [rax + 2*rax]
 10276de:	4e 8b 4c c6 70 	mov	r9, qword ptr [rsi + 8*r8 + 112]
 10276e3:	4d 85 c9 	test	r9, r9
 10276e6:	75 14 	jne	20 <_runtime.newdefer+0x6c>
 10276e8:	4c 8d 0d 41 70 0a 00 	lea	r9, [rip + 684097]
 10276ef:	4d 8b 0c c1 	mov	r9, qword ptr [r9 + 8*rax]
 10276f3:	4d 85 c9 	test	r9, r9
 10276f6:	0f 85 e7 00 00 00 	jne	231 <_runtime.newdefer+0x153>
 10276fc:	4e 8b 4c c6 70 	mov	r9, qword ptr [rsi + 8*r8 + 112]
 1027701:	4e 8b 54 c6 68 	mov	r10, qword ptr [rsi + 8*r8 + 104]
 1027706:	4d 85 c9 	test	r9, r9
 1027709:	7e 52 	jle	82 <_runtime.newdefer+0xcd>
 102770b:	4f 8b 54 ca f8 	mov	r10, qword ptr [r10 + 8*r9 - 8]
 1027710:	4c 89 54 24 18 	mov	qword ptr [rsp + 24], r10
 1027715:	49 8d 41 ff 	lea	rax, [r9 - 1]
 1027719:	4e 8b 54 c6 68 	mov	r10, qword ptr [rsi + 8*r8 + 104]
 102771e:	4a 8b 4c c6 70 	mov	rcx, qword ptr [rsi + 8*r8 + 112]
 1027723:	48 39 c8 	cmp	rax, rcx
 1027726:	0f 83 1e 01 00 00 	jae	286 <_runtime.newdefer+0x1ba>
 102772c:	4b 8d 3c ca 	lea	rdi, [r10 + 8*r9]
 1027730:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 1027734:	83 3d c5 01 0d 00 00 	cmp	dword ptr [rip + 852421], 0
 102773b:	0f 85 90 00 00 00 	jne	144 <_runtime.newdefer+0x141>
 1027741:	4b c7 44 ca f8 00 00 00 00 	mov	qword ptr [r10 + 8*r9 - 8], 0
 102774a:	4a 8b 54 c6 78 	mov	rdx, qword ptr [rsi + 8*r8 + 120]
 102774f:	48 39 d0 	cmp	rax, rdx
 1027752:	0f 87 ea 00 00 00 	ja	234 <_runtime.newdefer+0x1b2>
 1027758:	4a 89 44 c6 70 	mov	qword ptr [rsi + 8*r8 + 112], rax
 102775d:	48 83 7c 24 18 00 	cmp	qword ptr [rsp + 24], 0
 1027763:	74 24 	je	36 <_runtime.newdefer+0xf9>
 1027765:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102776a:	89 18 	mov	dword ptr [rax], ebx
 102776c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1027771:	c6 40 05 01 	mov	byte ptr [rax + 5], 1
 1027775:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102777a:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 102777f:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1027784:	48 83 c4 60 	add	rsp, 96
 1027788:	c3 	ret
 1027789:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1027792:	c7 44 24 30 00 00 00 00 	mov	dword ptr [rsp + 48], 0
 102779a:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 10277a3:	48 8d 05 06 7b 02 00 	lea	rax, [rip + 162566]
 10277aa:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10277af:	89 5c 24 30 	mov	dword ptr [rsp + 48], ebx
 10277b3:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 10277b8:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10277bd:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10277c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10277c6:	e8 b5 92 02 00 	call	168629 <_runtime.systemstack>
 10277cb:	8b 5c 24 68 	mov	ebx, dword ptr [rsp + 104]
 10277cf:	eb 94 	jmp	-108 <_runtime.newdefer+0xd5>
 10277d1:	48 89 c1 	mov	rcx, rax
 10277d4:	31 c0 	xor	eax, eax
 10277d6:	e8 05 b2 02 00 	call	176645 <_runtime.gcWriteBarrier>
 10277db:	48 89 c8 	mov	rax, rcx
 10277de:	e9 67 ff ff ff 	jmp	-153 <_runtime.newdefer+0xba>
 10277e3:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 10277e8:	4c 89 44 24 10 	mov	qword ptr [rsp + 16], r8
 10277ed:	0f 57 c0 	xorps	xmm0, xmm0
 10277f0:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 10277f5:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 10277fe:	48 8d 0d db 78 02 00 	lea	rcx, [rip + 162011]
 1027805:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 102780a:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 102780f:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1027814:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 1027819:	48 89 04 24 	mov	qword ptr [rsp], rax
 102781d:	e8 5e 92 02 00 	call	168542 <_runtime.systemstack>
 1027822:	8b 5c 24 68 	mov	ebx, dword ptr [rsp + 104]
 1027826:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 102782b:	4c 8b 44 24 10 	mov	r8, qword ptr [rsp + 16]
 1027830:	e9 c7 fe ff ff 	jmp	-313 <_runtime.newdefer+0x6c>
 1027835:	48 8d 46 07 	lea	rax, [rsi + 7]
 1027839:	48 c1 e8 04 	shr	rax, 4
 102783d:	e9 78 fe ff ff 	jmp	-392 <_runtime.newdefer+0x2a>
 1027842:	48 89 c1 	mov	rcx, rax
 1027845:	e8 46 bb 02 00 	call	179014 <_runtime.panicSliceAcap>
 102784a:	e8 01 bb 02 00 	call	178945 <_runtime.panicIndex>
 102784f:	90 	nop

_runtime.freedefer:
 1027850:	48 83 ec 78 	sub	rsp, 120
 1027854:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 1027859:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 102785e:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1027866:	48 83 78 20 00 	cmp	qword ptr [rax + 32], 0
 102786b:	0f 85 0a 02 00 00 	jne	522 <_runtime.freedefer+0x22b>
 1027871:	48 83 78 18 00 	cmp	qword ptr [rax + 24], 0
 1027876:	0f 85 ed 01 00 00 	jne	493 <_runtime.freedefer+0x219>
 102787c:	80 78 05 00 	cmp	byte ptr [rax + 5], 0
 1027880:	0f 84 d9 01 00 00 	je	473 <_runtime.freedefer+0x20f>
 1027886:	48 63 08 	movsxd	rcx, dword ptr [rax]
 1027889:	48 83 f9 08 	cmp	rcx, 8
 102788d:	0f 87 bf 01 00 00 	ja	447 <_runtime.freedefer+0x202>
 1027893:	31 c9 	xor	ecx, ecx
 1027895:	48 83 f9 05 	cmp	rcx, 5
 1027899:	0f 83 a9 01 00 00 	jae	425 <_runtime.freedefer+0x1f8>
 102789f:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 10278a8:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 10278ac:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 10278b3:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 10278b8:	84 02 	test	byte ptr [rdx], al
 10278ba:	48 8d 1c 49 	lea	rbx, [rcx + 2*rcx]
 10278be:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 10278c3:	48 8b 74 da 78 	mov	rsi, qword ptr [rdx + 8*rbx + 120]
 10278c8:	4c 8d 04 da 	lea	r8, [rdx + 8*rbx]
 10278cc:	4d 8d 40 68 	lea	r8, [r8 + 104]
 10278d0:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 10278d5:	49 39 70 08 	cmp	qword ptr [r8 + 8], rsi
 10278d9:	0f 84 18 01 00 00 	je	280 <_runtime.freedefer+0x1a7>
 10278df:	c7 00 00 00 00 00 	mov	dword ptr [rax], 0
 10278e5:	c6 40 04 00 	mov	byte ptr [rax + 4], 0
 10278e9:	c6 40 06 00 	mov	byte ptr [rax + 6], 0
 10278ed:	0f 57 c0 	xorps	xmm0, xmm0
 10278f0:	0f 11 40 08 	movups	xmmword ptr [rax + 8], xmm0
 10278f4:	48 c7 40 40 00 00 00 00 	mov	qword ptr [rax + 64], 0
 10278fc:	48 c7 40 38 00 00 00 00 	mov	qword ptr [rax + 56], 0
 1027904:	83 3d f5 ff 0c 00 00 	cmp	dword ptr [rip + 851957], 0
 102790b:	0f 85 c5 00 00 00 	jne	197 <_runtime.freedefer+0x186>
 1027911:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 1027919:	48 c7 40 28 00 00 00 00 	mov	qword ptr [rax + 40], 0
 1027921:	48 8b 4c da 78 	mov	rcx, qword ptr [rdx + 8*rbx + 120]
 1027926:	48 8b 74 da 70 	mov	rsi, qword ptr [rdx + 8*rbx + 112]
 102792b:	4c 8b 4c da 68 	mov	r9, qword ptr [rdx + 8*rbx + 104]
 1027930:	4c 8d 56 01 	lea	r10, [rsi + 1]
 1027934:	49 39 ca 	cmp	r10, rcx
 1027937:	77 2b 	ja	43 <_runtime.freedefer+0x114>
 1027939:	48 8d 4e 01 	lea	rcx, [rsi + 1]
 102793d:	48 89 4c da 70 	mov	qword ptr [rdx + 8*rbx + 112], rcx
 1027942:	49 8d 3c f1 	lea	rdi, [r9 + 8*rsi]
 1027946:	83 3d b3 ff 0c 00 00 	cmp	dword ptr [rip + 851891], 0
 102794d:	75 0e 	jne	14 <_runtime.freedefer+0x10d>
 102794f:	49 89 04 f1 	mov	qword ptr [r9 + 8*rsi], rax
 1027953:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1027958:	48 83 c4 78 	add	rsp, 120
 102795c:	c3 	ret
 102795d:	e8 7e b0 02 00 	call	176254 <_runtime.gcWriteBarrier>
 1027962:	eb ef 	jmp	-17 <_runtime.freedefer+0x103>
 1027964:	48 8d 05 d5 50 03 00 	lea	rax, [rip + 217301]
 102796b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102796f:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 1027974:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1027979:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 102797e:	4c 89 54 24 20 	mov	qword ptr [rsp + 32], r10
 1027983:	e8 98 52 01 00 	call	86680 <_runtime.growslice>
 1027988:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102798d:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1027992:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1027997:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 102799c:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 10279a1:	48 89 54 de 78 	mov	qword ptr [rsi + 8*rbx + 120], rdx
 10279a6:	83 3d 53 ff 0c 00 00 	cmp	dword ptr [rip + 851795], 0
 10279ad:	75 1b 	jne	27 <_runtime.freedefer+0x17a>
 10279af:	48 89 44 de 68 	mov	qword ptr [rsi + 8*rbx + 104], rax
 10279b4:	48 89 f2 	mov	rdx, rsi
 10279b7:	48 89 ce 	mov	rsi, rcx
 10279ba:	49 89 c1 	mov	r9, rax
 10279bd:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10279c5:	e9 6f ff ff ff 	jmp	-145 <_runtime.freedefer+0xe9>
 10279ca:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 10279cf:	e8 0c b0 02 00 	call	176140 <_runtime.gcWriteBarrier>
 10279d4:	eb de 	jmp	-34 <_runtime.freedefer+0x164>
 10279d6:	48 8d 78 30 	lea	rdi, [rax + 48]
 10279da:	48 89 c1 	mov	rcx, rax
 10279dd:	31 c0 	xor	eax, eax
 10279df:	e8 fc af 02 00 	call	176124 <_runtime.gcWriteBarrier>
 10279e4:	48 8d 79 28 	lea	rdi, [rcx + 40]
 10279e8:	31 c0 	xor	eax, eax
 10279ea:	e8 f1 af 02 00 	call	176113 <_runtime.gcWriteBarrier>
 10279ef:	48 89 c8 	mov	rax, rcx
 10279f2:	e9 2a ff ff ff 	jmp	-214 <_runtime.freedefer+0xd1>
 10279f7:	0f 57 c0 	xorps	xmm0, xmm0
 10279fa:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 10279ff:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 1027a08:	48 8d 05 01 7a 02 00 	lea	rax, [rip + 162305]
 1027a0f:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1027a14:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 1027a19:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1027a1e:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 1027a23:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027a27:	e8 54 90 02 00 	call	168020 <_runtime.systemstack>
 1027a2c:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1027a34:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1027a39:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1027a3e:	4c 8b 44 24 48 	mov	r8, qword ptr [rsp + 72]
 1027a43:	e9 97 fe ff ff 	jmp	-361 <_runtime.freedefer+0x8f>
 1027a48:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1027a4d:	48 83 c4 78 	add	rsp, 120
 1027a51:	c3 	ret
 1027a52:	48 83 c1 07 	add	rcx, 7
 1027a56:	48 c1 e9 04 	shr	rcx, 4
 1027a5a:	e9 36 fe ff ff 	jmp	-458 <_runtime.freedefer+0x45>
 1027a5f:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1027a64:	48 83 c4 78 	add	rsp, 120
 1027a68:	c3 	ret
 1027a69:	e8 62 00 00 00 	call	98 <_runtime.freedeferfn>
 1027a6e:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1027a76:	e9 01 fe ff ff 	jmp	-511 <_runtime.freedefer+0x2c>
 1027a7b:	e8 10 00 00 00 	call	16 <_runtime.freedeferpanic>
 1027a80:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1027a88:	e9 e4 fd ff ff 	jmp	-540 <_runtime.freedefer+0x21>
 1027a8d:	cc 	int3
 1027a8e:	cc 	int3
 1027a8f:	cc 	int3

_runtime.freedeferpanic:
 1027a90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027a99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1027a9d:	76 28 	jbe	40 <_runtime.freedeferpanic+0x37>
 1027a9f:	48 83 ec 18 	sub	rsp, 24
 1027aa3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1027aa8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1027aad:	48 8d 05 4b dd 04 00 	lea	rax, [rip + 318795]
 1027ab4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027ab8:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1027ac1:	e8 9a 12 00 00 	call	4762 <_runtime.throw>
 1027ac6:	90 	nop
 1027ac7:	e8 04 91 02 00 	call	168196 <_runtime.morestack_noctxt>
 1027acc:	eb c2 	jmp	-62 <_runtime.freedeferpanic>
 1027ace:	cc 	int3
 1027acf:	cc 	int3

_runtime.freedeferfn:
 1027ad0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027ad9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1027add:	76 28 	jbe	40 <_runtime.freedeferfn+0x37>
 1027adf:	48 83 ec 18 	sub	rsp, 24
 1027ae3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1027ae8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1027aed:	48 8d 05 51 d3 04 00 	lea	rax, [rip + 316241]
 1027af4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027af8:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 1027b01:	e8 5a 12 00 00 	call	4698 <_runtime.throw>
 1027b06:	90 	nop
 1027b07:	e8 c4 90 02 00 	call	168132 <_runtime.morestack_noctxt>
 1027b0c:	eb c2 	jmp	-62 <_runtime.freedeferfn>
 1027b0e:	cc 	int3
 1027b0f:	cc 	int3

_runtime.deferreturn:
 1027b10:	48 83 ec 48 	sub	rsp, 72
 1027b14:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1027b19:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1027b1e:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027b27:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 1027b2b:	48 85 d2 	test	rdx, rdx
 1027b2e:	0f 84 63 01 00 00 	je	355 <_runtime.deferreturn+0x187>
 1027b34:	48 8d 5c 24 50 	lea	rbx, [rsp + 80]
 1027b39:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 1027b3d:	0f 85 4a 01 00 00 	jne	330 <_runtime.deferreturn+0x17d>
 1027b43:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1027b48:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1027b4d:	48 8d 79 28 	lea	rdi, [rcx + 40]
 1027b51:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1027b56:	80 7a 06 00 	cmp	byte ptr [rdx + 6], 0
 1027b5a:	0f 85 dc 00 00 00 	jne	220 <_runtime.deferreturn+0x12c>
 1027b60:	8b 1a 	mov	ebx, dword ptr [rdx]
 1027b62:	85 db 	test	ebx, ebx
 1027b64:	0f 85 84 00 00 00 	jne	132 <_runtime.deferreturn+0xde>
 1027b6a:	48 8b 5a 18 	mov	rbx, qword ptr [rdx + 24]
 1027b6e:	83 3d 8b fd 0c 00 00 	cmp	dword ptr [rip + 851339], 0
 1027b75:	75 5e 	jne	94 <_runtime.deferreturn+0xc5>
 1027b77:	48 c7 42 18 00 00 00 00 	mov	qword ptr [rdx + 24], 0
 1027b7f:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1027b84:	84 01 	test	byte ptr [rcx], al
 1027b86:	48 8b 42 28 	mov	rax, qword ptr [rdx + 40]
 1027b8a:	83 3d 6f fd 0c 00 00 	cmp	dword ptr [rip + 851311], 0
 1027b91:	75 3b 	jne	59 <_runtime.deferreturn+0xbe>
 1027b93:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 1027b97:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1027b9b:	e8 b0 fc ff ff 	call	-848 <_runtime.freedefer>
 1027ba0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027ba5:	84 00 	test	byte ptr [rax], al
 1027ba7:	48 8d 4c 24 50 	lea	rcx, [rsp + 80]
 1027bac:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1027bb1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027bb5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1027bba:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027bbf:	e8 2c a6 02 00 	call	173612 <_runtime.jmpdefer>
 1027bc4:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1027bc9:	48 83 c4 48 	add	rsp, 72
 1027bcd:	c3 	ret
 1027bce:	e8 0d ae 02 00 	call	175629 <_runtime.gcWriteBarrier>
 1027bd3:	eb c2 	jmp	-62 <_runtime.deferreturn+0x87>
 1027bd5:	48 8d 72 18 	lea	rsi, [rdx + 24]
 1027bd9:	48 89 f8 	mov	rax, rdi
 1027bdc:	48 89 f7 	mov	rdi, rsi
 1027bdf:	49 89 c0 	mov	r8, rax
 1027be2:	31 c0 	xor	eax, eax
 1027be4:	e8 f7 ad 02 00 	call	175607 <_runtime.gcWriteBarrier>
 1027be9:	4c 89 c7 	mov	rdi, r8
 1027bec:	eb 91 	jmp	-111 <_runtime.deferreturn+0x6f>
 1027bee:	83 fb 08 	cmp	ebx, 8
 1027bf1:	75 15 	jne	21 <_runtime.deferreturn+0xf8>
 1027bf3:	48 8d 5a 48 	lea	rbx, [rdx + 72]
 1027bf7:	84 03 	test	byte ptr [rbx], al
 1027bf9:	48 8b 5a 48 	mov	rbx, qword ptr [rdx + 72]
 1027bfd:	90 	nop
 1027bfe:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 1027c03:	e9 62 ff ff ff 	jmp	-158 <_runtime.deferreturn+0x5a>
 1027c08:	90 	nop
 1027c09:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1027c0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027c12:	48 8d 4a 48 	lea	rcx, [rdx + 72]
 1027c16:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1027c1b:	48 63 cb 	movsxd	rcx, ebx
 1027c1e:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1027c23:	e8 28 bf 02 00 	call	180008 <_runtime.memmove>
 1027c28:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1027c2d:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1027c32:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 1027c37:	e9 2e ff ff ff 	jmp	-210 <_runtime.deferreturn+0x5a>
 1027c3c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1027c40:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1027c45:	e8 d6 04 00 00 	call	1238 <_runtime.runOpenDeferFrame>
 1027c4a:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 1027c4f:	74 50 	je	80 <_runtime.deferreturn+0x191>
 1027c51:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1027c56:	84 01 	test	byte ptr [rcx], al
 1027c58:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1027c5d:	48 8b 42 28 	mov	rax, qword ptr [rdx + 40]
 1027c61:	83 3d 98 fc 0c 00 00 	cmp	dword ptr [rip + 851096], 0
 1027c68:	75 17 	jne	23 <_runtime.deferreturn+0x171>
 1027c6a:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 1027c6e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1027c72:	e8 d9 fb ff ff 	call	-1063 <_runtime.freedefer>
 1027c77:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1027c7c:	48 83 c4 48 	add	rsp, 72
 1027c80:	c3 	ret
 1027c81:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 1027c86:	e8 55 ad 02 00 	call	175445 <_runtime.gcWriteBarrier>
 1027c8b:	eb e1 	jmp	-31 <_runtime.deferreturn+0x15e>
 1027c8d:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1027c92:	48 83 c4 48 	add	rsp, 72
 1027c96:	c3 	ret
 1027c97:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1027c9c:	48 83 c4 48 	add	rsp, 72
 1027ca0:	c3 	ret
 1027ca1:	48 8d 05 2b ef 04 00 	lea	rax, [rip + 323371]
 1027ca8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027cac:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 1027cb5:	e8 a6 10 00 00 	call	4262 <_runtime.throw>
 1027cba:	90 	nop
 1027cbb:	cc 	int3
 1027cbc:	cc 	int3
 1027cbd:	cc 	int3
 1027cbe:	cc 	int3
 1027cbf:	cc 	int3

_runtime.preprintpanics:
 1027cc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027cc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1027ccd:	0f 86 9b 01 00 00 	jbe	411 <_runtime.preprintpanics+0x1ae>
 1027cd3:	48 83 ec 58 	sub	rsp, 88
 1027cd7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 1027cdc:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1027ce1:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1027ce8:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1027ced:	c6 44 24 37 00 	mov	byte ptr [rsp + 55], 0
 1027cf2:	48 8d 05 87 fc 04 00 	lea	rax, [rip + 326791]
 1027cf9:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1027cfe:	c6 44 24 37 01 	mov	byte ptr [rsp + 55], 1
 1027d03:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1027d08:	eb 04 	jmp	4 <_runtime.preprintpanics+0x4e>
 1027d0a:	48 8b 40 18 	mov	rax, qword ptr [rax + 24]
 1027d0e:	48 85 c0 	test	rax, rax
 1027d11:	0f 84 34 01 00 00 	je	308 <_runtime.preprintpanics+0x18b>
 1027d17:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1027d1b:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1027d1f:	48 85 d2 	test	rdx, rdx
 1027d22:	74 e6 	je	-26 <_runtime.preprintpanics+0x4a>
 1027d24:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1027d29:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1027d2e:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1027d33:	48 8d 05 a6 c7 03 00 	lea	rax, [rip + 247718]
 1027d3a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027d3e:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1027d43:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1027d48:	e8 63 00 fe ff 	call	-130973 <_runtime.assertE2I2>
 1027d4d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027d52:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1027d57:	80 7c 24 28 00 	cmp	byte ptr [rsp + 40], 0
 1027d5c:	74 57 	je	87 <_runtime.preprintpanics+0xf5>
 1027d5e:	48 8b 49 18 	mov	rcx, qword ptr [rcx + 24]
 1027d62:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027d66:	ff d1 	call	rcx
 1027d68:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027d6d:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1027d72:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1027d76:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027d7b:	e8 00 ff fd ff 	call	-131328 <_runtime.convTstring>
 1027d80:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027d85:	48 8d 0d 14 82 03 00 	lea	rcx, [rip + 229908]
 1027d8c:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1027d91:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 1027d95:	83 3d 64 fb 0c 00 00 	cmp	dword ptr [rip + 850788], 0
 1027d9c:	75 0c 	jne	12 <_runtime.preprintpanics+0xea>
 1027d9e:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 1027da2:	48 89 d0 	mov	rax, rdx
 1027da5:	e9 60 ff ff ff 	jmp	-160 <_runtime.preprintpanics+0x4a>
 1027daa:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 1027dae:	e8 2d ac 02 00 	call	175149 <_runtime.gcWriteBarrier>
 1027db3:	eb ed 	jmp	-19 <_runtime.preprintpanics+0xe2>
 1027db5:	48 8d 05 a4 c7 03 00 	lea	rax, [rip + 247716]
 1027dbc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027dc0:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1027dc5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1027dca:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1027dcf:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1027dd4:	e8 d7 ff fd ff 	call	-131113 <_runtime.assertE2I2>
 1027dd9:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027dde:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1027de3:	80 7c 24 28 00 	cmp	byte ptr [rsp + 40], 0
 1027de8:	75 0a 	jne	10 <_runtime.preprintpanics+0x134>
 1027dea:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1027def:	e9 16 ff ff ff 	jmp	-234 <_runtime.preprintpanics+0x4a>
 1027df4:	48 8b 49 18 	mov	rcx, qword ptr [rcx + 24]
 1027df8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027dfc:	ff d1 	call	rcx
 1027dfe:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027e03:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1027e08:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1027e0c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1027e11:	e8 6a fe fd ff 	call	-131478 <_runtime.convTstring>
 1027e16:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1027e1b:	48 8d 0d 7e 81 03 00 	lea	rcx, [rip + 229758]
 1027e22:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1027e27:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 1027e2b:	83 3d ce fa 0c 00 00 	cmp	dword ptr [rip + 850638], 0
 1027e32:	75 0c 	jne	12 <_runtime.preprintpanics+0x180>
 1027e34:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 1027e38:	48 89 d0 	mov	rax, rdx
 1027e3b:	e9 ca fe ff ff 	jmp	-310 <_runtime.preprintpanics+0x4a>
 1027e40:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 1027e44:	e8 97 ab 02 00 	call	174999 <_runtime.gcWriteBarrier>
 1027e49:	eb ed 	jmp	-19 <_runtime.preprintpanics+0x178>
 1027e4b:	c6 44 24 37 00 	mov	byte ptr [rsp + 55], 0
 1027e50:	e8 4b 77 02 00 	call	161611 <_runtime.preprintpanics.func1>
 1027e55:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1027e5a:	48 83 c4 58 	add	rsp, 88
 1027e5e:	c3 	ret
 1027e5f:	e8 ac fc ff ff 	call	-852 <_runtime.deferreturn>
 1027e64:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1027e69:	48 83 c4 58 	add	rsp, 88
 1027e6d:	c3 	ret
 1027e6e:	e8 5d 8d 02 00 	call	167261 <_runtime.morestack_noctxt>
 1027e73:	e9 48 fe ff ff 	jmp	-440 <_runtime.preprintpanics>
 1027e78:	cc 	int3
 1027e79:	cc 	int3
 1027e7a:	cc 	int3
 1027e7b:	cc 	int3
 1027e7c:	cc 	int3
 1027e7d:	cc 	int3
 1027e7e:	cc 	int3
 1027e7f:	cc 	int3

_runtime.printpanics:
 1027e80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027e89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1027e8d:	0f 86 04 01 00 00 	jbe	260 <_runtime.printpanics+0x117>
 1027e93:	48 83 ec 18 	sub	rsp, 24
 1027e97:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1027e9c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1027ea1:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027ea6:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 1027eaa:	48 85 c9 	test	rcx, rcx
 1027ead:	0f 85 9b 00 00 00 	jne	155 <_runtime.printpanics+0xce>
 1027eb3:	80 78 32 00 	cmp	byte ptr [rax + 50], 0
 1027eb7:	0f 85 87 00 00 00 	jne	135 <_runtime.printpanics+0xc4>
 1027ebd:	e8 de 25 00 00 	call	9694 <_runtime.printlock>
 1027ec2:	48 8d 05 46 b0 04 00 	lea	rax, [rip + 307270]
 1027ec9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027ecd:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1027ed6:	e8 05 2f 00 00 	call	12037 <_runtime.printstring>
 1027edb:	e8 40 26 00 00 	call	9792 <_runtime.printunlock>
 1027ee0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027ee5:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1027ee9:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1027eed:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1027ef1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1027ef6:	e8 75 e2 fd ff 	call	-138635 <_runtime.printany>
 1027efb:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027f00:	80 78 30 00 	cmp	byte ptr [rax + 48], 0
 1027f04:	75 19 	jne	25 <_runtime.printpanics+0x9f>
 1027f06:	e8 95 25 00 00 	call	9621 <_runtime.printlock>
 1027f0b:	e8 20 28 00 00 	call	10272 <_runtime.printnl>
 1027f10:	e8 0b 26 00 00 	call	9739 <_runtime.printunlock>
 1027f15:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1027f1a:	48 83 c4 18 	add	rsp, 24
 1027f1e:	c3 	ret
 1027f1f:	e8 7c 25 00 00 	call	9596 <_runtime.printlock>
 1027f24:	48 8d 05 4c b5 04 00 	lea	rax, [rip + 308556]
 1027f2b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027f2f:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1027f38:	e8 a3 2e 00 00 	call	11939 <_runtime.printstring>
 1027f3d:	e8 de 25 00 00 	call	9694 <_runtime.printunlock>
 1027f42:	eb c2 	jmp	-62 <_runtime.printpanics+0x86>
 1027f44:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1027f49:	48 83 c4 18 	add	rsp, 24
 1027f4d:	c3 	ret
 1027f4e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1027f52:	e8 29 ff ff ff 	call	-215 <_runtime.printpanics>
 1027f57:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027f5c:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 1027f60:	80 79 32 00 	cmp	byte ptr [rcx + 50], 0
 1027f64:	0f 85 49 ff ff ff 	jne	-183 <_runtime.printpanics+0x33>
 1027f6a:	e8 31 25 00 00 	call	9521 <_runtime.printlock>
 1027f6f:	48 8d 05 f0 ac 04 00 	lea	rax, [rip + 306416]
 1027f76:	48 89 04 24 	mov	qword ptr [rsp], rax
 1027f7a:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1027f83:	e8 58 2e 00 00 	call	11864 <_runtime.printstring>
 1027f88:	e8 93 25 00 00 	call	9619 <_runtime.printunlock>
 1027f8d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1027f92:	e9 1c ff ff ff 	jmp	-228 <_runtime.printpanics+0x33>
 1027f97:	e8 34 8c 02 00 	call	166964 <_runtime.morestack_noctxt>
 1027f9c:	e9 df fe ff ff 	jmp	-289 <_runtime.printpanics>
 1027fa1:	cc 	int3
 1027fa2:	cc 	int3
 1027fa3:	cc 	int3
 1027fa4:	cc 	int3
 1027fa5:	cc 	int3
 1027fa6:	cc 	int3
 1027fa7:	cc 	int3
 1027fa8:	cc 	int3
 1027fa9:	cc 	int3
 1027faa:	cc 	int3
 1027fab:	cc 	int3
 1027fac:	cc 	int3
 1027fad:	cc 	int3
 1027fae:	cc 	int3
 1027faf:	cc 	int3

_runtime.addOneOpenDeferFrame:
 1027fb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1027fb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1027fbd:	0f 86 85 00 00 00 	jbe	133 <_runtime.addOneOpenDeferFrame+0x98>
 1027fc3:	48 83 ec 38 	sub	rsp, 56
 1027fc7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1027fcc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1027fd1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1027fd6:	48 85 c0 	test	rax, rax
 1027fd9:	74 5a 	je	90 <_runtime.addOneOpenDeferFrame+0x85>
 1027fdb:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1027fe0:	31 d2 	xor	edx, edx
 1027fe2:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1027feb:	0f 57 c0 	xorps	xmm0, xmm0
 1027fee:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1027ff3:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1027ff8:	48 8d 1d 41 78 02 00 	lea	rbx, [rip + 161857]
 1027fff:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1028004:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1028009:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102800e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1028013:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1028018:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 102801d:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1028022:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028026:	e8 55 8a 02 00 	call	166485 <_runtime.systemstack>
 102802b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1028030:	48 83 c4 38 	add	rsp, 56
 1028034:	c3 	ret
 1028035:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 102803a:	48 8b 53 28 	mov	rdx, qword ptr [rbx + 40]
 102803e:	48 8b 4a 40 	mov	rcx, qword ptr [rdx + 64]
 1028042:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 1028046:	eb 9a 	jmp	-102 <_runtime.addOneOpenDeferFrame+0x32>
 1028048:	e8 83 8b 02 00 	call	166787 <_runtime.morestack_noctxt>
 102804d:	e9 5e ff ff ff 	jmp	-162 <_runtime.addOneOpenDeferFrame>
 1028052:	cc 	int3
 1028053:	cc 	int3
 1028054:	cc 	int3
 1028055:	cc 	int3
 1028056:	cc 	int3
 1028057:	cc 	int3
 1028058:	cc 	int3
 1028059:	cc 	int3
 102805a:	cc 	int3
 102805b:	cc 	int3
 102805c:	cc 	int3
 102805d:	cc 	int3
 102805e:	cc 	int3
 102805f:	cc 	int3

_runtime.readvarintUnsafe:
 1028060:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1028069:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102806d:	0f 86 9e 00 00 00 	jbe	158 <_runtime.readvarintUnsafe+0xb1>
 1028073:	48 83 ec 18 	sub	rsp, 24
 1028077:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102807c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1028081:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1028086:	31 c9 	xor	ecx, ecx
 1028088:	31 d2 	xor	edx, edx
 102808a:	eb 02 	jmp	2 <_runtime.readvarintUnsafe+0x2e>
 102808c:	89 d9 	mov	ecx, ebx
 102808e:	0f b6 18 	movzx	ebx, byte ptr [rax]
 1028091:	90 	nop
 1028092:	48 ff c0 	inc	rax
 1028095:	80 fb 80 	cmp	bl, -128
 1028098:	72 26 	jb	38 <_runtime.readvarintUnsafe+0x60>
 102809a:	48 85 d2 	test	rdx, rdx
 102809d:	7c 67 	jl	103 <_runtime.readvarintUnsafe+0xa6>
 102809f:	48 83 fa 20 	cmp	rdx, 32
 10280a3:	19 f6 	sbb	esi, esi
 10280a5:	0f ba f3 07 	btr	ebx, 7
 10280a9:	89 cf 	mov	edi, ecx
 10280ab:	48 89 d1 	mov	rcx, rdx
 10280ae:	d3 e3 	shl	ebx, cl
 10280b0:	21 f3 	and	ebx, esi
 10280b2:	01 fb 	add	ebx, edi
 10280b4:	48 8d 51 07 	lea	rdx, [rcx + 7]
 10280b8:	48 83 fa 1c 	cmp	rdx, 28
 10280bc:	7e ce 	jle	-50 <_runtime.readvarintUnsafe+0x2c>
 10280be:	eb 2a 	jmp	42 <_runtime.readvarintUnsafe+0x8a>
 10280c0:	48 85 d2 	test	rdx, rdx
 10280c3:	7c 46 	jl	70 <_runtime.readvarintUnsafe+0xab>
 10280c5:	48 83 fa 20 	cmp	rdx, 32
 10280c9:	19 f6 	sbb	esi, esi
 10280cb:	89 cf 	mov	edi, ecx
 10280cd:	48 89 d1 	mov	rcx, rdx
 10280d0:	d3 e3 	shl	ebx, cl
 10280d2:	21 f3 	and	ebx, esi
 10280d4:	8d 14 1f 	lea	edx, [rdi + rbx]
 10280d7:	89 54 24 28 	mov	dword ptr [rsp + 40], edx
 10280db:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10280e0:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10280e5:	48 83 c4 18 	add	rsp, 24
 10280e9:	c3 	ret
 10280ea:	48 8d 05 af 7e 03 00 	lea	rax, [rip + 229039]
 10280f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10280f5:	48 8d 05 f4 b8 05 00 	lea	rax, [rip + 375028]
 10280fc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028101:	e8 ba 04 00 00 	call	1210 <_runtime.gopanic>
 1028106:	e8 c5 f1 ff ff 	call	-3643 <_runtime.panicshift>
 102810b:	e8 c0 f1 ff ff 	call	-3648 <_runtime.panicshift>
 1028110:	90 	nop
 1028111:	e8 ba 8a 02 00 	call	166586 <_runtime.morestack_noctxt>
 1028116:	e9 45 ff ff ff 	jmp	-187 <_runtime.readvarintUnsafe>
 102811b:	cc 	int3
 102811c:	cc 	int3
 102811d:	cc 	int3
 102811e:	cc 	int3
 102811f:	cc 	int3

_runtime.runOpenDeferFrame:
 1028120:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1028129:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 102812e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1028132:	0f 86 6f 03 00 00 	jbe	879 <_runtime.runOpenDeferFrame+0x387>
 1028138:	48 81 ec 88 00 00 00 	sub	rsp, 136
 102813f:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1028147:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 102814f:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1028157:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102815b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102815f:	e8 fc fe ff ff 	call	-260 <_runtime.readvarintUnsafe>
 1028164:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1028169:	48 89 04 24 	mov	qword ptr [rsp], rax
 102816d:	e8 ee fe ff ff 	call	-274 <_runtime.readvarintUnsafe>
 1028172:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1028177:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 102817b:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1028180:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028184:	e8 d7 fe ff ff 	call	-297 <_runtime.readvarintUnsafe>
 1028189:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1028191:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 1028195:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 102819a:	48 29 d1 	sub	rcx, rdx
 102819d:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10281a2:	8b 74 24 08 	mov	esi, dword ptr [rsp + 8]
 10281a6:	0f b6 09 	movzx	ecx, byte ptr [rcx]
 10281a9:	48 ff ce 	dec	rsi
 10281ac:	eb 5a 	jmp	90 <_runtime.runOpenDeferFrame+0xe8>
 10281ae:	89 74 24 30 	mov	dword ptr [rsp + 48], esi
 10281b2:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10281b6:	e8 a5 fe ff ff 	call	-347 <_runtime.readvarintUnsafe>
 10281bb:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10281c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10281c4:	e8 97 fe ff ff 	call	-361 <_runtime.readvarintUnsafe>
 10281c9:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10281ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10281d2:	e8 89 fe ff ff 	call	-375 <_runtime.readvarintUnsafe>
 10281d7:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 10281db:	8d 70 01 	lea	esi, [rax + 1]
 10281de:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10281e3:	0f b6 44 24 25 	movzx	eax, byte ptr [rsp + 37]
 10281e8:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10281ed:	8b 54 24 28 	mov	edx, dword ptr [rsp + 40]
 10281f1:	39 d6 	cmp	esi, edx
 10281f3:	72 b9 	jb	-71 <_runtime.runOpenDeferFrame+0x8e>
 10281f5:	48 8d 71 ff 	lea	rsi, [rcx - 1]
 10281f9:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10281fe:	89 c1 	mov	ecx, eax
 1028200:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1028208:	48 85 f6 	test	rsi, rsi
 102820b:	0f 8c 8f 02 00 00 	jl	655 <_runtime.runOpenDeferFrame+0x380>
 1028211:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 1028216:	88 4c 24 25 	mov	byte ptr [rsp + 37], cl
 102821a:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102821e:	e8 3d fe ff ff 	call	-451 <_runtime.readvarintUnsafe>
 1028223:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 1028227:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 102822b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1028230:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1028234:	e8 27 fe ff ff 	call	-473 <_runtime.readvarintUnsafe>
 1028239:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102823e:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 1028242:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1028247:	48 89 04 24 	mov	qword ptr [rsp], rax
 102824b:	e8 10 fe ff ff 	call	-496 <_runtime.readvarintUnsafe>
 1028250:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1028255:	48 83 f9 20 	cmp	rcx, 32
 1028259:	19 c0 	sbb	eax, eax
 102825b:	8b 54 24 08 	mov	edx, dword ptr [rsp + 8]
 102825f:	89 54 24 28 	mov	dword ptr [rsp + 40], edx
 1028263:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 1028268:	be 01 00 00 00 	mov	esi, 1
 102826d:	d3 e6 	shl	esi, cl
 102826f:	21 c6 	and	esi, eax
 1028271:	0f b6 44 24 25 	movzx	eax, byte ptr [rsp + 37]
 1028276:	40 84 c6 	test	sil, al
 1028279:	75 07 	jne	7 <_runtime.runOpenDeferFrame+0x162>
 102827b:	31 f6 	xor	esi, esi
 102827d:	e9 6f ff ff ff 	jmp	-145 <_runtime.runOpenDeferFrame+0xd1>
 1028282:	4c 8b 84 24 98 00 00 00 	mov	r8, qword ptr [rsp + 152]
 102828a:	4d 8b 48 38 	mov	r9, qword ptr [r8 + 56]
 102828e:	4c 8b 54 24 48 	mov	r10, qword ptr [rsp + 72]
 1028293:	4d 29 d1 	sub	r9, r10
 1028296:	4d 8b 09 	mov	r9, qword ptr [r9]
 1028299:	49 8d 78 18 	lea	rdi, [r8 + 24]
 102829d:	83 3d 5c f6 0c 00 00 	cmp	dword ptr [rip + 849500], 0
 10282a4:	0f 85 e3 01 00 00 	jne	483 <_runtime.runOpenDeferFrame+0x36d>
 10282aa:	4d 89 48 18 	mov	qword ptr [r8 + 24], r9
 10282ae:	41 83 38 00 	cmp	dword ptr [r8], 0
 10282b2:	0f 85 cb 01 00 00 	jne	459 <_runtime.runOpenDeferFrame+0x363>
 10282b8:	45 31 d2 	xor	r10d, r10d
 10282bb:	40 88 74 24 27 	mov	byte ptr [rsp + 39], sil
 10282c0:	4c 89 4c 24 70 	mov	qword ptr [rsp + 112], r9
 10282c5:	48 89 7c 24 78 	mov	qword ptr [rsp + 120], rdi
 10282ca:	4c 89 54 24 68 	mov	qword ptr [rsp + 104], r10
 10282cf:	45 31 db 	xor	r11d, r11d
 10282d2:	e9 b5 00 00 00 	jmp	181 <_runtime.runOpenDeferFrame+0x26c>
 10282d7:	44 89 5c 24 2c 	mov	dword ptr [rsp + 44], r11d
 10282dc:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10282e0:	e8 7b fd ff ff 	call	-645 <_runtime.readvarintUnsafe>
 10282e5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10282ea:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 10282ee:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10282f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10282f7:	e8 64 fd ff ff 	call	-668 <_runtime.readvarintUnsafe>
 10282fc:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1028301:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 1028305:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 102830a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102830e:	e8 4d fd ff ff 	call	-691 <_runtime.readvarintUnsafe>
 1028313:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1028318:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 102831d:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 1028321:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 1028326:	48 01 d1 	add	rcx, rdx
 1028329:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 1028331:	48 8b 73 38 	mov	rsi, qword ptr [rbx + 56]
 1028335:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 102833a:	48 29 fe 	sub	rsi, rdi
 102833d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1028341:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1028346:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102834b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1028350:	e8 fb b7 02 00 	call	178171 <_runtime.memmove>
 1028355:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 1028359:	44 8d 58 01 	lea	r11d, [rax + 1]
 102835d:	0f b6 44 24 25 	movzx	eax, byte ptr [rsp + 37]
 1028362:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1028367:	8b 54 24 28 	mov	edx, dword ptr [rsp + 40]
 102836b:	0f b6 74 24 27 	movzx	esi, byte ptr [rsp + 39]
 1028370:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 1028375:	4c 8b 84 24 98 00 00 00 	mov	r8, qword ptr [rsp + 152]
 102837d:	4c 8b 4c 24 70 	mov	r9, qword ptr [rsp + 112]
 1028382:	4c 8b 54 24 68 	mov	r10, qword ptr [rsp + 104]
 1028387:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 102838c:	41 39 d3 	cmp	r11d, edx
 102838f:	0f 82 42 ff ff ff 	jb	-190 <_runtime.runOpenDeferFrame+0x1b7>
 1028395:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 102839a:	49 8b 48 38 	mov	rcx, qword ptr [r8 + 56]
 102839e:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10283a3:	48 29 d1 	sub	rcx, rdx
 10283a6:	f7 d6 	not	esi
 10283a8:	40 88 74 24 27 	mov	byte ptr [rsp + 39], sil
 10283ad:	21 f0 	and	eax, esi
 10283af:	88 44 24 26 	mov	byte ptr [rsp + 38], al
 10283b3:	88 01 	mov	byte ptr [rcx], al
 10283b5:	49 8b 48 20 	mov	rcx, qword ptr [r8 + 32]
 10283b9:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 10283be:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10283c2:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 10283c7:	4c 89 54 24 10 	mov	qword ptr [rsp + 16], r10
 10283cc:	8b 7c 24 34 	mov	edi, dword ptr [rsp + 52]
 10283d0:	89 7c 24 18 	mov	dword ptr [rsp + 24], edi
 10283d4:	e8 e7 00 00 00 	call	231 <_runtime.reflectcallSave>
 10283d9:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10283de:	48 85 c0 	test	rax, rax
 10283e1:	74 0a 	je	10 <_runtime.runOpenDeferFrame+0x2cd>
 10283e3:	80 78 31 00 	cmp	byte ptr [rax + 49], 0
 10283e7:	0f 85 8f 00 00 00 	jne	143 <_runtime.runOpenDeferFrame+0x35c>
 10283ed:	83 3d 0c f5 0c 00 00 	cmp	dword ptr [rip + 849164], 0
 10283f4:	75 78 	jne	120 <_runtime.runOpenDeferFrame+0x34e>
 10283f6:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 10283fe:	48 c7 40 18 00 00 00 00 	mov	qword ptr [rax + 24], 0
 1028406:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 102840b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102840f:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 1028413:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028418:	e8 a3 b4 02 00 	call	177315 <_runtime.memclrNoHeapPointers>
 102841d:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1028425:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 1028429:	48 85 c9 	test	rcx, rcx
 102842c:	74 06 	je	6 <_runtime.runOpenDeferFrame+0x314>
 102842e:	80 79 30 00 	cmp	byte ptr [rcx + 48], 0
 1028432:	75 14 	jne	20 <_runtime.runOpenDeferFrame+0x328>
 1028434:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1028439:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 102843e:	0f b6 44 24 26 	movzx	eax, byte ptr [rsp + 38]
 1028443:	e9 ad fd ff ff 	jmp	-595 <_runtime.runOpenDeferFrame+0xd5>
 1028448:	0f b6 44 24 25 	movzx	eax, byte ptr [rsp + 37]
 102844d:	0f b6 4c 24 27 	movzx	ecx, byte ptr [rsp + 39]
 1028452:	84 c1 	test	cl, al
 1028454:	0f 94 c0 	sete	al
 1028457:	88 84 24 a0 00 00 00 	mov	byte ptr [rsp + 160], al
 102845e:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1028466:	48 81 c4 88 00 00 00 	add	rsp, 136
 102846d:	c3 	ret
 102846e:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 1028473:	31 c0 	xor	eax, eax
 1028475:	e8 66 a5 02 00 	call	173414 <_runtime.gcWriteBarrier>
 102847a:	eb 8a 	jmp	-118 <_runtime.runOpenDeferFrame+0x2e6>
 102847c:	b8 01 00 00 00 	mov	eax, 1
 1028481:	eb d4 	jmp	-44 <_runtime.runOpenDeferFrame+0x337>
 1028483:	90 	nop
 1028484:	4d 8d 50 48 	lea	r10, [r8 + 72]
 1028488:	e9 2e fe ff ff 	jmp	-466 <_runtime.runOpenDeferFrame+0x19b>
 102848d:	41 89 c2 	mov	r10d, eax
 1028490:	4c 89 c8 	mov	rax, r9
 1028493:	e8 48 a5 02 00 	call	173384 <_runtime.gcWriteBarrier>
 1028498:	44 89 d0 	mov	eax, r10d
 102849b:	e9 0e fe ff ff 	jmp	-498 <_runtime.runOpenDeferFrame+0x18e>
 10284a0:	b8 01 00 00 00 	mov	eax, 1
 10284a5:	eb b0 	jmp	-80 <_runtime.runOpenDeferFrame+0x337>
 10284a7:	e8 24 87 02 00 	call	165668 <_runtime.morestack_noctxt>
 10284ac:	e9 6f fc ff ff 	jmp	-913 <_runtime.runOpenDeferFrame>
 10284b1:	cc 	int3
 10284b2:	cc 	int3
 10284b3:	cc 	int3
 10284b4:	cc 	int3
 10284b5:	cc 	int3
 10284b6:	cc 	int3
 10284b7:	cc 	int3
 10284b8:	cc 	int3
 10284b9:	cc 	int3
 10284ba:	cc 	int3
 10284bb:	cc 	int3
 10284bc:	cc 	int3
 10284bd:	cc 	int3
 10284be:	cc 	int3
 10284bf:	cc 	int3

_runtime.reflectcallSave:
 10284c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10284c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10284cd:	0f 86 df 00 00 00 	jbe	223 <_runtime.reflectcallSave+0xf2>
 10284d3:	48 83 ec 28 	sub	rsp, 40
 10284d7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10284dc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10284e1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10284e6:	48 85 c0 	test	rax, rax
 10284e9:	75 67 	jne	103 <_runtime.reflectcallSave+0x92>
 10284eb:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 10284f3:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10284f8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10284fd:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1028502:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1028507:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 102850b:	89 44 24 18 	mov	dword ptr [rsp + 24], eax
 102850f:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 1028513:	e8 c8 86 02 00 	call	165576 <_runtime.reflectcall>
 1028518:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102851d:	48 85 c0 	test	rax, rax
 1028520:	74 19 	je	25 <_runtime.reflectcallSave+0x7b>
 1028522:	48 c7 40 20 00 00 00 00 	mov	qword ptr [rax + 32], 0
 102852a:	83 3d cf f3 0c 00 00 	cmp	dword ptr [rip + 848847], 0
 1028531:	75 12 	jne	18 <_runtime.reflectcallSave+0x85>
 1028533:	48 c7 40 28 00 00 00 00 	mov	qword ptr [rax + 40], 0
 102853b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1028540:	48 83 c4 28 	add	rsp, 40
 1028544:	c3 	ret
 1028545:	48 8d 78 28 	lea	rdi, [rax + 40]
 1028549:	31 c0 	xor	eax, eax
 102854b:	e8 90 a4 02 00 	call	173200 <_runtime.gcWriteBarrier>
 1028550:	eb e9 	jmp	-23 <_runtime.reflectcallSave+0x7b>
 1028552:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102855a:	e8 a1 07 00 00 	call	1953 <_runtime.getargp>
 102855f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1028564:	83 3d 95 f3 0c 00 00 	cmp	dword ptr [rip + 848789], 0
 102856b:	75 36 	jne	54 <_runtime.reflectcallSave+0xe3>
 102856d:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1028572:	48 89 01 	mov	qword ptr [rcx], rax
 1028575:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 102857a:	48 89 51 20 	mov	qword ptr [rcx + 32], rdx
 102857e:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 1028583:	83 3d 76 f3 0c 00 00 	cmp	dword ptr [rip + 848758], 0
 102858a:	75 09 	jne	9 <_runtime.reflectcallSave+0xd5>
 102858c:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 1028590:	e9 56 ff ff ff 	jmp	-170 <_runtime.reflectcallSave+0x2b>
 1028595:	48 8d 79 28 	lea	rdi, [rcx + 40]
 1028599:	e8 42 a4 02 00 	call	173122 <_runtime.gcWriteBarrier>
 102859e:	e9 48 ff ff ff 	jmp	-184 <_runtime.reflectcallSave+0x2b>
 10285a3:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 10285a8:	e8 33 a4 02 00 	call	173107 <_runtime.gcWriteBarrier>
 10285ad:	48 89 f9 	mov	rcx, rdi
 10285b0:	eb c3 	jmp	-61 <_runtime.reflectcallSave+0xb5>
 10285b2:	e8 19 86 02 00 	call	165401 <_runtime.morestack_noctxt>
 10285b7:	e9 04 ff ff ff 	jmp	-252 <_runtime.reflectcallSave>
 10285bc:	cc 	int3
 10285bd:	cc 	int3
 10285be:	cc 	int3
 10285bf:	cc 	int3

_runtime.gopanic:
 10285c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10285c9:	48 8d 44 24 d0 	lea	rax, [rsp - 48]
 10285ce:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10285d2:	0f 86 17 07 00 00 	jbe	1815 <_runtime.gopanic+0x72f>
 10285d8:	48 81 ec b0 00 00 00 	sub	rsp, 176
 10285df:	48 89 ac 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbp
 10285e7:	48 8d ac 24 a8 00 00 00 	lea	rbp, [rsp + 168]
 10285ef:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10285f8:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10285fc:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 1028603:	0f 85 7c 06 00 00 	jne	1660 <_runtime.gopanic+0x6c5>
 1028609:	83 b9 f0 00 00 00 00 	cmp	dword ptr [rcx + 240], 0
 1028610:	0f 85 06 06 00 00 	jne	1542 <_runtime.gopanic+0x65c>
 1028616:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 102861b:	48 83 b9 00 01 00 00 00 	cmp	qword ptr [rcx + 256], 0
 1028623:	0f 85 15 05 00 00 	jne	1301 <_runtime.gopanic+0x57e>
 1028629:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 1028630:	0f 85 9f 04 00 00 	jne	1183 <_runtime.gopanic+0x515>
 1028636:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 102863f:	0f 57 c0 	xorps	xmm0, xmm0
 1028642:	0f 11 44 24 78 	movups	xmmword ptr [rsp + 120], xmm0
 1028647:	0f 11 84 24 88 00 00 00 	movups	xmmword ptr [rsp + 136], xmm0
 102864f:	0f 11 84 24 98 00 00 00 	movups	xmmword ptr [rsp + 152], xmm0
 1028657:	48 8b 8c 24 b8 00 00 00 	mov	rcx, qword ptr [rsp + 184]
 102865f:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 1028664:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 102866c:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 1028674:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 1028678:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 1028680:	48 8d 4c 24 70 	lea	rcx, [rsp + 112]
 1028685:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 1028689:	ba 01 00 00 00 	mov	edx, 1
 102868e:	48 8d 1d 2b f1 0c 00 	lea	rbx, [rip + 848171]
 1028695:	f0 	lock
 1028696:	0f c1 13 	xadd	dword ptr [rbx], edx
 1028699:	48 8d 94 24 b8 00 00 00 	lea	rdx, [rsp + 184]
 10286a1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10286a5:	48 8b b4 24 b0 00 00 00 	mov	rsi, qword ptr [rsp + 176]
 10286ad:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 10286b2:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10286b7:	e8 f4 f8 ff ff 	call	-1804 <_runtime.addOneOpenDeferFrame>
 10286bc:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10286c1:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 10286c5:	48 85 d2 	test	rdx, rdx
 10286c8:	0f 84 40 03 00 00 	je	832 <_runtime.gopanic+0x44e>
 10286ce:	48 8d 79 28 	lea	rdi, [rcx + 40]
 10286d2:	80 7a 04 00 	cmp	byte ptr [rdx + 4], 0
 10286d6:	74 1f 	je	31 <_runtime.gopanic+0x137>
 10286d8:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 10286dc:	48 85 db 	test	rbx, rbx
 10286df:	74 04 	je	4 <_runtime.gopanic+0x125>
 10286e1:	c6 43 31 01 	mov	byte ptr [rbx + 49], 1
 10286e5:	48 c7 42 20 00 00 00 00 	mov	qword ptr [rdx + 32], 0
 10286ed:	80 7a 06 00 	cmp	byte ptr [rdx + 6], 0
 10286f1:	0f 84 c2 02 00 00 	je	706 <_runtime.gopanic+0x3f9>
 10286f7:	48 89 7c 24 68 	mov	qword ptr [rsp + 104], rdi
 10286fc:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 1028701:	c6 42 04 01 	mov	byte ptr [rdx + 4], 1
 1028705:	48 8d 44 24 70 	lea	rax, [rsp + 112]
 102870a:	48 89 42 20 	mov	qword ptr [rdx + 32], rax
 102870e:	80 7a 06 00 	cmp	byte ptr [rdx + 6], 0
 1028712:	0f 84 44 02 00 00 	je	580 <_runtime.gopanic+0x39c>
 1028718:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102871c:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1028721:	e8 fa f9 ff ff 	call	-1542 <_runtime.runOpenDeferFrame>
 1028726:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 102872b:	84 c0 	test	al, al
 102872d:	0f 84 1f 02 00 00 	je	543 <_runtime.gopanic+0x392>
 1028733:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1028738:	48 8b 51 20 	mov	rdx, qword ptr [rcx + 32]
 102873c:	80 7a 30 00 	cmp	byte ptr [rdx + 48], 0
 1028740:	0f 84 e3 01 00 00 	je	483 <_runtime.gopanic+0x369>
 1028746:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 102874f:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1028754:	48 39 4a 28 	cmp	qword ptr [rdx + 40], rcx
 1028758:	0f 85 5e 03 00 00 	jne	862 <_runtime.gopanic+0x4fc>
 102875e:	48 c7 41 20 00 00 00 00 	mov	qword ptr [rcx + 32], 0
 1028766:	48 8b 59 10 	mov	rbx, qword ptr [rcx + 16]
 102876a:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 102876f:	48 8b 71 08 	mov	rsi, qword ptr [rcx + 8]
 1028773:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 1028778:	84 c0 	test	al, al
 102877a:	0f 85 3f 01 00 00 	jne	319 <_runtime.gopanic+0x2ff>
 1028780:	80 bc 24 a0 00 00 00 00 	cmp	byte ptr [rsp + 160], 0
 1028788:	0f 84 2e ff ff ff 	je	-210 <_runtime.gopanic+0xfc>
 102878e:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1028796:	48 89 4a 20 	mov	qword ptr [rdx + 32], rcx
 102879a:	48 85 c9 	test	rcx, rcx
 102879d:	74 10 	je	16 <_runtime.gopanic+0x1ef>
 102879f:	80 79 32 00 	cmp	byte ptr [rcx + 50], 0
 10287a3:	74 0a 	je	10 <_runtime.gopanic+0x1ef>
 10287a5:	80 79 31 00 	cmp	byte ptr [rcx + 49], 0
 10287a9:	0f 85 ce 02 00 00 	jne	718 <_runtime.gopanic+0x4bd>
 10287af:	b9 ff ff ff ff 	mov	ecx, 4294967295
 10287b4:	4c 8d 05 05 f0 0c 00 	lea	r8, [rip + 847877]
 10287bb:	f0 	lock
 10287bc:	41 0f c1 08 	xadd	dword ptr [r8], ecx
 10287c0:	84 c0 	test	al, al
 10287c2:	0f 84 b1 00 00 00 	je	177 <_runtime.gopanic+0x2b9>
 10287c8:	48 8b 4a 28 	mov	rcx, qword ptr [rdx + 40]
 10287cc:	31 c0 	xor	eax, eax
 10287ce:	eb 1b 	jmp	27 <_runtime.gopanic+0x22b>
 10287d0:	4c 8b 44 24 50 	mov	r8, qword ptr [rsp + 80]
 10287d5:	4c 89 c2 	mov	rdx, r8
 10287d8:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 10287dd:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 10287e2:	48 89 cf 	mov	rdi, rcx
 10287e5:	48 89 c1 	mov	rcx, rax
 10287e8:	48 89 f8 	mov	rax, rdi
 10287eb:	48 85 c9 	test	rcx, rcx
 10287ee:	0f 84 85 00 00 00 	je	133 <_runtime.gopanic+0x2b9>
 10287f4:	80 79 06 00 	cmp	byte ptr [rcx + 6], 0
 10287f8:	0f 84 b8 00 00 00 	je	184 <_runtime.gopanic+0x2f6>
 10287fe:	80 79 04 00 	cmp	byte ptr [rcx + 4], 0
 1028802:	75 75 	jne	117 <_runtime.gopanic+0x2b9>
 1028804:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1028809:	48 85 c0 	test	rax, rax
 102880c:	74 43 	je	67 <_runtime.gopanic+0x291>
 102880e:	4c 8b 41 28 	mov	r8, qword ptr [rcx + 40]
 1028812:	83 3d e7 f0 0c 00 00 	cmp	dword ptr [rip + 848103], 0
 1028819:	75 22 	jne	34 <_runtime.gopanic+0x27d>
 102881b:	4c 89 40 28 	mov	qword ptr [rax + 40], r8
 102881f:	48 8b 41 28 	mov	rax, qword ptr [rcx + 40]
 1028823:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1028828:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102882c:	e8 1f f0 ff ff 	call	-4065 <_runtime.freedefer>
 1028831:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1028836:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102883b:	eb 93 	jmp	-109 <_runtime.gopanic+0x210>
 102883d:	48 8d 78 28 	lea	rdi, [rax + 40]
 1028841:	49 89 c1 	mov	r9, rax
 1028844:	4c 89 c0 	mov	rax, r8
 1028847:	e8 94 a1 02 00 	call	172436 <_runtime.gcWriteBarrier>
 102884c:	4c 89 c8 	mov	rax, r9
 102884f:	eb ce 	jmp	-50 <_runtime.gopanic+0x25f>
 1028851:	4c 8b 41 28 	mov	r8, qword ptr [rcx + 40]
 1028855:	83 3d a4 f0 0c 00 00 	cmp	dword ptr [rip + 848036], 0
 102885c:	75 06 	jne	6 <_runtime.gopanic+0x2a4>
 102885e:	4c 89 42 28 	mov	qword ptr [rdx + 40], r8
 1028862:	eb bb 	jmp	-69 <_runtime.gopanic+0x25f>
 1028864:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1028869:	49 89 c1 	mov	r9, rax
 102886c:	4c 89 c0 	mov	rax, r8
 102886f:	e8 6c a1 02 00 	call	172396 <_runtime.gcWriteBarrier>
 1028874:	4c 89 c8 	mov	rax, r9
 1028877:	eb a6 	jmp	-90 <_runtime.gopanic+0x25f>
 1028879:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1028881:	48 89 42 20 	mov	qword ptr [rdx + 32], rax
 1028885:	eb 08 	jmp	8 <_runtime.gopanic+0x2cf>
 1028887:	48 8b 40 18 	mov	rax, qword ptr [rax + 24]
 102888b:	48 89 42 20 	mov	qword ptr [rdx + 32], rax
 102888f:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 1028893:	48 85 c0 	test	rax, rax
 1028896:	74 09 	je	9 <_runtime.gopanic+0x2e1>
 1028898:	80 78 31 00 	cmp	byte ptr [rax + 49], 0
 102889c:	75 e9 	jne	-23 <_runtime.gopanic+0x2c7>
 102889e:	48 85 c0 	test	rax, rax
 10288a1:	0f 85 9f 01 00 00 	jne	415 <_runtime.gopanic+0x486>
 10288a7:	c7 82 e0 00 00 00 00 00 00 00 	mov	dword ptr [rdx + 224], 0
 10288b1:	e9 90 01 00 00 	jmp	400 <_runtime.gopanic+0x486>
 10288b6:	48 8b 41 28 	mov	rax, qword ptr [rcx + 40]
 10288ba:	e9 11 ff ff ff 	jmp	-239 <_runtime.gopanic+0x210>
 10288bf:	83 3d 3a f0 0c 00 00 	cmp	dword ptr [rip + 847930], 0
 10288c6:	75 4e 	jne	78 <_runtime.gopanic+0x356>
 10288c8:	48 c7 41 18 00 00 00 00 	mov	qword ptr [rcx + 24], 0
 10288d0:	88 44 24 26 	mov	byte ptr [rsp + 38], al
 10288d4:	4c 8b 41 28 	mov	r8, qword ptr [rcx + 40]
 10288d8:	83 3d 21 f0 0c 00 00 	cmp	dword ptr [rip + 847905], 0
 10288df:	75 26 	jne	38 <_runtime.gopanic+0x347>
 10288e1:	4c 89 42 28 	mov	qword ptr [rdx + 40], r8
 10288e5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10288e9:	e8 62 ef ff ff 	call	-4254 <_runtime.freedefer>
 10288ee:	0f b6 44 24 26 	movzx	eax, byte ptr [rsp + 38]
 10288f3:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10288f8:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 10288fd:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1028902:	e9 79 fe ff ff 	jmp	-391 <_runtime.gopanic+0x1c0>
 1028907:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 102890c:	4c 89 c0 	mov	rax, r8
 102890f:	e8 cc a0 02 00 	call	172236 <_runtime.gcWriteBarrier>
 1028914:	eb cf 	jmp	-49 <_runtime.gopanic+0x325>
 1028916:	48 8d 79 18 	lea	rdi, [rcx + 24]
 102891a:	41 89 c0 	mov	r8d, eax
 102891d:	31 c0 	xor	eax, eax
 102891f:	e8 bc a0 02 00 	call	172220 <_runtime.gcWriteBarrier>
 1028924:	44 89 c0 	mov	eax, r8d
 1028927:	eb a7 	jmp	-89 <_runtime.gopanic+0x310>
 1028929:	88 44 24 27 	mov	byte ptr [rsp + 39], al
 102892d:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1028932:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028936:	0f 57 c0 	xorps	xmm0, xmm0
 1028939:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 102893e:	e8 6d f6 ff ff 	call	-2451 <_runtime.addOneOpenDeferFrame>
 1028943:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 1028948:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 102894d:	e9 f4 fd ff ff 	jmp	-524 <_runtime.gopanic+0x186>
 1028952:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1028957:	e9 ea fd ff ff 	jmp	-534 <_runtime.gopanic+0x186>
 102895c:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1028964:	e8 97 03 00 00 	call	919 <_runtime.getargp>
 1028969:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102896e:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1028973:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1028978:	8b 08 	mov	ecx, dword ptr [rax]
 102897a:	85 c9 	test	ecx, ecx
 102897c:	75 34 	jne	52 <_runtime.gopanic+0x3f2>
 102897e:	31 d2 	xor	edx, edx
 1028980:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 1028984:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102898c:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1028991:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1028996:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 102899a:	89 4c 24 1c 	mov	dword ptr [rsp + 28], ecx
 102899e:	e8 3d 82 02 00 	call	164413 <_runtime.reflectcall>
 10289a3:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10289a8:	b8 01 00 00 00 	mov	eax, 1
 10289ad:	e9 94 fd ff ff 	jmp	-620 <_runtime.gopanic+0x186>
 10289b2:	90 	nop
 10289b3:	48 8d 50 48 	lea	rdx, [rax + 72]
 10289b7:	eb c7 	jmp	-57 <_runtime.gopanic+0x3c0>
 10289b9:	83 3d 40 ef 0c 00 00 	cmp	dword ptr [rip + 847680], 0
 10289c0:	75 33 	jne	51 <_runtime.gopanic+0x435>
 10289c2:	48 c7 42 18 00 00 00 00 	mov	qword ptr [rdx + 24], 0
 10289ca:	48 8b 42 28 	mov	rax, qword ptr [rdx + 40]
 10289ce:	83 3d 2b ef 0c 00 00 	cmp	dword ptr [rip + 847659], 0
 10289d5:	75 17 	jne	23 <_runtime.gopanic+0x42e>
 10289d7:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 10289db:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10289df:	e8 6c ee ff ff 	call	-4500 <_runtime.freedefer>
 10289e4:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10289e9:	e9 ce fc ff ff 	jmp	-818 <_runtime.gopanic+0xfc>
 10289ee:	e8 ed 9f 02 00 	call	172013 <_runtime.gcWriteBarrier>
 10289f3:	eb e6 	jmp	-26 <_runtime.gopanic+0x41b>
 10289f5:	48 8d 5a 18 	lea	rbx, [rdx + 24]
 10289f9:	48 89 f8 	mov	rax, rdi
 10289fc:	48 89 df 	mov	rdi, rbx
 10289ff:	48 89 c6 	mov	rsi, rax
 1028a02:	31 c0 	xor	eax, eax
 1028a04:	e8 d7 9f 02 00 	call	171991 <_runtime.gcWriteBarrier>
 1028a09:	48 89 f7 	mov	rdi, rsi
 1028a0c:	eb bc 	jmp	-68 <_runtime.gopanic+0x40a>
 1028a0e:	48 8b 41 20 	mov	rax, qword ptr [rcx + 32]
 1028a12:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028a16:	e8 a5 f2 ff ff 	call	-3419 <_runtime.preprintpanics>
 1028a1b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1028a20:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 1028a24:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028a28:	e8 83 05 00 00 	call	1411 <_runtime.fatalpanic>
 1028a2d:	31 c0 	xor	eax, eax
 1028a2f:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 1028a36:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 1028a3e:	48 81 c4 b0 00 00 00 	add	rsp, 176
 1028a45:	c3 	ret
 1028a46:	48 89 b2 00 01 00 00 	mov	qword ptr [rdx + 256], rsi
 1028a4d:	48 89 9a 08 01 00 00 	mov	qword ptr [rdx + 264], rbx
 1028a54:	48 8d 05 b5 ef 04 00 	lea	rax, [rip + 323509]
 1028a5b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028a5f:	e8 9c 7f 02 00 	call	163740 <_runtime.mcall>
 1028a64:	48 8d 05 40 af 04 00 	lea	rax, [rip + 307008]
 1028a6b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028a6f:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1028a78:	e8 e3 02 00 00 	call	739 <_runtime.throw>
 1028a7d:	48 8b 41 28 	mov	rax, qword ptr [rcx + 40]
 1028a81:	48 89 82 00 01 00 00 	mov	qword ptr [rdx + 256], rax
 1028a88:	48 8b 41 20 	mov	rax, qword ptr [rcx + 32]
 1028a8c:	48 89 82 08 01 00 00 	mov	qword ptr [rdx + 264], rax
 1028a93:	48 8d 05 76 ef 04 00 	lea	rax, [rip + 323446]
 1028a9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028a9e:	e8 5d 7f 02 00 	call	163677 <_runtime.mcall>
 1028aa3:	48 8d 05 eb bf 04 00 	lea	rax, [rip + 311275]
 1028aaa:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028aae:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1028ab7:	e8 a4 02 00 00 	call	676 <_runtime.throw>
 1028abc:	48 8d 05 8a bf 04 00 	lea	rax, [rip + 311178]
 1028ac3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028ac7:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1028ad0:	e8 8b 02 00 00 	call	651 <_runtime.throw>
 1028ad5:	e8 c6 19 00 00 	call	6598 <_runtime.printlock>
 1028ada:	48 8d 05 2e a4 04 00 	lea	rax, [rip + 304174]
 1028ae1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028ae5:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1028aee:	e8 ed 22 00 00 	call	8941 <_runtime.printstring>
 1028af3:	e8 28 1a 00 00 	call	6696 <_runtime.printunlock>
 1028af8:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1028b00:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028b04:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1028b0c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028b11:	e8 5a d6 fd ff 	call	-141734 <_runtime.printany>
 1028b16:	e8 85 19 00 00 	call	6533 <_runtime.printlock>
 1028b1b:	e8 10 1c 00 00 	call	7184 <_runtime.printnl>
 1028b20:	e8 fb 19 00 00 	call	6651 <_runtime.printunlock>
 1028b25:	48 8d 05 31 b5 04 00 	lea	rax, [rip + 308529]
 1028b2c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028b30:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1028b39:	e8 22 02 00 00 	call	546 <_runtime.throw>
 1028b3e:	e8 5d 19 00 00 	call	6493 <_runtime.printlock>
 1028b43:	48 8d 05 c5 a3 04 00 	lea	rax, [rip + 304069]
 1028b4a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028b4e:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1028b57:	e8 84 22 00 00 	call	8836 <_runtime.printstring>
 1028b5c:	e8 bf 19 00 00 	call	6591 <_runtime.printunlock>
 1028b61:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1028b69:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028b6d:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1028b75:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028b7a:	e8 f1 d5 fd ff 	call	-141839 <_runtime.printany>
 1028b7f:	e8 1c 19 00 00 	call	6428 <_runtime.printlock>
 1028b84:	e8 a7 1b 00 00 	call	7079 <_runtime.printnl>
 1028b89:	e8 92 19 00 00 	call	6546 <_runtime.printunlock>
 1028b8e:	e8 0d 19 00 00 	call	6413 <_runtime.printlock>
 1028b93:	48 8d 05 26 b7 04 00 	lea	rax, [rip + 309030]
 1028b9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028b9e:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1028ba7:	e8 34 22 00 00 	call	8756 <_runtime.printstring>
 1028bac:	e8 6f 19 00 00 	call	6511 <_runtime.printunlock>
 1028bb1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1028bb6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1028bba:	48 8b 88 f8 00 00 00 	mov	rcx, qword ptr [rax + 248]
 1028bc1:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1028bc6:	48 8b 80 00 01 00 00 	mov	rax, qword ptr [rax + 256]
 1028bcd:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1028bd2:	e8 c9 18 00 00 	call	6345 <_runtime.printlock>
 1028bd7:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1028bdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028be0:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1028be5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028bea:	e8 f1 21 00 00 	call	8689 <_runtime.printstring>
 1028bef:	e8 2c 19 00 00 	call	6444 <_runtime.printunlock>
 1028bf4:	e8 a7 18 00 00 	call	6311 <_runtime.printlock>
 1028bf9:	e8 32 1b 00 00 	call	6962 <_runtime.printnl>
 1028bfe:	e8 1d 19 00 00 	call	6429 <_runtime.printunlock>
 1028c03:	48 8d 05 d2 bc 04 00 	lea	rax, [rip + 310482]
 1028c0a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028c0e:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1028c17:	e8 44 01 00 00 	call	324 <_runtime.throw>
 1028c1c:	e8 7f 18 00 00 	call	6271 <_runtime.printlock>
 1028c21:	48 8d 05 e7 a2 04 00 	lea	rax, [rip + 303847]
 1028c28:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028c2c:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1028c35:	e8 a6 21 00 00 	call	8614 <_runtime.printstring>
 1028c3a:	e8 e1 18 00 00 	call	6369 <_runtime.printunlock>
 1028c3f:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1028c47:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028c4b:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1028c53:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028c58:	e8 13 d5 fd ff 	call	-142061 <_runtime.printany>
 1028c5d:	e8 3e 18 00 00 	call	6206 <_runtime.printlock>
 1028c62:	e8 c9 1a 00 00 	call	6857 <_runtime.printnl>
 1028c67:	e8 b4 18 00 00 	call	6324 <_runtime.printunlock>
 1028c6c:	48 8d 05 c4 b3 04 00 	lea	rax, [rip + 308164]
 1028c73:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028c77:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1028c80:	e8 db 00 00 00 	call	219 <_runtime.throw>
 1028c85:	e8 16 18 00 00 	call	6166 <_runtime.printlock>
 1028c8a:	48 8d 05 7e a2 04 00 	lea	rax, [rip + 303742]
 1028c91:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028c95:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1028c9e:	e8 3d 21 00 00 	call	8509 <_runtime.printstring>
 1028ca3:	e8 78 18 00 00 	call	6264 <_runtime.printunlock>
 1028ca8:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1028cb0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028cb4:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1028cbc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028cc1:	e8 aa d4 fd ff 	call	-142166 <_runtime.printany>
 1028cc6:	e8 d5 17 00 00 	call	6101 <_runtime.printlock>
 1028ccb:	e8 60 1a 00 00 	call	6752 <_runtime.printnl>
 1028cd0:	e8 4b 18 00 00 	call	6219 <_runtime.printunlock>
 1028cd5:	48 8d 05 40 b7 04 00 	lea	rax, [rip + 309056]
 1028cdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028ce0:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 1028ce9:	e8 72 00 00 00 	call	114 <_runtime.throw>
 1028cee:	90 	nop
 1028cef:	e8 dc 7e 02 00 	call	163548 <_runtime.morestack_noctxt>
 1028cf4:	e9 c7 f8 ff ff 	jmp	-1849 <_runtime.gopanic>
 1028cf9:	cc 	int3
 1028cfa:	cc 	int3
 1028cfb:	cc 	int3
 1028cfc:	cc 	int3
 1028cfd:	cc 	int3
 1028cfe:	cc 	int3
 1028cff:	cc 	int3

_runtime.getargp:
 1028d00:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1028d05:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1028d0a:	c3 	ret
 1028d0b:	cc 	int3
 1028d0c:	cc 	int3
 1028d0d:	cc 	int3
 1028d0e:	cc 	int3
 1028d0f:	cc 	int3

_runtime.gorecover:
 1028d10:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1028d19:	48 8b 40 20 	mov	rax, qword ptr [rax + 32]
 1028d1d:	48 85 c0 	test	rax, rax
 1028d20:	74 06 	je	6 <_runtime.gorecover+0x18>
 1028d22:	80 78 32 00 	cmp	byte ptr [rax + 50], 0
 1028d26:	74 09 	je	9 <_runtime.gorecover+0x21>
 1028d28:	0f 57 c0 	xorps	xmm0, xmm0
 1028d2b:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1028d30:	c3 	ret
 1028d31:	80 78 30 00 	cmp	byte ptr [rax + 48], 0
 1028d35:	75 f1 	jne	-15 <_runtime.gorecover+0x18>
 1028d37:	48 8b 08 	mov	rcx, qword ptr [rax]
 1028d3a:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1028d3f:	48 39 ca 	cmp	rdx, rcx
 1028d42:	75 e4 	jne	-28 <_runtime.gorecover+0x18>
 1028d44:	c6 40 30 01 	mov	byte ptr [rax + 48], 1
 1028d48:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1028d4c:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1028d50:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1028d55:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1028d5a:	c3 	ret
 1028d5b:	cc 	int3
 1028d5c:	cc 	int3
 1028d5d:	cc 	int3
 1028d5e:	cc 	int3
 1028d5f:	cc 	int3

_runtime.throw:
 1028d60:	48 83 ec 28 	sub	rsp, 40
 1028d64:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1028d69:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1028d6e:	0f 57 c0 	xorps	xmm0, xmm0
 1028d71:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1028d76:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1028d7f:	48 8d 05 6a 6b 02 00 	lea	rax, [rip + 158570]
 1028d86:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1028d8b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1028d90:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1028d95:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1028d9a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1028d9f:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1028da4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028da8:	e8 d3 7c 02 00 	call	163027 <_runtime.systemstack>
 1028dad:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1028db6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1028dba:	83 b8 f4 00 00 00 00 	cmp	dword ptr [rax + 244], 0
 1028dc1:	75 0a 	jne	10 <_runtime.throw+0x6d>
 1028dc3:	c7 80 f4 00 00 00 01 00 00 00 	mov	dword ptr [rax + 244], 1
 1028dcd:	e8 6e 01 00 00 	call	366 <_runtime.fatalthrow>
 1028dd2:	31 c0 	xor	eax, eax
 1028dd4:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 1028ddb:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1028de0:	48 83 c4 28 	add	rsp, 40
 1028de4:	c3 	ret
 1028de5:	cc 	int3
 1028de6:	cc 	int3
 1028de7:	cc 	int3
 1028de8:	cc 	int3
 1028de9:	cc 	int3
 1028dea:	cc 	int3
 1028deb:	cc 	int3
 1028dec:	cc 	int3
 1028ded:	cc 	int3
 1028dee:	cc 	int3
 1028def:	cc 	int3

_runtime.recovery:
 1028df0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1028df9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1028dfd:	0f 86 28 01 00 00 	jbe	296 <_runtime.recovery+0x13b>
 1028e03:	48 83 ec 30 	sub	rsp, 48
 1028e07:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1028e0c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1028e11:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1028e16:	48 8b 88 00 01 00 00 	mov	rcx, qword ptr [rax + 256]
 1028e1d:	48 8b 90 08 01 00 00 	mov	rdx, qword ptr [rax + 264]
 1028e24:	48 85 c9 	test	rcx, rcx
 1028e27:	74 18 	je	24 <_runtime.recovery+0x51>
 1028e29:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1028e2e:	48 8b 18 	mov	rbx, qword ptr [rax]
 1028e31:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1028e36:	48 39 d9 	cmp	rcx, rbx
 1028e39:	72 35 	jb	53 <_runtime.recovery+0x80>
 1028e3b:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1028e3f:	72 2f 	jb	47 <_runtime.recovery+0x80>
 1028e41:	48 89 48 38 	mov	qword ptr [rax + 56], rcx
 1028e45:	48 89 50 40 	mov	qword ptr [rax + 64], rdx
 1028e49:	48 c7 40 60 00 00 00 00 	mov	qword ptr [rax + 96], 0
 1028e51:	48 c7 40 58 01 00 00 00 	mov	qword ptr [rax + 88], 1
 1028e59:	48 83 c0 38 	add	rax, 56
 1028e5d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028e61:	e8 3a 7b 02 00 	call	162618 <_runtime.gogo>
 1028e66:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1028e6b:	48 83 c4 30 	add	rsp, 48
 1028e6f:	c3 	ret
 1028e70:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1028e74:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1028e79:	e8 22 16 00 00 	call	5666 <_runtime.printlock>
 1028e7e:	48 8d 05 13 a3 04 00 	lea	rax, [rip + 303891]
 1028e85:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028e89:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1028e92:	e8 49 1f 00 00 	call	8009 <_runtime.printstring>
 1028e97:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1028e9c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028ea0:	e8 eb 1d 00 00 	call	7659 <_runtime.printhex>
 1028ea5:	48 8d 05 14 a2 04 00 	lea	rax, [rip + 303636]
 1028eac:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028eb0:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1028eb9:	e8 22 1f 00 00 	call	7970 <_runtime.printstring>
 1028ebe:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1028ec3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028ec7:	e8 c4 1d 00 00 	call	7620 <_runtime.printhex>
 1028ecc:	48 8d 05 a1 9d 04 00 	lea	rax, [rip + 302497]
 1028ed3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028ed7:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1028ee0:	e8 fb 1e 00 00 	call	7931 <_runtime.printstring>
 1028ee5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1028eea:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028eee:	e8 9d 1d 00 00 	call	7581 <_runtime.printhex>
 1028ef3:	48 8d 05 88 9d 04 00 	lea	rax, [rip + 302472]
 1028efa:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028efe:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1028f07:	e8 d4 1e 00 00 	call	7892 <_runtime.printstring>
 1028f0c:	e8 0f 16 00 00 	call	5647 <_runtime.printunlock>
 1028f11:	48 8d 05 67 a6 04 00 	lea	rax, [rip + 304743]
 1028f18:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028f1c:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1028f25:	e8 36 fe ff ff 	call	-458 <_runtime.throw>
 1028f2a:	90 	nop
 1028f2b:	e8 a0 7c 02 00 	call	162976 <_runtime.morestack_noctxt>
 1028f30:	e9 bb fe ff ff 	jmp	-325 <_runtime.recovery>
 1028f35:	cc 	int3
 1028f36:	cc 	int3
 1028f37:	cc 	int3
 1028f38:	cc 	int3
 1028f39:	cc 	int3
 1028f3a:	cc 	int3
 1028f3b:	cc 	int3
 1028f3c:	cc 	int3
 1028f3d:	cc 	int3
 1028f3e:	cc 	int3
 1028f3f:	cc 	int3

_runtime.fatalthrow:
 1028f40:	48 83 ec 30 	sub	rsp, 48
 1028f44:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1028f49:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1028f4e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1028f57:	0f 57 c0 	xorps	xmm0, xmm0
 1028f5a:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 1028f5f:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1028f64:	48 8d 0d 05 6a 02 00 	lea	rcx, [rip + 158213]
 1028f6b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1028f70:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1028f75:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1028f7a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1028f7f:	48 8d 44 24 38 	lea	rax, [rsp + 56]
 1028f84:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1028f89:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1028f8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1028f92:	e8 e9 7a 02 00 	call	162537 <_runtime.systemstack>
 1028f97:	31 c0 	xor	eax, eax
 1028f99:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 1028fa0:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1028fa5:	48 83 c4 30 	add	rsp, 48
 1028fa9:	c3 	ret
 1028faa:	cc 	int3
 1028fab:	cc 	int3
 1028fac:	cc 	int3
 1028fad:	cc 	int3
 1028fae:	cc 	int3
 1028faf:	cc 	int3

_runtime.fatalpanic:
 1028fb0:	48 83 ec 48 	sub	rsp, 72
 1028fb4:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1028fb9:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1028fbe:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1028fc7:	c6 44 24 0f 00 	mov	byte ptr [rsp + 15], 0
 1028fcc:	0f 57 c0 	xorps	xmm0, xmm0
 1028fcf:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1028fd4:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1028fd9:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 1028fde:	48 8d 0d 1b 6a 02 00 	lea	rcx, [rip + 158235]
 1028fe5:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1028fea:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1028fef:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1028ff4:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1028ff9:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1028ffe:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1029003:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1029008:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102900d:	48 8d 44 24 0f 	lea	rax, [rsp + 15]
 1029012:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1029017:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 102901c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029020:	e8 5b 7a 02 00 	call	162395 <_runtime.systemstack>
 1029025:	80 7c 24 0f 00 	cmp	byte ptr [rsp + 15], 0
 102902a:	74 00 	je	0 <_runtime.fatalpanic+0x7c>
 102902c:	48 8d 05 a5 e7 04 00 	lea	rax, [rip + 321445]
 1029033:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029037:	e8 44 7a 02 00 	call	162372 <_runtime.systemstack>
 102903c:	31 c0 	xor	eax, eax
 102903e:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 1029045:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 102904a:	48 83 c4 48 	add	rsp, 72
 102904e:	c3 	ret
 102904f:	cc 	int3

_runtime.startpanic_m:
 1029050:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029059:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102905d:	0f 86 81 01 00 00 	jbe	385 <_runtime.startpanic_m+0x194>
 1029063:	48 83 ec 20 	sub	rsp, 32
 1029067:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102906c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1029071:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102907a:	48 83 3d 9e e5 0c 00 00 	cmp	qword ptr [rip + 845214], 0
 1029082:	0f 84 2a 01 00 00 	je	298 <_runtime.startpanic_m+0x162>
 1029088:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102908c:	ff 81 f0 00 00 00 	inc	dword ptr [rcx + 240]
 1029092:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1029096:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 102909d:	7d 0a 	jge	10 <_runtime.startpanic_m+0x59>
 102909f:	c7 81 08 01 00 00 01 00 00 00 	mov	dword ptr [rcx + 264], 1
 10290a9:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10290ad:	8b 88 0c 01 00 00 	mov	ecx, dword ptr [rax + 268]
 10290b3:	85 c9 	test	ecx, ecx
 10290b5:	0f 84 9c 00 00 00 	je	156 <_runtime.startpanic_m+0x107>
 10290bb:	83 f9 01 	cmp	ecx, 1
 10290be:	74 5b 	je	91 <_runtime.startpanic_m+0xcb>
 10290c0:	83 f9 02 	cmp	ecx, 2
 10290c3:	74 1b 	je	27 <_runtime.startpanic_m+0x90>
 10290c5:	c7 04 24 05 00 00 00 	mov	dword ptr [rsp], 5
 10290cc:	e8 cf a0 01 00 	call	106703 <_runtime.exit>
 10290d1:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 10290d6:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10290db:	48 83 c4 20 	add	rsp, 32
 10290df:	c3 	ret
 10290e0:	c7 80 0c 01 00 00 03 00 00 00 	mov	dword ptr [rax + 268], 3
 10290ea:	e8 b1 13 00 00 	call	5041 <_runtime.printlock>
 10290ef:	48 8d 05 a7 ba 04 00 	lea	rax, [rip + 309927]
 10290f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10290fa:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 1029103:	e8 d8 1c 00 00 	call	7384 <_runtime.printstring>
 1029108:	e8 13 14 00 00 	call	5139 <_runtime.printunlock>
 102910d:	c7 04 24 04 00 00 00 	mov	dword ptr [rsp], 4
 1029114:	e8 87 a0 01 00 	call	106631 <_runtime.exit>
 1029119:	eb aa 	jmp	-86 <_runtime.startpanic_m+0x75>
 102911b:	c7 80 0c 01 00 00 02 00 00 00 	mov	dword ptr [rax + 268], 2
 1029125:	e8 76 13 00 00 	call	4982 <_runtime.printlock>
 102912a:	48 8d 05 19 af 04 00 	lea	rax, [rip + 306969]
 1029131:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029135:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102913e:	e8 9d 1c 00 00 	call	7325 <_runtime.printstring>
 1029143:	e8 d8 13 00 00 	call	5080 <_runtime.printunlock>
 1029148:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 102914d:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1029152:	48 83 c4 20 	add	rsp, 32
 1029156:	c3 	ret
 1029157:	c7 80 0c 01 00 00 01 00 00 00 	mov	dword ptr [rax + 268], 1
 1029161:	b8 01 00 00 00 	mov	eax, 1
 1029166:	48 8d 0d 4b e6 0c 00 	lea	rcx, [rip + 845387]
 102916d:	f0 	lock
 102916e:	0f c1 01 	xadd	dword ptr [rcx], eax
 1029171:	48 8d 05 08 e7 0c 00 	lea	rax, [rip + 845576]
 1029178:	48 89 04 24 	mov	qword ptr [rsp], rax
 102917c:	e8 af ef fd ff 	call	-135249 <_runtime.lock>
 1029181:	83 3d f4 e8 0c 00 00 	cmp	dword ptr [rip + 846068], 0
 1029188:	7e 1d 	jle	29 <_runtime.startpanic_m+0x157>
 102918a:	c6 04 24 01 	mov	byte ptr [rsp], 1
 102918e:	e8 9d d0 00 00 	call	53405 <_runtime.schedtrace>
 1029193:	e8 88 3b 00 00 	call	15240 <_runtime.freezetheworld>
 1029198:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 102919d:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10291a2:	48 83 c4 20 	add	rsp, 32
 10291a6:	c3 	ret
 10291a7:	83 3d ca e8 0c 00 00 	cmp	dword ptr [rip + 846026], 0
 10291ae:	7f da 	jg	-38 <_runtime.startpanic_m+0x13a>
 10291b0:	eb e1 	jmp	-31 <_runtime.startpanic_m+0x143>
 10291b2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10291b7:	e8 e4 12 00 00 	call	4836 <_runtime.printlock>
 10291bc:	48 8d 05 57 dc 04 00 	lea	rax, [rip + 318551]
 10291c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10291c7:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 10291d0:	e8 0b 1c 00 00 	call	7179 <_runtime.printstring>
 10291d5:	e8 46 13 00 00 	call	4934 <_runtime.printunlock>
 10291da:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10291df:	e9 a4 fe ff ff 	jmp	-348 <_runtime.startpanic_m+0x38>
 10291e4:	e8 e7 79 02 00 	call	162279 <_runtime.morestack_noctxt>
 10291e9:	e9 62 fe ff ff 	jmp	-414 <_runtime.startpanic_m>
 10291ee:	cc 	int3
 10291ef:	cc 	int3

_runtime.dopanic_m:
 10291f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10291f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10291fd:	0f 86 65 03 00 00 	jbe	869 <_runtime.dopanic_m+0x378>
 1029203:	48 83 ec 60 	sub	rsp, 96
 1029207:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 102920c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1029211:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1029216:	8b 88 e0 00 00 00 	mov	ecx, dword ptr [rax + 224]
 102921c:	85 c9 	test	ecx, ecx
 102921e:	0f 84 1c 01 00 00 	je	284 <_runtime.dopanic_m+0x150>
 1029224:	83 f9 20 	cmp	ecx, 32
 1029227:	0f 82 21 03 00 00 	jb	801 <_runtime.dopanic_m+0x35e>
 102922d:	31 d2 	xor	edx, edx
 102922f:	31 db 	xor	ebx, ebx
 1029231:	48 85 d2 	test	rdx, rdx
 1029234:	0f 84 db 02 00 00 	je	731 <_runtime.dopanic_m+0x325>
 102923a:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 102923f:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 1029244:	e8 57 12 00 00 	call	4695 <_runtime.printlock>
 1029249:	48 8d 05 cf 9d 04 00 	lea	rax, [rip + 302543]
 1029250:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029254:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 102925d:	e8 7e 1b 00 00 	call	7038 <_runtime.printstring>
 1029262:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1029267:	48 89 04 24 	mov	qword ptr [rsp], rax
 102926b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1029270:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1029275:	e8 66 1b 00 00 	call	7014 <_runtime.printstring>
 102927a:	e8 a1 12 00 00 	call	4769 <_runtime.printunlock>
 102927f:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1029284:	48 8b 88 00 01 00 00 	mov	rcx, qword ptr [rax + 256]
 102928b:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1029290:	48 8b 90 08 01 00 00 	mov	rdx, qword ptr [rax + 264]
 1029297:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 102929c:	48 8b 98 10 01 00 00 	mov	rbx, qword ptr [rax + 272]
 10292a3:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 10292a8:	e8 f3 11 00 00 	call	4595 <_runtime.printlock>
 10292ad:	48 8d 05 52 9b 04 00 	lea	rax, [rip + 301906]
 10292b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10292b8:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 10292c1:	e8 1a 1b 00 00 	call	6938 <_runtime.printstring>
 10292c6:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10292cb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10292cf:	e8 bc 19 00 00 	call	6588 <_runtime.printhex>
 10292d4:	48 8d 05 1f 9b 04 00 	lea	rax, [rip + 301855]
 10292db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10292df:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 10292e8:	e8 f3 1a 00 00 	call	6899 <_runtime.printstring>
 10292ed:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10292f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10292f6:	e8 95 19 00 00 	call	6549 <_runtime.printhex>
 10292fb:	48 8d 05 e5 99 04 00 	lea	rax, [rip + 301541]
 1029302:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029306:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 102930f:	e8 cc 1a 00 00 	call	6860 <_runtime.printstring>
 1029314:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1029319:	48 89 04 24 	mov	qword ptr [rsp], rax
 102931d:	e8 6e 19 00 00 	call	6510 <_runtime.printhex>
 1029322:	48 8d 05 59 99 04 00 	lea	rax, [rip + 301401]
 1029329:	48 89 04 24 	mov	qword ptr [rsp], rax
 102932d:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1029336:	e8 a5 1a 00 00 	call	6821 <_runtime.printstring>
 102933b:	e8 e0 11 00 00 	call	4576 <_runtime.printunlock>
 1029340:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1029349:	8b 0d 1d 1e 0a 00 	mov	ecx, dword ptr [rip + 663069]
 102934f:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1029353:	83 b8 f4 00 00 00 00 	cmp	dword ptr [rax + 244], 0
 102935a:	0f 8e a9 01 00 00 	jle	425 <_runtime.dopanic_m+0x319>
 1029360:	ba 01 00 00 00 	mov	edx, 1
 1029365:	89 4c 24 28 	mov	dword ptr [rsp + 40], ecx
 1029369:	0f b6 80 29 01 00 00 	movzx	eax, byte ptr [rax + 297]
 1029370:	c1 e9 02 	shr	ecx, 2
 1029373:	84 c0 	test	al, al
 1029375:	0f 45 c8 	cmovne	ecx, eax
 1029378:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1029381:	85 c9 	test	ecx, ecx
 1029383:	0f 8e 85 00 00 00 	jle	133 <_runtime.dopanic_m+0x21e>
 1029389:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 102938e:	48 8b 7e 30 	mov	rdi, qword ptr [rsi + 48]
 1029392:	48 39 b7 c0 00 00 00 	cmp	qword ptr [rdi + 192], rsi
 1029399:	41 0f 95 c0 	setne	r8b
 102939d:	41 09 d0 	or	r8d, edx
 10293a0:	44 88 44 24 27 	mov	byte ptr [rsp + 39], r8b
 10293a5:	48 39 37 	cmp	qword ptr [rdi], rsi
 10293a8:	0f 85 0e 01 00 00 	jne	270 <_runtime.dopanic_m+0x2cc>
 10293ae:	83 f9 02 	cmp	ecx, 2
 10293b1:	0f 8c ef 00 00 00 	jl	239 <_runtime.dopanic_m+0x2b6>
 10293b7:	e8 e4 10 00 00 	call	4324 <_runtime.printlock>
 10293bc:	48 8d 05 ef a6 04 00 	lea	rax, [rip + 304879]
 10293c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10293c7:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 10293d0:	e8 0b 1a 00 00 	call	6667 <_runtime.printstring>
 10293d5:	e8 46 11 00 00 	call	4422 <_runtime.printunlock>
 10293da:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10293df:	48 89 04 24 	mov	qword ptr [rsp], rax
 10293e3:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10293e8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10293ed:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10293f6:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10293fb:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1029400:	e8 bb 01 02 00 	call	131515 <_runtime.traceback>
 1029405:	80 3d 58 e3 0c 00 00 	cmp	byte ptr [rip + 844632], 0
 102940c:	74 75 	je	117 <_runtime.dopanic_m+0x293>
 102940e:	48 8d 05 6b e4 0c 00 	lea	rax, [rip + 844907]
 1029415:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029419:	e8 f2 ee fd ff 	call	-135438 <_runtime.unlock>
 102941e:	b8 ff ff ff ff 	mov	eax, 4294967295
 1029423:	48 8d 0d 8e e3 0c 00 	lea	rcx, [rip + 844686]
 102942a:	f0 	lock
 102942b:	0f c1 01 	xadd	dword ptr [rcx], eax
 102942e:	ff c8 	dec	eax
 1029430:	85 c0 	test	eax, eax
 1029432:	75 2d 	jne	45 <_runtime.dopanic_m+0x271>
 1029434:	48 8b 15 5d 4e 0a 00 	mov	rdx, qword ptr [rip + 675421]
 102943b:	48 85 d2 	test	rdx, rdx
 102943e:	75 1a 	jne	26 <_runtime.dopanic_m+0x26a>
 1029440:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1029444:	0f ba e0 00 	bt	eax, 0
 1029448:	0f 92 84 24 80 00 00 00 	setb	byte ptr [rsp + 128]
 1029450:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1029455:	48 83 c4 60 	add	rsp, 96
 1029459:	c3 	ret
 102945a:	48 8b 02 	mov	rax, qword ptr [rdx]
 102945d:	ff d0 	call	rax
 102945f:	eb df 	jmp	-33 <_runtime.dopanic_m+0x250>
 1029461:	48 8d 05 b0 e3 0c 00 	lea	rax, [rip + 844720]
 1029468:	48 89 04 24 	mov	qword ptr [rsp], rax
 102946c:	e8 bf ec fd ff 	call	-136001 <_runtime.lock>
 1029471:	48 8d 05 a0 e3 0c 00 	lea	rax, [rip + 844704]
 1029478:	48 89 04 24 	mov	qword ptr [rsp], rax
 102947c:	e8 af ec fd ff 	call	-136017 <_runtime.lock>
 1029481:	eb b1 	jmp	-79 <_runtime.dopanic_m+0x244>
 1029483:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 1029488:	84 c0 	test	al, al
 102948a:	74 82 	je	-126 <_runtime.dopanic_m+0x21e>
 102948c:	c6 05 d1 e2 0c 00 01 	mov	byte ptr [rip + 844497], 1
 1029493:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1029498:	48 89 04 24 	mov	qword ptr [rsp], rax
 102949c:	e8 7f 11 02 00 	call	135551 <_runtime.tracebackothers>
 10294a1:	e9 68 ff ff ff 	jmp	-152 <_runtime.dopanic_m+0x21e>
 10294a6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10294aa:	83 b8 f4 00 00 00 00 	cmp	dword ptr [rax + 244], 0
 10294b1:	0f 8f 00 ff ff ff 	jg	-256 <_runtime.dopanic_m+0x1c7>
 10294b7:	e9 49 ff ff ff 	jmp	-183 <_runtime.dopanic_m+0x215>
 10294bc:	e8 df 0f 00 00 	call	4063 <_runtime.printlock>
 10294c1:	e8 6a 12 00 00 	call	4714 <_runtime.printnl>
 10294c6:	e8 55 10 00 00 	call	4181 <_runtime.printunlock>
 10294cb:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10294d0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10294d4:	e8 87 0e 02 00 	call	134791 <_runtime.goroutineheader>
 10294d9:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10294de:	48 89 04 24 	mov	qword ptr [rsp], rax
 10294e2:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10294e7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10294ec:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10294f5:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10294fa:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10294ff:	e8 bc 00 02 00 	call	131260 <_runtime.traceback>
 1029504:	e9 fc fe ff ff 	jmp	-260 <_runtime.dopanic_m+0x215>
 1029509:	0f ba e1 01 	bt	ecx, 1
 102950d:	0f 92 c2 	setb	dl
 1029510:	e9 50 fe ff ff 	jmp	-432 <_runtime.dopanic_m+0x175>
 1029515:	89 4c 24 2c 	mov	dword ptr [rsp + 44], ecx
 1029519:	e8 82 0f 00 00 	call	3970 <_runtime.printlock>
 102951e:	48 8d 05 fa 9a 04 00 	lea	rax, [rip + 301818]
 1029525:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029529:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1029532:	e8 a9 18 00 00 	call	6313 <_runtime.printstring>
 1029537:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 102953b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102953f:	e8 4c 17 00 00 	call	5964 <_runtime.printhex>
 1029544:	e8 d7 0f 00 00 	call	4055 <_runtime.printunlock>
 1029549:	e9 31 fd ff ff 	jmp	-719 <_runtime.dopanic_m+0x8f>
 102954e:	48 8d 34 49 	lea	rsi, [rcx + 2*rcx]
 1029552:	48 8d 3d 47 39 0a 00 	lea	rdi, [rip + 670023]
 1029559:	48 8b 5c f7 08 	mov	rbx, qword ptr [rdi + 8*rsi + 8]
 102955e:	48 8b 54 f7 10 	mov	rdx, qword ptr [rdi + 8*rsi + 16]
 1029563:	e9 c9 fc ff ff 	jmp	-823 <_runtime.dopanic_m+0x41>
 1029568:	e8 63 76 02 00 	call	161379 <_runtime.morestack_noctxt>
 102956d:	e9 7e fc ff ff 	jmp	-898 <_runtime.dopanic_m>
 1029572:	cc 	int3
 1029573:	cc 	int3
 1029574:	cc 	int3
 1029575:	cc 	int3
 1029576:	cc 	int3
 1029577:	cc 	int3
 1029578:	cc 	int3
 1029579:	cc 	int3
 102957a:	cc 	int3
 102957b:	cc 	int3
 102957c:	cc 	int3
 102957d:	cc 	int3
 102957e:	cc 	int3
 102957f:	cc 	int3

_runtime.shouldPushSigpanic:
 1029580:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029589:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102958d:	0f 86 99 00 00 00 	jbe	153 <_runtime.shouldPushSigpanic+0xac>
 1029593:	48 83 ec 20 	sub	rsp, 32
 1029597:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102959c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10295a1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10295a6:	48 85 c0 	test	rax, rax
 10295a9:	74 72 	je	114 <_runtime.shouldPushSigpanic+0x9d>
 10295ab:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10295b0:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 10295b4:	80 b9 18 01 00 00 00 	cmp	byte ptr [rcx + 280], 0
 10295bb:	74 4c 	je	76 <_runtime.shouldPushSigpanic+0x89>
 10295bd:	b8 01 00 00 00 	mov	eax, 1
 10295c2:	84 c0 	test	al, al
 10295c4:	75 34 	jne	52 <_runtime.shouldPushSigpanic+0x7a>
 10295c6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10295cb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10295cf:	e8 9c 85 01 00 	call	99740 <_runtime.findfunc>
 10295d4:	48 83 7c 24 08 00 	cmp	qword ptr [rsp + 8], 0
 10295da:	74 0f 	je	15 <_runtime.shouldPushSigpanic+0x6b>
 10295dc:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 10295e1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10295e6:	48 83 c4 20 	add	rsp, 32
 10295ea:	c3 	ret
 10295eb:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 10295f0:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10295f5:	48 83 c4 20 	add	rsp, 32
 10295f9:	c3 	ret
 10295fa:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 10295ff:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1029604:	48 83 c4 20 	add	rsp, 32
 1029608:	c3 	ret
 1029609:	48 89 04 24 	mov	qword ptr [rsp], rax
 102960d:	e8 5e 85 01 00 	call	99678 <_runtime.findfunc>
 1029612:	48 83 7c 24 08 00 	cmp	qword ptr [rsp + 8], 0
 1029618:	0f 95 c0 	setne	al
 102961b:	eb a5 	jmp	-91 <_runtime.shouldPushSigpanic+0x42>
 102961d:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 1029622:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1029627:	48 83 c4 20 	add	rsp, 32
 102962b:	c3 	ret
 102962c:	e8 9f 75 02 00 	call	161183 <_runtime.morestack_noctxt>
 1029631:	e9 4a ff ff ff 	jmp	-182 <_runtime.shouldPushSigpanic>
 1029636:	cc 	int3
 1029637:	cc 	int3
 1029638:	cc 	int3
 1029639:	cc 	int3
 102963a:	cc 	int3
 102963b:	cc 	int3
 102963c:	cc 	int3
 102963d:	cc 	int3
 102963e:	cc 	int3
 102963f:	cc 	int3

_runtime.suspendG:
 1029640:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029649:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 102964d:	0f 86 ca 05 00 00 	jbe	1482 <_runtime.suspendG+0x5dd>
 1029653:	48 83 ec 70 	sub	rsp, 112
 1029657:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 102965c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1029661:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102966a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102966e:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 1029675:	48 85 c0 	test	rax, rax
 1029678:	0f 84 1b 04 00 00 	je	1051 <_runtime.suspendG+0x459>
 102967e:	8b 80 90 00 00 00 	mov	eax, dword ptr [rax + 144]
 1029684:	83 f8 02 	cmp	eax, 2
 1029687:	0f 94 c0 	sete	al
 102968a:	84 c0 	test	al, al
 102968c:	0f 85 71 05 00 00 	jne	1393 <_runtime.suspendG+0x5c3>
 1029692:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1029697:	31 c9 	xor	ecx, ecx
 1029699:	31 d2 	xor	edx, edx
 102969b:	31 db 	xor	ebx, ebx
 102969d:	31 f6 	xor	esi, esi
 102969f:	31 ff 	xor	edi, edi
 10296a1:	45 31 c0 	xor	r8d, r8d
 10296a4:	eb 35 	jmp	53 <_runtime.suspendG+0x9b>
 10296a6:	4c 8b 4c 24 40 	mov	r9, qword ptr [rsp + 64]
 10296ab:	49 8d 79 01 	lea	rdi, [r9 + 1]
 10296af:	4c 8b 4c 24 78 	mov	r9, qword ptr [rsp + 120]
 10296b4:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 10296b9:	44 8b 5c 24 2c 	mov	r11d, dword ptr [rsp + 44]
 10296be:	4c 8b 64 24 60 	mov	r12, qword ptr [rsp + 96]
 10296c3:	44 0f b6 6c 24 1e 	movzx	r13d, byte ptr [rsp + 30]
 10296c9:	44 89 e9 	mov	ecx, r13d
 10296cc:	4c 89 e2 	mov	rdx, r12
 10296cf:	44 89 db 	mov	ebx, r11d
 10296d2:	4c 89 d6 	mov	rsi, r10
 10296d5:	49 89 c0 	mov	r8, rax
 10296d8:	4c 89 c8 	mov	rax, r9
 10296db:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 10296e0:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 10296e5:	89 5c 24 2c 	mov	dword ptr [rsp + 44], ebx
 10296e9:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 10296ee:	88 4c 24 1e 	mov	byte ptr [rsp + 30], cl
 10296f2:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 10296f7:	44 8b 88 90 00 00 00 	mov	r9d, dword ptr [rax + 144]
 10296fe:	41 83 f9 04 	cmp	r9d, 4
 1029702:	0f 87 fc 02 00 00 	ja	764 <_runtime.suspendG+0x3c4>
 1029708:	41 83 f9 01 	cmp	r9d, 1
 102970c:	0f 84 66 02 00 00 	je	614 <_runtime.suspendG+0x338>
 1029712:	41 83 f9 02 	cmp	r9d, 2
 1029716:	0f 85 42 02 00 00 	jne	578 <_runtime.suspendG+0x31e>
 102971c:	80 b8 b2 00 00 00 00 	cmp	byte ptr [rax + 178], 0
 1029723:	0f 84 2d 02 00 00 	je	557 <_runtime.suspendG+0x316>
 1029729:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1029730:	0f 84 18 02 00 00 	je	536 <_runtime.suspendG+0x30e>
 1029736:	48 81 78 10 de fa ff ff 	cmp	qword ptr [rax + 16], -1314
 102973e:	0f 85 02 02 00 00 	jne	514 <_runtime.suspendG+0x306>
 1029744:	48 39 50 30 	cmp	qword ptr [rax + 48], rdx
 1029748:	0f 85 f0 01 00 00 	jne	496 <_runtime.suspendG+0x2fe>
 102974e:	44 8b 8a 38 03 00 00 	mov	r9d, dword ptr [rdx + 824]
 1029755:	44 39 cb 	cmp	ebx, r9d
 1029758:	41 0f 94 c1 	sete	r9b
 102975c:	45 84 c9 	test	r9b, r9b
 102975f:	74 75 	je	117 <_runtime.suspendG+0x196>
 1029761:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 1029766:	89 5c 24 2c 	mov	dword ptr [rsp + 44], ebx
 102976a:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 102976f:	88 4c 24 1e 	mov	byte ptr [rsp + 30], cl
 1029773:	48 85 ff 	test	rdi, rdi
 1029776:	74 4c 	je	76 <_runtime.suspendG+0x184>
 1029778:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 102977d:	e8 3e 9b 01 00 	call	105278 <_runtime.nanotime1>
 1029782:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1029787:	48 39 04 24 	cmp	qword ptr [rsp], rax
 102978b:	7d 16 	jge	22 <_runtime.suspendG+0x163>
 102978d:	c7 04 24 0a 00 00 00 	mov	dword ptr [rsp], 10
 1029794:	e8 37 8a 02 00 	call	166455 <_runtime.procyield>
 1029799:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102979e:	e9 03 ff ff ff 	jmp	-253 <_runtime.suspendG+0x66>
 10297a3:	90 	nop
 10297a4:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 10297ab:	e8 30 9a 01 00 	call	105008 <_runtime.usleep>
 10297b0:	e8 0b 9b 01 00 	call	105227 <_runtime.nanotime1>
 10297b5:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10297b9:	48 05 88 13 00 00 	add	rax, 5000
 10297bf:	e9 e2 fe ff ff 	jmp	-286 <_runtime.suspendG+0x66>
 10297c4:	e8 f7 9a 01 00 	call	105207 <_runtime.nanotime1>
 10297c9:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10297cd:	4c 8d 80 10 27 00 00 	lea	r8, [rax + 10000]
 10297d4:	eb a2 	jmp	-94 <_runtime.suspendG+0x138>
 10297d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10297da:	48 b9 02 00 00 00 02 10 00 00 	movabs	rcx, 17600775979010
 10297e4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10297e9:	e8 42 3a 00 00 	call	14914 <_runtime.castogscanstatus>
 10297ee:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 10297f3:	0f 84 1e 01 00 00 	je	286 <_runtime.suspendG+0x2d7>
 10297f9:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10297fe:	66 c7 80 b1 00 00 00 01 01 	mov	word ptr [rax + 177], 257
 1029807:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102980f:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1029813:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1029818:	8b 91 38 03 00 00 	mov	edx, dword ptr [rcx + 824]
 102981e:	89 54 24 28 	mov	dword ptr [rsp + 40], edx
 1029822:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1029827:	48 39 cb 	cmp	rbx, rcx
 102982a:	0f 84 d9 00 00 00 	je	217 <_runtime.suspendG+0x2c9>
 1029830:	bb 01 00 00 00 	mov	ebx, 1
 1029835:	88 5c 24 1f 	mov	byte ptr [rsp + 31], bl
 1029839:	48 89 04 24 	mov	qword ptr [rsp], rax
 102983d:	48 b9 02 10 00 00 02 00 00 00 	movabs	rcx, 8589938690
 1029847:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102984c:	e8 7f 35 00 00 	call	13695 <_runtime.casfrom_Gscanstatus>
 1029851:	83 3d 2c e2 0c 00 00 	cmp	dword ptr [rip + 844332], 0
 1029858:	75 09 	jne	9 <_runtime.suspendG+0x223>
 102985a:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 102985f:	84 c0 	test	al, al
 1029861:	75 2a 	jne	42 <_runtime.suspendG+0x24d>
 1029863:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1029868:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 102986d:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 1029872:	0f b6 4c 24 1e 	movzx	ecx, byte ptr [rsp + 30]
 1029877:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 102987c:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 1029880:	48 89 c6 	mov	rsi, rax
 1029883:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1029888:	e9 d4 fe ff ff 	jmp	-300 <_runtime.suspendG+0x121>
 102988d:	90 	nop
 102988e:	e8 2d 9a 01 00 	call	105005 <_runtime.nanotime1>
 1029893:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1029897:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102989c:	48 39 c8 	cmp	rax, rcx
 102989f:	7c 56 	jl	86 <_runtime.suspendG+0x2b7>
 10298a1:	90 	nop
 10298a2:	48 89 c1 	mov	rcx, rax
 10298a5:	31 c0 	xor	eax, eax
 10298a7:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10298ac:	bb 01 00 00 00 	mov	ebx, 1
 10298b1:	f0 	lock
 10298b2:	0f b1 9a 3c 03 00 00 	cmpxchg	dword ptr [rdx + 828], ebx
 10298b9:	40 0f 94 c6 	sete	sil
 10298bd:	40 84 f6 	test	sil, sil
 10298c0:	75 09 	jne	9 <_runtime.suspendG+0x28b>
 10298c2:	48 8d 81 88 13 00 00 	lea	rax, [rcx + 5000]
 10298c9:	eb 9d 	jmp	-99 <_runtime.suspendG+0x228>
 10298cb:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10298d0:	90 	nop
 10298d1:	48 8b 42 48 	mov	rax, qword ptr [rdx + 72]
 10298d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10298d9:	c7 44 24 08 10 00 00 00 	mov	dword ptr [rsp + 8], 16
 10298e1:	e8 0a 96 01 00 	call	103946 <_runtime.pthread_kill>
 10298e6:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10298eb:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10298f0:	bb 01 00 00 00 	mov	ebx, 1
 10298f5:	eb cb 	jmp	-53 <_runtime.suspendG+0x282>
 10298f7:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10298fc:	bb 01 00 00 00 	mov	ebx, 1
 1029901:	48 89 c8 	mov	rax, rcx
 1029904:	e9 5f ff ff ff 	jmp	-161 <_runtime.suspendG+0x228>
 1029909:	8b 74 24 2c 	mov	esi, dword ptr [rsp + 44]
 102990d:	39 d6 	cmp	esi, edx
 102990f:	0f 95 c3 	setne	bl
 1029912:	e9 1e ff ff ff 	jmp	-226 <_runtime.suspendG+0x1f5>
 1029917:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 102991c:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 1029921:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 1029926:	0f b6 4c 24 1e 	movzx	ecx, byte ptr [rsp + 30]
 102992b:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1029930:	8b 5c 24 2c 	mov	ebx, dword ptr [rsp + 44]
 1029934:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1029939:	e9 23 fe ff ff 	jmp	-477 <_runtime.suspendG+0x121>
 102993e:	45 31 c9 	xor	r9d, r9d
 1029941:	e9 16 fe ff ff 	jmp	-490 <_runtime.suspendG+0x11c>
 1029946:	45 31 c9 	xor	r9d, r9d
 1029949:	e9 0e fe ff ff 	jmp	-498 <_runtime.suspendG+0x11c>
 102994e:	45 31 c9 	xor	r9d, r9d
 1029951:	e9 06 fe ff ff 	jmp	-506 <_runtime.suspendG+0x11c>
 1029956:	45 31 c9 	xor	r9d, r9d
 1029959:	e9 fe fd ff ff 	jmp	-514 <_runtime.suspendG+0x11c>
 102995e:	45 8d 51 fd 	lea	r10d, [r9 - 3]
 1029962:	41 83 fa 01 	cmp	r10d, 1
 1029966:	76 10 	jbe	16 <_runtime.suspendG+0x338>
 1029968:	41 0f ba e1 0c 	bt	r9d, 12
 102996d:	0f 82 ee fd ff ff 	jb	-530 <_runtime.suspendG+0x121>
 1029973:	e9 28 01 00 00 	jmp	296 <_runtime.suspendG+0x460>
 1029978:	88 4c 24 1e 	mov	byte ptr [rsp + 30], cl
 102997c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029980:	44 89 4c 24 08 	mov	dword ptr [rsp + 8], r9d
 1029985:	41 0f ba e9 0c 	bts	r9d, 12
 102998a:	44 89 4c 24 0c 	mov	dword ptr [rsp + 12], r9d
 102998f:	e8 9c 38 00 00 	call	14492 <_runtime.castogscanstatus>
 1029994:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 1029999:	75 27 	jne	39 <_runtime.suspendG+0x382>
 102999b:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10299a0:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 10299a5:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 10299aa:	0f b6 4c 24 1e 	movzx	ecx, byte ptr [rsp + 30]
 10299af:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 10299b4:	8b 5c 24 2c 	mov	ebx, dword ptr [rsp + 44]
 10299b8:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 10299bd:	e9 9f fd ff ff 	jmp	-609 <_runtime.suspendG+0x121>
 10299c2:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10299c7:	66 c7 80 b1 00 00 00 00 00 	mov	word ptr [rax + 177], 0
 10299d0:	48 8b 08 	mov	rcx, qword ptr [rax]
 10299d3:	48 81 c1 80 03 00 00 	add	rcx, 896
 10299da:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 10299de:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 10299e6:	c6 84 24 88 00 00 00 00 	mov	byte ptr [rsp + 136], 0
 10299ee:	0f b6 44 24 1e 	movzx	eax, byte ptr [rsp + 30]
 10299f3:	88 84 24 89 00 00 00 	mov	byte ptr [rsp + 137], al
 10299fa:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 10299ff:	48 83 c4 70 	add	rsp, 112
 1029a03:	c3 	ret
 1029a04:	41 83 f9 06 	cmp	r9d, 6
 1029a08:	74 6f 	je	111 <_runtime.suspendG+0x439>
 1029a0a:	41 83 f9 08 	cmp	r9d, 8
 1029a0e:	0f 84 4d fd ff ff 	je	-691 <_runtime.suspendG+0x121>
 1029a14:	41 83 f9 09 	cmp	r9d, 9
 1029a18:	0f 85 4a ff ff ff 	jne	-182 <_runtime.suspendG+0x328>
 1029a1e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029a22:	48 b9 09 00 00 00 04 00 00 00 	movabs	rcx, 17179869193
 1029a2c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1029a31:	e8 ea 3a 00 00 	call	15082 <_runtime.casGFromPreempted>
 1029a36:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 1029a3b:	75 27 	jne	39 <_runtime.suspendG+0x424>
 1029a3d:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1029a42:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 1029a47:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 1029a4c:	0f b6 4c 24 1e 	movzx	ecx, byte ptr [rsp + 30]
 1029a51:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1029a56:	8b 5c 24 2c 	mov	ebx, dword ptr [rsp + 44]
 1029a5a:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1029a5f:	e9 fd fc ff ff 	jmp	-771 <_runtime.suspendG+0x121>
 1029a64:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1029a69:	41 b9 04 00 00 00 	mov	r9d, 4
 1029a6f:	b9 01 00 00 00 	mov	ecx, 1
 1029a74:	e9 ff fe ff ff 	jmp	-257 <_runtime.suspendG+0x338>
 1029a79:	48 c7 84 24 80 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 128], 0
 1029a85:	66 c7 84 24 88 00 00 00 01 00 	mov	word ptr [rsp + 136], 1
 1029a8f:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 1029a94:	48 83 c4 70 	add	rsp, 112
 1029a98:	c3 	ret
 1029a99:	31 c0 	xor	eax, eax
 1029a9b:	e9 ea fb ff ff 	jmp	-1046 <_runtime.suspendG+0x4a>
 1029aa0:	90 	nop
 1029aa1:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029aaa:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1029aaf:	8b 90 90 00 00 00 	mov	edx, dword ptr [rax + 144]
 1029ab5:	89 54 24 20 	mov	dword ptr [rsp + 32], edx
 1029ab9:	48 8b 98 98 00 00 00 	mov	rbx, qword ptr [rax + 152]
 1029ac0:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 1029ac5:	e8 d6 09 00 00 	call	2518 <_runtime.printlock>
 1029aca:	48 8d 05 31 a1 04 00 	lea	rax, [rip + 303409]
 1029ad1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029ad5:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1029ade:	e8 fd 12 00 00 	call	4861 <_runtime.printstring>
 1029ae3:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1029ae8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029aec:	e8 af 12 00 00 	call	4783 <_runtime.printpointer>
 1029af1:	48 8d 05 ca 93 04 00 	lea	rax, [rip + 299978]
 1029af8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029afc:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1029b05:	e8 d6 12 00 00 	call	4822 <_runtime.printstring>
 1029b0a:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1029b0f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029b13:	e8 08 11 00 00 	call	4360 <_runtime.printint>
 1029b18:	48 8d 05 0e a4 04 00 	lea	rax, [rip + 304142]
 1029b1f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029b23:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1029b2c:	e8 af 12 00 00 	call	4783 <_runtime.printstring>
 1029b31:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 1029b35:	89 c0 	mov	eax, eax
 1029b37:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029b3b:	e8 e0 0f 00 00 	call	4064 <_runtime.printuint>
 1029b40:	e8 eb 0b 00 00 	call	3051 <_runtime.printnl>
 1029b45:	e8 d6 09 00 00 	call	2518 <_runtime.printunlock>
 1029b4a:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1029b4f:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1029b55:	89 4c 24 24 	mov	dword ptr [rsp + 36], ecx
 1029b59:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 1029b60:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 1029b65:	e8 36 09 00 00 	call	2358 <_runtime.printlock>
 1029b6a:	48 8d 05 61 a0 04 00 	lea	rax, [rip + 303201]
 1029b71:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029b75:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1029b7e:	e8 5d 12 00 00 	call	4701 <_runtime.printstring>
 1029b83:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1029b88:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029b8c:	e8 0f 12 00 00 	call	4623 <_runtime.printpointer>
 1029b91:	48 8d 05 2a 93 04 00 	lea	rax, [rip + 299818]
 1029b98:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029b9c:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1029ba5:	e8 36 12 00 00 	call	4662 <_runtime.printstring>
 1029baa:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1029baf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029bb3:	e8 68 10 00 00 	call	4200 <_runtime.printint>
 1029bb8:	48 8d 05 5b a3 04 00 	lea	rax, [rip + 303963]
 1029bbf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029bc3:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1029bcc:	e8 0f 12 00 00 	call	4623 <_runtime.printstring>
 1029bd1:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 1029bd5:	89 c0 	mov	eax, eax
 1029bd7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029bdb:	e8 40 0f 00 00 	call	3904 <_runtime.printuint>
 1029be0:	e8 4b 0b 00 00 	call	2891 <_runtime.printnl>
 1029be5:	e8 36 09 00 00 	call	2358 <_runtime.printunlock>
 1029bea:	48 8d 05 61 9f 04 00 	lea	rax, [rip + 302945]
 1029bf1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029bf5:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1029bfe:	e8 5d f1 ff ff 	call	-3747 <_runtime.throw>
 1029c03:	48 8d 05 41 cb 04 00 	lea	rax, [rip + 314177]
 1029c0a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029c0e:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 1029c17:	e8 44 f1 ff ff 	call	-3772 <_runtime.throw>
 1029c1c:	90 	nop
 1029c1d:	e8 de 6a 01 00 	call	92894 <_runtime.morestackc>
 1029c22:	e9 19 fa ff ff 	jmp	-1511 <_runtime.suspendG>
 1029c27:	cc 	int3
 1029c28:	cc 	int3
 1029c29:	cc 	int3
 1029c2a:	cc 	int3
 1029c2b:	cc 	int3
 1029c2c:	cc 	int3
 1029c2d:	cc 	int3
 1029c2e:	cc 	int3
 1029c2f:	cc 	int3

_runtime.resumeG:
 1029c30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029c39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1029c3d:	0f 86 ec 01 00 00 	jbe	492 <_runtime.resumeG+0x1ff>
 1029c43:	48 83 ec 38 	sub	rsp, 56
 1029c47:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1029c4c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1029c51:	0f b6 44 24 48 	movzx	eax, byte ptr [rsp + 72]
 1029c56:	84 c0 	test	al, al
 1029c58:	75 67 	jne	103 <_runtime.resumeG+0x91>
 1029c5a:	90 	nop
 1029c5b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1029c60:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1029c66:	81 f9 01 10 00 00 	cmp	ecx, 4097
 1029c6c:	75 46 	jne	70 <_runtime.resumeG+0x84>
 1029c6e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029c72:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 1029c76:	0f ba f1 0c 	btr	ecx, 12
 1029c7a:	89 4c 24 0c 	mov	dword ptr [rsp + 12], ecx
 1029c7e:	e8 4d 31 00 00 	call	12621 <_runtime.casfrom_Gscanstatus>
 1029c83:	0f b6 44 24 49 	movzx	eax, byte ptr [rsp + 73]
 1029c88:	84 c0 	test	al, al
 1029c8a:	75 0a 	jne	10 <_runtime.resumeG+0x66>
 1029c8c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1029c91:	48 83 c4 38 	add	rsp, 56
 1029c95:	c3 	ret
 1029c96:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1029c9b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029c9f:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1029ca8:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 1029cad:	e8 ae 2d 00 00 	call	11694 <_runtime.ready>
 1029cb2:	eb d8 	jmp	-40 <_runtime.resumeG+0x5c>
 1029cb4:	8d 91 fd ef ff ff 	lea	edx, [rcx - 4099]
 1029cba:	83 fa 01 	cmp	edx, 1
 1029cbd:	76 af 	jbe	-81 <_runtime.resumeG+0x3e>
 1029cbf:	eb 0a 	jmp	10 <_runtime.resumeG+0x9b>
 1029cc1:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1029cc6:	48 83 c4 38 	add	rsp, 56
 1029cca:	c3 	ret
 1029ccb:	90 	nop
 1029ccc:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029cd5:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1029cda:	8b 90 90 00 00 00 	mov	edx, dword ptr [rax + 144]
 1029ce0:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 1029ce4:	48 8b 98 98 00 00 00 	mov	rbx, qword ptr [rax + 152]
 1029ceb:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1029cf0:	e8 ab 07 00 00 	call	1963 <_runtime.printlock>
 1029cf5:	48 8d 05 06 9f 04 00 	lea	rax, [rip + 302854]
 1029cfc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029d00:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1029d09:	e8 d2 10 00 00 	call	4306 <_runtime.printstring>
 1029d0e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1029d13:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029d17:	e8 84 10 00 00 	call	4228 <_runtime.printpointer>
 1029d1c:	48 8d 05 9f 91 04 00 	lea	rax, [rip + 299423]
 1029d23:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029d27:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1029d30:	e8 ab 10 00 00 	call	4267 <_runtime.printstring>
 1029d35:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1029d3a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029d3e:	e8 dd 0e 00 00 	call	3805 <_runtime.printint>
 1029d43:	48 8d 05 e3 a1 04 00 	lea	rax, [rip + 303587]
 1029d4a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029d4e:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1029d57:	e8 84 10 00 00 	call	4228 <_runtime.printstring>
 1029d5c:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1029d60:	89 c0 	mov	eax, eax
 1029d62:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029d66:	e8 b5 0d 00 00 	call	3509 <_runtime.printuint>
 1029d6b:	e8 c0 09 00 00 	call	2496 <_runtime.printnl>
 1029d70:	e8 ab 07 00 00 	call	1963 <_runtime.printunlock>
 1029d75:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1029d7a:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1029d80:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 1029d84:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 1029d8b:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1029d90:	e8 0b 07 00 00 	call	1803 <_runtime.printlock>
 1029d95:	48 8d 05 36 9e 04 00 	lea	rax, [rip + 302646]
 1029d9c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029da0:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1029da9:	e8 32 10 00 00 	call	4146 <_runtime.printstring>
 1029dae:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1029db3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029db7:	e8 e4 0f 00 00 	call	4068 <_runtime.printpointer>
 1029dbc:	48 8d 05 ff 90 04 00 	lea	rax, [rip + 299263]
 1029dc3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029dc7:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1029dd0:	e8 0b 10 00 00 	call	4107 <_runtime.printstring>
 1029dd5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1029dda:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029dde:	e8 3d 0e 00 00 	call	3645 <_runtime.printint>
 1029de3:	48 8d 05 30 a1 04 00 	lea	rax, [rip + 303408]
 1029dea:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029dee:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1029df7:	e8 e4 0f 00 00 	call	4068 <_runtime.printstring>
 1029dfc:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1029e00:	89 c0 	mov	eax, eax
 1029e02:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029e06:	e8 15 0d 00 00 	call	3349 <_runtime.printuint>
 1029e0b:	e8 20 09 00 00 	call	2336 <_runtime.printnl>
 1029e10:	e8 0b 07 00 00 	call	1803 <_runtime.printunlock>
 1029e15:	48 8d 05 c6 a2 04 00 	lea	rax, [rip + 303814]
 1029e1c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029e20:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1029e29:	e8 32 ef ff ff 	call	-4302 <_runtime.throw>
 1029e2e:	90 	nop
 1029e2f:	e8 9c 6d 02 00 	call	159132 <_runtime.morestack_noctxt>
 1029e34:	e9 f7 fd ff ff 	jmp	-521 <_runtime.resumeG>
 1029e39:	cc 	int3
 1029e3a:	cc 	int3
 1029e3b:	cc 	int3
 1029e3c:	cc 	int3
 1029e3d:	cc 	int3
 1029e3e:	cc 	int3
 1029e3f:	cc 	int3

_runtime.asyncPreempt2:
 1029e40:	48 83 ec 18 	sub	rsp, 24
 1029e44:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1029e49:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1029e4e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1029e57:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1029e5c:	c6 80 b4 00 00 00 01 	mov	byte ptr [rax + 180], 1
 1029e63:	80 b8 b2 00 00 00 00 	cmp	byte ptr [rax + 178], 0
 1029e6a:	74 26 	je	38 <_runtime.asyncPreempt2+0x52>
 1029e6c:	48 8d 05 05 db 04 00 	lea	rax, [rip + 318213]
 1029e73:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029e77:	e8 84 6b 02 00 	call	158596 <_runtime.mcall>
 1029e7c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1029e81:	c6 80 b4 00 00 00 00 	mov	byte ptr [rax + 180], 0
 1029e88:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1029e8d:	48 83 c4 18 	add	rsp, 24
 1029e91:	c3 	ret
 1029e92:	48 8d 05 c7 d9 04 00 	lea	rax, [rip + 317895]
 1029e99:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029e9d:	e8 5e 6b 02 00 	call	158558 <_runtime.mcall>
 1029ea2:	eb d8 	jmp	-40 <_runtime.asyncPreempt2+0x3c>
 1029ea4:	cc 	int3
 1029ea5:	cc 	int3
 1029ea6:	cc 	int3
 1029ea7:	cc 	int3
 1029ea8:	cc 	int3
 1029ea9:	cc 	int3
 1029eaa:	cc 	int3
 1029eab:	cc 	int3
 1029eac:	cc 	int3
 1029ead:	cc 	int3
 1029eae:	cc 	int3
 1029eaf:	cc 	int3

_runtime.init.5:
 1029eb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029eb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1029ebd:	0f 86 f2 00 00 00 	jbe	242 <_runtime.init.5+0x105>
 1029ec3:	48 83 ec 28 	sub	rsp, 40
 1029ec7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1029ecc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1029ed1:	48 8d 05 58 d8 04 00 	lea	rax, [rip + 317528]
 1029ed8:	84 00 	test	byte ptr [rax], al
 1029eda:	48 8b 05 4f d8 04 00 	mov	rax, qword ptr [rip + 317519]
 1029ee1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029ee5:	e8 86 7c 01 00 	call	97414 <_runtime.findfunc>
 1029eea:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1029eef:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1029ef4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1029ef8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1029efd:	e8 ce 88 01 00 	call	100558 <_runtime.funcMaxSPDelta>
 1029f02:	48 8d 05 1f d8 04 00 	lea	rax, [rip + 317471]
 1029f09:	84 00 	test	byte ptr [rax], al
 1029f0b:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1029f0f:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 1029f13:	48 8b 0d 0e d8 04 00 	mov	rcx, qword ptr [rip + 317454]
 1029f1a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1029f1e:	e8 4d 7c 01 00 	call	97357 <_runtime.findfunc>
 1029f23:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1029f28:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1029f2d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1029f31:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1029f36:	e8 95 88 01 00 	call	100501 <_runtime.funcMaxSPDelta>
 1029f3b:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1029f3f:	03 44 24 10 	add	eax, dword ptr [rsp + 16]
 1029f43:	48 63 c0 	movsxd	rax, eax
 1029f46:	48 83 c0 40 	add	rax, 64
 1029f4a:	48 89 05 3f 12 0a 00 	mov	qword ptr [rip + 660031], rax
 1029f51:	48 3d 00 03 00 00 	cmp	rax, 768
 1029f57:	77 0a 	ja	10 <_runtime.init.5+0xb3>
 1029f59:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1029f5e:	48 83 c4 28 	add	rsp, 40
 1029f62:	c3 	ret
 1029f63:	e8 38 05 00 00 	call	1336 <_runtime.printlock>
 1029f68:	48 8d 05 3a b1 04 00 	lea	rax, [rip + 307514]
 1029f6f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029f73:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1029f7c:	e8 5f 0e 00 00 	call	3679 <_runtime.printstring>
 1029f81:	48 8b 05 08 12 0a 00 	mov	rax, qword ptr [rip + 659976]
 1029f88:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029f8c:	e8 8f 0b 00 00 	call	2959 <_runtime.printuint>
 1029f91:	e8 9a 07 00 00 	call	1946 <_runtime.printnl>
 1029f96:	e8 85 05 00 00 	call	1413 <_runtime.printunlock>
 1029f9b:	48 8d 05 11 a4 04 00 	lea	rax, [rip + 304145]
 1029fa2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1029fa6:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 1029faf:	e8 ac ed ff ff 	call	-4692 <_runtime.throw>
 1029fb4:	90 	nop
 1029fb5:	e8 16 6c 02 00 	call	158742 <_runtime.morestack_noctxt>
 1029fba:	e9 f1 fe ff ff 	jmp	-271 <_runtime.init.5>
 1029fbf:	cc 	int3

_runtime.isAsyncSafePoint:
 1029fc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1029fc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1029fcd:	0f 86 61 03 00 00 	jbe	865 <_runtime.isAsyncSafePoint+0x374>
 1029fd3:	48 83 ec 70 	sub	rsp, 112
 1029fd7:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 1029fdc:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1029fe1:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1029fe6:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1029fea:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 1029ff1:	0f 85 20 03 00 00 	jne	800 <_runtime.isAsyncSafePoint+0x357>
 1029ff7:	48 8b 91 d0 00 00 00 	mov	rdx, qword ptr [rcx + 208]
 1029ffe:	48 85 d2 	test	rdx, rdx
 102a001:	75 12 	jne	18 <_runtime.isAsyncSafePoint+0x55>
 102a003:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a00b:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a010:	48 83 c4 70 	add	rsp, 112
 102a014:	c3 	ret
 102a015:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 102a01c:	75 e5 	jne	-27 <_runtime.isAsyncSafePoint+0x43>
 102a01e:	83 b9 f0 00 00 00 00 	cmp	dword ptr [rcx + 240], 0
 102a025:	75 dc 	jne	-36 <_runtime.isAsyncSafePoint+0x43>
 102a027:	48 83 b9 00 01 00 00 00 	cmp	qword ptr [rcx + 256], 0
 102a02f:	75 d2 	jne	-46 <_runtime.isAsyncSafePoint+0x43>
 102a031:	83 7a 04 01 	cmp	dword ptr [rdx + 4], 1
 102a035:	75 cc 	jne	-52 <_runtime.isAsyncSafePoint+0x43>
 102a037:	48 8b 00 	mov	rax, qword ptr [rax]
 102a03a:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 102a042:	48 39 c1 	cmp	rcx, rax
 102a045:	73 12 	jae	18 <_runtime.isAsyncSafePoint+0x99>
 102a047:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a04f:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a054:	48 83 c4 70 	add	rsp, 112
 102a058:	c3 	ret
 102a059:	48 29 c1 	sub	rcx, rax
 102a05c:	48 39 0d 2d 11 0a 00 	cmp	qword ptr [rip + 659757], rcx
 102a063:	77 e2 	ja	-30 <_runtime.isAsyncSafePoint+0x87>
 102a065:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 102a06d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a071:	e8 fa 7a 01 00 	call	97018 <_runtime.findfunc>
 102a076:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102a07b:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 102a080:	48 85 c9 	test	rcx, rcx
 102a083:	0f 84 7c 02 00 00 	je	636 <_runtime.isAsyncSafePoint+0x345>
 102a089:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 102a08e:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 102a093:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a097:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a09c:	c7 44 24 10 00 00 00 00 	mov	dword ptr [rsp + 16], 0
 102a0a4:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 102a0ac:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 102a0b1:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 102a0ba:	e8 11 88 01 00 	call	100369 <_runtime.pcdatavalue>
 102a0bf:	83 7c 24 28 fe 	cmp	dword ptr [rsp + 40], -2
 102a0c4:	0f 84 29 02 00 00 	je	553 <_runtime.isAsyncSafePoint+0x333>
 102a0ca:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102a0cf:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a0d3:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 102a0d8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102a0dd:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 102a0e2:	e8 99 88 01 00 	call	100505 <_runtime.funcdata>
 102a0e7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102a0ec:	48 85 c0 	test	rax, rax
 102a0ef:	74 0c 	je	12 <_runtime.isAsyncSafePoint+0x13d>
 102a0f1:	48 8d 0d c8 96 05 00 	lea	rcx, [rip + 366280]
 102a0f8:	48 39 c8 	cmp	rax, rcx
 102a0fb:	75 12 	jne	18 <_runtime.isAsyncSafePoint+0x14f>
 102a0fd:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a105:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a10a:	48 83 c4 70 	add	rsp, 112
 102a10e:	c3 	ret
 102a10f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102a114:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a118:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 102a11d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102a122:	e8 99 81 01 00 	call	98713 <_runtime.funcname>
 102a127:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102a12c:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 102a131:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102a136:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 102a13b:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 102a140:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102a144:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 102a149:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 102a14e:	c6 44 24 10 04 	mov	byte ptr [rsp + 16], 4
 102a153:	e8 28 88 01 00 	call	100392 <_runtime.funcdata>
 102a158:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102a15d:	48 85 c0 	test	rax, rax
 102a160:	0f 85 f8 00 00 00 	jne	248 <_runtime.isAsyncSafePoint+0x29e>
 102a166:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102a16b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102a170:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102a175:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 102a17a:	48 83 f8 08 	cmp	rax, 8
 102a17e:	0f 8d a8 00 00 00 	jge	168 <_runtime.isAsyncSafePoint+0x26c>
 102a184:	31 d2 	xor	edx, edx
 102a186:	84 d2 	test	dl, dl
 102a188:	74 66 	je	102 <_runtime.isAsyncSafePoint+0x230>
 102a18a:	ba 01 00 00 00 	mov	edx, 1
 102a18f:	84 d2 	test	dl, dl
 102a191:	74 2d 	je	45 <_runtime.isAsyncSafePoint+0x200>
 102a193:	b8 01 00 00 00 	mov	eax, 1
 102a198:	84 c0 	test	al, al
 102a19a:	74 12 	je	18 <_runtime.isAsyncSafePoint+0x1ee>
 102a19c:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a1a4:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a1a9:	48 83 c4 70 	add	rsp, 112
 102a1ad:	c3 	ret
 102a1ae:	c6 84 24 98 00 00 00 01 	mov	byte ptr [rsp + 152], 1
 102a1b6:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a1bb:	48 83 c4 70 	add	rsp, 112
 102a1bf:	c3 	ret
 102a1c0:	90 	nop
 102a1c1:	48 83 f8 08 	cmp	rax, 8
 102a1c5:	7d 04 	jge	4 <_runtime.isAsyncSafePoint+0x20b>
 102a1c7:	31 c0 	xor	eax, eax
 102a1c9:	eb cd 	jmp	-51 <_runtime.isAsyncSafePoint+0x1d8>
 102a1cb:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a1cf:	48 8d 05 71 8e 04 00 	lea	rax, [rip + 298609]
 102a1d6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a1db:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 102a1e4:	e8 07 7f fd ff 	call	-164089 <_runtime.memequal>
 102a1e9:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 102a1ee:	eb a8 	jmp	-88 <_runtime.isAsyncSafePoint+0x1d8>
 102a1f0:	48 83 f8 11 	cmp	rax, 17
 102a1f4:	7d 04 	jge	4 <_runtime.isAsyncSafePoint+0x23a>
 102a1f6:	31 d2 	xor	edx, edx
 102a1f8:	eb 95 	jmp	-107 <_runtime.isAsyncSafePoint+0x1cf>
 102a1fa:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a1fe:	48 8d 05 3c 9b 04 00 	lea	rax, [rip + 301884]
 102a205:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a20a:	48 c7 44 24 10 11 00 00 00 	mov	qword ptr [rsp + 16], 17
 102a213:	e8 d8 7e fd ff 	call	-164136 <_runtime.memequal>
 102a218:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 102a21d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102a222:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102a227:	e9 63 ff ff ff 	jmp	-157 <_runtime.isAsyncSafePoint+0x1cf>
 102a22c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a230:	48 8d 05 20 8e 04 00 	lea	rax, [rip + 298528]
 102a237:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a23c:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 102a245:	e8 a6 7e fd ff 	call	-164186 <_runtime.memequal>
 102a24a:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 102a24f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102a254:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102a259:	e9 28 ff ff ff 	jmp	-216 <_runtime.isAsyncSafePoint+0x1c6>
 102a25e:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 102a263:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102a268:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a26c:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 102a271:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102a276:	c7 44 24 10 02 00 00 00 	mov	dword ptr [rsp + 16], 2
 102a27e:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 102a286:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 102a28b:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 102a294:	e8 37 86 01 00 	call	99895 <_runtime.pcdatavalue>
 102a299:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 102a29d:	85 c0 	test	eax, eax
 102a29f:	7c 43 	jl	67 <_runtime.isAsyncSafePoint+0x324>
 102a2a1:	48 63 c0 	movsxd	rax, eax
 102a2a4:	48 3d 00 00 10 00 	cmp	rax, 1048576
 102a2aa:	73 7d 	jae	125 <_runtime.isAsyncSafePoint+0x369>
 102a2ac:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 102a2b0:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 102a2b5:	8b 44 81 0c 	mov	eax, dword ptr [rcx + 4*rax + 12]
 102a2b9:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 102a2be:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a2c2:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 102a2c7:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102a2cc:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 102a2d0:	e8 8b 80 01 00 	call	98443 <_runtime.funcnameFromNameoff>
 102a2d5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102a2da:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102a2df:	e9 8c fe ff ff 	jmp	-372 <_runtime.isAsyncSafePoint+0x1b0>
 102a2e4:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102a2e9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102a2ee:	e9 7d fe ff ff 	jmp	-387 <_runtime.isAsyncSafePoint+0x1b0>
 102a2f3:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a2fb:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a300:	48 83 c4 70 	add	rsp, 112
 102a304:	c3 	ret
 102a305:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a30d:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a312:	48 83 c4 70 	add	rsp, 112
 102a316:	c3 	ret
 102a317:	c6 84 24 98 00 00 00 00 	mov	byte ptr [rsp + 152], 0
 102a31f:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 102a324:	48 83 c4 70 	add	rsp, 112
 102a328:	c3 	ret
 102a329:	b9 00 00 10 00 	mov	ecx, 1048576
 102a32e:	e8 1d 90 02 00 	call	167965 <_runtime.panicIndex>
 102a333:	90 	nop
 102a334:	e8 97 68 02 00 	call	157847 <_runtime.morestack_noctxt>
 102a339:	e9 82 fc ff ff 	jmp	-894 <_runtime.isAsyncSafePoint>
 102a33e:	cc 	int3
 102a33f:	cc 	int3

_runtime.recordForPanic:
 102a340:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a349:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a34d:	0f 86 38 01 00 00 	jbe	312 <_runtime.recordForPanic+0x14b>
 102a353:	48 83 ec 30 	sub	rsp, 48
 102a357:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 102a35c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 102a361:	e8 3a 01 00 00 	call	314 <_runtime.printlock>
 102a366:	8b 05 4c d4 0c 00 	mov	eax, dword ptr [rip + 840780]
 102a36c:	85 c0 	test	eax, eax
 102a36e:	0f 85 f2 00 00 00 	jne	242 <_runtime.recordForPanic+0x126>
 102a374:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 102a379:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 102a37e:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 102a383:	31 c0 	xor	eax, eax
 102a385:	eb 31 	jmp	49 <_runtime.recordForPanic+0x78>
 102a387:	48 8b 3d 12 d5 0c 00 	mov	rdi, qword ptr [rip + 840978]
 102a38e:	4c 01 cf 	add	rdi, r9
 102a391:	49 89 fa 	mov	r10, rdi
 102a394:	48 c1 ff 3f 	sar	rdi, 63
 102a398:	48 c1 ef 37 	shr	rdi, 55
 102a39c:	4c 01 d7 	add	rdi, r10
 102a39f:	48 c1 ff 09 	sar	rdi, 9
 102a3a3:	48 c1 e7 09 	shl	rdi, 9
 102a3a7:	49 29 fa 	sub	r10, rdi
 102a3aa:	4c 89 15 ef d4 0c 00 	mov	qword ptr [rip + 840943], r10
 102a3b1:	4b 8d 04 01 	lea	rax, [r9 + r8]
 102a3b5:	48 89 ca 	mov	rdx, rcx
 102a3b8:	48 39 d0 	cmp	rax, rdx
 102a3bb:	0f 8d a5 00 00 00 	jge	165 <_runtime.recordForPanic+0x126>
 102a3c1:	48 8b 3d d8 d4 0c 00 	mov	rdi, qword ptr [rip + 840920]
 102a3c8:	48 81 ff 00 02 00 00 	cmp	rdi, 512
 102a3cf:	0f 87 a8 00 00 00 	ja	168 <_runtime.recordForPanic+0x13d>
 102a3d5:	4c 8d 87 00 fe ff ff 	lea	r8, [rdi - 512]
 102a3dc:	4d 89 c1 	mov	r9, r8
 102a3df:	49 c1 f8 3f 	sar	r8, 63
 102a3e3:	49 21 f8 	and	r8, rdi
 102a3e6:	48 39 d0 	cmp	rax, rdx
 102a3e9:	0f 87 86 00 00 00 	ja	134 <_runtime.recordForPanic+0x135>
 102a3ef:	49 f7 d9 	neg	r9
 102a3f2:	48 89 d1 	mov	rcx, rdx
 102a3f5:	48 29 c2 	sub	rdx, rax
 102a3f8:	49 39 d1 	cmp	r9, rdx
 102a3fb:	4c 0f 4f ca 	cmovg	r9, rdx
 102a3ff:	48 8d 15 1a dc 0c 00 	lea	rdx, [rip + 842778]
 102a406:	49 8d 3c 10 	lea	rdi, [r8 + rdx]
 102a40a:	49 89 c0 	mov	r8, rax
 102a40d:	48 29 d8 	sub	rax, rbx
 102a410:	48 c1 f8 3f 	sar	rax, 63
 102a414:	4c 21 c0 	and	rax, r8
 102a417:	4c 8d 14 06 	lea	r10, [rsi + rax]
 102a41b:	4c 39 d7 	cmp	rdi, r10
 102a41e:	0f 84 63 ff ff ff 	je	-157 <_runtime.recordForPanic+0x47>
 102a424:	4c 89 44 24 20 	mov	qword ptr [rsp + 32], r8
 102a429:	4c 89 4c 24 18 	mov	qword ptr [rsp + 24], r9
 102a42e:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 102a432:	4c 89 54 24 08 	mov	qword ptr [rsp + 8], r10
 102a437:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 102a43c:	e8 0f 97 02 00 	call	169743 <_runtime.memmove>
 102a441:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102a446:	48 8d 15 d3 db 0c 00 	lea	rdx, [rip + 842707]
 102a44d:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 102a452:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 102a457:	4c 8b 44 24 20 	mov	r8, qword ptr [rsp + 32]
 102a45c:	4c 8b 4c 24 18 	mov	r9, qword ptr [rsp + 24]
 102a461:	e9 21 ff ff ff 	jmp	-223 <_runtime.recordForPanic+0x47>
 102a466:	e8 b5 00 00 00 	call	181 <_runtime.printunlock>
 102a46b:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 102a470:	48 83 c4 30 	add	rsp, 48
 102a474:	c3 	ret
 102a475:	48 89 d1 	mov	rcx, rdx
 102a478:	e8 33 8f 02 00 	call	167731 <_runtime.panicSliceB>
 102a47d:	48 89 f8 	mov	rax, rdi
 102a480:	b9 00 02 00 00 	mov	ecx, 512
 102a485:	e8 26 8f 02 00 	call	167718 <_runtime.panicSliceB>
 102a48a:	90 	nop
 102a48b:	e8 40 67 02 00 	call	157504 <_runtime.morestack_noctxt>
 102a490:	e9 ab fe ff ff 	jmp	-341 <_runtime.recordForPanic>
 102a495:	cc 	int3
 102a496:	cc 	int3
 102a497:	cc 	int3
 102a498:	cc 	int3
 102a499:	cc 	int3
 102a49a:	cc 	int3
 102a49b:	cc 	int3
 102a49c:	cc 	int3
 102a49d:	cc 	int3
 102a49e:	cc 	int3
 102a49f:	cc 	int3

_runtime.printlock:
 102a4a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a4a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a4ad:	76 61 	jbe	97 <_runtime.printlock+0x70>
 102a4af:	48 83 ec 18 	sub	rsp, 24
 102a4b3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102a4b8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102a4bd:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102a4c6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102a4ca:	ff 80 08 01 00 00 	inc	dword ptr [rax + 264]
 102a4d0:	0f b6 88 17 01 00 00 	movzx	ecx, byte ptr [rax + 279]
 102a4d7:	8d 51 01 	lea	edx, [rcx + 1]
 102a4da:	88 90 17 01 00 00 	mov	byte ptr [rax + 279], dl
 102a4e0:	84 c9 	test	cl, cl
 102a4e2:	74 10 	je	16 <_runtime.printlock+0x54>
 102a4e4:	ff 88 08 01 00 00 	dec	dword ptr [rax + 264]
 102a4ea:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102a4ef:	48 83 c4 18 	add	rsp, 24
 102a4f3:	c3 	ret
 102a4f4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a4f9:	48 8d 05 20 d3 0c 00 	lea	rax, [rip + 840480]
 102a500:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a504:	e8 27 dc fd ff 	call	-140249 <_runtime.lock>
 102a509:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102a50e:	eb d4 	jmp	-44 <_runtime.printlock+0x44>
 102a510:	e8 bb 66 02 00 	call	157371 <_runtime.morestack_noctxt>
 102a515:	eb 89 	jmp	-119 <_runtime.printlock>
 102a517:	cc 	int3
 102a518:	cc 	int3
 102a519:	cc 	int3
 102a51a:	cc 	int3
 102a51b:	cc 	int3
 102a51c:	cc 	int3
 102a51d:	cc 	int3
 102a51e:	cc 	int3
 102a51f:	cc 	int3

_runtime.printunlock:
 102a520:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a529:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a52d:	76 4c 	jbe	76 <_runtime.printunlock+0x5b>
 102a52f:	48 83 ec 10 	sub	rsp, 16
 102a533:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 102a538:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102a53d:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102a546:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102a54a:	0f b6 88 17 01 00 00 	movzx	ecx, byte ptr [rax + 279]
 102a551:	8d 51 ff 	lea	edx, [rcx - 1]
 102a554:	88 90 17 01 00 00 	mov	byte ptr [rax + 279], dl
 102a55a:	80 f9 01 	cmp	cl, 1
 102a55d:	74 0a 	je	10 <_runtime.printunlock+0x49>
 102a55f:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102a564:	48 83 c4 10 	add	rsp, 16
 102a568:	c3 	ret
 102a569:	48 8d 05 b0 d2 0c 00 	lea	rax, [rip + 840368]
 102a570:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a574:	e8 97 dd fd ff 	call	-139881 <_runtime.unlock>
 102a579:	eb e4 	jmp	-28 <_runtime.printunlock+0x3f>
 102a57b:	e8 50 66 02 00 	call	157264 <_runtime.morestack_noctxt>
 102a580:	eb 9e 	jmp	-98 <_runtime.printunlock>
 102a582:	cc 	int3
 102a583:	cc 	int3
 102a584:	cc 	int3
 102a585:	cc 	int3
 102a586:	cc 	int3
 102a587:	cc 	int3
 102a588:	cc 	int3
 102a589:	cc 	int3
 102a58a:	cc 	int3
 102a58b:	cc 	int3
 102a58c:	cc 	int3
 102a58d:	cc 	int3
 102a58e:	cc 	int3
 102a58f:	cc 	int3

_runtime.gwrite:
 102a590:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a599:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a59d:	0f 86 25 01 00 00 	jbe	293 <_runtime.gwrite+0x138>
 102a5a3:	48 83 ec 38 	sub	rsp, 56
 102a5a7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102a5ac:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102a5b1:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102a5b6:	48 85 c0 	test	rax, rax
 102a5b9:	0f 84 f9 00 00 00 	je	249 <_runtime.gwrite+0x128>
 102a5bf:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102a5c4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a5c8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a5cd:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 102a5d2:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 102a5d7:	e8 64 fd ff ff 	call	-668 <_runtime.recordForPanic>
 102a5dc:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102a5e5:	48 85 c0 	test	rax, rax
 102a5e8:	74 28 	je	40 <_runtime.gwrite+0x82>
 102a5ea:	48 8b 98 f8 00 00 00 	mov	rbx, qword ptr [rax + 248]
 102a5f1:	48 8b b0 f0 00 00 00 	mov	rsi, qword ptr [rax + 240]
 102a5f8:	48 8b b8 e8 00 00 00 	mov	rdi, qword ptr [rax + 232]
 102a5ff:	48 85 ff 	test	rdi, rdi
 102a602:	74 0e 	je	14 <_runtime.gwrite+0x82>
 102a604:	4c 8b 40 30 	mov	r8, qword ptr [rax + 48]
 102a608:	41 83 b8 0c 01 00 00 00 	cmp	dword ptr [r8 + 268], 0
 102a610:	7e 2c 	jle	44 <_runtime.gwrite+0xae>
 102a612:	90 	nop
 102a613:	90 	nop
 102a614:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 102a61c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102a621:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102a626:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102a62b:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 102a62f:	e8 ec 8b 01 00 	call	101356 <_runtime.write1>
 102a634:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102a639:	48 83 c4 38 	add	rsp, 56
 102a63d:	c3 	ret
 102a63e:	48 29 f3 	sub	rbx, rsi
 102a641:	4c 8b 44 24 48 	mov	r8, qword ptr [rsp + 72]
 102a646:	4c 39 c3 	cmp	rbx, r8
 102a649:	49 89 d9 	mov	r9, rbx
 102a64c:	49 0f 4f d8 	cmovg	rbx, r8
 102a650:	49 f7 d9 	neg	r9
 102a653:	49 c1 f9 3f 	sar	r9, 63
 102a657:	4c 21 ce 	and	rsi, r9
 102a65a:	48 01 fe 	add	rsi, rdi
 102a65d:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 102a662:	48 39 fe 	cmp	rsi, rdi
 102a665:	75 28 	jne	40 <_runtime.gwrite+0xff>
 102a667:	48 8b b0 f0 00 00 00 	mov	rsi, qword ptr [rax + 240]
 102a66e:	48 8b 90 f8 00 00 00 	mov	rdx, qword ptr [rax + 248]
 102a675:	48 8d 0c 1e 	lea	rcx, [rsi + rbx]
 102a679:	48 39 d1 	cmp	rcx, rdx
 102a67c:	77 44 	ja	68 <_runtime.gwrite+0x132>
 102a67e:	48 89 88 f0 00 00 00 	mov	qword ptr [rax + 240], rcx
 102a685:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102a68a:	48 83 c4 38 	add	rsp, 56
 102a68e:	c3 	ret
 102a68f:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102a694:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 102a699:	48 89 34 24 	mov	qword ptr [rsp], rsi
 102a69d:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 102a6a2:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 102a6a7:	e8 a4 94 02 00 	call	169124 <_runtime.memmove>
 102a6ac:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102a6b1:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 102a6b6:	eb af 	jmp	-81 <_runtime.gwrite+0xd7>
 102a6b8:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102a6bd:	48 83 c4 38 	add	rsp, 56
 102a6c1:	c3 	ret
 102a6c2:	e8 c9 8c 02 00 	call	167113 <_runtime.panicSliceAcap>
 102a6c7:	90 	nop
 102a6c8:	e8 03 65 02 00 	call	156931 <_runtime.morestack_noctxt>
 102a6cd:	e9 be fe ff ff 	jmp	-322 <_runtime.gwrite>
 102a6d2:	cc 	int3
 102a6d3:	cc 	int3
 102a6d4:	cc 	int3
 102a6d5:	cc 	int3
 102a6d6:	cc 	int3
 102a6d7:	cc 	int3
 102a6d8:	cc 	int3
 102a6d9:	cc 	int3
 102a6da:	cc 	int3
 102a6db:	cc 	int3
 102a6dc:	cc 	int3
 102a6dd:	cc 	int3
 102a6de:	cc 	int3
 102a6df:	cc 	int3

_runtime.printsp:
 102a6e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a6e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a6ed:	76 31 	jbe	49 <_runtime.printsp+0x40>
 102a6ef:	48 83 ec 18 	sub	rsp, 24
 102a6f3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102a6f8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102a6fd:	48 8d 05 54 85 04 00 	lea	rax, [rip + 296276]
 102a704:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a708:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102a711:	e8 ca 06 00 00 	call	1738 <_runtime.printstring>
 102a716:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102a71b:	48 83 c4 18 	add	rsp, 24
 102a71f:	c3 	ret
 102a720:	e8 ab 64 02 00 	call	156843 <_runtime.morestack_noctxt>
 102a725:	eb b9 	jmp	-71 <_runtime.printsp>
 102a727:	cc 	int3
 102a728:	cc 	int3
 102a729:	cc 	int3
 102a72a:	cc 	int3
 102a72b:	cc 	int3
 102a72c:	cc 	int3
 102a72d:	cc 	int3
 102a72e:	cc 	int3
 102a72f:	cc 	int3

_runtime.printnl:
 102a730:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a739:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a73d:	76 31 	jbe	49 <_runtime.printnl+0x40>
 102a73f:	48 83 ec 18 	sub	rsp, 24
 102a743:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102a748:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102a74d:	48 8d 05 11 85 04 00 	lea	rax, [rip + 296209]
 102a754:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a758:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102a761:	e8 7a 06 00 00 	call	1658 <_runtime.printstring>
 102a766:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102a76b:	48 83 c4 18 	add	rsp, 24
 102a76f:	c3 	ret
 102a770:	e8 5b 64 02 00 	call	156763 <_runtime.morestack_noctxt>
 102a775:	eb b9 	jmp	-71 <_runtime.printnl>
 102a777:	cc 	int3
 102a778:	cc 	int3
 102a779:	cc 	int3
 102a77a:	cc 	int3
 102a77b:	cc 	int3
 102a77c:	cc 	int3
 102a77d:	cc 	int3
 102a77e:	cc 	int3
 102a77f:	cc 	int3

_runtime.printbool:
 102a780:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a789:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a78d:	76 55 	jbe	85 <_runtime.printbool+0x64>
 102a78f:	48 83 ec 18 	sub	rsp, 24
 102a793:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102a798:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102a79d:	0f b6 44 24 20 	movzx	eax, byte ptr [rsp + 32]
 102a7a2:	84 c0 	test	al, al
 102a7a4:	74 23 	je	35 <_runtime.printbool+0x49>
 102a7a6:	48 8d 05 ae 85 04 00 	lea	rax, [rip + 296366]
 102a7ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a7b1:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 102a7ba:	e8 21 06 00 00 	call	1569 <_runtime.printstring>
 102a7bf:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102a7c4:	48 83 c4 18 	add	rsp, 24
 102a7c8:	c3 	ret
 102a7c9:	48 8d 05 fd 85 04 00 	lea	rax, [rip + 296445]
 102a7d0:	48 89 04 24 	mov	qword ptr [rsp], rax
 102a7d4:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 102a7dd:	e8 fe 05 00 00 	call	1534 <_runtime.printstring>
 102a7e2:	eb db 	jmp	-37 <_runtime.printbool+0x3f>
 102a7e4:	e8 e7 63 02 00 	call	156647 <_runtime.morestack_noctxt>
 102a7e9:	eb 95 	jmp	-107 <_runtime.printbool>
 102a7eb:	cc 	int3
 102a7ec:	cc 	int3
 102a7ed:	cc 	int3
 102a7ee:	cc 	int3
 102a7ef:	cc 	int3

_runtime.printfloat:
 102a7f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102a7f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102a7fd:	0f 86 80 02 00 00 	jbe	640 <_runtime.printfloat+0x293>
 102a803:	48 83 ec 38 	sub	rsp, 56
 102a807:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102a80c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102a811:	f2 0f 10 44 24 40 	movsd	xmm0, qword ptr [rsp + 64]
 102a817:	66 0f 2e c0 	ucomisd	xmm0, xmm0
 102a81b:	0f 85 3f 02 00 00 	jne	575 <_runtime.printfloat+0x270>
 102a821:	0f 8a 39 02 00 00 	jp	569 <_runtime.printfloat+0x270>
 102a827:	0f 10 c8 	movups	xmm1, xmm0
 102a82a:	f2 0f 58 c0 	addsd	xmm0, xmm0
 102a82e:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 102a832:	0f 85 20 02 00 00 	jne	544 <_runtime.printfloat+0x268>
 102a838:	0f 8a 1a 02 00 00 	jp	538 <_runtime.printfloat+0x268>
 102a83e:	0f 57 d2 	xorps	xmm2, xmm2
 102a841:	66 0f 2e ca 	ucomisd	xmm1, xmm2
 102a845:	0f 87 ea 01 00 00 	ja	490 <_runtime.printfloat+0x245>
 102a84b:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 102a84f:	75 0c 	jne	12 <_runtime.printfloat+0x6d>
 102a851:	7a 0a 	jp	10 <_runtime.printfloat+0x6d>
 102a853:	66 0f 2e d1 	ucomisd	xmm2, xmm1
 102a857:	0f 87 b5 01 00 00 	ja	437 <_runtime.printfloat+0x222>
 102a85d:	48 c7 44 24 22 00 00 00 00 	mov	qword ptr [rsp + 34], 0
 102a866:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 102a86f:	c6 44 24 22 2b 	mov	byte ptr [rsp + 34], 43
 102a874:	66 0f 2e d1 	ucomisd	xmm2, xmm1
 102a878:	0f 85 16 01 00 00 	jne	278 <_runtime.printfloat+0x1a4>
 102a87e:	0f 8a 10 01 00 00 	jp	272 <_runtime.printfloat+0x1a4>
 102a884:	f2 0f 10 05 8c 8e 05 00 	movsd	xmm0, qword ptr [rip + 364172]
 102a88c:	f2 0f 5e c1 	divsd	xmm0, xmm1
 102a890:	66 0f 2e d0 	ucomisd	xmm2, xmm0
 102a894:	76 05 	jbe	5 <_runtime.printfloat+0xab>
 102a896:	c6 44 24 22 2d 	mov	byte ptr [rsp + 34], 45
 102a89b:	31 c0 	xor	eax, eax
 102a89d:	31 c9 	xor	ecx, ecx
 102a89f:	eb 2d 	jmp	45 <_runtime.printfloat+0xde>
 102a8a1:	f2 48 0f 2c d1 	cvttsd2si	rdx, xmm1
 102a8a6:	48 8d 5a 30 	lea	rbx, [rdx + 48]
 102a8aa:	48 8d 74 24 22 	lea	rsi, [rsp + 34]
 102a8af:	88 5c 31 02 	mov	byte ptr [rcx + rsi + 2], bl
 102a8b3:	48 ff c1 	inc	rcx
 102a8b6:	0f 57 c0 	xorps	xmm0, xmm0
 102a8b9:	f2 48 0f 2a c2 	cvtsi2sd	xmm0, rdx
 102a8be:	f2 0f 5c c8 	subsd	xmm1, xmm0
 102a8c2:	f2 0f 10 05 7e 8e 05 00 	movsd	xmm0, qword ptr [rip + 364158]
 102a8ca:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 102a8ce:	48 83 f9 07 	cmp	rcx, 7
 102a8d2:	7c cd 	jl	-51 <_runtime.printfloat+0xb1>
 102a8d4:	0f b6 4c 24 24 	movzx	ecx, byte ptr [rsp + 36]
 102a8d9:	88 4c 24 23 	mov	byte ptr [rsp + 35], cl
 102a8dd:	c6 44 24 24 2e 	mov	byte ptr [rsp + 36], 46
 102a8e2:	66 c7 44 24 2b 65 2b 	mov	word ptr [rsp + 43], 11109
 102a8e9:	48 85 c0 	test	rax, rax
 102a8ec:	7d 08 	jge	8 <_runtime.printfloat+0x106>
 102a8ee:	c6 44 24 2c 2d 	mov	byte ptr [rsp + 44], 45
 102a8f3:	48 f7 d8 	neg	rax
 102a8f6:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102a8fb:	48 b9 0b d7 a3 70 3d 0a d7 a3 	movabs	rcx, -6640827866535438581
 102a905:	48 f7 e9 	imul	rcx
 102a908:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102a90d:	48 01 ca 	add	rdx, rcx
 102a910:	48 c1 fa 06 	sar	rdx, 6
 102a914:	48 89 cb 	mov	rbx, rcx
 102a917:	48 c1 f9 3f 	sar	rcx, 63
 102a91b:	48 29 ca 	sub	rdx, rcx
 102a91e:	83 c2 30 	add	edx, 48
 102a921:	88 54 24 2d 	mov	byte ptr [rsp + 45], dl
 102a925:	48 b8 cd cc cc cc cc cc cc cc 	movabs	rax, -3689348814741910323
 102a92f:	48 f7 eb 	imul	rbx
 102a932:	48 01 da 	add	rdx, rbx
 102a935:	48 c1 fa 03 	sar	rdx, 3
 102a939:	48 29 ca 	sub	rdx, rcx
 102a93c:	0f b6 ca 	movzx	ecx, dl
 102a93f:	69 c9 9a 01 00 00 	imul	ecx, ecx, 410
 102a945:	c1 e9 0c 	shr	ecx, 12
 102a948:	8d 0c 89 	lea	ecx, [rcx + 4*rcx]
 102a94b:	d1 e1 	shl	ecx
 102a94d:	48 89 d6 	mov	rsi, rdx
 102a950:	29 ca 	sub	edx, ecx
 102a952:	8d 4a 30 	lea	ecx, [rdx + 48]
 102a955:	88 4c 24 2e 	mov	byte ptr [rsp + 46], cl
 102a959:	48 8d 0c b6 	lea	rcx, [rsi + 4*rsi]
 102a95d:	48 d1 e1 	shl	rcx
 102a960:	48 29 cb 	sub	rbx, rcx
 102a963:	8d 4b 30 	lea	ecx, [rbx + 48]
 102a966:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 102a96a:	48 8d 4c 24 22 	lea	rcx, [rsp + 34]
 102a96f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102a973:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 102a97c:	48 c7 44 24 10 0e 00 00 00 	mov	qword ptr [rsp + 16], 14
 102a985:	e8 06 fc ff ff 	call	-1018 <_runtime.gwrite>
 102a98a:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102a98f:	48 83 c4 38 	add	rsp, 56
 102a993:	c3 	ret
 102a994:	76 11 	jbe	17 <_runtime.printfloat+0x1b7>
 102a996:	c6 44 24 22 2d 	mov	byte ptr [rsp + 34], 45
 102a99b:	f2 0f 10 05 dd 8d 05 00 	movsd	xmm0, qword ptr [rip + 363997]
 102a9a3:	66 0f ef c8 	pxor	xmm1, xmm0
 102a9a7:	31 c0 	xor	eax, eax
 102a9a9:	eb 07 	jmp	7 <_runtime.printfloat+0x1c2>
 102a9ab:	48 ff c0 	inc	rax
 102a9ae:	f2 0f 5e c8 	divsd	xmm1, xmm0
 102a9b2:	f2 0f 10 05 8e 8d 05 00 	movsd	xmm0, qword ptr [rip + 363918]
 102a9ba:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 102a9be:	73 eb 	jae	-21 <_runtime.printfloat+0x1bb>
 102a9c0:	eb 07 	jmp	7 <_runtime.printfloat+0x1d9>
 102a9c2:	48 ff c8 	dec	rax
 102a9c5:	f2 0f 59 c8 	mulsd	xmm1, xmm0
 102a9c9:	f2 0f 10 15 47 8d 05 00 	movsd	xmm2, qword ptr [rip + 363847]
 102a9d1:	66 0f 2e d1 	ucomisd	xmm2, xmm1
 102a9d5:	77 eb 	ja	-21 <_runtime.printfloat+0x1d2>
 102a9d7:	31 c9 	xor	ecx, ecx
 102a9d9:	f2 0f 10 15 5f 8d 05 00 	movsd	xmm2, qword ptr [rip + 363871]
 102a9e1:	eb 07 	jmp	7 <_runtime.printfloat+0x1fa>
 102a9e3:	48 ff c1 	inc	rcx
 102a9e6:	f2 0f 5e d0 	divsd	xmm2, xmm0
 102a9ea:	48 83 f9 07 	cmp	rcx, 7
 102a9ee:	7c f3 	jl	-13 <_runtime.printfloat+0x1f3>
 102a9f0:	f2 0f 58 d1 	addsd	xmm2, xmm1
 102a9f4:	66 0f 2e d0 	ucomisd	xmm2, xmm0
 102a9f8:	72 13 	jb	19 <_runtime.printfloat+0x21d>
 102a9fa:	48 8d 48 01 	lea	rcx, [rax + 1]
 102a9fe:	f2 0f 5e d0 	divsd	xmm2, xmm0
 102aa02:	0f 10 ca 	movups	xmm1, xmm2
 102aa05:	48 89 c8 	mov	rax, rcx
 102aa08:	e9 90 fe ff ff 	jmp	-368 <_runtime.printfloat+0xad>
 102aa0d:	48 89 c1 	mov	rcx, rax
 102aa10:	eb f0 	jmp	-16 <_runtime.printfloat+0x212>
 102aa12:	48 8d 05 ea 82 04 00 	lea	rax, [rip + 295658]
 102aa19:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aa1d:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 102aa26:	e8 b5 03 00 00 	call	949 <_runtime.printstring>
 102aa2b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102aa30:	48 83 c4 38 	add	rsp, 56
 102aa34:	c3 	ret
 102aa35:	48 8d 05 bf 82 04 00 	lea	rax, [rip + 295615]
 102aa3c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aa40:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 102aa49:	e8 92 03 00 00 	call	914 <_runtime.printstring>
 102aa4e:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102aa53:	48 83 c4 38 	add	rsp, 56
 102aa57:	c3 	ret
 102aa58:	0f 57 d2 	xorps	xmm2, xmm2
 102aa5b:	e9 ef fd ff ff 	jmp	-529 <_runtime.printfloat+0x5f>
 102aa60:	48 8d 05 41 82 04 00 	lea	rax, [rip + 295489]
 102aa67:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aa6b:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 102aa74:	e8 67 03 00 00 	call	871 <_runtime.printstring>
 102aa79:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102aa7e:	48 83 c4 38 	add	rsp, 56
 102aa82:	c3 	ret
 102aa83:	e8 48 61 02 00 	call	155976 <_runtime.morestack_noctxt>
 102aa88:	e9 63 fd ff ff 	jmp	-669 <_runtime.printfloat>
 102aa8d:	cc 	int3
 102aa8e:	cc 	int3
 102aa8f:	cc 	int3

_runtime.printcomplex:
 102aa90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102aa99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102aa9d:	76 74 	jbe	116 <_runtime.printcomplex+0x83>
 102aa9f:	48 83 ec 18 	sub	rsp, 24
 102aaa3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102aaa8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102aaad:	e8 ee f9 ff ff 	call	-1554 <_runtime.printlock>
 102aab2:	48 8d 05 a0 81 04 00 	lea	rax, [rip + 295328]
 102aab9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aabd:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102aac6:	e8 15 03 00 00 	call	789 <_runtime.printstring>
 102aacb:	f2 0f 10 44 24 20 	movsd	xmm0, qword ptr [rsp + 32]
 102aad1:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 102aad6:	e8 15 fd ff ff 	call	-747 <_runtime.printfloat>
 102aadb:	f2 0f 10 44 24 28 	movsd	xmm0, qword ptr [rsp + 40]
 102aae1:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 102aae6:	e8 05 fd ff ff 	call	-763 <_runtime.printfloat>
 102aaeb:	48 8d 05 92 81 04 00 	lea	rax, [rip + 295314]
 102aaf2:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aaf6:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 102aaff:	e8 dc 02 00 00 	call	732 <_runtime.printstring>
 102ab04:	e8 17 fa ff ff 	call	-1513 <_runtime.printunlock>
 102ab09:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102ab0e:	48 83 c4 18 	add	rsp, 24
 102ab12:	c3 	ret
 102ab13:	e8 b8 60 02 00 	call	155832 <_runtime.morestack_noctxt>
 102ab18:	e9 73 ff ff ff 	jmp	-141 <_runtime.printcomplex>
 102ab1d:	cc 	int3
 102ab1e:	cc 	int3
 102ab1f:	cc 	int3

_runtime.printuint:
 102ab20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ab29:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 102ab2e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 102ab32:	0f 86 db 00 00 00 	jbe	219 <_runtime.printuint+0xf3>
 102ab38:	48 81 ec 88 00 00 00 	sub	rsp, 136
 102ab3f:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 102ab47:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 102ab4f:	48 c7 44 24 1c 00 00 00 00 	mov	qword ptr [rsp + 28], 0
 102ab58:	48 8d 7c 24 20 	lea	rdi, [rsp + 32]
 102ab5d:	0f 57 c0 	xorps	xmm0, xmm0
 102ab60:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 102ab64:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 102ab69:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 102ab6e:	e8 8e 89 02 00 	call	166286 <_runtime.duffzero+0x111>
 102ab73:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 102ab77:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 102ab7f:	b8 63 00 00 00 	mov	eax, 99
 102ab84:	eb 04 	jmp	4 <_runtime.printuint+0x6a>
 102ab86:	48 8d 41 ff 	lea	rax, [rcx - 1]
 102ab8a:	48 85 c0 	test	rax, rax
 102ab8d:	7e 71 	jle	113 <_runtime.printuint+0xe0>
 102ab8f:	48 89 c1 	mov	rcx, rax
 102ab92:	48 b8 cd cc cc cc cc cc cc cc 	movabs	rax, -3689348814741910323
 102ab9c:	48 89 d3 	mov	rbx, rdx
 102ab9f:	48 f7 e2 	mul	rdx
 102aba2:	48 c1 ea 03 	shr	rdx, 3
 102aba6:	48 8d 34 92 	lea	rsi, [rdx + 4*rdx]
 102abaa:	48 d1 e6 	shl	rsi
 102abad:	48 89 df 	mov	rdi, rbx
 102abb0:	48 29 f3 	sub	rbx, rsi
 102abb3:	48 83 c3 30 	add	rbx, 48
 102abb7:	88 5c 0c 1c 	mov	byte ptr [rsp + rcx + 28], bl
 102abbb:	48 83 ff 0a 	cmp	rdi, 10
 102abbf:	73 c5 	jae	-59 <_runtime.printuint+0x66>
 102abc1:	48 83 f9 64 	cmp	rcx, 100
 102abc5:	77 3e 	ja	62 <_runtime.printuint+0xe5>
 102abc7:	48 8d 41 9c 	lea	rax, [rcx - 100]
 102abcb:	48 89 c2 	mov	rdx, rax
 102abce:	48 c1 f8 3f 	sar	rax, 63
 102abd2:	48 21 c1 	and	rcx, rax
 102abd5:	48 8d 44 0c 1c 	lea	rax, [rsp + rcx + 28]
 102abda:	48 89 04 24 	mov	qword ptr [rsp], rax
 102abde:	48 f7 da 	neg	rdx
 102abe1:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102abe6:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 102abeb:	e8 a0 f9 ff ff 	call	-1632 <_runtime.gwrite>
 102abf0:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 102abf8:	48 81 c4 88 00 00 00 	add	rsp, 136
 102abff:	c3 	ret
 102ac00:	48 89 c1 	mov	rcx, rax
 102ac03:	eb bc 	jmp	-68 <_runtime.printuint+0xa1>
 102ac05:	48 89 c8 	mov	rax, rcx
 102ac08:	b9 64 00 00 00 	mov	ecx, 100
 102ac0d:	e8 9e 87 02 00 	call	165790 <_runtime.panicSliceB>
 102ac12:	90 	nop
 102ac13:	e8 b8 5f 02 00 	call	155576 <_runtime.morestack_noctxt>
 102ac18:	e9 03 ff ff ff 	jmp	-253 <_runtime.printuint>
 102ac1d:	cc 	int3
 102ac1e:	cc 	int3
 102ac1f:	cc 	int3

_runtime.printint:
 102ac20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ac29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102ac2d:	76 4e 	jbe	78 <_runtime.printint+0x5d>
 102ac2f:	48 83 ec 18 	sub	rsp, 24
 102ac33:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102ac38:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102ac3d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102ac42:	48 85 c0 	test	rax, rax
 102ac45:	7c 13 	jl	19 <_runtime.printint+0x3a>
 102ac47:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ac4b:	e8 d0 fe ff ff 	call	-304 <_runtime.printuint>
 102ac50:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102ac55:	48 83 c4 18 	add	rsp, 24
 102ac59:	c3 	ret
 102ac5a:	48 8d 05 fc 7f 04 00 	lea	rax, [rip + 294908]
 102ac61:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ac65:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102ac6e:	e8 6d 01 00 00 	call	365 <_runtime.printstring>
 102ac73:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102ac78:	48 f7 d8 	neg	rax
 102ac7b:	eb ca 	jmp	-54 <_runtime.printint+0x27>
 102ac7d:	e8 4e 5f 02 00 	call	155470 <_runtime.morestack_noctxt>
 102ac82:	eb 9c 	jmp	-100 <_runtime.printint>
 102ac84:	cc 	int3
 102ac85:	cc 	int3
 102ac86:	cc 	int3
 102ac87:	cc 	int3
 102ac88:	cc 	int3
 102ac89:	cc 	int3
 102ac8a:	cc 	int3
 102ac8b:	cc 	int3
 102ac8c:	cc 	int3
 102ac8d:	cc 	int3
 102ac8e:	cc 	int3
 102ac8f:	cc 	int3

_runtime.printhex:
 102ac90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ac99:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 102ac9e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 102aca2:	0f 86 eb 00 00 00 	jbe	235 <_runtime.printhex+0x103>
 102aca8:	48 81 ec 88 00 00 00 	sub	rsp, 136
 102acaf:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 102acb7:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 102acbf:	48 c7 44 24 1c 00 00 00 00 	mov	qword ptr [rsp + 28], 0
 102acc8:	48 8d 7c 24 20 	lea	rdi, [rsp + 32]
 102accd:	0f 57 c0 	xorps	xmm0, xmm0
 102acd0:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 102acd4:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 102acd9:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 102acde:	e8 1e 88 02 00 	call	165918 <_runtime.duffzero+0x111>
 102ace3:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 102ace7:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 102acef:	b8 63 00 00 00 	mov	eax, 99
 102acf4:	eb 0a 	jmp	10 <_runtime.printhex+0x70>
 102acf6:	48 ff c8 	dec	rax
 102acf9:	48 c1 eb 04 	shr	rbx, 4
 102acfd:	48 89 da 	mov	rdx, rbx
 102ad00:	48 85 c0 	test	rax, rax
 102ad03:	7e 1c 	jle	28 <_runtime.printhex+0x91>
 102ad05:	48 89 d3 	mov	rbx, rdx
 102ad08:	48 83 e2 0f 	and	rdx, 15
 102ad0c:	48 8d 35 4f 8d 04 00 	lea	rsi, [rip + 298319]
 102ad13:	0f b6 14 16 	movzx	edx, byte ptr [rsi + rdx]
 102ad17:	88 54 04 1c 	mov	byte ptr [rsp + rax + 28], dl
 102ad1b:	48 83 fb 10 	cmp	rbx, 16
 102ad1f:	73 d5 	jae	-43 <_runtime.printhex+0x66>
 102ad21:	48 8d 50 ff 	lea	rdx, [rax - 1]
 102ad25:	48 83 fa 64 	cmp	rdx, 100
 102ad29:	73 5a 	jae	90 <_runtime.printhex+0xf5>
 102ad2b:	c6 44 04 1b 78 	mov	byte ptr [rsp + rax + 27], 120
 102ad30:	48 8d 50 fe 	lea	rdx, [rax - 2]
 102ad34:	48 83 fa 64 	cmp	rdx, 100
 102ad38:	73 3e 	jae	62 <_runtime.printhex+0xe8>
 102ad3a:	c6 44 04 1a 30 	mov	byte ptr [rsp + rax + 26], 48
 102ad3f:	48 83 c0 9a 	add	rax, -102
 102ad43:	48 89 c1 	mov	rcx, rax
 102ad46:	48 c1 f8 3f 	sar	rax, 63
 102ad4a:	48 21 c2 	and	rdx, rax
 102ad4d:	48 8d 44 14 1c 	lea	rax, [rsp + rdx + 28]
 102ad52:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ad56:	48 f7 d9 	neg	rcx
 102ad59:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102ad5e:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102ad63:	e8 28 f8 ff ff 	call	-2008 <_runtime.gwrite>
 102ad68:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 102ad70:	48 81 c4 88 00 00 00 	add	rsp, 136
 102ad77:	c3 	ret
 102ad78:	48 89 d0 	mov	rax, rdx
 102ad7b:	b9 64 00 00 00 	mov	ecx, 100
 102ad80:	e8 cb 85 02 00 	call	165323 <_runtime.panicIndex>
 102ad85:	48 89 d0 	mov	rax, rdx
 102ad88:	b9 64 00 00 00 	mov	ecx, 100
 102ad8d:	e8 be 85 02 00 	call	165310 <_runtime.panicIndex>
 102ad92:	90 	nop
 102ad93:	e8 38 5e 02 00 	call	155192 <_runtime.morestack_noctxt>
 102ad98:	e9 f3 fe ff ff 	jmp	-269 <_runtime.printhex>
 102ad9d:	cc 	int3
 102ad9e:	cc 	int3
 102ad9f:	cc 	int3

_runtime.printpointer:
 102ada0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ada9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102adad:	76 26 	jbe	38 <_runtime.printpointer+0x35>
 102adaf:	48 83 ec 10 	sub	rsp, 16
 102adb3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 102adb8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102adbd:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102adc2:	48 89 04 24 	mov	qword ptr [rsp], rax
 102adc6:	e8 c5 fe ff ff 	call	-315 <_runtime.printhex>
 102adcb:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102add0:	48 83 c4 10 	add	rsp, 16
 102add4:	c3 	ret
 102add5:	e8 f6 5d 02 00 	call	155126 <_runtime.morestack_noctxt>
 102adda:	eb c4 	jmp	-60 <_runtime.printpointer>
 102addc:	cc 	int3
 102addd:	cc 	int3
 102adde:	cc 	int3
 102addf:	cc 	int3

_runtime.printstring:
 102ade0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ade9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102aded:	76 73 	jbe	115 <_runtime.printstring+0x82>
 102adef:	48 83 ec 48 	sub	rsp, 72
 102adf3:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 102adf8:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 102adfd:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102ae02:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102ae07:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102ae0c:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102ae11:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 102ae1a:	0f 57 c0 	xorps	xmm0, xmm0
 102ae1d:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 102ae22:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102ae27:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102ae2c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102ae31:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102ae36:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102ae3b:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 102ae40:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 102ae45:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102ae49:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102ae4e:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102ae53:	e8 38 f7 ff ff 	call	-2248 <_runtime.gwrite>
 102ae58:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 102ae5d:	48 83 c4 48 	add	rsp, 72
 102ae61:	c3 	ret
 102ae62:	e8 69 5d 02 00 	call	154985 <_runtime.morestack_noctxt>
 102ae67:	e9 74 ff ff ff 	jmp	-140 <_runtime.printstring>
 102ae6c:	cc 	int3
 102ae6d:	cc 	int3
 102ae6e:	cc 	int3
 102ae6f:	cc 	int3

_runtime.printslice:
 102ae70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ae79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102ae7d:	0f 86 ab 00 00 00 	jbe	171 <_runtime.printslice+0xbe>
 102ae83:	48 83 ec 28 	sub	rsp, 40
 102ae87:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102ae8c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102ae91:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102ae96:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102ae9b:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102aea0:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102aea5:	e8 f6 f5 ff ff 	call	-2570 <_runtime.printlock>
 102aeaa:	48 8d 05 b3 7d 04 00 	lea	rax, [rip + 294323]
 102aeb1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aeb5:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102aebe:	e8 1d ff ff ff 	call	-227 <_runtime.printstring>
 102aec3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102aec8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aecc:	e8 4f fd ff ff 	call	-689 <_runtime.printint>
 102aed1:	48 8d 05 87 7d 04 00 	lea	rax, [rip + 294279]
 102aed8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aedc:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102aee5:	e8 f6 fe ff ff 	call	-266 <_runtime.printstring>
 102aeea:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102aeef:	48 89 04 24 	mov	qword ptr [rsp], rax
 102aef3:	e8 28 fd ff ff 	call	-728 <_runtime.printint>
 102aef8:	48 8d 05 68 7d 04 00 	lea	rax, [rip + 294248]
 102aeff:	48 89 04 24 	mov	qword ptr [rsp], rax
 102af03:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102af0c:	e8 cf fe ff ff 	call	-305 <_runtime.printstring>
 102af11:	e8 0a f6 ff ff 	call	-2550 <_runtime.printunlock>
 102af16:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102af1b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102af1f:	e8 6c fd ff ff 	call	-660 <_runtime.printhex>
 102af24:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102af29:	48 83 c4 28 	add	rsp, 40
 102af2d:	c3 	ret
 102af2e:	e8 9d 5c 02 00 	call	154781 <_runtime.morestack_noctxt>
 102af33:	e9 38 ff ff ff 	jmp	-200 <_runtime.printslice>
 102af38:	cc 	int3
 102af39:	cc 	int3
 102af3a:	cc 	int3
 102af3b:	cc 	int3
 102af3c:	cc 	int3
 102af3d:	cc 	int3
 102af3e:	cc 	int3
 102af3f:	cc 	int3

_runtime.printeface:
 102af40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102af49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102af4d:	0f 86 89 00 00 00 	jbe	137 <_runtime.printeface+0x9c>
 102af53:	48 83 ec 18 	sub	rsp, 24
 102af57:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102af5c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102af61:	e8 3a f5 ff ff 	call	-2758 <_runtime.printlock>
 102af66:	48 8d 05 ec 7c 04 00 	lea	rax, [rip + 294124]
 102af6d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102af71:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102af7a:	e8 61 fe ff ff 	call	-415 <_runtime.printstring>
 102af7f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102af84:	48 89 04 24 	mov	qword ptr [rsp], rax
 102af88:	e8 13 fe ff ff 	call	-493 <_runtime.printpointer>
 102af8d:	48 8d 05 c8 7c 04 00 	lea	rax, [rip + 294088]
 102af94:	48 89 04 24 	mov	qword ptr [rsp], rax
 102af98:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102afa1:	e8 3a fe ff ff 	call	-454 <_runtime.printstring>
 102afa6:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102afab:	48 89 04 24 	mov	qword ptr [rsp], rax
 102afaf:	e8 ec fd ff ff 	call	-532 <_runtime.printpointer>
 102afb4:	48 8d 05 9f 7c 04 00 	lea	rax, [rip + 294047]
 102afbb:	48 89 04 24 	mov	qword ptr [rsp], rax
 102afbf:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102afc8:	e8 13 fe ff ff 	call	-493 <_runtime.printstring>
 102afcd:	e8 4e f5 ff ff 	call	-2738 <_runtime.printunlock>
 102afd2:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102afd7:	48 83 c4 18 	add	rsp, 24
 102afdb:	c3 	ret
 102afdc:	e8 ef 5b 02 00 	call	154607 <_runtime.morestack_noctxt>
 102afe1:	e9 5a ff ff ff 	jmp	-166 <_runtime.printeface>
 102afe6:	cc 	int3
 102afe7:	cc 	int3
 102afe8:	cc 	int3
 102afe9:	cc 	int3
 102afea:	cc 	int3
 102afeb:	cc 	int3
 102afec:	cc 	int3
 102afed:	cc 	int3
 102afee:	cc 	int3
 102afef:	cc 	int3

_runtime.hexdumpWords:
 102aff0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102aff9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102affd:	0f 86 2e 02 00 00 	jbe	558 <_runtime.hexdumpWords+0x241>
 102b003:	48 83 ec 60 	sub	rsp, 96
 102b007:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 102b00c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 102b011:	e8 8a f4 ff ff 	call	-2934 <_runtime.printlock>
 102b016:	c6 44 24 27 00 	mov	byte ptr [rsp + 39], 0
 102b01b:	c6 44 24 27 20 	mov	byte ptr [rsp + 39], 32
 102b020:	31 c0 	xor	eax, eax
 102b022:	eb 09 	jmp	9 <_runtime.hexdumpWords+0x3d>
 102b024:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 102b029:	48 8d 41 08 	lea	rax, [rcx + 8]
 102b02d:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 102b032:	48 8d 1c 08 	lea	rbx, [rax + rcx]
 102b036:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 102b03b:	48 39 f3 	cmp	rbx, rsi
 102b03e:	0f 83 cf 01 00 00 	jae	463 <_runtime.hexdumpWords+0x223>
 102b044:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102b049:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 102b04e:	48 a9 0f 00 00 00 	test	rax, 15
 102b054:	75 40 	jne	64 <_runtime.hexdumpWords+0xa6>
 102b056:	48 85 c0 	test	rax, rax
 102b059:	0f 85 9b 01 00 00 	jne	411 <_runtime.hexdumpWords+0x20a>
 102b05f:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102b063:	48 8b 05 0e c8 04 00 	mov	rax, qword ptr [rip + 313358]
 102b06a:	48 8d 15 07 c8 04 00 	lea	rdx, [rip + 313351]
 102b071:	ff d0 	call	rax
 102b073:	e8 28 f4 ff ff 	call	-3032 <_runtime.printlock>
 102b078:	48 8d 05 f9 7b 04 00 	lea	rax, [rip + 293881]
 102b07f:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b083:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 102b08c:	e8 4f fd ff ff 	call	-689 <_runtime.printstring>
 102b091:	e8 8a f4 ff ff 	call	-2934 <_runtime.printunlock>
 102b096:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 102b09b:	48 85 d2 	test	rdx, rdx
 102b09e:	0f 85 2d 01 00 00 	jne	301 <_runtime.hexdumpWords+0x1e1>
 102b0a4:	48 8d 44 24 27 	lea	rax, [rsp + 39]
 102b0a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b0ad:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102b0b6:	48 c7 44 24 10 01 00 00 00 	mov	qword ptr [rsp + 16], 1
 102b0bf:	e8 cc f4 ff ff 	call	-2868 <_runtime.gwrite>
 102b0c4:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102b0c9:	48 8b 00 	mov	rax, qword ptr [rax]
 102b0cc:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102b0d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b0d5:	48 8b 0d 9c c7 04 00 	mov	rcx, qword ptr [rip + 313244]
 102b0dc:	48 8d 15 95 c7 04 00 	lea	rdx, [rip + 313237]
 102b0e3:	ff d1 	call	rcx
 102b0e5:	e8 b6 f3 ff ff 	call	-3146 <_runtime.printlock>
 102b0ea:	e8 f1 f5 ff ff 	call	-2575 <_runtime.printsp>
 102b0ef:	e8 2c f4 ff ff 	call	-3028 <_runtime.printunlock>
 102b0f4:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102b0f9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b0fd:	e8 6e 6a 01 00 	call	92782 <_runtime.findfunc>
 102b102:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102b107:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 102b10c:	48 85 c9 	test	rcx, rcx
 102b10f:	0f 84 0f ff ff ff 	je	-241 <_runtime.hexdumpWords+0x34>
 102b115:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 102b11a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102b11e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102b123:	e8 98 71 01 00 	call	94616 <_runtime.funcname>
 102b128:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102b12d:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 102b132:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102b137:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 102b13c:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 102b141:	48 8b 12 	mov	rdx, qword ptr [rdx]
 102b144:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 102b149:	e8 52 f3 ff ff 	call	-3246 <_runtime.printlock>
 102b14e:	48 8d 05 0c 7b 04 00 	lea	rax, [rip + 293644]
 102b155:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b159:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102b162:	e8 79 fc ff ff 	call	-903 <_runtime.printstring>
 102b167:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102b16c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b170:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102b175:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102b17a:	e8 61 fc ff ff 	call	-927 <_runtime.printstring>
 102b17f:	48 8d 05 d5 7a 04 00 	lea	rax, [rip + 293589]
 102b186:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b18a:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 102b193:	e8 48 fc ff ff 	call	-952 <_runtime.printstring>
 102b198:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102b19d:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102b1a2:	48 29 c8 	sub	rax, rcx
 102b1a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b1a9:	e8 72 f9 ff ff 	call	-1678 <_runtime.printuint>
 102b1ae:	48 8d 05 c5 7a 04 00 	lea	rax, [rip + 293573]
 102b1b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b1b9:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 102b1c2:	e8 19 fc ff ff 	call	-999 <_runtime.printstring>
 102b1c7:	e8 54 f3 ff ff 	call	-3244 <_runtime.printunlock>
 102b1cc:	e9 53 fe ff ff 	jmp	-429 <_runtime.hexdumpWords+0x34>
 102b1d1:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102b1d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b1da:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 102b1dd:	ff d1 	call	rcx
 102b1df:	0f b6 44 24 08 	movzx	eax, byte ptr [rsp + 8]
 102b1e4:	88 44 24 27 	mov	byte ptr [rsp + 39], al
 102b1e8:	84 c0 	test	al, al
 102b1ea:	0f 85 b4 fe ff ff 	jne	-332 <_runtime.hexdumpWords+0xb4>
 102b1f0:	c6 44 24 27 20 	mov	byte ptr [rsp + 39], 32
 102b1f5:	e9 aa fe ff ff 	jmp	-342 <_runtime.hexdumpWords+0xb4>
 102b1fa:	e8 a1 f2 ff ff 	call	-3423 <_runtime.printlock>
 102b1ff:	e8 2c f5 ff ff 	call	-2772 <_runtime.printnl>
 102b204:	e8 17 f3 ff ff 	call	-3305 <_runtime.printunlock>
 102b209:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 102b20e:	e9 4c fe ff ff 	jmp	-436 <_runtime.hexdumpWords+0x6f>
 102b213:	e8 88 f2 ff ff 	call	-3448 <_runtime.printlock>
 102b218:	e8 13 f5 ff ff 	call	-2797 <_runtime.printnl>
 102b21d:	e8 fe f2 ff ff 	call	-3330 <_runtime.printunlock>
 102b222:	e8 f9 f2 ff ff 	call	-3335 <_runtime.printunlock>
 102b227:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 102b22c:	48 83 c4 60 	add	rsp, 96
 102b230:	c3 	ret
 102b231:	e8 9a 59 02 00 	call	154010 <_runtime.morestack_noctxt>
 102b236:	e9 b5 fd ff ff 	jmp	-587 <_runtime.hexdumpWords>
 102b23b:	cc 	int3
 102b23c:	cc 	int3
 102b23d:	cc 	int3
 102b23e:	cc 	int3
 102b23f:	cc 	int3

_runtime.main:
 102b240:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102b249:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102b24d:	0f 86 6d 03 00 00 	jbe	877 <_runtime.main+0x380>
 102b253:	48 83 ec 50 	sub	rsp, 80
 102b257:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 102b25c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 102b261:	0f 57 c0 	xorps	xmm0, xmm0
 102b264:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 102b269:	c6 44 24 27 00 	mov	byte ptr [rsp + 39], 0
 102b26e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102b277:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102b27c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102b280:	48 8b 09 	mov	rcx, qword ptr [rcx]
 102b283:	48 c7 81 30 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 304], 0
 102b28e:	48 c7 05 17 ff 09 00 00 ca 9a 3b 	mov	qword ptr [rip + 655127], 1000000000
 102b299:	c6 05 cd c4 0c 00 01 	mov	byte ptr [rip + 836813], 1
 102b2a0:	48 8d 0d f9 c5 04 00 	lea	rcx, [rip + 312825]
 102b2a7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102b2ab:	e8 d0 57 02 00 	call	153552 <_runtime.systemstack>
 102b2b0:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102b2b9:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102b2bd:	90 	nop
 102b2be:	ff 80 74 02 00 00 	inc	dword ptr [rax + 628]
 102b2c4:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102b2cd:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102b2d1:	90 	nop
 102b2d2:	48 89 c2 	mov	rdx, rax
 102b2d5:	48 89 81 68 01 00 00 	mov	qword ptr [rcx + 360], rax
 102b2dc:	48 8b 42 30 	mov	rax, qword ptr [rdx + 48]
 102b2e0:	48 89 82 d8 00 00 00 	mov	qword ptr [rdx + 216], rax
 102b2e7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102b2ec:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102b2f0:	48 8d 0d 29 3a 0a 00 	lea	rcx, [rip + 670249]
 102b2f7:	48 39 c8 	cmp	rax, rcx
 102b2fa:	0f 85 97 02 00 00 	jne	663 <_runtime.main+0x357>
 102b300:	48 8d 05 f9 00 0a 00 	lea	rax, [rip + 655609]
 102b307:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b30b:	e8 30 c5 00 00 	call	50480 <_runtime.doInit>
 102b310:	e8 ab 7f 01 00 	call	98219 <_runtime.nanotime1>
 102b315:	48 83 3c 24 00 	cmp	qword ptr [rsp], 0
 102b31a:	0f 84 5e 02 00 00 	je	606 <_runtime.main+0x33e>
 102b320:	c6 44 24 26 01 	mov	byte ptr [rsp + 38], 1
 102b325:	48 8d 05 7c c5 04 00 	lea	rax, [rip + 312700]
 102b32c:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 102b331:	48 8d 44 24 26 	lea	rax, [rsp + 38]
 102b336:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 102b33b:	c6 44 24 27 01 	mov	byte ptr [rsp + 39], 1
 102b340:	e8 7b 7f 01 00 	call	98171 <_runtime.nanotime1>
 102b345:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102b349:	48 89 05 68 c5 0c 00 	mov	qword ptr [rip + 836968], rax
 102b350:	e8 fb 62 fe ff 	call	-105733 <_runtime.gcenable>
 102b355:	48 8d 05 84 44 03 00 	lea	rax, [rip + 214148]
 102b35c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b360:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 102b369:	e8 f2 82 fd ff 	call	-163086 <_runtime.makechan>
 102b36e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102b373:	83 3d 86 c5 0c 00 00 	cmp	dword ptr [rip + 836998], 0
 102b37a:	0f 85 89 01 00 00 	jne	393 <_runtime.main+0x2c9>
 102b380:	48 89 05 c9 2e 0a 00 	mov	qword ptr [rip + 667337], rax
 102b387:	80 3d dc c3 0c 00 00 	cmp	byte ptr [rip + 836572], 0
 102b38e:	74 6e 	je	110 <_runtime.main+0x1be>
 102b390:	48 83 3d 40 2e 0a 00 00 	cmp	qword ptr [rip + 667200], 0
 102b398:	0f 84 c7 01 00 00 	je	455 <_runtime.main+0x325>
 102b39e:	48 83 3d 42 2e 0a 00 00 	cmp	qword ptr [rip + 667202], 0
 102b3a6:	0f 84 a0 01 00 00 	je	416 <_runtime.main+0x30c>
 102b3ac:	48 83 3d 3c 2e 0a 00 00 	cmp	qword ptr [rip + 667196], 0
 102b3b4:	0f 84 79 01 00 00 	je	377 <_runtime.main+0x2f3>
 102b3ba:	48 83 3d 0e 2e 0a 00 00 	cmp	qword ptr [rip + 667150], 0
 102b3c2:	0f 84 52 01 00 00 	je	338 <_runtime.main+0x2da>
 102b3c8:	31 c0 	xor	eax, eax
 102b3ca:	48 8d 0d 8f c5 0c 00 	lea	rcx, [rip + 837007]
 102b3d1:	ba 01 00 00 00 	mov	edx, 1
 102b3d6:	f0 	lock
 102b3d7:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 102b3da:	0f 94 c1 	sete	cl
 102b3dd:	84 c9 	test	cl, cl
 102b3df:	0f 85 06 01 00 00 	jne	262 <_runtime.main+0x2ab>
 102b3e5:	48 8b 05 e4 2d 0a 00 	mov	rax, qword ptr [rip + 667108]
 102b3ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b3f0:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 102b3f9:	e8 52 77 fd ff 	call	-166062 <_runtime.cgocall>
 102b3fe:	48 8d 05 cb fd 09 00 	lea	rax, [rip + 654795]
 102b405:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b409:	e8 32 c4 00 00 	call	50226 <_runtime.doInit>
 102b40e:	48 8b 05 3b 2e 0a 00 	mov	rax, qword ptr [rip + 667195]
 102b415:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b419:	e8 12 8d fd ff 	call	-160494 <_runtime.closechan>
 102b41e:	c6 44 24 26 00 	mov	byte ptr [rsp + 38], 0
 102b423:	e8 58 88 00 00 	call	34904 <_runtime.unlockOSThread>
 102b428:	80 3d 3a c3 0c 00 00 	cmp	byte ptr [rip + 836410], 0
 102b42f:	0f 85 99 00 00 00 	jne	153 <_runtime.main+0x28e>
 102b435:	80 3d 2f c3 0c 00 00 	cmp	byte ptr [rip + 836399], 0
 102b43c:	0f 85 8c 00 00 00 	jne	140 <_runtime.main+0x28e>
 102b442:	48 8b 05 67 c4 04 00 	mov	rax, qword ptr [rip + 312423]
 102b449:	48 8d 15 60 c4 04 00 	lea	rdx, [rip + 312416]
 102b450:	ff d0 	call	rax
 102b452:	8b 05 68 c3 0c 00 	mov	eax, dword ptr [rip + 836456]
 102b458:	85 c0 	test	eax, eax
 102b45a:	74 34 	je	52 <_runtime.main+0x250>
 102b45c:	31 c0 	xor	eax, eax
 102b45e:	eb 1e 	jmp	30 <_runtime.main+0x23e>
 102b460:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102b465:	90 	nop
 102b466:	48 8d 05 fb c3 04 00 	lea	rax, [rip + 312315]
 102b46d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b471:	e8 8a 55 02 00 	call	152970 <_runtime.mcall>
 102b476:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102b47b:	48 ff c0 	inc	rax
 102b47e:	48 3d e8 03 00 00 	cmp	rax, 1000
 102b484:	7d 0a 	jge	10 <_runtime.main+0x250>
 102b486:	8b 0d 34 c3 0c 00 	mov	ecx, dword ptr [rip + 836404]
 102b48c:	85 c9 	test	ecx, ecx
 102b48e:	75 d0 	jne	-48 <_runtime.main+0x220>
 102b490:	8b 05 22 c3 0c 00 	mov	eax, dword ptr [rip + 836386]
 102b496:	85 c0 	test	eax, eax
 102b498:	75 16 	jne	22 <_runtime.main+0x270>
 102b49a:	c7 04 24 00 00 00 00 	mov	dword ptr [rsp], 0
 102b4a1:	e8 fa 7c 01 00 	call	97530 <_runtime.exit>
 102b4a6:	31 c0 	xor	eax, eax
 102b4a8:	c7 00 00 00 00 00 	mov	dword ptr [rax], 0
 102b4ae:	eb f6 	jmp	-10 <_runtime.main+0x266>
 102b4b0:	0f 57 c0 	xorps	xmm0, xmm0
 102b4b3:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 102b4b7:	66 c7 44 24 10 08 10 	mov	word ptr [rsp + 16], 4104
 102b4be:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 102b4c7:	e8 74 02 00 00 	call	628 <_runtime.gopark>
 102b4cc:	eb cc 	jmp	-52 <_runtime.main+0x25a>
 102b4ce:	c6 44 24 27 00 	mov	byte ptr [rsp + 39], 0
 102b4d3:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102b4d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b4dc:	e8 0f 47 02 00 	call	149263 <_runtime.main.func2>
 102b4e1:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 102b4e6:	48 83 c4 50 	add	rsp, 80
 102b4ea:	c3 	ret
 102b4eb:	48 8d 05 96 c5 04 00 	lea	rax, [rip + 312726]
 102b4f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b4f6:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 102b4ff:	e8 ac 36 00 00 	call	13996 <_runtime.newm>
 102b504:	e9 dc fe ff ff 	jmp	-292 <_runtime.main+0x1a5>
 102b509:	48 8d 3d 40 2d 0a 00 	lea	rdi, [rip + 666944]
 102b510:	e8 cb 74 02 00 	call	160971 <_runtime.gcWriteBarrier>
 102b515:	e9 6d fe ff ff 	jmp	-403 <_runtime.main+0x147>
 102b51a:	48 8d 05 33 af 04 00 	lea	rax, [rip + 306995]
 102b521:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b525:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 102b52e:	e8 2d d8 ff ff 	call	-10195 <_runtime.throw>
 102b533:	48 8d 05 64 8e 04 00 	lea	rax, [rip + 298596]
 102b53a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b53e:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 102b547:	e8 14 d8 ff ff 	call	-10220 <_runtime.throw>
 102b54c:	48 8d 05 00 8a 04 00 	lea	rax, [rip + 297472]
 102b553:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b557:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102b560:	e8 fb d7 ff ff 	call	-10245 <_runtime.throw>
 102b565:	48 8d 05 7b 96 04 00 	lea	rax, [rip + 300667]
 102b56c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b570:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 102b579:	e8 e2 d7 ff ff 	call	-10270 <_runtime.throw>
 102b57e:	48 8d 05 40 93 04 00 	lea	rax, [rip + 299840]
 102b585:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b589:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 102b592:	e8 c9 d7 ff ff 	call	-10295 <_runtime.throw>
 102b597:	48 8d 05 84 90 04 00 	lea	rax, [rip + 299140]
 102b59e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b5a2:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 102b5ab:	e8 b0 d7 ff ff 	call	-10320 <_runtime.throw>
 102b5b0:	90 	nop
 102b5b1:	e8 5a c5 ff ff 	call	-15014 <_runtime.deferreturn>
 102b5b6:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 102b5bb:	48 83 c4 50 	add	rsp, 80
 102b5bf:	c3 	ret
 102b5c0:	e8 0b 56 02 00 	call	153099 <_runtime.morestack_noctxt>
 102b5c5:	e9 76 fc ff ff 	jmp	-906 <_runtime.main>
 102b5ca:	cc 	int3
 102b5cb:	cc 	int3
 102b5cc:	cc 	int3
 102b5cd:	cc 	int3
 102b5ce:	cc 	int3
 102b5cf:	cc 	int3

_runtime.init.6:
 102b5d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102b5d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102b5dd:	76 30 	jbe	48 <_runtime.init.6+0x3f>
 102b5df:	48 83 ec 18 	sub	rsp, 24
 102b5e3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102b5e8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102b5ed:	c7 04 24 00 00 00 00 	mov	dword ptr [rsp], 0
 102b5f4:	48 8d 05 ed c1 04 00 	lea	rax, [rip + 311789]
 102b5fb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102b600:	e8 eb 79 00 00 	call	31211 <_runtime.newproc>
 102b605:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102b60a:	48 83 c4 18 	add	rsp, 24
 102b60e:	c3 	ret
 102b60f:	e8 bc 55 02 00 	call	153020 <_runtime.morestack_noctxt>
 102b614:	eb ba 	jmp	-70 <_runtime.init.6>
 102b616:	cc 	int3
 102b617:	cc 	int3
 102b618:	cc 	int3
 102b619:	cc 	int3
 102b61a:	cc 	int3
 102b61b:	cc 	int3
 102b61c:	cc 	int3
 102b61d:	cc 	int3
 102b61e:	cc 	int3
 102b61f:	cc 	int3

_runtime.forcegchelper:
 102b620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102b629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102b62d:	0f 86 00 01 00 00 	jbe	256 <_runtime.forcegchelper+0x113>
 102b633:	48 83 ec 28 	sub	rsp, 40
 102b637:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102b63c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102b641:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102b64a:	83 3d af c2 0c 00 00 	cmp	dword ptr [rip + 836271], 0
 102b651:	0f 85 b1 00 00 00 	jne	177 <_runtime.forcegchelper+0xe8>
 102b657:	48 89 05 4a 2d 0a 00 	mov	qword ptr [rip + 666954], rax
 102b65e:	eb 23 	jmp	35 <_runtime.forcegchelper+0x63>
 102b660:	e8 5b 7c 01 00 	call	97371 <_runtime.nanotime1>
 102b665:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102b669:	48 c7 04 24 01 00 00 00 	mov	qword ptr [rsp], 1
 102b671:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102b676:	c7 44 24 10 00 00 00 00 	mov	dword ptr [rsp + 16], 0
 102b67e:	e8 6d 73 fe ff 	call	-101523 <_runtime.gcStart>
 102b683:	48 8d 05 16 2d 0a 00 	lea	rax, [rip + 666902]
 102b68a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b68e:	e8 9d ca fd ff 	call	-144739 <_runtime.lock>
 102b693:	83 3d 16 2d 0a 00 00 	cmp	dword ptr [rip + 666902], 0
 102b69a:	75 7d 	jne	125 <_runtime.forcegchelper+0xf9>
 102b69c:	b8 01 00 00 00 	mov	eax, 1
 102b6a1:	48 8d 0d 08 2d 0a 00 	lea	rcx, [rip + 666888]
 102b6a8:	87 01 	xchg	dword ptr [rcx], eax
 102b6aa:	90 	nop
 102b6ab:	48 8d 05 a6 c2 04 00 	lea	rax, [rip + 311974]
 102b6b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b6b6:	48 8d 0d e3 2c 0a 00 	lea	rcx, [rip + 666851]
 102b6bd:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102b6c2:	66 c7 44 24 10 11 14 	mov	word ptr [rsp + 16], 5137
 102b6c9:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 102b6d2:	e8 69 00 00 00 	call	105 <_runtime.gopark>
 102b6d7:	83 3d 82 c3 0c 00 00 	cmp	dword ptr [rip + 836482], 0
 102b6de:	7e 80 	jle	-128 <_runtime.forcegchelper+0x40>
 102b6e0:	e8 bb ed ff ff 	call	-4677 <_runtime.printlock>
 102b6e5:	48 8d 05 7b 7b 04 00 	lea	rax, [rip + 293755]
 102b6ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b6f0:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 102b6f9:	e8 e2 f6 ff ff 	call	-2334 <_runtime.printstring>
 102b6fe:	e8 1d ee ff ff 	call	-4579 <_runtime.printunlock>
 102b703:	e9 58 ff ff ff 	jmp	-168 <_runtime.forcegchelper+0x40>
 102b708:	48 8d 3d 99 2c 0a 00 	lea	rdi, [rip + 666777]
 102b70f:	e8 cc 72 02 00 	call	160460 <_runtime.gcWriteBarrier>
 102b714:	e9 45 ff ff ff 	jmp	-187 <_runtime.forcegchelper+0x3e>
 102b719:	48 8d 05 d8 8a 04 00 	lea	rax, [rip + 297688]
 102b720:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b724:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 102b72d:	e8 2e d6 ff ff 	call	-10706 <_runtime.throw>
 102b732:	90 	nop
 102b733:	e8 98 54 02 00 	call	152728 <_runtime.morestack_noctxt>
 102b738:	e9 e3 fe ff ff 	jmp	-285 <_runtime.forcegchelper>
 102b73d:	cc 	int3
 102b73e:	cc 	int3
 102b73f:	cc 	int3

_runtime.gopark:
 102b740:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102b749:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102b74d:	0f 86 18 01 00 00 	jbe	280 <_runtime.gopark+0x12b>
 102b753:	48 83 ec 18 	sub	rsp, 24
 102b757:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102b75c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102b761:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102b76a:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 102b76e:	90 	nop
 102b76f:	ff 82 08 01 00 00 	inc	dword ptr [rdx + 264]
 102b775:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 102b779:	84 01 	test	byte ptr [rcx], al
 102b77b:	48 8b 8a c0 00 00 00 	mov	rcx, qword ptr [rdx + 192]
 102b782:	90 	nop
 102b783:	8b 99 90 00 00 00 	mov	ebx, dword ptr [rcx + 144]
 102b789:	83 fb 02 	cmp	ebx, 2
 102b78c:	74 0c 	je	12 <_runtime.gopark+0x5a>
 102b78e:	81 fb 02 10 00 00 	cmp	ebx, 4098
 102b794:	0f 85 b7 00 00 00 	jne	183 <_runtime.gopark+0x111>
 102b79a:	83 3d 5f c1 0c 00 00 	cmp	dword ptr [rip + 835935], 0
 102b7a1:	0f 85 83 00 00 00 	jne	131 <_runtime.gopark+0xea>
 102b7a7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102b7ac:	48 89 82 88 02 00 00 	mov	qword ptr [rdx + 648], rax
 102b7b3:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102b7b8:	48 89 82 80 02 00 00 	mov	qword ptr [rdx + 640], rax
 102b7bf:	0f b6 44 24 30 	movzx	eax, byte ptr [rsp + 48]
 102b7c4:	88 81 b0 00 00 00 	mov	byte ptr [rcx + 176], al
 102b7ca:	0f b6 44 24 31 	movzx	eax, byte ptr [rsp + 49]
 102b7cf:	88 82 90 02 00 00 	mov	byte ptr [rdx + 656], al
 102b7d5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102b7da:	48 89 82 98 02 00 00 	mov	qword ptr [rdx + 664], rax
 102b7e1:	90 	nop
 102b7e2:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102b7eb:	8b 8a 08 01 00 00 	mov	ecx, dword ptr [rdx + 264]
 102b7f1:	8d 59 ff 	lea	ebx, [rcx - 1]
 102b7f4:	89 9a 08 01 00 00 	mov	dword ptr [rdx + 264], ebx
 102b7fa:	83 f9 01 	cmp	ecx, 1
 102b7fd:	75 11 	jne	17 <_runtime.gopark+0xd0>
 102b7ff:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 102b806:	74 08 	je	8 <_runtime.gopark+0xd0>
 102b808:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102b810:	48 8d 05 39 c1 04 00 	lea	rax, [rip + 311609]
 102b817:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b81b:	e8 e0 51 02 00 	call	152032 <_runtime.mcall>
 102b820:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102b825:	48 83 c4 18 	add	rsp, 24
 102b829:	c3 	ret
 102b82a:	48 8d ba 88 02 00 00 	lea	rdi, [rdx + 648]
 102b831:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102b836:	e8 a5 71 02 00 	call	160165 <_runtime.gcWriteBarrier>
 102b83b:	48 8d ba 80 02 00 00 	lea	rdi, [rdx + 640]
 102b842:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102b847:	e8 94 71 02 00 	call	160148 <_runtime.gcWriteBarrier>
 102b84c:	e9 6e ff ff ff 	jmp	-146 <_runtime.gopark+0x7f>
 102b851:	48 8d 05 dc 89 04 00 	lea	rax, [rip + 297436]
 102b858:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b85c:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 102b865:	e8 f6 d4 ff ff 	call	-11018 <_runtime.throw>
 102b86a:	90 	nop
 102b86b:	e8 60 53 02 00 	call	152416 <_runtime.morestack_noctxt>
 102b870:	e9 cb fe ff ff 	jmp	-309 <_runtime.gopark>
 102b875:	cc 	int3
 102b876:	cc 	int3
 102b877:	cc 	int3
 102b878:	cc 	int3
 102b879:	cc 	int3
 102b87a:	cc 	int3
 102b87b:	cc 	int3
 102b87c:	cc 	int3
 102b87d:	cc 	int3
 102b87e:	cc 	int3
 102b87f:	cc 	int3

_runtime.goready:
 102b880:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102b889:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102b88d:	76 57 	jbe	87 <_runtime.goready+0x66>
 102b88f:	48 83 ec 28 	sub	rsp, 40
 102b893:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102b898:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102b89d:	0f 57 c0 	xorps	xmm0, xmm0
 102b8a0:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 102b8a5:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 102b8ae:	48 8d 05 7b 43 02 00 	lea	rax, [rip + 148347]
 102b8b5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102b8ba:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102b8bf:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102b8c4:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102b8c9:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102b8ce:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 102b8d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b8d7:	e8 a4 51 02 00 	call	151972 <_runtime.systemstack>
 102b8dc:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102b8e1:	48 83 c4 28 	add	rsp, 40
 102b8e5:	c3 	ret
 102b8e6:	e8 e5 52 02 00 	call	152293 <_runtime.morestack_noctxt>
 102b8eb:	eb 93 	jmp	-109 <_runtime.goready>
 102b8ed:	cc 	int3
 102b8ee:	cc 	int3
 102b8ef:	cc 	int3

_runtime.acquireSudog:
 102b8f0:	48 83 ec 68 	sub	rsp, 104
 102b8f4:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 102b8f9:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 102b8fe:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 102b907:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 102b90b:	90 	nop
 102b90c:	ff 86 08 01 00 00 	inc	dword ptr [rsi + 264]
 102b912:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 102b916:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 102b91b:	4c 8b 86 d0 00 00 00 	mov	r8, qword ptr [rsi + 208]
 102b922:	84 03 	test	byte ptr [rbx], al
 102b924:	49 83 b8 18 0e 00 00 00 	cmp	qword ptr [r8 + 3608], 0
 102b92c:	0f 85 17 03 00 00 	jne	791 <_runtime.acquireSudog+0x359>
 102b932:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 102b937:	48 8d 05 da 2d 0a 00 	lea	rax, [rip + 667098]
 102b93e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102b942:	e8 e9 c7 fd ff 	call	-145431 <_runtime.lock>
 102b947:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102b94c:	48 8d 88 10 0e 00 00 	lea	rcx, [rax + 3600]
 102b953:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 102b958:	48 8b 90 20 0e 00 00 	mov	rdx, qword ptr [rax + 3616]
 102b95f:	48 d1 ea 	shr	rdx
 102b962:	48 39 90 18 0e 00 00 	cmp	qword ptr [rax + 3608], rdx
 102b969:	0f 8d 21 01 00 00 	jge	289 <_runtime.acquireSudog+0x1a0>
 102b96f:	48 8b 15 aa 2d 0a 00 	mov	rdx, qword ptr [rip + 667050]
 102b976:	48 85 d2 	test	rdx, rdx
 102b979:	0f 84 11 01 00 00 	je	273 <_runtime.acquireSudog+0x1a0>
 102b97f:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 102b983:	83 3d 76 bf 0c 00 00 	cmp	dword ptr [rip + 835446], 0
 102b98a:	0f 85 db 00 00 00 	jne	219 <_runtime.acquireSudog+0x17b>
 102b990:	48 89 1d 89 2d 0a 00 	mov	qword ptr [rip + 667017], rbx
 102b997:	48 c7 42 10 00 00 00 00 	mov	qword ptr [rdx + 16], 0
 102b99f:	48 8b 98 18 0e 00 00 	mov	rbx, qword ptr [rax + 3608]
 102b9a6:	48 8d 73 01 	lea	rsi, [rbx + 1]
 102b9aa:	4c 8b 80 20 0e 00 00 	mov	r8, qword ptr [rax + 3616]
 102b9b1:	4c 8b 88 10 0e 00 00 	mov	r9, qword ptr [rax + 3600]
 102b9b8:	4c 39 c6 	cmp	rsi, r8
 102b9bb:	77 34 	ja	52 <_runtime.acquireSudog+0x101>
 102b9bd:	48 8d 73 01 	lea	rsi, [rbx + 1]
 102b9c1:	48 89 b0 18 0e 00 00 	mov	qword ptr [rax + 3608], rsi
 102b9c8:	49 8d 3c d9 	lea	rdi, [r9 + 8*rbx]
 102b9cc:	83 3d 2d bf 0c 00 00 	cmp	dword ptr [rip + 835373], 0
 102b9d3:	75 09 	jne	9 <_runtime.acquireSudog+0xee>
 102b9d5:	49 89 14 d9 	mov	qword ptr [r9 + 8*rbx], rdx
 102b9d9:	e9 7a ff ff ff 	jmp	-134 <_runtime.acquireSudog+0x68>
 102b9de:	48 89 c3 	mov	rbx, rax
 102b9e1:	48 89 d0 	mov	rax, rdx
 102b9e4:	e8 f7 6f 02 00 	call	159735 <_runtime.gcWriteBarrier>
 102b9e9:	48 89 d8 	mov	rax, rbx
 102b9ec:	e9 67 ff ff ff 	jmp	-153 <_runtime.acquireSudog+0x68>
 102b9f1:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 102b9f6:	48 8d 05 03 23 03 00 	lea	rax, [rip + 205571]
 102b9fd:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ba01:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 102ba06:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 102ba0b:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 102ba10:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 102ba15:	e8 06 12 01 00 	call	70150 <_runtime.growslice>
 102ba1a:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102ba1f:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 102ba24:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 102ba29:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 102ba2e:	48 89 93 20 0e 00 00 	mov	qword ptr [rbx + 3616], rdx
 102ba35:	83 3d c4 be 0c 00 00 	cmp	dword ptr [rip + 835268], 0
 102ba3c:	75 21 	jne	33 <_runtime.acquireSudog+0x16f>
 102ba3e:	48 89 83 10 0e 00 00 	mov	qword ptr [rbx + 3600], rax
 102ba45:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 102ba4a:	48 89 cb 	mov	rbx, rcx
 102ba4d:	49 89 c1 	mov	r9, rax
 102ba50:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102ba55:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 102ba5a:	e9 5e ff ff ff 	jmp	-162 <_runtime.acquireSudog+0xcd>
 102ba5f:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 102ba64:	e8 77 6f 02 00 	call	159607 <_runtime.gcWriteBarrier>
 102ba69:	eb da 	jmp	-38 <_runtime.acquireSudog+0x155>
 102ba6b:	48 8d 3d ae 2c 0a 00 	lea	rdi, [rip + 666798]
 102ba72:	48 89 c6 	mov	rsi, rax
 102ba75:	48 89 d8 	mov	rax, rbx
 102ba78:	e8 63 6f 02 00 	call	159587 <_runtime.gcWriteBarrier>
 102ba7d:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 102ba81:	31 c0 	xor	eax, eax
 102ba83:	e8 58 6f 02 00 	call	159576 <_runtime.gcWriteBarrier>
 102ba88:	48 89 f0 	mov	rax, rsi
 102ba8b:	e9 0f ff ff ff 	jmp	-241 <_runtime.acquireSudog+0xaf>
 102ba90:	48 8d 05 81 2c 0a 00 	lea	rax, [rip + 666753]
 102ba97:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ba9b:	e8 70 c8 fd ff 	call	-145296 <_runtime.unlock>
 102baa0:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102baa5:	48 83 b8 18 0e 00 00 00 	cmp	qword ptr [rax + 3608], 0
 102baad:	0f 84 ae 00 00 00 	je	174 <_runtime.acquireSudog+0x271>
 102bab3:	48 8b 88 18 0e 00 00 	mov	rcx, qword ptr [rax + 3608]
 102baba:	48 8b 98 10 0e 00 00 	mov	rbx, qword ptr [rax + 3600]
 102bac1:	48 8d 71 ff 	lea	rsi, [rcx - 1]
 102bac5:	48 39 ce 	cmp	rsi, rcx
 102bac8:	0f 83 a4 01 00 00 	jae	420 <_runtime.acquireSudog+0x382>
 102bace:	4c 8b 44 cb f8 	mov	r8, qword ptr [rbx + 8*rcx - 8]
 102bad3:	48 8d 3c cb 	lea	rdi, [rbx + 8*rcx]
 102bad7:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 102badb:	83 3d 1e be 0c 00 00 	cmp	dword ptr [rip + 835102], 0
 102bae2:	75 6e 	jne	110 <_runtime.acquireSudog+0x262>
 102bae4:	48 c7 44 cb f8 00 00 00 00 	mov	qword ptr [rbx + 8*rcx - 8], 0
 102baed:	48 8b 90 20 0e 00 00 	mov	rdx, qword ptr [rax + 3616]
 102baf4:	48 39 d6 	cmp	rsi, rdx
 102baf7:	0f 87 6d 01 00 00 	ja	365 <_runtime.acquireSudog+0x37a>
 102bafd:	48 89 b0 18 0e 00 00 	mov	qword ptr [rax + 3608], rsi
 102bb04:	49 83 78 20 00 	cmp	qword ptr [r8 + 32], 0
 102bb09:	0f 85 42 01 00 00 	jne	322 <_runtime.acquireSudog+0x361>
 102bb0f:	90 	nop
 102bb10:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102bb19:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102bb1e:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 102bb24:	8d 5a ff 	lea	ebx, [rdx - 1]
 102bb27:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 102bb2d:	83 fa 01 	cmp	edx, 1
 102bb30:	75 11 	jne	17 <_runtime.acquireSudog+0x253>
 102bb32:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 102bb39:	74 08 	je	8 <_runtime.acquireSudog+0x253>
 102bb3b:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102bb43:	4c 89 44 24 70 	mov	qword ptr [rsp + 112], r8
 102bb48:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 102bb4d:	48 83 c4 68 	add	rsp, 104
 102bb51:	c3 	ret
 102bb52:	48 89 c1 	mov	rcx, rax
 102bb55:	31 c0 	xor	eax, eax
 102bb57:	e8 84 6e 02 00 	call	159364 <_runtime.gcWriteBarrier>
 102bb5c:	48 89 c8 	mov	rax, rcx
 102bb5f:	eb 8c 	jmp	-116 <_runtime.acquireSudog+0x1fd>
 102bb61:	48 8d 05 d8 37 04 00 	lea	rax, [rip + 276440]
 102bb68:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bb6c:	e8 8f e8 fd ff 	call	-137073 <_runtime.newobject>
 102bb71:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 102bb76:	48 8b 88 20 0e 00 00 	mov	rcx, qword ptr [rax + 3616]
 102bb7d:	48 8b 90 18 0e 00 00 	mov	rdx, qword ptr [rax + 3608]
 102bb84:	48 8b 98 10 0e 00 00 	mov	rbx, qword ptr [rax + 3600]
 102bb8b:	48 8d 72 01 	lea	rsi, [rdx + 1]
 102bb8f:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 102bb94:	48 39 ce 	cmp	rsi, rcx
 102bb97:	77 3a 	ja	58 <_runtime.acquireSudog+0x2e3>
 102bb99:	48 8d 72 01 	lea	rsi, [rdx + 1]
 102bb9d:	48 89 b0 18 0e 00 00 	mov	qword ptr [rax + 3608], rsi
 102bba4:	48 8d 34 d3 	lea	rsi, [rbx + 8*rdx]
 102bba8:	83 3d 51 bd 0c 00 00 	cmp	dword ptr [rip + 834897], 0
 102bbaf:	75 09 	jne	9 <_runtime.acquireSudog+0x2ca>
 102bbb1:	48 89 3c d3 	mov	qword ptr [rbx + 8*rdx], rdi
 102bbb5:	e9 f9 fe ff ff 	jmp	-263 <_runtime.acquireSudog+0x1c3>
 102bbba:	48 89 f9 	mov	rcx, rdi
 102bbbd:	48 89 f7 	mov	rdi, rsi
 102bbc0:	48 89 c2 	mov	rdx, rax
 102bbc3:	48 89 c8 	mov	rax, rcx
 102bbc6:	e8 15 6e 02 00 	call	159253 <_runtime.gcWriteBarrier>
 102bbcb:	48 89 d0 	mov	rax, rdx
 102bbce:	e9 e0 fe ff ff 	jmp	-288 <_runtime.acquireSudog+0x1c3>
 102bbd3:	48 89 7c 24 48 	mov	qword ptr [rsp + 72], rdi
 102bbd8:	48 8d 05 21 21 03 00 	lea	rax, [rip + 205089]
 102bbdf:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bbe3:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 102bbe8:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 102bbed:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 102bbf2:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 102bbf7:	e8 24 10 01 00 	call	69668 <_runtime.growslice>
 102bbfc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102bc01:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 102bc06:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 102bc0b:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 102bc10:	48 89 93 20 0e 00 00 	mov	qword ptr [rbx + 3616], rdx
 102bc17:	83 3d e2 bc 0c 00 00 	cmp	dword ptr [rip + 834786], 0
 102bc1e:	75 1d 	jne	29 <_runtime.acquireSudog+0x34d>
 102bc20:	48 89 83 10 0e 00 00 	mov	qword ptr [rbx + 3600], rax
 102bc27:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 102bc2c:	48 89 ca 	mov	rdx, rcx
 102bc2f:	48 89 c6 	mov	rsi, rax
 102bc32:	48 89 d8 	mov	rax, rbx
 102bc35:	48 89 f3 	mov	rbx, rsi
 102bc38:	e9 5c ff ff ff 	jmp	-164 <_runtime.acquireSudog+0x2a9>
 102bc3d:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 102bc42:	e8 99 6d 02 00 	call	159129 <_runtime.gcWriteBarrier>
 102bc47:	eb de 	jmp	-34 <_runtime.acquireSudog+0x337>
 102bc49:	4c 89 c0 	mov	rax, r8
 102bc4c:	e9 62 fe ff ff 	jmp	-414 <_runtime.acquireSudog+0x1c3>
 102bc51:	48 8d 05 7c ad 04 00 	lea	rax, [rip + 306556]
 102bc58:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bc5c:	48 c7 44 24 08 2a 00 00 00 	mov	qword ptr [rsp + 8], 42
 102bc65:	e8 f6 d0 ff ff 	call	-12042 <_runtime.throw>
 102bc6a:	48 89 f1 	mov	rcx, rsi
 102bc6d:	e8 1e 77 02 00 	call	161566 <_runtime.panicSliceAcap>
 102bc72:	48 89 f0 	mov	rax, rsi
 102bc75:	e8 d6 76 02 00 	call	161494 <_runtime.panicIndex>
 102bc7a:	90 	nop
 102bc7b:	cc 	int3
 102bc7c:	cc 	int3
 102bc7d:	cc 	int3
 102bc7e:	cc 	int3
 102bc7f:	cc 	int3

_runtime.releaseSudog:
 102bc80:	48 83 ec 68 	sub	rsp, 104
 102bc84:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 102bc89:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 102bc8e:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 102bc93:	48 83 78 20 00 	cmp	qword ptr [rax + 32], 0
 102bc98:	0f 85 50 03 00 00 	jne	848 <_runtime.releaseSudog+0x36e>
 102bc9e:	80 78 08 00 	cmp	byte ptr [rax + 8], 0
 102bca2:	0f 85 2d 03 00 00 	jne	813 <_runtime.releaseSudog+0x355>
 102bca8:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 102bcad:	0f 85 09 03 00 00 	jne	777 <_runtime.releaseSudog+0x33c>
 102bcb3:	48 83 78 18 00 	cmp	qword ptr [rax + 24], 0
 102bcb8:	0f 85 e5 02 00 00 	jne	741 <_runtime.releaseSudog+0x323>
 102bcbe:	48 83 78 48 00 	cmp	qword ptr [rax + 72], 0
 102bcc3:	0f 85 c1 02 00 00 	jne	705 <_runtime.releaseSudog+0x30a>
 102bcc9:	48 83 78 58 00 	cmp	qword ptr [rax + 88], 0
 102bcce:	0f 85 9d 02 00 00 	jne	669 <_runtime.releaseSudog+0x2f1>
 102bcd4:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 102bcdd:	48 83 bb 88 00 00 00 00 	cmp	qword ptr [rbx + 136], 0
 102bce5:	0f 85 6d 02 00 00 	jne	621 <_runtime.releaseSudog+0x2d8>
 102bceb:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 102bcef:	90 	nop
 102bcf0:	ff 86 08 01 00 00 	inc	dword ptr [rsi + 264]
 102bcf6:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 102bcfa:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 102bcff:	4c 8b 86 d0 00 00 00 	mov	r8, qword ptr [rsi + 208]
 102bd06:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 102bd0b:	84 03 	test	byte ptr [rbx], al
 102bd0d:	49 8b 98 20 0e 00 00 	mov	rbx, qword ptr [r8 + 3616]
 102bd14:	49 39 98 18 0e 00 00 	cmp	qword ptr [r8 + 3608], rbx
 102bd1b:	0f 85 06 01 00 00 	jne	262 <_runtime.releaseSudog+0x1a7>
 102bd21:	31 c9 	xor	ecx, ecx
 102bd23:	31 d2 	xor	edx, edx
 102bd25:	eb 03 	jmp	3 <_runtime.releaseSudog+0xaa>
 102bd27:	4c 89 da 	mov	rdx, r11
 102bd2a:	49 8b 98 20 0e 00 00 	mov	rbx, qword ptr [r8 + 3616]
 102bd31:	4d 8b 88 10 0e 00 00 	mov	r9, qword ptr [r8 + 3600]
 102bd38:	4d 8b 90 18 0e 00 00 	mov	r10, qword ptr [r8 + 3608]
 102bd3f:	48 d1 eb 	shr	rbx
 102bd42:	49 39 da 	cmp	r10, rbx
 102bd45:	0f 8e 87 00 00 00 	jle	135 <_runtime.releaseSudog+0x152>
 102bd4b:	49 8d 5a ff 	lea	rbx, [r10 - 1]
 102bd4f:	4c 39 d3 	cmp	rbx, r10
 102bd52:	0f 83 f5 01 00 00 	jae	501 <_runtime.releaseSudog+0x2cd>
 102bd58:	4f 8b 5c d1 f8 	mov	r11, qword ptr [r9 + 8*r10 - 8]
 102bd5d:	4b 8d 3c d1 	lea	rdi, [r9 + 8*r10]
 102bd61:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 102bd65:	83 3d 94 bb 0c 00 00 	cmp	dword ptr [rip + 834452], 0
 102bd6c:	75 55 	jne	85 <_runtime.releaseSudog+0x143>
 102bd6e:	4b c7 44 d1 f8 00 00 00 00 	mov	qword ptr [r9 + 8*r10 - 8], 0
 102bd77:	4d 8b 88 20 0e 00 00 	mov	r9, qword ptr [r8 + 3616]
 102bd7e:	4c 39 cb 	cmp	rbx, r9
 102bd81:	0f 87 bb 01 00 00 	ja	443 <_runtime.releaseSudog+0x2c2>
 102bd87:	49 89 98 18 0e 00 00 	mov	qword ptr [r8 + 3608], rbx
 102bd8e:	48 85 c9 	test	rcx, rcx
 102bd91:	74 28 	je	40 <_runtime.releaseSudog+0x13b>
 102bd93:	84 02 	test	byte ptr [rdx], al
 102bd95:	83 3d 64 bb 0c 00 00 	cmp	dword ptr [rip + 834404], 0
 102bd9c:	75 06 	jne	6 <_runtime.releaseSudog+0x124>
 102bd9e:	4c 89 5a 10 	mov	qword ptr [rdx + 16], r11
 102bda2:	eb 83 	jmp	-125 <_runtime.releaseSudog+0xa7>
 102bda4:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 102bda8:	48 89 c2 	mov	rdx, rax
 102bdab:	4c 89 d8 	mov	rax, r11
 102bdae:	e8 2d 6c 02 00 	call	158765 <_runtime.gcWriteBarrier>
 102bdb3:	48 89 d0 	mov	rax, rdx
 102bdb6:	e9 6c ff ff ff 	jmp	-148 <_runtime.releaseSudog+0xa7>
 102bdbb:	4c 89 d9 	mov	rcx, r11
 102bdbe:	e9 64 ff ff ff 	jmp	-156 <_runtime.releaseSudog+0xa7>
 102bdc3:	49 89 c1 	mov	r9, rax
 102bdc6:	31 c0 	xor	eax, eax
 102bdc8:	e8 13 6c 02 00 	call	158739 <_runtime.gcWriteBarrier>
 102bdcd:	4c 89 c8 	mov	rax, r9
 102bdd0:	eb a5 	jmp	-91 <_runtime.releaseSudog+0xf7>
 102bdd2:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 102bdd7:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 102bddc:	48 8d 05 35 29 0a 00 	lea	rax, [rip + 665909]
 102bde3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bde7:	e8 44 c3 fd ff 	call	-146620 <_runtime.lock>
 102bdec:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102bdf1:	84 00 	test	byte ptr [rax], al
 102bdf3:	48 8b 0d 26 29 0a 00 	mov	rcx, qword ptr [rip + 665894]
 102bdfa:	83 3d ff ba 0c 00 00 	cmp	dword ptr [rip + 834303], 0
 102be01:	0f 85 19 01 00 00 	jne	281 <_runtime.releaseSudog+0x2a0>
 102be07:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 102be0b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102be10:	48 89 05 09 29 0a 00 	mov	qword ptr [rip + 665865], rax
 102be17:	48 8d 05 fa 28 0a 00 	lea	rax, [rip + 665850]
 102be1e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102be22:	e8 e9 c4 fd ff 	call	-146199 <_runtime.unlock>
 102be27:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 102be2c:	48 8b 91 18 0e 00 00 	mov	rdx, qword ptr [rcx + 3608]
 102be33:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 102be37:	48 8b b1 20 0e 00 00 	mov	rsi, qword ptr [rcx + 3616]
 102be3e:	4c 8b 81 10 0e 00 00 	mov	r8, qword ptr [rcx + 3600]
 102be45:	48 39 f3 	cmp	rbx, rsi
 102be48:	77 6b 	ja	107 <_runtime.releaseSudog+0x235>
 102be4a:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 102be4e:	48 89 99 18 0e 00 00 	mov	qword ptr [rcx + 3608], rbx
 102be55:	49 8d 3c d0 	lea	rdi, [r8 + 8*rdx]
 102be59:	83 3d a0 ba 0c 00 00 	cmp	dword ptr [rip + 834208], 0
 102be60:	75 47 	jne	71 <_runtime.releaseSudog+0x229>
 102be62:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 102be67:	49 89 04 d0 	mov	qword ptr [r8 + 8*rdx], rax
 102be6b:	90 	nop
 102be6c:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102be75:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102be7a:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 102be80:	8d 5a ff 	lea	ebx, [rdx - 1]
 102be83:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 102be89:	83 fa 01 	cmp	edx, 1
 102be8c:	75 11 	jne	17 <_runtime.releaseSudog+0x21f>
 102be8e:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 102be95:	74 08 	je	8 <_runtime.releaseSudog+0x21f>
 102be97:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102be9f:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 102bea4:	48 83 c4 68 	add	rsp, 104
 102bea8:	c3 	ret
 102bea9:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 102beae:	e8 2d 6b 02 00 	call	158509 <_runtime.gcWriteBarrier>
 102beb3:	eb b6 	jmp	-74 <_runtime.releaseSudog+0x1eb>
 102beb5:	48 8d 05 44 1e 03 00 	lea	rax, [rip + 204356]
 102bebc:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bec0:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 102bec5:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 102beca:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 102becf:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 102bed4:	e8 47 0d 01 00 	call	68935 <_runtime.growslice>
 102bed9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102bede:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 102bee3:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 102bee8:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 102beed:	48 89 93 20 0e 00 00 	mov	qword ptr [rbx + 3616], rdx
 102bef4:	83 3d 05 ba 0c 00 00 	cmp	dword ptr [rip + 834053], 0
 102befb:	75 15 	jne	21 <_runtime.releaseSudog+0x292>
 102befd:	48 89 83 10 0e 00 00 	mov	qword ptr [rbx + 3600], rax
 102bf04:	48 89 ca 	mov	rdx, rcx
 102bf07:	49 89 c0 	mov	r8, rax
 102bf0a:	48 89 d9 	mov	rcx, rbx
 102bf0d:	e9 38 ff ff ff 	jmp	-200 <_runtime.releaseSudog+0x1ca>
 102bf12:	48 8d bb 10 0e 00 00 	lea	rdi, [rbx + 3600]
 102bf19:	e8 c2 6a 02 00 	call	158402 <_runtime.gcWriteBarrier>
 102bf1e:	eb e4 	jmp	-28 <_runtime.releaseSudog+0x284>
 102bf20:	48 8d 78 10 	lea	rdi, [rax + 16]
 102bf24:	48 89 c8 	mov	rax, rcx
 102bf27:	e8 b4 6a 02 00 	call	158388 <_runtime.gcWriteBarrier>
 102bf2c:	48 8d 3d ed 27 0a 00 	lea	rdi, [rip + 665581]
 102bf33:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102bf38:	e8 a3 6a 02 00 	call	158371 <_runtime.gcWriteBarrier>
 102bf3d:	e9 d5 fe ff ff 	jmp	-299 <_runtime.releaseSudog+0x197>
 102bf42:	48 89 d9 	mov	rcx, rbx
 102bf45:	4c 89 ca 	mov	rdx, r9
 102bf48:	e8 43 74 02 00 	call	160835 <_runtime.panicSliceAcap>
 102bf4d:	48 89 d8 	mov	rax, rbx
 102bf50:	4c 89 d1 	mov	rcx, r10
 102bf53:	e8 f8 73 02 00 	call	160760 <_runtime.panicIndex>
 102bf58:	48 8d 05 49 ac 04 00 	lea	rax, [rip + 306249]
 102bf5f:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bf63:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 102bf6c:	e8 ef cd ff ff 	call	-12817 <_runtime.throw>
 102bf71:	48 8d 05 8e 96 04 00 	lea	rax, [rip + 300686]
 102bf78:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bf7c:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 102bf85:	e8 d6 cd ff ff 	call	-12842 <_runtime.throw>
 102bf8a:	48 8d 05 e9 a3 04 00 	lea	rax, [rip + 304105]
 102bf91:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bf95:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 102bf9e:	e8 bd cd ff ff 	call	-12867 <_runtime.throw>
 102bfa3:	48 8d 05 f4 9c 04 00 	lea	rax, [rip + 302324]
 102bfaa:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bfae:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 102bfb7:	e8 a4 cd ff ff 	call	-12892 <_runtime.throw>
 102bfbc:	48 8d 05 bb 9c 04 00 	lea	rax, [rip + 302267]
 102bfc3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bfc7:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 102bfd0:	e8 8b cd ff ff 	call	-12917 <_runtime.throw>
 102bfd5:	48 8d 05 38 a6 04 00 	lea	rax, [rip + 304696]
 102bfdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bfe0:	48 c7 44 24 08 26 00 00 00 	mov	qword ptr [rsp + 8], 38
 102bfe9:	e8 72 cd ff ff 	call	-12942 <_runtime.throw>
 102bfee:	48 8d 05 69 9c 04 00 	lea	rax, [rip + 302185]
 102bff5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102bff9:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 102c002:	e8 59 cd ff ff 	call	-12967 <_runtime.throw>
 102c007:	90 	nop
 102c008:	cc 	int3
 102c009:	cc 	int3
 102c00a:	cc 	int3
 102c00b:	cc 	int3
 102c00c:	cc 	int3
 102c00d:	cc 	int3
 102c00e:	cc 	int3
 102c00f:	cc 	int3

_runtime.funcPC:
 102c010:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102c015:	48 8b 00 	mov	rax, qword ptr [rax]
 102c018:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102c01d:	c3 	ret
 102c01e:	cc 	int3
 102c01f:	cc 	int3

_runtime.badmcall:
 102c020:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c029:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c02d:	76 28 	jbe	40 <_runtime.badmcall+0x37>
 102c02f:	48 83 ec 18 	sub	rsp, 24
 102c033:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102c038:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102c03d:	48 8d 05 12 a3 04 00 	lea	rax, [rip + 303890]
 102c044:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c048:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 102c051:	e8 0a cd ff ff 	call	-13046 <_runtime.throw>
 102c056:	90 	nop
 102c057:	e8 74 4b 02 00 	call	150388 <_runtime.morestack_noctxt>
 102c05c:	eb c2 	jmp	-62 <_runtime.badmcall>
 102c05e:	cc 	int3
 102c05f:	cc 	int3

_runtime.badmcall2:
 102c060:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c069:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c06d:	76 28 	jbe	40 <_runtime.badmcall2+0x37>
 102c06f:	48 83 ec 18 	sub	rsp, 24
 102c073:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102c078:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102c07d:	48 8d 05 5a 9b 04 00 	lea	rax, [rip + 301914]
 102c084:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c088:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 102c091:	e8 ca cc ff ff 	call	-13110 <_runtime.throw>
 102c096:	90 	nop
 102c097:	e8 34 4b 02 00 	call	150324 <_runtime.morestack_noctxt>
 102c09c:	eb c2 	jmp	-62 <_runtime.badmcall2>
 102c09e:	cc 	int3
 102c09f:	cc 	int3

_runtime.badreflectcall:
 102c0a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c0a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c0ad:	76 2b 	jbe	43 <_runtime.badreflectcall+0x3a>
 102c0af:	48 83 ec 18 	sub	rsp, 24
 102c0b3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102c0b8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102c0bd:	48 8d 05 3c 77 03 00 	lea	rax, [rip + 227132]
 102c0c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c0c8:	48 8d 05 31 79 05 00 	lea	rax, [rip + 358705]
 102c0cf:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102c0d4:	e8 e7 c4 ff ff 	call	-15129 <_runtime.gopanic>
 102c0d9:	90 	nop
 102c0da:	e8 f1 4a 02 00 	call	150257 <_runtime.morestack_noctxt>
 102c0df:	eb bf 	jmp	-65 <_runtime.badreflectcall>
 102c0e1:	cc 	int3
 102c0e2:	cc 	int3
 102c0e3:	cc 	int3
 102c0e4:	cc 	int3
 102c0e5:	cc 	int3
 102c0e6:	cc 	int3
 102c0e7:	cc 	int3
 102c0e8:	cc 	int3
 102c0e9:	cc 	int3
 102c0ea:	cc 	int3
 102c0eb:	cc 	int3
 102c0ec:	cc 	int3
 102c0ed:	cc 	int3
 102c0ee:	cc 	int3
 102c0ef:	cc 	int3

_runtime.badmorestackg0:
 102c0f0:	48 83 ec 28 	sub	rsp, 40
 102c0f4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102c0f9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102c0fe:	48 8b 05 bb 06 0a 00 	mov	rax, qword ptr [rip + 657083]
 102c105:	48 8b 0d bc 06 0a 00 	mov	rcx, qword ptr [rip + 657084]
 102c10c:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 102c114:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102c119:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 102c11d:	e8 fe 70 01 00 	call	94462 <_runtime.write1>
 102c122:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102c127:	48 83 c4 28 	add	rsp, 40
 102c12b:	c3 	ret
 102c12c:	cc 	int3
 102c12d:	cc 	int3
 102c12e:	cc 	int3
 102c12f:	cc 	int3

_runtime.badmorestackgsignal:
 102c130:	48 83 ec 28 	sub	rsp, 40
 102c134:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102c139:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102c13e:	48 8b 05 8b 06 0a 00 	mov	rax, qword ptr [rip + 657035]
 102c145:	48 8b 0d 8c 06 0a 00 	mov	rcx, qword ptr [rip + 657036]
 102c14c:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 102c154:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102c159:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 102c15d:	e8 be 70 01 00 	call	94398 <_runtime.write1>
 102c162:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102c167:	48 83 c4 28 	add	rsp, 40
 102c16b:	c3 	ret
 102c16c:	cc 	int3
 102c16d:	cc 	int3
 102c16e:	cc 	int3
 102c16f:	cc 	int3

_runtime.badctxt:
 102c170:	48 83 ec 18 	sub	rsp, 24
 102c174:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102c179:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102c17e:	48 8d 05 d4 6f 04 00 	lea	rax, [rip + 290772]
 102c185:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c189:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 102c192:	e8 c9 cb ff ff 	call	-13367 <_runtime.throw>
 102c197:	90 	nop
 102c198:	cc 	int3
 102c199:	cc 	int3
 102c19a:	cc 	int3
 102c19b:	cc 	int3
 102c19c:	cc 	int3
 102c19d:	cc 	int3
 102c19e:	cc 	int3
 102c19f:	cc 	int3

_runtime.allgadd:
 102c1a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c1a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c1ad:	0f 86 21 01 00 00 	jbe	289 <_runtime.allgadd+0x134>
 102c1b3:	48 83 ec 48 	sub	rsp, 72
 102c1b7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 102c1bc:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 102c1c1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102c1c6:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 102c1cc:	85 c9 	test	ecx, ecx
 102c1ce:	0f 84 e6 00 00 00 	je	230 <_runtime.allgadd+0x11a>
 102c1d4:	48 8d 05 0d b6 0c 00 	lea	rax, [rip + 833037]
 102c1db:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c1df:	e8 4c bf fd ff 	call	-147636 <_runtime.lock>
 102c1e4:	48 8b 05 3d 21 0a 00 	mov	rax, qword ptr [rip + 663869]
 102c1eb:	48 8d 48 01 	lea	rcx, [rax + 1]
 102c1ef:	48 8b 15 3a 21 0a 00 	mov	rdx, qword ptr [rip + 663866]
 102c1f6:	48 8b 1d 23 21 0a 00 	mov	rbx, qword ptr [rip + 663843]
 102c1fd:	48 39 d1 	cmp	rcx, rdx
 102c200:	77 55 	ja	85 <_runtime.allgadd+0xb7>
 102c202:	48 8d 48 01 	lea	rcx, [rax + 1]
 102c206:	48 89 0d 1b 21 0a 00 	mov	qword ptr [rip + 663835], rcx
 102c20d:	48 8d 3c c3 	lea	rdi, [rbx + 8*rax]
 102c211:	83 3d e8 b6 0c 00 00 	cmp	dword ptr [rip + 833256], 0
 102c218:	75 31 	jne	49 <_runtime.allgadd+0xab>
 102c21a:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 102c21f:	48 89 0c c3 	mov	qword ptr [rbx + 8*rax], rcx
 102c223:	48 8b 05 fe 20 0a 00 	mov	rax, qword ptr [rip + 663806]
 102c22a:	48 89 05 af b5 0c 00 	mov	qword ptr [rip + 832943], rax
 102c231:	48 8d 05 b0 b5 0c 00 	lea	rax, [rip + 832944]
 102c238:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c23c:	e8 cf c0 fd ff 	call	-147249 <_runtime.unlock>
 102c241:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 102c246:	48 83 c4 48 	add	rsp, 72
 102c24a:	c3 	ret
 102c24b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102c250:	e8 8b 67 02 00 	call	157579 <_runtime.gcWriteBarrier>
 102c255:	eb cc 	jmp	-52 <_runtime.allgadd+0x83>
 102c257:	48 8d 35 62 0d 03 00 	lea	rsi, [rip + 200034]
 102c25e:	48 89 34 24 	mov	qword ptr [rsp], rsi
 102c262:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 102c267:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102c26c:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 102c271:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 102c276:	e8 a5 09 01 00 	call	68005 <_runtime.growslice>
 102c27b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102c280:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 102c285:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 102c28a:	48 89 15 9f 20 0a 00 	mov	qword ptr [rip + 663711], rdx
 102c291:	83 3d 68 b6 0c 00 00 	cmp	dword ptr [rip + 833128], 0
 102c298:	75 12 	jne	18 <_runtime.allgadd+0x10c>
 102c29a:	48 89 05 7f 20 0a 00 	mov	qword ptr [rip + 663679], rax
 102c2a1:	48 89 c3 	mov	rbx, rax
 102c2a4:	48 89 c8 	mov	rax, rcx
 102c2a7:	e9 56 ff ff ff 	jmp	-170 <_runtime.allgadd+0x62>
 102c2ac:	48 8d 3d 6d 20 0a 00 	lea	rdi, [rip + 663661]
 102c2b3:	e8 28 67 02 00 	call	157480 <_runtime.gcWriteBarrier>
 102c2b8:	eb e7 	jmp	-25 <_runtime.allgadd+0x101>
 102c2ba:	48 8d 05 3f 89 04 00 	lea	rax, [rip + 297279]
 102c2c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c2c5:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 102c2ce:	e8 8d ca ff ff 	call	-13683 <_runtime.throw>
 102c2d3:	90 	nop
 102c2d4:	e8 f7 48 02 00 	call	149751 <_runtime.morestack_noctxt>
 102c2d9:	e9 c2 fe ff ff 	jmp	-318 <_runtime.allgadd>
 102c2de:	cc 	int3
 102c2df:	cc 	int3

_runtime.cpuinit:
 102c2e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c2e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c2ed:	0f 86 82 01 00 00 	jbe	386 <_runtime.cpuinit+0x195>
 102c2f3:	48 83 ec 48 	sub	rsp, 72
 102c2f7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 102c2fc:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 102c301:	c6 05 58 b4 0c 00 01 	mov	byte ptr [rip + 832600], 1
 102c308:	31 c0 	xor	eax, eax
 102c30a:	eb 02 	jmp	2 <_runtime.cpuinit+0x2e>
 102c30c:	ff c0 	inc	eax
 102c30e:	8b 0d 68 b4 0c 00 	mov	ecx, dword ptr [rip + 832616]
 102c314:	8d 0c 08 	lea	ecx, [rax + rcx]
 102c317:	8d 49 01 	lea	ecx, [rcx + 1]
 102c31a:	48 63 c9 	movsxd	rcx, ecx
 102c31d:	48 c1 e1 03 	shl	rcx, 3
 102c321:	48 03 0d e0 1e 0a 00 	add	rcx, qword ptr [rip + 663264]
 102c328:	48 83 39 00 	cmp	qword ptr [rcx], 0
 102c32c:	75 de 	jne	-34 <_runtime.cpuinit+0x2c>
 102c32e:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 102c332:	31 c9 	xor	ecx, ecx
 102c334:	eb 0b 	jmp	11 <_runtime.cpuinit+0x61>
 102c336:	8b 54 24 24 	mov	edx, dword ptr [rsp + 36]
 102c33a:	8d 4a 01 	lea	ecx, [rdx + 1]
 102c33d:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 102c341:	39 c1 	cmp	ecx, eax
 102c343:	0f 8d 18 01 00 00 	jge	280 <_runtime.cpuinit+0x181>
 102c349:	89 4c 24 24 	mov	dword ptr [rsp + 36], ecx
 102c34d:	8b 05 29 b4 0c 00 	mov	eax, dword ptr [rip + 832553]
 102c353:	8d 04 08 	lea	eax, [rax + rcx]
 102c356:	8d 40 01 	lea	eax, [rax + 1]
 102c359:	48 63 c0 	movsxd	rax, eax
 102c35c:	48 c1 e0 03 	shl	rax, 3
 102c360:	48 03 05 a1 1e 0a 00 	add	rax, qword ptr [rip + 663201]
 102c367:	48 8b 00 	mov	rax, qword ptr [rax]
 102c36a:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102c36f:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c373:	e8 b8 4c 01 00 	call	85176 <_runtime.findnull>
 102c378:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102c37d:	0f 57 c0 	xorps	xmm0, xmm0
 102c380:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 102c385:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 102c38a:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 102c38f:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 102c394:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 102c399:	48 83 f8 08 	cmp	rax, 8
 102c39d:	0f 8d 91 00 00 00 	jge	145 <_runtime.cpuinit+0x154>
 102c3a3:	31 c0 	xor	eax, eax
 102c3a5:	84 c0 	test	al, al
 102c3a7:	74 8d 	je	-115 <_runtime.cpuinit+0x56>
 102c3a9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102c3ad:	e8 7e 49 01 00 	call	84350 <_runtime.gostring>
 102c3b2:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102c3b7:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102c3bc:	48 83 f9 08 	cmp	rcx, 8
 102c3c0:	0f 82 a4 00 00 00 	jb	164 <_runtime.cpuinit+0x18a>
 102c3c6:	48 83 c1 f8 	add	rcx, -8
 102c3ca:	48 89 ca 	mov	rdx, rcx
 102c3cd:	48 f7 d9 	neg	rcx
 102c3d0:	48 c1 f9 3f 	sar	rcx, 63
 102c3d4:	48 83 e1 08 	and	rcx, 8
 102c3d8:	48 01 c8 	add	rax, rcx
 102c3db:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c3df:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102c3e4:	e8 87 4c fd ff 	call	-177017 <_internal/cpu.Initialize>
 102c3e9:	0f b6 05 9a b8 0c 00 	movzx	eax, byte ptr [rip + 833690]
 102c3f0:	88 05 7e b3 0c 00 	mov	byte ptr [rip + 832382], al
 102c3f6:	0f b6 05 91 b8 0c 00 	movzx	eax, byte ptr [rip + 833681]
 102c3fd:	88 05 72 b3 0c 00 	mov	byte ptr [rip + 832370], al
 102c403:	0f b6 05 7d b8 0c 00 	movzx	eax, byte ptr [rip + 833661]
 102c40a:	88 05 63 b3 0c 00 	mov	byte ptr [rip + 832355], al
 102c410:	0f b6 05 c9 b7 0c 00 	movzx	eax, byte ptr [rip + 833481]
 102c417:	88 05 45 b3 0c 00 	mov	byte ptr [rip + 832325], al
 102c41d:	0f b6 05 04 b9 0c 00 	movzx	eax, byte ptr [rip + 833796]
 102c424:	88 05 37 b3 0c 00 	mov	byte ptr [rip + 832311], al
 102c42a:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 102c42f:	48 83 c4 48 	add	rsp, 72
 102c433:	c3 	ret
 102c434:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102c438:	48 8d 05 d8 6b 04 00 	lea	rax, [rip + 289752]
 102c43f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102c444:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 102c44d:	e8 9e 5c fd ff 	call	-172898 <_runtime.memequal>
 102c452:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 102c457:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 102c45c:	e9 44 ff ff ff 	jmp	-188 <_runtime.cpuinit+0xc5>
 102c461:	31 d2 	xor	edx, edx
 102c463:	31 c0 	xor	eax, eax
 102c465:	e9 71 ff ff ff 	jmp	-143 <_runtime.cpuinit+0xfb>
 102c46a:	b8 08 00 00 00 	mov	eax, 8
 102c46f:	e8 3c 6f 02 00 	call	159548 <_runtime.panicSliceB>
 102c474:	90 	nop
 102c475:	e8 56 47 02 00 	call	149334 <_runtime.morestack_noctxt>
 102c47a:	e9 61 fe ff ff 	jmp	-415 <_runtime.cpuinit>
 102c47f:	cc 	int3

_runtime.schedinit:
 102c480:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c489:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c48d:	0f 86 86 02 00 00 	jbe	646 <_runtime.schedinit+0x299>
 102c493:	48 83 ec 50 	sub	rsp, 80
 102c497:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 102c49c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 102c4a1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102c4aa:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 102c4af:	c7 05 df 21 0a 00 10 27 00 00 	mov	dword ptr [rip + 664031], 10000
 102c4b9:	48 8d 0d 98 b5 04 00 	lea	rcx, [rip + 308632]
 102c4c0:	84 01 	test	byte ptr [rcx], al
 102c4c2:	90 	nop
 102c4c3:	48 8b 0d 8e b5 04 00 	mov	rcx, qword ptr [rip + 308622]
 102c4ca:	48 89 0d ef b3 0c 00 	mov	qword ptr [rip + 832495], rcx
 102c4d1:	e8 3a 4f 01 00 	call	85818 <_runtime.moduledataverify>
 102c4d6:	e8 05 0e 01 00 	call	69125 <_runtime.stackinit>
 102c4db:	e8 80 c4 fd ff 	call	-146304 <_runtime.mallocinit>
 102c4e0:	90 	nop
 102c4e1:	48 8d 05 50 b3 0c 00 	lea	rax, [rip + 832336]
 102c4e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c4ec:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 102c4f5:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 102c4fe:	e8 8d 9f ff ff 	call	-24691 <_runtime.getRandomData>
 102c503:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102c508:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102c50c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102c510:	e8 db 02 00 00 	call	731 <_runtime.mcommoninit>
 102c515:	e8 c6 fd ff ff 	call	-570 <_runtime.cpuinit>
 102c51a:	e8 91 64 fd ff 	call	-170863 <_runtime.alginit>
 102c51f:	e8 5c 4c 01 00 	call	85084 <_runtime.modulesinit>
 102c524:	e8 87 f9 01 00 	call	129415 <_runtime.typelinksinit>
 102c529:	e8 62 b6 fd ff 	call	-149918 <_runtime.itabsinit>
 102c52e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102c533:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102c537:	84 01 	test	byte ptr [rcx], al
 102c539:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102c540:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 102c549:	48 83 e9 80 	sub	rcx, -128
 102c54d:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102c552:	e8 b9 6e 01 00 	call	93881 <_runtime.sigprocmask>
 102c557:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102c55c:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102c560:	8b 80 80 00 00 00 	mov	eax, dword ptr [rax + 128]
 102c566:	89 05 38 b2 0c 00 	mov	dword ptr [rip + 832056], eax
 102c56c:	e8 5f bb 00 00 	call	47967 <_runtime.goargs>
 102c571:	90 	nop
 102c572:	e8 a9 bc 00 00 	call	48297 <_runtime.goenvs_unix>
 102c577:	e8 d4 c3 00 00 	call	50132 <_runtime.parsedebugvars>
 102c57c:	e8 2f 4f fe ff 	call	-110801 <_runtime.gcinit>
 102c581:	e8 3a 6d 01 00 	call	93498 <_runtime.nanotime1>
 102c586:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102c58a:	48 89 05 d7 20 0a 00 	mov	qword ptr [rip + 663767], rax
 102c591:	8b 05 11 b2 0c 00 	mov	eax, dword ptr [rip + 832017]
 102c597:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 102c59b:	48 8d 0d cf 6c 04 00 	lea	rcx, [rip + 289999]
 102c5a2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102c5a6:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 102c5af:	e8 fc 8e fd ff 	call	-160004 <_runtime.gogetenv>
 102c5b4:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102c5b9:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102c5be:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102c5c2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102c5c7:	e8 34 49 01 00 	call	84276 <_runtime.atoi>
 102c5cc:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102c5d1:	48 63 c8 	movsxd	rcx, eax
 102c5d4:	48 39 c1 	cmp	rcx, rax
 102c5d7:	b9 00 00 00 00 	mov	ecx, 0
 102c5dc:	0f 44 c8 	cmove	ecx, eax
 102c5df:	0f 94 c0 	sete	al
 102c5e2:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 102c5e7:	21 d0 	and	eax, edx
 102c5e9:	84 c0 	test	al, al
 102c5eb:	0f 84 05 01 00 00 	je	261 <_runtime.schedinit+0x276>
 102c5f1:	85 c9 	test	ecx, ecx
 102c5f3:	0f 8e fd 00 00 00 	jle	253 <_runtime.schedinit+0x276>
 102c5f9:	89 0c 24 	mov	dword ptr [rsp], ecx
 102c5fc:	e8 7f 84 00 00 	call	33919 <_runtime.procresize>
 102c601:	48 83 7c 24 08 00 	cmp	qword ptr [rsp + 8], 0
 102c607:	0f 85 f2 00 00 00 	jne	242 <_runtime.schedinit+0x27f>
 102c60d:	83 3d 30 b4 0c 00 01 	cmp	dword ptr [rip + 832560], 1
 102c614:	7e 5c 	jle	92 <_runtime.schedinit+0x1f2>
 102c616:	c6 05 e8 b2 0c 00 01 	mov	byte ptr [rip + 832232], 1
 102c61d:	c6 05 dc b2 0c 00 01 	mov	byte ptr [rip + 832220], 1
 102c624:	48 8b 0d 15 1d 0a 00 	mov	rcx, qword ptr [rip + 662805]
 102c62b:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 102c630:	48 8b 15 11 1d 0a 00 	mov	rdx, qword ptr [rip + 662801]
 102c637:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 102c63c:	31 c0 	xor	eax, eax
 102c63e:	eb 2d 	jmp	45 <_runtime.schedinit+0x1ed>
 102c640:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102c645:	48 8b 14 c1 	mov	rdx, qword ptr [rcx + 8*rax]
 102c649:	84 02 	test	byte ptr [rdx], al
 102c64b:	48 81 c2 48 17 00 00 	add	rdx, 5960
 102c652:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102c656:	e8 85 8c ff ff 	call	-29563 <_runtime.(*wbBuf).reset>
 102c65b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102c660:	48 ff c0 	inc	rax
 102c663:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102c668:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 102c66d:	48 39 d0 	cmp	rax, rdx
 102c670:	7c ce 	jl	-50 <_runtime.schedinit+0x1c0>
 102c672:	48 83 3d 7e 01 0a 00 00 	cmp	qword ptr [rip + 655742], 0
 102c67a:	75 22 	jne	34 <_runtime.schedinit+0x21e>
 102c67c:	48 c7 05 71 01 0a 00 07 00 00 00 	mov	qword ptr [rip + 655729], 7
 102c687:	83 3d 72 b2 0c 00 00 	cmp	dword ptr [rip + 832114], 0
 102c68e:	75 51 	jne	81 <_runtime.schedinit+0x261>
 102c690:	48 8d 0d 12 69 04 00 	lea	rcx, [rip + 289042]
 102c697:	48 89 0d 52 01 0a 00 	mov	qword ptr [rip + 655698], rcx
 102c69e:	48 83 3d 92 01 0a 00 01 	cmp	qword ptr [rip + 655762], 1
 102c6a6:	75 1f 	jne	31 <_runtime.schedinit+0x247>
 102c6a8:	48 c7 05 85 01 0a 00 00 00 00 00 	mov	qword ptr [rip + 655749], 0
 102c6b3:	83 3d 46 b2 0c 00 00 	cmp	dword ptr [rip + 832070], 0
 102c6ba:	75 15 	jne	21 <_runtime.schedinit+0x251>
 102c6bc:	48 c7 05 69 01 0a 00 00 00 00 00 	mov	qword ptr [rip + 655721], 0
 102c6c7:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 102c6cc:	48 83 c4 50 	add	rsp, 80
 102c6d0:	c3 	ret
 102c6d1:	48 8d 3d 58 01 0a 00 	lea	rdi, [rip + 655704]
 102c6d8:	31 c0 	xor	eax, eax
 102c6da:	e8 01 63 02 00 	call	156417 <_runtime.gcWriteBarrier>
 102c6df:	eb e6 	jmp	-26 <_runtime.schedinit+0x247>
 102c6e1:	48 8d 3d 08 01 0a 00 	lea	rdi, [rip + 655624]
 102c6e8:	48 8d 05 ba 68 04 00 	lea	rax, [rip + 288954]
 102c6ef:	e8 ec 62 02 00 	call	156396 <_runtime.gcWriteBarrier>
 102c6f4:	eb a8 	jmp	-88 <_runtime.schedinit+0x21e>
 102c6f6:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 102c6fa:	e9 fa fe ff ff 	jmp	-262 <_runtime.schedinit+0x179>
 102c6ff:	48 8d 05 f8 a4 04 00 	lea	rax, [rip + 304376]
 102c706:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c70a:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 102c713:	e8 48 c6 ff ff 	call	-14776 <_runtime.throw>
 102c718:	90 	nop
 102c719:	e8 b2 44 02 00 	call	148658 <_runtime.morestack_noctxt>
 102c71e:	e9 5d fd ff ff 	jmp	-675 <_runtime.schedinit>
 102c723:	cc 	int3
 102c724:	cc 	int3
 102c725:	cc 	int3
 102c726:	cc 	int3
 102c727:	cc 	int3
 102c728:	cc 	int3
 102c729:	cc 	int3
 102c72a:	cc 	int3
 102c72b:	cc 	int3
 102c72c:	cc 	int3
 102c72d:	cc 	int3
 102c72e:	cc 	int3
 102c72f:	cc 	int3

_runtime.checkmcount:
 102c730:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c739:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c73d:	0f 86 9a 00 00 00 	jbe	154 <_runtime.checkmcount+0xad>
 102c743:	48 83 ec 20 	sub	rsp, 32
 102c747:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102c74c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102c751:	8b 05 41 1f 0a 00 	mov	eax, dword ptr [rip + 663361]
 102c757:	48 8b 0d 32 1f 0a 00 	mov	rcx, qword ptr [rip + 663346]
 102c75e:	48 2b 0d 3b 1f 0a 00 	sub	rcx, qword ptr [rip + 663355]
 102c765:	39 c1 	cmp	ecx, eax
 102c767:	7f 0a 	jg	10 <_runtime.checkmcount+0x43>
 102c769:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102c76e:	48 83 c4 20 	add	rsp, 32
 102c772:	c3 	ret
 102c773:	89 44 24 14 	mov	dword ptr [rsp + 20], eax
 102c777:	e8 24 dd ff ff 	call	-8924 <_runtime.printlock>
 102c77c:	48 8d 05 90 85 04 00 	lea	rax, [rip + 296336]
 102c783:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c787:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 102c790:	e8 4b e6 ff ff 	call	-6581 <_runtime.printstring>
 102c795:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 102c799:	48 63 c0 	movsxd	rax, eax
 102c79c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c7a0:	e8 7b e4 ff ff 	call	-7045 <_runtime.printint>
 102c7a5:	48 8d 05 60 70 04 00 	lea	rax, [rip + 290912]
 102c7ac:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c7b0:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 102c7b9:	e8 22 e6 ff ff 	call	-6622 <_runtime.printstring>
 102c7be:	e8 5d dd ff ff 	call	-8867 <_runtime.printunlock>
 102c7c3:	48 8d 05 32 76 04 00 	lea	rax, [rip + 292402]
 102c7ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c7ce:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 102c7d7:	e8 84 c5 ff ff 	call	-14972 <_runtime.throw>
 102c7dc:	90 	nop
 102c7dd:	e8 ee 43 02 00 	call	148462 <_runtime.morestack_noctxt>
 102c7e2:	e9 49 ff ff ff 	jmp	-183 <_runtime.checkmcount>
 102c7e7:	cc 	int3
 102c7e8:	cc 	int3
 102c7e9:	cc 	int3
 102c7ea:	cc 	int3
 102c7eb:	cc 	int3
 102c7ec:	cc 	int3
 102c7ed:	cc 	int3
 102c7ee:	cc 	int3
 102c7ef:	cc 	int3

_runtime.mcommoninit:
 102c7f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102c7f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102c7fd:	0f 86 52 02 00 00 	jbe	594 <_runtime.mcommoninit+0x265>
 102c803:	48 83 ec 40 	sub	rsp, 64
 102c807:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102c80c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 102c811:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102c81a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102c81e:	48 39 01 	cmp	qword ptr [rcx], rax
 102c821:	0f 85 dd 01 00 00 	jne	477 <_runtime.mcommoninit+0x214>
 102c827:	48 8d 05 4a 1e 0a 00 	lea	rax, [rip + 663114]
 102c82e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c832:	e8 f9 b8 fd ff 	call	-149255 <_runtime.lock>
 102c837:	48 8b 05 52 1e 0a 00 	mov	rax, qword ptr [rip + 663122]
 102c83e:	48 8d 48 01 	lea	rcx, [rax + 1]
 102c842:	48 39 c1 	cmp	rcx, rax
 102c845:	0f 8c f0 01 00 00 	jl	496 <_runtime.mcommoninit+0x24b>
 102c84b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c850:	48 89 81 e8 00 00 00 	mov	qword ptr [rcx + 232], rax
 102c857:	48 ff 05 32 1e 0a 00 	inc	qword ptr [rip + 663090]
 102c85e:	e8 cd fe ff ff 	call	-307 <_runtime.checkmcount>
 102c863:	48 8b 05 ce af 0c 00 	mov	rax, qword ptr [rip + 831438]
 102c86a:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c86f:	48 8b 91 e8 00 00 00 	mov	rdx, qword ptr [rcx + 232]
 102c876:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 102c87b:	48 8d 54 24 28 	lea	rdx, [rsp + 40]
 102c880:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102c884:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102c889:	e8 d2 60 02 00 	call	155858 <_runtime.memhash64>
 102c88e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102c893:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c898:	89 81 20 01 00 00 	mov	dword ptr [rcx + 288], eax
 102c89e:	e8 9d 5a 02 00 	call	154269 <_runtime.cputicks>
 102c8a3:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102c8a7:	48 8b 0d 8a af 0c 00 	mov	rcx, qword ptr [rip + 831370]
 102c8ae:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102c8b3:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 102c8b8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c8bc:	48 f7 d1 	not	rcx
 102c8bf:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102c8c4:	e8 97 60 02 00 	call	155799 <_runtime.memhash64>
 102c8c9:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102c8ce:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c8d3:	89 81 24 01 00 00 	mov	dword ptr [rcx + 292], eax
 102c8d9:	8b 91 20 01 00 00 	mov	edx, dword ptr [rcx + 288]
 102c8df:	09 c2 	or	edx, eax
 102c8e1:	85 d2 	test	edx, edx
 102c8e3:	75 0a 	jne	10 <_runtime.mcommoninit+0xff>
 102c8e5:	c7 81 24 01 00 00 01 00 00 00 	mov	dword ptr [rcx + 292], 1
 102c8ef:	90 	nop
 102c8f0:	c7 04 24 00 80 00 00 	mov	dword ptr [rsp], 32768
 102c8f7:	e8 14 66 00 00 	call	26132 <_runtime.malg>
 102c8fc:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102c901:	83 3d f8 af 0c 00 00 	cmp	dword ptr [rip + 831480], 0
 102c908:	0f 85 e3 00 00 00 	jne	227 <_runtime.mcommoninit+0x201>
 102c90e:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c913:	48 89 41 50 	mov	qword ptr [rcx + 80], rax
 102c917:	84 00 	test	byte ptr [rax], al
 102c919:	83 3d e0 af 0c 00 00 	cmp	dword ptr [rip + 831456], 0
 102c920:	0f 85 ba 00 00 00 	jne	186 <_runtime.mcommoninit+0x1f0>
 102c926:	48 89 48 30 	mov	qword ptr [rax + 48], rcx
 102c92a:	48 8b 51 50 	mov	rdx, qword ptr [rcx + 80]
 102c92e:	48 85 d2 	test	rdx, rdx
 102c931:	74 0e 	je	14 <_runtime.mcommoninit+0x151>
 102c933:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 102c936:	48 81 c3 80 03 00 00 	add	rbx, 896
 102c93d:	48 89 5a 18 	mov	qword ptr [rdx + 24], rbx
 102c941:	48 8b 05 b8 18 0a 00 	mov	rax, qword ptr [rip + 661688]
 102c948:	83 3d b1 af 0c 00 00 	cmp	dword ptr [rip + 831409], 0
 102c94f:	75 7e 	jne	126 <_runtime.mcommoninit+0x1df>
 102c951:	48 89 81 50 01 00 00 	mov	qword ptr [rcx + 336], rax
 102c958:	48 8d 05 a1 18 0a 00 	lea	rax, [rip + 661665]
 102c95f:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c963:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102c968:	e8 93 61 fd ff 	call	-171629 <_runtime.atomicstorep>
 102c96d:	48 8d 05 04 1d 0a 00 	lea	rax, [rip + 662788]
 102c974:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c978:	e8 93 b9 fd ff 	call	-149101 <_runtime.unlock>
 102c97d:	80 3d e6 ad 0c 00 00 	cmp	byte ptr [rip + 830950], 0
 102c984:	75 0a 	jne	10 <_runtime.mcommoninit+0x1a0>
 102c986:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 102c98b:	48 83 c4 40 	add	rsp, 64
 102c98f:	c3 	ret
 102c990:	48 8d 05 e9 69 03 00 	lea	rax, [rip + 223721]
 102c997:	48 89 04 24 	mov	qword ptr [rsp], rax
 102c99b:	e8 60 da fd ff 	call	-140704 <_runtime.newobject>
 102c9a0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102c9a5:	83 3d 54 af 0c 00 00 	cmp	dword ptr [rip + 831316], 0
 102c9ac:	75 0e 	jne	14 <_runtime.mcommoninit+0x1cc>
 102c9ae:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c9b3:	48 89 81 40 01 00 00 	mov	qword ptr [rcx + 320], rax
 102c9ba:	eb ca 	jmp	-54 <_runtime.mcommoninit+0x196>
 102c9bc:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c9c1:	48 8d b9 40 01 00 00 	lea	rdi, [rcx + 320]
 102c9c8:	e8 13 60 02 00 	call	155667 <_runtime.gcWriteBarrier>
 102c9cd:	eb b7 	jmp	-73 <_runtime.mcommoninit+0x196>
 102c9cf:	48 8d b9 50 01 00 00 	lea	rdi, [rcx + 336]
 102c9d6:	e8 05 60 02 00 	call	155653 <_runtime.gcWriteBarrier>
 102c9db:	e9 78 ff ff ff 	jmp	-136 <_runtime.mcommoninit+0x168>
 102c9e0:	48 8d 78 30 	lea	rdi, [rax + 48]
 102c9e4:	48 89 c8 	mov	rax, rcx
 102c9e7:	e8 f4 5f 02 00 	call	155636 <_runtime.gcWriteBarrier>
 102c9ec:	e9 39 ff ff ff 	jmp	-199 <_runtime.mcommoninit+0x13a>
 102c9f1:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102c9f6:	48 8d 79 50 	lea	rdi, [rcx + 80]
 102c9fa:	e8 e1 5f 02 00 	call	155617 <_runtime.gcWriteBarrier>
 102c9ff:	e9 13 ff ff ff 	jmp	-237 <_runtime.mcommoninit+0x127>
 102ca04:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102ca09:	84 00 	test	byte ptr [rax], al
 102ca0b:	48 c7 04 24 01 00 00 00 	mov	qword ptr [rsp], 1
 102ca13:	48 8d 88 70 01 00 00 	lea	rcx, [rax + 368]
 102ca1a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102ca1f:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 102ca28:	48 c7 44 24 18 20 00 00 00 	mov	qword ptr [rsp + 24], 32
 102ca31:	e8 fa d4 01 00 	call	120058 <_runtime.callers>
 102ca36:	e9 ec fd ff ff 	jmp	-532 <_runtime.mcommoninit+0x37>
 102ca3b:	48 8d 05 d3 86 04 00 	lea	rax, [rip + 296659]
 102ca42:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ca46:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 102ca4f:	e8 0c c3 ff ff 	call	-15604 <_runtime.throw>
 102ca54:	90 	nop
 102ca55:	e8 76 41 02 00 	call	147830 <_runtime.morestack_noctxt>
 102ca5a:	e9 91 fd ff ff 	jmp	-623 <_runtime.mcommoninit>
 102ca5f:	cc 	int3

_runtime.ready:
 102ca60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ca69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102ca6d:	0f 86 a3 02 00 00 	jbe	675 <_runtime.ready+0x2b6>
 102ca73:	48 83 ec 48 	sub	rsp, 72
 102ca77:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 102ca7c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 102ca81:	80 3d a8 84 0a 00 00 	cmp	byte ptr [rip + 689320], 0
 102ca88:	0f 85 07 01 00 00 	jne	263 <_runtime.ready+0x135>
 102ca8e:	90 	nop
 102ca8f:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102ca94:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 102ca9a:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 102caa3:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 102caa7:	90 	nop
 102caa8:	ff 83 08 01 00 00 	inc	dword ptr [rbx + 264]
 102caae:	0f ba f1 0c 	btr	ecx, 12
 102cab2:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 102cab6:	83 f9 04 	cmp	ecx, 4
 102cab9:	0f 85 f3 00 00 00 	jne	243 <_runtime.ready+0x152>
 102cabf:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 102cac4:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 102cac9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cacd:	48 b9 04 00 00 00 01 00 00 00 	movabs	rcx, 4294967300
 102cad7:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102cadc:	e8 2f 08 00 00 	call	2095 <_runtime.casgstatus>
 102cae1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102cae6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102caea:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 102caf1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102caf5:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102cafa:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102caff:	0f b6 44 24 60 	movzx	eax, byte ptr [rsp + 96]
 102cb04:	88 44 24 10 	mov	byte ptr [rsp + 16], al
 102cb08:	e8 03 a6 00 00 	call	42499 <_runtime.runqput>
 102cb0d:	8b 05 a5 1b 0a 00 	mov	eax, dword ptr [rip + 662437]
 102cb13:	85 c0 	test	eax, eax
 102cb15:	74 7a 	je	122 <_runtime.ready+0x131>
 102cb17:	8b 0d 9f 1b 0a 00 	mov	ecx, dword ptr [rip + 662431]
 102cb1d:	85 c9 	test	ecx, ecx
 102cb1f:	0f 94 c1 	sete	cl
 102cb22:	84 c9 	test	cl, cl
 102cb24:	74 19 	je	25 <_runtime.ready+0xdf>
 102cb26:	31 c0 	xor	eax, eax
 102cb28:	48 8d 0d 8d 1b 0a 00 	lea	rcx, [rip + 662413]
 102cb2f:	ba 01 00 00 00 	mov	edx, 1
 102cb34:	f0 	lock
 102cb35:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 102cb38:	0f 94 c1 	sete	cl
 102cb3b:	84 c9 	test	cl, cl
 102cb3d:	75 3e 	jne	62 <_runtime.ready+0x11d>
 102cb3f:	90 	nop
 102cb40:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102cb49:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 102cb4e:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 102cb54:	8d 5a ff 	lea	ebx, [rdx - 1]
 102cb57:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 102cb5d:	83 fa 01 	cmp	edx, 1
 102cb60:	75 11 	jne	17 <_runtime.ready+0x113>
 102cb62:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 102cb69:	74 08 	je	8 <_runtime.ready+0x113>
 102cb6b:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102cb73:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 102cb78:	48 83 c4 48 	add	rsp, 72
 102cb7c:	c3 	ret
 102cb7d:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102cb85:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 102cb8a:	e8 01 25 00 00 	call	9473 <_runtime.startm>
 102cb8f:	eb ae 	jmp	-82 <_runtime.ready+0xdf>
 102cb91:	31 c9 	xor	ecx, ecx
 102cb93:	eb 8d 	jmp	-115 <_runtime.ready+0xc2>
 102cb95:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102cb9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cb9e:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 102cba3:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102cba8:	e8 63 a2 01 00 	call	107107 <_runtime.traceGoUnpark>
 102cbad:	e9 dc fe ff ff 	jmp	-292 <_runtime.ready+0x2e>
 102cbb2:	90 	nop
 102cbb3:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102cbbc:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 102cbc1:	8b 90 90 00 00 00 	mov	edx, dword ptr [rax + 144]
 102cbc7:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 102cbcb:	48 8b 98 98 00 00 00 	mov	rbx, qword ptr [rax + 152]
 102cbd2:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 102cbd7:	e8 c4 d8 ff ff 	call	-10044 <_runtime.printlock>
 102cbdc:	48 8d 05 1f 70 04 00 	lea	rax, [rip + 290847]
 102cbe3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cbe7:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102cbf0:	e8 eb e1 ff ff 	call	-7701 <_runtime.printstring>
 102cbf5:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102cbfa:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cbfe:	e8 9d e1 ff ff 	call	-7779 <_runtime.printpointer>
 102cc03:	48 8d 05 b8 62 04 00 	lea	rax, [rip + 287416]
 102cc0a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cc0e:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102cc17:	e8 c4 e1 ff ff 	call	-7740 <_runtime.printstring>
 102cc1c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102cc21:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cc25:	e8 f6 df ff ff 	call	-8202 <_runtime.printint>
 102cc2a:	48 8d 05 fc 72 04 00 	lea	rax, [rip + 291580]
 102cc31:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cc35:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102cc3e:	e8 9d e1 ff ff 	call	-7779 <_runtime.printstring>
 102cc43:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 102cc47:	89 c0 	mov	eax, eax
 102cc49:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cc4d:	e8 ce de ff ff 	call	-8498 <_runtime.printuint>
 102cc52:	e8 d9 da ff ff 	call	-9511 <_runtime.printnl>
 102cc57:	e8 c4 d8 ff ff 	call	-10044 <_runtime.printunlock>
 102cc5c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102cc61:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 102cc67:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 102cc6b:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 102cc72:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 102cc77:	e8 24 d8 ff ff 	call	-10204 <_runtime.printlock>
 102cc7c:	48 8d 05 4f 6f 04 00 	lea	rax, [rip + 290639]
 102cc83:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cc87:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102cc90:	e8 4b e1 ff ff 	call	-7861 <_runtime.printstring>
 102cc95:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102cc9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cc9e:	e8 fd e0 ff ff 	call	-7939 <_runtime.printpointer>
 102cca3:	48 8d 05 18 62 04 00 	lea	rax, [rip + 287256]
 102ccaa:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ccae:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102ccb7:	e8 24 e1 ff ff 	call	-7900 <_runtime.printstring>
 102ccbc:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102ccc1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ccc5:	e8 56 df ff ff 	call	-8362 <_runtime.printint>
 102ccca:	48 8d 05 49 72 04 00 	lea	rax, [rip + 291401]
 102ccd1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ccd5:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102ccde:	e8 fd e0 ff ff 	call	-7939 <_runtime.printstring>
 102cce3:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 102cce7:	89 c0 	mov	eax, eax
 102cce9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cced:	e8 2e de ff ff 	call	-8658 <_runtime.printuint>
 102ccf2:	e8 39 da ff ff 	call	-9671 <_runtime.printnl>
 102ccf7:	e8 24 d8 ff ff 	call	-10204 <_runtime.printunlock>
 102ccfc:	48 8d 05 2d 78 04 00 	lea	rax, [rip + 292909]
 102cd03:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cd07:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 102cd10:	e8 4b c0 ff ff 	call	-16309 <_runtime.throw>
 102cd15:	90 	nop
 102cd16:	e8 b5 3e 02 00 	call	147125 <_runtime.morestack_noctxt>
 102cd1b:	e9 40 fd ff ff 	jmp	-704 <_runtime.ready>

_runtime.freezetheworld:
 102cd20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102cd29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102cd2d:	0f 86 89 00 00 00 	jbe	137 <_runtime.freezetheworld+0x9c>
 102cd33:	48 83 ec 18 	sub	rsp, 24
 102cd37:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102cd3c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102cd41:	b8 01 00 00 00 	mov	eax, 1
 102cd46:	48 8d 0d 3f aa 0c 00 	lea	rcx, [rip + 830015]
 102cd4d:	87 01 	xchg	dword ptr [rcx], eax
 102cd4f:	31 c0 	xor	eax, eax
 102cd51:	eb 14 	jmp	20 <_runtime.freezetheworld+0x47>
 102cd53:	c7 04 24 e8 03 00 00 	mov	dword ptr [rsp], 1000
 102cd5a:	e8 81 64 01 00 	call	91265 <_runtime.usleep>
 102cd5f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102cd64:	48 ff c0 	inc	rax
 102cd67:	48 83 f8 05 	cmp	rax, 5
 102cd6b:	7d 28 	jge	40 <_runtime.freezetheworld+0x75>
 102cd6d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102cd72:	c7 05 e8 19 0a 00 ff ff ff 7f 	mov	dword ptr [rip + 661992], 2147483647
 102cd7c:	b8 01 00 00 00 	mov	eax, 1
 102cd81:	48 8d 0d d8 19 0a 00 	lea	rcx, [rip + 661976]
 102cd88:	87 01 	xchg	dword ptr [rcx], eax
 102cd8a:	e8 21 93 00 00 	call	37665 <_runtime.preemptall>
 102cd8f:	80 3c 24 00 	cmp	byte ptr [rsp], 0
 102cd93:	75 be 	jne	-66 <_runtime.freezetheworld+0x33>
 102cd95:	c7 04 24 e8 03 00 00 	mov	dword ptr [rsp], 1000
 102cd9c:	e8 3f 64 01 00 	call	91199 <_runtime.usleep>
 102cda1:	e8 0a 93 00 00 	call	37642 <_runtime.preemptall>
 102cda6:	c7 04 24 e8 03 00 00 	mov	dword ptr [rsp], 1000
 102cdad:	e8 2e 64 01 00 	call	91182 <_runtime.usleep>
 102cdb2:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102cdb7:	48 83 c4 18 	add	rsp, 24
 102cdbb:	c3 	ret
 102cdbc:	e8 0f 3e 02 00 	call	146959 <_runtime.morestack_noctxt>
 102cdc1:	e9 5a ff ff ff 	jmp	-166 <_runtime.freezetheworld>
 102cdc6:	cc 	int3
 102cdc7:	cc 	int3
 102cdc8:	cc 	int3
 102cdc9:	cc 	int3
 102cdca:	cc 	int3
 102cdcb:	cc 	int3
 102cdcc:	cc 	int3
 102cdcd:	cc 	int3
 102cdce:	cc 	int3
 102cdcf:	cc 	int3

_runtime.casfrom_Gscanstatus:
 102cdd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102cdd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102cddd:	0f 86 37 04 00 00 	jbe	1079 <_runtime.casfrom_Gscanstatus+0x44a>
 102cde3:	48 83 ec 40 	sub	rsp, 64
 102cde7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102cdec:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 102cdf1:	8b 44 24 50 	mov	eax, dword ptr [rsp + 80]
 102cdf5:	8d 88 ff ef ff ff 	lea	ecx, [rax - 4097]
 102cdfb:	83 f9 03 	cmp	ecx, 3
 102cdfe:	77 39 	ja	57 <_runtime.casfrom_Gscanstatus+0x69>
 102ce00:	89 c1 	mov	ecx, eax
 102ce02:	0f ba f0 0c 	btr	eax, 12
 102ce06:	8b 54 24 54 	mov	edx, dword ptr [rsp + 84]
 102ce0a:	39 d0 	cmp	eax, edx
 102ce0c:	75 22 	jne	34 <_runtime.casfrom_Gscanstatus+0x60>
 102ce0e:	89 c8 	mov	eax, ecx
 102ce10:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 102ce15:	f0 	lock
 102ce16:	0f b1 93 90 00 00 00 	cmpxchg	dword ptr [rbx + 144], edx
 102ce1d:	40 0f 94 c6 	sete	sil
 102ce21:	40 84 f6 	test	sil, sil
 102ce24:	74 1f 	je	31 <_runtime.casfrom_Gscanstatus+0x75>
 102ce26:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 102ce2b:	48 83 c4 40 	add	rsp, 64
 102ce2f:	c3 	ret
 102ce30:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 102ce35:	31 f6 	xor	esi, esi
 102ce37:	eb e8 	jmp	-24 <_runtime.casfrom_Gscanstatus+0x51>
 102ce39:	3d 09 10 00 00 	cmp	eax, 4105
 102ce3e:	74 c0 	je	-64 <_runtime.casfrom_Gscanstatus+0x30>
 102ce40:	e9 ea 01 00 00 	jmp	490 <_runtime.casfrom_Gscanstatus+0x25f>
 102ce45:	e8 56 d6 ff ff 	call	-10666 <_runtime.printlock>
 102ce4a:	48 8d 05 85 98 04 00 	lea	rax, [rip + 301189]
 102ce51:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ce55:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 102ce5e:	e8 7d df ff ff 	call	-8323 <_runtime.printstring>
 102ce63:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102ce68:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ce6c:	e8 2f df ff ff 	call	-8401 <_runtime.printpointer>
 102ce71:	48 8d 05 a2 62 04 00 	lea	rax, [rip + 287394]
 102ce78:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ce7c:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 102ce85:	e8 56 df ff ff 	call	-8362 <_runtime.printstring>
 102ce8a:	8b 44 24 50 	mov	eax, dword ptr [rsp + 80]
 102ce8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ce92:	e8 f9 dd ff ff 	call	-8711 <_runtime.printhex>
 102ce97:	48 8d 05 73 62 04 00 	lea	rax, [rip + 287347]
 102ce9e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cea2:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 102ceab:	e8 30 df ff ff 	call	-8400 <_runtime.printstring>
 102ceb0:	8b 44 24 54 	mov	eax, dword ptr [rsp + 84]
 102ceb4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ceb8:	e8 d3 dd ff ff 	call	-8749 <_runtime.printhex>
 102cebd:	e8 6e d8 ff ff 	call	-10130 <_runtime.printnl>
 102cec2:	e8 59 d6 ff ff 	call	-10663 <_runtime.printunlock>
 102cec7:	90 	nop
 102cec8:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102ced1:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102ced6:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102cedb:	8b 91 90 00 00 00 	mov	edx, dword ptr [rcx + 144]
 102cee1:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 102cee5:	48 8b 99 98 00 00 00 	mov	rbx, qword ptr [rcx + 152]
 102ceec:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 102cef1:	e8 aa d5 ff ff 	call	-10838 <_runtime.printlock>
 102cef6:	48 8d 05 05 6d 04 00 	lea	rax, [rip + 290053]
 102cefd:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cf01:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102cf0a:	e8 d1 de ff ff 	call	-8495 <_runtime.printstring>
 102cf0f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102cf14:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cf18:	e8 83 de ff ff 	call	-8573 <_runtime.printpointer>
 102cf1d:	48 8d 05 9e 5f 04 00 	lea	rax, [rip + 286622]
 102cf24:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cf28:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102cf31:	e8 aa de ff ff 	call	-8534 <_runtime.printstring>
 102cf36:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102cf3b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cf3f:	e8 dc dc ff ff 	call	-8996 <_runtime.printint>
 102cf44:	48 8d 05 e2 6f 04 00 	lea	rax, [rip + 290786]
 102cf4b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cf4f:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102cf58:	e8 83 de ff ff 	call	-8573 <_runtime.printstring>
 102cf5d:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 102cf61:	89 c0 	mov	eax, eax
 102cf63:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cf67:	e8 b4 db ff ff 	call	-9292 <_runtime.printuint>
 102cf6c:	e8 bf d7 ff ff 	call	-10305 <_runtime.printnl>
 102cf71:	e8 aa d5 ff ff 	call	-10838 <_runtime.printunlock>
 102cf76:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102cf7b:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 102cf81:	89 4c 24 14 	mov	dword ptr [rsp + 20], ecx
 102cf85:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 102cf8c:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 102cf91:	e8 0a d5 ff ff 	call	-10998 <_runtime.printlock>
 102cf96:	48 8d 05 35 6c 04 00 	lea	rax, [rip + 289845]
 102cf9d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cfa1:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102cfaa:	e8 31 de ff ff 	call	-8655 <_runtime.printstring>
 102cfaf:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102cfb4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cfb8:	e8 e3 dd ff ff 	call	-8733 <_runtime.printpointer>
 102cfbd:	48 8d 05 fe 5e 04 00 	lea	rax, [rip + 286462]
 102cfc4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cfc8:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102cfd1:	e8 0a de ff ff 	call	-8694 <_runtime.printstring>
 102cfd6:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102cfdb:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cfdf:	e8 3c dc ff ff 	call	-9156 <_runtime.printint>
 102cfe4:	48 8d 05 2f 6f 04 00 	lea	rax, [rip + 290607]
 102cfeb:	48 89 04 24 	mov	qword ptr [rsp], rax
 102cfef:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102cff8:	e8 e3 dd ff ff 	call	-8733 <_runtime.printstring>
 102cffd:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 102d001:	89 c0 	mov	eax, eax
 102d003:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d007:	e8 14 db ff ff 	call	-9452 <_runtime.printuint>
 102d00c:	e8 1f d7 ff ff 	call	-10465 <_runtime.printnl>
 102d011:	e8 0a d5 ff ff 	call	-10998 <_runtime.printunlock>
 102d016:	48 8d 05 23 a2 04 00 	lea	rax, [rip + 303651]
 102d01d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d021:	48 c7 44 24 08 34 00 00 00 	mov	qword ptr [rsp + 8], 52
 102d02a:	e8 31 bd ff ff 	call	-17103 <_runtime.throw>
 102d02f:	e8 6c d4 ff ff 	call	-11156 <_runtime.printlock>
 102d034:	48 8d 05 17 9b 04 00 	lea	rax, [rip + 301847]
 102d03b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d03f:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 102d048:	e8 93 dd ff ff 	call	-8813 <_runtime.printstring>
 102d04d:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102d052:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d056:	e8 45 dd ff ff 	call	-8891 <_runtime.printpointer>
 102d05b:	48 8d 05 b8 60 04 00 	lea	rax, [rip + 286904]
 102d062:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d066:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 102d06f:	e8 6c dd ff ff 	call	-8852 <_runtime.printstring>
 102d074:	8b 44 24 50 	mov	eax, dword ptr [rsp + 80]
 102d078:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d07c:	e8 0f dc ff ff 	call	-9201 <_runtime.printhex>
 102d081:	48 8d 05 89 60 04 00 	lea	rax, [rip + 286857]
 102d088:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d08c:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 102d095:	e8 46 dd ff ff 	call	-8890 <_runtime.printstring>
 102d09a:	8b 44 24 54 	mov	eax, dword ptr [rsp + 84]
 102d09e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d0a2:	e8 e9 db ff ff 	call	-9239 <_runtime.printhex>
 102d0a7:	e8 84 d6 ff ff 	call	-10620 <_runtime.printnl>
 102d0ac:	e8 6f d4 ff ff 	call	-11153 <_runtime.printunlock>
 102d0b1:	90 	nop
 102d0b2:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102d0bb:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102d0c0:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102d0c5:	8b 91 90 00 00 00 	mov	edx, dword ptr [rcx + 144]
 102d0cb:	89 54 24 18 	mov	dword ptr [rsp + 24], edx
 102d0cf:	48 8b 99 98 00 00 00 	mov	rbx, qword ptr [rcx + 152]
 102d0d6:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 102d0db:	e8 c0 d3 ff ff 	call	-11328 <_runtime.printlock>
 102d0e0:	48 8d 05 1b 6b 04 00 	lea	rax, [rip + 289563]
 102d0e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d0eb:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102d0f4:	e8 e7 dc ff ff 	call	-8985 <_runtime.printstring>
 102d0f9:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102d0fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d102:	e8 99 dc ff ff 	call	-9063 <_runtime.printpointer>
 102d107:	48 8d 05 b4 5d 04 00 	lea	rax, [rip + 286132]
 102d10e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d112:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102d11b:	e8 c0 dc ff ff 	call	-9024 <_runtime.printstring>
 102d120:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102d125:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d129:	e8 f2 da ff ff 	call	-9486 <_runtime.printint>
 102d12e:	48 8d 05 f8 6d 04 00 	lea	rax, [rip + 290296]
 102d135:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d139:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102d142:	e8 99 dc ff ff 	call	-9063 <_runtime.printstring>
 102d147:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 102d14b:	89 c0 	mov	eax, eax
 102d14d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d151:	e8 ca d9 ff ff 	call	-9782 <_runtime.printuint>
 102d156:	e8 d5 d5 ff ff 	call	-10795 <_runtime.printnl>
 102d15b:	e8 c0 d3 ff ff 	call	-11328 <_runtime.printunlock>
 102d160:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102d165:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 102d16b:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 102d16f:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 102d176:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 102d17b:	e8 20 d3 ff ff 	call	-11488 <_runtime.printlock>
 102d180:	48 8d 05 4b 6a 04 00 	lea	rax, [rip + 289355]
 102d187:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d18b:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102d194:	e8 47 dc ff ff 	call	-9145 <_runtime.printstring>
 102d199:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102d19e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d1a2:	e8 f9 db ff ff 	call	-9223 <_runtime.printpointer>
 102d1a7:	48 8d 05 14 5d 04 00 	lea	rax, [rip + 285972]
 102d1ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d1b2:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102d1bb:	e8 20 dc ff ff 	call	-9184 <_runtime.printstring>
 102d1c0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102d1c5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d1c9:	e8 52 da ff ff 	call	-9646 <_runtime.printint>
 102d1ce:	48 8d 05 45 6d 04 00 	lea	rax, [rip + 290117]
 102d1d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d1d9:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102d1e2:	e8 f9 db ff ff 	call	-9223 <_runtime.printstring>
 102d1e7:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 102d1eb:	89 c0 	mov	eax, eax
 102d1ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d1f1:	e8 2a d9 ff ff 	call	-9942 <_runtime.printuint>
 102d1f6:	e8 35 d5 ff ff 	call	-10955 <_runtime.printnl>
 102d1fb:	e8 20 d3 ff ff 	call	-11488 <_runtime.printunlock>
 102d200:	48 8d 05 78 a1 04 00 	lea	rax, [rip + 303480]
 102d207:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d20b:	48 c7 44 24 08 37 00 00 00 	mov	qword ptr [rsp + 8], 55
 102d214:	e8 47 bb ff ff 	call	-17593 <_runtime.throw>
 102d219:	90 	nop
 102d21a:	e8 b1 39 02 00 	call	145841 <_runtime.morestack_noctxt>
 102d21f:	e9 ac fb ff ff 	jmp	-1108 <_runtime.casfrom_Gscanstatus>
 102d224:	cc 	int3
 102d225:	cc 	int3
 102d226:	cc 	int3
 102d227:	cc 	int3
 102d228:	cc 	int3
 102d229:	cc 	int3
 102d22a:	cc 	int3
 102d22b:	cc 	int3
 102d22c:	cc 	int3
 102d22d:	cc 	int3
 102d22e:	cc 	int3
 102d22f:	cc 	int3

_runtime.castogscanstatus:
 102d230:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102d239:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102d23d:	0f 86 bd 00 00 00 	jbe	189 <_runtime.castogscanstatus+0xd0>
 102d243:	48 83 ec 18 	sub	rsp, 24
 102d247:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102d24c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102d251:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 102d255:	8d 48 ff 	lea	ecx, [rax - 1]
 102d258:	83 f9 03 	cmp	ecx, 3
 102d25b:	77 2e 	ja	46 <_runtime.castogscanstatus+0x5b>
 102d25d:	89 c1 	mov	ecx, eax
 102d25f:	0f ba e8 0c 	bts	eax, 12
 102d263:	8b 54 24 2c 	mov	edx, dword ptr [rsp + 44]
 102d267:	39 c2 	cmp	edx, eax
 102d269:	75 20 	jne	32 <_runtime.castogscanstatus+0x5b>
 102d26b:	89 c8 	mov	eax, ecx
 102d26d:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 102d272:	f0 	lock
 102d273:	0f b1 93 90 00 00 00 	cmpxchg	dword ptr [rbx + 144], edx
 102d27a:	0f 94 c1 	sete	cl
 102d27d:	88 4c 24 30 	mov	byte ptr [rsp + 48], cl
 102d281:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102d286:	48 83 c4 18 	add	rsp, 24
 102d28a:	c3 	ret
 102d28b:	e8 10 d2 ff ff 	call	-11760 <_runtime.printlock>
 102d290:	48 8d 05 32 8c 04 00 	lea	rax, [rip + 298034]
 102d297:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d29b:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 102d2a4:	e8 37 db ff ff 	call	-9417 <_runtime.printstring>
 102d2a9:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 102d2ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d2b1:	e8 da d9 ff ff 	call	-9766 <_runtime.printhex>
 102d2b6:	48 8d 05 2a 5d 04 00 	lea	rax, [rip + 285994]
 102d2bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d2c1:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 102d2ca:	e8 11 db ff ff 	call	-9455 <_runtime.printstring>
 102d2cf:	8b 44 24 2c 	mov	eax, dword ptr [rsp + 44]
 102d2d3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d2d7:	e8 b4 d9 ff ff 	call	-9804 <_runtime.printhex>
 102d2dc:	e8 4f d4 ff ff 	call	-11185 <_runtime.printnl>
 102d2e1:	e8 3a d2 ff ff 	call	-11718 <_runtime.printunlock>
 102d2e6:	48 8d 05 25 68 04 00 	lea	rax, [rip + 288805]
 102d2ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d2f1:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102d2fa:	e8 61 ba ff ff 	call	-17823 <_runtime.throw>
 102d2ff:	90 	nop
 102d300:	e8 cb 38 02 00 	call	145611 <_runtime.morestack_noctxt>
 102d305:	e9 26 ff ff ff 	jmp	-218 <_runtime.castogscanstatus>
 102d30a:	cc 	int3
 102d30b:	cc 	int3
 102d30c:	cc 	int3
 102d30d:	cc 	int3
 102d30e:	cc 	int3
 102d30f:	cc 	int3

_runtime.casgstatus:
 102d310:	48 83 ec 40 	sub	rsp, 64
 102d314:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 102d319:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 102d31e:	8b 44 24 50 	mov	eax, dword ptr [rsp + 80]
 102d322:	0f ba e0 0c 	bt	eax, 12
 102d326:	0f 83 35 01 00 00 	jae	309 <_runtime.casgstatus+0x151>
 102d32c:	0f 57 c0 	xorps	xmm0, xmm0
 102d32f:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 102d334:	48 8d 0d 45 29 02 00 	lea	rcx, [rip + 141637]
 102d33b:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 102d340:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 102d344:	8b 4c 24 54 	mov	ecx, dword ptr [rsp + 84]
 102d348:	89 4c 24 34 	mov	dword ptr [rsp + 52], ecx
 102d34c:	48 8d 54 24 28 	lea	rdx, [rsp + 40]
 102d351:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102d355:	e8 26 37 02 00 	call	145190 <_runtime.systemstack>
 102d35a:	8b 4c 24 50 	mov	ecx, dword ptr [rsp + 80]
 102d35e:	8b 54 24 54 	mov	edx, dword ptr [rsp + 84]
 102d362:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 102d367:	31 c0 	xor	eax, eax
 102d369:	31 f6 	xor	esi, esi
 102d36b:	eb 5a 	jmp	90 <_runtime.casgstatus+0xb7>
 102d36d:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 102d372:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102d379:	e8 52 4e 02 00 	call	151122 <_runtime.procyield>
 102d37e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102d383:	48 8d 58 01 	lea	rbx, [rax + 1]
 102d387:	8b 44 24 50 	mov	eax, dword ptr [rsp + 80]
 102d38b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102d390:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102d395:	8b 4c 24 50 	mov	ecx, dword ptr [rsp + 80]
 102d399:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 102d39e:	48 83 fb 0a 	cmp	rbx, 10
 102d3a2:	7d 08 	jge	8 <_runtime.casgstatus+0x9c>
 102d3a4:	39 8a 90 00 00 00 	cmp	dword ptr [rdx + 144], ecx
 102d3aa:	75 c1 	jne	-63 <_runtime.casgstatus+0x5d>
 102d3ac:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 102d3b1:	48 ff c7 	inc	rdi
 102d3b4:	44 8b 44 24 54 	mov	r8d, dword ptr [rsp + 84]
 102d3b9:	44 89 c2 	mov	edx, r8d
 102d3bc:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 102d3c1:	48 89 c6 	mov	rsi, rax
 102d3c4:	48 89 f8 	mov	rax, rdi
 102d3c7:	48 89 c7 	mov	rdi, rax
 102d3ca:	89 c8 	mov	eax, ecx
 102d3cc:	f0 	lock
 102d3cd:	0f b1 93 90 00 00 00 	cmpxchg	dword ptr [rbx + 144], edx
 102d3d4:	41 0f 94 c0 	sete	r8b
 102d3d8:	45 84 c0 	test	r8b, r8b
 102d3db:	75 7a 	jne	122 <_runtime.casgstatus+0x147>
 102d3dd:	83 f9 04 	cmp	ecx, 4
 102d3e0:	75 0d 	jne	13 <_runtime.casgstatus+0xdf>
 102d3e2:	83 bb 90 00 00 00 01 	cmp	dword ptr [rbx + 144], 1
 102d3e9:	0f 84 8d 00 00 00 	je	141 <_runtime.casgstatus+0x16c>
 102d3ef:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 102d3f4:	48 85 ff 	test	rdi, rdi
 102d3f7:	74 4c 	je	76 <_runtime.casgstatus+0x135>
 102d3f9:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 102d3fe:	e8 bd 5e 01 00 	call	89789 <_runtime.nanotime1>
 102d403:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102d408:	48 39 04 24 	cmp	qword ptr [rsp], rax
 102d40c:	7d 0d 	jge	13 <_runtime.casgstatus+0x10b>
 102d40e:	8b 4c 24 50 	mov	ecx, dword ptr [rsp + 80]
 102d412:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 102d417:	31 db 	xor	ebx, ebx
 102d419:	eb 83 	jmp	-125 <_runtime.casgstatus+0x8e>
 102d41b:	90 	nop
 102d41c:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102d423:	e8 b8 5d 01 00 	call	89528 <_runtime.usleep>
 102d428:	e8 93 5e 01 00 	call	89747 <_runtime.nanotime1>
 102d42d:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102d431:	48 05 c4 09 00 00 	add	rax, 2500
 102d437:	8b 4c 24 50 	mov	ecx, dword ptr [rsp + 80]
 102d43b:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 102d440:	e9 67 ff ff ff 	jmp	-153 <_runtime.casgstatus+0x9c>
 102d445:	e8 76 5e 01 00 	call	89718 <_runtime.nanotime1>
 102d44a:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102d44e:	48 8d b0 88 13 00 00 	lea	rsi, [rax + 5000]
 102d455:	eb a2 	jmp	-94 <_runtime.casgstatus+0xe9>
 102d457:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 102d45c:	48 83 c4 40 	add	rsp, 64
 102d460:	c3 	ret
 102d461:	8b 4c 24 54 	mov	ecx, dword ptr [rsp + 84]
 102d465:	0f ba e1 0c 	bt	ecx, 12
 102d469:	0f 82 bd fe ff ff 	jb	-323 <_runtime.casgstatus+0x1c>
 102d46f:	39 c1 	cmp	ecx, eax
 102d471:	0f 84 b5 fe ff ff 	je	-331 <_runtime.casgstatus+0x1c>
 102d477:	e9 de fe ff ff 	jmp	-290 <_runtime.casgstatus+0x4a>
 102d47c:	48 8d 05 69 9b 04 00 	lea	rax, [rip + 301929]
 102d483:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d487:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 102d490:	e8 cb b8 ff ff 	call	-18229 <_runtime.throw>
 102d495:	90 	nop
 102d496:	cc 	int3
 102d497:	cc 	int3
 102d498:	cc 	int3
 102d499:	cc 	int3
 102d49a:	cc 	int3
 102d49b:	cc 	int3
 102d49c:	cc 	int3
 102d49d:	cc 	int3
 102d49e:	cc 	int3
 102d49f:	cc 	int3

_runtime.casGToPreemptScan:
 102d4a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102d4a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102d4ad:	76 65 	jbe	101 <_runtime.casGToPreemptScan+0x74>
 102d4af:	48 83 ec 18 	sub	rsp, 24
 102d4b3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102d4b8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102d4bd:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 102d4c1:	83 f9 02 	cmp	ecx, 2
 102d4c4:	75 34 	jne	52 <_runtime.casGToPreemptScan+0x5a>
 102d4c6:	8b 4c 24 2c 	mov	ecx, dword ptr [rsp + 44]
 102d4ca:	81 f9 09 10 00 00 	cmp	ecx, 4105
 102d4d0:	75 28 	jne	40 <_runtime.casGToPreemptScan+0x5a>
 102d4d2:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102d4d7:	b8 02 00 00 00 	mov	eax, 2
 102d4dc:	ba 09 10 00 00 	mov	edx, 4105
 102d4e1:	f0 	lock
 102d4e2:	0f b1 91 90 00 00 00 	cmpxchg	dword ptr [rcx + 144], edx
 102d4e9:	0f 94 c3 	sete	bl
 102d4ec:	84 db 	test	bl, bl
 102d4ee:	74 e7 	je	-25 <_runtime.casGToPreemptScan+0x37>
 102d4f0:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102d4f5:	48 83 c4 18 	add	rsp, 24
 102d4f9:	c3 	ret
 102d4fa:	48 8d 05 d1 65 04 00 	lea	rax, [rip + 288209]
 102d501:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d505:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102d50e:	e8 4d b8 ff ff 	call	-18355 <_runtime.throw>
 102d513:	90 	nop
 102d514:	e8 b7 36 02 00 	call	145079 <_runtime.morestack_noctxt>
 102d519:	eb 85 	jmp	-123 <_runtime.casGToPreemptScan>
 102d51b:	cc 	int3
 102d51c:	cc 	int3
 102d51d:	cc 	int3
 102d51e:	cc 	int3
 102d51f:	cc 	int3

_runtime.casGFromPreempted:
 102d520:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102d529:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102d52d:	76 62 	jbe	98 <_runtime.casGFromPreempted+0x71>
 102d52f:	48 83 ec 18 	sub	rsp, 24
 102d533:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102d538:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102d53d:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 102d541:	83 f9 09 	cmp	ecx, 9
 102d544:	75 31 	jne	49 <_runtime.casGFromPreempted+0x57>
 102d546:	8b 4c 24 2c 	mov	ecx, dword ptr [rsp + 44]
 102d54a:	83 f9 04 	cmp	ecx, 4
 102d54d:	75 28 	jne	40 <_runtime.casGFromPreempted+0x57>
 102d54f:	b8 09 00 00 00 	mov	eax, 9
 102d554:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102d559:	ba 04 00 00 00 	mov	edx, 4
 102d55e:	f0 	lock
 102d55f:	0f b1 91 90 00 00 00 	cmpxchg	dword ptr [rcx + 144], edx
 102d566:	0f 94 c1 	sete	cl
 102d569:	88 4c 24 30 	mov	byte ptr [rsp + 48], cl
 102d56d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102d572:	48 83 c4 18 	add	rsp, 24
 102d576:	c3 	ret
 102d577:	48 8d 05 54 65 04 00 	lea	rax, [rip + 288084]
 102d57e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d582:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102d58b:	e8 d0 b7 ff ff 	call	-18480 <_runtime.throw>
 102d590:	90 	nop
 102d591:	e8 3a 36 02 00 	call	144954 <_runtime.morestack_noctxt>
 102d596:	eb 88 	jmp	-120 <_runtime.casGFromPreempted>
 102d598:	cc 	int3
 102d599:	cc 	int3
 102d59a:	cc 	int3
 102d59b:	cc 	int3
 102d59c:	cc 	int3
 102d59d:	cc 	int3
 102d59e:	cc 	int3
 102d59f:	cc 	int3

_runtime.stopTheWorldWithSema:
 102d5a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102d5a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102d5ad:	0f 86 92 02 00 00 	jbe	658 <_runtime.stopTheWorldWithSema+0x2a5>
 102d5b3:	48 83 ec 60 	sub	rsp, 96
 102d5b7:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 102d5bc:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 102d5c1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102d5ca:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102d5ce:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 102d5d5:	0f 8f 50 02 00 00 	jg	592 <_runtime.stopTheWorldWithSema+0x28b>
 102d5db:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 102d5e0:	48 8d 05 91 10 0a 00 	lea	rax, [rip + 659601]
 102d5e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d5eb:	e8 40 ab fd ff 	call	-152768 <_runtime.lock>
 102d5f0:	8b 05 aa a1 0c 00 	mov	eax, dword ptr [rip + 827818]
 102d5f6:	89 05 68 11 0a 00 	mov	dword ptr [rip + 659816], eax
 102d5fc:	b8 01 00 00 00 	mov	eax, 1
 102d601:	48 8d 0d 58 11 0a 00 	lea	rcx, [rip + 659800]
 102d608:	87 01 	xchg	dword ptr [rcx], eax
 102d60a:	e8 a1 8a 00 00 	call	35489 <_runtime.preemptall>
 102d60f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102d614:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102d618:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 102d61f:	c7 40 04 03 00 00 00 	mov	dword ptr [rax + 4], 3
 102d626:	ff 0d 38 11 0a 00 	dec	dword ptr [rip + 659768]
 102d62c:	48 8b 05 15 0d 0a 00 	mov	rax, qword ptr [rip + 658709]
 102d633:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102d638:	48 8b 0d 01 0d 0a 00 	mov	rcx, qword ptr [rip + 658689]
 102d63f:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 102d644:	31 d2 	xor	edx, edx
 102d646:	eb 06 	jmp	6 <_runtime.stopTheWorldWithSema+0xae>
 102d648:	48 ff c2 	inc	rdx
 102d64b:	48 89 f8 	mov	rax, rdi
 102d64e:	48 39 c2 	cmp	rdx, rax
 102d651:	0f 8d 91 00 00 00 	jge	145 <_runtime.stopTheWorldWithSema+0x148>
 102d657:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 102d65b:	8b 73 04 	mov	esi, dword ptr [rbx + 4]
 102d65e:	83 fe 02 	cmp	esi, 2
 102d661:	75 6b 	jne	107 <_runtime.stopTheWorldWithSema+0x12e>
 102d663:	48 89 c7 	mov	rdi, rax
 102d666:	89 f0 	mov	eax, esi
 102d668:	41 b8 03 00 00 00 	mov	r8d, 3
 102d66e:	f0 	lock
 102d66f:	44 0f b1 43 04 	cmpxchg	dword ptr [rbx + 4], r8d
 102d674:	40 0f 94 c6 	sete	sil
 102d678:	40 84 f6 	test	sil, sil
 102d67b:	74 cb 	je	-53 <_runtime.stopTheWorldWithSema+0xa8>
 102d67d:	80 3d ac 78 0a 00 00 	cmp	byte ptr [rip + 686252], 0
 102d684:	75 0b 	jne	11 <_runtime.stopTheWorldWithSema+0xf1>
 102d686:	ff 43 14 	inc	dword ptr [rbx + 20]
 102d689:	ff 0d d5 10 0a 00 	dec	dword ptr [rip + 659669]
 102d68f:	eb b7 	jmp	-73 <_runtime.stopTheWorldWithSema+0xa8>
 102d691:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 102d696:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 102d69b:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102d69f:	e8 ac 99 01 00 	call	104876 <_runtime.traceGoSysBlock>
 102d6a4:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102d6a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d6ad:	e8 5e 91 01 00 	call	102750 <_runtime.traceProcStop>
 102d6b2:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 102d6b7:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 102d6bc:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 102d6c1:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 102d6c6:	41 b8 03 00 00 00 	mov	r8d, 3
 102d6cc:	eb b8 	jmp	-72 <_runtime.stopTheWorldWithSema+0xe6>
 102d6ce:	48 89 c7 	mov	rdi, rax
 102d6d1:	41 b8 03 00 00 00 	mov	r8d, 3
 102d6d7:	31 f6 	xor	esi, esi
 102d6d9:	eb 9d 	jmp	-99 <_runtime.stopTheWorldWithSema+0xd8>
 102d6db:	c7 40 04 03 00 00 00 	mov	dword ptr [rax + 4], 3
 102d6e2:	ff 0d 7c 10 0a 00 	dec	dword ptr [rip + 659580]
 102d6e8:	90 	nop
 102d6e9:	48 8b 05 c0 0f 0a 00 	mov	rax, qword ptr [rip + 659392]
 102d6f0:	48 85 c0 	test	rax, rax
 102d6f3:	74 1e 	je	30 <_runtime.stopTheWorldWithSema+0x173>
 102d6f5:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102d6f9:	48 89 0d b0 0f 0a 00 	mov	qword ptr [rip + 659376], rcx
 102d700:	b9 ff ff ff ff 	mov	ecx, 4294967295
 102d705:	48 8d 15 ac 0f 0a 00 	lea	rdx, [rip + 659372]
 102d70c:	f0 	lock
 102d70d:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 102d710:	48 85 c0 	test	rax, rax
 102d713:	75 c6 	jne	-58 <_runtime.stopTheWorldWithSema+0x13b>
 102d715:	8b 05 49 10 0a 00 	mov	eax, dword ptr [rip + 659529]
 102d71b:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 102d71f:	83 f8 00 	cmp	eax, 0
 102d722:	48 8d 0d 4f 0f 0a 00 	lea	rcx, [rip + 659279]
 102d729:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102d72d:	e8 de ab fd ff 	call	-152610 <_runtime.unlock>
 102d732:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 102d736:	83 f8 00 	cmp	eax, 0
 102d739:	0f 8f ad 00 00 00 	jg	173 <_runtime.stopTheWorldWithSema+0x24c>
 102d73f:	83 3d 1e 10 0a 00 00 	cmp	dword ptr [rip + 659486], 0
 102d746:	0f 85 8d 00 00 00 	jne	141 <_runtime.stopTheWorldWithSema+0x239>
 102d74c:	48 8b 05 f5 0b 0a 00 	mov	rax, qword ptr [rip + 658421]
 102d753:	48 8b 0d e6 0b 0a 00 	mov	rcx, qword ptr [rip + 658406]
 102d75a:	31 d2 	xor	edx, edx
 102d75c:	31 db 	xor	ebx, ebx
 102d75e:	31 f6 	xor	esi, esi
 102d760:	eb 1f 	jmp	31 <_runtime.stopTheWorldWithSema+0x1e1>
 102d762:	48 8b 3c d1 	mov	rdi, qword ptr [rcx + 8*rdx]
 102d766:	83 7f 04 03 	cmp	dword ptr [rdi + 4], 3
 102d76a:	bf 2e 00 00 00 	mov	edi, 46
 102d76f:	48 0f 45 f7 	cmovne	rsi, rdi
 102d773:	4c 8d 05 58 97 04 00 	lea	r8, [rip + 300888]
 102d77a:	49 0f 45 d8 	cmovne	rbx, r8
 102d77e:	48 ff c2 	inc	rdx
 102d781:	48 39 c2 	cmp	rdx, rax
 102d784:	7c dc 	jl	-36 <_runtime.stopTheWorldWithSema+0x1c2>
 102d786:	8b 05 00 a0 0c 00 	mov	eax, dword ptr [rip + 827392]
 102d78c:	85 c0 	test	eax, eax
 102d78e:	75 13 	jne	19 <_runtime.stopTheWorldWithSema+0x203>
 102d790:	48 85 f6 	test	rsi, rsi
 102d793:	0f 85 84 00 00 00 	jne	132 <_runtime.stopTheWorldWithSema+0x27d>
 102d799:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 102d79e:	48 83 c4 60 	add	rsp, 96
 102d7a2:	c3 	ret
 102d7a3:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 102d7a8:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 102d7ad:	48 8d 05 64 a0 0c 00 	lea	rax, [rip + 827492]
 102d7b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d7b8:	e8 73 a9 fd ff 	call	-153229 <_runtime.lock>
 102d7bd:	48 8d 05 54 a0 0c 00 	lea	rax, [rip + 827476]
 102d7c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d7c8:	e8 63 a9 fd ff 	call	-153245 <_runtime.lock>
 102d7cd:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 102d7d2:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 102d7d7:	eb b7 	jmp	-73 <_runtime.stopTheWorldWithSema+0x1f0>
 102d7d9:	be 29 00 00 00 	mov	esi, 41
 102d7de:	48 8d 1d 9c 91 04 00 	lea	rbx, [rip + 299420]
 102d7e5:	eb 9f 	jmp	-97 <_runtime.stopTheWorldWithSema+0x1e6>
 102d7e7:	e8 c4 88 00 00 	call	35012 <_runtime.preemptall>
 102d7ec:	48 8d 05 75 0f 0a 00 	lea	rax, [rip + 659317]
 102d7f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d7f7:	48 c7 44 24 08 a0 86 01 00 	mov	qword ptr [rsp + 8], 100000
 102d800:	e8 1b b0 fd ff 	call	-151525 <_runtime.notetsleep>
 102d805:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 102d80a:	74 db 	je	-37 <_runtime.stopTheWorldWithSema+0x247>
 102d80c:	90 	nop
 102d80d:	48 c7 05 50 0f 0a 00 00 00 00 00 	mov	qword ptr [rip + 659280], 0
 102d818:	e9 22 ff ff ff 	jmp	-222 <_runtime.stopTheWorldWithSema+0x19f>
 102d81d:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102d821:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 102d826:	e8 35 b5 ff ff 	call	-19147 <_runtime.throw>
 102d82b:	48 8d 05 85 79 04 00 	lea	rax, [rip + 293253]
 102d832:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d836:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 102d83f:	e8 1c b5 ff ff 	call	-19172 <_runtime.throw>
 102d844:	90 	nop
 102d845:	e8 86 33 02 00 	call	144262 <_runtime.morestack_noctxt>
 102d84a:	e9 51 fd ff ff 	jmp	-687 <_runtime.stopTheWorldWithSema>
 102d84f:	cc 	int3

_runtime.startTheWorldWithSema:
 102d850:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102d859:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102d85d:	0f 86 60 02 00 00 	jbe	608 <_runtime.startTheWorldWithSema+0x273>
 102d863:	48 83 ec 58 	sub	rsp, 88
 102d867:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 102d86c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 102d871:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102d87a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102d87e:	90 	nop
 102d87f:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 102d885:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102d889:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 102d88e:	8b 0d 18 9f 0c 00 	mov	ecx, dword ptr [rip + 827160]
 102d894:	85 c9 	test	ecx, ecx
 102d896:	0f 85 e3 01 00 00 	jne	483 <_runtime.startTheWorldWithSema+0x22f>
 102d89c:	48 8d 05 d5 0d 0a 00 	lea	rax, [rip + 658901]
 102d8a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d8a7:	e8 84 a8 fd ff 	call	-153468 <_runtime.lock>
 102d8ac:	8b 05 ee 9e 0c 00 	mov	eax, dword ptr [rip + 827118]
 102d8b2:	8b 0d fc 9e 0c 00 	mov	ecx, dword ptr [rip + 827132]
 102d8b8:	85 c9 	test	ecx, ecx
 102d8ba:	0f 84 b8 01 00 00 	je	440 <_runtime.startTheWorldWithSema+0x228>
 102d8c0:	c7 05 ea 9e 0c 00 00 00 00 00 	mov	dword ptr [rip + 827114], 0
 102d8ca:	89 0c 24 	mov	dword ptr [rsp], ecx
 102d8cd:	e8 ae 71 00 00 	call	29102 <_runtime.procresize>
 102d8d2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102d8d7:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 102d8dc:	c7 05 7a 0e 0a 00 00 00 00 00 	mov	dword ptr [rip + 659066], 0
 102d8e6:	83 3d 83 0e 0a 00 00 	cmp	dword ptr [rip + 659075], 0
 102d8ed:	0f 85 66 01 00 00 	jne	358 <_runtime.startTheWorldWithSema+0x209>
 102d8f3:	48 8d 05 7e 0d 0a 00 	lea	rax, [rip + 658814]
 102d8fa:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d8fe:	e8 0d aa fd ff 	call	-153075 <_runtime.unlock>
 102d903:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102d908:	eb 08 	jmp	8 <_runtime.startTheWorldWithSema+0xc2>
 102d90a:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102d90f:	48 89 c8 	mov	rax, rcx
 102d912:	48 85 c0 	test	rax, rax
 102d915:	74 57 	je	87 <_runtime.startTheWorldWithSema+0x11e>
 102d917:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102d91b:	48 8b 50 38 	mov	rdx, qword ptr [rax + 56]
 102d91f:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 102d924:	48 85 d2 	test	rdx, rdx
 102d927:	74 31 	je	49 <_runtime.startTheWorldWithSema+0x10a>
 102d929:	90 	nop
 102d92a:	48 c7 40 38 00 00 00 00 	mov	qword ptr [rax + 56], 0
 102d932:	48 83 ba d8 00 00 00 00 	cmp	qword ptr [rdx + 216], 0
 102d93a:	0f 85 69 01 00 00 	jne	361 <_runtime.startTheWorldWithSema+0x259>
 102d940:	90 	nop
 102d941:	48 89 82 d8 00 00 00 	mov	qword ptr [rdx + 216], rax
 102d948:	48 8d 82 48 01 00 00 	lea	rax, [rdx + 328]
 102d94f:	48 89 04 24 	mov	qword ptr [rsp], rax
 102d953:	e8 98 aa fd ff 	call	-152936 <_runtime.notewakeup>
 102d958:	eb b0 	jmp	-80 <_runtime.startTheWorldWithSema+0xba>
 102d95a:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102d962:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102d967:	e8 44 12 00 00 	call	4676 <_runtime.newm>
 102d96c:	eb 9c 	jmp	-100 <_runtime.startTheWorldWithSema+0xba>
 102d96e:	90 	nop
 102d96f:	e8 4c 59 01 00 	call	88396 <_runtime.nanotime1>
 102d974:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102d978:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102d97d:	0f b6 4c 24 60 	movzx	ecx, byte ptr [rsp + 96]
 102d982:	84 c9 	test	cl, cl
 102d984:	0f 85 a1 00 00 00 	jne	161 <_runtime.startTheWorldWithSema+0x1db>
 102d98a:	8b 0d 28 0d 0a 00 	mov	ecx, dword ptr [rip + 658728]
 102d990:	85 c9 	test	ecx, ecx
 102d992:	0f 84 8c 00 00 00 	je	140 <_runtime.startTheWorldWithSema+0x1d4>
 102d998:	8b 0d 1e 0d 0a 00 	mov	ecx, dword ptr [rip + 658718]
 102d99e:	85 c9 	test	ecx, ecx
 102d9a0:	0f 94 c1 	sete	cl
 102d9a3:	84 c9 	test	cl, cl
 102d9a5:	74 78 	je	120 <_runtime.startTheWorldWithSema+0x1cf>
 102d9a7:	48 89 c1 	mov	rcx, rax
 102d9aa:	31 c0 	xor	eax, eax
 102d9ac:	48 8d 15 09 0d 0a 00 	lea	rdx, [rip + 658697]
 102d9b3:	bb 01 00 00 00 	mov	ebx, 1
 102d9b8:	f0 	lock
 102d9b9:	0f b1 1a 	cmpxchg	dword ptr [rdx], ebx
 102d9bc:	0f 94 c2 	sete	dl
 102d9bf:	84 d2 	test	dl, dl
 102d9c1:	75 43 	jne	67 <_runtime.startTheWorldWithSema+0x1b6>
 102d9c3:	90 	nop
 102d9c4:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102d9cd:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 102d9d2:	8b 9a 08 01 00 00 	mov	ebx, dword ptr [rdx + 264]
 102d9d8:	8d 73 ff 	lea	esi, [rbx - 1]
 102d9db:	89 b2 08 01 00 00 	mov	dword ptr [rdx + 264], esi
 102d9e1:	83 fb 01 	cmp	ebx, 1
 102d9e4:	75 11 	jne	17 <_runtime.startTheWorldWithSema+0x1a7>
 102d9e6:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 102d9ed:	74 08 	je	8 <_runtime.startTheWorldWithSema+0x1a7>
 102d9ef:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102d9f7:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 102d9fc:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 102da01:	48 83 c4 58 	add	rsp, 88
 102da05:	c3 	ret
 102da06:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102da0e:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 102da13:	e8 78 16 00 00 	call	5752 <_runtime.startm>
 102da18:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 102da1d:	eb a4 	jmp	-92 <_runtime.startTheWorldWithSema+0x173>
 102da1f:	48 89 c1 	mov	rcx, rax
 102da22:	eb 9f 	jmp	-97 <_runtime.startTheWorldWithSema+0x173>
 102da24:	31 c9 	xor	ecx, ecx
 102da26:	e9 78 ff ff ff 	jmp	-136 <_runtime.startTheWorldWithSema+0x153>
 102da2b:	90 	nop
 102da2c:	c6 04 24 0a 	mov	byte ptr [rsp], 10
 102da30:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 102da39:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102da42:	0f 57 c0 	xorps	xmm0, xmm0
 102da45:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 102da4a:	e8 a1 80 01 00 	call	98465 <_runtime.traceEvent>
 102da4f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102da54:	e9 31 ff ff ff 	jmp	-207 <_runtime.startTheWorldWithSema+0x13a>
 102da59:	c7 05 0d 0d 0a 00 00 00 00 00 	mov	dword ptr [rip + 658701], 0
 102da63:	48 8d 05 0e 0d 0a 00 	lea	rax, [rip + 658702]
 102da6a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102da6e:	e8 7d a9 fd ff 	call	-153219 <_runtime.notewakeup>
 102da73:	e9 7b fe ff ff 	jmp	-389 <_runtime.startTheWorldWithSema+0xa3>
 102da78:	89 c1 	mov	ecx, eax
 102da7a:	e9 4b fe ff ff 	jmp	-437 <_runtime.startTheWorldWithSema+0x7a>
 102da7f:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102da87:	e8 e4 81 ff ff 	call	-32284 <_runtime.netpoll>
 102da8c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102da91:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102da96:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 102da9b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102da9f:	e8 0c 32 00 00 	call	12812 <_runtime.injectglist>
 102daa4:	e9 f3 fd ff ff 	jmp	-525 <_runtime.startTheWorldWithSema+0x4c>
 102daa9:	48 8d 05 a7 8a 04 00 	lea	rax, [rip + 297639]
 102dab0:	48 89 04 24 	mov	qword ptr [rsp], rax
 102dab4:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 102dabd:	e8 9e b2 ff ff 	call	-19810 <_runtime.throw>
 102dac2:	90 	nop
 102dac3:	e8 08 31 02 00 	call	143624 <_runtime.morestack_noctxt>
 102dac8:	e9 83 fd ff ff 	jmp	-637 <_runtime.startTheWorldWithSema>
 102dacd:	cc 	int3
 102dace:	cc 	int3
 102dacf:	cc 	int3

_runtime.mstart:
 102dad0:	48 83 ec 18 	sub	rsp, 24
 102dad4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102dad9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102dade:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102dae7:	48 83 38 00 	cmp	qword ptr [rax], 0
 102daeb:	75 32 	jne	50 <_runtime.mstart+0x4f>
 102daed:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102daf1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102daf6:	48 85 c9 	test	rcx, rcx
 102daf9:	75 09 	jne	9 <_runtime.mstart+0x34>
 102dafb:	48 c7 44 24 08 00 20 00 00 	mov	qword ptr [rsp + 8], 8192
 102db04:	48 8d 4c 24 08 	lea	rcx, [rsp + 8]
 102db09:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 102db0d:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 102db12:	48 29 d1 	sub	rcx, rdx
 102db15:	48 81 c1 00 04 00 00 	add	rcx, 1024
 102db1c:	48 89 08 	mov	qword ptr [rax], rcx
 102db1f:	48 8b 08 	mov	rcx, qword ptr [rax]
 102db22:	48 81 c1 80 03 00 00 	add	rcx, 896
 102db29:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 102db2d:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 102db31:	e8 1a 00 00 00 	call	26 <_runtime.mstart1>
 102db36:	c6 04 24 01 	mov	byte ptr [rsp], 1
 102db3a:	e8 81 01 00 00 	call	385 <_runtime.mexit>
 102db3f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102db44:	48 83 c4 18 	add	rsp, 24
 102db48:	c3 	ret
 102db49:	cc 	int3
 102db4a:	cc 	int3
 102db4b:	cc 	int3
 102db4c:	cc 	int3
 102db4d:	cc 	int3
 102db4e:	cc 	int3
 102db4f:	cc 	int3

_runtime.mstart1:
 102db50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102db59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102db5d:	0f 86 eb 00 00 00 	jbe	235 <_runtime.mstart1+0xfe>
 102db63:	48 83 ec 20 	sub	rsp, 32
 102db67:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102db6c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102db71:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102db7a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102db7e:	48 39 01 	cmp	qword ptr [rcx], rax
 102db81:	0f 85 ad 00 00 00 	jne	173 <_runtime.mstart1+0xe4>
 102db87:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102db8c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102db91:	48 89 04 24 	mov	qword ptr [rsp], rax
 102db95:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 102db9a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102db9f:	e8 2c 46 00 00 	call	17964 <_runtime.save>
 102dba4:	e8 e7 2d 02 00 	call	142823 <_runtime.asminit>
 102dba9:	e8 02 8c ff ff 	call	-29694 <_runtime.minit>
 102dbae:	48 8d 05 6b 11 0a 00 	lea	rax, [rip + 659819]
 102dbb5:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102dbba:	48 39 41 30 	cmp	qword ptr [rcx + 48], rax
 102dbbe:	74 61 	je	97 <_runtime.mstart1+0xd1>
 102dbc0:	48 8b 59 30 	mov	rbx, qword ptr [rcx + 48]
 102dbc4:	48 8b 93 b8 00 00 00 	mov	rdx, qword ptr [rbx + 184]
 102dbcb:	48 85 d2 	test	rdx, rdx
 102dbce:	75 3e 	jne	62 <_runtime.mstart1+0xbe>
 102dbd0:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 102dbd4:	48 39 d0 	cmp	rax, rdx
 102dbd7:	75 0f 	jne	15 <_runtime.mstart1+0x98>
 102dbd9:	e8 52 32 00 00 	call	12882 <_runtime.schedule>
 102dbde:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102dbe3:	48 83 c4 20 	add	rsp, 32
 102dbe7:	c3 	ret
 102dbe8:	48 8b 82 d8 00 00 00 	mov	rax, qword ptr [rdx + 216]
 102dbef:	48 89 04 24 	mov	qword ptr [rsp], rax
 102dbf3:	e8 a8 74 00 00 	call	29864 <_runtime.acquirep>
 102dbf8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102dbfd:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102dc01:	48 c7 80 d8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 216], 0
 102dc0c:	eb cb 	jmp	-53 <_runtime.mstart1+0x89>
 102dc0e:	48 8b 02 	mov	rax, qword ptr [rdx]
 102dc11:	ff d0 	call	rax
 102dc13:	48 8d 05 06 11 0a 00 	lea	rax, [rip + 659718]
 102dc1a:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102dc1f:	eb af 	jmp	-81 <_runtime.mstart1+0x80>
 102dc21:	e8 3a 00 00 00 	call	58 <_runtime.mstartm0>
 102dc26:	48 8d 05 f3 10 0a 00 	lea	rax, [rip + 659699]
 102dc2d:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102dc32:	eb 8c 	jmp	-116 <_runtime.mstart1+0x70>
 102dc34:	48 8d 05 3e 63 04 00 	lea	rax, [rip + 287550]
 102dc3b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102dc3f:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102dc48:	e8 13 b1 ff ff 	call	-20205 <_runtime.throw>
 102dc4d:	90 	nop
 102dc4e:	e8 7d 2f 02 00 	call	143229 <_runtime.morestack_noctxt>
 102dc53:	e9 f8 fe ff ff 	jmp	-264 <_runtime.mstart1>
 102dc58:	cc 	int3
 102dc59:	cc 	int3
 102dc5a:	cc 	int3
 102dc5b:	cc 	int3
 102dc5c:	cc 	int3
 102dc5d:	cc 	int3
 102dc5e:	cc 	int3
 102dc5f:	cc 	int3

_runtime.mstartm0:
 102dc60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102dc69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102dc6d:	76 41 	jbe	65 <_runtime.mstartm0+0x50>
 102dc6f:	48 83 ec 10 	sub	rsp, 16
 102dc73:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 102dc78:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102dc7d:	80 3d e6 9a 0c 00 00 	cmp	byte ptr [rip + 826086], 0
 102dc84:	74 09 	je	9 <_runtime.mstartm0+0x2f>
 102dc86:	80 3d d6 9a 0c 00 00 	cmp	byte ptr [rip + 826070], 0
 102dc8d:	74 13 	je	19 <_runtime.mstartm0+0x42>
 102dc8f:	c6 04 24 00 	mov	byte ptr [rsp], 0
 102dc93:	e8 28 ce 00 00 	call	52776 <_runtime.initsig>
 102dc98:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102dc9d:	48 83 c4 10 	add	rsp, 16
 102dca1:	c3 	ret
 102dca2:	c6 05 ba 9a 0c 00 01 	mov	byte ptr [rip + 826042], 1
 102dca9:	e8 d2 0a 00 00 	call	2770 <_runtime.newextram>
 102dcae:	eb df 	jmp	-33 <_runtime.mstartm0+0x2f>
 102dcb0:	e8 1b 2f 02 00 	call	143131 <_runtime.morestack_noctxt>
 102dcb5:	eb a9 	jmp	-87 <_runtime.mstartm0>
 102dcb7:	cc 	int3
 102dcb8:	cc 	int3
 102dcb9:	cc 	int3
 102dcba:	cc 	int3
 102dcbb:	cc 	int3
 102dcbc:	cc 	int3
 102dcbd:	cc 	int3
 102dcbe:	cc 	int3
 102dcbf:	cc 	int3

_runtime.mexit:
 102dcc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102dcc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102dccd:	0f 86 54 02 00 00 	jbe	596 <_runtime.mexit+0x267>
 102dcd3:	48 83 ec 28 	sub	rsp, 40
 102dcd7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102dcdc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102dce1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102dcea:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102dcee:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102dcf3:	48 8d 0d 26 10 0a 00 	lea	rcx, [rip + 659494]
 102dcfa:	48 39 c1 	cmp	rcx, rax
 102dcfd:	0f 84 be 01 00 00 	je	446 <_runtime.mexit+0x201>
 102dd03:	90 	nop
 102dd04:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102dd0b:	48 8d 05 56 d4 09 00 	lea	rax, [rip + 644182]
 102dd12:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102dd17:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102dd20:	e8 eb 56 01 00 	call	87787 <_runtime.sigprocmask>
 102dd25:	90 	nop
 102dd26:	e8 55 eb 00 00 	call	60245 <_runtime.unminitSignals>
 102dd2b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102dd30:	48 8b 48 50 	mov	rcx, qword ptr [rax + 80]
 102dd34:	48 85 c9 	test	rcx, rcx
 102dd37:	0f 85 23 01 00 00 	jne	291 <_runtime.mexit+0x1a0>
 102dd3d:	48 8d 05 34 09 0a 00 	lea	rax, [rip + 657716]
 102dd44:	48 89 04 24 	mov	qword ptr [rsp], rax
 102dd48:	e8 e3 a3 fd ff 	call	-154653 <_runtime.lock>
 102dd4d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102dd52:	48 8d 0d a7 04 0a 00 	lea	rcx, [rip + 656551]
 102dd59:	eb 07 	jmp	7 <_runtime.mexit+0xa2>
 102dd5b:	48 8d 8a 50 01 00 00 	lea	rcx, [rdx + 336]
 102dd62:	48 8b 11 	mov	rdx, qword ptr [rcx]
 102dd65:	48 85 d2 	test	rdx, rdx
 102dd68:	0f 84 3a 01 00 00 	je	314 <_runtime.mexit+0x1e8>
 102dd6e:	48 39 c2 	cmp	rdx, rax
 102dd71:	75 e8 	jne	-24 <_runtime.mexit+0x9b>
 102dd73:	48 8b 90 50 01 00 00 	mov	rdx, qword ptr [rax + 336]
 102dd7a:	83 3d 7f 9b 0c 00 00 	cmp	dword ptr [rip + 826239], 0
 102dd81:	0f 85 c3 00 00 00 	jne	195 <_runtime.mexit+0x18a>
 102dd87:	48 89 11 	mov	qword ptr [rcx], rdx
 102dd8a:	0f b6 4c 24 30 	movzx	ecx, byte ptr [rsp + 48]
 102dd8f:	84 c9 	test	cl, cl
 102dd91:	74 63 	je	99 <_runtime.mexit+0x136>
 102dd93:	48 8d 05 de 08 0a 00 	lea	rax, [rip + 657630]
 102dd9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102dd9e:	e8 6d a5 fd ff 	call	-154259 <_runtime.unlock>
 102dda3:	e8 b8 74 00 00 	call	29880 <_runtime.releasep>
 102dda8:	e8 f3 14 00 00 	call	5363 <_runtime.handoffp>
 102ddad:	48 8d 05 c4 08 0a 00 	lea	rax, [rip + 657604]
 102ddb4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ddb8:	e8 73 a3 fd ff 	call	-154765 <_runtime.lock>
 102ddbd:	48 ff 05 dc 08 0a 00 	inc	qword ptr [rip + 657628]
 102ddc4:	e8 27 77 00 00 	call	30503 <_runtime.checkdead>
 102ddc9:	48 8d 05 a8 08 0a 00 	lea	rax, [rip + 657576]
 102ddd0:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ddd4:	e8 37 a5 fd ff 	call	-154313 <_runtime.unlock>
 102ddd9:	0f b6 44 24 30 	movzx	eax, byte ptr [rsp + 48]
 102ddde:	84 c0 	test	al, al
 102dde0:	74 0a 	je	10 <_runtime.mexit+0x12c>
 102dde2:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102dde7:	48 83 c4 28 	add	rsp, 40
 102ddeb:	c3 	ret
 102ddec:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102ddf1:	48 83 c4 28 	add	rsp, 40
 102ddf5:	c3 	ret
 102ddf6:	ba 01 00 00 00 	mov	edx, 1
 102ddfb:	87 90 1c 01 00 00 	xchg	dword ptr [rax + 284], edx
 102de01:	48 8b 15 50 09 0a 00 	mov	rdx, qword ptr [rip + 657744]
 102de08:	83 3d f1 9a 0c 00 00 	cmp	dword ptr [rip + 826097], 0
 102de0f:	75 13 	jne	19 <_runtime.mexit+0x164>
 102de11:	48 89 90 a8 02 00 00 	mov	qword ptr [rax + 680], rdx
 102de18:	48 89 05 39 09 0a 00 	mov	qword ptr [rip + 657721], rax
 102de1f:	e9 6f ff ff ff 	jmp	-145 <_runtime.mexit+0xd3>
 102de24:	48 8d b8 a8 02 00 00 	lea	rdi, [rax + 680]
 102de2b:	48 89 c3 	mov	rbx, rax
 102de2e:	48 89 d0 	mov	rax, rdx
 102de31:	e8 aa 4b 02 00 	call	150442 <_runtime.gcWriteBarrier>
 102de36:	48 8d 3d 1b 09 0a 00 	lea	rdi, [rip + 657691]
 102de3d:	48 89 d8 	mov	rax, rbx
 102de40:	e8 9b 4b 02 00 	call	150427 <_runtime.gcWriteBarrier>
 102de45:	e9 49 ff ff ff 	jmp	-183 <_runtime.mexit+0xd3>
 102de4a:	48 89 cf 	mov	rdi, rcx
 102de4d:	48 89 c3 	mov	rbx, rax
 102de50:	48 89 d0 	mov	rax, rdx
 102de53:	e8 88 4b 02 00 	call	150408 <_runtime.gcWriteBarrier>
 102de58:	48 89 d8 	mov	rax, rbx
 102de5b:	e9 2a ff ff ff 	jmp	-214 <_runtime.mexit+0xca>
 102de60:	48 8b 41 08 	mov	rax, qword ptr [rcx + 8]
 102de64:	48 8b 09 	mov	rcx, qword ptr [rcx]
 102de67:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102de6b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102de70:	e8 bb fe 00 00 	call	65211 <_runtime.stackfree>
 102de75:	83 3d 84 9a 0c 00 00 	cmp	dword ptr [rip + 825988], 0
 102de7c:	75 12 	jne	18 <_runtime.mexit+0x1d0>
 102de7e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102de83:	48 c7 40 50 00 00 00 00 	mov	qword ptr [rax + 80], 0
 102de8b:	e9 ad fe ff ff 	jmp	-339 <_runtime.mexit+0x7d>
 102de90:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102de95:	48 8d 79 50 	lea	rdi, [rcx + 80]
 102de99:	31 c0 	xor	eax, eax
 102de9b:	e8 40 4b 02 00 	call	150336 <_runtime.gcWriteBarrier>
 102dea0:	48 89 c8 	mov	rax, rcx
 102dea3:	e9 95 fe ff ff 	jmp	-363 <_runtime.mexit+0x7d>
 102dea8:	48 8d 05 03 61 04 00 	lea	rax, [rip + 286979]
 102deaf:	48 89 04 24 	mov	qword ptr [rsp], rax
 102deb3:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102debc:	e8 9f ae ff ff 	call	-20833 <_runtime.throw>
 102dec1:	e8 9a 73 00 00 	call	29594 <_runtime.releasep>
 102dec6:	e8 d5 13 00 00 	call	5077 <_runtime.handoffp>
 102decb:	48 8d 05 a6 07 0a 00 	lea	rax, [rip + 657318]
 102ded2:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ded6:	e8 55 a2 fd ff 	call	-155051 <_runtime.lock>
 102dedb:	48 ff 05 be 07 0a 00 	inc	qword ptr [rip + 657342]
 102dee2:	e8 09 76 00 00 	call	30217 <_runtime.checkdead>
 102dee7:	48 8d 05 8a 07 0a 00 	lea	rax, [rip + 657290]
 102deee:	48 89 04 24 	mov	qword ptr [rsp], rax
 102def2:	e8 19 a4 fd ff 	call	-154599 <_runtime.unlock>
 102def7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102defc:	84 00 	test	byte ptr [rax], al
 102defe:	48 05 48 01 00 00 	add	rax, 328
 102df04:	48 89 04 24 	mov	qword ptr [rsp], rax
 102df08:	e8 63 a5 fd ff 	call	-154269 <_runtime.notesleep>
 102df0d:	48 8d 05 d8 5d 04 00 	lea	rax, [rip + 286168]
 102df14:	48 89 04 24 	mov	qword ptr [rsp], rax
 102df18:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 102df21:	e8 3a ae ff ff 	call	-20934 <_runtime.throw>
 102df26:	90 	nop
 102df27:	e8 a4 2c 02 00 	call	142500 <_runtime.morestack_noctxt>
 102df2c:	e9 8f fd ff ff 	jmp	-625 <_runtime.mexit>
 102df31:	cc 	int3
 102df32:	cc 	int3
 102df33:	cc 	int3
 102df34:	cc 	int3
 102df35:	cc 	int3
 102df36:	cc 	int3
 102df37:	cc 	int3
 102df38:	cc 	int3
 102df39:	cc 	int3
 102df3a:	cc 	int3
 102df3b:	cc 	int3
 102df3c:	cc 	int3
 102df3d:	cc 	int3
 102df3e:	cc 	int3
 102df3f:	cc 	int3

_runtime.forEachP:
 102df40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102df49:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 102df4d:	0f 86 63 03 00 00 	jbe	867 <_runtime.forEachP+0x376>
 102df53:	48 83 ec 60 	sub	rsp, 96
 102df57:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 102df5c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 102df61:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102df6a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102df6e:	90 	nop
 102df6f:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 102df75:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102df7e:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 102df82:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 102df89:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102df8d:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 102df92:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 102df97:	48 8d 15 da 06 0a 00 	lea	rdx, [rip + 657114]
 102df9e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102dfa2:	e8 89 a1 fd ff 	call	-155255 <_runtime.lock>
 102dfa7:	83 3d da 07 0a 00 00 	cmp	dword ptr [rip + 657370], 0
 102dfae:	0f 85 e8 02 00 00 	jne	744 <_runtime.forEachP+0x35c>
 102dfb4:	8b 0d e6 97 0c 00 	mov	ecx, dword ptr [rip + 825318]
 102dfba:	ff c9 	dec	ecx
 102dfbc:	89 0d c6 07 0a 00 	mov	dword ptr [rip + 657350], ecx
 102dfc2:	83 3d 37 99 0c 00 00 	cmp	dword ptr [rip + 825655], 0
 102dfc9:	0f 85 85 02 00 00 	jne	645 <_runtime.forEachP+0x314>
 102dfcf:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 102dfd4:	48 89 05 a5 07 0a 00 	mov	qword ptr [rip + 657317], rax
 102dfdb:	48 8b 0d 66 03 0a 00 	mov	rcx, qword ptr [rip + 656230]
 102dfe2:	48 8b 15 57 03 0a 00 	mov	rdx, qword ptr [rip + 656215]
 102dfe9:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 102dfee:	31 f6 	xor	esi, esi
 102dff0:	eb 03 	jmp	3 <_runtime.forEachP+0xb5>
 102dff2:	48 ff c6 	inc	rsi
 102dff5:	48 39 ce 	cmp	rsi, rcx
 102dff8:	7d 1a 	jge	26 <_runtime.forEachP+0xd4>
 102dffa:	48 8b 3c f2 	mov	rdi, qword ptr [rdx + 8*rsi]
 102dffe:	48 39 df 	cmp	rdi, rbx
 102e001:	74 ef 	je	-17 <_runtime.forEachP+0xb2>
 102e003:	84 07 	test	byte ptr [rdi], al
 102e005:	41 b8 01 00 00 00 	mov	r8d, 1
 102e00b:	44 87 87 60 27 00 00 	xchg	dword ptr [rdi + 10080], r8d
 102e012:	eb de 	jmp	-34 <_runtime.forEachP+0xb2>
 102e014:	e8 97 80 00 00 	call	32919 <_runtime.preemptall>
 102e019:	48 8b 05 90 06 0a 00 	mov	rax, qword ptr [rip + 657040]
 102e020:	eb 04 	jmp	4 <_runtime.forEachP+0xe6>
 102e022:	48 8b 41 08 	mov	rax, qword ptr [rcx + 8]
 102e026:	48 85 c0 	test	rax, rax
 102e029:	74 3d 	je	61 <_runtime.forEachP+0x128>
 102e02b:	48 89 c1 	mov	rcx, rax
 102e02e:	b8 01 00 00 00 	mov	eax, 1
 102e033:	31 db 	xor	ebx, ebx
 102e035:	f0 	lock
 102e036:	0f b1 99 60 27 00 00 	cmpxchg	dword ptr [rcx + 10080], ebx
 102e03d:	40 0f 94 c6 	sete	sil
 102e041:	40 84 f6 	test	sil, sil
 102e044:	74 dc 	je	-36 <_runtime.forEachP+0xe2>
 102e046:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 102e04b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102e04f:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 102e054:	48 8b 02 	mov	rax, qword ptr [rdx]
 102e057:	ff d0 	call	rax
 102e059:	ff 0d 29 07 0a 00 	dec	dword ptr [rip + 657193]
 102e05f:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102e064:	31 db 	xor	ebx, ebx
 102e066:	eb ba 	jmp	-70 <_runtime.forEachP+0xe2>
 102e068:	8b 05 1a 07 0a 00 	mov	eax, dword ptr [rip + 657178]
 102e06e:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 102e072:	83 f8 00 	cmp	eax, 0
 102e075:	48 8d 0d fc 05 0a 00 	lea	rcx, [rip + 656892]
 102e07c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102e080:	e8 8b a2 fd ff 	call	-154997 <_runtime.unlock>
 102e085:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 102e08a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e08e:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 102e093:	48 8b 02 	mov	rax, qword ptr [rdx]
 102e096:	ff d0 	call	rax
 102e098:	48 8b 05 a9 02 0a 00 	mov	rax, qword ptr [rip + 656041]
 102e09f:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102e0a4:	48 8b 0d 95 02 0a 00 	mov	rcx, qword ptr [rip + 656021]
 102e0ab:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 102e0b0:	31 d2 	xor	edx, edx
 102e0b2:	eb 06 	jmp	6 <_runtime.forEachP+0x17a>
 102e0b4:	48 ff c2 	inc	rdx
 102e0b7:	48 89 f8 	mov	rax, rdi
 102e0ba:	48 39 c2 	cmp	rdx, rax
 102e0bd:	0f 8d 91 00 00 00 	jge	145 <_runtime.forEachP+0x214>
 102e0c3:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 102e0c7:	8b 73 04 	mov	esi, dword ptr [rbx + 4]
 102e0ca:	83 fe 02 	cmp	esi, 2
 102e0cd:	75 7b 	jne	123 <_runtime.forEachP+0x20a>
 102e0cf:	83 bb 60 27 00 00 01 	cmp	dword ptr [rbx + 10080], 1
 102e0d6:	75 68 	jne	104 <_runtime.forEachP+0x200>
 102e0d8:	48 89 c7 	mov	rdi, rax
 102e0db:	89 f0 	mov	eax, esi
 102e0dd:	45 31 c0 	xor	r8d, r8d
 102e0e0:	f0 	lock
 102e0e1:	44 0f b1 43 04 	cmpxchg	dword ptr [rbx + 4], r8d
 102e0e6:	40 0f 94 c6 	sete	sil
 102e0ea:	40 84 f6 	test	sil, sil
 102e0ed:	74 c5 	je	-59 <_runtime.forEachP+0x174>
 102e0ef:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 102e0f4:	80 3d 35 6e 0a 00 00 	cmp	byte ptr [rip + 683573], 0
 102e0fb:	75 20 	jne	32 <_runtime.forEachP+0x1dd>
 102e0fd:	ff 43 14 	inc	dword ptr [rbx + 20]
 102e100:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102e104:	e8 97 11 00 00 	call	4503 <_runtime.handoffp>
 102e109:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 102e10e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 102e113:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 102e118:	45 31 c0 	xor	r8d, r8d
 102e11b:	eb 97 	jmp	-105 <_runtime.forEachP+0x174>
 102e11d:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 102e122:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102e126:	e8 25 8f 01 00 	call	102181 <_runtime.traceGoSysBlock>
 102e12b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102e130:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e134:	e8 d7 86 01 00 	call	100055 <_runtime.traceProcStop>
 102e139:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 102e13e:	eb bd 	jmp	-67 <_runtime.forEachP+0x1bd>
 102e140:	48 89 c7 	mov	rdi, rax
 102e143:	45 31 c0 	xor	r8d, r8d
 102e146:	31 f6 	xor	esi, esi
 102e148:	eb a0 	jmp	-96 <_runtime.forEachP+0x1aa>
 102e14a:	48 89 c7 	mov	rdi, rax
 102e14d:	45 31 c0 	xor	r8d, r8d
 102e150:	31 f6 	xor	esi, esi
 102e152:	eb 96 	jmp	-106 <_runtime.forEachP+0x1aa>
 102e154:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 102e158:	83 f8 00 	cmp	eax, 0
 102e15b:	0f 8f c2 00 00 00 	jg	194 <_runtime.forEachP+0x2e3>
 102e161:	83 3d 20 06 0a 00 00 	cmp	dword ptr [rip + 656928], 0
 102e168:	0f 85 15 01 00 00 	jne	277 <_runtime.forEachP+0x343>
 102e16e:	48 8b 05 d3 01 0a 00 	mov	rax, qword ptr [rip + 655827]
 102e175:	48 8b 0d c4 01 0a 00 	mov	rcx, qword ptr [rip + 655812]
 102e17c:	31 d2 	xor	edx, edx
 102e17e:	eb 03 	jmp	3 <_runtime.forEachP+0x243>
 102e180:	48 ff c2 	inc	rdx
 102e183:	48 39 c2 	cmp	rdx, rax
 102e186:	7d 14 	jge	20 <_runtime.forEachP+0x25c>
 102e188:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 102e18c:	84 03 	test	byte ptr [rbx], al
 102e18e:	83 bb 60 27 00 00 00 	cmp	dword ptr [rbx + 10080], 0
 102e195:	74 e9 	je	-23 <_runtime.forEachP+0x240>
 102e197:	e9 ce 00 00 00 	jmp	206 <_runtime.forEachP+0x32a>
 102e19c:	48 8d 05 d5 04 0a 00 	lea	rax, [rip + 656597]
 102e1a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e1a7:	e8 84 9f fd ff 	call	-155772 <_runtime.lock>
 102e1ac:	83 3d 4d 97 0c 00 00 	cmp	dword ptr [rip + 825165], 0
 102e1b3:	75 59 	jne	89 <_runtime.forEachP+0x2ce>
 102e1b5:	48 c7 05 c0 05 0a 00 00 00 00 00 	mov	qword ptr [rip + 656832], 0
 102e1c0:	48 8d 05 b1 04 0a 00 	lea	rax, [rip + 656561]
 102e1c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e1cb:	e8 40 a1 fd ff 	call	-155328 <_runtime.unlock>
 102e1d0:	90 	nop
 102e1d1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102e1da:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102e1df:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 102e1e5:	8d 5a ff 	lea	ebx, [rdx - 1]
 102e1e8:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 102e1ee:	83 fa 01 	cmp	edx, 1
 102e1f1:	75 11 	jne	17 <_runtime.forEachP+0x2c4>
 102e1f3:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 102e1fa:	74 08 	je	8 <_runtime.forEachP+0x2c4>
 102e1fc:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 102e204:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 102e209:	48 83 c4 60 	add	rsp, 96
 102e20d:	c3 	ret
 102e20e:	48 8d 3d 6b 05 0a 00 	lea	rdi, [rip + 656747]
 102e215:	31 c0 	xor	eax, eax
 102e217:	e8 c4 47 02 00 	call	149444 <_runtime.gcWriteBarrier>
 102e21c:	eb a2 	jmp	-94 <_runtime.forEachP+0x280>
 102e21e:	e8 8d 7e 00 00 	call	32397 <_runtime.preemptall>
 102e223:	48 8d 05 66 05 0a 00 	lea	rax, [rip + 656742]
 102e22a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e22e:	48 c7 44 24 08 a0 86 01 00 	mov	qword ptr [rsp + 8], 100000
 102e237:	e8 e4 a5 fd ff 	call	-154140 <_runtime.notetsleep>
 102e23c:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 102e241:	74 db 	je	-37 <_runtime.forEachP+0x2de>
 102e243:	90 	nop
 102e244:	48 c7 05 41 05 0a 00 00 00 00 00 	mov	qword ptr [rip + 656705], 0
 102e24f:	e9 0d ff ff ff 	jmp	-243 <_runtime.forEachP+0x221>
 102e254:	48 8d 3d 25 05 0a 00 	lea	rdi, [rip + 656677]
 102e25b:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 102e260:	e8 7b 47 02 00 	call	149371 <_runtime.gcWriteBarrier>
 102e265:	e9 71 fd ff ff 	jmp	-655 <_runtime.forEachP+0x9b>
 102e26a:	48 8d 05 a0 6b 04 00 	lea	rax, [rip + 289696]
 102e271:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e275:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 102e27e:	e8 dd aa ff ff 	call	-21795 <_runtime.throw>
 102e283:	48 8d 05 ff 5b 04 00 	lea	rax, [rip + 285695]
 102e28a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e28e:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 102e297:	e8 c4 aa ff ff 	call	-21820 <_runtime.throw>
 102e29c:	48 8d 05 b4 7d 04 00 	lea	rax, [rip + 294324]
 102e2a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e2a7:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 102e2b0:	e8 ab aa ff ff 	call	-21845 <_runtime.throw>
 102e2b5:	90 	nop
 102e2b6:	e8 45 24 01 00 	call	74821 <_runtime.morestackc>
 102e2bb:	e9 80 fc ff ff 	jmp	-896 <_runtime.forEachP>

_runtime.runSafePointFn:
 102e2c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102e2c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102e2cd:	0f 86 a4 00 00 00 	jbe	164 <_runtime.runSafePointFn+0xb7>
 102e2d3:	48 83 ec 10 	sub	rsp, 16
 102e2d7:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 102e2dc:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 102e2e1:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102e2ea:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 102e2ee:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 102e2f5:	84 01 	test	byte ptr [rcx], al
 102e2f7:	b8 01 00 00 00 	mov	eax, 1
 102e2fc:	31 db 	xor	ebx, ebx
 102e2fe:	f0 	lock
 102e2ff:	0f b1 99 60 27 00 00 	cmpxchg	dword ptr [rcx + 10080], ebx
 102e306:	0f 94 c3 	sete	bl
 102e309:	84 db 	test	bl, bl
 102e30b:	74 60 	je	96 <_runtime.runSafePointFn+0xad>
 102e30d:	48 8b 15 6c 04 0a 00 	mov	rdx, qword ptr [rip + 656492]
 102e314:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102e318:	48 8b 02 	mov	rax, qword ptr [rdx]
 102e31b:	ff d0 	call	rax
 102e31d:	48 8d 05 54 03 0a 00 	lea	rax, [rip + 656212]
 102e324:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e328:	e8 03 9e fd ff 	call	-156157 <_runtime.lock>
 102e32d:	8b 05 55 04 0a 00 	mov	eax, dword ptr [rip + 656469]
 102e333:	8d 48 ff 	lea	ecx, [rax - 1]
 102e336:	89 0d 4c 04 0a 00 	mov	dword ptr [rip + 656460], ecx
 102e33c:	83 f8 01 	cmp	eax, 1
 102e33f:	74 1a 	je	26 <_runtime.runSafePointFn+0x9b>
 102e341:	48 8d 05 30 03 0a 00 	lea	rax, [rip + 656176]
 102e348:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e34c:	e8 bf 9f fd ff 	call	-155713 <_runtime.unlock>
 102e351:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102e356:	48 83 c4 10 	add	rsp, 16
 102e35a:	c3 	ret
 102e35b:	48 8d 05 2e 04 0a 00 	lea	rax, [rip + 656430]
 102e362:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e366:	e8 85 a0 fd ff 	call	-155515 <_runtime.notewakeup>
 102e36b:	eb d4 	jmp	-44 <_runtime.runSafePointFn+0x81>
 102e36d:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 102e372:	48 83 c4 10 	add	rsp, 16
 102e376:	c3 	ret
 102e377:	e8 54 28 02 00 	call	141396 <_runtime.morestack_noctxt>
 102e37c:	e9 3f ff ff ff 	jmp	-193 <_runtime.runSafePointFn>
 102e381:	cc 	int3
 102e382:	cc 	int3
 102e383:	cc 	int3
 102e384:	cc 	int3
 102e385:	cc 	int3
 102e386:	cc 	int3
 102e387:	cc 	int3
 102e388:	cc 	int3
 102e389:	cc 	int3
 102e38a:	cc 	int3
 102e38b:	cc 	int3
 102e38c:	cc 	int3
 102e38d:	cc 	int3
 102e38e:	cc 	int3
 102e38f:	cc 	int3

_runtime.allocm:
 102e390:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102e399:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102e39d:	0f 86 44 02 00 00 	jbe	580 <_runtime.allocm+0x257>
 102e3a3:	48 83 ec 38 	sub	rsp, 56
 102e3a7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102e3ac:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102e3b1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102e3ba:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102e3bf:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102e3c3:	90 	nop
 102e3c4:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 102e3ca:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102e3ce:	48 83 b9 d0 00 00 00 00 	cmp	qword ptr [rcx + 208], 0
 102e3d6:	0f 84 f3 01 00 00 	je	499 <_runtime.allocm+0x23f>
 102e3dc:	48 83 3d 74 03 0a 00 00 	cmp	qword ptr [rip + 656244], 0
 102e3e4:	0f 84 b8 00 00 00 	je	184 <_runtime.allocm+0x112>
 102e3ea:	48 8d 05 87 02 0a 00 	lea	rax, [rip + 656007]
 102e3f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e3f5:	e8 36 9d fd ff 	call	-156362 <_runtime.lock>
 102e3fa:	48 8b 05 57 03 0a 00 	mov	rax, qword ptr [rip + 656215]
 102e401:	31 c9 	xor	ecx, ecx
 102e403:	eb 06 	jmp	6 <_runtime.allocm+0x7b>
 102e405:	48 89 c1 	mov	rcx, rax
 102e408:	48 89 d0 	mov	rax, rdx
 102e40b:	48 85 c0 	test	rax, rax
 102e40e:	74 6e 	je	110 <_runtime.allocm+0xee>
 102e410:	83 b8 1c 01 00 00 00 	cmp	dword ptr [rax + 284], 0
 102e417:	74 30 	je	48 <_runtime.allocm+0xb9>
 102e419:	48 8b 90 a8 02 00 00 	mov	rdx, qword ptr [rax + 680]
 102e420:	83 3d d9 94 0c 00 00 	cmp	dword ptr [rip + 824537], 0
 102e427:	75 09 	jne	9 <_runtime.allocm+0xa2>
 102e429:	48 89 88 a8 02 00 00 	mov	qword ptr [rax + 680], rcx
 102e430:	eb d3 	jmp	-45 <_runtime.allocm+0x75>
 102e432:	48 8d b8 a8 02 00 00 	lea	rdi, [rax + 680]
 102e439:	48 89 c3 	mov	rbx, rax
 102e43c:	48 89 c8 	mov	rax, rcx
 102e43f:	e8 9c 45 02 00 	call	148892 <_runtime.gcWriteBarrier>
 102e444:	48 89 d8 	mov	rax, rbx
 102e447:	eb bc 	jmp	-68 <_runtime.allocm+0x75>
 102e449:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102e44e:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102e453:	48 8b 08 	mov	rcx, qword ptr [rax]
 102e456:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 102e45a:	48 8b 09 	mov	rcx, qword ptr [rcx]
 102e45d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102e461:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102e466:	e8 c5 f8 00 00 	call	63685 <_runtime.stackfree>
 102e46b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102e470:	48 8b 90 a8 02 00 00 	mov	rdx, qword ptr [rax + 680]
 102e477:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102e47c:	eb 87 	jmp	-121 <_runtime.allocm+0x75>
 102e47e:	83 3d 7b 94 0c 00 00 	cmp	dword ptr [rip + 824443], 0
 102e485:	0f 85 30 01 00 00 	jne	304 <_runtime.allocm+0x22b>
 102e48b:	48 89 0d c6 02 0a 00 	mov	qword ptr [rip + 656070], rcx
 102e492:	48 8d 05 df 01 0a 00 	lea	rax, [rip + 655839]
 102e499:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e49d:	e8 6e 9e fd ff 	call	-156050 <_runtime.unlock>
 102e4a2:	48 8d 05 97 41 04 00 	lea	rax, [rip + 278935]
 102e4a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e4ad:	e8 4e bf fd ff 	call	-147634 <_runtime.newobject>
 102e4b2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102e4b7:	83 3d 42 94 0c 00 00 	cmp	dword ptr [rip + 824386], 0
 102e4be:	0f 85 db 00 00 00 	jne	219 <_runtime.allocm+0x20f>
 102e4c4:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 102e4c9:	48 89 88 b8 00 00 00 	mov	qword ptr [rax + 184], rcx
 102e4d0:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102e4d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e4d9:	e8 12 e3 ff ff 	call	-7406 <_runtime.mcommoninit>
 102e4de:	c7 04 24 ff ff ff ff 	mov	dword ptr [rsp], 4294967295
 102e4e5:	e8 26 4a 00 00 	call	18982 <_runtime.malg>
 102e4ea:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102e4ef:	83 3d 0a 94 0c 00 00 	cmp	dword ptr [rip + 824330], 0
 102e4f6:	0f 85 91 00 00 00 	jne	145 <_runtime.allocm+0x1fd>
 102e4fc:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102e501:	48 89 01 	mov	qword ptr [rcx], rax
 102e504:	84 00 	test	byte ptr [rax], al
 102e506:	83 3d f3 93 0c 00 00 	cmp	dword ptr [rip + 824307], 0
 102e50d:	75 70 	jne	112 <_runtime.allocm+0x1ef>
 102e50f:	48 89 48 30 	mov	qword ptr [rax + 48], rcx
 102e513:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102e518:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 102e51c:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 102e523:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 102e528:	48 39 d3 	cmp	rbx, rdx
 102e52b:	74 41 	je	65 <_runtime.allocm+0x1de>
 102e52d:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102e531:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 102e53a:	8b 98 08 01 00 00 	mov	ebx, dword ptr [rax + 264]
 102e540:	8d 73 ff 	lea	esi, [rbx - 1]
 102e543:	89 b0 08 01 00 00 	mov	dword ptr [rax + 264], esi
 102e549:	83 fb 01 	cmp	ebx, 1
 102e54c:	75 11 	jne	17 <_runtime.allocm+0x1cf>
 102e54e:	80 ba b1 00 00 00 00 	cmp	byte ptr [rdx + 177], 0
 102e555:	74 08 	je	8 <_runtime.allocm+0x1cf>
 102e557:	48 c7 42 10 de fa ff ff 	mov	qword ptr [rdx + 16], -1314
 102e55f:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 102e564:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102e569:	48 83 c4 38 	add	rsp, 56
 102e56d:	c3 	ret
 102e56e:	e8 ed 6c 00 00 	call	27885 <_runtime.releasep>
 102e573:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102e578:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102e57d:	eb ae 	jmp	-82 <_runtime.allocm+0x19d>
 102e57f:	48 8d 78 30 	lea	rdi, [rax + 48]
 102e583:	48 89 c8 	mov	rax, rcx
 102e586:	e8 55 44 02 00 	call	148565 <_runtime.gcWriteBarrier>
 102e58b:	eb 86 	jmp	-122 <_runtime.allocm+0x183>
 102e58d:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 102e592:	e8 49 44 02 00 	call	148553 <_runtime.gcWriteBarrier>
 102e597:	48 89 f9 	mov	rcx, rdi
 102e59a:	e9 65 ff ff ff 	jmp	-155 <_runtime.allocm+0x174>
 102e59f:	48 8d b8 b8 00 00 00 	lea	rdi, [rax + 184]
 102e5a6:	48 89 c1 	mov	rcx, rax
 102e5a9:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 102e5ae:	e8 2d 44 02 00 	call	148525 <_runtime.gcWriteBarrier>
 102e5b3:	48 89 c8 	mov	rax, rcx
 102e5b6:	e9 15 ff ff ff 	jmp	-235 <_runtime.allocm+0x140>
 102e5bb:	48 8d 3d 96 01 0a 00 	lea	rdi, [rip + 655766]
 102e5c2:	48 89 c8 	mov	rax, rcx
 102e5c5:	e8 16 44 02 00 	call	148502 <_runtime.gcWriteBarrier>
 102e5ca:	e9 c3 fe ff ff 	jmp	-317 <_runtime.allocm+0x102>
 102e5cf:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102e5d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e5d8:	e8 c3 6a 00 00 	call	27331 <_runtime.acquirep>
 102e5dd:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102e5e2:	e9 f5 fd ff ff 	jmp	-523 <_runtime.allocm+0x4c>
 102e5e7:	e8 e4 25 02 00 	call	140772 <_runtime.morestack_noctxt>
 102e5ec:	e9 9f fd ff ff 	jmp	-609 <_runtime.allocm>
 102e5f1:	cc 	int3
 102e5f2:	cc 	int3
 102e5f3:	cc 	int3
 102e5f4:	cc 	int3
 102e5f5:	cc 	int3
 102e5f6:	cc 	int3
 102e5f7:	cc 	int3
 102e5f8:	cc 	int3
 102e5f9:	cc 	int3
 102e5fa:	cc 	int3
 102e5fb:	cc 	int3
 102e5fc:	cc 	int3
 102e5fd:	cc 	int3
 102e5fe:	cc 	int3
 102e5ff:	cc 	int3

_runtime.needm:
 102e600:	48 83 ec 38 	sub	rsp, 56
 102e604:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102e609:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102e60e:	80 3d 55 91 0c 00 00 	cmp	byte ptr [rip + 823637], 0
 102e615:	74 0d 	je	13 <_runtime.needm+0x24>
 102e617:	80 3d 45 91 0c 00 00 	cmp	byte ptr [rip + 823621], 0
 102e61e:	0f 84 0e 01 00 00 	je	270 <_runtime.needm+0x132>
 102e624:	c6 04 24 00 	mov	byte ptr [rsp], 0
 102e628:	e8 c3 04 00 00 	call	1219 <_runtime.lockextra>
 102e62d:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102e632:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102e637:	48 83 b8 58 01 00 00 00 	cmp	qword ptr [rax + 344], 0
 102e63f:	0f 94 80 28 01 00 00 	sete	byte ptr [rax + 296]
 102e646:	ff 0d 38 91 0c 00 	dec	dword ptr [rip + 823608]
 102e64c:	48 8b 88 58 01 00 00 	mov	rcx, qword ptr [rax + 344]
 102e653:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 102e658:	48 8d 15 c9 91 0c 00 	lea	rdx, [rip + 823753]
 102e65f:	48 87 0a 	xchg	qword ptr [rdx], rcx
 102e662:	90 	nop
 102e663:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102e66a:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 102e673:	48 8d 88 80 00 00 00 	lea	rcx, [rax + 128]
 102e67a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102e67f:	e8 8c 4d 01 00 	call	85388 <_runtime.sigprocmask>
 102e684:	90 	nop
 102e685:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102e68c:	48 8d 05 d5 ca 09 00 	lea	rax, [rip + 641749]
 102e693:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102e698:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102e6a1:	e8 6a 4d 01 00 	call	85354 <_runtime.sigprocmask>
 102e6a6:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102e6ab:	48 8b 08 	mov	rcx, qword ptr [rax]
 102e6ae:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102e6b2:	e8 59 3c 02 00 	call	146521 <_runtime.setg>
 102e6b7:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102e6c0:	48 8d 4c 24 40 	lea	rcx, [rsp + 64]
 102e6c5:	48 81 c1 00 04 00 00 	add	rcx, 1024
 102e6cc:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 102e6d0:	48 8d 4c 24 40 	lea	rcx, [rsp + 64]
 102e6d5:	48 8d 91 00 80 ff ff 	lea	rdx, [rcx - 32768]
 102e6dc:	48 89 10 	mov	qword ptr [rax], rdx
 102e6df:	48 81 c1 80 83 ff ff 	add	rcx, -31872
 102e6e6:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 102e6ea:	e8 a1 22 02 00 	call	139937 <_runtime.asminit>
 102e6ef:	e8 bc 80 ff ff 	call	-32580 <_runtime.minit>
 102e6f4:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102e6f9:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 102e700:	48 89 04 24 	mov	qword ptr [rsp], rax
 102e704:	48 b8 06 00 00 00 03 00 00 00 	movabs	rax, 12884901894
 102e70e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102e713:	e8 f8 eb ff ff 	call	-5128 <_runtime.casgstatus>
 102e718:	b8 ff ff ff ff 	mov	eax, 4294967295
 102e71d:	48 8d 0d 84 ff 09 00 	lea	rcx, [rip + 655236]
 102e724:	f0 	lock
 102e725:	0f c1 01 	xadd	dword ptr [rcx], eax
 102e728:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102e72d:	48 83 c4 38 	add	rsp, 56
 102e731:	c3 	ret
 102e732:	48 8b 15 97 e1 09 00 	mov	rdx, qword ptr [rip + 647575]
 102e739:	48 8b 0d 98 e1 09 00 	mov	rcx, qword ptr [rip + 647576]
 102e740:	48 85 c9 	test	rcx, rcx
 102e743:	76 27 	jbe	39 <_runtime.needm+0x16c>
 102e745:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 102e74d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102e752:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 102e756:	e8 c5 4a 01 00 	call	84677 <_runtime.write1>
 102e75b:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102e762:	e8 39 4a 01 00 	call	84537 <_runtime.exit>
 102e767:	e9 b8 fe ff ff 	jmp	-328 <_runtime.needm+0x24>
 102e76c:	31 c0 	xor	eax, eax
 102e76e:	e8 dd 4b 02 00 	call	150493 <_runtime.panicIndex>
 102e773:	90 	nop
 102e774:	cc 	int3
 102e775:	cc 	int3
 102e776:	cc 	int3
 102e777:	cc 	int3
 102e778:	cc 	int3
 102e779:	cc 	int3
 102e77a:	cc 	int3
 102e77b:	cc 	int3
 102e77c:	cc 	int3
 102e77d:	cc 	int3
 102e77e:	cc 	int3
 102e77f:	cc 	int3

_runtime.newextram:
 102e780:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102e789:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102e78d:	76 74 	jbe	116 <_runtime.newextram+0x83>
 102e78f:	48 83 ec 28 	sub	rsp, 40
 102e793:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102e798:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102e79d:	31 c0 	xor	eax, eax
 102e79f:	48 8d 0d e2 8f 0c 00 	lea	rcx, [rip + 823266]
 102e7a6:	87 01 	xchg	dword ptr [rcx], eax
 102e7a8:	85 c0 	test	eax, eax
 102e7aa:	76 2a 	jbe	42 <_runtime.newextram+0x56>
 102e7ac:	89 44 24 14 	mov	dword ptr [rsp + 20], eax
 102e7b0:	31 c9 	xor	ecx, ecx
 102e7b2:	eb 14 	jmp	20 <_runtime.newextram+0x48>
 102e7b4:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 102e7b8:	e8 53 00 00 00 	call	83 <_runtime.oneNewExtraM>
 102e7bd:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 102e7c1:	8d 48 01 	lea	ecx, [rax + 1]
 102e7c4:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 102e7c8:	39 c1 	cmp	ecx, eax
 102e7ca:	72 e8 	jb	-24 <_runtime.newextram+0x34>
 102e7cc:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102e7d1:	48 83 c4 28 	add	rsp, 40
 102e7d5:	c3 	ret
 102e7d6:	c6 04 24 01 	mov	byte ptr [rsp], 1
 102e7da:	e8 11 03 00 00 	call	785 <_runtime.lockextra>
 102e7df:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102e7e4:	90 	nop
 102e7e5:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102e7ea:	48 89 c1 	mov	rcx, rax
 102e7ed:	48 8d 15 34 90 0c 00 	lea	rdx, [rip + 823348]
 102e7f4:	48 87 02 	xchg	qword ptr [rdx], rax
 102e7f7:	48 85 c9 	test	rcx, rcx
 102e7fa:	75 d0 	jne	-48 <_runtime.newextram+0x4c>
 102e7fc:	e8 0f 00 00 00 	call	15 <_runtime.oneNewExtraM>
 102e801:	eb c9 	jmp	-55 <_runtime.newextram+0x4c>
 102e803:	e8 c8 23 02 00 	call	140232 <_runtime.morestack_noctxt>
 102e808:	e9 73 ff ff ff 	jmp	-141 <_runtime.newextram>
 102e80d:	cc 	int3
 102e80e:	cc 	int3
 102e80f:	cc 	int3

_runtime.oneNewExtraM:
 102e810:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102e819:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102e81d:	0f 86 84 01 00 00 	jbe	388 <_runtime.oneNewExtraM+0x197>
 102e823:	48 83 ec 38 	sub	rsp, 56
 102e827:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102e82c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102e831:	0f 57 c0 	xorps	xmm0, xmm0
 102e834:	0f 11 04 24 	movups	xmmword ptr [rsp], xmm0
 102e838:	e8 53 fb ff ff 	call	-1197 <_runtime.allocm>
 102e83d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102e842:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102e847:	c7 04 24 00 10 00 00 	mov	dword ptr [rsp], 4096
 102e84e:	e8 bd 46 00 00 	call	18109 <_runtime.malg>
 102e853:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102e858:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102e85d:	48 8d 0d f4 8f 04 00 	lea	rcx, [rip + 298996]
 102e864:	84 01 	test	byte ptr [rcx], al
 102e866:	48 8b 0d eb 8f 04 00 	mov	rcx, qword ptr [rip + 298987]
 102e86d:	48 ff c1 	inc	rcx
 102e870:	48 89 48 40 	mov	qword ptr [rax + 64], rcx
 102e874:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102e878:	48 83 c1 e0 	add	rcx, -32
 102e87c:	48 89 48 38 	mov	qword ptr [rax + 56], rcx
 102e880:	48 c7 40 60 00 00 00 00 	mov	qword ptr [rax + 96], 0
 102e888:	48 89 c2 	mov	rdx, rax
 102e88b:	48 89 42 48 	mov	qword ptr [rdx + 72], rax
 102e88f:	48 8b 42 40 	mov	rax, qword ptr [rdx + 64]
 102e893:	48 89 42 78 	mov	qword ptr [rdx + 120], rax
 102e897:	48 89 4a 70 	mov	qword ptr [rdx + 112], rcx
 102e89b:	48 8b 42 38 	mov	rax, qword ptr [rdx + 56]
 102e89f:	48 89 82 80 00 00 00 	mov	qword ptr [rdx + 128], rax
 102e8a6:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102e8aa:	48 b8 00 00 00 00 06 00 00 00 	movabs	rax, 25769803776
 102e8b4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102e8b9:	e8 52 ea ff ff 	call	-5550 <_runtime.casgstatus>
 102e8be:	83 3d 3b 90 0c 00 00 	cmp	dword ptr [rip + 823355], 0
 102e8c5:	0f 85 bc 00 00 00 	jne	188 <_runtime.oneNewExtraM+0x177>
 102e8cb:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102e8d0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102e8d5:	48 89 48 30 	mov	qword ptr [rax + 48], rcx
 102e8d9:	84 01 	test	byte ptr [rcx], al
 102e8db:	83 3d 1e 90 0c 00 00 	cmp	dword ptr [rip + 823326], 0
 102e8e2:	0f 85 8e 00 00 00 	jne	142 <_runtime.oneNewExtraM+0x166>
 102e8e8:	48 89 81 c0 00 00 00 	mov	qword ptr [rcx + 192], rax
 102e8ef:	ff 81 74 02 00 00 	inc	dword ptr [rcx + 628]
 102e8f5:	90 	nop
 102e8f6:	48 89 c2 	mov	rdx, rax
 102e8f9:	48 89 81 68 01 00 00 	mov	qword ptr [rcx + 360], rax
 102e900:	90 	nop
 102e901:	48 89 8a d8 00 00 00 	mov	qword ptr [rdx + 216], rcx
 102e908:	b9 01 00 00 00 	mov	ecx, 1
 102e90d:	48 8d 1d 4c fd 09 00 	lea	rbx, [rip + 654668]
 102e914:	f0 	lock
 102e915:	48 0f c1 0b 	xadd	qword ptr [rbx], rcx
 102e919:	48 ff c1 	inc	rcx
 102e91c:	48 89 8a 98 00 00 00 	mov	qword ptr [rdx + 152], rcx
 102e923:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102e927:	e8 74 d8 ff ff 	call	-10124 <_runtime.allgadd>
 102e92c:	b8 01 00 00 00 	mov	eax, 1
 102e931:	48 8d 0d 70 fd 09 00 	lea	rcx, [rip + 654704]
 102e938:	f0 	lock
 102e939:	0f c1 01 	xadd	dword ptr [rcx], eax
 102e93c:	c6 04 24 01 	mov	byte ptr [rsp], 1
 102e940:	e8 ab 01 00 00 	call	427 <_runtime.lockextra>
 102e945:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102e94a:	90 	nop
 102e94b:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102e950:	48 89 81 58 01 00 00 	mov	qword ptr [rcx + 344], rax
 102e957:	ff 05 27 8e 0c 00 	inc	dword ptr [rip + 822823]
 102e95d:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 102e962:	48 8d 05 bf 8e 0c 00 	lea	rax, [rip + 822975]
 102e969:	48 87 08 	xchg	qword ptr [rax], rcx
 102e96c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102e971:	48 83 c4 38 	add	rsp, 56
 102e975:	c3 	ret
 102e976:	48 8d b9 c0 00 00 00 	lea	rdi, [rcx + 192]
 102e97d:	e8 5e 40 02 00 	call	147550 <_runtime.gcWriteBarrier>
 102e982:	e9 68 ff ff ff 	jmp	-152 <_runtime.oneNewExtraM+0xdf>
 102e987:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 102e98c:	48 8d 7a 30 	lea	rdi, [rdx + 48]
 102e990:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102e995:	e8 46 40 02 00 	call	147526 <_runtime.gcWriteBarrier>
 102e99a:	48 89 d0 	mov	rax, rdx
 102e99d:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102e9a2:	e9 32 ff ff ff 	jmp	-206 <_runtime.oneNewExtraM+0xc9>
 102e9a7:	e8 24 22 02 00 	call	139812 <_runtime.morestack_noctxt>
 102e9ac:	e9 5f fe ff ff 	jmp	-417 <_runtime.oneNewExtraM>
 102e9b1:	cc 	int3
 102e9b2:	cc 	int3
 102e9b3:	cc 	int3
 102e9b4:	cc 	int3
 102e9b5:	cc 	int3
 102e9b6:	cc 	int3
 102e9b7:	cc 	int3
 102e9b8:	cc 	int3
 102e9b9:	cc 	int3
 102e9ba:	cc 	int3
 102e9bb:	cc 	int3
 102e9bc:	cc 	int3
 102e9bd:	cc 	int3
 102e9be:	cc 	int3
 102e9bf:	cc 	int3

_runtime.dropm:
 102e9c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102e9c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102e9cd:	0f 86 08 01 00 00 	jbe	264 <_runtime.dropm+0x11b>
 102e9d3:	48 83 ec 38 	sub	rsp, 56
 102e9d7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102e9dc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102e9e1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102e9ea:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102e9ee:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102e9f3:	48 8b 88 c0 00 00 00 	mov	rcx, qword ptr [rax + 192]
 102e9fa:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102e9fe:	48 b9 03 00 00 00 06 00 00 00 	movabs	rcx, 25769803779
 102ea08:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102ea0d:	e8 fe e8 ff ff 	call	-5890 <_runtime.casgstatus>
 102ea12:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102ea17:	48 8b 88 c0 00 00 00 	mov	rcx, qword ptr [rax + 192]
 102ea1e:	c6 81 b2 00 00 00 00 	mov	byte ptr [rcx + 178], 0
 102ea25:	b9 01 00 00 00 	mov	ecx, 1
 102ea2a:	48 8d 15 77 fc 09 00 	lea	rdx, [rip + 654455]
 102ea31:	f0 	lock
 102ea32:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 102ea35:	8b 88 80 00 00 00 	mov	ecx, dword ptr [rax + 128]
 102ea3b:	89 4c 24 18 	mov	dword ptr [rsp + 24], ecx
 102ea3f:	90 	nop
 102ea40:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102ea47:	48 8d 15 1a c7 09 00 	lea	rdx, [rip + 640794]
 102ea4e:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102ea53:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102ea5c:	e8 af 49 01 00 	call	84399 <_runtime.sigprocmask>
 102ea61:	90 	nop
 102ea62:	e8 19 de 00 00 	call	56857 <_runtime.unminitSignals>
 102ea67:	c6 04 24 01 	mov	byte ptr [rsp], 1
 102ea6b:	e8 80 00 00 00 	call	128 <_runtime.lockextra>
 102ea70:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102ea75:	ff 05 09 8d 0c 00 	inc	dword ptr [rip + 822537]
 102ea7b:	90 	nop
 102ea7c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102ea81:	48 89 81 58 01 00 00 	mov	qword ptr [rcx + 344], rax
 102ea88:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 102ea90:	e8 7b 38 02 00 	call	145531 <_runtime.setg>
 102ea95:	90 	nop
 102ea96:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102ea9b:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102eaa0:	48 8d 0d 81 8d 0c 00 	lea	rcx, [rip + 822657]
 102eaa7:	48 87 01 	xchg	qword ptr [rcx], rax
 102eaaa:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 102eaae:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 102eab2:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 102eab9:	48 8d 44 24 1c 	lea	rax, [rsp + 28]
 102eabe:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102eac3:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 102eacc:	e8 3f 49 01 00 	call	84287 <_runtime.sigprocmask>
 102ead1:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102ead6:	48 83 c4 38 	add	rsp, 56
 102eada:	c3 	ret
 102eadb:	e8 f0 20 02 00 	call	139504 <_runtime.morestack_noctxt>
 102eae0:	e9 db fe ff ff 	jmp	-293 <_runtime.dropm>
 102eae5:	cc 	int3
 102eae6:	cc 	int3
 102eae7:	cc 	int3
 102eae8:	cc 	int3
 102eae9:	cc 	int3
 102eaea:	cc 	int3
 102eaeb:	cc 	int3
 102eaec:	cc 	int3
 102eaed:	cc 	int3
 102eaee:	cc 	int3
 102eaef:	cc 	int3

_runtime.lockextra:
 102eaf0:	48 83 ec 18 	sub	rsp, 24
 102eaf4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102eaf9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102eafe:	0f b6 4c 24 20 	movzx	ecx, byte ptr [rsp + 32]
 102eb03:	31 c0 	xor	eax, eax
 102eb05:	eb 07 	jmp	7 <_runtime.lockextra+0x1e>
 102eb07:	0f b6 5c 24 20 	movzx	ebx, byte ptr [rsp + 32]
 102eb0c:	89 d9 	mov	ecx, ebx
 102eb0e:	88 44 24 0f 	mov	byte ptr [rsp + 15], al
 102eb12:	48 8b 1d 0f 8d 0c 00 	mov	rbx, qword ptr [rip + 822543]
 102eb19:	48 83 fb 01 	cmp	rbx, 1
 102eb1d:	74 75 	je	117 <_runtime.lockextra+0xa4>
 102eb1f:	48 85 db 	test	rbx, rbx
 102eb22:	75 04 	jne	4 <_runtime.lockextra+0x38>
 102eb24:	84 c9 	test	cl, cl
 102eb26:	74 43 	je	67 <_runtime.lockextra+0x7b>
 102eb28:	48 89 d8 	mov	rax, rbx
 102eb2b:	48 8d 35 f6 8c 0c 00 	lea	rsi, [rip + 822518]
 102eb32:	bf 01 00 00 00 	mov	edi, 1
 102eb37:	f0 	lock
 102eb38:	48 0f b1 3e 	cmpxchg	qword ptr [rsi], rdi
 102eb3c:	41 0f 94 c0 	sete	r8b
 102eb40:	45 84 c0 	test	r8b, r8b
 102eb43:	75 17 	jne	23 <_runtime.lockextra+0x6c>
 102eb45:	48 8b 05 fc 8d 04 00 	mov	rax, qword ptr [rip + 298492]
 102eb4c:	48 8d 15 f5 8d 04 00 	lea	rdx, [rip + 298485]
 102eb53:	ff d0 	call	rax
 102eb55:	0f b6 44 24 0f 	movzx	eax, byte ptr [rsp + 15]
 102eb5a:	eb ab 	jmp	-85 <_runtime.lockextra+0x17>
 102eb5c:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 102eb61:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102eb66:	48 83 c4 18 	add	rsp, 24
 102eb6a:	c3 	ret
 102eb6b:	84 c0 	test	al, al
 102eb6d:	74 13 	je	19 <_runtime.lockextra+0x92>
 102eb6f:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102eb76:	e8 65 46 01 00 	call	83557 <_runtime.usleep>
 102eb7b:	b8 01 00 00 00 	mov	eax, 1
 102eb80:	eb 85 	jmp	-123 <_runtime.lockextra+0x17>
 102eb82:	b8 01 00 00 00 	mov	eax, 1
 102eb87:	48 8d 15 fa 8b 0c 00 	lea	rdx, [rip + 822266]
 102eb8e:	f0 	lock
 102eb8f:	0f c1 02 	xadd	dword ptr [rdx], eax
 102eb92:	eb db 	jmp	-37 <_runtime.lockextra+0x7f>
 102eb94:	48 8b 05 ad 8d 04 00 	mov	rax, qword ptr [rip + 298413]
 102eb9b:	48 8d 15 a6 8d 04 00 	lea	rdx, [rip + 298406]
 102eba2:	ff d0 	call	rax
 102eba4:	0f b6 44 24 0f 	movzx	eax, byte ptr [rsp + 15]
 102eba9:	e9 59 ff ff ff 	jmp	-167 <_runtime.lockextra+0x17>
 102ebae:	cc 	int3
 102ebaf:	cc 	int3

_runtime.newm:
 102ebb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ebb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102ebbd:	0f 86 0e 01 00 00 	jbe	270 <_runtime.newm+0x121>
 102ebc3:	48 83 ec 28 	sub	rsp, 40
 102ebc7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102ebcc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102ebd1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 102ebd6:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ebda:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 102ebdf:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102ebe4:	e8 a7 f7 ff ff 	call	-2137 <_runtime.allocm>
 102ebe9:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102ebee:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 102ebf3:	48 89 88 d8 00 00 00 	mov	qword ptr [rax + 216], rcx
 102ebfa:	8b 0d a4 8b 0c 00 	mov	ecx, dword ptr [rip + 822180]
 102ec00:	89 88 80 00 00 00 	mov	dword ptr [rax + 128], ecx
 102ec06:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ec0f:	48 85 c9 	test	rcx, rcx
 102ec12:	74 20 	je	32 <_runtime.newm+0x84>
 102ec14:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 102ec18:	48 85 c9 	test	rcx, rcx
 102ec1b:	74 17 	je	23 <_runtime.newm+0x84>
 102ec1d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 102ec22:	83 b9 70 02 00 00 00 	cmp	dword ptr [rcx + 624], 0
 102ec29:	75 1c 	jne	28 <_runtime.newm+0x97>
 102ec2b:	80 b9 18 01 00 00 00 	cmp	byte ptr [rcx + 280], 0
 102ec32:	75 13 	jne	19 <_runtime.newm+0x97>
 102ec34:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ec38:	e8 a3 00 00 00 	call	163 <_runtime.newm1>
 102ec3d:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102ec42:	48 83 c4 28 	add	rsp, 40
 102ec46:	c3 	ret
 102ec47:	48 8d 05 f2 8c 0c 00 	lea	rax, [rip + 822514]
 102ec4e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ec52:	e8 d9 94 fd ff 	call	-158503 <_runtime.lock>
 102ec57:	83 3d 02 8d 0c 00 00 	cmp	dword ptr [rip + 822530], 0
 102ec5e:	74 57 	je	87 <_runtime.newm+0x107>
 102ec60:	48 8b 05 e1 8c 0c 00 	mov	rax, qword ptr [rip + 822497]
 102ec67:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102ec6c:	48 89 81 58 01 00 00 	mov	qword ptr [rcx + 344], rax
 102ec73:	90 	nop
 102ec74:	48 89 0d cd 8c 0c 00 	mov	qword ptr [rip + 822477], rcx
 102ec7b:	80 3d ce 8c 0c 00 00 	cmp	byte ptr [rip + 822478], 0
 102ec82:	75 1a 	jne	26 <_runtime.newm+0xee>
 102ec84:	48 8d 05 b5 8c 0c 00 	lea	rax, [rip + 822453]
 102ec8b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ec8f:	e8 7c 96 fd ff 	call	-158084 <_runtime.unlock>
 102ec94:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102ec99:	48 83 c4 28 	add	rsp, 40
 102ec9d:	c3 	ret
 102ec9e:	c6 05 ab 8c 0c 00 00 	mov	byte ptr [rip + 822443], 0
 102eca5:	48 8d 05 ac 8c 0c 00 	lea	rax, [rip + 822444]
 102ecac:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ecb0:	e8 3b 97 fd ff 	call	-157893 <_runtime.notewakeup>
 102ecb5:	eb cd 	jmp	-51 <_runtime.newm+0xd4>
 102ecb7:	48 8d 05 6a 7d 04 00 	lea	rax, [rip + 294250]
 102ecbe:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ecc2:	48 c7 44 24 08 2a 00 00 00 	mov	qword ptr [rsp + 8], 42
 102eccb:	e8 90 a0 ff ff 	call	-24432 <_runtime.throw>
 102ecd0:	90 	nop
 102ecd1:	e8 fa 1e 02 00 	call	139002 <_runtime.morestack_noctxt>
 102ecd6:	e9 d5 fe ff ff 	jmp	-299 <_runtime.newm>
 102ecdb:	cc 	int3
 102ecdc:	cc 	int3
 102ecdd:	cc 	int3
 102ecde:	cc 	int3
 102ecdf:	cc 	int3

_runtime.newm1:
 102ece0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ece9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102eced:	0f 86 fd 00 00 00 	jbe	253 <_runtime.newm1+0x110>
 102ecf3:	48 83 ec 38 	sub	rsp, 56
 102ecf7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102ecfc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102ed01:	80 3d 62 8a 0c 00 00 	cmp	byte ptr [rip + 821858], 0
 102ed08:	0f 84 90 00 00 00 	je	144 <_runtime.newm1+0xbe>
 102ed0e:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 102ed17:	0f 57 c0 	xorps	xmm0, xmm0
 102ed1a:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 102ed1f:	48 83 3d b1 f4 09 00 00 	cmp	qword ptr [rip + 652465], 0
 102ed27:	0f 84 a9 00 00 00 	je	169 <_runtime.newm1+0xf6>
 102ed2d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102ed32:	48 8b 08 	mov	rcx, qword ptr [rax]
 102ed35:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 102ed3a:	48 05 88 00 00 00 	add	rax, 136
 102ed40:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102ed45:	48 8d 05 d4 8b 04 00 	lea	rax, [rip + 297940]
 102ed4c:	84 00 	test	byte ptr [rax], al
 102ed4e:	48 8b 05 cb 8b 04 00 	mov	rax, qword ptr [rip + 297931]
 102ed55:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102ed5a:	48 8d 05 5f 8c 0c 00 	lea	rax, [rip + 822367]
 102ed61:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ed65:	e8 76 a2 00 00 	call	41590 <_runtime.(*rwmutex).rlock>
 102ed6a:	48 8b 05 67 f4 09 00 	mov	rax, qword ptr [rip + 652391]
 102ed71:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ed75:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 102ed7a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102ed7f:	e8 cc 34 02 00 	call	144588 <_runtime.asmcgocall>
 102ed84:	48 8d 05 35 8c 0c 00 	lea	rax, [rip + 822325]
 102ed8b:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ed8f:	e8 dc a2 00 00 	call	41692 <_runtime.(*rwmutex).runlock>
 102ed94:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102ed99:	48 83 c4 38 	add	rsp, 56
 102ed9d:	c3 	ret
 102ed9e:	48 8d 05 1b 8c 0c 00 	lea	rax, [rip + 822299]
 102eda5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102eda9:	e8 32 a2 00 00 	call	41522 <_runtime.(*rwmutex).rlock>
 102edae:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 102edb3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102edb7:	e8 94 77 ff ff 	call	-34924 <_runtime.newosproc>
 102edbc:	48 8d 05 fd 8b 0c 00 	lea	rax, [rip + 822269]
 102edc3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102edc7:	e8 a4 a2 00 00 	call	41636 <_runtime.(*rwmutex).runlock>
 102edcc:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102edd1:	48 83 c4 38 	add	rsp, 56
 102edd5:	c3 	ret
 102edd6:	48 8d 05 0a 5e 04 00 	lea	rax, [rip + 286218]
 102eddd:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ede1:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 102edea:	e8 71 9f ff ff 	call	-24719 <_runtime.throw>
 102edef:	90 	nop
 102edf0:	e8 db 1d 02 00 	call	138715 <_runtime.morestack_noctxt>
 102edf5:	e9 e6 fe ff ff 	jmp	-282 <_runtime.newm1>
 102edfa:	cc 	int3
 102edfb:	cc 	int3
 102edfc:	cc 	int3
 102edfd:	cc 	int3
 102edfe:	cc 	int3
 102edff:	cc 	int3

_runtime.templateThread:
 102ee00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ee09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102ee0d:	0f 86 f1 00 00 00 	jbe	241 <_runtime.templateThread+0x104>
 102ee13:	48 83 ec 18 	sub	rsp, 24
 102ee17:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102ee1c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102ee21:	48 8d 05 50 f8 09 00 	lea	rax, [rip + 653392]
 102ee28:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ee2c:	e8 ff 92 fd ff 	call	-158977 <_runtime.lock>
 102ee31:	ff 05 65 f8 09 00 	inc	dword ptr [rip + 653413]
 102ee37:	e8 b4 66 00 00 	call	26292 <_runtime.checkdead>
 102ee3c:	48 8d 05 35 f8 09 00 	lea	rax, [rip + 653365]
 102ee43:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ee47:	e8 c4 94 fd ff 	call	-158524 <_runtime.unlock>
 102ee4c:	e9 a1 00 00 00 	jmp	161 <_runtime.templateThread+0xf2>
 102ee51:	48 8b 88 58 01 00 00 	mov	rcx, qword ptr [rax + 344]
 102ee58:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 102ee5d:	48 c7 80 58 01 00 00 00 00 00 00 	mov	qword ptr [rax + 344], 0
 102ee68:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ee6c:	e8 6f fe ff ff 	call	-401 <_runtime.newm1>
 102ee71:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102ee76:	48 85 c0 	test	rax, rax
 102ee79:	75 d6 	jne	-42 <_runtime.templateThread+0x51>
 102ee7b:	48 8d 05 be 8a 0c 00 	lea	rax, [rip + 821950]
 102ee82:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ee86:	e8 a5 92 fd ff 	call	-159067 <_runtime.lock>
 102ee8b:	48 8b 05 b6 8a 0c 00 	mov	rax, qword ptr [rip + 821942]
 102ee92:	48 85 c0 	test	rax, rax
 102ee95:	74 28 	je	40 <_runtime.templateThread+0xbf>
 102ee97:	90 	nop
 102ee98:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102ee9d:	48 c7 05 a0 8a 0c 00 00 00 00 00 	mov	qword ptr [rip + 821920], 0
 102eea8:	48 8d 0d 91 8a 0c 00 	lea	rcx, [rip + 821905]
 102eeaf:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102eeb3:	e8 58 94 fd ff 	call	-158632 <_runtime.unlock>
 102eeb8:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102eebd:	eb b7 	jmp	-73 <_runtime.templateThread+0x76>
 102eebf:	c6 05 8a 8a 0c 00 01 	mov	byte ptr [rip + 821898], 1
 102eec6:	90 	nop
 102eec7:	48 c7 05 86 8a 0c 00 00 00 00 00 	mov	qword ptr [rip + 821894], 0
 102eed2:	48 8d 05 67 8a 0c 00 	lea	rax, [rip + 821863]
 102eed9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102eedd:	e8 2e 94 fd ff 	call	-158674 <_runtime.unlock>
 102eee2:	48 8d 05 6f 8a 0c 00 	lea	rax, [rip + 821871]
 102eee9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102eeed:	e8 7e 95 fd ff 	call	-158338 <_runtime.notesleep>
 102eef2:	48 8d 05 47 8a 0c 00 	lea	rax, [rip + 821831]
 102eef9:	48 89 04 24 	mov	qword ptr [rsp], rax
 102eefd:	e8 2e 92 fd ff 	call	-159186 <_runtime.lock>
 102ef02:	eb 87 	jmp	-121 <_runtime.templateThread+0x8b>
 102ef04:	e8 c7 1c 02 00 	call	138439 <_runtime.morestack_noctxt>
 102ef09:	e9 f2 fe ff ff 	jmp	-270 <_runtime.templateThread>
 102ef0e:	cc 	int3
 102ef0f:	cc 	int3

_runtime.stopm:
 102ef10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102ef19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102ef1d:	0f 86 3f 01 00 00 	jbe	319 <_runtime.stopm+0x152>
 102ef23:	48 83 ec 20 	sub	rsp, 32
 102ef27:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102ef2c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102ef31:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102ef3a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102ef3e:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 102ef45:	0f 85 fd 00 00 00 	jne	253 <_runtime.stopm+0x138>
 102ef4b:	48 83 b9 d0 00 00 00 00 	cmp	qword ptr [rcx + 208], 0
 102ef53:	0f 85 d6 00 00 00 	jne	214 <_runtime.stopm+0x11f>
 102ef59:	80 b9 14 01 00 00 00 	cmp	byte ptr [rcx + 276], 0
 102ef60:	0f 85 b0 00 00 00 	jne	176 <_runtime.stopm+0x106>
 102ef66:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102ef6b:	48 8d 05 06 f7 09 00 	lea	rax, [rip + 653062]
 102ef72:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ef76:	e8 b5 91 fd ff 	call	-159307 <_runtime.lock>
 102ef7b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102ef80:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102ef84:	48 8b 15 f5 f6 09 00 	mov	rdx, qword ptr [rip + 653045]
 102ef8b:	48 89 91 58 01 00 00 	mov	qword ptr [rcx + 344], rdx
 102ef92:	90 	nop
 102ef93:	48 89 0d e6 f6 09 00 	mov	qword ptr [rip + 653030], rcx
 102ef9a:	ff 05 e8 f6 09 00 	inc	dword ptr [rip + 653032]
 102efa0:	e8 4b 65 00 00 	call	25931 <_runtime.checkdead>
 102efa5:	48 8d 05 cc f6 09 00 	lea	rax, [rip + 653004]
 102efac:	48 89 04 24 	mov	qword ptr [rsp], rax
 102efb0:	e8 5b 93 fd ff 	call	-158885 <_runtime.unlock>
 102efb5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102efba:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102efbe:	84 01 	test	byte ptr [rcx], al
 102efc0:	48 81 c1 48 01 00 00 	add	rcx, 328
 102efc7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102efcb:	e8 a0 94 fd ff 	call	-158560 <_runtime.notesleep>
 102efd0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102efd5:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102efd9:	48 c7 81 48 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 328], 0
 102efe4:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102efe8:	48 8b 89 d8 00 00 00 	mov	rcx, qword ptr [rcx + 216]
 102efef:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102eff3:	e8 a8 60 00 00 	call	24744 <_runtime.acquirep>
 102eff8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102effd:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102f001:	48 c7 80 d8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 216], 0
 102f00c:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102f011:	48 83 c4 20 	add	rsp, 32
 102f015:	c3 	ret
 102f016:	48 8d 05 cf 48 04 00 	lea	rax, [rip + 280783]
 102f01d:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f021:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 102f02a:	e8 31 9d ff ff 	call	-25295 <_runtime.throw>
 102f02f:	48 8d 05 ed 49 04 00 	lea	rax, [rip + 281069]
 102f036:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f03a:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 102f043:	e8 18 9d ff ff 	call	-25320 <_runtime.throw>
 102f048:	48 8d 05 80 50 04 00 	lea	rax, [rip + 282752]
 102f04f:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f053:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102f05c:	e8 ff 9c ff ff 	call	-25345 <_runtime.throw>
 102f061:	90 	nop
 102f062:	e8 69 1b 02 00 	call	138089 <_runtime.morestack_noctxt>
 102f067:	e9 a4 fe ff ff 	jmp	-348 <_runtime.stopm>
 102f06c:	cc 	int3
 102f06d:	cc 	int3
 102f06e:	cc 	int3
 102f06f:	cc 	int3

_runtime.mspinning:
 102f070:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102f079:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102f07d:	c6 80 14 01 00 00 01 	mov	byte ptr [rax + 276], 1
 102f084:	c3 	ret
 102f085:	cc 	int3
 102f086:	cc 	int3
 102f087:	cc 	int3
 102f088:	cc 	int3
 102f089:	cc 	int3
 102f08a:	cc 	int3
 102f08b:	cc 	int3
 102f08c:	cc 	int3
 102f08d:	cc 	int3
 102f08e:	cc 	int3
 102f08f:	cc 	int3

_runtime.startm:
 102f090:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102f099:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102f09d:	0f 86 f0 01 00 00 	jbe	496 <_runtime.startm+0x203>
 102f0a3:	48 83 ec 28 	sub	rsp, 40
 102f0a7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 102f0ac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 102f0b1:	48 8d 05 c0 f5 09 00 	lea	rax, [rip + 652736]
 102f0b8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f0bc:	e8 6f 90 fd ff 	call	-159633 <_runtime.lock>
 102f0c1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102f0c6:	48 85 c0 	test	rax, rax
 102f0c9:	0f 84 f5 00 00 00 	je	245 <_runtime.startm+0x134>
 102f0cf:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102f0d4:	90 	nop
 102f0d5:	48 8b 0d a4 f5 09 00 	mov	rcx, qword ptr [rip + 652708]
 102f0dc:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 102f0e1:	48 85 c9 	test	rcx, rcx
 102f0e4:	74 14 	je	20 <_runtime.startm+0x6a>
 102f0e6:	48 8b 91 58 01 00 00 	mov	rdx, qword ptr [rcx + 344]
 102f0ed:	48 89 15 8c f5 09 00 	mov	qword ptr [rip + 652684], rdx
 102f0f4:	ff 0d 8e f5 09 00 	dec	dword ptr [rip + 652686]
 102f0fa:	48 8d 05 77 f5 09 00 	lea	rax, [rip + 652663]
 102f101:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f105:	e8 06 92 fd ff 	call	-159226 <_runtime.unlock>
 102f10a:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102f10f:	48 85 c0 	test	rax, rax
 102f112:	74 7b 	je	123 <_runtime.startm+0xff>
 102f114:	80 b8 14 01 00 00 00 	cmp	byte ptr [rax + 276], 0
 102f11b:	0f 85 3f 01 00 00 	jne	319 <_runtime.startm+0x1d0>
 102f121:	48 83 b8 d8 00 00 00 00 	cmp	qword ptr [rax + 216], 0
 102f129:	0f 85 18 01 00 00 	jne	280 <_runtime.startm+0x1b7>
 102f12f:	0f b6 4c 24 38 	movzx	ecx, byte ptr [rsp + 56]
 102f134:	84 c9 	test	cl, cl
 102f136:	75 35 	jne	53 <_runtime.startm+0xdd>
 102f138:	31 d2 	xor	edx, edx
 102f13a:	84 d2 	test	dl, dl
 102f13c:	0f 85 ec 00 00 00 	jne	236 <_runtime.startm+0x19e>
 102f142:	88 88 14 01 00 00 	mov	byte ptr [rax + 276], cl
 102f148:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102f14d:	48 89 88 d8 00 00 00 	mov	qword ptr [rax + 216], rcx
 102f154:	48 05 48 01 00 00 	add	rax, 328
 102f15a:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f15e:	e8 8d 92 fd ff 	call	-159091 <_runtime.notewakeup>
 102f163:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102f168:	48 83 c4 28 	add	rsp, 40
 102f16c:	c3 	ret
 102f16d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102f172:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f176:	e8 55 7f 00 00 	call	32597 <_runtime.runqempty>
 102f17b:	0f b6 54 24 08 	movzx	edx, byte ptr [rsp + 8]
 102f180:	83 f2 01 	xor	edx, 1
 102f183:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102f188:	0f b6 4c 24 38 	movzx	ecx, byte ptr [rsp + 56]
 102f18d:	eb ab 	jmp	-85 <_runtime.startm+0xaa>
 102f18f:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 102f194:	48 85 c0 	test	rax, rax
 102f197:	b8 00 00 00 00 	mov	eax, 0
 102f19c:	48 8d 0d 6d 87 04 00 	lea	rcx, [rip + 296813]
 102f1a3:	48 0f 45 c1 	cmovne	rax, rcx
 102f1a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f1ab:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102f1b0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102f1b5:	e8 f6 f9 ff ff 	call	-1546 <_runtime.newm>
 102f1ba:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102f1bf:	48 83 c4 28 	add	rsp, 40
 102f1c3:	c3 	ret
 102f1c4:	90 	nop
 102f1c5:	48 8b 05 e4 f4 09 00 	mov	rax, qword ptr [rip + 652516]
 102f1cc:	48 85 c0 	test	rax, rax
 102f1cf:	74 1e 	je	30 <_runtime.startm+0x15f>
 102f1d1:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102f1d5:	48 89 0d d4 f4 09 00 	mov	qword ptr [rip + 652500], rcx
 102f1dc:	b9 ff ff ff ff 	mov	ecx, 4294967295
 102f1e1:	48 8d 15 d0 f4 09 00 	lea	rdx, [rip + 652496]
 102f1e8:	f0 	lock
 102f1e9:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 102f1ec:	48 85 c0 	test	rax, rax
 102f1ef:	0f 85 da fe ff ff 	jne	-294 <_runtime.startm+0x3f>
 102f1f5:	48 8d 05 7c f4 09 00 	lea	rax, [rip + 652412]
 102f1fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f200:	e8 0b 91 fd ff 	call	-159477 <_runtime.unlock>
 102f205:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 102f20a:	84 c0 	test	al, al
 102f20c:	74 16 	je	22 <_runtime.startm+0x194>
 102f20e:	b8 ff ff ff ff 	mov	eax, 4294967295
 102f213:	48 8d 0d a2 f4 09 00 	lea	rcx, [rip + 652450]
 102f21a:	f0 	lock
 102f21b:	0f c1 01 	xadd	dword ptr [rcx], eax
 102f21e:	ff c8 	dec	eax
 102f220:	85 c0 	test	eax, eax
 102f222:	7c 55 	jl	85 <_runtime.startm+0x1e9>
 102f224:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 102f229:	48 83 c4 28 	add	rsp, 40
 102f22d:	c3 	ret
 102f22e:	48 8d 05 29 5b 04 00 	lea	rax, [rip + 285481]
 102f235:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f239:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 102f242:	e8 19 9b ff ff 	call	-25831 <_runtime.throw>
 102f247:	48 8d 05 c6 47 04 00 	lea	rax, [rip + 280518]
 102f24e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f252:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 102f25b:	e8 00 9b ff ff 	call	-25856 <_runtime.throw>
 102f260:	48 8d 05 5d 52 04 00 	lea	rax, [rip + 283229]
 102f267:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f26b:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 102f274:	e8 e7 9a ff ff 	call	-25881 <_runtime.throw>
 102f279:	48 8d 05 1c 5f 04 00 	lea	rax, [rip + 286492]
 102f280:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f284:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 102f28d:	e8 ce 9a ff ff 	call	-25906 <_runtime.throw>
 102f292:	90 	nop
 102f293:	e8 38 19 02 00 	call	137528 <_runtime.morestack_noctxt>
 102f298:	e9 f3 fd ff ff 	jmp	-525 <_runtime.startm>
 102f29d:	cc 	int3
 102f29e:	cc 	int3
 102f29f:	cc 	int3

_runtime.handoffp:
 102f2a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102f2a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102f2ad:	0f 86 15 03 00 00 	jbe	789 <_runtime.handoffp+0x328>
 102f2b3:	48 83 ec 18 	sub	rsp, 24
 102f2b7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 102f2bc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 102f2c1:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f2c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f2ca:	e8 01 7e 00 00 	call	32257 <_runtime.runqempty>
 102f2cf:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 102f2d4:	74 09 	je	9 <_runtime.handoffp+0x3f>
 102f2d6:	83 3d f3 f3 09 00 00 	cmp	dword ptr [rip + 652275], 0
 102f2dd:	74 1d 	je	29 <_runtime.handoffp+0x5c>
 102f2df:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f2e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f2e8:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 102f2ed:	e8 9e fd ff ff 	call	-610 <_runtime.startm>
 102f2f2:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f2f7:	48 83 c4 18 	add	rsp, 24
 102f2fb:	c3 	ret
 102f2fc:	83 3d 8d 84 0c 00 00 	cmp	dword ptr [rip + 820365], 0
 102f303:	0f 84 b3 02 00 00 	je	691 <_runtime.handoffp+0x31c>
 102f309:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f30e:	48 85 c9 	test	rcx, rcx
 102f311:	74 29 	je	41 <_runtime.handoffp+0x9c>
 102f313:	48 8b 91 98 16 00 00 	mov	rdx, qword ptr [rcx + 5784]
 102f31a:	48 85 d2 	test	rdx, rdx
 102f31d:	74 1d 	je	29 <_runtime.handoffp+0x9c>
 102f31f:	48 83 7a 10 00 	cmp	qword ptr [rdx + 16], 0
 102f324:	0f 85 88 02 00 00 	jne	648 <_runtime.handoffp+0x312>
 102f32a:	48 8b 91 a0 16 00 00 	mov	rdx, qword ptr [rcx + 5792]
 102f331:	48 83 7a 10 00 	cmp	qword ptr [rdx + 16], 0
 102f336:	0f 85 76 02 00 00 	jne	630 <_runtime.handoffp+0x312>
 102f33c:	48 8b 15 fd f5 09 00 	mov	rdx, qword ptr [rip + 652797]
 102f343:	48 85 d2 	test	rdx, rdx
 102f346:	0f 85 5c 02 00 00 	jne	604 <_runtime.handoffp+0x308>
 102f34c:	8b 15 7a f6 09 00 	mov	edx, dword ptr [rip + 652922]
 102f352:	39 15 70 f6 09 00 	cmp	dword ptr [rip + 652912], edx
 102f358:	0f 83 43 02 00 00 	jae	579 <_runtime.handoffp+0x301>
 102f35e:	b8 01 00 00 00 	mov	eax, 1
 102f363:	84 c0 	test	al, al
 102f365:	0f 85 1e 02 00 00 	jne	542 <_runtime.handoffp+0x2e9>
 102f36b:	8b 15 4b f3 09 00 	mov	edx, dword ptr [rip + 652107]
 102f371:	8b 1d 41 f3 09 00 	mov	ebx, dword ptr [rip + 652097]
 102f377:	01 da 	add	edx, ebx
 102f379:	85 d2 	test	edx, edx
 102f37b:	0f 85 fc 01 00 00 	jne	508 <_runtime.handoffp+0x2dd>
 102f381:	31 c0 	xor	eax, eax
 102f383:	48 8d 15 32 f3 09 00 	lea	rdx, [rip + 652082]
 102f38a:	bb 01 00 00 00 	mov	ebx, 1
 102f38f:	f0 	lock
 102f390:	0f b1 1a 	cmpxchg	dword ptr [rdx], ebx
 102f393:	0f 94 c2 	sete	dl
 102f396:	84 d2 	test	dl, dl
 102f398:	0f 85 c7 01 00 00 	jne	455 <_runtime.handoffp+0x2c5>
 102f39e:	48 8d 05 d3 f2 09 00 	lea	rax, [rip + 651987]
 102f3a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f3a9:	e8 82 8d fd ff 	call	-160382 <_runtime.lock>
 102f3ae:	83 3d ab f3 09 00 00 	cmp	dword ptr [rip + 652203], 0
 102f3b5:	74 4c 	je	76 <_runtime.handoffp+0x163>
 102f3b7:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f3bc:	c7 40 04 03 00 00 00 	mov	dword ptr [rax + 4], 3
 102f3c3:	8b 05 9b f3 09 00 	mov	eax, dword ptr [rip + 652187]
 102f3c9:	8d 48 ff 	lea	ecx, [rax - 1]
 102f3cc:	89 0d 92 f3 09 00 	mov	dword ptr [rip + 652178], ecx
 102f3d2:	83 f8 01 	cmp	eax, 1
 102f3d5:	74 1a 	je	26 <_runtime.handoffp+0x151>
 102f3d7:	48 8d 05 9a f2 09 00 	lea	rax, [rip + 651930]
 102f3de:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f3e2:	e8 29 8f fd ff 	call	-159959 <_runtime.unlock>
 102f3e7:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f3ec:	48 83 c4 18 	add	rsp, 24
 102f3f0:	c3 	ret
 102f3f1:	48 8d 05 70 f3 09 00 	lea	rax, [rip + 652144]
 102f3f8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f3fc:	e8 ef 8f fd ff 	call	-159761 <_runtime.notewakeup>
 102f401:	eb d4 	jmp	-44 <_runtime.handoffp+0x137>
 102f403:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f408:	84 01 	test	byte ptr [rcx], al
 102f40a:	83 b9 60 27 00 00 00 	cmp	dword ptr [rcx + 10080], 0
 102f411:	0f 84 47 01 00 00 	je	327 <_runtime.handoffp+0x2be>
 102f417:	b8 01 00 00 00 	mov	eax, 1
 102f41c:	31 db 	xor	ebx, ebx
 102f41e:	f0 	lock
 102f41f:	0f b1 99 60 27 00 00 	cmpxchg	dword ptr [rcx + 10080], ebx
 102f426:	0f 94 c3 	sete	bl
 102f429:	84 db 	test	bl, bl
 102f42b:	0f 85 ed 00 00 00 	jne	237 <_runtime.handoffp+0x27e>
 102f431:	83 3d 98 f2 09 00 00 	cmp	dword ptr [rip + 651928], 0
 102f438:	0f 85 b3 00 00 00 	jne	179 <_runtime.handoffp+0x251>
 102f43e:	8b 05 5c 83 0c 00 	mov	eax, dword ptr [rip + 820060]
 102f444:	ff c8 	dec	eax
 102f446:	39 05 6c f2 09 00 	cmp	dword ptr [rip + 651884], eax
 102f44c:	0f 85 98 00 00 00 	jne	152 <_runtime.handoffp+0x24a>
 102f452:	48 8b 05 0f f2 09 00 	mov	rax, qword ptr [rip + 651791]
 102f459:	48 85 c0 	test	rax, rax
 102f45c:	0f 95 c0 	setne	al
 102f45f:	84 c0 	test	al, al
 102f461:	75 5a 	jne	90 <_runtime.handoffp+0x21d>
 102f463:	8b 81 8c 27 00 00 	mov	eax, dword ptr [rcx + 10124]
 102f469:	85 c0 	test	eax, eax
 102f46b:	77 3f 	ja	63 <_runtime.handoffp+0x20c>
 102f46d:	48 8b 81 68 16 00 00 	mov	rax, qword ptr [rcx + 5736]
 102f474:	48 85 c0 	test	rax, rax
 102f477:	75 23 	jne	35 <_runtime.handoffp+0x1fc>
 102f479:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f47d:	e8 be 7b 00 00 	call	31678 <_runtime.pidleput>
 102f482:	48 8d 05 ef f1 09 00 	lea	rax, [rip + 651759]
 102f489:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f48d:	e8 7e 8e fd ff 	call	-160130 <_runtime.unlock>
 102f492:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f497:	48 83 c4 18 	add	rsp, 24
 102f49b:	c3 	ret
 102f49c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f4a0:	e8 cb 16 00 00 	call	5835 <_runtime.wakeNetPoller>
 102f4a5:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f4aa:	eb cd 	jmp	-51 <_runtime.handoffp+0x1d9>
 102f4ac:	90 	nop
 102f4ad:	e8 0e 3e 01 00 	call	81422 <_runtime.nanotime1>
 102f4b2:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102f4b6:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f4bb:	eb b7 	jmp	-73 <_runtime.handoffp+0x1d4>
 102f4bd:	48 8d 05 b4 f1 09 00 	lea	rax, [rip + 651700]
 102f4c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f4c8:	e8 43 8e fd ff 	call	-160189 <_runtime.unlock>
 102f4cd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f4d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f4d6:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 102f4db:	e8 b0 fb ff ff 	call	-1104 <_runtime.startm>
 102f4e0:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f4e5:	48 83 c4 18 	add	rsp, 24
 102f4e9:	c3 	ret
 102f4ea:	31 c0 	xor	eax, eax
 102f4ec:	e9 6e ff ff ff 	jmp	-146 <_runtime.handoffp+0x1bf>
 102f4f1:	48 8d 05 80 f1 09 00 	lea	rax, [rip + 651648]
 102f4f8:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f4fc:	e8 0f 8e fd ff 	call	-160241 <_runtime.unlock>
 102f501:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f506:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f50a:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 102f50f:	e8 7c fb ff ff 	call	-1156 <_runtime.startm>
 102f514:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f519:	48 83 c4 18 	add	rsp, 24
 102f51d:	c3 	ret
 102f51e:	48 8b 15 5b f2 09 00 	mov	rdx, qword ptr [rip + 651867]
 102f525:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f529:	48 8b 02 	mov	rax, qword ptr [rdx]
 102f52c:	ff d0 	call	rax
 102f52e:	8b 05 54 f2 09 00 	mov	eax, dword ptr [rip + 651860]
 102f534:	8d 48 ff 	lea	ecx, [rax - 1]
 102f537:	89 0d 4b f2 09 00 	mov	dword ptr [rip + 651851], ecx
 102f53d:	83 f8 01 	cmp	eax, 1
 102f540:	74 0a 	je	10 <_runtime.handoffp+0x2ac>
 102f542:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f547:	e9 e5 fe ff ff 	jmp	-283 <_runtime.handoffp+0x191>
 102f54c:	48 8d 05 3d f2 09 00 	lea	rax, [rip + 651837]
 102f553:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f557:	e8 94 8e fd ff 	call	-160108 <_runtime.notewakeup>
 102f55c:	eb e4 	jmp	-28 <_runtime.handoffp+0x2a2>
 102f55e:	31 db 	xor	ebx, ebx
 102f560:	e9 c4 fe ff ff 	jmp	-316 <_runtime.handoffp+0x189>
 102f565:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f569:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 102f56e:	e8 1d fb ff ff 	call	-1251 <_runtime.startm>
 102f573:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f578:	48 83 c4 18 	add	rsp, 24
 102f57c:	c3 	ret
 102f57d:	bb 01 00 00 00 	mov	ebx, 1
 102f582:	31 d2 	xor	edx, edx
 102f584:	e9 0d fe ff ff 	jmp	-499 <_runtime.handoffp+0xf6>
 102f589:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f58d:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 102f592:	e8 f9 fa ff ff 	call	-1287 <_runtime.startm>
 102f597:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 102f59c:	48 83 c4 18 	add	rsp, 24
 102f5a0:	c3 	ret
 102f5a1:	31 c0 	xor	eax, eax
 102f5a3:	e9 bb fd ff ff 	jmp	-581 <_runtime.handoffp+0xc3>
 102f5a8:	b8 01 00 00 00 	mov	eax, 1
 102f5ad:	e9 b1 fd ff ff 	jmp	-591 <_runtime.handoffp+0xc3>
 102f5b2:	b8 01 00 00 00 	mov	eax, 1
 102f5b7:	e9 a7 fd ff ff 	jmp	-601 <_runtime.handoffp+0xc3>
 102f5bc:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f5c1:	31 c0 	xor	eax, eax
 102f5c3:	e9 9b fd ff ff 	jmp	-613 <_runtime.handoffp+0xc3>
 102f5c8:	e8 03 16 02 00 	call	136707 <_runtime.morestack_noctxt>
 102f5cd:	e9 ce fc ff ff 	jmp	-818 <_runtime.handoffp>
 102f5d2:	cc 	int3
 102f5d3:	cc 	int3
 102f5d4:	cc 	int3
 102f5d5:	cc 	int3
 102f5d6:	cc 	int3
 102f5d7:	cc 	int3
 102f5d8:	cc 	int3
 102f5d9:	cc 	int3
 102f5da:	cc 	int3
 102f5db:	cc 	int3
 102f5dc:	cc 	int3
 102f5dd:	cc 	int3
 102f5de:	cc 	int3
 102f5df:	cc 	int3

_runtime.stoplockedm:
 102f5e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102f5e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102f5ed:	0f 86 89 02 00 00 	jbe	649 <_runtime.stoplockedm+0x29c>
 102f5f3:	48 83 ec 38 	sub	rsp, 56
 102f5f7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 102f5fc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 102f601:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102f60a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102f60e:	48 8b 91 68 01 00 00 	mov	rdx, qword ptr [rcx + 360]
 102f615:	48 85 d2 	test	rdx, rdx
 102f618:	0f 84 44 02 00 00 	je	580 <_runtime.stoplockedm+0x282>
 102f61e:	48 8b 92 d8 00 00 00 	mov	rdx, qword ptr [rdx + 216]
 102f625:	48 39 ca 	cmp	rdx, rcx
 102f628:	0f 85 34 02 00 00 	jne	564 <_runtime.stoplockedm+0x282>
 102f62e:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 102f633:	48 83 b9 d0 00 00 00 00 	cmp	qword ptr [rcx + 208], 0
 102f63b:	0f 85 87 00 00 00 	jne	135 <_runtime.stoplockedm+0xe8>
 102f641:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 102f648:	e8 33 5e 00 00 	call	24115 <_runtime.incidlelocked>
 102f64d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f652:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102f656:	84 01 	test	byte ptr [rcx], al
 102f658:	48 81 c1 48 01 00 00 	add	rcx, 328
 102f65f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f663:	e8 08 8e fd ff 	call	-160248 <_runtime.notesleep>
 102f668:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f66d:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102f671:	48 c7 81 48 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 328], 0
 102f67c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102f680:	48 8b 89 68 01 00 00 	mov	rcx, qword ptr [rcx + 360]
 102f687:	8b 89 90 00 00 00 	mov	ecx, dword ptr [rcx + 144]
 102f68d:	0f ba f1 0c 	btr	ecx, 12
 102f691:	83 f9 01 	cmp	ecx, 1
 102f694:	75 41 	jne	65 <_runtime.stoplockedm+0xf7>
 102f696:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 102f69a:	48 8b 89 d8 00 00 00 	mov	rcx, qword ptr [rcx + 216]
 102f6a1:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f6a5:	e8 f6 59 00 00 	call	23030 <_runtime.acquirep>
 102f6aa:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f6af:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102f6b3:	48 c7 80 d8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 216], 0
 102f6be:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 102f6c3:	48 83 c4 38 	add	rsp, 56
 102f6c7:	c3 	ret
 102f6c8:	e8 93 5b 00 00 	call	23443 <_runtime.releasep>
 102f6cd:	e8 ce fb ff ff 	call	-1074 <_runtime.handoffp>
 102f6d2:	e9 6a ff ff ff 	jmp	-150 <_runtime.stoplockedm+0x61>
 102f6d7:	e8 c4 ad ff ff 	call	-21052 <_runtime.printlock>
 102f6dc:	48 8d 05 24 7e 04 00 	lea	rax, [rip + 294436]
 102f6e3:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f6e7:	48 c7 44 24 08 39 00 00 00 	mov	qword ptr [rsp + 8], 57
 102f6f0:	e8 eb b6 ff ff 	call	-18709 <_runtime.printstring>
 102f6f5:	e8 26 ae ff ff 	call	-20954 <_runtime.printunlock>
 102f6fa:	90 	nop
 102f6fb:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102f704:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 102f709:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 102f70e:	8b 91 90 00 00 00 	mov	edx, dword ptr [rcx + 144]
 102f714:	89 54 24 10 	mov	dword ptr [rsp + 16], edx
 102f718:	48 8b 99 98 00 00 00 	mov	rbx, qword ptr [rcx + 152]
 102f71f:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 102f724:	e8 77 ad ff ff 	call	-21129 <_runtime.printlock>
 102f729:	48 8d 05 d2 44 04 00 	lea	rax, [rip + 279762]
 102f730:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f734:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102f73d:	e8 9e b6 ff ff 	call	-18786 <_runtime.printstring>
 102f742:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 102f747:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f74b:	e8 50 b6 ff ff 	call	-18864 <_runtime.printpointer>
 102f750:	48 8d 05 6b 37 04 00 	lea	rax, [rip + 276331]
 102f757:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f75b:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102f764:	e8 77 b6 ff ff 	call	-18825 <_runtime.printstring>
 102f769:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102f76e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f772:	e8 a9 b4 ff ff 	call	-19287 <_runtime.printint>
 102f777:	48 8d 05 af 47 04 00 	lea	rax, [rip + 280495]
 102f77e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f782:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102f78b:	e8 50 b6 ff ff 	call	-18864 <_runtime.printstring>
 102f790:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 102f794:	89 c0 	mov	eax, eax
 102f796:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f79a:	e8 81 b3 ff ff 	call	-19583 <_runtime.printuint>
 102f79f:	e8 8c af ff ff 	call	-20596 <_runtime.printnl>
 102f7a4:	e8 77 ad ff ff 	call	-21129 <_runtime.printunlock>
 102f7a9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102f7ae:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 102f7b4:	89 4c 24 14 	mov	dword ptr [rsp + 20], ecx
 102f7b8:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 102f7bf:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 102f7c4:	e8 d7 ac ff ff 	call	-21289 <_runtime.printlock>
 102f7c9:	48 8d 05 02 44 04 00 	lea	rax, [rip + 279554]
 102f7d0:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f7d4:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 102f7dd:	e8 fe b5 ff ff 	call	-18946 <_runtime.printstring>
 102f7e2:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102f7e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f7eb:	e8 b0 b5 ff ff 	call	-19024 <_runtime.printpointer>
 102f7f0:	48 8d 05 cb 36 04 00 	lea	rax, [rip + 276171]
 102f7f7:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f7fb:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 102f804:	e8 d7 b5 ff ff 	call	-18985 <_runtime.printstring>
 102f809:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102f80e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f812:	e8 09 b4 ff ff 	call	-19447 <_runtime.printint>
 102f817:	48 8d 05 fc 46 04 00 	lea	rax, [rip + 280316]
 102f81e:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f822:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 102f82b:	e8 b0 b5 ff ff 	call	-19024 <_runtime.printstring>
 102f830:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 102f834:	89 c0 	mov	eax, eax
 102f836:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f83a:	e8 e1 b2 ff ff 	call	-19743 <_runtime.printuint>
 102f83f:	e8 ec ae ff ff 	call	-20756 <_runtime.printnl>
 102f844:	e8 d7 ac ff ff 	call	-21289 <_runtime.printunlock>
 102f849:	48 8d 05 27 55 04 00 	lea	rax, [rip + 283943]
 102f850:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f854:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 102f85d:	e8 fe 94 ff ff 	call	-27394 <_runtime.throw>
 102f862:	48 8d 05 89 67 04 00 	lea	rax, [rip + 288649]
 102f869:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f86d:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 102f876:	e8 e5 94 ff ff 	call	-27419 <_runtime.throw>
 102f87b:	90 	nop
 102f87c:	e8 4f 13 02 00 	call	136015 <_runtime.morestack_noctxt>
 102f881:	e9 5a fd ff ff 	jmp	-678 <_runtime.stoplockedm>
 102f886:	cc 	int3
 102f887:	cc 	int3
 102f888:	cc 	int3
 102f889:	cc 	int3
 102f88a:	cc 	int3
 102f88b:	cc 	int3
 102f88c:	cc 	int3
 102f88d:	cc 	int3
 102f88e:	cc 	int3
 102f88f:	cc 	int3

_runtime.startlockedm:
 102f890:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102f899:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102f89d:	0f 86 ac 00 00 00 	jbe	172 <_runtime.startlockedm+0xbf>
 102f8a3:	48 83 ec 20 	sub	rsp, 32
 102f8a7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102f8ac:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102f8b1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102f8ba:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 102f8bf:	48 8b 89 d8 00 00 00 	mov	rcx, qword ptr [rcx + 216]
 102f8c6:	48 39 48 30 	cmp	qword ptr [rax + 48], rcx
 102f8ca:	74 69 	je	105 <_runtime.startlockedm+0xa5>
 102f8cc:	48 83 b9 d8 00 00 00 00 	cmp	qword ptr [rcx + 216], 0
 102f8d4:	75 46 	jne	70 <_runtime.startlockedm+0x8c>
 102f8d6:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102f8db:	c7 04 24 ff ff ff ff 	mov	dword ptr [rsp], 4294967295
 102f8e2:	e8 99 5b 00 00 	call	23449 <_runtime.incidlelocked>
 102f8e7:	e8 74 59 00 00 	call	22900 <_runtime.releasep>
 102f8ec:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102f8f0:	90 	nop
 102f8f1:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102f8f6:	48 89 81 d8 00 00 00 	mov	qword ptr [rcx + 216], rax
 102f8fd:	48 8d 81 48 01 00 00 	lea	rax, [rcx + 328]
 102f904:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f908:	e8 e3 8a fd ff 	call	-161053 <_runtime.notewakeup>
 102f90d:	e8 fe f5 ff ff 	call	-2562 <_runtime.stopm>
 102f912:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102f917:	48 83 c4 20 	add	rsp, 32
 102f91b:	c3 	ret
 102f91c:	48 8d 05 8c 4b 04 00 	lea	rax, [rip + 281484]
 102f923:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f927:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 102f930:	e8 2b 94 ff ff 	call	-27605 <_runtime.throw>
 102f935:	48 8d 05 d9 55 04 00 	lea	rax, [rip + 284121]
 102f93c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102f940:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 102f949:	e8 12 94 ff ff 	call	-27630 <_runtime.throw>
 102f94e:	90 	nop
 102f94f:	e8 7c 12 02 00 	call	135804 <_runtime.morestack_noctxt>
 102f954:	e9 37 ff ff ff 	jmp	-201 <_runtime.startlockedm>
 102f959:	cc 	int3
 102f95a:	cc 	int3
 102f95b:	cc 	int3
 102f95c:	cc 	int3
 102f95d:	cc 	int3
 102f95e:	cc 	int3
 102f95f:	cc 	int3

_runtime.gcstopm:
 102f960:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102f969:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102f96d:	0f 86 f0 00 00 00 	jbe	240 <_runtime.gcstopm+0x103>
 102f973:	48 83 ec 20 	sub	rsp, 32
 102f977:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102f97c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102f981:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102f98a:	83 3d cf ed 09 00 00 	cmp	dword ptr [rip + 650703], 0
 102f991:	0f 84 b2 00 00 00 	je	178 <_runtime.gcstopm+0xe9>
 102f997:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 102f99b:	80 b8 14 01 00 00 00 	cmp	byte ptr [rax + 276], 0
 102f9a2:	74 1d 	je	29 <_runtime.gcstopm+0x61>
 102f9a4:	c6 80 14 01 00 00 00 	mov	byte ptr [rax + 276], 0
 102f9ab:	b8 ff ff ff ff 	mov	eax, 4294967295
 102f9b0:	48 8d 0d 05 ed 09 00 	lea	rcx, [rip + 650501]
 102f9b7:	f0 	lock
 102f9b8:	0f c1 01 	xadd	dword ptr [rcx], eax
 102f9bb:	ff c8 	dec	eax
 102f9bd:	85 c0 	test	eax, eax
 102f9bf:	7c 6f 	jl	111 <_runtime.gcstopm+0xd0>
 102f9c1:	e8 9a 58 00 00 	call	22682 <_runtime.releasep>
 102f9c6:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 102f9ca:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 102f9cf:	48 8d 0d a2 ec 09 00 	lea	rcx, [rip + 650402]
 102f9d6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102f9da:	e8 51 87 fd ff 	call	-161967 <_runtime.lock>
 102f9df:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102f9e4:	c7 40 04 03 00 00 00 	mov	dword ptr [rax + 4], 3
 102f9eb:	8b 05 73 ed 09 00 	mov	eax, dword ptr [rip + 650611]
 102f9f1:	8d 48 ff 	lea	ecx, [rax - 1]
 102f9f4:	89 0d 6a ed 09 00 	mov	dword ptr [rip + 650602], ecx
 102f9fa:	83 f8 01 	cmp	eax, 1
 102f9fd:	74 1f 	je	31 <_runtime.gcstopm+0xbe>
 102f9ff:	48 8d 05 72 ec 09 00 	lea	rax, [rip + 650354]
 102fa06:	48 89 04 24 	mov	qword ptr [rsp], rax
 102fa0a:	e8 01 89 fd ff 	call	-161535 <_runtime.unlock>
 102fa0f:	e8 fc f4 ff ff 	call	-2820 <_runtime.stopm>
 102fa14:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102fa19:	48 83 c4 20 	add	rsp, 32
 102fa1d:	c3 	ret
 102fa1e:	48 8d 05 43 ed 09 00 	lea	rax, [rip + 650563]
 102fa25:	48 89 04 24 	mov	qword ptr [rsp], rax
 102fa29:	e8 c2 89 fd ff 	call	-161342 <_runtime.notewakeup>
 102fa2e:	eb cf 	jmp	-49 <_runtime.gcstopm+0x9f>
 102fa30:	48 8d 05 ce 58 04 00 	lea	rax, [rip + 284878]
 102fa37:	48 89 04 24 	mov	qword ptr [rsp], rax
 102fa3b:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 102fa44:	e8 17 93 ff ff 	call	-27881 <_runtime.throw>
 102fa49:	48 8d 05 4b 55 04 00 	lea	rax, [rip + 283979]
 102fa50:	48 89 04 24 	mov	qword ptr [rsp], rax
 102fa54:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 102fa5d:	e8 fe 92 ff ff 	call	-27906 <_runtime.throw>
 102fa62:	90 	nop
 102fa63:	e8 68 11 02 00 	call	135528 <_runtime.morestack_noctxt>
 102fa68:	e9 f3 fe ff ff 	jmp	-269 <_runtime.gcstopm>
 102fa6d:	cc 	int3
 102fa6e:	cc 	int3
 102fa6f:	cc 	int3

_runtime.execute:
 102fa70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102fa79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 102fa7d:	0f 86 49 01 00 00 	jbe	329 <_runtime.execute+0x15c>
 102fa83:	48 83 ec 20 	sub	rsp, 32
 102fa87:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 102fa8c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 102fa91:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102fa9a:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 102fa9e:	84 02 	test	byte ptr [rdx], al
 102faa0:	83 3d 59 7e 0c 00 00 	cmp	dword ptr [rip + 818777], 0
 102faa7:	0f 85 06 01 00 00 	jne	262 <_runtime.execute+0x143>
 102faad:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 102fab2:	48 89 9a c0 00 00 00 	mov	qword ptr [rdx + 192], rbx
 102fab9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 102fabe:	84 03 	test	byte ptr [rbx], al
 102fac0:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 102fac4:	83 3d 35 7e 0c 00 00 	cmp	dword ptr [rip + 818741], 0
 102facb:	0f 85 d4 00 00 00 	jne	212 <_runtime.execute+0x135>
 102fad1:	48 89 43 30 	mov	qword ptr [rbx + 48], rax
 102fad5:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102fad9:	48 b8 01 00 00 00 02 00 00 00 	movabs	rax, 8589934593
 102fae3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102fae8:	e8 23 d8 ff ff 	call	-10205 <_runtime.casgstatus>
 102faed:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102faf2:	48 c7 80 a8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 168], 0
 102fafd:	c6 80 b1 00 00 00 00 	mov	byte ptr [rax + 177], 0
 102fb04:	48 8b 08 	mov	rcx, qword ptr [rax]
 102fb07:	48 81 c1 80 03 00 00 	add	rcx, 896
 102fb0e:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 102fb12:	0f b6 4c 24 30 	movzx	ecx, byte ptr [rsp + 48]
 102fb17:	84 c9 	test	cl, cl
 102fb19:	74 72 	je	114 <_runtime.execute+0x11d>
 102fb1b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102fb20:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 102fb24:	8b 15 6e ec 09 00 	mov	edx, dword ptr [rip + 650350]
 102fb2a:	39 91 10 01 00 00 	cmp	dword ptr [rcx + 272], edx
 102fb30:	75 4c 	jne	76 <_runtime.execute+0x10e>
 102fb32:	80 3d f7 53 0a 00 00 	cmp	byte ptr [rip + 676855], 0
 102fb39:	74 15 	je	21 <_runtime.execute+0xe0>
 102fb3b:	48 83 78 70 00 	cmp	qword ptr [rax + 112], 0
 102fb40:	74 09 	je	9 <_runtime.execute+0xdb>
 102fb42:	80 b8 ba 00 00 00 00 	cmp	byte ptr [rax + 186], 0
 102fb49:	75 21 	jne	33 <_runtime.execute+0xfc>
 102fb4b:	e8 90 70 01 00 	call	94352 <_runtime.traceGoStart>
 102fb50:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102fb55:	48 83 c0 38 	add	rax, 56
 102fb59:	48 89 04 24 	mov	qword ptr [rsp], rax
 102fb5d:	e8 3e 0e 02 00 	call	134718 <_runtime.gogo>
 102fb62:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 102fb67:	48 83 c4 20 	add	rsp, 32
 102fb6b:	c3 	ret
 102fb6c:	48 8b 88 c0 00 00 00 	mov	rcx, qword ptr [rax + 192]
 102fb73:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 102fb77:	e8 f4 73 01 00 	call	95220 <_runtime.traceGoSysExit>
 102fb7c:	eb cd 	jmp	-51 <_runtime.execute+0xdb>
 102fb7e:	89 14 24 	mov	dword ptr [rsp], edx
 102fb81:	e8 1a b1 00 00 	call	45338 <_runtime.setThreadCPUProfiler>
 102fb86:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102fb8b:	eb a5 	jmp	-91 <_runtime.execute+0xc2>
 102fb8d:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 102fb92:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 102fb96:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 102fb9d:	ff 42 10 	inc	dword ptr [rdx + 16]
 102fba0:	e9 76 ff ff ff 	jmp	-138 <_runtime.execute+0xab>
 102fba5:	48 8d 7b 30 	lea	rdi, [rbx + 48]
 102fba9:	e8 32 2e 02 00 	call	142898 <_runtime.gcWriteBarrier>
 102fbae:	e9 22 ff ff ff 	jmp	-222 <_runtime.execute+0x65>
 102fbb3:	48 8d ba c0 00 00 00 	lea	rdi, [rdx + 192]
 102fbba:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 102fbbf:	e8 1c 2e 02 00 	call	142876 <_runtime.gcWriteBarrier>
 102fbc4:	48 89 c3 	mov	rbx, rax
 102fbc7:	e9 ed fe ff ff 	jmp	-275 <_runtime.execute+0x49>
 102fbcc:	e8 ff 0f 02 00 	call	135167 <_runtime.morestack_noctxt>
 102fbd1:	e9 9a fe ff ff 	jmp	-358 <_runtime.execute>
 102fbd6:	cc 	int3
 102fbd7:	cc 	int3
 102fbd8:	cc 	int3
 102fbd9:	cc 	int3
 102fbda:	cc 	int3
 102fbdb:	cc 	int3
 102fbdc:	cc 	int3
 102fbdd:	cc 	int3
 102fbde:	cc 	int3
 102fbdf:	cc 	int3

_runtime.findrunnable:
 102fbe0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 102fbe9:	48 8d 44 24 a0 	lea	rax, [rsp - 96]
 102fbee:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 102fbf2:	0f 86 72 0e 00 00 	jbe	3698 <_runtime.findrunnable+0xe8a>
 102fbf8:	48 81 ec e0 00 00 00 	sub	rsp, 224
 102fbff:	48 89 ac 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rbp
 102fc07:	48 8d ac 24 d8 00 00 00 	lea	rbp, [rsp + 216]
 102fc0f:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 102fc18:	48 89 84 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rax
 102fc20:	e9 cd 07 00 00 	jmp	1997 <_runtime.findrunnable+0x812>
 102fc25:	41 89 d0 	mov	r8d, edx
 102fc28:	31 d2 	xor	edx, edx
 102fc2a:	41 f7 f0 	div	r8d
 102fc2d:	89 94 24 90 00 00 00 	mov	dword ptr [rsp + 144], edx
 102fc34:	8b 94 24 8c 00 00 00 	mov	edx, dword ptr [rsp + 140]
 102fc3b:	39 94 24 88 00 00 00 	cmp	dword ptr [rsp + 136], edx
 102fc42:	0f 84 04 02 00 00 	je	516 <_runtime.findrunnable+0x26c>
 102fc48:	83 3d 11 eb 09 00 00 	cmp	dword ptr [rip + 650001], 0
 102fc4f:	0f 85 ef 01 00 00 	jne	495 <_runtime.findrunnable+0x264>
 102fc55:	48 8b 15 e4 e6 09 00 	mov	rdx, qword ptr [rip + 648932]
 102fc5c:	4c 8b 05 e5 e6 09 00 	mov	r8, qword ptr [rip + 648933]
 102fc63:	8b 84 24 90 00 00 00 	mov	eax, dword ptr [rsp + 144]
 102fc6a:	4c 39 c0 	cmp	rax, r8
 102fc6d:	0f 83 dc 0d 00 00 	jae	3548 <_runtime.findrunnable+0xe6f>
 102fc73:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 102fc77:	48 39 d3 	cmp	rbx, rdx
 102fc7a:	75 25 	jne	37 <_runtime.findrunnable+0xc1>
 102fc7c:	ff 84 24 88 00 00 00 	inc	dword ptr [rsp + 136]
 102fc83:	8b 84 24 90 00 00 00 	mov	eax, dword ptr [rsp + 144]
 102fc8a:	03 84 24 94 00 00 00 	add	eax, dword ptr [rsp + 148]
 102fc91:	8b 94 24 8c 00 00 00 	mov	edx, dword ptr [rsp + 140]
 102fc98:	85 d2 	test	edx, edx
 102fc9a:	75 89 	jne	-119 <_runtime.findrunnable+0x45>
 102fc9c:	e9 a9 0d 00 00 	jmp	3497 <_runtime.findrunnable+0xe6a>
 102fca1:	48 89 94 24 98 00 00 00 	mov	qword ptr [rsp + 152], rdx
 102fca9:	48 89 74 24 78 	mov	qword ptr [rsp + 120], rsi
 102fcae:	48 89 7c 24 70 	mov	qword ptr [rsp + 112], rdi
 102fcb3:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 102fcb7:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102fcbb:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 102fcc0:	49 83 fc 02 	cmp	r12, 2
 102fcc4:	0f 9f 44 24 10 	setg	byte ptr [rsp + 16]
 102fcc9:	e8 42 79 00 00 	call	31042 <_runtime.runqsteal>
 102fcce:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 102fcd3:	48 85 c0 	test	rax, rax
 102fcd6:	0f 85 48 01 00 00 	jne	328 <_runtime.findrunnable+0x244>
 102fcdc:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 102fce4:	48 83 fa 02 	cmp	rdx, 2
 102fce8:	7e 20 	jle	32 <_runtime.findrunnable+0x12a>
 102fcea:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 102fcf2:	83 7b 04 01 	cmp	dword ptr [rbx + 4], 1
 102fcf6:	75 5f 	jne	95 <_runtime.findrunnable+0x177>
 102fcf8:	48 8b 73 38 	mov	rsi, qword ptr [rbx + 56]
 102fcfc:	48 85 f6 	test	rsi, rsi
 102fcff:	74 09 	je	9 <_runtime.findrunnable+0x12a>
 102fd01:	83 be 08 01 00 00 00 	cmp	dword ptr [rsi + 264], 0
 102fd08:	7e 2f 	jle	47 <_runtime.findrunnable+0x159>
 102fd0a:	0f b6 44 24 2f 	movzx	eax, byte ptr [rsp + 47]
 102fd0f:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 102fd14:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 102fd19:	49 89 d4 	mov	r12, rdx
 102fd1c:	4c 8b ac 24 c8 00 00 00 	mov	r13, qword ptr [rsp + 200]
 102fd24:	48 89 cf 	mov	rdi, rcx
 102fd27:	48 89 de 	mov	rsi, rbx
 102fd2a:	48 8b 9c 24 d0 00 00 00 	mov	rbx, qword ptr [rsp + 208]
 102fd32:	89 c1 	mov	ecx, eax
 102fd34:	e9 43 ff ff ff 	jmp	-189 <_runtime.findrunnable+0x9c>
 102fd39:	48 8b b6 c0 00 00 00 	mov	rsi, qword ptr [rsi + 192]
 102fd40:	48 85 f6 	test	rsi, rsi
 102fd43:	74 c5 	je	-59 <_runtime.findrunnable+0x12a>
 102fd45:	83 be 90 00 00 00 02 	cmp	dword ptr [rsi + 144], 2
 102fd4c:	75 bc 	jne	-68 <_runtime.findrunnable+0x12a>
 102fd4e:	80 be b1 00 00 00 00 	cmp	byte ptr [rsi + 177], 0
 102fd55:	74 b3 	je	-77 <_runtime.findrunnable+0x12a>
 102fd57:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 102fd5b:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 102fd60:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 102fd65:	e8 f6 15 00 00 	call	5622 <_runtime.checkTimers>
 102fd6a:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 102fd6f:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 102fd74:	0f b6 54 24 20 	movzx	edx, byte ptr [rsp + 32]
 102fd79:	80 fa 00 	cmp	dl, 0
 102fd7c:	48 85 c9 	test	rcx, rcx
 102fd7f:	0f 84 95 00 00 00 	je	149 <_runtime.findrunnable+0x23a>
 102fd85:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 102fd8a:	48 85 db 	test	rbx, rbx
 102fd8d:	75 76 	jne	118 <_runtime.findrunnable+0x225>
 102fd8f:	80 fa 00 	cmp	dl, 0
 102fd92:	75 17 	jne	23 <_runtime.findrunnable+0x1cb>
 102fd94:	0f b6 54 24 2f 	movzx	edx, byte ptr [rsp + 47]
 102fd99:	48 89 c3 	mov	rbx, rax
 102fd9c:	89 d0 	mov	eax, edx
 102fd9e:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 102fda6:	e9 6e ff ff ff 	jmp	-146 <_runtime.findrunnable+0x139>
 102fdab:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 102fdb0:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 102fdb5:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 102fdbd:	48 89 04 24 	mov	qword ptr [rsp], rax
 102fdc1:	e8 4a 76 00 00 	call	30282 <_runtime.runqget>
 102fdc6:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 102fdcb:	0f b6 4c 24 10 	movzx	ecx, byte ptr [rsp + 16]
 102fdd0:	48 85 c0 	test	rax, rax
 102fdd3:	75 11 	jne	17 <_runtime.findrunnable+0x206>
 102fdd5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 102fdda:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 102fddf:	ba 01 00 00 00 	mov	edx, 1
 102fde4:	eb b3 	jmp	-77 <_runtime.findrunnable+0x1b9>
 102fde6:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 102fdee:	88 8c 24 f0 00 00 00 	mov	byte ptr [rsp + 240], cl
 102fdf5:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 102fdfd:	48 81 c4 e0 00 00 00 	add	rsp, 224
 102fe04:	c3 	ret
 102fe05:	48 39 d9 	cmp	rcx, rbx
 102fe08:	7d 05 	jge	5 <_runtime.findrunnable+0x22f>
 102fe0a:	80 fa 00 	cmp	dl, 0
 102fe0d:	eb 83 	jmp	-125 <_runtime.findrunnable+0x1b2>
 102fe0f:	80 fa 00 	cmp	dl, 0
 102fe12:	48 89 d9 	mov	rcx, rbx
 102fe15:	e9 78 ff ff ff 	jmp	-136 <_runtime.findrunnable+0x1b2>
 102fe1a:	80 fa 00 	cmp	dl, 0
 102fe1d:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 102fe22:	eb ee 	jmp	-18 <_runtime.findrunnable+0x232>
 102fe24:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 102fe2c:	c6 84 24 f0 00 00 00 00 	mov	byte ptr [rsp + 240], 0
 102fe34:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 102fe3c:	48 81 c4 e0 00 00 00 	add	rsp, 224
 102fe43:	c3 	ret
 102fe44:	4c 89 e8 	mov	rax, r13
 102fe47:	e9 a6 05 00 00 	jmp	1446 <_runtime.findrunnable+0x812>
 102fe4c:	49 8d 44 24 01 	lea	rax, [r12 + 1]
 102fe51:	4c 89 ea 	mov	rdx, r13
 102fe54:	48 83 f8 04 	cmp	rax, 4
 102fe58:	0f 8d cc 00 00 00 	jge	204 <_runtime.findrunnable+0x34a>
 102fe5e:	65 4c 8b 04 25 30 00 00 00 	mov	r8, qword ptr gs:[48]
 102fe67:	4d 8b 40 30 	mov	r8, qword ptr [r8 + 48]
 102fe6b:	45 8b 88 20 01 00 00 	mov	r9d, dword ptr [r8 + 288]
 102fe72:	45 8b 90 24 01 00 00 	mov	r10d, dword ptr [r8 + 292]
 102fe79:	45 89 90 20 01 00 00 	mov	dword ptr [r8 + 288], r10d
 102fe80:	45 89 cb 	mov	r11d, r9d
 102fe83:	41 c1 e1 11 	shl	r9d, 17
 102fe87:	45 31 d9 	xor	r9d, r11d
 102fe8a:	45 89 d3 	mov	r11d, r10d
 102fe8d:	45 31 ca 	xor	r10d, r9d
 102fe90:	41 c1 e9 07 	shr	r9d, 7
 102fe94:	45 31 d1 	xor	r9d, r10d
 102fe97:	45 89 da 	mov	r10d, r11d
 102fe9a:	41 c1 eb 10 	shr	r11d, 16
 102fe9e:	45 31 cb 	xor	r11d, r9d
 102fea1:	45 89 98 24 01 00 00 	mov	dword ptr [r8 + 292], r11d
 102fea8:	47 8d 04 13 	lea	r8d, [r11 + r10]
 102feac:	44 8b 0d 8d e5 09 00 	mov	r9d, dword ptr [rip + 648589]
 102feb3:	4c 8b 15 8e e5 09 00 	mov	r10, qword ptr [rip + 648590]
 102feba:	4c 8b 1d 8f e5 09 00 	mov	r11, qword ptr [rip + 648591]
 102fec1:	45 85 c9 	test	r9d, r9d
 102fec4:	0f 84 9a 0b 00 00 	je	2970 <_runtime.findrunnable+0xe84>
 102feca:	49 89 c4 	mov	r12, rax
 102fecd:	44 89 c0 	mov	eax, r8d
 102fed0:	49 89 d5 	mov	r13, rdx
 102fed3:	31 d2 	xor	edx, edx
 102fed5:	41 f7 f1 	div	r9d
 102fed8:	45 85 db 	test	r11d, r11d
 102fedb:	0f 84 7e 0b 00 00 	je	2942 <_runtime.findrunnable+0xe7f>
 102fee1:	44 89 c0 	mov	eax, r8d
 102fee4:	41 89 d0 	mov	r8d, edx
 102fee7:	31 d2 	xor	edx, edx
 102fee9:	41 f7 f3 	div	r11d
 102feec:	89 d0 	mov	eax, edx
 102feee:	4c 39 d8 	cmp	rax, r11
 102fef1:	0f 83 60 0b 00 00 	jae	2912 <_runtime.findrunnable+0xe77>
 102fef7:	4c 89 a4 24 80 00 00 00 	mov	qword ptr [rsp + 128], r12
 102feff:	41 8b 14 82 	mov	edx, dword ptr [r10 + 4*rax]
 102ff03:	c7 84 24 88 00 00 00 00 00 00 00 	mov	dword ptr [rsp + 136], 0
 102ff0e:	44 89 8c 24 8c 00 00 00 	mov	dword ptr [rsp + 140], r9d
 102ff16:	44 89 84 24 90 00 00 00 	mov	dword ptr [rsp + 144], r8d
 102ff1e:	89 94 24 94 00 00 00 	mov	dword ptr [rsp + 148], edx
 102ff25:	e9 0a fd ff ff 	jmp	-758 <_runtime.findrunnable+0x54>
 102ff2a:	84 c9 	test	cl, cl
 102ff2c:	0f 84 bb 01 00 00 	je	443 <_runtime.findrunnable+0x50d>
 102ff32:	48 89 d0 	mov	rax, rdx
 102ff35:	e9 b8 04 00 00 	jmp	1208 <_runtime.findrunnable+0x812>
 102ff3a:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 102ff42:	48 8d 4b 01 	lea	rcx, [rbx + 1]
 102ff46:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 102ff4e:	0f b6 54 24 2e 	movzx	edx, byte ptr [rsp + 46]
 102ff53:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 102ff58:	48 39 d9 	cmp	rcx, rbx
 102ff5b:	0f 8d 85 00 00 00 	jge	133 <_runtime.findrunnable+0x406>
 102ff61:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 102ff69:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 102ff71:	48 8b 14 c8 	mov	rdx, qword ptr [rax + 8*rcx]
 102ff75:	48 89 14 24 	mov	qword ptr [rsp], rdx
 102ff79:	e8 52 71 00 00 	call	29010 <_runtime.runqempty>
 102ff7e:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 102ff83:	75 b5 	jne	-75 <_runtime.findrunnable+0x35a>
 102ff85:	48 8d 05 ec e6 09 00 	lea	rax, [rip + 648940]
 102ff8c:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ff90:	e8 9b 81 fd ff 	call	-163429 <_runtime.lock>
 102ff95:	90 	nop
 102ff96:	48 8b 05 13 e7 09 00 	mov	rax, qword ptr [rip + 648979]
 102ff9d:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 102ffa5:	48 85 c0 	test	rax, rax
 102ffa8:	74 1b 	je	27 <_runtime.findrunnable+0x3e5>
 102ffaa:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 102ffae:	48 89 0d fb e6 09 00 	mov	qword ptr [rip + 648955], rcx
 102ffb5:	b9 ff ff ff ff 	mov	ecx, 4294967295
 102ffba:	48 8d 15 f7 e6 09 00 	lea	rdx, [rip + 648951]
 102ffc1:	f0 	lock
 102ffc2:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 102ffc5:	48 8d 05 ac e6 09 00 	lea	rax, [rip + 648876]
 102ffcc:	48 89 04 24 	mov	qword ptr [rsp], rax
 102ffd0:	e8 3b 83 fd ff 	call	-163013 <_runtime.unlock>
 102ffd5:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 102ffdd:	48 85 c0 	test	rax, rax
 102ffe0:	0f 85 93 06 00 00 	jne	1683 <_runtime.findrunnable+0xa99>
 102ffe6:	83 3d a3 77 0c 00 00 	cmp	dword ptr [rip + 817059], 0
 102ffed:	0f 84 7f 06 00 00 	je	1663 <_runtime.findrunnable+0xa92>
 102fff3:	48 8b 05 46 e9 09 00 	mov	rax, qword ptr [rip + 649542]
 102fffa:	48 85 c0 	test	rax, rax
 102fffd:	0f 85 65 06 00 00 	jne	1637 <_runtime.findrunnable+0xa88>
 1030003:	8b 05 c3 e9 09 00 	mov	eax, dword ptr [rip + 649667]
 1030009:	39 05 b9 e9 09 00 	cmp	dword ptr [rip + 649657], eax
 103000f:	0f 83 4c 06 00 00 	jae	1612 <_runtime.findrunnable+0xa81>
 1030015:	b8 01 00 00 00 	mov	eax, 1
 103001a:	84 c0 	test	al, al
 103001c:	0f 84 51 02 00 00 	je	593 <_runtime.findrunnable+0x693>
 1030022:	48 8d 05 4f e6 09 00 	lea	rax, [rip + 648783]
 1030029:	48 89 04 24 	mov	qword ptr [rsp], rax
 103002d:	e8 fe 80 fd ff 	call	-163586 <_runtime.lock>
 1030032:	90 	nop
 1030033:	48 8b 05 76 e6 09 00 	mov	rax, qword ptr [rip + 648822]
 103003a:	48 85 c0 	test	rax, rax
 103003d:	74 1e 	je	30 <_runtime.findrunnable+0x47d>
 103003f:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1030043:	48 89 0d 66 e6 09 00 	mov	qword ptr [rip + 648806], rcx
 103004a:	b9 ff ff ff ff 	mov	ecx, 4294967295
 103004f:	48 8d 15 62 e6 09 00 	lea	rdx, [rip + 648802]
 1030056:	f0 	lock
 1030057:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 103005a:	48 85 c0 	test	rax, rax
 103005d:	74 0e 	je	14 <_runtime.findrunnable+0x48d>
 103005f:	48 83 b8 80 16 00 00 00 	cmp	qword ptr [rax + 5760], 0
 1030067:	0f 84 e4 05 00 00 	je	1508 <_runtime.findrunnable+0xa71>
 103006d:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 1030075:	48 8d 0d fc e5 09 00 	lea	rcx, [rip + 648700]
 103007c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030080:	e8 8b 82 fd ff 	call	-163189 <_runtime.unlock>
 1030085:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 103008d:	48 85 c0 	test	rax, rax
 1030090:	0f 84 dd 01 00 00 	je	477 <_runtime.findrunnable+0x693>
 1030096:	48 89 04 24 	mov	qword ptr [rsp], rax
 103009a:	e8 01 50 00 00 	call	20481 <_runtime.acquirep>
 103009f:	0f b6 44 24 2e 	movzx	eax, byte ptr [rsp + 46]
 10300a4:	84 c0 	test	al, al
 10300a6:	0f 84 ba 01 00 00 	je	442 <_runtime.findrunnable+0x686>
 10300ac:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 10300b4:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10300b8:	c6 81 14 01 00 00 01 	mov	byte ptr [rcx + 276], 1
 10300bf:	b9 01 00 00 00 	mov	ecx, 1
 10300c4:	48 8d 15 f1 e5 09 00 	lea	rdx, [rip + 648689]
 10300cb:	f0 	lock
 10300cc:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 10300cf:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 10300d7:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 10300dc:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 10300e1:	48 89 c2 	mov	rdx, rax
 10300e4:	4c 89 cf 	mov	rdi, r9
 10300e7:	4c 89 c6 	mov	rsi, r8
 10300ea:	48 89 cb 	mov	rbx, rcx
 10300ed:	83 3d 9c 76 0c 00 00 	cmp	dword ptr [rip + 816796], 0
 10300f4:	0f 84 dc 06 00 00 	je	1756 <_runtime.findrunnable+0xbf6>
 10300fa:	84 03 	test	byte ptr [rbx], al
 10300fc:	48 83 bb 80 16 00 00 00 	cmp	qword ptr [rbx + 5760], 0
 1030104:	0f 84 c5 06 00 00 	je	1733 <_runtime.findrunnable+0xbef>
 103010a:	48 8b 83 98 16 00 00 	mov	rax, qword ptr [rbx + 5784]
 1030111:	48 85 c0 	test	rax, rax
 1030114:	74 1d 	je	29 <_runtime.findrunnable+0x553>
 1030116:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 103011b:	0f 85 a4 06 00 00 	jne	1700 <_runtime.findrunnable+0xbe5>
 1030121:	48 8b 83 a0 16 00 00 	mov	rax, qword ptr [rbx + 5792]
 1030128:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 103012d:	0f 85 92 06 00 00 	jne	1682 <_runtime.findrunnable+0xbe5>
 1030133:	48 8b 05 06 e8 09 00 	mov	rax, qword ptr [rip + 649222]
 103013a:	48 85 c0 	test	rax, rax
 103013d:	0f 85 78 06 00 00 	jne	1656 <_runtime.findrunnable+0xbdb>
 1030143:	8b 05 83 e8 09 00 	mov	eax, dword ptr [rip + 649347]
 1030149:	39 05 79 e8 09 00 	cmp	dword ptr [rip + 649337], eax
 103014f:	0f 83 5f 06 00 00 	jae	1631 <_runtime.findrunnable+0xbd4>
 1030155:	b8 01 00 00 00 	mov	eax, 1
 103015a:	84 c0 	test	al, al
 103015c:	0f 85 d1 05 00 00 	jne	1489 <_runtime.findrunnable+0xb53>
 1030162:	48 89 9c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rbx
 103016a:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 103016f:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1030174:	48 8b 05 c5 e1 09 00 	mov	rax, qword ptr [rip + 647621]
 103017b:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1030183:	48 8b 0d be e1 09 00 	mov	rcx, qword ptr [rip + 647614]
 103018a:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 103018f:	48 8d 15 e2 e4 09 00 	lea	rdx, [rip + 648418]
 1030196:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103019a:	e8 91 7f fd ff 	call	-163951 <_runtime.lock>
 103019f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10301a4:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10301a9:	48 89 c2 	mov	rdx, rax
 10301ac:	48 29 c8 	sub	rax, rcx
 10301af:	48 85 d2 	test	rdx, rdx
 10301b2:	48 c7 c3 ff ff ff ff 	mov	rbx, -1
 10301b9:	48 0f 45 d8 	cmovne	rbx, rax
 10301bd:	83 3d 9c e5 09 00 00 	cmp	dword ptr [rip + 648604], 0
 10301c4:	0f 85 4c 05 00 00 	jne	1356 <_runtime.findrunnable+0xb36>
 10301ca:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 10301d2:	84 00 	test	byte ptr [rax], al
 10301d4:	83 b8 60 27 00 00 00 	cmp	dword ptr [rax + 10080], 0
 10301db:	0f 85 35 05 00 00 	jne	1333 <_runtime.findrunnable+0xb36>
 10301e1:	83 3d e8 e4 09 00 00 	cmp	dword ptr [rip + 648424], 0
 10301e8:	0f 85 d2 04 00 00 	jne	1234 <_runtime.findrunnable+0xae0>
 10301ee:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 10301f3:	e8 68 50 00 00 	call	20584 <_runtime.releasep>
 10301f8:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1030200:	48 39 04 24 	cmp	qword ptr [rsp], rax
 1030204:	0f 85 27 08 00 00 	jne	2087 <_runtime.findrunnable+0xe51>
 103020a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103020e:	e8 2d 6e 00 00 	call	28205 <_runtime.pidleput>
 1030213:	48 8d 05 5e e4 09 00 	lea	rax, [rip + 648286]
 103021a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103021e:	e8 ed 80 fd ff 	call	-163603 <_runtime.unlock>
 1030223:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103022b:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103022f:	0f b6 91 14 01 00 00 	movzx	edx, byte ptr [rcx + 276]
 1030236:	84 d2 	test	dl, dl
 1030238:	74 21 	je	33 <_runtime.findrunnable+0x67b>
 103023a:	c6 81 14 01 00 00 00 	mov	byte ptr [rcx + 276], 0
 1030241:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1030246:	48 8d 1d 6f e4 09 00 	lea	rbx, [rip + 648303]
 103024d:	f0 	lock
 103024e:	0f c1 0b 	xadd	dword ptr [rbx], ecx
 1030251:	ff c9 	dec	ecx
 1030253:	85 c9 	test	ecx, ecx
 1030255:	0f 8c bd 07 00 00 	jl	1981 <_runtime.findrunnable+0xe38>
 103025b:	88 54 24 2e 	mov	byte ptr [rsp + 46], dl
 103025f:	31 c9 	xor	ecx, ecx
 1030261:	e9 ed fc ff ff 	jmp	-787 <_runtime.findrunnable+0x373>
 1030266:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103026e:	e9 5c fe ff ff 	jmp	-420 <_runtime.findrunnable+0x4ef>
 1030273:	8b 05 33 75 0c 00 	mov	eax, dword ptr [rip + 816435]
 1030279:	85 c0 	test	eax, eax
 103027b:	0f 84 c4 03 00 00 	je	964 <_runtime.findrunnable+0xa65>
 1030281:	8b 05 29 75 0c 00 	mov	eax, dword ptr [rip + 816425]
 1030287:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103028c:	48 85 c9 	test	rcx, rcx
 103028f:	0f 95 c2 	setne	dl
 1030292:	85 c0 	test	eax, eax
 1030294:	0f 97 c0 	seta	al
 1030297:	09 d0 	or	eax, edx
 1030299:	84 c0 	test	al, al
 103029b:	0f 84 9d 03 00 00 	je	925 <_runtime.findrunnable+0xa5e>
 10302a1:	31 c0 	xor	eax, eax
 10302a3:	48 8d 15 be e3 09 00 	lea	rdx, [rip + 648126]
 10302aa:	48 87 02 	xchg	qword ptr [rdx], rax
 10302ad:	48 85 c0 	test	rax, rax
 10302b0:	0f 95 c0 	setne	al
 10302b3:	84 c0 	test	al, al
 10302b5:	0f 84 51 03 00 00 	je	849 <_runtime.findrunnable+0xa2c>
 10302bb:	48 8d 05 ae e3 09 00 	lea	rax, [rip + 648110]
 10302c2:	48 87 08 	xchg	qword ptr [rax], rcx
 10302c5:	48 8b 8c 24 c8 00 00 00 	mov	rcx, qword ptr [rsp + 200]
 10302cd:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 10302d1:	48 83 ba d0 00 00 00 00 	cmp	qword ptr [rdx + 208], 0
 10302d9:	0f 85 20 07 00 00 	jne	1824 <_runtime.findrunnable+0xe1f>
 10302df:	80 ba 14 01 00 00 00 	cmp	byte ptr [rdx + 276], 0
 10302e6:	0f 85 fa 06 00 00 	jne	1786 <_runtime.findrunnable+0xe06>
 10302ec:	48 83 3d 3c 75 0c 00 00 	cmp	qword ptr [rip + 816444], 0
 10302f4:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10302f9:	b9 00 00 00 00 	mov	ecx, 0
 10302fe:	48 0f 45 c1 	cmovne	rax, rcx
 1030302:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030306:	e8 65 59 ff ff 	call	-42651 <_runtime.netpoll>
 103030b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1030310:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1030315:	31 c0 	xor	eax, eax
 1030317:	48 8d 0d 52 e3 09 00 	lea	rcx, [rip + 648018]
 103031e:	48 87 01 	xchg	qword ptr [rcx], rax
 1030321:	e8 9a 2f 01 00 	call	77722 <_runtime.nanotime1>
 1030326:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 103032a:	48 8d 0d 37 e3 09 00 	lea	rcx, [rip + 647991]
 1030331:	48 87 01 	xchg	qword ptr [rcx], rax
 1030334:	48 83 3d f4 74 0c 00 00 	cmp	qword ptr [rip + 816372], 0
 103033c:	74 0c 	je	12 <_runtime.findrunnable+0x76a>
 103033e:	48 83 7c 24 50 00 	cmp	qword ptr [rsp + 80], 0
 1030344:	0f 84 b0 02 00 00 	je	688 <_runtime.findrunnable+0xa1a>
 103034a:	48 8d 05 27 e3 09 00 	lea	rax, [rip + 647975]
 1030351:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030355:	e8 d6 7d fd ff 	call	-164394 <_runtime.lock>
 103035a:	90 	nop
 103035b:	48 8b 05 4e e3 09 00 	mov	rax, qword ptr [rip + 648014]
 1030362:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 103036a:	48 85 c0 	test	rax, rax
 103036d:	74 1b 	je	27 <_runtime.findrunnable+0x7aa>
 103036f:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1030373:	48 89 0d 36 e3 09 00 	mov	qword ptr [rip + 647990], rcx
 103037a:	b9 ff ff ff ff 	mov	ecx, 4294967295
 103037f:	48 8d 15 32 e3 09 00 	lea	rdx, [rip + 647986]
 1030386:	f0 	lock
 1030387:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 103038a:	48 8d 05 e7 e2 09 00 	lea	rax, [rip + 647911]
 1030391:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030395:	e8 76 7f fd ff 	call	-163978 <_runtime.unlock>
 103039a:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10303a2:	48 85 c0 	test	rax, rax
 10303a5:	0f 84 2f 02 00 00 	je	559 <_runtime.findrunnable+0x9fa>
 10303ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10303af:	e8 ec 4c 00 00 	call	19692 <_runtime.acquirep>
 10303b4:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10303b9:	48 85 c0 	test	rax, rax
 10303bc:	0f 85 82 01 00 00 	jne	386 <_runtime.findrunnable+0x964>
 10303c2:	0f b6 44 24 2e 	movzx	eax, byte ptr [rsp + 46]
 10303c7:	84 c0 	test	al, al
 10303c9:	0f 84 68 01 00 00 	je	360 <_runtime.findrunnable+0x957>
 10303cf:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 10303d7:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10303db:	c6 81 14 01 00 00 01 	mov	byte ptr [rcx + 276], 1
 10303e2:	b9 01 00 00 00 	mov	ecx, 1
 10303e7:	48 8d 15 ce e2 09 00 	lea	rdx, [rip + 647886]
 10303ee:	f0 	lock
 10303ef:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 10303f2:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10303f6:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 10303fd:	83 3d 5c e3 09 00 00 	cmp	dword ptr [rip + 648028], 0
 1030404:	74 0f 	je	15 <_runtime.findrunnable+0x835>
 1030406:	e8 55 f5 ff ff 	call	-2731 <_runtime.gcstopm>
 103040b:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1030413:	eb dd 	jmp	-35 <_runtime.findrunnable+0x812>
 1030415:	48 89 8c 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rcx
 103041d:	84 01 	test	byte ptr [rcx], al
 103041f:	83 b9 60 27 00 00 00 	cmp	dword ptr [rcx + 10080], 0
 1030426:	0f 85 a8 05 00 00 	jne	1448 <_runtime.findrunnable+0xdf4>
 103042c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030430:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1030439:	e8 22 0f 00 00 	call	3874 <_runtime.checkTimers>
 103043e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1030443:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1030448:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 103044d:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1030452:	80 3d 0d 73 0c 00 00 	cmp	byte ptr [rip + 815885], 0
 1030459:	74 0d 	je	13 <_runtime.findrunnable+0x888>
 103045b:	80 3d 05 73 0c 00 00 	cmp	byte ptr [rip + 815877], 0
 1030462:	0f 85 3c 05 00 00 	jne	1340 <_runtime.findrunnable+0xdc4>
 1030468:	48 8b 15 d9 c2 09 00 	mov	rdx, qword ptr [rip + 639705]
 103046f:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1030472:	48 85 d2 	test	rdx, rdx
 1030475:	0f 85 12 05 00 00 	jne	1298 <_runtime.findrunnable+0xdad>
 103047b:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 1030483:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030487:	e8 84 6f 00 00 	call	28548 <_runtime.runqget>
 103048c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1030491:	0f b6 4c 24 10 	movzx	ecx, byte ptr [rsp + 16]
 1030496:	48 85 c0 	test	rax, rax
 1030499:	0f 85 cf 04 00 00 	jne	1231 <_runtime.findrunnable+0xd8e>
 103049f:	83 3d 2a e2 09 00 00 	cmp	dword ptr [rip + 647722], 0
 10304a6:	0f 85 4b 04 00 00 	jne	1099 <_runtime.findrunnable+0xd17>
 10304ac:	8b 15 fa 72 0c 00 	mov	edx, dword ptr [rip + 815866]
 10304b2:	85 d2 	test	edx, edx
 10304b4:	0f 84 36 04 00 00 	je	1078 <_runtime.findrunnable+0xd10>
 10304ba:	8b 15 f0 72 0c 00 	mov	edx, dword ptr [rip + 815856]
 10304c0:	85 d2 	test	edx, edx
 10304c2:	0f 97 c2 	seta	dl
 10304c5:	84 d2 	test	dl, dl
 10304c7:	0f 84 1c 04 00 00 	je	1052 <_runtime.findrunnable+0xd09>
 10304cd:	48 8b 15 94 e1 09 00 	mov	rdx, qword ptr [rip + 647572]
 10304d4:	48 85 d2 	test	rdx, rdx
 10304d7:	0f 95 c2 	setne	dl
 10304da:	84 d2 	test	dl, dl
 10304dc:	0f 85 51 03 00 00 	jne	849 <_runtime.findrunnable+0xc53>
 10304e2:	48 8b 94 24 c8 00 00 00 	mov	rdx, qword ptr [rsp + 200]
 10304ea:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 10304ee:	8b 35 ac 72 0c 00 	mov	esi, dword ptr [rip + 815788]
 10304f4:	80 bb 14 01 00 00 00 	cmp	byte ptr [rbx + 276], 0
 10304fb:	0f 84 18 03 00 00 	je	792 <_runtime.findrunnable+0xc39>
 1030501:	31 c0 	xor	eax, eax
 1030503:	84 c0 	test	al, al
 1030505:	0f 85 ee 02 00 00 	jne	750 <_runtime.findrunnable+0xc19>
 103050b:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103050f:	80 bb 14 01 00 00 00 	cmp	byte ptr [rbx + 276], 0
 1030516:	0f 84 c1 02 00 00 	je	705 <_runtime.findrunnable+0xbfd>
 103051c:	48 8b 9c 24 d0 00 00 00 	mov	rbx, qword ptr [rsp + 208]
 1030524:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 1030529:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 103052e:	31 c0 	xor	eax, eax
 1030530:	31 c9 	xor	ecx, ecx
 1030532:	e9 1d f9 ff ff 	jmp	-1763 <_runtime.findrunnable+0x274>
 1030537:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103053f:	e9 ae fe ff ff 	jmp	-338 <_runtime.findrunnable+0x812>
 1030544:	90 	nop
 1030545:	90 	nop
 1030546:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 103054e:	48 85 c0 	test	rax, rax
 1030551:	74 0c 	je	12 <_runtime.findrunnable+0x97f>
 1030553:	48 8b 88 a0 00 00 00 	mov	rcx, qword ptr [rax + 160]
 103055a:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 103055f:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1030564:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030568:	e8 43 07 00 00 	call	1859 <_runtime.injectglist>
 103056d:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 1030575:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030579:	48 b9 04 00 00 00 01 00 00 00 	movabs	rcx, 4294967300
 1030583:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1030588:	e8 83 cd ff ff 	call	-12925 <_runtime.casgstatus>
 103058d:	80 3d 9c 49 0a 00 00 	cmp	byte ptr [rip + 674204], 0
 1030594:	75 28 	jne	40 <_runtime.findrunnable+0x9de>
 1030596:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103059e:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 10305a6:	c6 84 24 f0 00 00 00 00 	mov	byte ptr [rsp + 240], 0
 10305ae:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 10305b6:	48 81 c4 e0 00 00 00 	add	rsp, 224
 10305bd:	c3 	ret
 10305be:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10305c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10305ca:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10305d3:	e8 38 68 01 00 	call	92216 <_runtime.traceGoUnpark>
 10305d8:	eb bc 	jmp	-68 <_runtime.findrunnable+0x9b6>
 10305da:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 10305df:	48 89 04 24 	mov	qword ptr [rsp], rax
 10305e3:	e8 c8 06 00 00 	call	1736 <_runtime.injectglist>
 10305e8:	e8 23 e9 ff ff 	call	-5853 <_runtime.stopm>
 10305ed:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 10305f5:	e9 f8 fd ff ff 	jmp	-520 <_runtime.findrunnable+0x812>
 10305fa:	e8 11 e9 ff ff 	call	-5871 <_runtime.stopm>
 10305ff:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1030607:	e9 e6 fd ff ff 	jmp	-538 <_runtime.findrunnable+0x812>
 103060c:	48 85 c9 	test	rcx, rcx
 103060f:	74 29 	je	41 <_runtime.findrunnable+0xa5a>
 1030611:	8b 05 95 71 0c 00 	mov	eax, dword ptr [rip + 815509]
 1030617:	85 c0 	test	eax, eax
 1030619:	0f 95 c0 	setne	al
 103061c:	84 c0 	test	al, al
 103061e:	74 c8 	je	-56 <_runtime.findrunnable+0xa08>
 1030620:	48 8b 05 49 e0 09 00 	mov	rax, qword ptr [rip + 647241]
 1030627:	48 85 c0 	test	rax, rax
 103062a:	75 07 	jne	7 <_runtime.findrunnable+0xa53>
 103062c:	e8 6f 55 ff ff 	call	-43665 <_runtime.netpollBreak>
 1030631:	eb b5 	jmp	-75 <_runtime.findrunnable+0xa08>
 1030633:	48 39 c8 	cmp	rax, rcx
 1030636:	7f f4 	jg	-12 <_runtime.findrunnable+0xa4c>
 1030638:	eb ae 	jmp	-82 <_runtime.findrunnable+0xa08>
 103063a:	31 c0 	xor	eax, eax
 103063c:	eb de 	jmp	-34 <_runtime.findrunnable+0xa3c>
 103063e:	31 c0 	xor	eax, eax
 1030640:	e9 6e fc ff ff 	jmp	-914 <_runtime.findrunnable+0x6d3>
 1030645:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103064a:	31 c0 	xor	eax, eax
 103064c:	e9 48 fc ff ff 	jmp	-952 <_runtime.findrunnable+0x6b9>
 1030651:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030655:	e8 e6 69 00 00 	call	27110 <_runtime.pidleput>
 103065a:	31 c0 	xor	eax, eax
 103065c:	e9 0c fa ff ff 	jmp	-1524 <_runtime.findrunnable+0x48d>
 1030661:	31 c0 	xor	eax, eax
 1030663:	e9 b2 f9 ff ff 	jmp	-1614 <_runtime.findrunnable+0x43a>
 1030668:	b8 01 00 00 00 	mov	eax, 1
 103066d:	e9 a8 f9 ff ff 	jmp	-1624 <_runtime.findrunnable+0x43a>
 1030672:	31 c0 	xor	eax, eax
 1030674:	e9 a1 f9 ff ff 	jmp	-1631 <_runtime.findrunnable+0x43a>
 1030679:	48 89 04 24 	mov	qword ptr [rsp], rax
 103067d:	e8 1e 4a 00 00 	call	18974 <_runtime.acquirep>
 1030682:	0f b6 44 24 2e 	movzx	eax, byte ptr [rsp + 46]
 1030687:	84 c0 	test	al, al
 1030689:	74 28 	je	40 <_runtime.findrunnable+0xad3>
 103068b:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1030693:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1030697:	c6 81 14 01 00 00 01 	mov	byte ptr [rcx + 276], 1
 103069e:	b9 01 00 00 00 	mov	ecx, 1
 10306a3:	48 8d 15 12 e0 09 00 	lea	rdx, [rip + 647186]
 10306aa:	f0 	lock
 10306ab:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 10306ae:	e9 3f fd ff ff 	jmp	-705 <_runtime.findrunnable+0x812>
 10306b3:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 10306bb:	e9 32 fd ff ff 	jmp	-718 <_runtime.findrunnable+0x812>
 10306c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10306c4:	c7 44 24 08 00 00 00 00 	mov	dword ptr [rsp + 8], 0
 10306cc:	e8 1f 68 00 00 	call	26655 <_runtime.globrunqget>
 10306d1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10306d6:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 10306de:	48 8d 0d 93 df 09 00 	lea	rcx, [rip + 647059]
 10306e5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10306e9:	e8 22 7c fd ff 	call	-164830 <_runtime.unlock>
 10306ee:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 10306f6:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 10306fe:	c6 84 24 f0 00 00 00 00 	mov	byte ptr [rsp + 240], 0
 1030706:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 103070e:	48 81 c4 e0 00 00 00 	add	rsp, 224
 1030715:	c3 	ret
 1030716:	48 8d 05 5b df 09 00 	lea	rax, [rip + 647003]
 103071d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030721:	e8 ea 7b fd ff 	call	-164886 <_runtime.unlock>
 1030726:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103072e:	e9 bf fc ff ff 	jmp	-833 <_runtime.findrunnable+0x812>
 1030733:	84 03 	test	byte ptr [rbx], al
 1030735:	48 c7 83 88 16 00 00 02 00 00 00 	mov	qword ptr [rbx + 5768], 2
 1030740:	48 8b 83 80 16 00 00 	mov	rax, qword ptr [rbx + 5760]
 1030747:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 103074f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030753:	48 b9 04 00 00 00 01 00 00 00 	movabs	rcx, 4294967300
 103075d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1030762:	e8 a9 cb ff ff 	call	-13399 <_runtime.casgstatus>
 1030767:	80 3d c2 47 0a 00 00 	cmp	byte ptr [rip + 673730], 0
 103076e:	75 28 	jne	40 <_runtime.findrunnable+0xbb8>
 1030770:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 1030778:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 1030780:	c6 84 24 f0 00 00 00 00 	mov	byte ptr [rsp + 240], 0
 1030788:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 1030790:	48 81 c4 e0 00 00 00 	add	rsp, 224
 1030797:	c3 	ret
 1030798:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10307a0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10307a4:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10307ad:	e8 5e 66 01 00 	call	91742 <_runtime.traceGoUnpark>
 10307b2:	eb bc 	jmp	-68 <_runtime.findrunnable+0xb90>
 10307b4:	31 c0 	xor	eax, eax
 10307b6:	e9 9f f9 ff ff 	jmp	-1633 <_runtime.findrunnable+0x57a>
 10307bb:	b8 01 00 00 00 	mov	eax, 1
 10307c0:	e9 95 f9 ff ff 	jmp	-1643 <_runtime.findrunnable+0x57a>
 10307c5:	b8 01 00 00 00 	mov	eax, 1
 10307ca:	e9 8b f9 ff ff 	jmp	-1653 <_runtime.findrunnable+0x57a>
 10307cf:	31 c0 	xor	eax, eax
 10307d1:	e9 84 f9 ff ff 	jmp	-1660 <_runtime.findrunnable+0x57a>
 10307d6:	31 c0 	xor	eax, eax
 10307d8:	e9 7d f9 ff ff 	jmp	-1667 <_runtime.findrunnable+0x57a>
 10307dd:	c6 83 14 01 00 00 01 	mov	byte ptr [rbx + 276], 1
 10307e4:	bb 01 00 00 00 	mov	ebx, 1
 10307e9:	48 8d 35 cc de 09 00 	lea	rsi, [rip + 646860]
 10307f0:	f0 	lock
 10307f1:	0f c1 1e 	xadd	dword ptr [rsi], ebx
 10307f4:	e9 23 fd ff ff 	jmp	-733 <_runtime.findrunnable+0x93c>
 10307f9:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 1030801:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1030806:	4c 8b 44 24 38 	mov	r8, qword ptr [rsp + 56]
 103080b:	4c 89 c7 	mov	rdi, r8
 103080e:	48 89 ce 	mov	rsi, rcx
 1030811:	48 89 c3 	mov	rbx, rax
 1030814:	e9 d4 f8 ff ff 	jmp	-1836 <_runtime.findrunnable+0x50d>
 1030819:	8b 1d 9d de 09 00 	mov	ebx, dword ptr [rip + 646813]
 103081f:	8b 3d 93 de 09 00 	mov	edi, dword ptr [rip + 646803]
 1030825:	d1 e3 	shl	ebx
 1030827:	29 fe 	sub	esi, edi
 1030829:	39 f3 	cmp	ebx, esi
 103082b:	0f 93 c0 	setae	al
 103082e:	e9 d0 fc ff ff 	jmp	-816 <_runtime.findrunnable+0x923>
 1030833:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 103083b:	e8 30 54 ff ff 	call	-43984 <_runtime.netpoll>
 1030840:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1030845:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 103084a:	48 85 c0 	test	rax, rax
 103084d:	0f 84 8f fc ff ff 	je	-881 <_runtime.findrunnable+0x902>
 1030853:	90 	nop
 1030854:	90 	nop
 1030855:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 103085d:	48 85 c0 	test	rax, rax
 1030860:	74 0c 	je	12 <_runtime.findrunnable+0xc8e>
 1030862:	48 8b 88 a0 00 00 00 	mov	rcx, qword ptr [rax + 160]
 1030869:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 103086e:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1030873:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030877:	e8 34 04 00 00 	call	1076 <_runtime.injectglist>
 103087c:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 1030884:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030888:	48 b9 04 00 00 00 01 00 00 00 	movabs	rcx, 4294967300
 1030892:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1030897:	e8 74 ca ff ff 	call	-13708 <_runtime.casgstatus>
 103089c:	80 3d 8d 46 0a 00 00 	cmp	byte ptr [rip + 673421], 0
 10308a3:	75 28 	jne	40 <_runtime.findrunnable+0xced>
 10308a5:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10308ad:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 10308b5:	c6 84 24 f0 00 00 00 00 	mov	byte ptr [rsp + 240], 0
 10308bd:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 10308c5:	48 81 c4 e0 00 00 00 	add	rsp, 224
 10308cc:	c3 	ret
 10308cd:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10308d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10308d9:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10308e2:	e8 29 65 01 00 	call	91433 <_runtime.traceGoUnpark>
 10308e7:	eb bc 	jmp	-68 <_runtime.findrunnable+0xcc5>
 10308e9:	31 d2 	xor	edx, edx
 10308eb:	e9 ea fb ff ff 	jmp	-1046 <_runtime.findrunnable+0x8fa>
 10308f0:	31 d2 	xor	edx, edx
 10308f2:	e9 ce fb ff ff 	jmp	-1074 <_runtime.findrunnable+0x8e5>
 10308f7:	48 8d 05 7a dd 09 00 	lea	rax, [rip + 646522]
 10308fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030902:	e8 29 78 fd ff 	call	-165847 <_runtime.lock>
 1030907:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103090f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030913:	c7 44 24 08 00 00 00 00 	mov	dword ptr [rsp + 8], 0
 103091b:	e8 d0 65 00 00 	call	26064 <_runtime.globrunqget>
 1030920:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1030925:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 103092d:	48 8d 0d 44 dd 09 00 	lea	rcx, [rip + 646468]
 1030934:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030938:	e8 d3 79 fd ff 	call	-165421 <_runtime.unlock>
 103093d:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1030945:	48 85 c0 	test	rax, rax
 1030948:	0f 84 5e fb ff ff 	je	-1186 <_runtime.findrunnable+0x8cc>
 103094e:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 1030956:	c6 84 24 f0 00 00 00 00 	mov	byte ptr [rsp + 240], 0
 103095e:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 1030966:	48 81 c4 e0 00 00 00 	add	rsp, 224
 103096d:	c3 	ret
 103096e:	48 89 84 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rax
 1030976:	88 8c 24 f0 00 00 00 	mov	byte ptr [rsp + 240], cl
 103097d:	48 8b ac 24 d8 00 00 00 	mov	rbp, qword ptr [rsp + 216]
 1030985:	48 81 c4 e0 00 00 00 	add	rsp, 224
 103098c:	c3 	ret
 103098d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1030991:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103099a:	e8 b1 18 02 00 	call	137393 <_runtime.asmcgocall>
 103099f:	e9 d7 fa ff ff 	jmp	-1321 <_runtime.findrunnable+0x89b>
 10309a4:	e8 17 09 fe ff 	call	-128745 <_runtime.wakefing>
 10309a9:	48 83 3c 24 00 	cmp	qword ptr [rsp], 0
 10309ae:	75 0f 	jne	15 <_runtime.findrunnable+0xddf>
 10309b0:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10309b5:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10309ba:	e9 a9 fa ff ff 	jmp	-1367 <_runtime.findrunnable+0x888>
 10309bf:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10309c8:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10309cd:	e8 8e c0 ff ff 	call	-16242 <_runtime.ready>
 10309d2:	eb dc 	jmp	-36 <_runtime.findrunnable+0xdd0>
 10309d4:	e8 e7 d8 ff ff 	call	-10009 <_runtime.runSafePointFn>
 10309d9:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 10309e1:	e9 46 fa ff ff 	jmp	-1466 <_runtime.findrunnable+0x84c>
 10309e6:	48 8d 05 bf 57 04 00 	lea	rax, [rip + 284607]
 10309ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10309f1:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 10309fa:	e8 61 83 ff ff 	call	-31903 <_runtime.throw>
 10309ff:	48 8d 05 e3 48 04 00 	lea	rax, [rip + 280803]
 1030a06:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030a0a:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1030a13:	e8 48 83 ff ff 	call	-31928 <_runtime.throw>
 1030a18:	48 8d 05 05 54 04 00 	lea	rax, [rip + 283653]
 1030a1f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030a23:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 1030a2c:	e8 2f 83 ff ff 	call	-31953 <_runtime.throw>
 1030a31:	48 8d 05 ba 39 04 00 	lea	rax, [rip + 276922]
 1030a38:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030a3c:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 1030a45:	e8 16 83 ff ff 	call	-31978 <_runtime.throw>
 1030a4a:	e8 f1 68 ff ff 	call	-38671 <_runtime.panicdivide>
 1030a4f:	4c 89 c1 	mov	rcx, r8
 1030a52:	e8 f9 28 02 00 	call	141561 <_runtime.panicIndex>
 1030a57:	4c 89 d9 	mov	rcx, r11
 1030a5a:	e8 f1 28 02 00 	call	141553 <_runtime.panicIndex>
 1030a5f:	e8 dc 68 ff ff 	call	-38692 <_runtime.panicdivide>
 1030a64:	e8 d7 68 ff ff 	call	-38697 <_runtime.panicdivide>
 1030a69:	90 	nop
 1030a6a:	e8 61 01 02 00 	call	131425 <_runtime.morestack_noctxt>
 1030a6f:	e9 6c f1 ff ff 	jmp	-3732 <_runtime.findrunnable>
 1030a74:	cc 	int3
 1030a75:	cc 	int3
 1030a76:	cc 	int3
 1030a77:	cc 	int3
 1030a78:	cc 	int3
 1030a79:	cc 	int3
 1030a7a:	cc 	int3
 1030a7b:	cc 	int3
 1030a7c:	cc 	int3
 1030a7d:	cc 	int3
 1030a7e:	cc 	int3
 1030a7f:	cc 	int3

_runtime.pollWork:
 1030a80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1030a89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1030a8d:	0f 86 cc 00 00 00 	jbe	204 <_runtime.pollWork+0xdf>
 1030a93:	48 83 ec 20 	sub	rsp, 32
 1030a97:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1030a9c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1030aa1:	83 3d 28 dc 09 00 00 	cmp	dword ptr [rip + 646184], 0
 1030aa8:	0f 85 a2 00 00 00 	jne	162 <_runtime.pollWork+0xd0>
 1030aae:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1030ab7:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1030abb:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1030ac2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030ac6:	e8 05 66 00 00 	call	26117 <_runtime.runqempty>
 1030acb:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1030ad0:	74 6f 	je	111 <_runtime.pollWork+0xc1>
 1030ad2:	8b 05 d4 6c 0c 00 	mov	eax, dword ptr [rip + 814292]
 1030ad8:	85 c0 	test	eax, eax
 1030ada:	74 61 	je	97 <_runtime.pollWork+0xbd>
 1030adc:	8b 05 ce 6c 0c 00 	mov	eax, dword ptr [rip + 814286]
 1030ae2:	85 c0 	test	eax, eax
 1030ae4:	0f 97 c0 	seta	al
 1030ae7:	84 c0 	test	al, al
 1030ae9:	74 0a 	je	10 <_runtime.pollWork+0x75>
 1030aeb:	48 83 3d 75 db 09 00 00 	cmp	qword ptr [rip + 646005], 0
 1030af3:	75 0f 	jne	15 <_runtime.pollWork+0x84>
 1030af5:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 1030afa:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1030aff:	48 83 c4 20 	add	rsp, 32
 1030b03:	c3 	ret
 1030b04:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1030b0c:	e8 5f 51 ff ff 	call	-44705 <_runtime.netpoll>
 1030b11:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1030b16:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1030b1b:	48 85 c0 	test	rax, rax
 1030b1e:	74 d5 	je	-43 <_runtime.pollWork+0x75>
 1030b20:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1030b25:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030b29:	e8 82 01 00 00 	call	386 <_runtime.injectglist>
 1030b2e:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1030b33:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1030b38:	48 83 c4 20 	add	rsp, 32
 1030b3c:	c3 	ret
 1030b3d:	31 c0 	xor	eax, eax
 1030b3f:	eb a6 	jmp	-90 <_runtime.pollWork+0x67>
 1030b41:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1030b46:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1030b4b:	48 83 c4 20 	add	rsp, 32
 1030b4f:	c3 	ret
 1030b50:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1030b55:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1030b5a:	48 83 c4 20 	add	rsp, 32
 1030b5e:	c3 	ret
 1030b5f:	e8 6c 00 02 00 	call	131180 <_runtime.morestack_noctxt>
 1030b64:	e9 17 ff ff ff 	jmp	-233 <_runtime.pollWork>
 1030b69:	cc 	int3
 1030b6a:	cc 	int3
 1030b6b:	cc 	int3
 1030b6c:	cc 	int3
 1030b6d:	cc 	int3
 1030b6e:	cc 	int3
 1030b6f:	cc 	int3

_runtime.wakeNetPoller:
 1030b70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1030b79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1030b7d:	76 3e 	jbe	62 <_runtime.wakeNetPoller+0x4d>
 1030b7f:	48 83 ec 08 	sub	rsp, 8
 1030b83:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1030b87:	48 8d 2c 24 	lea	rbp, [rsp]
 1030b8b:	48 8b 05 d6 da 09 00 	mov	rax, qword ptr [rip + 645846]
 1030b92:	48 85 c0 	test	rax, rax
 1030b95:	75 11 	jne	17 <_runtime.wakeNetPoller+0x38>
 1030b97:	48 8b 05 d2 da 09 00 	mov	rax, qword ptr [rip + 645842]
 1030b9e:	48 85 c0 	test	rax, rax
 1030ba1:	75 0e 	jne	14 <_runtime.wakeNetPoller+0x41>
 1030ba3:	e8 f8 4f ff ff 	call	-45064 <_runtime.netpollBreak>
 1030ba8:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1030bac:	48 83 c4 08 	add	rsp, 8
 1030bb0:	c3 	ret
 1030bb1:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1030bb6:	48 39 c8 	cmp	rax, rcx
 1030bb9:	7f e8 	jg	-24 <_runtime.wakeNetPoller+0x33>
 1030bbb:	eb eb 	jmp	-21 <_runtime.wakeNetPoller+0x38>
 1030bbd:	e8 0e 00 02 00 	call	131086 <_runtime.morestack_noctxt>
 1030bc2:	eb ac 	jmp	-84 <_runtime.wakeNetPoller>
 1030bc4:	cc 	int3
 1030bc5:	cc 	int3
 1030bc6:	cc 	int3
 1030bc7:	cc 	int3
 1030bc8:	cc 	int3
 1030bc9:	cc 	int3
 1030bca:	cc 	int3
 1030bcb:	cc 	int3
 1030bcc:	cc 	int3
 1030bcd:	cc 	int3
 1030bce:	cc 	int3
 1030bcf:	cc 	int3

_runtime.resetspinning:
 1030bd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1030bd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1030bdd:	0f 86 b9 00 00 00 	jbe	185 <_runtime.resetspinning+0xcc>
 1030be3:	48 83 ec 18 	sub	rsp, 24
 1030be7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1030bec:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1030bf1:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1030bfa:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1030bfe:	80 b9 14 01 00 00 00 	cmp	byte ptr [rcx + 276], 0
 1030c05:	74 7b 	je	123 <_runtime.resetspinning+0xb2>
 1030c07:	c6 81 14 01 00 00 00 	mov	byte ptr [rcx + 276], 0
 1030c0e:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1030c13:	48 8d 15 a2 da 09 00 	lea	rdx, [rip + 645794]
 1030c1a:	f0 	lock
 1030c1b:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 1030c1e:	ff c9 	dec	ecx
 1030c20:	85 c9 	test	ecx, ecx
 1030c22:	7c 45 	jl	69 <_runtime.resetspinning+0x99>
 1030c24:	75 3f 	jne	63 <_runtime.resetspinning+0x95>
 1030c26:	8b 0d 8c da 09 00 	mov	ecx, dword ptr [rip + 645772]
 1030c2c:	85 c9 	test	ecx, ecx
 1030c2e:	0f 97 c1 	seta	cl
 1030c31:	84 c9 	test	cl, cl
 1030c33:	74 12 	je	18 <_runtime.resetspinning+0x77>
 1030c35:	31 c0 	xor	eax, eax
 1030c37:	b9 01 00 00 00 	mov	ecx, 1
 1030c3c:	f0 	lock
 1030c3d:	0f b1 0a 	cmpxchg	dword ptr [rdx], ecx
 1030c40:	0f 94 c1 	sete	cl
 1030c43:	84 c9 	test	cl, cl
 1030c45:	75 0a 	jne	10 <_runtime.resetspinning+0x81>
 1030c47:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1030c4c:	48 83 c4 18 	add	rsp, 24
 1030c50:	c3 	ret
 1030c51:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1030c59:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 1030c5e:	e8 2d e4 ff ff 	call	-7123 <_runtime.startm>
 1030c63:	eb e2 	jmp	-30 <_runtime.resetspinning+0x77>
 1030c65:	31 c9 	xor	ecx, ecx
 1030c67:	eb c8 	jmp	-56 <_runtime.resetspinning+0x61>
 1030c69:	48 8d 05 b4 51 04 00 	lea	rax, [rip + 283060]
 1030c70:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030c74:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 1030c7d:	e8 de 80 ff ff 	call	-32546 <_runtime.throw>
 1030c82:	48 8d 05 da 4d 04 00 	lea	rax, [rip + 282074]
 1030c89:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030c8d:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 1030c96:	e8 c5 80 ff ff 	call	-32571 <_runtime.throw>
 1030c9b:	90 	nop
 1030c9c:	e8 2f ff 01 00 	call	130863 <_runtime.morestack_noctxt>
 1030ca1:	e9 2a ff ff ff 	jmp	-214 <_runtime.resetspinning>
 1030ca6:	cc 	int3
 1030ca7:	cc 	int3
 1030ca8:	cc 	int3
 1030ca9:	cc 	int3
 1030caa:	cc 	int3
 1030cab:	cc 	int3
 1030cac:	cc 	int3
 1030cad:	cc 	int3
 1030cae:	cc 	int3
 1030caf:	cc 	int3

_runtime.injectglist:
 1030cb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1030cb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1030cbd:	0f 86 62 01 00 00 	jbe	354 <_runtime.injectglist+0x175>
 1030cc3:	48 83 ec 30 	sub	rsp, 48
 1030cc7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1030ccc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1030cd1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1030cd6:	48 8b 08 	mov	rcx, qword ptr [rax]
 1030cd9:	48 85 c9 	test	rcx, rcx
 1030cdc:	0f 84 39 01 00 00 	je	313 <_runtime.injectglist+0x16b>
 1030ce2:	80 3d 47 42 0a 00 00 	cmp	byte ptr [rip + 672327], 0
 1030ce9:	74 2f 	je	47 <_runtime.injectglist+0x6a>
 1030ceb:	eb 28 	jmp	40 <_runtime.injectglist+0x65>
 1030ced:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1030cf2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030cf6:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1030cff:	e8 0c 61 01 00 	call	90380 <_runtime.traceGoUnpark>
 1030d04:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1030d09:	48 8b 88 a0 00 00 00 	mov	rcx, qword ptr [rax + 160]
 1030d10:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1030d15:	48 85 c9 	test	rcx, rcx
 1030d18:	75 d3 	jne	-45 <_runtime.injectglist+0x3d>
 1030d1a:	48 8d 05 57 d9 09 00 	lea	rax, [rip + 645463]
 1030d21:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030d25:	e8 06 74 fd ff 	call	-166906 <_runtime.lock>
 1030d2a:	31 c0 	xor	eax, eax
 1030d2c:	eb 17 	jmp	23 <_runtime.injectglist+0x95>
 1030d2e:	90 	nop
 1030d2f:	48 89 15 92 d9 09 00 	mov	qword ptr [rip + 645522], rdx
 1030d36:	ff 05 94 d9 09 00 	inc	dword ptr [rip + 645524]
 1030d3c:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1030d41:	48 8d 41 01 	lea	rax, [rcx + 1]
 1030d45:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1030d4a:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1030d4f:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1030d52:	48 85 d2 	test	rdx, rdx
 1030d55:	74 6a 	je	106 <_runtime.injectglist+0x111>
 1030d57:	90 	nop
 1030d58:	90 	nop
 1030d59:	48 85 d2 	test	rdx, rdx
 1030d5c:	74 0a 	je	10 <_runtime.injectglist+0xb8>
 1030d5e:	48 8b 9a a0 00 00 00 	mov	rbx, qword ptr [rdx + 160]
 1030d65:	48 89 19 	mov	qword ptr [rcx], rbx
 1030d68:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1030d6d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1030d71:	48 b8 04 00 00 00 01 00 00 00 	movabs	rax, 4294967300
 1030d7b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1030d80:	e8 8b c5 ff ff 	call	-14965 <_runtime.casgstatus>
 1030d85:	90 	nop
 1030d86:	90 	nop
 1030d87:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1030d8c:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 1030d97:	48 8b 0d 2a d9 09 00 	mov	rcx, qword ptr [rip + 645418]
 1030d9e:	48 85 c9 	test	rcx, rcx
 1030da1:	74 0f 	je	15 <_runtime.injectglist+0x102>
 1030da3:	48 89 c2 	mov	rdx, rax
 1030da6:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 1030dad:	e9 7c ff ff ff 	jmp	-132 <_runtime.injectglist+0x7e>
 1030db2:	48 89 c2 	mov	rdx, rax
 1030db5:	48 89 05 04 d9 09 00 	mov	qword ptr [rip + 645380], rax
 1030dbc:	e9 6d ff ff ff 	jmp	-147 <_runtime.injectglist+0x7e>
 1030dc1:	48 8d 05 b0 d8 09 00 	lea	rax, [rip + 645296]
 1030dc8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1030dcc:	e8 3f 75 fd ff 	call	-166593 <_runtime.unlock>
 1030dd1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1030dd6:	eb 1f 	jmp	31 <_runtime.injectglist+0x147>
 1030dd8:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1030ddd:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1030de5:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1030dea:	e8 a1 e2 ff ff 	call	-7519 <_runtime.startm>
 1030def:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1030df4:	48 ff c8 	dec	rax
 1030df7:	48 85 c0 	test	rax, rax
 1030dfa:	74 09 	je	9 <_runtime.injectglist+0x155>
 1030dfc:	83 3d b5 d8 09 00 00 	cmp	dword ptr [rip + 645301], 0
 1030e03:	75 d3 	jne	-45 <_runtime.injectglist+0x128>
 1030e05:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1030e0a:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 1030e11:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1030e16:	48 83 c4 30 	add	rsp, 48
 1030e1a:	c3 	ret
 1030e1b:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1030e20:	48 83 c4 30 	add	rsp, 48
 1030e24:	c3 	ret
 1030e25:	e8 a6 fd 01 00 	call	130470 <_runtime.morestack_noctxt>
 1030e2a:	e9 81 fe ff ff 	jmp	-383 <_runtime.injectglist>
 1030e2f:	cc 	int3

_runtime.schedule:
 1030e30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1030e39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1030e3d:	0f 86 07 05 00 00 	jbe	1287 <_runtime.schedule+0x51a>
 1030e43:	48 83 ec 60 	sub	rsp, 96
 1030e47:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 1030e4c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1030e51:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1030e5a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1030e5e:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 1030e65:	0f 85 c5 04 00 00 	jne	1221 <_runtime.schedule+0x500>
 1030e6b:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1030e70:	48 83 b9 68 01 00 00 00 	cmp	qword ptr [rcx + 360], 0
 1030e78:	0f 85 53 04 00 00 	jne	1107 <_runtime.schedule+0x4a1>
 1030e7e:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1030e82:	80 b9 18 01 00 00 00 	cmp	byte ptr [rcx + 280], 0
 1030e89:	74 13 	je	19 <_runtime.schedule+0x6e>
 1030e8b:	e9 87 04 00 00 	jmp	1159 <_runtime.schedule+0x4e7>
 1030e90:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030e94:	e8 f7 e9 ff ff 	call	-5641 <_runtime.startlockedm>
 1030e99:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1030e9e:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1030ea2:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1030ea9:	84 01 	test	byte ptr [rcx], al
 1030eab:	c6 81 a0 27 00 00 00 	mov	byte ptr [rcx + 10144], 0
 1030eb2:	83 3d a7 d8 09 00 00 	cmp	dword ptr [rip + 645287], 0
 1030eb9:	0f 85 03 04 00 00 	jne	1027 <_runtime.schedule+0x492>
 1030ebf:	83 b9 60 27 00 00 00 	cmp	dword ptr [rcx + 10080], 0
 1030ec6:	0f 85 dd 03 00 00 	jne	989 <_runtime.schedule+0x479>
 1030ecc:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 1030ed0:	80 ba 14 01 00 00 00 	cmp	byte ptr [rdx + 276], 0
 1030ed7:	74 20 	je	32 <_runtime.schedule+0xc9>
 1030ed9:	48 83 b9 f8 0d 00 00 00 	cmp	qword ptr [rcx + 3576], 0
 1030ee1:	0f 85 17 04 00 00 	jne	1047 <_runtime.schedule+0x4ce>
 1030ee7:	8b 91 f4 05 00 00 	mov	edx, dword ptr [rcx + 1524]
 1030eed:	39 91 f0 05 00 00 	cmp	dword ptr [rcx + 1520], edx
 1030ef3:	0f 85 05 04 00 00 	jne	1029 <_runtime.schedule+0x4ce>
 1030ef9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030efd:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1030f06:	e8 55 04 00 00 	call	1109 <_runtime.checkTimers>
 1030f0b:	80 3d 1e 40 0a 00 00 	cmp	byte ptr [rip + 671774], 0
 1030f12:	0f 84 7b 03 00 00 	je	891 <_runtime.schedule+0x463>
 1030f18:	e8 23 4a 01 00 	call	84515 <_runtime.traceReader>
 1030f1d:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1030f21:	48 85 c0 	test	rax, rax
 1030f24:	0f 85 2c 03 00 00 	jne	812 <_runtime.schedule+0x426>
 1030f2a:	0f 95 c1 	setne	cl
 1030f2d:	48 85 c0 	test	rax, rax
 1030f30:	0f 84 c7 02 00 00 	je	711 <_runtime.schedule+0x3cd>
 1030f36:	88 4c 24 2d 	mov	byte ptr [rsp + 45], cl
 1030f3a:	48 85 c0 	test	rax, rax
 1030f3d:	0f 84 29 02 00 00 	je	553 <_runtime.schedule+0x33c>
 1030f43:	48 85 c0 	test	rax, rax
 1030f46:	0f 84 f3 01 00 00 	je	499 <_runtime.schedule+0x30f>
 1030f4c:	31 d2 	xor	edx, edx
 1030f4e:	48 85 c0 	test	rax, rax
 1030f51:	0f 84 d0 01 00 00 	je	464 <_runtime.schedule+0x2f7>
 1030f57:	88 54 24 2e 	mov	byte ptr [rsp + 46], dl
 1030f5b:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1030f60:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1030f65:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 1030f69:	80 be 14 01 00 00 00 	cmp	byte ptr [rsi + 276], 0
 1030f70:	0f 85 93 01 00 00 	jne	403 <_runtime.schedule+0x2d9>
 1030f76:	80 3d 5b d7 09 00 00 	cmp	byte ptr [rip + 644955], 0
 1030f7d:	0f 85 5c 01 00 00 	jne	348 <_runtime.schedule+0x2af>
 1030f83:	31 f6 	xor	esi, esi
 1030f85:	40 84 f6 	test	sil, sil
 1030f88:	0f 85 a8 00 00 00 	jne	168 <_runtime.schedule+0x206>
 1030f8e:	84 c9 	test	cl, cl
 1030f90:	0f 84 96 00 00 00 	je	150 <_runtime.schedule+0x1fc>
 1030f96:	8b 0d 1c d7 09 00 	mov	ecx, dword ptr [rip + 644892]
 1030f9c:	85 c9 	test	ecx, ecx
 1030f9e:	0f 84 84 00 00 00 	je	132 <_runtime.schedule+0x1f8>
 1030fa4:	8b 0d 12 d7 09 00 	mov	ecx, dword ptr [rip + 644882]
 1030faa:	85 c9 	test	ecx, ecx
 1030fac:	0f 94 c1 	sete	cl
 1030faf:	84 c9 	test	cl, cl
 1030fb1:	74 6b 	je	107 <_runtime.schedule+0x1ee>
 1030fb3:	48 89 c1 	mov	rcx, rax
 1030fb6:	31 c0 	xor	eax, eax
 1030fb8:	48 8d 35 fd d6 09 00 	lea	rsi, [rip + 644861]
 1030fbf:	bf 01 00 00 00 	mov	edi, 1
 1030fc4:	f0 	lock
 1030fc5:	0f b1 3e 	cmpxchg	dword ptr [rsi], edi
 1030fc8:	40 0f 94 c6 	sete	sil
 1030fcc:	40 84 f6 	test	sil, sil
 1030fcf:	75 25 	jne	37 <_runtime.schedule+0x1c6>
 1030fd1:	48 83 b9 d8 00 00 00 00 	cmp	qword ptr [rcx + 216], 0
 1030fd9:	0f 85 b1 fe ff ff 	jne	-335 <_runtime.schedule+0x60>
 1030fdf:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1030fe3:	88 54 24 08 	mov	byte ptr [rsp + 8], dl
 1030fe7:	e8 84 ea ff ff 	call	-5500 <_runtime.execute>
 1030fec:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1030ff1:	48 83 c4 60 	add	rsp, 96
 1030ff5:	c3 	ret
 1030ff6:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1030ffe:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 1031003:	e8 88 e0 ff ff 	call	-8056 <_runtime.startm>
 1031008:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103100d:	0f b6 54 24 2e 	movzx	edx, byte ptr [rsp + 46]
 1031012:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1031017:	bf 01 00 00 00 	mov	edi, 1
 103101c:	eb b3 	jmp	-77 <_runtime.schedule+0x1a1>
 103101e:	48 89 c1 	mov	rcx, rax
 1031021:	bf 01 00 00 00 	mov	edi, 1
 1031026:	eb a9 	jmp	-87 <_runtime.schedule+0x1a1>
 1031028:	31 c9 	xor	ecx, ecx
 103102a:	eb 83 	jmp	-125 <_runtime.schedule+0x17f>
 103102c:	48 89 c1 	mov	rcx, rax
 103102f:	bf 01 00 00 00 	mov	edi, 1
 1031034:	eb 9b 	jmp	-101 <_runtime.schedule+0x1a1>
 1031036:	48 8d 05 3b d6 09 00 	lea	rax, [rip + 644667]
 103103d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031041:	e8 ea 70 fd ff 	call	-167702 <_runtime.lock>
 1031046:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103104b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103104f:	e8 2c 5e 00 00 	call	24108 <_runtime.schedEnabled>
 1031054:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1031059:	75 5b 	jne	91 <_runtime.schedule+0x286>
 103105b:	90 	nop
 103105c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031061:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 103106c:	48 8b 0d 75 d6 09 00 	mov	rcx, qword ptr [rip + 644725]
 1031073:	48 85 c9 	test	rcx, rcx
 1031076:	74 32 	je	50 <_runtime.schedule+0x27a>
 1031078:	48 89 c2 	mov	rdx, rax
 103107b:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 1031082:	90 	nop
 1031083:	48 89 15 5e d6 09 00 	mov	qword ptr [rip + 644702], rdx
 103108a:	ff 05 60 d6 09 00 	inc	dword ptr [rip + 644704]
 1031090:	48 8d 05 e1 d5 09 00 	lea	rax, [rip + 644577]
 1031097:	48 89 04 24 	mov	qword ptr [rsp], rax
 103109b:	e8 70 72 fd ff 	call	-167312 <_runtime.unlock>
 10310a0:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10310a5:	e9 f4 fd ff ff 	jmp	-524 <_runtime.schedule+0x6e>
 10310aa:	48 89 c2 	mov	rdx, rax
 10310ad:	48 89 05 2c d6 09 00 	mov	qword ptr [rip + 644652], rax
 10310b4:	eb cc 	jmp	-52 <_runtime.schedule+0x252>
 10310b6:	48 8d 05 bb d5 09 00 	lea	rax, [rip + 644539]
 10310bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10310c1:	e8 4a 72 fd ff 	call	-167350 <_runtime.unlock>
 10310c6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10310cb:	0f b6 4c 24 2d 	movzx	ecx, byte ptr [rsp + 45]
 10310d0:	0f b6 54 24 2e 	movzx	edx, byte ptr [rsp + 46]
 10310d5:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 10310da:	e9 af fe ff ff 	jmp	-337 <_runtime.schedule+0x15e>
 10310df:	48 89 04 24 	mov	qword ptr [rsp], rax
 10310e3:	e8 98 5d 00 00 	call	23960 <_runtime.schedEnabled>
 10310e8:	0f b6 74 24 08 	movzx	esi, byte ptr [rsp + 8]
 10310ed:	83 f6 01 	xor	esi, 1
 10310f0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10310f5:	0f b6 4c 24 2d 	movzx	ecx, byte ptr [rsp + 45]
 10310fa:	0f b6 54 24 2e 	movzx	edx, byte ptr [rsp + 46]
 10310ff:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1031104:	e9 7c fe ff ff 	jmp	-388 <_runtime.schedule+0x155>
 1031109:	e8 c2 fa ff ff 	call	-1342 <_runtime.resetspinning>
 103110e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031113:	0f b6 4c 24 2d 	movzx	ecx, byte ptr [rsp + 45]
 1031118:	0f b6 54 24 2e 	movzx	edx, byte ptr [rsp + 46]
 103111d:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 1031122:	e9 4f fe ff ff 	jmp	-433 <_runtime.schedule+0x146>
 1031127:	e8 b4 ea ff ff 	call	-5452 <_runtime.findrunnable>
 103112c:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1031130:	0f b6 54 24 08 	movzx	edx, byte ptr [rsp + 8]
 1031135:	0f b6 4c 24 2d 	movzx	ecx, byte ptr [rsp + 45]
 103113a:	e9 18 fe ff ff 	jmp	-488 <_runtime.schedule+0x127>
 103113f:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1031144:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031148:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 103114f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1031153:	e8 b8 62 00 00 	call	25272 <_runtime.runqget>
 1031158:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103115d:	0f b6 54 24 10 	movzx	edx, byte ptr [rsp + 16]
 1031162:	0f b6 4c 24 2d 	movzx	ecx, byte ptr [rsp + 45]
 1031167:	e9 e2 fd ff ff 	jmp	-542 <_runtime.schedule+0x11e>
 103116c:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1031171:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1031175:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 103117c:	8b 5b 10 	mov	ebx, dword ptr [rbx + 16]
 103117f:	69 db 15 97 0c c1 	imul	ebx, ebx, 3238827797
 1031185:	81 fb 53 5c 32 04 	cmp	ebx, 70409299
 103118b:	0f 87 b2 fd ff ff 	ja	-590 <_runtime.schedule+0x113>
 1031191:	83 3d 38 d5 09 00 00 	cmp	dword ptr [rip + 644408], 0
 1031198:	0f 8e a5 fd ff ff 	jle	-603 <_runtime.schedule+0x113>
 103119e:	48 8d 05 d3 d4 09 00 	lea	rax, [rip + 644307]
 10311a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10311a9:	e8 82 6f fd ff 	call	-168062 <_runtime.lock>
 10311ae:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10311b3:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10311b7:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 10311be:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10311c2:	c7 44 24 08 01 00 00 00 	mov	dword ptr [rsp + 8], 1
 10311ca:	e8 21 5d 00 00 	call	23841 <_runtime.globrunqget>
 10311cf:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10311d4:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10311d9:	48 8d 0d 98 d4 09 00 	lea	rcx, [rip + 644248]
 10311e0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10311e4:	e8 27 71 fd ff 	call	-167641 <_runtime.unlock>
 10311e9:	0f b6 4c 24 2d 	movzx	ecx, byte ptr [rsp + 45]
 10311ee:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10311f3:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10311f8:	e9 46 fd ff ff 	jmp	-698 <_runtime.schedule+0x113>
 10311fd:	83 3d 8c 65 0c 00 00 	cmp	dword ptr [rip + 812428], 0
 1031204:	0f 84 2c fd ff ff 	je	-724 <_runtime.schedule+0x106>
 103120a:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 103120e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1031213:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031217:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 103121e:	48 8d 15 5b 6b 0c 00 	lea	rdx, [rip + 813915]
 1031225:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1031229:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103122e:	e8 fd 0f fe ff 	call	-126979 <_runtime.(*gcControllerState).findRunnableGCWorker>
 1031233:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1031238:	0f b6 4c 24 2f 	movzx	ecx, byte ptr [rsp + 47]
 103123d:	84 c9 	test	cl, cl
 103123f:	74 0a 	je	10 <_runtime.schedule+0x41b>
 1031241:	b9 01 00 00 00 	mov	ecx, 1
 1031246:	e9 eb fc ff ff 	jmp	-789 <_runtime.schedule+0x106>
 103124b:	48 85 c0 	test	rax, rax
 103124e:	0f 95 c1 	setne	cl
 1031251:	e9 e0 fc ff ff 	jmp	-800 <_runtime.schedule+0x106>
 1031256:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 103125b:	48 b8 04 00 00 00 01 00 00 00 	movabs	rax, 4294967300
 1031265:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103126a:	e8 a1 c0 ff ff 	call	-16223 <_runtime.casgstatus>
 103126f:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1031274:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031278:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1031281:	e8 8a 5b 01 00 	call	88970 <_runtime.traceGoUnpark>
 1031286:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103128b:	48 85 c0 	test	rax, rax
 103128e:	e9 97 fc ff ff 	jmp	-873 <_runtime.schedule+0xfa>
 1031293:	80 3d 97 3c 0a 00 00 	cmp	byte ptr [rip + 670871], 0
 103129a:	0f 85 78 fc ff ff 	jne	-904 <_runtime.schedule+0xe8>
 10312a0:	31 c0 	xor	eax, eax
 10312a2:	31 c9 	xor	ecx, ecx
 10312a4:	e9 84 fc ff ff 	jmp	-892 <_runtime.schedule+0xfd>
 10312a9:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10312ae:	e8 0d d0 ff ff 	call	-12275 <_runtime.runSafePointFn>
 10312b3:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10312b8:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10312bd:	e9 0a fc ff ff 	jmp	-1014 <_runtime.schedule+0x9c>
 10312c2:	e8 99 e6 ff ff 	call	-6503 <_runtime.gcstopm>
 10312c7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10312cc:	e9 cd fb ff ff 	jmp	-1075 <_runtime.schedule+0x6e>
 10312d1:	e8 0a e3 ff ff 	call	-7414 <_runtime.stoplockedm>
 10312d6:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10312db:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10312df:	48 8b 89 68 01 00 00 	mov	rcx, qword ptr [rcx + 360]
 10312e6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10312ea:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 10312ef:	e8 7c e7 ff ff 	call	-6276 <_runtime.execute>
 10312f4:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10312f9:	e9 80 fb ff ff 	jmp	-1152 <_runtime.schedule+0x4e>
 10312fe:	48 8d 05 1e 4e 04 00 	lea	rax, [rip + 282142]
 1031305:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031309:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 1031312:	e8 49 7a ff ff 	call	-34231 <_runtime.throw>
 1031317:	48 8d 05 04 29 04 00 	lea	rax, [rip + 272644]
 103131e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031322:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 103132b:	e8 30 7a ff ff 	call	-34256 <_runtime.throw>
 1031330:	48 8d 05 5d 36 04 00 	lea	rax, [rip + 276061]
 1031337:	48 89 04 24 	mov	qword ptr [rsp], rax
 103133b:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1031344:	e8 17 7a ff ff 	call	-34281 <_runtime.throw>
 1031349:	90 	nop
 103134a:	e8 81 f8 01 00 	call	129153 <_runtime.morestack_noctxt>
 103134f:	e9 dc fa ff ff 	jmp	-1316 <_runtime.schedule>
 1031354:	cc 	int3
 1031355:	cc 	int3
 1031356:	cc 	int3
 1031357:	cc 	int3
 1031358:	cc 	int3
 1031359:	cc 	int3
 103135a:	cc 	int3
 103135b:	cc 	int3
 103135c:	cc 	int3
 103135d:	cc 	int3
 103135e:	cc 	int3
 103135f:	cc 	int3

_runtime.checkTimers:
 1031360:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031369:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103136d:	0f 86 41 02 00 00 	jbe	577 <_runtime.checkTimers+0x254>
 1031373:	48 83 ec 48 	sub	rsp, 72
 1031377:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 103137c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1031381:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1031386:	84 00 	test	byte ptr [rax], al
 1031388:	8b 88 8c 27 00 00 	mov	ecx, dword ptr [rax + 10124]
 103138e:	85 c9 	test	ecx, ecx
 1031390:	0f 85 14 02 00 00 	jne	532 <_runtime.checkTimers+0x24a>
 1031396:	48 8b 88 68 16 00 00 	mov	rcx, qword ptr [rax + 5736]
 103139d:	48 85 c9 	test	rcx, rcx
 10313a0:	0f 84 e2 01 00 00 	je	482 <_runtime.checkTimers+0x228>
 10313a6:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 10313ab:	48 85 d2 	test	rdx, rdx
 10313ae:	0f 84 b7 01 00 00 	je	439 <_runtime.checkTimers+0x20b>
 10313b4:	48 39 ca 	cmp	rdx, rcx
 10313b7:	7d 2a 	jge	42 <_runtime.checkTimers+0x83>
 10313b9:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 10313c2:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 10313c6:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 10313cd:	48 39 d8 	cmp	rax, rbx
 10313d0:	0f 84 79 01 00 00 	je	377 <_runtime.checkTimers+0x1ef>
 10313d6:	bb 01 00 00 00 	mov	ebx, 1
 10313db:	84 db 	test	bl, bl
 10313dd:	0f 85 53 01 00 00 	jne	339 <_runtime.checkTimers+0x1d6>
 10313e3:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 10313e8:	48 8d 88 68 27 00 00 	lea	rcx, [rax + 10088]
 10313ef:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 10313f4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10313f8:	e8 33 6d fd ff 	call	-168653 <_runtime.lock>
 10313fd:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1031402:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031406:	e8 65 33 01 00 	call	78693 <_runtime.adjusttimers>
 103140b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1031410:	48 83 b8 78 27 00 00 00 	cmp	qword ptr [rax + 10104], 0
 1031418:	0f 8e 0a 01 00 00 	jle	266 <_runtime.checkTimers+0x1c8>
 103141e:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1031423:	48 85 c9 	test	rcx, rcx
 1031426:	0f 84 e9 00 00 00 	je	233 <_runtime.checkTimers+0x1b5>
 103142c:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1031431:	31 d2 	xor	edx, edx
 1031433:	eb 0f 	jmp	15 <_runtime.checkTimers+0xe4>
 1031435:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103143a:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103143f:	ba 01 00 00 00 	mov	edx, 1
 1031444:	88 54 24 1f 	mov	byte ptr [rsp + 31], dl
 1031448:	48 83 b8 78 27 00 00 00 	cmp	qword ptr [rax + 10104], 0
 1031450:	0f 8e b8 00 00 00 	jle	184 <_runtime.checkTimers+0x1ae>
 1031456:	48 89 04 24 	mov	qword ptr [rsp], rax
 103145a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103145f:	e8 2c 37 01 00 	call	79660 <_runtime.runtimer>
 1031464:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1031469:	48 85 c0 	test	rax, rax
 103146c:	74 c7 	je	-57 <_runtime.checkTimers+0xd5>
 103146e:	b9 00 00 00 00 	mov	ecx, 0
 1031473:	48 0f 4f c8 	cmovg	rcx, rax
 1031477:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 103147c:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1031481:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 103148a:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 103148e:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 1031495:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 103149a:	48 39 de 	cmp	rsi, rbx
 103149d:	75 6b 	jne	107 <_runtime.checkTimers+0x1aa>
 103149f:	8b 9e 90 27 00 00 	mov	ebx, dword ptr [rsi + 10128]
 10314a5:	89 db 	mov	ebx, ebx
 10314a7:	48 8b be 78 27 00 00 	mov	rdi, qword ptr [rsi + 10104]
 10314ae:	48 c1 ef 02 	shr	rdi, 2
 10314b2:	48 39 fb 	cmp	rbx, rdi
 10314b5:	0f 9f c3 	setg	bl
 10314b8:	88 44 24 1f 	mov	byte ptr [rsp + 31], al
 10314bc:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10314c1:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10314c6:	84 db 	test	bl, bl
 10314c8:	75 35 	jne	53 <_runtime.checkTimers+0x19f>
 10314ca:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10314cf:	48 89 04 24 	mov	qword ptr [rsp], rax
 10314d3:	e8 38 6e fd ff 	call	-168392 <_runtime.unlock>
 10314d8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10314dd:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 10314e2:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10314e7:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 10314ec:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 10314f1:	88 44 24 70 	mov	byte ptr [rsp + 112], al
 10314f5:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10314fa:	48 83 c4 48 	add	rsp, 72
 10314fe:	c3 	ret
 10314ff:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1031503:	e8 d8 3a 01 00 	call	80600 <_runtime.clearDeletedTimers>
 1031508:	eb c0 	jmp	-64 <_runtime.checkTimers+0x16a>
 103150a:	31 db 	xor	ebx, ebx
 103150c:	eb aa 	jmp	-86 <_runtime.checkTimers+0x158>
 103150e:	31 c9 	xor	ecx, ecx
 1031510:	e9 62 ff ff ff 	jmp	-158 <_runtime.checkTimers+0x117>
 1031515:	e8 a6 1d 01 00 	call	73126 <_runtime.nanotime1>
 103151a:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 103151e:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1031523:	e9 04 ff ff ff 	jmp	-252 <_runtime.checkTimers+0xcc>
 1031528:	31 c0 	xor	eax, eax
 103152a:	31 c9 	xor	ecx, ecx
 103152c:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1031531:	e9 4b ff ff ff 	jmp	-181 <_runtime.checkTimers+0x121>
 1031536:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 103153b:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1031540:	c6 44 24 70 00 	mov	byte ptr [rsp + 112], 0
 1031545:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 103154a:	48 83 c4 48 	add	rsp, 72
 103154e:	c3 	ret
 103154f:	8b b0 90 27 00 00 	mov	esi, dword ptr [rax + 10128]
 1031555:	8b b8 88 27 00 00 	mov	edi, dword ptr [rax + 10120]
 103155b:	89 f6 	mov	esi, esi
 103155d:	c1 ef 02 	shr	edi, 2
 1031560:	48 39 fe 	cmp	rsi, rdi
 1031563:	0f 9e c3 	setle	bl
 1031566:	e9 70 fe ff ff 	jmp	-400 <_runtime.checkTimers+0x7b>
 103156b:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1031570:	e8 4b 1d 01 00 	call	73035 <_runtime.nanotime1>
 1031575:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 1031579:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103157e:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1031583:	e9 2c fe ff ff 	jmp	-468 <_runtime.checkTimers+0x54>
 1031588:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103158d:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1031592:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 103159b:	c6 44 24 70 00 	mov	byte ptr [rsp + 112], 0
 10315a0:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10315a5:	48 83 c4 48 	add	rsp, 72
 10315a9:	c3 	ret
 10315aa:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 10315af:	e9 2f fe ff ff 	jmp	-465 <_runtime.checkTimers+0x83>
 10315b4:	e8 17 f6 01 00 	call	128535 <_runtime.morestack_noctxt>
 10315b9:	e9 a2 fd ff ff 	jmp	-606 <_runtime.checkTimers>
 10315be:	cc 	int3
 10315bf:	cc 	int3

_runtime.parkunlock_c:
 10315c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10315c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10315cd:	76 2b 	jbe	43 <_runtime.parkunlock_c+0x3a>
 10315cf:	48 83 ec 10 	sub	rsp, 16
 10315d3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 10315d8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 10315dd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10315e2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10315e6:	e8 25 6d fd ff 	call	-168667 <_runtime.unlock>
 10315eb:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 10315f0:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10315f5:	48 83 c4 10 	add	rsp, 16
 10315f9:	c3 	ret
 10315fa:	e8 d1 f5 01 00 	call	128465 <_runtime.morestack_noctxt>
 10315ff:	eb bf 	jmp	-65 <_runtime.parkunlock_c>
 1031601:	cc 	int3
 1031602:	cc 	int3
 1031603:	cc 	int3
 1031604:	cc 	int3
 1031605:	cc 	int3
 1031606:	cc 	int3
 1031607:	cc 	int3
 1031608:	cc 	int3
 1031609:	cc 	int3
 103160a:	cc 	int3
 103160b:	cc 	int3
 103160c:	cc 	int3
 103160d:	cc 	int3
 103160e:	cc 	int3
 103160f:	cc 	int3

_runtime.park_m:
 1031610:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031619:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103161d:	0f 86 9f 01 00 00 	jbe	415 <_runtime.park_m+0x1b2>
 1031623:	48 83 ec 28 	sub	rsp, 40
 1031627:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103162c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1031631:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103163a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103163f:	80 3d ea 38 0a 00 00 	cmp	byte ptr [rip + 669930], 0
 1031646:	0f 85 52 01 00 00 	jne	338 <_runtime.park_m+0x18e>
 103164c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1031651:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031655:	48 b9 02 00 00 00 04 00 00 00 	movabs	rcx, 17179869186
 103165f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1031664:	e8 a7 bc ff ff 	call	-17241 <_runtime.casgstatus>
 1031669:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031672:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031676:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 103167d:	90 	nop
 103167e:	90 	nop
 103167f:	31 d2 	xor	edx, edx
 1031681:	48 89 51 30 	mov	qword ptr [rcx + 48], rdx
 1031685:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1031689:	90 	nop
 103168a:	31 c9 	xor	ecx, ecx
 103168c:	48 89 88 c0 00 00 00 	mov	qword ptr [rax + 192], rcx
 1031693:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1031698:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103169c:	48 8b 91 80 02 00 00 	mov	rdx, qword ptr [rcx + 640]
 10316a3:	48 85 d2 	test	rdx, rdx
 10316a6:	75 0f 	jne	15 <_runtime.park_m+0xa7>
 10316a8:	e8 83 f7 ff ff 	call	-2173 <_runtime.schedule>
 10316ad:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10316b2:	48 83 c4 28 	add	rsp, 40
 10316b6:	c3 	ret
 10316b7:	48 8b 81 88 02 00 00 	mov	rax, qword ptr [rcx + 648]
 10316be:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10316c3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10316c7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10316cc:	48 8b 02 	mov	rax, qword ptr [rdx]
 10316cf:	ff d0 	call	rax
 10316d1:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10316d6:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10316da:	84 01 	test	byte ptr [rcx], al
 10316dc:	0f b6 5c 24 10 	movzx	ebx, byte ptr [rsp + 16]
 10316e1:	80 fb 00 	cmp	bl, 0
 10316e4:	83 3d 15 62 0c 00 00 	cmp	dword ptr [rip + 811541], 0
 10316eb:	0f 85 94 00 00 00 	jne	148 <_runtime.park_m+0x175>
 10316f1:	48 c7 81 80 02 00 00 00 00 00 00 	mov	qword ptr [rcx + 640], 0
 10316fc:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031700:	84 01 	test	byte ptr [rcx], al
 1031702:	83 3d f7 61 0c 00 00 	cmp	dword ptr [rip + 811511], 0
 1031709:	75 67 	jne	103 <_runtime.park_m+0x162>
 103170b:	48 c7 81 88 02 00 00 00 00 00 00 	mov	qword ptr [rcx + 648], 0
 1031716:	80 fb 00 	cmp	bl, 0
 1031719:	75 8d 	jne	-115 <_runtime.park_m+0x98>
 103171b:	80 3d 0e 38 0a 00 00 	cmp	byte ptr [rip + 669710], 0
 1031722:	75 35 	jne	53 <_runtime.park_m+0x149>
 1031724:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1031729:	48 89 04 24 	mov	qword ptr [rsp], rax
 103172d:	48 b9 04 00 00 00 01 00 00 00 	movabs	rcx, 4294967300
 1031737:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103173c:	e8 cf bb ff ff 	call	-17457 <_runtime.casgstatus>
 1031741:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1031746:	48 89 04 24 	mov	qword ptr [rsp], rax
 103174a:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 103174f:	e8 1c e3 ff ff 	call	-7396 <_runtime.execute>
 1031754:	e9 4f ff ff ff 	jmp	-177 <_runtime.park_m+0x98>
 1031759:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103175e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031762:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103176b:	e8 a0 56 01 00 	call	87712 <_runtime.traceGoUnpark>
 1031770:	eb b2 	jmp	-78 <_runtime.park_m+0x114>
 1031772:	48 8d b9 88 02 00 00 	lea	rdi, [rcx + 648]
 1031779:	31 c0 	xor	eax, eax
 103177b:	e8 60 12 02 00 	call	135776 <_runtime.gcWriteBarrier>
 1031780:	80 fb 00 	cmp	bl, 0
 1031783:	eb 94 	jmp	-108 <_runtime.park_m+0x109>
 1031785:	48 8d b9 80 02 00 00 	lea	rdi, [rcx + 640]
 103178c:	48 89 c1 	mov	rcx, rax
 103178f:	31 c0 	xor	eax, eax
 1031791:	e8 4a 12 02 00 	call	135754 <_runtime.gcWriteBarrier>
 1031796:	48 89 c8 	mov	rax, rcx
 1031799:	e9 5e ff ff ff 	jmp	-162 <_runtime.park_m+0xec>
 103179e:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10317a2:	0f b6 91 90 02 00 00 	movzx	edx, byte ptr [rcx + 656]
 10317a9:	48 8b 89 98 02 00 00 	mov	rcx, qword ptr [rcx + 664]
 10317b0:	88 14 24 	mov	byte ptr [rsp], dl
 10317b3:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10317b8:	e8 c3 55 01 00 	call	87491 <_runtime.traceGoPark>
 10317bd:	e9 8a fe ff ff 	jmp	-374 <_runtime.park_m+0x3c>
 10317c2:	e8 09 f4 01 00 	call	128009 <_runtime.morestack_noctxt>
 10317c7:	e9 44 fe ff ff 	jmp	-444 <_runtime.park_m>
 10317cc:	cc 	int3
 10317cd:	cc 	int3
 10317ce:	cc 	int3
 10317cf:	cc 	int3

_runtime.goschedImpl:
 10317d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10317d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10317dd:	0f 86 3d 02 00 00 	jbe	573 <_runtime.goschedImpl+0x250>
 10317e3:	48 83 ec 30 	sub	rsp, 48
 10317e7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10317ec:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10317f1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10317f6:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 10317fc:	0f ba f1 0c 	btr	ecx, 12
 1031800:	83 f9 02 	cmp	ecx, 2
 1031803:	0f 85 b3 00 00 00 	jne	179 <_runtime.goschedImpl+0xec>
 1031809:	48 89 04 24 	mov	qword ptr [rsp], rax
 103180d:	48 b9 02 00 00 00 01 00 00 00 	movabs	rcx, 4294967298
 1031817:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103181c:	e8 ef ba ff ff 	call	-17681 <_runtime.casgstatus>
 1031821:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103182a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103182e:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1031835:	90 	nop
 1031836:	90 	nop
 1031837:	31 d2 	xor	edx, edx
 1031839:	48 89 51 30 	mov	qword ptr [rcx + 48], rdx
 103183d:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1031841:	90 	nop
 1031842:	31 c9 	xor	ecx, ecx
 1031844:	48 89 88 c0 00 00 00 	mov	qword ptr [rax + 192], rcx
 103184b:	48 8d 05 26 ce 09 00 	lea	rax, [rip + 642598]
 1031852:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031856:	e8 d5 68 fd ff 	call	-169771 <_runtime.lock>
 103185b:	90 	nop
 103185c:	90 	nop
 103185d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031862:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 103186d:	48 8b 0d 54 ce 09 00 	mov	rcx, qword ptr [rip + 642644]
 1031874:	48 85 c9 	test	rcx, rcx
 1031877:	74 37 	je	55 <_runtime.goschedImpl+0xe0>
 1031879:	48 89 c2 	mov	rdx, rax
 103187c:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 1031883:	90 	nop
 1031884:	48 89 15 3d ce 09 00 	mov	qword ptr [rip + 642621], rdx
 103188b:	ff 05 3f ce 09 00 	inc	dword ptr [rip + 642623]
 1031891:	48 8d 05 e0 cd 09 00 	lea	rax, [rip + 642528]
 1031898:	48 89 04 24 	mov	qword ptr [rsp], rax
 103189c:	e8 6f 6a fd ff 	call	-169361 <_runtime.unlock>
 10318a1:	e8 8a f5 ff ff 	call	-2678 <_runtime.schedule>
 10318a6:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10318ab:	48 83 c4 30 	add	rsp, 48
 10318af:	c3 	ret
 10318b0:	48 89 c2 	mov	rdx, rax
 10318b3:	48 89 05 06 ce 09 00 	mov	qword ptr [rip + 642566], rax
 10318ba:	eb c7 	jmp	-57 <_runtime.goschedImpl+0xb3>
 10318bc:	90 	nop
 10318bd:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10318c6:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10318cb:	8b 90 90 00 00 00 	mov	edx, dword ptr [rax + 144]
 10318d1:	89 54 24 14 	mov	dword ptr [rsp + 20], edx
 10318d5:	48 8b 98 98 00 00 00 	mov	rbx, qword ptr [rax + 152]
 10318dc:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 10318e1:	e8 ba 8b ff ff 	call	-29766 <_runtime.printlock>
 10318e6:	48 8d 05 15 23 04 00 	lea	rax, [rip + 271125]
 10318ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10318f1:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 10318fa:	e8 e1 94 ff ff 	call	-27423 <_runtime.printstring>
 10318ff:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031904:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031908:	e8 93 94 ff ff 	call	-27501 <_runtime.printpointer>
 103190d:	48 8d 05 ae 15 04 00 	lea	rax, [rip + 267694]
 1031914:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031918:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1031921:	e8 ba 94 ff ff 	call	-27462 <_runtime.printstring>
 1031926:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103192b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103192f:	e8 ec 92 ff ff 	call	-27924 <_runtime.printint>
 1031934:	48 8d 05 f2 25 04 00 	lea	rax, [rip + 271858]
 103193b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103193f:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1031948:	e8 93 94 ff ff 	call	-27501 <_runtime.printstring>
 103194d:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 1031951:	89 c0 	mov	eax, eax
 1031953:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031957:	e8 c4 91 ff ff 	call	-28220 <_runtime.printuint>
 103195c:	e8 cf 8d ff ff 	call	-29233 <_runtime.printnl>
 1031961:	e8 ba 8b ff ff 	call	-29766 <_runtime.printunlock>
 1031966:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103196b:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1031971:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1031975:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 103197c:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1031981:	e8 1a 8b ff ff 	call	-29926 <_runtime.printlock>
 1031986:	48 8d 05 45 22 04 00 	lea	rax, [rip + 270917]
 103198d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031991:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 103199a:	e8 41 94 ff ff 	call	-27583 <_runtime.printstring>
 103199f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10319a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10319a8:	e8 f3 93 ff ff 	call	-27661 <_runtime.printpointer>
 10319ad:	48 8d 05 0e 15 04 00 	lea	rax, [rip + 267534]
 10319b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10319b8:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 10319c1:	e8 1a 94 ff ff 	call	-27622 <_runtime.printstring>
 10319c6:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10319cb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10319cf:	e8 4c 92 ff ff 	call	-28084 <_runtime.printint>
 10319d4:	48 8d 05 3f 25 04 00 	lea	rax, [rip + 271679]
 10319db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10319df:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 10319e8:	e8 f3 93 ff ff 	call	-27661 <_runtime.printstring>
 10319ed:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10319f1:	89 c0 	mov	eax, eax
 10319f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10319f7:	e8 24 91 ff ff 	call	-28380 <_runtime.printuint>
 10319fc:	e8 2f 8d ff ff 	call	-29393 <_runtime.printnl>
 1031a01:	e8 1a 8b ff ff 	call	-29926 <_runtime.printunlock>
 1031a06:	48 8d 05 66 1b 04 00 	lea	rax, [rip + 269158]
 1031a0d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031a11:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1031a1a:	e8 41 73 ff ff 	call	-36031 <_runtime.throw>
 1031a1f:	90 	nop
 1031a20:	e8 ab f1 01 00 	call	127403 <_runtime.morestack_noctxt>
 1031a25:	e9 a6 fd ff ff 	jmp	-602 <_runtime.goschedImpl>
 1031a2a:	cc 	int3
 1031a2b:	cc 	int3
 1031a2c:	cc 	int3
 1031a2d:	cc 	int3
 1031a2e:	cc 	int3
 1031a2f:	cc 	int3

_runtime.gosched_m:
 1031a30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031a39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1031a3d:	76 6f 	jbe	111 <_runtime.gosched_m+0x7e>
 1031a3f:	48 83 ec 30 	sub	rsp, 48
 1031a43:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1031a48:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1031a4d:	80 3d dc 34 0a 00 00 	cmp	byte ptr [rip + 668892], 0
 1031a54:	75 18 	jne	24 <_runtime.gosched_m+0x3e>
 1031a56:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031a5b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031a5f:	e8 6c fd ff ff 	call	-660 <_runtime.goschedImpl>
 1031a64:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1031a69:	48 83 c4 30 	add	rsp, 48
 1031a6d:	c3 	ret
 1031a6e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031a77:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031a7b:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1031a82:	48 89 88 d0 00 00 00 	mov	qword ptr [rax + 208], rcx
 1031a89:	c6 04 24 11 	mov	byte ptr [rsp], 17
 1031a8d:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1031a96:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1031a9f:	0f 57 c0 	xorps	xmm0, xmm0
 1031aa2:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1031aa7:	e8 44 40 01 00 	call	81988 <_runtime.traceEvent>
 1031aac:	eb a8 	jmp	-88 <_runtime.gosched_m+0x26>
 1031aae:	e8 1d f1 01 00 	call	127261 <_runtime.morestack_noctxt>
 1031ab3:	e9 78 ff ff ff 	jmp	-136 <_runtime.gosched_m>
 1031ab8:	cc 	int3
 1031ab9:	cc 	int3
 1031aba:	cc 	int3
 1031abb:	cc 	int3
 1031abc:	cc 	int3
 1031abd:	cc 	int3
 1031abe:	cc 	int3
 1031abf:	cc 	int3

_runtime.gopreempt_m:
 1031ac0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031ac9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1031acd:	76 6f 	jbe	111 <_runtime.gopreempt_m+0x7e>
 1031acf:	48 83 ec 30 	sub	rsp, 48
 1031ad3:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1031ad8:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1031add:	80 3d 4c 34 0a 00 00 	cmp	byte ptr [rip + 668748], 0
 1031ae4:	75 18 	jne	24 <_runtime.gopreempt_m+0x3e>
 1031ae6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031aeb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031aef:	e8 dc fc ff ff 	call	-804 <_runtime.goschedImpl>
 1031af4:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1031af9:	48 83 c4 30 	add	rsp, 48
 1031afd:	c3 	ret
 1031afe:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031b07:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031b0b:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1031b12:	48 89 88 d0 00 00 00 	mov	qword ptr [rax + 208], rcx
 1031b19:	c6 04 24 12 	mov	byte ptr [rsp], 18
 1031b1d:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1031b26:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1031b2f:	0f 57 c0 	xorps	xmm0, xmm0
 1031b32:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1031b37:	e8 b4 3f 01 00 	call	81844 <_runtime.traceEvent>
 1031b3c:	eb a8 	jmp	-88 <_runtime.gopreempt_m+0x26>
 1031b3e:	e8 8d f0 01 00 	call	127117 <_runtime.morestack_noctxt>
 1031b43:	e9 78 ff ff ff 	jmp	-136 <_runtime.gopreempt_m>
 1031b48:	cc 	int3
 1031b49:	cc 	int3
 1031b4a:	cc 	int3
 1031b4b:	cc 	int3
 1031b4c:	cc 	int3
 1031b4d:	cc 	int3
 1031b4e:	cc 	int3
 1031b4f:	cc 	int3

_runtime.preemptPark:
 1031b50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031b59:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 1031b5d:	0f 86 24 02 00 00 	jbe	548 <_runtime.preemptPark+0x237>
 1031b63:	48 83 ec 30 	sub	rsp, 48
 1031b67:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1031b6c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1031b71:	80 3d b8 33 0a 00 00 	cmp	byte ptr [rip + 668600], 0
 1031b78:	0f 85 8e 00 00 00 	jne	142 <_runtime.preemptPark+0xbc>
 1031b7e:	90 	nop
 1031b7f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031b84:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1031b8a:	0f ba f1 0c 	btr	ecx, 12
 1031b8e:	83 f9 02 	cmp	ecx, 2
 1031b91:	0f 85 8c 00 00 00 	jne	140 <_runtime.preemptPark+0xd3>
 1031b97:	c6 80 b0 00 00 00 19 	mov	byte ptr [rax + 176], 25
 1031b9e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031ba2:	48 b9 02 00 00 00 09 10 00 00 	movabs	rcx, 17630840750082
 1031bac:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1031bb1:	e8 ea b8 ff ff 	call	-18198 <_runtime.casGToPreemptScan>
 1031bb6:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031bbf:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031bc3:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1031bca:	90 	nop
 1031bcb:	90 	nop
 1031bcc:	31 d2 	xor	edx, edx
 1031bce:	48 89 51 30 	mov	qword ptr [rcx + 48], rdx
 1031bd2:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1031bd6:	90 	nop
 1031bd7:	31 c9 	xor	ecx, ecx
 1031bd9:	48 89 88 c0 00 00 00 	mov	qword ptr [rax + 192], rcx
 1031be0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031be5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031be9:	48 b8 09 10 00 00 09 00 00 00 	movabs	rax, 38654709769
 1031bf3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1031bf8:	e8 d3 b1 ff ff 	call	-20013 <_runtime.casfrom_Gscanstatus>
 1031bfd:	e8 2e f2 ff ff 	call	-3538 <_runtime.schedule>
 1031c02:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1031c07:	48 83 c4 30 	add	rsp, 48
 1031c0b:	c3 	ret
 1031c0c:	c6 04 24 14 	mov	byte ptr [rsp], 20
 1031c10:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1031c19:	e8 62 51 01 00 	call	86370 <_runtime.traceGoPark>
 1031c1e:	e9 5b ff ff ff 	jmp	-165 <_runtime.preemptPark+0x2e>
 1031c23:	90 	nop
 1031c24:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031c2d:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1031c32:	8b 90 90 00 00 00 	mov	edx, dword ptr [rax + 144]
 1031c38:	89 54 24 14 	mov	dword ptr [rsp + 20], edx
 1031c3c:	48 8b 98 98 00 00 00 	mov	rbx, qword ptr [rax + 152]
 1031c43:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1031c48:	e8 53 88 ff ff 	call	-30637 <_runtime.printlock>
 1031c4d:	48 8d 05 ae 1f 04 00 	lea	rax, [rip + 270254]
 1031c54:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031c58:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1031c61:	e8 7a 91 ff ff 	call	-28294 <_runtime.printstring>
 1031c66:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1031c6b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031c6f:	e8 2c 91 ff ff 	call	-28372 <_runtime.printpointer>
 1031c74:	48 8d 05 47 12 04 00 	lea	rax, [rip + 266823]
 1031c7b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031c7f:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1031c88:	e8 53 91 ff ff 	call	-28333 <_runtime.printstring>
 1031c8d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1031c92:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031c96:	e8 85 8f ff ff 	call	-28795 <_runtime.printint>
 1031c9b:	48 8d 05 8b 22 04 00 	lea	rax, [rip + 270987]
 1031ca2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031ca6:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1031caf:	e8 2c 91 ff ff 	call	-28372 <_runtime.printstring>
 1031cb4:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 1031cb8:	89 c0 	mov	eax, eax
 1031cba:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031cbe:	e8 5d 8e ff ff 	call	-29091 <_runtime.printuint>
 1031cc3:	e8 68 8a ff ff 	call	-30104 <_runtime.printnl>
 1031cc8:	e8 53 88 ff ff 	call	-30637 <_runtime.printunlock>
 1031ccd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1031cd2:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 1031cd8:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1031cdc:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 1031ce3:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1031ce8:	e8 b3 87 ff ff 	call	-30797 <_runtime.printlock>
 1031ced:	48 8d 05 de 1e 04 00 	lea	rax, [rip + 270046]
 1031cf4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031cf8:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1031d01:	e8 da 90 ff ff 	call	-28454 <_runtime.printstring>
 1031d06:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1031d0b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031d0f:	e8 8c 90 ff ff 	call	-28532 <_runtime.printpointer>
 1031d14:	48 8d 05 a7 11 04 00 	lea	rax, [rip + 266663]
 1031d1b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031d1f:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1031d28:	e8 b3 90 ff ff 	call	-28493 <_runtime.printstring>
 1031d2d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1031d32:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031d36:	e8 e5 8e ff ff 	call	-28955 <_runtime.printint>
 1031d3b:	48 8d 05 d8 21 04 00 	lea	rax, [rip + 270808]
 1031d42:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031d46:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1031d4f:	e8 8c 90 ff ff 	call	-28532 <_runtime.printstring>
 1031d54:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1031d58:	89 c0 	mov	eax, eax
 1031d5a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031d5e:	e8 bd 8d ff ff 	call	-29251 <_runtime.printuint>
 1031d63:	e8 c8 89 ff ff 	call	-30264 <_runtime.printnl>
 1031d68:	e8 b3 87 ff ff 	call	-30797 <_runtime.printunlock>
 1031d6d:	48 8d 05 ff 17 04 00 	lea	rax, [rip + 268287]
 1031d74:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031d78:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1031d81:	e8 da 6f ff ff 	call	-36902 <_runtime.throw>
 1031d86:	90 	nop
 1031d87:	e8 74 e9 00 00 	call	59764 <_runtime.morestackc>
 1031d8c:	e9 bf fd ff ff 	jmp	-577 <_runtime.preemptPark>
 1031d91:	cc 	int3
 1031d92:	cc 	int3
 1031d93:	cc 	int3
 1031d94:	cc 	int3
 1031d95:	cc 	int3
 1031d96:	cc 	int3
 1031d97:	cc 	int3
 1031d98:	cc 	int3
 1031d99:	cc 	int3
 1031d9a:	cc 	int3
 1031d9b:	cc 	int3
 1031d9c:	cc 	int3
 1031d9d:	cc 	int3
 1031d9e:	cc 	int3
 1031d9f:	cc 	int3

_runtime.goyield_m:
 1031da0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031da9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1031dad:	0f 86 e1 00 00 00 	jbe	225 <_runtime.goyield_m+0xf4>
 1031db3:	48 83 ec 38 	sub	rsp, 56
 1031db7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1031dbc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1031dc1:	80 3d 68 31 0a 00 00 	cmp	byte ptr [rip + 668008], 0
 1031dc8:	0f 85 83 00 00 00 	jne	131 <_runtime.goyield_m+0xb1>
 1031dce:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1031dd3:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031dd7:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1031dde:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1031de3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031de7:	48 ba 02 00 00 00 01 00 00 00 	movabs	rdx, 4294967298
 1031df1:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1031df6:	e8 15 b5 ff ff 	call	-19179 <_runtime.casgstatus>
 1031dfb:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031e04:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031e08:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1031e0f:	90 	nop
 1031e10:	90 	nop
 1031e11:	31 d2 	xor	edx, edx
 1031e13:	48 89 51 30 	mov	qword ptr [rcx + 48], rdx
 1031e17:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1031e1b:	90 	nop
 1031e1c:	31 c9 	xor	ecx, ecx
 1031e1e:	48 89 88 c0 00 00 00 	mov	qword ptr [rax + 192], rcx
 1031e25:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1031e2a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031e2e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1031e33:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1031e38:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1031e3d:	e8 ce 52 00 00 	call	21198 <_runtime.runqput>
 1031e42:	e8 e9 ef ff ff 	call	-4119 <_runtime.schedule>
 1031e47:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1031e4c:	48 83 c4 38 	add	rsp, 56
 1031e50:	c3 	ret
 1031e51:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031e5a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1031e5e:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1031e65:	48 89 88 d0 00 00 00 	mov	qword ptr [rax + 208], rcx
 1031e6c:	c6 04 24 12 	mov	byte ptr [rsp], 18
 1031e70:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1031e79:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1031e82:	0f 57 c0 	xorps	xmm0, xmm0
 1031e85:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1031e8a:	e8 61 3c 01 00 	call	80993 <_runtime.traceEvent>
 1031e8f:	e9 3a ff ff ff 	jmp	-198 <_runtime.goyield_m+0x2e>
 1031e94:	e8 37 ed 01 00 	call	126263 <_runtime.morestack_noctxt>
 1031e99:	e9 02 ff ff ff 	jmp	-254 <_runtime.goyield_m>
 1031e9e:	cc 	int3
 1031e9f:	cc 	int3

_runtime.goexit1:
 1031ea0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031ea9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1031ead:	76 56 	jbe	86 <_runtime.goexit1+0x65>
 1031eaf:	48 83 ec 30 	sub	rsp, 48
 1031eb3:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1031eb8:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1031ebd:	80 3d 6c 30 0a 00 00 	cmp	byte ptr [rip + 667756], 0
 1031ec4:	75 1a 	jne	26 <_runtime.goexit1+0x40>
 1031ec6:	48 8d 05 83 59 04 00 	lea	rax, [rip + 285059]
 1031ecd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031ed1:	e8 2a eb 01 00 	call	125738 <_runtime.mcall>
 1031ed6:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1031edb:	48 83 c4 30 	add	rsp, 48
 1031edf:	c3 	ret
 1031ee0:	c6 04 24 0f 	mov	byte ptr [rsp], 15
 1031ee4:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1031eed:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1031ef6:	0f 57 c0 	xorps	xmm0, xmm0
 1031ef9:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1031efe:	e8 ed 3b 01 00 	call	80877 <_runtime.traceEvent>
 1031f03:	eb c1 	jmp	-63 <_runtime.goexit1+0x26>
 1031f05:	e8 c6 ec 01 00 	call	126150 <_runtime.morestack_noctxt>
 1031f0a:	eb 94 	jmp	-108 <_runtime.goexit1>
 1031f0c:	cc 	int3
 1031f0d:	cc 	int3
 1031f0e:	cc 	int3
 1031f0f:	cc 	int3

_runtime.goexit0:
 1031f10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1031f19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1031f1d:	0f 86 a0 02 00 00 	jbe	672 <_runtime.goexit0+0x2b3>
 1031f23:	48 83 ec 38 	sub	rsp, 56
 1031f27:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1031f2c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1031f31:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1031f3a:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1031f3f:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1031f44:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1031f48:	48 ba 02 00 00 00 06 00 00 00 	movabs	rdx, 25769803778
 1031f52:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1031f57:	e8 b4 b3 ff ff 	call	-19532 <_runtime.casgstatus>
 1031f5c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1031f61:	48 89 04 24 	mov	qword ptr [rsp], rax
 1031f65:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1031f6a:	e8 51 8b 01 00 	call	101201 <_runtime.isSystemGoroutine>
 1031f6f:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 1031f74:	74 10 	je	16 <_runtime.goexit0+0x76>
 1031f76:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1031f7b:	48 8d 15 26 c7 09 00 	lea	rdx, [rip + 640806]
 1031f82:	f0 	lock
 1031f83:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 1031f86:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1031f8b:	84 01 	test	byte ptr [rcx], al
 1031f8d:	83 3d 6c 59 0c 00 00 	cmp	dword ptr [rip + 809324], 0
 1031f94:	0f 85 c6 01 00 00 	jne	454 <_runtime.goexit0+0x250>
 1031f9a:	48 c7 41 30 00 00 00 00 	mov	qword ptr [rcx + 48], 0
 1031fa2:	48 8b 91 d8 00 00 00 	mov	rdx, qword ptr [rcx + 216]
 1031fa9:	48 83 fa 00 	cmp	rdx, 0
 1031fad:	48 c7 81 d8 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 216], 0
 1031fb8:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1031fbd:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 1031fc1:	48 c7 86 68 01 00 00 00 00 00 00 	mov	qword ptr [rsi + 360], 0
 1031fcc:	c6 81 b2 00 00 00 00 	mov	byte ptr [rcx + 178], 0
 1031fd3:	c6 81 b5 00 00 00 00 	mov	byte ptr [rcx + 181], 0
 1031fda:	83 3d 1f 59 0c 00 00 	cmp	dword ptr [rip + 809247], 0
 1031fe1:	0f 85 69 01 00 00 	jne	361 <_runtime.goexit0+0x240>
 1031fe7:	48 c7 41 28 00 00 00 00 	mov	qword ptr [rcx + 40], 0
 1031fef:	48 c7 41 20 00 00 00 00 	mov	qword ptr [rcx + 32], 0
 1031ff7:	0f 57 c0 	xorps	xmm0, xmm0
 1031ffa:	0f 11 81 f0 00 00 00 	movups	xmmword ptr [rcx + 240], xmm0
 1032001:	83 3d f8 58 0c 00 00 	cmp	dword ptr [rip + 809208], 0
 1032008:	0f 85 2c 01 00 00 	jne	300 <_runtime.goexit0+0x22a>
 103200e:	48 c7 81 e8 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 232], 0
 1032019:	c6 81 b0 00 00 00 00 	mov	byte ptr [rcx + 176], 0
 1032020:	83 3d d9 58 0c 00 00 	cmp	dword ptr [rip + 809177], 0
 1032027:	0f 85 e0 00 00 00 	jne	224 <_runtime.goexit0+0x1fd>
 103202d:	48 c7 81 88 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 136], 0
 1032038:	0f 11 81 58 01 00 00 	movups	xmmword ptr [rcx + 344], xmm0
 103203f:	83 3d 4a 57 0c 00 00 	cmp	dword ptr [rip + 808778], 0
 1032046:	74 38 	je	56 <_runtime.goexit0+0x170>
 1032048:	48 8b 81 70 01 00 00 	mov	rax, qword ptr [rcx + 368]
 103204f:	48 85 c0 	test	rax, rax
 1032052:	7e 2c 	jle	44 <_runtime.goexit0+0x170>
 1032054:	0f 57 c0 	xorps	xmm0, xmm0
 1032057:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 103205c:	f2 0f 59 05 5c 5d 0c 00 	mulsd	xmm0, qword ptr [rip + 810332]
 1032064:	f2 48 0f 2c c0 	cvttsd2si	rax, xmm0
 1032069:	48 8d 35 18 5d 0c 00 	lea	rsi, [rip + 810264]
 1032070:	f0 	lock
 1032071:	48 0f c1 06 	xadd	qword ptr [rsi], rax
 1032075:	48 c7 81 70 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 368], 0
 1032080:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032089:	48 8b 70 30 	mov	rsi, qword ptr [rax + 48]
 103208d:	48 8b b6 c0 00 00 00 	mov	rsi, qword ptr [rsi + 192]
 1032094:	90 	nop
 1032095:	90 	nop
 1032096:	31 ff 	xor	edi, edi
 1032098:	48 89 7e 30 	mov	qword ptr [rsi + 48], rdi
 103209c:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10320a0:	90 	nop
 10320a1:	31 f6 	xor	esi, esi
 10320a3:	48 89 b0 c0 00 00 00 	mov	qword ptr [rax + 192], rsi
 10320aa:	48 8b 43 30 	mov	rax, qword ptr [rbx + 48]
 10320ae:	8b b0 74 02 00 00 	mov	esi, dword ptr [rax + 628]
 10320b4:	85 f6 	test	esi, esi
 10320b6:	0f 85 b4 00 00 00 	jne	180 <_runtime.goexit0+0x260>
 10320bc:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 10320c1:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 10320c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10320cc:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10320d1:	e8 fa 17 00 00 	call	6138 <_runtime.gfput>
 10320d6:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10320db:	48 83 f8 00 	cmp	rax, 0
 10320df:	75 0f 	jne	15 <_runtime.goexit0+0x1e0>
 10320e1:	e8 4a ed ff ff 	call	-4790 <_runtime.schedule>
 10320e6:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10320eb:	48 83 c4 38 	add	rsp, 56
 10320ef:	c3 	ret
 10320f0:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10320f5:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10320f9:	48 8b 00 	mov	rax, qword ptr [rax]
 10320fc:	84 00 	test	byte ptr [rax], al
 10320fe:	48 83 c0 38 	add	rax, 56
 1032102:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032106:	e8 95 e8 01 00 	call	125077 <_runtime.gogo>
 103210b:	eb d4 	jmp	-44 <_runtime.goexit0+0x1d1>
 103210d:	48 8d b9 88 00 00 00 	lea	rdi, [rcx + 136]
 1032114:	31 c0 	xor	eax, eax
 1032116:	e8 c5 08 02 00 	call	133317 <_runtime.gcWriteBarrier>
 103211b:	48 8d b9 58 01 00 00 	lea	rdi, [rcx + 344]
 1032122:	e8 b9 08 02 00 	call	133305 <_runtime.gcWriteBarrier>
 1032127:	48 8d b9 60 01 00 00 	lea	rdi, [rcx + 352]
 103212e:	31 c0 	xor	eax, eax
 1032130:	e8 ab 08 02 00 	call	133291 <_runtime.gcWriteBarrier>
 1032135:	e9 05 ff ff ff 	jmp	-251 <_runtime.goexit0+0x12f>
 103213a:	48 8d b9 e8 00 00 00 	lea	rdi, [rcx + 232]
 1032141:	31 c0 	xor	eax, eax
 1032143:	e8 98 08 02 00 	call	133272 <_runtime.gcWriteBarrier>
 1032148:	0f 57 c0 	xorps	xmm0, xmm0
 103214b:	e9 c9 fe ff ff 	jmp	-311 <_runtime.goexit0+0x109>
 1032150:	48 8d 79 28 	lea	rdi, [rcx + 40]
 1032154:	31 c0 	xor	eax, eax
 1032156:	e8 85 08 02 00 	call	133253 <_runtime.gcWriteBarrier>
 103215b:	e9 8f fe ff ff 	jmp	-369 <_runtime.goexit0+0xdf>
 1032160:	48 8d 79 30 	lea	rdi, [rcx + 48]
 1032164:	31 c0 	xor	eax, eax
 1032166:	e8 75 08 02 00 	call	133237 <_runtime.gcWriteBarrier>
 103216b:	e9 32 fe ff ff 	jmp	-462 <_runtime.goexit0+0x92>
 1032170:	89 74 24 1c 	mov	dword ptr [rsp + 28], esi
 1032174:	e8 27 83 ff ff 	call	-31961 <_runtime.printlock>
 1032179:	48 8d 05 e9 26 04 00 	lea	rax, [rip + 272105]
 1032180:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032184:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 103218d:	e8 4e 8c ff ff 	call	-29618 <_runtime.printstring>
 1032192:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1032196:	48 89 04 24 	mov	qword ptr [rsp], rax
 103219a:	e8 81 89 ff ff 	call	-30335 <_runtime.printuint>
 103219f:	e8 8c 85 ff ff 	call	-31348 <_runtime.printnl>
 10321a4:	e8 77 83 ff ff 	call	-31881 <_runtime.printunlock>
 10321a9:	48 8d 05 21 2e 04 00 	lea	rax, [rip + 273953]
 10321b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10321b4:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 10321bd:	e8 9e 6b ff ff 	call	-37986 <_runtime.throw>
 10321c2:	90 	nop
 10321c3:	e8 08 ea 01 00 	call	125448 <_runtime.morestack_noctxt>
 10321c8:	e9 43 fd ff ff 	jmp	-701 <_runtime.goexit0>
 10321cd:	cc 	int3
 10321ce:	cc 	int3
 10321cf:	cc 	int3

_runtime.save:
 10321d0:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10321d9:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10321de:	48 89 48 40 	mov	qword ptr [rax + 64], rcx
 10321e2:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10321e7:	48 89 48 38 	mov	qword ptr [rax + 56], rcx
 10321eb:	48 c7 40 60 00 00 00 00 	mov	qword ptr [rax + 96], 0
 10321f3:	48 c7 40 58 00 00 00 00 	mov	qword ptr [rax + 88], 0
 10321fb:	48 89 c1 	mov	rcx, rax
 10321fe:	48 89 41 48 	mov	qword ptr [rcx + 72], rax
 1032202:	48 83 79 50 00 	cmp	qword ptr [rcx + 80], 0
 1032207:	75 01 	jne	1 <_runtime.save+0x3a>
 1032209:	c3 	ret
 103220a:	e8 61 9f ff ff 	call	-24735 <_runtime.badctxt>
 103220f:	eb f8 	jmp	-8 <_runtime.save+0x39>
 1032211:	cc 	int3
 1032212:	cc 	int3
 1032213:	cc 	int3
 1032214:	cc 	int3
 1032215:	cc 	int3
 1032216:	cc 	int3
 1032217:	cc 	int3
 1032218:	cc 	int3
 1032219:	cc 	int3
 103221a:	cc 	int3
 103221b:	cc 	int3
 103221c:	cc 	int3
 103221d:	cc 	int3
 103221e:	cc 	int3
 103221f:	cc 	int3

_runtime.reentersyscall:
 1032220:	48 83 ec 30 	sub	rsp, 48
 1032224:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1032229:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103222e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032237:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103223c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032240:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1032246:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 103224e:	c6 80 b7 00 00 00 01 	mov	byte ptr [rax + 183], 1
 1032255:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103225a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103225e:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1032263:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1032268:	e8 63 ff ff ff 	call	-157 <_runtime.save>
 103226d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1032272:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1032277:	48 89 41 70 	mov	qword ptr [rcx + 112], rax
 103227b:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1032280:	48 89 51 78 	mov	qword ptr [rcx + 120], rdx
 1032284:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1032288:	48 bb 02 00 00 00 03 00 00 00 	movabs	rbx, 12884901890
 1032292:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1032297:	e8 74 b0 ff ff 	call	-20364 <_runtime.casgstatus>
 103229c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10322a1:	48 8b 48 70 	mov	rcx, qword ptr [rax + 112]
 10322a5:	48 39 08 	cmp	qword ptr [rax], rcx
 10322a8:	0f 86 9b 01 00 00 	jbe	411 <_runtime.reentersyscall+0x229>
 10322ae:	0f 57 c0 	xorps	xmm0, xmm0
 10322b1:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10322b6:	48 8d 0d 83 da 01 00 	lea	rcx, [rip + 121475]
 10322bd:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10322c2:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10322c7:	48 8d 4c 24 18 	lea	rcx, [rsp + 24]
 10322cc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10322d0:	e8 ab e7 01 00 	call	124843 <_runtime.systemstack>
 10322d5:	80 3d 54 2c 0a 00 00 	cmp	byte ptr [rip + 666708], 0
 10322dc:	0f 85 3a 01 00 00 	jne	314 <_runtime.reentersyscall+0x1fc>
 10322e2:	8b 05 88 c4 09 00 	mov	eax, dword ptr [rip + 640136]
 10322e8:	85 c0 	test	eax, eax
 10322ea:	0f 85 ff 00 00 00 	jne	255 <_runtime.reentersyscall+0x1cf>
 10322f0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10322f5:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10322f9:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1032300:	84 01 	test	byte ptr [rcx], al
 1032302:	83 b9 60 27 00 00 00 	cmp	dword ptr [rcx + 10080], 0
 1032309:	0f 85 ae 00 00 00 	jne	174 <_runtime.reentersyscall+0x19d>
 103230f:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032313:	48 8b 91 d0 00 00 00 	mov	rdx, qword ptr [rcx + 208]
 103231a:	8b 52 14 	mov	edx, dword ptr [rdx + 20]
 103231d:	89 91 a4 02 00 00 	mov	dword ptr [rcx + 676], edx
 1032323:	c6 80 ba 00 00 00 01 	mov	byte ptr [rax + 186], 1
 103232a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103232e:	48 c7 81 60 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 352], 0
 1032339:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103233d:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1032344:	48 c7 41 38 00 00 00 00 	mov	qword ptr [rcx + 56], 0
 103234c:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 1032350:	48 89 cb 	mov	rbx, rcx
 1032353:	48 89 8a e0 00 00 00 	mov	qword ptr [rdx + 224], rcx
 103235a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103235e:	48 c7 81 d0 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 208], 0
 1032369:	b9 02 00 00 00 	mov	ecx, 2
 103236e:	87 4b 04 	xchg	dword ptr [rbx + 4], ecx
 1032371:	83 3d e8 c3 09 00 00 	cmp	dword ptr [rip + 639976], 0
 1032378:	75 14 	jne	20 <_runtime.reentersyscall+0x16e>
 103237a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103237e:	ff 88 08 01 00 00 	dec	dword ptr [rax + 264]
 1032384:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1032389:	48 83 c4 30 	add	rsp, 48
 103238d:	c3 	ret
 103238e:	48 8d 05 0b 54 04 00 	lea	rax, [rip + 283659]
 1032395:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032399:	e8 e2 e6 01 00 	call	124642 <_runtime.systemstack>
 103239e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10323a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10323a7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10323ac:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10323b1:	e8 1a fe ff ff 	call	-486 <_runtime.save>
 10323b6:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10323bb:	eb bd 	jmp	-67 <_runtime.reentersyscall+0x15a>
 10323bd:	48 8d 05 54 56 04 00 	lea	rax, [rip + 284244]
 10323c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10323c8:	e8 b3 e6 01 00 	call	124595 <_runtime.systemstack>
 10323cd:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10323d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10323d6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10323db:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10323e0:	e8 eb fd ff ff 	call	-533 <_runtime.save>
 10323e5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10323ea:	e9 20 ff ff ff 	jmp	-224 <_runtime.reentersyscall+0xef>
 10323ef:	48 8d 05 b2 53 04 00 	lea	rax, [rip + 283570]
 10323f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10323fa:	e8 81 e6 01 00 	call	124545 <_runtime.systemstack>
 10323ff:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1032404:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032408:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103240d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1032412:	e8 b9 fd ff ff 	call	-583 <_runtime.save>
 1032417:	e9 d4 fe ff ff 	jmp	-300 <_runtime.reentersyscall+0xd0>
 103241c:	48 8d 05 75 56 04 00 	lea	rax, [rip + 284277]
 1032423:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032427:	e8 54 e6 01 00 	call	124500 <_runtime.systemstack>
 103242c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1032431:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032435:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103243a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103243f:	e8 8c fd ff ff 	call	-628 <_runtime.save>
 1032444:	e9 99 fe ff ff 	jmp	-359 <_runtime.reentersyscall+0xc2>
 1032449:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 103244d:	0f 82 5b fe ff ff 	jb	-421 <_runtime.reentersyscall+0x8e>
 1032453:	e9 7d fe ff ff 	jmp	-387 <_runtime.reentersyscall+0xb5>
 1032458:	cc 	int3
 1032459:	cc 	int3
 103245a:	cc 	int3
 103245b:	cc 	int3
 103245c:	cc 	int3
 103245d:	cc 	int3
 103245e:	cc 	int3
 103245f:	cc 	int3

_runtime.entersyscall:
 1032460:	48 83 ec 18 	sub	rsp, 24
 1032464:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1032469:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103246e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1032473:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032477:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 103247c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1032481:	e8 9a fd ff ff 	call	-614 <_runtime.reentersyscall>
 1032486:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 103248b:	48 83 c4 18 	add	rsp, 24
 103248f:	c3 	ret

_runtime.entersyscall_sysmon:
 1032490:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1032499:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103249d:	76 5f 	jbe	95 <_runtime.entersyscall_sysmon+0x6e>
 103249f:	48 83 ec 10 	sub	rsp, 16
 10324a3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 10324a8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 10324ad:	48 8d 05 c4 c1 09 00 	lea	rax, [rip + 639428]
 10324b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10324b8:	e8 73 5c fd ff 	call	-172941 <_runtime.lock>
 10324bd:	8b 05 ad c2 09 00 	mov	eax, dword ptr [rip + 639661]
 10324c3:	85 c0 	test	eax, eax
 10324c5:	75 1a 	jne	26 <_runtime.entersyscall_sysmon+0x51>
 10324c7:	48 8d 05 aa c1 09 00 	lea	rax, [rip + 639402]
 10324ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10324d2:	e8 39 5e fd ff 	call	-172487 <_runtime.unlock>
 10324d7:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10324dc:	48 83 c4 10 	add	rsp, 16
 10324e0:	c3 	ret
 10324e1:	31 c0 	xor	eax, eax
 10324e3:	48 8d 0d 86 c2 09 00 	lea	rcx, [rip + 639622]
 10324ea:	87 01 	xchg	dword ptr [rcx], eax
 10324ec:	48 8d 05 85 c2 09 00 	lea	rax, [rip + 639621]
 10324f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10324f7:	e8 f4 5e fd ff 	call	-172300 <_runtime.notewakeup>
 10324fc:	eb c9 	jmp	-55 <_runtime.entersyscall_sysmon+0x37>
 10324fe:	e8 cd e6 01 00 	call	124621 <_runtime.morestack_noctxt>
 1032503:	eb 8b 	jmp	-117 <_runtime.entersyscall_sysmon>
 1032505:	cc 	int3
 1032506:	cc 	int3
 1032507:	cc 	int3
 1032508:	cc 	int3
 1032509:	cc 	int3
 103250a:	cc 	int3
 103250b:	cc 	int3
 103250c:	cc 	int3
 103250d:	cc 	int3
 103250e:	cc 	int3
 103250f:	cc 	int3

_runtime.entersyscall_gcwait:
 1032510:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1032519:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103251d:	0f 86 d2 00 00 00 	jbe	210 <_runtime.entersyscall_gcwait+0xe5>
 1032523:	48 83 ec 18 	sub	rsp, 24
 1032527:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103252c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1032531:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103253a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103253e:	48 8b 80 e0 00 00 00 	mov	rax, qword ptr [rax + 224]
 1032545:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103254a:	48 8d 0d 27 c1 09 00 	lea	rcx, [rip + 639271]
 1032551:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1032555:	e8 d6 5b fd ff 	call	-173098 <_runtime.lock>
 103255a:	83 3d 03 c2 09 00 00 	cmp	dword ptr [rip + 639491], 0
 1032561:	0f 8e 85 00 00 00 	jle	133 <_runtime.entersyscall_gcwait+0xdc>
 1032567:	b8 02 00 00 00 	mov	eax, 2
 103256c:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1032571:	ba 03 00 00 00 	mov	edx, 3
 1032576:	f0 	lock
 1032577:	0f b1 51 04 	cmpxchg	dword ptr [rcx + 4], edx
 103257b:	0f 94 c2 	sete	dl
 103257e:	84 d2 	test	dl, dl
 1032580:	74 20 	je	32 <_runtime.entersyscall_gcwait+0x92>
 1032582:	80 3d a7 29 0a 00 00 	cmp	byte ptr [rip + 666023], 0
 1032589:	75 43 	jne	67 <_runtime.entersyscall_gcwait+0xbe>
 103258b:	ff 41 14 	inc	dword ptr [rcx + 20]
 103258e:	8b 05 d0 c1 09 00 	mov	eax, dword ptr [rip + 639440]
 1032594:	8d 48 ff 	lea	ecx, [rax - 1]
 1032597:	89 0d c7 c1 09 00 	mov	dword ptr [rip + 639431], ecx
 103259d:	83 f8 01 	cmp	eax, 1
 10325a0:	74 1a 	je	26 <_runtime.entersyscall_gcwait+0xac>
 10325a2:	48 8d 05 cf c0 09 00 	lea	rax, [rip + 639183]
 10325a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10325ad:	e8 5e 5d fd ff 	call	-172706 <_runtime.unlock>
 10325b2:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10325b7:	48 83 c4 18 	add	rsp, 24
 10325bb:	c3 	ret
 10325bc:	48 8d 05 a5 c1 09 00 	lea	rax, [rip + 639397]
 10325c3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10325c7:	e8 24 5e fd ff 	call	-172508 <_runtime.notewakeup>
 10325cc:	eb d4 	jmp	-44 <_runtime.entersyscall_gcwait+0x92>
 10325ce:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10325d2:	e8 79 4a 01 00 	call	84601 <_runtime.traceGoSysBlock>
 10325d7:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10325dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10325e0:	e8 2b 42 01 00 	call	82475 <_runtime.traceProcStop>
 10325e5:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10325ea:	eb 9f 	jmp	-97 <_runtime.entersyscall_gcwait+0x7b>
 10325ec:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10325f1:	31 d2 	xor	edx, edx
 10325f3:	eb 89 	jmp	-119 <_runtime.entersyscall_gcwait+0x6e>
 10325f5:	e8 d6 e5 01 00 	call	124374 <_runtime.morestack_noctxt>
 10325fa:	e9 11 ff ff ff 	jmp	-239 <_runtime.entersyscall_gcwait>
 10325ff:	cc 	int3

_runtime.entersyscallblock:
 1032600:	48 83 ec 60 	sub	rsp, 96
 1032604:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 1032609:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 103260e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032617:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103261c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032620:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1032626:	c6 80 b7 00 00 00 01 	mov	byte ptr [rax + 183], 1
 103262d:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1032635:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032639:	48 8b 91 d0 00 00 00 	mov	rdx, qword ptr [rcx + 208]
 1032640:	8b 52 14 	mov	edx, dword ptr [rdx + 20]
 1032643:	89 91 a4 02 00 00 	mov	dword ptr [rcx + 676], edx
 1032649:	c6 80 ba 00 00 00 01 	mov	byte ptr [rax + 186], 1
 1032650:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032654:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 103265b:	ff 41 14 	inc	dword ptr [rcx + 20]
 103265e:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1032663:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1032667:	48 8d 54 24 68 	lea	rdx, [rsp + 104]
 103266c:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1032671:	e8 5a fb ff ff 	call	-1190 <_runtime.save>
 1032676:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103267b:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 103267f:	48 89 48 70 	mov	qword ptr [rax + 112], rcx
 1032683:	48 8b 50 40 	mov	rdx, qword ptr [rax + 64]
 1032687:	48 89 50 78 	mov	qword ptr [rax + 120], rdx
 103268b:	48 39 08 	cmp	qword ptr [rax], rcx
 103268e:	0f 86 ff 00 00 00 	jbe	255 <_runtime.entersyscallblock+0x193>
 1032694:	48 8b 50 38 	mov	rdx, qword ptr [rax + 56]
 1032698:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 10326a1:	0f 57 c0 	xorps	xmm0, xmm0
 10326a4:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 10326a9:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 10326ae:	48 8d 1d 8b d7 01 00 	lea	rbx, [rip + 120715]
 10326b5:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 10326ba:	48 8d 5c 24 68 	lea	rbx, [rsp + 104]
 10326bf:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 10326c4:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 10326c9:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10326ce:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 10326d3:	48 8d 4c 24 30 	lea	rcx, [rsp + 48]
 10326d8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10326dc:	e8 9f e3 01 00 	call	123807 <_runtime.systemstack>
 10326e1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10326e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10326ea:	48 b9 02 00 00 00 03 00 00 00 	movabs	rcx, 12884901890
 10326f4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10326f9:	e8 12 ac ff ff 	call	-21486 <_runtime.casgstatus>
 10326fe:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032703:	48 8b 48 70 	mov	rcx, qword ptr [rax + 112]
 1032707:	48 39 08 	cmp	qword ptr [rax], rcx
 103270a:	76 7b 	jbe	123 <_runtime.entersyscallblock+0x187>
 103270c:	0f 57 c0 	xorps	xmm0, xmm0
 103270f:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1032714:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 103271d:	48 8d 0d 5c d8 01 00 	lea	rcx, [rip + 120924]
 1032724:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1032729:	48 8d 4c 24 68 	lea	rcx, [rsp + 104]
 103272e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1032733:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1032738:	48 8d 54 24 18 	lea	rdx, [rsp + 24]
 103273d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1032741:	e8 3a e3 01 00 	call	123706 <_runtime.systemstack>
 1032746:	48 8d 05 63 50 04 00 	lea	rax, [rip + 282723]
 103274d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032751:	e8 2a e3 01 00 	call	123690 <_runtime.systemstack>
 1032756:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103275b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103275f:	48 8d 44 24 68 	lea	rax, [rsp + 104]
 1032764:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1032769:	e8 62 fa ff ff 	call	-1438 <_runtime.save>
 103276e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032773:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1032777:	ff 88 08 01 00 00 	dec	dword ptr [rax + 264]
 103277d:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1032782:	48 83 c4 60 	add	rsp, 96
 1032786:	c3 	ret
 1032787:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 103278b:	0f 82 7b ff ff ff 	jb	-133 <_runtime.entersyscallblock+0x10c>
 1032791:	eb b3 	jmp	-77 <_runtime.entersyscallblock+0x146>
 1032793:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1032797:	0f 82 f7 fe ff ff 	jb	-265 <_runtime.entersyscallblock+0x94>
 103279d:	e9 3f ff ff ff 	jmp	-193 <_runtime.entersyscallblock+0xe1>
 10327a2:	cc 	int3
 10327a3:	cc 	int3
 10327a4:	cc 	int3
 10327a5:	cc 	int3
 10327a6:	cc 	int3
 10327a7:	cc 	int3
 10327a8:	cc 	int3
 10327a9:	cc 	int3
 10327aa:	cc 	int3
 10327ab:	cc 	int3
 10327ac:	cc 	int3
 10327ad:	cc 	int3
 10327ae:	cc 	int3
 10327af:	cc 	int3

_runtime.entersyscallblock_handoff:
 10327b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10327b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10327bd:	76 6e 	jbe	110 <_runtime.entersyscallblock_handoff+0x7d>
 10327bf:	48 83 ec 30 	sub	rsp, 48
 10327c3:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10327c8:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10327cd:	80 3d 5c 27 0a 00 00 	cmp	byte ptr [rip + 665436], 0
 10327d4:	75 14 	jne	20 <_runtime.entersyscallblock_handoff+0x3a>
 10327d6:	e8 85 2a 00 00 	call	10885 <_runtime.releasep>
 10327db:	e8 c0 ca ff ff 	call	-13632 <_runtime.handoffp>
 10327e0:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10327e5:	48 83 c4 30 	add	rsp, 48
 10327e9:	c3 	ret
 10327ea:	90 	nop
 10327eb:	c6 04 24 1c 	mov	byte ptr [rsp], 28
 10327ef:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10327f8:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1032801:	0f 57 c0 	xorps	xmm0, xmm0
 1032804:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1032809:	e8 e2 32 01 00 	call	78562 <_runtime.traceEvent>
 103280e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032817:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103281b:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1032822:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032826:	e8 25 48 01 00 	call	84005 <_runtime.traceGoSysBlock>
 103282b:	eb a9 	jmp	-87 <_runtime.entersyscallblock_handoff+0x26>
 103282d:	e8 9e e3 01 00 	call	123806 <_runtime.morestack_noctxt>
 1032832:	e9 79 ff ff ff 	jmp	-135 <_runtime.entersyscallblock_handoff>
 1032837:	cc 	int3
 1032838:	cc 	int3
 1032839:	cc 	int3
 103283a:	cc 	int3
 103283b:	cc 	int3
 103283c:	cc 	int3
 103283d:	cc 	int3
 103283e:	cc 	int3
 103283f:	cc 	int3

_runtime.exitsyscall:
 1032840:	48 83 ec 28 	sub	rsp, 40
 1032844:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1032849:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103284e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032857:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103285b:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1032861:	48 8d 4c 24 30 	lea	rcx, [rsp + 48]
 1032866:	48 39 48 70 	cmp	qword ptr [rax + 112], rcx
 103286a:	0f 82 34 02 00 00 	jb	564 <_runtime.exitsyscall+0x264>
 1032870:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1032875:	48 c7 80 a8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 168], 0
 1032880:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032884:	48 8b 91 e0 00 00 00 	mov	rdx, qword ptr [rcx + 224]
 103288b:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1032890:	48 c7 81 e0 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 224], 0
 103289b:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103289f:	e8 1c 02 00 00 	call	540 <_runtime.exitsyscallfast>
 10328a4:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 10328a9:	0f 85 c1 00 00 00 	jne	193 <_runtime.exitsyscall+0x130>
 10328af:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10328b4:	48 c7 80 c0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 192], 0
 10328bf:	80 3d 6a 26 0a 00 00 	cmp	byte ptr [rip + 665194], 0
 10328c6:	0f 84 9f 00 00 00 	je	159 <_runtime.exitsyscall+0x12b>
 10328cc:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10328d1:	eb 17 	jmp	23 <_runtime.exitsyscall+0xaa>
 10328d3:	90 	nop
 10328d4:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 10328db:	e8 00 09 01 00 	call	67840 <_runtime.usleep>
 10328e0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10328e5:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10328ea:	48 85 c9 	test	rcx, rcx
 10328ed:	74 0f 	je	15 <_runtime.exitsyscall+0xbe>
 10328ef:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 10328f3:	8b 92 a4 02 00 00 	mov	edx, dword ptr [rdx + 676]
 10328f9:	39 51 14 	cmp	dword ptr [rcx + 20], edx
 10328fc:	74 d5 	je	-43 <_runtime.exitsyscall+0x93>
 10328fe:	e8 3d fa 01 00 	call	129597 <_runtime.cputicks>
 1032903:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1032907:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103290c:	48 89 81 c0 00 00 00 	mov	qword ptr [rcx + 192], rax
 1032913:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1032917:	ff 88 08 01 00 00 	dec	dword ptr [rax + 264]
 103291d:	48 8d 05 9c 4e 04 00 	lea	rax, [rip + 282268]
 1032924:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032928:	e8 d3 e0 01 00 	call	123091 <_runtime.mcall>
 103292d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032932:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032936:	48 83 b9 60 01 00 00 00 	cmp	qword ptr [rcx + 352], 0
 103293e:	0f 84 2e 01 00 00 	je	302 <_runtime.exitsyscall+0x232>
 1032944:	48 c7 40 70 00 00 00 00 	mov	qword ptr [rax + 112], 0
 103294c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032950:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1032957:	ff 41 14 	inc	dword ptr [rcx + 20]
 103295a:	c6 80 b7 00 00 00 00 	mov	byte ptr [rax + 183], 0
 1032961:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1032966:	48 83 c4 28 	add	rsp, 40
 103296a:	c3 	ret
 103296b:	48 89 c1 	mov	rcx, rax
 103296e:	eb a3 	jmp	-93 <_runtime.exitsyscall+0xd3>
 1032970:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032975:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032979:	48 83 b9 60 01 00 00 00 	cmp	qword ptr [rcx + 352], 0
 1032981:	0f 84 04 01 00 00 	je	260 <_runtime.exitsyscall+0x24b>
 1032987:	80 3d a2 25 0a 00 00 	cmp	byte ptr [rip + 664994], 0
 103298e:	74 25 	je	37 <_runtime.exitsyscall+0x175>
 1032990:	48 8b 91 d0 00 00 00 	mov	rdx, qword ptr [rcx + 208]
 1032997:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 103299c:	48 39 d3 	cmp	rbx, rdx
 103299f:	0f 84 b9 00 00 00 	je	185 <_runtime.exitsyscall+0x21e>
 10329a5:	48 8d 05 e4 50 04 00 	lea	rax, [rip + 282852]
 10329ac:	48 89 04 24 	mov	qword ptr [rsp], rax
 10329b0:	e8 cb e0 01 00 	call	123083 <_runtime.systemstack>
 10329b5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10329ba:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10329be:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 10329c5:	ff 41 14 	inc	dword ptr [rcx + 20]
 10329c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10329cc:	48 b9 03 00 00 00 02 00 00 00 	movabs	rcx, 8589934595
 10329d6:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10329db:	e8 30 a9 ff ff 	call	-22224 <_runtime.casgstatus>
 10329e0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10329e5:	48 c7 40 70 00 00 00 00 	mov	qword ptr [rax + 112], 0
 10329ed:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10329f1:	ff 89 08 01 00 00 	dec	dword ptr [rcx + 264]
 10329f7:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 10329fe:	74 4e 	je	78 <_runtime.exitsyscall+0x20e>
 1032a00:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1032a08:	c6 80 b7 00 00 00 00 	mov	byte ptr [rax + 183], 0
 1032a0f:	80 3d c2 bc 09 00 00 	cmp	byte ptr [rip + 638146], 0
 1032a16:	75 23 	jne	35 <_runtime.exitsyscall+0x1fb>
 1032a18:	31 c0 	xor	eax, eax
 1032a1a:	84 c0 	test	al, al
 1032a1c:	75 0a 	jne	10 <_runtime.exitsyscall+0x1e8>
 1032a1e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1032a23:	48 83 c4 28 	add	rsp, 40
 1032a27:	c3 	ret
 1032a28:	90 	nop
 1032a29:	48 8d 05 38 4e 04 00 	lea	rax, [rip + 282168]
 1032a30:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032a34:	e8 c7 df 01 00 	call	122823 <_runtime.mcall>
 1032a39:	eb e3 	jmp	-29 <_runtime.exitsyscall+0x1de>
 1032a3b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032a3f:	e8 3c 44 00 00 	call	17468 <_runtime.schedEnabled>
 1032a44:	0f b6 44 24 08 	movzx	eax, byte ptr [rsp + 8]
 1032a49:	83 f0 01 	xor	eax, 1
 1032a4c:	eb cc 	jmp	-52 <_runtime.exitsyscall+0x1da>
 1032a4e:	48 8b 08 	mov	rcx, qword ptr [rax]
 1032a51:	48 81 c1 80 03 00 00 	add	rcx, 896
 1032a58:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1032a5c:	eb aa 	jmp	-86 <_runtime.exitsyscall+0x1c8>
 1032a5e:	8b 52 14 	mov	edx, dword ptr [rdx + 20]
 1032a61:	39 91 a4 02 00 00 	cmp	dword ptr [rcx + 676], edx
 1032a67:	0f 85 38 ff ff ff 	jne	-200 <_runtime.exitsyscall+0x165>
 1032a6d:	e9 43 ff ff ff 	jmp	-189 <_runtime.exitsyscall+0x175>
 1032a72:	48 8d 05 a5 09 04 00 	lea	rax, [rip + 264613]
 1032a79:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032a7d:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1032a86:	e8 d5 62 ff ff 	call	-40235 <_runtime.throw>
 1032a8b:	48 8d 05 8c 09 04 00 	lea	rax, [rip + 264588]
 1032a92:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032a96:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1032a9f:	e8 bc 62 ff ff 	call	-40260 <_runtime.throw>
 1032aa4:	48 8d 05 02 42 04 00 	lea	rax, [rip + 279042]
 1032aab:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032aaf:	48 c7 44 24 08 2d 00 00 00 	mov	qword ptr [rsp + 8], 45
 1032ab8:	e8 a3 62 ff ff 	call	-40285 <_runtime.throw>
 1032abd:	90 	nop
 1032abe:	cc 	int3
 1032abf:	cc 	int3

_runtime.exitsyscallfast:
 1032ac0:	48 83 ec 38 	sub	rsp, 56
 1032ac4:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1032ac9:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1032ace:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1032ad7:	81 3d 83 bc 09 00 ff ff ff 7f 	cmp	dword ptr [rip + 638083], 2147483647
 1032ae1:	0f 84 c5 00 00 00 	je	197 <_runtime.exitsyscallfast+0xec>
 1032ae7:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1032aec:	48 85 d2 	test	rdx, rdx
 1032aef:	0f 84 b0 00 00 00 	je	176 <_runtime.exitsyscallfast+0xe5>
 1032af5:	83 7a 04 02 	cmp	dword ptr [rdx + 4], 2
 1032af9:	0f 85 9f 00 00 00 	jne	159 <_runtime.exitsyscallfast+0xde>
 1032aff:	b8 02 00 00 00 	mov	eax, 2
 1032b04:	31 db 	xor	ebx, ebx
 1032b06:	f0 	lock
 1032b07:	0f b1 5a 04 	cmpxchg	dword ptr [rdx + 4], ebx
 1032b0b:	0f 94 c3 	sete	bl
 1032b0e:	84 db 	test	bl, bl
 1032b10:	75 6f 	jne	111 <_runtime.exitsyscallfast+0xc1>
 1032b12:	48 83 3d 96 bb 09 00 00 	cmp	qword ptr [rip + 637846], 0
 1032b1a:	75 0f 	jne	15 <_runtime.exitsyscallfast+0x6b>
 1032b1c:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 1032b21:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1032b26:	48 83 c4 38 	add	rsp, 56
 1032b2a:	c3 	ret
 1032b2b:	c6 44 24 0f 00 	mov	byte ptr [rsp + 15], 0
 1032b30:	0f 57 c0 	xorps	xmm0, xmm0
 1032b33:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1032b38:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1032b3d:	48 8d 05 7c d5 01 00 	lea	rax, [rip + 120188]
 1032b44:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1032b49:	48 8d 44 24 0f 	lea	rax, [rsp + 15]
 1032b4e:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1032b53:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1032b58:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1032b5d:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1032b62:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032b66:	e8 15 df 01 00 	call	122645 <_runtime.systemstack>
 1032b6b:	80 7c 24 0f 00 	cmp	byte ptr [rsp + 15], 0
 1032b70:	74 aa 	je	-86 <_runtime.exitsyscallfast+0x5c>
 1032b72:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 1032b77:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1032b7c:	48 83 c4 38 	add	rsp, 56
 1032b80:	c3 	ret
 1032b81:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1032b85:	e8 76 25 00 00 	call	9590 <_runtime.wirep>
 1032b8a:	e8 31 00 00 00 	call	49 <_runtime.exitsyscallfast_reacquired>
 1032b8f:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 1032b94:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1032b99:	48 83 c4 38 	add	rsp, 56
 1032b9d:	c3 	ret
 1032b9e:	31 db 	xor	ebx, ebx
 1032ba0:	e9 69 ff ff ff 	jmp	-151 <_runtime.exitsyscallfast+0x4e>
 1032ba5:	31 db 	xor	ebx, ebx
 1032ba7:	e9 62 ff ff ff 	jmp	-158 <_runtime.exitsyscallfast+0x4e>
 1032bac:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 1032bb1:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1032bb6:	48 83 c4 38 	add	rsp, 56
 1032bba:	c3 	ret
 1032bbb:	cc 	int3
 1032bbc:	cc 	int3
 1032bbd:	cc 	int3
 1032bbe:	cc 	int3
 1032bbf:	cc 	int3

_runtime.exitsyscallfast_reacquired:
 1032bc0:	48 83 ec 28 	sub	rsp, 40
 1032bc4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1032bc9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1032bce:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032bd7:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032bdb:	48 8b 91 d0 00 00 00 	mov	rdx, qword ptr [rcx + 208]
 1032be2:	8b 52 14 	mov	edx, dword ptr [rdx + 20]
 1032be5:	39 91 a4 02 00 00 	cmp	dword ptr [rcx + 676], edx
 1032beb:	74 17 	je	23 <_runtime.exitsyscallfast_reacquired+0x44>
 1032bed:	80 3d 3c 23 0a 00 00 	cmp	byte ptr [rip + 664380], 0
 1032bf4:	75 18 	jne	24 <_runtime.exitsyscallfast_reacquired+0x4e>
 1032bf6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1032bfa:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1032c01:	ff 40 14 	inc	dword ptr [rax + 20]
 1032c04:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1032c09:	48 83 c4 28 	add	rsp, 40
 1032c0d:	c3 	ret
 1032c0e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1032c13:	0f 57 c0 	xorps	xmm0, xmm0
 1032c16:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1032c1b:	48 8d 0d 4e d5 01 00 	lea	rcx, [rip + 120142]
 1032c22:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1032c27:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1032c2c:	48 8d 4c 24 10 	lea	rcx, [rsp + 16]
 1032c31:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1032c35:	e8 46 de 01 00 	call	122438 <_runtime.systemstack>
 1032c3a:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1032c3f:	eb b5 	jmp	-75 <_runtime.exitsyscallfast_reacquired+0x36>
 1032c41:	cc 	int3
 1032c42:	cc 	int3
 1032c43:	cc 	int3
 1032c44:	cc 	int3
 1032c45:	cc 	int3
 1032c46:	cc 	int3
 1032c47:	cc 	int3
 1032c48:	cc 	int3
 1032c49:	cc 	int3
 1032c4a:	cc 	int3
 1032c4b:	cc 	int3
 1032c4c:	cc 	int3
 1032c4d:	cc 	int3
 1032c4e:	cc 	int3
 1032c4f:	cc 	int3

_runtime.exitsyscallfast_pidle:
 1032c50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1032c59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1032c5d:	0f 86 c1 00 00 00 	jbe	193 <_runtime.exitsyscallfast_pidle+0xd4>
 1032c63:	48 83 ec 18 	sub	rsp, 24
 1032c67:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1032c6c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1032c71:	48 8d 05 00 ba 09 00 	lea	rax, [rip + 637440]
 1032c78:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032c7c:	e8 af 54 fd ff 	call	-174929 <_runtime.lock>
 1032c81:	90 	nop
 1032c82:	48 8b 05 27 ba 09 00 	mov	rax, qword ptr [rip + 637479]
 1032c89:	48 85 c0 	test	rax, rax
 1032c8c:	74 1e 	je	30 <_runtime.exitsyscallfast_pidle+0x5c>
 1032c8e:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1032c92:	48 89 0d 17 ba 09 00 	mov	qword ptr [rip + 637463], rcx
 1032c99:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1032c9e:	48 8d 15 13 ba 09 00 	lea	rdx, [rip + 637459]
 1032ca5:	f0 	lock
 1032ca6:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 1032ca9:	48 85 c0 	test	rax, rax
 1032cac:	74 72 	je	114 <_runtime.exitsyscallfast_pidle+0xd0>
 1032cae:	8b 0d bc ba 09 00 	mov	ecx, dword ptr [rip + 637628]
 1032cb4:	85 c9 	test	ecx, ecx
 1032cb6:	0f 95 c1 	setne	cl
 1032cb9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1032cbe:	84 c9 	test	cl, cl
 1032cc0:	75 41 	jne	65 <_runtime.exitsyscallfast_pidle+0xb3>
 1032cc2:	48 8d 05 af b9 09 00 	lea	rax, [rip + 637359]
 1032cc9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032ccd:	e8 3e 56 fd ff 	call	-174530 <_runtime.unlock>
 1032cd2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1032cd7:	48 85 c0 	test	rax, rax
 1032cda:	74 18 	je	24 <_runtime.exitsyscallfast_pidle+0xa4>
 1032cdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032ce0:	e8 bb 23 00 00 	call	9147 <_runtime.acquirep>
 1032ce5:	c6 44 24 20 01 	mov	byte ptr [rsp + 32], 1
 1032cea:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1032cef:	48 83 c4 18 	add	rsp, 24
 1032cf3:	c3 	ret
 1032cf4:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1032cf9:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1032cfe:	48 83 c4 18 	add	rsp, 24
 1032d02:	c3 	ret
 1032d03:	31 c0 	xor	eax, eax
 1032d05:	48 8d 0d 64 ba 09 00 	lea	rcx, [rip + 637540]
 1032d0c:	87 01 	xchg	dword ptr [rcx], eax
 1032d0e:	48 8d 05 63 ba 09 00 	lea	rax, [rip + 637539]
 1032d15:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032d19:	e8 d2 56 fd ff 	call	-174382 <_runtime.notewakeup>
 1032d1e:	eb a2 	jmp	-94 <_runtime.exitsyscallfast_pidle+0x72>
 1032d20:	31 c9 	xor	ecx, ecx
 1032d22:	eb 95 	jmp	-107 <_runtime.exitsyscallfast_pidle+0x69>
 1032d24:	e8 a7 de 01 00 	call	122535 <_runtime.morestack_noctxt>
 1032d29:	e9 22 ff ff ff 	jmp	-222 <_runtime.exitsyscallfast_pidle>
 1032d2e:	cc 	int3
 1032d2f:	cc 	int3

_runtime.exitsyscall0:
 1032d30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1032d39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1032d3d:	0f 86 b8 01 00 00 	jbe	440 <_runtime.exitsyscall0+0x1cb>
 1032d43:	48 83 ec 28 	sub	rsp, 40
 1032d47:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1032d4c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1032d51:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032d5a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1032d5f:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1032d64:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1032d68:	48 ba 03 00 00 00 01 00 00 00 	movabs	rdx, 4294967299
 1032d72:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1032d77:	e8 94 a5 ff ff 	call	-23148 <_runtime.casgstatus>
 1032d7c:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1032d85:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1032d89:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1032d90:	90 	nop
 1032d91:	90 	nop
 1032d92:	31 d2 	xor	edx, edx
 1032d94:	48 89 51 30 	mov	qword ptr [rcx + 48], rdx
 1032d98:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1032d9c:	90 	nop
 1032d9d:	31 c9 	xor	ecx, ecx
 1032d9f:	48 89 88 c0 00 00 00 	mov	qword ptr [rax + 192], rcx
 1032da6:	48 8d 05 cb b8 09 00 	lea	rax, [rip + 637131]
 1032dad:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032db1:	e8 7a 53 fd ff 	call	-175238 <_runtime.lock>
 1032db6:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1032dbb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032dbf:	e8 bc 40 00 00 	call	16572 <_runtime.schedEnabled>
 1032dc4:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1032dc9:	0f 84 25 01 00 00 	je	293 <_runtime.exitsyscall0+0x1c4>
 1032dcf:	90 	nop
 1032dd0:	48 8b 05 d9 b8 09 00 	mov	rax, qword ptr [rip + 637145]
 1032dd7:	48 85 c0 	test	rax, rax
 1032dda:	74 1b 	je	27 <_runtime.exitsyscall0+0xc7>
 1032ddc:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1032de0:	48 89 0d c9 b8 09 00 	mov	qword ptr [rip + 637129], rcx
 1032de7:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1032dec:	48 8d 15 c5 b8 09 00 	lea	rdx, [rip + 637125]
 1032df3:	f0 	lock
 1032df4:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 1032df7:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1032dfc:	48 85 c0 	test	rax, rax
 1032dff:	0f 84 a8 00 00 00 	je	168 <_runtime.exitsyscall0+0x17d>
 1032e05:	8b 0d 65 b9 09 00 	mov	ecx, dword ptr [rip + 637285]
 1032e0b:	85 c9 	test	ecx, ecx
 1032e0d:	75 79 	jne	121 <_runtime.exitsyscall0+0x158>
 1032e0f:	48 8d 05 62 b8 09 00 	lea	rax, [rip + 637026]
 1032e16:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032e1a:	e8 f1 54 fd ff 	call	-174863 <_runtime.unlock>
 1032e1f:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032e24:	48 85 c0 	test	rax, rax
 1032e27:	75 41 	jne	65 <_runtime.exitsyscall0+0x13a>
 1032e29:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1032e2e:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1032e32:	48 83 b8 68 01 00 00 00 	cmp	qword ptr [rax + 360], 0
 1032e3a:	75 14 	jne	20 <_runtime.exitsyscall0+0x120>
 1032e3c:	e8 cf c0 ff ff 	call	-16177 <_runtime.stopm>
 1032e41:	e8 ea df ff ff 	call	-8214 <_runtime.schedule>
 1032e46:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1032e4b:	48 83 c4 28 	add	rsp, 40
 1032e4f:	c3 	ret
 1032e50:	e8 8b c7 ff ff 	call	-14453 <_runtime.stoplockedm>
 1032e55:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1032e5a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032e5e:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1032e63:	e8 08 cc ff ff 	call	-13304 <_runtime.execute>
 1032e68:	eb d2 	jmp	-46 <_runtime.exitsyscall0+0x10c>
 1032e6a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032e6e:	e8 2d 22 00 00 	call	8749 <_runtime.acquirep>
 1032e73:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1032e78:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032e7c:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1032e81:	e8 ea cb ff ff 	call	-13334 <_runtime.execute>
 1032e86:	eb a1 	jmp	-95 <_runtime.exitsyscall0+0xf9>
 1032e88:	31 c0 	xor	eax, eax
 1032e8a:	48 8d 0d df b8 09 00 	lea	rcx, [rip + 637151]
 1032e91:	87 01 	xchg	dword ptr [rcx], eax
 1032e93:	48 8d 05 de b8 09 00 	lea	rax, [rip + 637150]
 1032e9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032e9e:	e8 4d 55 fd ff 	call	-174771 <_runtime.notewakeup>
 1032ea3:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032ea8:	e9 62 ff ff ff 	jmp	-158 <_runtime.exitsyscall0+0xdf>
 1032ead:	90 	nop
 1032eae:	90 	nop
 1032eaf:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1032eb4:	48 c7 81 a0 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 160], 0
 1032ebf:	48 8b 15 02 b8 09 00 	mov	rdx, qword ptr [rip + 636930]
 1032ec6:	48 85 d2 	test	rdx, rdx
 1032ec9:	74 1d 	je	29 <_runtime.exitsyscall0+0x1b8>
 1032ecb:	48 89 cb 	mov	rbx, rcx
 1032ece:	48 89 8a a0 00 00 00 	mov	qword ptr [rdx + 160], rcx
 1032ed5:	90 	nop
 1032ed6:	48 89 1d eb b7 09 00 	mov	qword ptr [rip + 636907], rbx
 1032edd:	ff 05 ed b7 09 00 	inc	dword ptr [rip + 636909]
 1032ee3:	e9 27 ff ff ff 	jmp	-217 <_runtime.exitsyscall0+0xdf>
 1032ee8:	48 89 cb 	mov	rbx, rcx
 1032eeb:	48 89 0d ce b7 09 00 	mov	qword ptr [rip + 636878], rcx
 1032ef2:	eb e1 	jmp	-31 <_runtime.exitsyscall0+0x1a5>
 1032ef4:	31 c0 	xor	eax, eax
 1032ef6:	e9 fc fe ff ff 	jmp	-260 <_runtime.exitsyscall0+0xc7>
 1032efb:	e8 d0 dc 01 00 	call	122064 <_runtime.morestack_noctxt>
 1032f00:	e9 2b fe ff ff 	jmp	-469 <_runtime.exitsyscall0>
 1032f05:	cc 	int3
 1032f06:	cc 	int3
 1032f07:	cc 	int3
 1032f08:	cc 	int3
 1032f09:	cc 	int3
 1032f0a:	cc 	int3
 1032f0b:	cc 	int3
 1032f0c:	cc 	int3
 1032f0d:	cc 	int3
 1032f0e:	cc 	int3
 1032f0f:	cc 	int3

_runtime.malg:
 1032f10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1032f19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1032f1d:	0f 86 b7 00 00 00 	jbe	183 <_runtime.malg+0xca>
 1032f23:	48 83 ec 38 	sub	rsp, 56
 1032f27:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1032f2c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1032f31:	48 8d 05 48 f2 03 00 	lea	rax, [rip + 258632]
 1032f38:	48 89 04 24 	mov	qword ptr [rsp], rax
 1032f3c:	e8 bf 74 fd ff 	call	-166721 <_runtime.newobject>
 1032f41:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1032f46:	8b 4c 24 40 	mov	ecx, dword ptr [rsp + 64]
 1032f4a:	85 c9 	test	ecx, ecx
 1032f4c:	7d 0f 	jge	15 <_runtime.malg+0x4d>
 1032f4e:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1032f53:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1032f58:	48 83 c4 38 	add	rsp, 56
 1032f5c:	c3 	ret
 1032f5d:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1032f62:	89 0c 24 	mov	dword ptr [rsp], ecx
 1032f65:	e8 46 be 00 00 	call	48710 <_runtime.round2>
 1032f6a:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 1032f6e:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1032f77:	c7 44 24 20 00 00 00 00 	mov	dword ptr [rsp + 32], 0
 1032f7f:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1032f88:	48 8d 0d 41 d2 01 00 	lea	rcx, [rip + 119361]
 1032f8f:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1032f94:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 1032f98:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032f9d:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1032fa2:	48 8d 4c 24 18 	lea	rcx, [rsp + 24]
 1032fa7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1032fab:	e8 d0 da 01 00 	call	121552 <_runtime.systemstack>
 1032fb0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1032fb5:	48 8b 08 	mov	rcx, qword ptr [rax]
 1032fb8:	48 81 c1 80 03 00 00 	add	rcx, 896
 1032fbf:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 1032fc3:	48 c7 40 18 ff ff ff ff 	mov	qword ptr [rax + 24], -1
 1032fcb:	48 8b 08 	mov	rcx, qword ptr [rax]
 1032fce:	48 c7 01 00 00 00 00 	mov	qword ptr [rcx], 0
 1032fd5:	e9 74 ff ff ff 	jmp	-140 <_runtime.malg+0x3e>
 1032fda:	e8 f1 db 01 00 	call	121841 <_runtime.morestack_noctxt>
 1032fdf:	e9 2c ff ff ff 	jmp	-212 <_runtime.malg>
 1032fe4:	cc 	int3
 1032fe5:	cc 	int3
 1032fe6:	cc 	int3
 1032fe7:	cc 	int3
 1032fe8:	cc 	int3
 1032fe9:	cc 	int3
 1032fea:	cc 	int3
 1032feb:	cc 	int3
 1032fec:	cc 	int3
 1032fed:	cc 	int3
 1032fee:	cc 	int3
 1032fef:	cc 	int3

_runtime.newproc:
 1032ff0:	48 83 ec 40 	sub	rsp, 64
 1032ff4:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1032ff9:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1032ffe:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1033007:	0f 57 c0 	xorps	xmm0, xmm0
 103300a:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 103300f:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1033014:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1033019:	48 8d 0d 10 d2 01 00 	lea	rcx, [rip + 119312]
 1033020:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1033025:	48 8d 4c 24 50 	lea	rcx, [rsp + 80]
 103302a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103302f:	48 8d 4c 24 58 	lea	rcx, [rsp + 88]
 1033034:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1033039:	8b 4c 24 48 	mov	ecx, dword ptr [rsp + 72]
 103303d:	89 4c 24 20 	mov	dword ptr [rsp + 32], ecx
 1033041:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1033046:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103304b:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1033050:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1033055:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033059:	e8 22 da 01 00 	call	121378 <_runtime.systemstack>
 103305e:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1033063:	48 83 c4 40 	add	rsp, 64
 1033067:	c3 	ret
 1033068:	cc 	int3
 1033069:	cc 	int3
 103306a:	cc 	int3
 103306b:	cc 	int3
 103306c:	cc 	int3
 103306d:	cc 	int3
 103306e:	cc 	int3
 103306f:	cc 	int3

_runtime.newproc1:
 1033070:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033079:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103307d:	0f 86 ea 04 00 00 	jbe	1258 <_runtime.newproc1+0x4fd>
 1033083:	48 83 ec 60 	sub	rsp, 96
 1033087:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 103308c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1033091:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103309a:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 103309f:	48 85 c9 	test	rcx, rcx
 10330a2:	0f 84 9d 04 00 00 	je	1181 <_runtime.newproc1+0x4d5>
 10330a8:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 10330ac:	90 	nop
 10330ad:	ff 82 08 01 00 00 	inc	dword ptr [rdx + 264]
 10330b3:	84 00 	test	byte ptr [rax], al
 10330b5:	8b 54 24 78 	mov	edx, dword ptr [rsp + 120]
 10330b9:	8d 5a 07 	lea	ebx, [rdx + 7]
 10330bc:	83 e3 f8 	and	ebx, -8
 10330bf:	81 fb d8 07 00 00 	cmp	ebx, 2008
 10330c5:	0f 8d 61 04 00 00 	jge	1121 <_runtime.newproc1+0x4bc>
 10330cb:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10330d0:	89 5c 24 2c 	mov	dword ptr [rsp + 44], ebx
 10330d4:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10330d8:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 10330df:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 10330e4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10330e8:	e8 53 09 00 00 	call	2387 <_runtime.gfget>
 10330ed:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10330f2:	48 85 c0 	test	rax, rax
 10330f5:	0f 84 b9 03 00 00 	je	953 <_runtime.newproc1+0x444>
 10330fb:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 1033100:	0f 84 0d 04 00 00 	je	1037 <_runtime.newproc1+0x4a3>
 1033106:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 103310c:	83 f9 06 	cmp	ecx, 6
 103310f:	0f 85 e5 03 00 00 	jne	997 <_runtime.newproc1+0x48a>
 1033115:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 103311a:	8b 4c 24 2c 	mov	ecx, dword ptr [rsp + 44]
 103311e:	48 63 c9 	movsxd	rcx, ecx
 1033121:	48 83 c1 20 	add	rcx, 32
 1033125:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1033129:	48 29 ca 	sub	rdx, rcx
 103312c:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1033131:	8b 4c 24 78 	mov	ecx, dword ptr [rsp + 120]
 1033135:	85 c9 	test	ecx, ecx
 1033137:	0f 8f ad 02 00 00 	jg	685 <_runtime.newproc1+0x37a>
 103313d:	48 8d 48 38 	lea	rcx, [rax + 56]
 1033141:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1033145:	48 c7 44 24 08 38 00 00 00 	mov	qword ptr [rsp + 8], 56
 103314e:	e8 6d 07 02 00 	call	132973 <_runtime.memclrNoHeapPointers>
 1033153:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1033158:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103315d:	48 89 41 38 	mov	qword ptr [rcx + 56], rax
 1033161:	48 89 81 80 00 00 00 	mov	qword ptr [rcx + 128], rax
 1033168:	48 8d 05 e9 46 04 00 	lea	rax, [rip + 280297]
 103316f:	84 00 	test	byte ptr [rax], al
 1033171:	48 8b 05 e0 46 04 00 	mov	rax, qword ptr [rip + 280288]
 1033178:	48 ff c0 	inc	rax
 103317b:	48 89 41 40 	mov	qword ptr [rcx + 64], rax
 103317f:	48 89 c8 	mov	rax, rcx
 1033182:	48 89 48 48 	mov	qword ptr [rax + 72], rcx
 1033186:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 103318a:	48 83 c1 f8 	add	rcx, -8
 103318e:	48 89 ca 	mov	rdx, rcx
 1033191:	90 	nop
 1033192:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1033197:	48 8b 33 	mov	rsi, qword ptr [rbx]
 103319a:	90 	nop
 103319b:	48 8b 78 40 	mov	rdi, qword ptr [rax + 64]
 103319f:	48 89 39 	mov	qword ptr [rcx], rdi
 10331a2:	48 89 50 38 	mov	qword ptr [rax + 56], rdx
 10331a6:	48 89 70 40 	mov	qword ptr [rax + 64], rsi
 10331aa:	83 3d 4f 47 0c 00 00 	cmp	dword ptr [rip + 804687], 0
 10331b1:	0f 85 1c 02 00 00 	jne	540 <_runtime.newproc1+0x363>
 10331b7:	48 89 58 50 	mov	qword ptr [rax + 80], rbx
 10331bb:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 10331c3:	48 89 88 18 01 00 00 	mov	qword ptr [rax + 280], rcx
 10331ca:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 10331d2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10331d6:	e8 a5 03 00 00 	call	933 <_runtime.saveAncestors>
 10331db:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10331e0:	83 3d 19 47 0c 00 00 	cmp	dword ptr [rip + 804633], 0
 10331e7:	0f 85 d0 01 00 00 	jne	464 <_runtime.newproc1+0x34d>
 10331ed:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10331f2:	48 89 81 20 01 00 00 	mov	qword ptr [rcx + 288], rax
 10331f9:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 10331fe:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1033201:	48 89 91 28 01 00 00 	mov	qword ptr [rcx + 296], rdx
 1033208:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 103320d:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1033211:	48 8b 9b c0 00 00 00 	mov	rbx, qword ptr [rbx + 192]
 1033218:	48 85 db 	test	rbx, rbx
 103321b:	74 1b 	je	27 <_runtime.newproc1+0x1c8>
 103321d:	48 8b 83 58 01 00 00 	mov	rax, qword ptr [rbx + 344]
 1033224:	83 3d d5 46 0c 00 00 	cmp	dword ptr [rip + 804565], 0
 103322b:	0f 85 7b 01 00 00 	jne	379 <_runtime.newproc1+0x33c>
 1033231:	48 89 81 58 01 00 00 	mov	qword ptr [rcx + 344], rax
 1033238:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103323c:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1033241:	e8 7a 78 01 00 	call	96378 <_runtime.isSystemGoroutine>
 1033246:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 103324b:	74 10 	je	16 <_runtime.newproc1+0x1ed>
 103324d:	b8 01 00 00 00 	mov	eax, 1
 1033252:	48 8d 0d 4f b4 09 00 	lea	rcx, [rip + 635983]
 1033259:	f0 	lock
 103325a:	0f c1 01 	xadd	dword ptr [rcx], eax
 103325d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1033262:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033266:	48 b9 06 00 00 00 01 00 00 00 	movabs	rcx, 4294967302
 1033270:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1033275:	e8 96 a0 ff ff 	call	-24426 <_runtime.casgstatus>
 103327a:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103327f:	48 8b 88 e8 05 00 00 	mov	rcx, qword ptr [rax + 1512]
 1033286:	48 39 88 e0 05 00 00 	cmp	qword ptr [rax + 1504], rcx
 103328d:	75 27 	jne	39 <_runtime.newproc1+0x246>
 103328f:	b9 10 00 00 00 	mov	ecx, 16
 1033294:	48 8d 15 c5 b3 09 00 	lea	rdx, [rip + 635845]
 103329b:	f0 	lock
 103329c:	48 0f c1 0a 	xadd	qword ptr [rdx], rcx
 10332a0:	48 8d 51 01 	lea	rdx, [rcx + 1]
 10332a4:	48 89 90 e0 05 00 00 	mov	qword ptr [rax + 1504], rdx
 10332ab:	48 83 c1 11 	add	rcx, 17
 10332af:	48 89 88 e8 05 00 00 	mov	qword ptr [rax + 1512], rcx
 10332b6:	48 8b 88 e0 05 00 00 	mov	rcx, qword ptr [rax + 1504]
 10332bd:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10332c2:	48 89 8a 98 00 00 00 	mov	qword ptr [rdx + 152], rcx
 10332c9:	48 ff 80 e0 05 00 00 	inc	qword ptr [rax + 1504]
 10332d0:	80 3d 59 1c 0a 00 00 	cmp	byte ptr [rip + 662617], 0
 10332d7:	0f 85 ab 00 00 00 	jne	171 <_runtime.newproc1+0x318>
 10332dd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10332e1:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10332e6:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10332eb:	e8 20 3e 00 00 	call	15904 <_runtime.runqput>
 10332f0:	8b 05 c2 b3 09 00 	mov	eax, dword ptr [rip + 635842]
 10332f6:	85 c0 	test	eax, eax
 10332f8:	0f 84 86 00 00 00 	je	134 <_runtime.newproc1+0x314>
 10332fe:	8b 0d b8 b3 09 00 	mov	ecx, dword ptr [rip + 635832]
 1033304:	85 c9 	test	ecx, ecx
 1033306:	0f 94 c1 	sete	cl
 1033309:	84 c9 	test	cl, cl
 103330b:	74 22 	je	34 <_runtime.newproc1+0x2bf>
 103330d:	80 3d 59 44 0c 00 00 	cmp	byte ptr [rip + 803929], 0
 1033314:	74 19 	je	25 <_runtime.newproc1+0x2bf>
 1033316:	31 c0 	xor	eax, eax
 1033318:	48 8d 0d 9d b3 09 00 	lea	rcx, [rip + 635805]
 103331f:	ba 01 00 00 00 	mov	edx, 1
 1033324:	f0 	lock
 1033325:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 1033328:	0f 94 c1 	sete	cl
 103332b:	84 c9 	test	cl, cl
 103332d:	75 41 	jne	65 <_runtime.newproc1+0x300>
 103332f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1033334:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1033338:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033341:	8b 90 08 01 00 00 	mov	edx, dword ptr [rax + 264]
 1033347:	8d 5a ff 	lea	ebx, [rdx - 1]
 103334a:	89 98 08 01 00 00 	mov	dword ptr [rax + 264], ebx
 1033350:	83 fa 01 	cmp	edx, 1
 1033353:	75 11 	jne	17 <_runtime.newproc1+0x2f6>
 1033355:	80 b9 b1 00 00 00 00 	cmp	byte ptr [rcx + 177], 0
 103335c:	74 08 	je	8 <_runtime.newproc1+0x2f6>
 103335e:	48 c7 41 10 de fa ff ff 	mov	qword ptr [rcx + 16], -1314
 1033366:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 103336b:	48 83 c4 60 	add	rsp, 96
 103336f:	c3 	ret
 1033370:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1033378:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 103337d:	e8 0e bd ff ff 	call	-17138 <_runtime.startm>
 1033382:	eb ab 	jmp	-85 <_runtime.newproc1+0x2bf>
 1033384:	31 c9 	xor	ecx, ecx
 1033386:	eb 81 	jmp	-127 <_runtime.newproc1+0x299>
 1033388:	48 8b 82 28 01 00 00 	mov	rax, qword ptr [rdx + 296]
 103338f:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1033393:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1033398:	e8 43 37 01 00 	call	79683 <_runtime.traceGoCreate>
 103339d:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10333a2:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10333a7:	e9 31 ff ff ff 	jmp	-207 <_runtime.newproc1+0x26d>
 10333ac:	48 8d b9 58 01 00 00 	lea	rdi, [rcx + 344]
 10333b3:	e8 28 f6 01 00 	call	128552 <_runtime.gcWriteBarrier>
 10333b8:	e9 7b fe ff ff 	jmp	-389 <_runtime.newproc1+0x1c8>
 10333bd:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10333c2:	48 8d b9 20 01 00 00 	lea	rdi, [rcx + 288]
 10333c9:	e8 12 f6 01 00 	call	128530 <_runtime.gcWriteBarrier>
 10333ce:	e9 26 fe ff ff 	jmp	-474 <_runtime.newproc1+0x189>
 10333d3:	48 8d 78 50 	lea	rdi, [rax + 80]
 10333d7:	48 89 c1 	mov	rcx, rax
 10333da:	48 89 d8 	mov	rax, rbx
 10333dd:	e8 fe f5 01 00 	call	128510 <_runtime.gcWriteBarrier>
 10333e2:	48 89 c8 	mov	rax, rcx
 10333e5:	e9 d1 fd ff ff 	jmp	-559 <_runtime.newproc1+0x14b>
 10333ea:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10333ee:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 10333f3:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10333f8:	48 63 c9 	movsxd	rcx, ecx
 10333fb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1033400:	e8 4b 07 02 00 	call	132939 <_runtime.memmove>
 1033405:	80 3d f8 44 0c 00 00 	cmp	byte ptr [rip + 804088], 0
 103340c:	0f 84 98 00 00 00 	je	152 <_runtime.newproc1+0x43a>
 1033412:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1033417:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103341b:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1033422:	80 b9 b6 00 00 00 00 	cmp	byte ptr [rcx + 182], 0
 1033429:	74 0a 	je	10 <_runtime.newproc1+0x3c5>
 103342b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1033430:	e9 08 fd ff ff 	jmp	-760 <_runtime.newproc1+0xcd>
 1033435:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103343a:	48 8b 08 	mov	rcx, qword ptr [rax]
 103343d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1033441:	e8 2a e7 00 00 	call	59178 <_runtime.findfunc>
 1033446:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103344b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1033450:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033454:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1033459:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 103345e:	e8 1d f5 00 00 	call	62749 <_runtime.funcdata>
 1033463:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1033468:	8b 48 04 	mov	ecx, dword ptr [rax + 4]
 103346b:	85 c9 	test	ecx, ecx
 103346d:	7f 07 	jg	7 <_runtime.newproc1+0x406>
 103346f:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1033474:	eb b5 	jmp	-75 <_runtime.newproc1+0x3bb>
 1033476:	90 	nop
 1033477:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 103347c:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1033480:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1033485:	48 63 c9 	movsxd	rcx, ecx
 1033488:	48 c1 e1 03 	shl	rcx, 3
 103348c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1033491:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 103349a:	48 83 c0 08 	add	rax, 8
 103349e:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10334a3:	e8 18 af fd ff 	call	-151784 <_runtime.bulkBarrierBitmap>
 10334a8:	eb c5 	jmp	-59 <_runtime.newproc1+0x3ff>
 10334aa:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10334af:	e9 77 ff ff ff 	jmp	-137 <_runtime.newproc1+0x3bb>
 10334b4:	c7 04 24 00 08 00 00 	mov	dword ptr [rsp], 2048
 10334bb:	e8 50 fa ff ff 	call	-1456 <_runtime.malg>
 10334c0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10334c5:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10334ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 10334ce:	48 b9 00 00 00 00 06 00 00 00 	movabs	rcx, 25769803776
 10334d8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10334dd:	e8 2e 9e ff ff 	call	-25042 <_runtime.casgstatus>
 10334e2:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10334e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10334eb:	e8 b0 8c ff ff 	call	-29520 <_runtime.allgadd>
 10334f0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10334f5:	e9 01 fc ff ff 	jmp	-1023 <_runtime.newproc1+0x8b>
 10334fa:	48 8d 05 90 1e 04 00 	lea	rax, [rip + 269968]
 1033501:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033505:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 103350e:	e8 4d 58 ff ff 	call	-42931 <_runtime.throw>
 1033513:	48 8d 05 93 1e 04 00 	lea	rax, [rip + 269971]
 103351a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103351e:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1033527:	e8 34 58 ff ff 	call	-42956 <_runtime.throw>
 103352c:	48 8d 05 ba 3e 04 00 	lea	rax, [rip + 278202]
 1033533:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033537:	48 c7 44 24 08 37 00 00 00 	mov	qword ptr [rsp + 8], 55
 1033540:	e8 1b 58 ff ff 	call	-42981 <_runtime.throw>
 1033545:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1033549:	c7 80 f4 00 00 00 ff ff ff ff 	mov	dword ptr [rax + 244], 4294967295
 1033553:	48 8d 05 c6 0c 04 00 	lea	rax, [rip + 265414]
 103355a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103355e:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1033567:	e8 f4 57 ff ff 	call	-43020 <_runtime.throw>
 103356c:	90 	nop
 103356d:	e8 5e d6 01 00 	call	120414 <_runtime.morestack_noctxt>
 1033572:	e9 f9 fa ff ff 	jmp	-1287 <_runtime.newproc1>
 1033577:	cc 	int3
 1033578:	cc 	int3
 1033579:	cc 	int3
 103357a:	cc 	int3
 103357b:	cc 	int3
 103357c:	cc 	int3
 103357d:	cc 	int3
 103357e:	cc 	int3
 103357f:	cc 	int3

_runtime.saveAncestors:
 1033580:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033589:	48 8d 84 24 b8 fc ff ff 	lea	rax, [rsp - 840]
 1033591:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1033595:	0f 86 20 03 00 00 	jbe	800 <_runtime.saveAncestors+0x33b>
 103359b:	48 81 ec c8 03 00 00 	sub	rsp, 968
 10335a2:	48 89 ac 24 c0 03 00 00 	mov	qword ptr [rsp + 960], rbp
 10335aa:	48 8d ac 24 c0 03 00 00 	lea	rbp, [rsp + 960]
 10335b2:	8b 05 c8 44 0c 00 	mov	eax, dword ptr [rip + 804040]
 10335b8:	85 c0 	test	eax, eax
 10335ba:	7f 1c 	jg	28 <_runtime.saveAncestors+0x58>
 10335bc:	48 c7 84 24 d8 03 00 00 00 00 00 00 	mov	qword ptr [rsp + 984], 0
 10335c8:	48 8b ac 24 c0 03 00 00 	mov	rbp, qword ptr [rsp + 960]
 10335d0:	48 81 c4 c8 03 00 00 	add	rsp, 968
 10335d7:	c3 	ret
 10335d8:	48 8b 8c 24 d0 03 00 00 	mov	rcx, qword ptr [rsp + 976]
 10335e0:	48 83 b9 98 00 00 00 00 	cmp	qword ptr [rcx + 152], 0
 10335e8:	74 d2 	je	-46 <_runtime.saveAncestors+0x3c>
 10335ea:	48 8b 91 20 01 00 00 	mov	rdx, qword ptr [rcx + 288]
 10335f1:	48 85 d2 	test	rdx, rdx
 10335f4:	0f 84 ab 02 00 00 	je	683 <_runtime.saveAncestors+0x325>
 10335fa:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 10335fe:	48 8b 72 08 	mov	rsi, qword ptr [rdx + 8]
 1033602:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1033605:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 103360a:	48 89 94 24 90 03 00 00 	mov	qword ptr [rsp + 912], rdx
 1033612:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 1033617:	48 8d 0d 62 58 03 00 	lea	rcx, [rip + 219234]
 103361e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1033622:	8d 7e 01 	lea	edi, [rsi + 1]
 1033625:	39 c7 	cmp	edi, eax
 1033627:	0f 4f f8 	cmovg	edi, eax
 103362a:	48 63 c7 	movsxd	rax, edi
 103362d:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1033632:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1033637:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103363c:	e8 df 94 00 00 	call	38111 <_runtime.makeslice>
 1033641:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1033646:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 103364b:	48 83 f9 01 	cmp	rcx, 1
 103364f:	0f 82 5b 02 00 00 	jb	603 <_runtime.saveAncestors+0x330>
 1033655:	48 89 84 24 88 03 00 00 	mov	qword ptr [rsp + 904], rax
 103365d:	48 8d 15 1c 58 03 00 	lea	rdx, [rip + 219164]
 1033664:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1033668:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 103366c:	48 89 d3 	mov	rbx, rdx
 103366f:	48 f7 da 	neg	rdx
 1033672:	48 c1 fa 3f 	sar	rdx, 63
 1033676:	48 83 e2 28 	and	rdx, 40
 103367a:	48 01 c2 	add	rdx, rax
 103367d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1033682:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1033687:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 103368c:	48 8b 94 24 90 03 00 00 	mov	rdx, qword ptr [rsp + 912]
 1033694:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1033699:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 103369e:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10336a3:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10336a8:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 10336ad:	e8 8e 9b fd ff 	call	-156786 <_runtime.typedslicecopy>
 10336b2:	48 8d 7c 24 60 	lea	rdi, [rsp + 96]
 10336b7:	0f 57 c0 	xorps	xmm0, xmm0
 10336ba:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 10336be:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 10336c3:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 10336c8:	e8 63 fd 01 00 	call	130403 <_runtime.duffzero+0x40>
 10336cd:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 10336d1:	48 8b 84 24 d0 03 00 00 	mov	rax, qword ptr [rsp + 976]
 10336d9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10336dd:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10336e6:	48 8d 4c 24 60 	lea	rcx, [rsp + 96]
 10336eb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10336f0:	48 c7 44 24 18 64 00 00 00 	mov	qword ptr [rsp + 24], 100
 10336f9:	48 c7 44 24 20 64 00 00 00 	mov	qword ptr [rsp + 32], 100
 1033702:	e8 09 69 01 00 	call	92425 <_runtime.gcallers>
 1033707:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103370c:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1033711:	48 8d 0d 08 ca 02 00 	lea	rcx, [rip + 182792]
 1033718:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103371c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1033721:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1033726:	e8 f5 93 00 00 	call	37877 <_runtime.makeslice>
 103372b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1033730:	48 83 f8 64 	cmp	rax, 100
 1033734:	b9 64 00 00 00 	mov	ecx, 100
 1033739:	48 89 c2 	mov	rdx, rax
 103373c:	48 0f 4f c1 	cmovg	rax, rcx
 1033740:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1033745:	48 8d 5c 24 60 	lea	rbx, [rsp + 96]
 103374a:	48 39 d9 	cmp	rcx, rbx
 103374d:	0f 85 21 01 00 00 	jne	289 <_runtime.saveAncestors+0x2f4>
 1033753:	48 c7 84 24 98 03 00 00 00 00 00 00 	mov	qword ptr [rsp + 920], 0
 103375f:	0f 57 c0 	xorps	xmm0, xmm0
 1033762:	0f 11 84 24 a0 03 00 00 	movups	xmmword ptr [rsp + 928], xmm0
 103376a:	0f 11 84 24 b0 03 00 00 	movups	xmmword ptr [rsp + 944], xmm0
 1033772:	48 89 8c 24 98 03 00 00 	mov	qword ptr [rsp + 920], rcx
 103377a:	48 89 94 24 a0 03 00 00 	mov	qword ptr [rsp + 928], rdx
 1033782:	48 89 94 24 a8 03 00 00 	mov	qword ptr [rsp + 936], rdx
 103378a:	48 8b 84 24 d0 03 00 00 	mov	rax, qword ptr [rsp + 976]
 1033792:	48 8b 88 98 00 00 00 	mov	rcx, qword ptr [rax + 152]
 1033799:	48 89 8c 24 b0 03 00 00 	mov	qword ptr [rsp + 944], rcx
 10337a1:	48 8b 80 18 01 00 00 	mov	rax, qword ptr [rax + 280]
 10337a8:	48 89 84 24 b8 03 00 00 	mov	qword ptr [rsp + 952], rax
 10337b0:	83 3d 49 41 0c 00 00 	cmp	dword ptr [rip + 803145], 0
 10337b7:	0f 85 88 00 00 00 	jne	136 <_runtime.saveAncestors+0x2c5>
 10337bd:	48 8b 84 24 98 03 00 00 	mov	rax, qword ptr [rsp + 920]
 10337c5:	48 8b 8c 24 88 03 00 00 	mov	rcx, qword ptr [rsp + 904]
 10337cd:	48 89 01 	mov	qword ptr [rcx], rax
 10337d0:	0f 10 84 24 a0 03 00 00 	movups	xmm0, xmmword ptr [rsp + 928]
 10337d8:	0f 11 41 08 	movups	xmmword ptr [rcx + 8], xmm0
 10337dc:	0f 10 84 24 b0 03 00 00 	movups	xmm0, xmmword ptr [rsp + 944]
 10337e4:	0f 11 41 18 	movups	xmmword ptr [rcx + 24], xmm0
 10337e8:	48 8d 05 f1 b1 02 00 	lea	rax, [rip + 176625]
 10337ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10337f3:	e8 08 6c fd ff 	call	-168952 <_runtime.newobject>
 10337f8:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 10337fd:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1033802:	48 89 47 08 	mov	qword ptr [rdi + 8], rax
 1033806:	48 89 47 10 	mov	qword ptr [rdi + 16], rax
 103380a:	83 3d ef 40 0c 00 00 	cmp	dword ptr [rip + 803055], 0
 1033811:	75 23 	jne	35 <_runtime.saveAncestors+0x2b6>
 1033813:	48 8b 84 24 88 03 00 00 	mov	rax, qword ptr [rsp + 904]
 103381b:	48 89 07 	mov	qword ptr [rdi], rax
 103381e:	48 89 bc 24 d8 03 00 00 	mov	qword ptr [rsp + 984], rdi
 1033826:	48 8b ac 24 c0 03 00 00 	mov	rbp, qword ptr [rsp + 960]
 103382e:	48 81 c4 c8 03 00 00 	add	rsp, 968
 1033835:	c3 	ret
 1033836:	48 8b 84 24 88 03 00 00 	mov	rax, qword ptr [rsp + 904]
 103383e:	e8 9d f1 01 00 	call	127389 <_runtime.gcWriteBarrier>
 1033843:	eb d9 	jmp	-39 <_runtime.saveAncestors+0x29e>
 1033845:	48 8d 05 34 56 03 00 	lea	rax, [rip + 218676]
 103384c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033850:	48 8b 84 24 88 03 00 00 	mov	rax, qword ptr [rsp + 904]
 1033858:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103385d:	48 8d 8c 24 98 03 00 00 	lea	rcx, [rsp + 920]
 1033865:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103386a:	e8 71 98 fd ff 	call	-157583 <_runtime.typedmemmove>
 103386f:	e9 74 ff ff ff 	jmp	-140 <_runtime.saveAncestors+0x268>
 1033874:	48 89 8c 24 80 03 00 00 	mov	qword ptr [rsp + 896], rcx
 103387c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1033880:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1033885:	48 c1 e0 03 	shl	rax, 3
 1033889:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103388e:	e8 bd 02 02 00 	call	131773 <_runtime.memmove>
 1033893:	48 8b 8c 24 80 03 00 00 	mov	rcx, qword ptr [rsp + 896]
 103389b:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 10338a0:	e9 ae fe ff ff 	jmp	-338 <_runtime.saveAncestors+0x1d3>
 10338a5:	31 f6 	xor	esi, esi
 10338a7:	31 d2 	xor	edx, edx
 10338a9:	31 db 	xor	ebx, ebx
 10338ab:	e9 55 fd ff ff 	jmp	-683 <_runtime.saveAncestors+0x85>
 10338b0:	b8 01 00 00 00 	mov	eax, 1
 10338b5:	e8 f6 fa 01 00 	call	129782 <_runtime.panicSliceB>
 10338ba:	90 	nop
 10338bb:	e8 10 d3 01 00 	call	119568 <_runtime.morestack_noctxt>
 10338c0:	e9 bb fc ff ff 	jmp	-837 <_runtime.saveAncestors>
 10338c5:	cc 	int3
 10338c6:	cc 	int3
 10338c7:	cc 	int3
 10338c8:	cc 	int3
 10338c9:	cc 	int3
 10338ca:	cc 	int3
 10338cb:	cc 	int3
 10338cc:	cc 	int3
 10338cd:	cc 	int3
 10338ce:	cc 	int3
 10338cf:	cc 	int3

_runtime.gfput:
 10338d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10338d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10338dd:	0f 86 4b 01 00 00 	jbe	331 <_runtime.gfput+0x15e>
 10338e3:	48 83 ec 18 	sub	rsp, 24
 10338e7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10338ec:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10338f1:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10338f6:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 10338fc:	83 f9 06 	cmp	ecx, 6
 10338ff:	0f 85 0f 01 00 00 	jne	271 <_runtime.gfput+0x144>
 1033905:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1033909:	48 8b 10 	mov	rdx, qword ptr [rax]
 103390c:	48 89 cb 	mov	rbx, rcx
 103390f:	48 29 d1 	sub	rcx, rdx
 1033912:	48 81 f9 00 08 00 00 	cmp	rcx, 2048
 1033919:	0f 85 cf 00 00 00 	jne	207 <_runtime.gfput+0x11e>
 103391f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1033924:	48 8b 91 00 0e 00 00 	mov	rdx, qword ptr [rcx + 3584]
 103392b:	48 89 90 a0 00 00 00 	mov	qword ptr [rax + 160], rdx
 1033932:	90 	nop
 1033933:	48 89 81 00 0e 00 00 	mov	qword ptr [rcx + 3584], rax
 103393a:	8b 81 08 0e 00 00 	mov	eax, dword ptr [rcx + 3592]
 1033940:	ff c0 	inc	eax
 1033942:	89 81 08 0e 00 00 	mov	dword ptr [rcx + 3592], eax
 1033948:	83 f8 40 	cmp	eax, 64
 103394b:	0f 8c 93 00 00 00 	jl	147 <_runtime.gfput+0x114>
 1033951:	48 8d 05 a0 ad 09 00 	lea	rax, [rip + 634272]
 1033958:	48 89 04 24 	mov	qword ptr [rsp], rax
 103395c:	e8 cf 47 fd ff 	call	-178225 <_runtime.lock>
 1033961:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1033966:	eb 06 	jmp	6 <_runtime.gfput+0x9e>
 1033968:	ff 05 a2 ad 09 00 	inc	dword ptr [rip + 634274]
 103396e:	8b 88 08 0e 00 00 	mov	ecx, dword ptr [rax + 3592]
 1033974:	83 f9 20 	cmp	ecx, 32
 1033977:	7c 5b 	jl	91 <_runtime.gfput+0x104>
 1033979:	ff c9 	dec	ecx
 103397b:	89 88 08 0e 00 00 	mov	dword ptr [rax + 3592], ecx
 1033981:	90 	nop
 1033982:	48 8b 88 00 0e 00 00 	mov	rcx, qword ptr [rax + 3584]
 1033989:	48 85 c9 	test	rcx, rcx
 103398c:	74 0e 	je	14 <_runtime.gfput+0xcc>
 103398e:	48 8b 91 a0 00 00 00 	mov	rdx, qword ptr [rcx + 160]
 1033995:	48 89 90 00 0e 00 00 	mov	qword ptr [rax + 3584], rdx
 103399c:	48 83 39 00 	cmp	qword ptr [rcx], 0
 10339a0:	75 19 	jne	25 <_runtime.gfput+0xeb>
 10339a2:	90 	nop
 10339a3:	48 8b 15 5e ad 09 00 	mov	rdx, qword ptr [rip + 634206]
 10339aa:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 10339b1:	90 	nop
 10339b2:	48 89 0d 4f ad 09 00 	mov	qword ptr [rip + 634191], rcx
 10339b9:	eb ad 	jmp	-83 <_runtime.gfput+0x98>
 10339bb:	90 	nop
 10339bc:	48 8b 15 3d ad 09 00 	mov	rdx, qword ptr [rip + 634173]
 10339c3:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 10339ca:	90 	nop
 10339cb:	48 89 0d 2e ad 09 00 	mov	qword ptr [rip + 634158], rcx
 10339d2:	eb 94 	jmp	-108 <_runtime.gfput+0x98>
 10339d4:	48 8d 05 1d ad 09 00 	lea	rax, [rip + 634141]
 10339db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10339df:	e8 2c 49 fd ff 	call	-177876 <_runtime.unlock>
 10339e4:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10339e9:	48 83 c4 18 	add	rsp, 24
 10339ed:	c3 	ret
 10339ee:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10339f2:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10339f7:	e8 34 a3 00 00 	call	41780 <_runtime.stackfree>
 10339fc:	0f 57 c0 	xorps	xmm0, xmm0
 10339ff:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1033a04:	0f 11 00 	movups	xmmword ptr [rax], xmm0
 1033a07:	48 c7 40 10 00 00 00 00 	mov	qword ptr [rax + 16], 0
 1033a0f:	e9 0b ff ff ff 	jmp	-245 <_runtime.gfput+0x4f>
 1033a14:	48 8d 05 e6 1a 04 00 	lea	rax, [rip + 269030]
 1033a1b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033a1f:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1033a28:	e8 33 53 ff ff 	call	-44237 <_runtime.throw>
 1033a2d:	90 	nop
 1033a2e:	e8 9d d1 01 00 	call	119197 <_runtime.morestack_noctxt>
 1033a33:	e9 98 fe ff ff 	jmp	-360 <_runtime.gfput>
 1033a38:	cc 	int3
 1033a39:	cc 	int3
 1033a3a:	cc 	int3
 1033a3b:	cc 	int3
 1033a3c:	cc 	int3
 1033a3d:	cc 	int3
 1033a3e:	cc 	int3
 1033a3f:	cc 	int3

_runtime.gfget:
 1033a40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033a49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033a4d:	0f 86 4f 01 00 00 	jbe	335 <_runtime.gfget+0x162>
 1033a53:	48 83 ec 28 	sub	rsp, 40
 1033a57:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1033a5c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1033a61:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1033a66:	eb 7b 	jmp	123 <_runtime.gfget+0xa3>
 1033a68:	ff 0d a2 ac 09 00 	dec	dword ptr [rip + 634018]
 1033a6e:	90 	nop
 1033a6f:	48 8b 90 00 0e 00 00 	mov	rdx, qword ptr [rax + 3584]
 1033a76:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 1033a7d:	90 	nop
 1033a7e:	48 89 88 00 0e 00 00 	mov	qword ptr [rax + 3584], rcx
 1033a85:	ff 80 08 0e 00 00 	inc	dword ptr [rax + 3592]
 1033a8b:	83 b8 08 0e 00 00 20 	cmp	dword ptr [rax + 3592], 32
 1033a92:	7d 3a 	jge	58 <_runtime.gfget+0x8e>
 1033a94:	90 	nop
 1033a95:	48 8b 0d 64 ac 09 00 	mov	rcx, qword ptr [rip + 633956]
 1033a9c:	48 85 c9 	test	rcx, rcx
 1033a9f:	74 0e 	je	14 <_runtime.gfget+0x6f>
 1033aa1:	48 8b 91 a0 00 00 00 	mov	rdx, qword ptr [rcx + 160]
 1033aa8:	48 89 15 51 ac 09 00 	mov	qword ptr [rip + 633937], rdx
 1033aaf:	75 b7 	jne	-73 <_runtime.gfget+0x28>
 1033ab1:	90 	nop
 1033ab2:	48 8b 0d 4f ac 09 00 	mov	rcx, qword ptr [rip + 633935]
 1033ab9:	48 85 c9 	test	rcx, rcx
 1033abc:	74 0e 	je	14 <_runtime.gfget+0x8c>
 1033abe:	48 8b 91 a0 00 00 00 	mov	rdx, qword ptr [rcx + 160]
 1033ac5:	48 89 15 3c ac 09 00 	mov	qword ptr [rip + 633916], rdx
 1033acc:	75 9a 	jne	-102 <_runtime.gfget+0x28>
 1033ace:	48 8d 05 23 ac 09 00 	lea	rax, [rip + 633891]
 1033ad5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033ad9:	e8 32 48 fd ff 	call	-178126 <_runtime.unlock>
 1033ade:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1033ae3:	48 8b 88 00 0e 00 00 	mov	rcx, qword ptr [rax + 3584]
 1033aea:	48 85 c9 	test	rcx, rcx
 1033aed:	75 2e 	jne	46 <_runtime.gfget+0xdd>
 1033aef:	48 83 3d 09 ac 09 00 00 	cmp	qword ptr [rip + 633865], 0
 1033af7:	75 0a 	jne	10 <_runtime.gfget+0xc3>
 1033af9:	48 83 3d 07 ac 09 00 00 	cmp	qword ptr [rip + 633863], 0
 1033b01:	74 1a 	je	26 <_runtime.gfget+0xdd>
 1033b03:	48 8d 05 ee ab 09 00 	lea	rax, [rip + 633838]
 1033b0a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033b0e:	e8 1d 46 fd ff 	call	-178659 <_runtime.lock>
 1033b13:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1033b18:	e9 6e ff ff ff 	jmp	-146 <_runtime.gfget+0x4b>
 1033b1d:	90 	nop
 1033b1e:	90 	nop
 1033b1f:	48 85 c9 	test	rcx, rcx
 1033b22:	74 0e 	je	14 <_runtime.gfget+0xf2>
 1033b24:	48 8b 91 a0 00 00 00 	mov	rdx, qword ptr [rcx + 160]
 1033b2b:	48 89 90 00 0e 00 00 	mov	qword ptr [rax + 3584], rdx
 1033b32:	74 5b 	je	91 <_runtime.gfget+0x14f>
 1033b34:	ff 88 08 0e 00 00 	dec	dword ptr [rax + 3592]
 1033b3a:	48 83 39 00 	cmp	qword ptr [rcx], 0
 1033b3e:	74 0f 	je	15 <_runtime.gfget+0x10f>
 1033b40:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 1033b45:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1033b4a:	48 83 c4 28 	add	rsp, 40
 1033b4e:	c3 	ret
 1033b4f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1033b54:	0f 57 c0 	xorps	xmm0, xmm0
 1033b57:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 1033b5c:	48 8d 05 2d c7 01 00 	lea	rax, [rip + 116525]
 1033b63:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1033b68:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1033b6d:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1033b72:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033b76:	e8 05 cf 01 00 	call	118533 <_runtime.systemstack>
 1033b7b:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1033b80:	48 8b 01 	mov	rax, qword ptr [rcx]
 1033b83:	48 05 80 03 00 00 	add	rax, 896
 1033b89:	48 89 41 10 	mov	qword ptr [rcx + 16], rax
 1033b8d:	eb b1 	jmp	-79 <_runtime.gfget+0x100>
 1033b8f:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 1033b98:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1033b9d:	48 83 c4 28 	add	rsp, 40
 1033ba1:	c3 	ret
 1033ba2:	e8 29 d0 01 00 	call	118825 <_runtime.morestack_noctxt>
 1033ba7:	e9 94 fe ff ff 	jmp	-364 <_runtime.gfget>
 1033bac:	cc 	int3
 1033bad:	cc 	int3
 1033bae:	cc 	int3
 1033baf:	cc 	int3

_runtime.gfpurge:
 1033bb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033bb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033bbd:	0f 86 a4 00 00 00 	jbe	164 <_runtime.gfpurge+0xb7>
 1033bc3:	48 83 ec 10 	sub	rsp, 16
 1033bc7:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1033bcc:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1033bd1:	48 8d 05 20 ab 09 00 	lea	rax, [rip + 633632]
 1033bd8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033bdc:	e8 4f 45 fd ff 	call	-178865 <_runtime.lock>
 1033be1:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1033be6:	eb 06 	jmp	6 <_runtime.gfpurge+0x3e>
 1033be8:	ff 05 22 ab 09 00 	inc	dword ptr [rip + 633634]
 1033bee:	48 8b 88 00 0e 00 00 	mov	rcx, qword ptr [rax + 3584]
 1033bf5:	48 85 c9 	test	rcx, rcx
 1033bf8:	74 53 	je	83 <_runtime.gfpurge+0x9d>
 1033bfa:	90 	nop
 1033bfb:	90 	nop
 1033bfc:	48 85 c9 	test	rcx, rcx
 1033bff:	74 0e 	je	14 <_runtime.gfpurge+0x5f>
 1033c01:	48 8b 91 a0 00 00 00 	mov	rdx, qword ptr [rcx + 160]
 1033c08:	48 89 90 00 0e 00 00 	mov	qword ptr [rax + 3584], rdx
 1033c0f:	ff 88 08 0e 00 00 	dec	dword ptr [rax + 3592]
 1033c15:	48 83 39 00 	cmp	qword ptr [rcx], 0
 1033c19:	75 19 	jne	25 <_runtime.gfpurge+0x84>
 1033c1b:	90 	nop
 1033c1c:	48 8b 15 e5 aa 09 00 	mov	rdx, qword ptr [rip + 633573]
 1033c23:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 1033c2a:	90 	nop
 1033c2b:	48 89 0d d6 aa 09 00 	mov	qword ptr [rip + 633558], rcx
 1033c32:	eb b4 	jmp	-76 <_runtime.gfpurge+0x38>
 1033c34:	90 	nop
 1033c35:	48 8b 15 c4 aa 09 00 	mov	rdx, qword ptr [rip + 633540]
 1033c3c:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 1033c43:	90 	nop
 1033c44:	48 89 0d b5 aa 09 00 	mov	qword ptr [rip + 633525], rcx
 1033c4b:	eb 9b 	jmp	-101 <_runtime.gfpurge+0x38>
 1033c4d:	48 8d 05 a4 aa 09 00 	lea	rax, [rip + 633508]
 1033c54:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033c58:	e8 b3 46 fd ff 	call	-178509 <_runtime.unlock>
 1033c5d:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1033c62:	48 83 c4 10 	add	rsp, 16
 1033c66:	c3 	ret
 1033c67:	e8 64 cf 01 00 	call	118628 <_runtime.morestack_noctxt>
 1033c6c:	e9 3f ff ff ff 	jmp	-193 <_runtime.gfpurge>
 1033c71:	cc 	int3
 1033c72:	cc 	int3
 1033c73:	cc 	int3
 1033c74:	cc 	int3
 1033c75:	cc 	int3
 1033c76:	cc 	int3
 1033c77:	cc 	int3
 1033c78:	cc 	int3
 1033c79:	cc 	int3
 1033c7a:	cc 	int3
 1033c7b:	cc 	int3
 1033c7c:	cc 	int3
 1033c7d:	cc 	int3
 1033c7e:	cc 	int3
 1033c7f:	cc 	int3

_runtime.unlockOSThread:
 1033c80:	48 83 ec 18 	sub	rsp, 24
 1033c84:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1033c89:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1033c8e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1033c97:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1033c9b:	83 b9 74 02 00 00 00 	cmp	dword ptr [rcx + 628], 0
 1033ca2:	74 4b 	je	75 <_runtime.unlockOSThread+0x6f>
 1033ca4:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1033ca8:	ff 88 74 02 00 00 	dec	dword ptr [rax + 628]
 1033cae:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1033cb7:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1033cbb:	83 b9 74 02 00 00 00 	cmp	dword ptr [rcx + 628], 0
 1033cc2:	74 0a 	je	10 <_runtime.unlockOSThread+0x4e>
 1033cc4:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1033cc9:	48 83 c4 18 	add	rsp, 24
 1033ccd:	c3 	ret
 1033cce:	83 b9 70 02 00 00 00 	cmp	dword ptr [rcx + 624], 0
 1033cd5:	75 ed 	jne	-19 <_runtime.unlockOSThread+0x44>
 1033cd7:	48 c7 81 68 01 00 00 00 00 00 00 	mov	qword ptr [rcx + 360], 0
 1033ce2:	48 c7 80 d8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 216], 0
 1033ced:	eb d5 	jmp	-43 <_runtime.unlockOSThread+0x44>
 1033cef:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1033cf4:	48 8d 05 3d 3a 04 00 	lea	rax, [rip + 277053]
 1033cfb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033cff:	e8 7c cd 01 00 	call	118140 <_runtime.systemstack>
 1033d04:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1033d09:	eb 99 	jmp	-103 <_runtime.unlockOSThread+0x24>
 1033d0b:	cc 	int3
 1033d0c:	cc 	int3
 1033d0d:	cc 	int3
 1033d0e:	cc 	int3
 1033d0f:	cc 	int3

_runtime.badunlockosthread:
 1033d10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033d19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033d1d:	76 28 	jbe	40 <_runtime.badunlockosthread+0x37>
 1033d1f:	48 83 ec 18 	sub	rsp, 24
 1033d23:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1033d28:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1033d2d:	48 8d 05 4a 38 04 00 	lea	rax, [rip + 276554]
 1033d34:	48 89 04 24 	mov	qword ptr [rsp], rax
 1033d38:	48 c7 44 24 08 3e 00 00 00 	mov	qword ptr [rsp + 8], 62
 1033d41:	e8 1a 50 ff ff 	call	-45030 <_runtime.throw>
 1033d46:	90 	nop
 1033d47:	e8 84 ce 01 00 	call	118404 <_runtime.morestack_noctxt>
 1033d4c:	eb c2 	jmp	-62 <_runtime.badunlockosthread>
 1033d4e:	cc 	int3
 1033d4f:	cc 	int3

_runtime._System:
 1033d50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033d59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033d5d:	76 1a 	jbe	26 <_runtime._System+0x29>
 1033d5f:	48 83 ec 08 	sub	rsp, 8
 1033d63:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1033d67:	48 8d 2c 24 	lea	rbp, [rsp]
 1033d6b:	e8 e0 ff ff ff 	call	-32 <_runtime._System>
 1033d70:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1033d74:	48 83 c4 08 	add	rsp, 8
 1033d78:	c3 	ret
 1033d79:	e8 52 ce 01 00 	call	118354 <_runtime.morestack_noctxt>
 1033d7e:	eb d0 	jmp	-48 <_runtime._System>

_runtime._ExternalCode:
 1033d80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033d89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033d8d:	76 1a 	jbe	26 <_runtime._ExternalCode+0x29>
 1033d8f:	48 83 ec 08 	sub	rsp, 8
 1033d93:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1033d97:	48 8d 2c 24 	lea	rbp, [rsp]
 1033d9b:	e8 e0 ff ff ff 	call	-32 <_runtime._ExternalCode>
 1033da0:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1033da4:	48 83 c4 08 	add	rsp, 8
 1033da8:	c3 	ret
 1033da9:	e8 22 ce 01 00 	call	118306 <_runtime.morestack_noctxt>
 1033dae:	eb d0 	jmp	-48 <_runtime._ExternalCode>

_runtime._LostExternalCode:
 1033db0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033db9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033dbd:	76 1a 	jbe	26 <_runtime._LostExternalCode+0x29>
 1033dbf:	48 83 ec 08 	sub	rsp, 8
 1033dc3:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1033dc7:	48 8d 2c 24 	lea	rbp, [rsp]
 1033dcb:	e8 e0 ff ff ff 	call	-32 <_runtime._LostExternalCode>
 1033dd0:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1033dd4:	48 83 c4 08 	add	rsp, 8
 1033dd8:	c3 	ret
 1033dd9:	e8 f2 cd 01 00 	call	118258 <_runtime.morestack_noctxt>
 1033dde:	eb d0 	jmp	-48 <_runtime._LostExternalCode>

_runtime._GC:
 1033de0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033de9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033ded:	76 1a 	jbe	26 <_runtime._GC+0x29>
 1033def:	48 83 ec 08 	sub	rsp, 8
 1033df3:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1033df7:	48 8d 2c 24 	lea	rbp, [rsp]
 1033dfb:	e8 e0 ff ff ff 	call	-32 <_runtime._GC>
 1033e00:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1033e04:	48 83 c4 08 	add	rsp, 8
 1033e08:	c3 	ret
 1033e09:	e8 c2 cd 01 00 	call	118210 <_runtime.morestack_noctxt>
 1033e0e:	eb d0 	jmp	-48 <_runtime._GC>

_runtime._LostSIGPROFDuringAtomic64:
 1033e10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033e19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1033e1d:	76 1a 	jbe	26 <_runtime._LostSIGPROFDuringAtomic64+0x29>
 1033e1f:	48 83 ec 08 	sub	rsp, 8
 1033e23:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1033e27:	48 8d 2c 24 	lea	rbp, [rsp]
 1033e2b:	e8 e0 ff ff ff 	call	-32 <_runtime._LostSIGPROFDuringAtomic64>
 1033e30:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1033e34:	48 83 c4 08 	add	rsp, 8
 1033e38:	c3 	ret
 1033e39:	e8 92 cd 01 00 	call	118162 <_runtime.morestack_noctxt>
 1033e3e:	eb d0 	jmp	-48 <_runtime._LostSIGPROFDuringAtomic64>

_runtime.sigprof:
 1033e40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1033e49:	48 8d 84 24 18 fe ff ff 	lea	rax, [rsp - 488]
 1033e51:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1033e55:	0f 86 f4 04 00 00 	jbe	1268 <_runtime.sigprof+0x50f>
 1033e5b:	48 81 ec 68 02 00 00 	sub	rsp, 616
 1033e62:	48 89 ac 24 60 02 00 00 	mov	qword ptr [rsp + 608], rbp
 1033e6a:	48 8d ac 24 60 02 00 00 	lea	rbp, [rsp + 608]
 1033e72:	83 3d 33 3a 0c 00 00 	cmp	dword ptr [rip + 801331], 0
 1033e79:	0f 84 9b 04 00 00 	je	1179 <_runtime.sigprof+0x4da>
 1033e7f:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1033e88:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1033e8c:	ff 83 f0 00 00 00 	inc	dword ptr [rbx + 240]
 1033e92:	48 8b 9c 24 88 02 00 00 	mov	rbx, qword ptr [rsp + 648]
 1033e9a:	48 85 db 	test	rbx, rbx
 1033e9d:	0f 84 65 04 00 00 	je	1125 <_runtime.sigprof+0x4c8>
 1033ea3:	48 8b b4 24 78 02 00 00 	mov	rsi, qword ptr [rsp + 632]
 1033eab:	48 39 33 	cmp	qword ptr [rbx], rsi
 1033eae:	0f 86 19 04 00 00 	jbe	1049 <_runtime.sigprof+0x48d>
 1033eb4:	b8 01 00 00 00 	mov	eax, 1
 1033eb9:	84 c0 	test	al, al
 1033ebb:	0f 84 e7 03 00 00 	je	999 <_runtime.sigprof+0x468>
 1033ec1:	31 c0 	xor	eax, eax
 1033ec3:	48 8d 7c 24 60 	lea	rdi, [rsp + 96]
 1033ec8:	0f 57 c0 	xorps	xmm0, xmm0
 1033ecb:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1033ed0:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1033ed5:	e8 ae f5 01 00 	call	128430 <_runtime.duffzero+0x98>
 1033eda:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1033ede:	4c 8b 84 24 90 02 00 00 	mov	r8, qword ptr [rsp + 656]
 1033ee6:	41 83 b8 38 01 00 00 00 	cmp	dword ptr [r8 + 312], 0
 1033eee:	0f 8e 3a 03 00 00 	jle	826 <_runtime.sigprof+0x3ee>
 1033ef4:	49 8b b8 c0 00 00 00 	mov	rdi, qword ptr [r8 + 192]
 1033efb:	48 85 ff 	test	rdi, rdi
 1033efe:	0f 84 2a 03 00 00 	je	810 <_runtime.sigprof+0x3ee>
 1033f04:	48 83 7f 78 00 	cmp	qword ptr [rdi + 120], 0
 1033f09:	0f 84 1f 03 00 00 	je	799 <_runtime.sigprof+0x3ee>
 1033f0f:	48 83 7f 70 00 	cmp	qword ptr [rdi + 112], 0
 1033f14:	0f 84 14 03 00 00 	je	788 <_runtime.sigprof+0x3ee>
 1033f1a:	41 8b b0 3c 01 00 00 	mov	esi, dword ptr [r8 + 316]
 1033f21:	85 f6 	test	esi, esi
 1033f23:	0f 85 fb 02 00 00 	jne	763 <_runtime.sigprof+0x3e4>
 1033f29:	49 8b b0 40 01 00 00 	mov	rsi, qword ptr [r8 + 320]
 1033f30:	48 85 f6 	test	rsi, rsi
 1033f33:	0f 84 eb 02 00 00 	je	747 <_runtime.sigprof+0x3e4>
 1033f39:	48 83 3e 00 	cmp	qword ptr [rsi], 0
 1033f3d:	0f 84 e1 02 00 00 	je	737 <_runtime.sigprof+0x3e4>
 1033f43:	31 c0 	xor	eax, eax
 1033f45:	eb 03 	jmp	3 <_runtime.sigprof+0x10a>
 1033f47:	48 ff c0 	inc	rax
 1033f4a:	48 83 f8 20 	cmp	rax, 32
 1033f4e:	7d 0d 	jge	13 <_runtime.sigprof+0x11d>
 1033f50:	48 8b 3c c6 	mov	rdi, qword ptr [rsi + 8*rax]
 1033f54:	48 85 ff 	test	rdi, rdi
 1033f57:	75 ee 	jne	-18 <_runtime.sigprof+0x107>
 1033f59:	48 83 f8 20 	cmp	rax, 32
 1033f5d:	0f 87 de 03 00 00 	ja	990 <_runtime.sigprof+0x501>
 1033f63:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1033f68:	48 8d 54 24 60 	lea	rdx, [rsp + 96]
 1033f6d:	48 39 f2 	cmp	rdx, rsi
 1033f70:	74 17 	je	23 <_runtime.sigprof+0x149>
 1033f72:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1033f76:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1033f7b:	48 c1 e0 03 	shl	rax, 3
 1033f7f:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1033f84:	e8 c7 fb 01 00 	call	129991 <_runtime.memmove>
 1033f89:	48 8b 94 24 90 02 00 00 	mov	rdx, qword ptr [rsp + 656]
 1033f91:	48 8b 9a 40 01 00 00 	mov	rbx, qword ptr [rdx + 320]
 1033f98:	48 c7 03 00 00 00 00 	mov	qword ptr [rbx], 0
 1033f9f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1033fa4:	48 8b 9a c0 00 00 00 	mov	rbx, qword ptr [rdx + 192]
 1033fab:	48 8b 73 78 	mov	rsi, qword ptr [rbx + 120]
 1033faf:	48 8b 7b 70 	mov	rdi, qword ptr [rbx + 112]
 1033fb3:	48 83 f8 40 	cmp	rax, 64
 1033fb7:	0f 83 7a 03 00 00 	jae	890 <_runtime.sigprof+0x4f7>
 1033fbd:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1033fc2:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1033fc6:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1033fcb:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1033fd4:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1033fd9:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1033fe2:	48 8d 4c c4 60 	lea	rcx, [rsp + 8*rax + 96]
 1033fe7:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1033fec:	48 8d 48 c0 	lea	rcx, [rax - 64]
 1033ff0:	48 f7 d9 	neg	rcx
 1033ff3:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1033ff8:	0f 57 c0 	xorps	xmm0, xmm0
 1033ffb:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1034000:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1034009:	e8 92 34 01 00 	call	78994 <_runtime.gentraceback>
 103400e:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1034013:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1034018:	48 01 c1 	add	rcx, rax
 103401b:	48 85 c0 	test	rax, rax
 103401e:	48 0f 4f c1 	cmovg	rax, rcx
 1034022:	48 85 c0 	test	rax, rax
 1034025:	0f 8f a4 00 00 00 	jg	164 <_runtime.sigprof+0x28f>
 103402b:	48 8b 84 24 90 02 00 00 	mov	rax, qword ptr [rsp + 656]
 1034033:	48 8b 98 f0 02 00 00 	mov	rbx, qword ptr [rax + 752]
 103403a:	48 85 db 	test	rbx, rbx
 103403d:	74 1c 	je	28 <_runtime.sigprof+0x21b>
 103403f:	48 8b b0 e0 02 00 00 	mov	rsi, qword ptr [rax + 736]
 1034046:	48 85 f6 	test	rsi, rsi
 1034049:	74 10 	je	16 <_runtime.sigprof+0x21b>
 103404b:	48 8b b8 e8 02 00 00 	mov	rdi, qword ptr [rax + 744]
 1034052:	48 85 ff 	test	rdi, rdi
 1034055:	0f 85 6e 01 00 00 	jne	366 <_runtime.sigprof+0x389>
 103405b:	31 c9 	xor	ecx, ecx
 103405d:	48 85 c9 	test	rcx, rcx
 1034060:	75 10 	jne	16 <_runtime.sigprof+0x232>
 1034062:	48 8b 98 28 03 00 00 	mov	rbx, qword ptr [rax + 808]
 1034069:	48 85 db 	test	rbx, rbx
 103406c:	0f 85 ed 00 00 00 	jne	237 <_runtime.sigprof+0x31f>
 1034072:	48 85 c9 	test	rcx, rcx
 1034075:	0f 85 dc 00 00 00 	jne	220 <_runtime.sigprof+0x317>
 103407b:	48 8b 9c 24 70 02 00 00 	mov	rbx, qword ptr [rsp + 624]
 1034083:	48 39 1d 3e 7d 09 00 	cmp	qword ptr [rip + 621886], rbx
 103408a:	73 13 	jae	19 <_runtime.sigprof+0x25f>
 103408c:	48 8d 1d 55 36 04 00 	lea	rbx, [rip + 276053]
 1034093:	84 03 	test	byte ptr [rbx], al
 1034095:	48 8b 1d 4c 36 04 00 	mov	rbx, qword ptr [rip + 276044]
 103409c:	48 ff c3 	inc	rbx
 103409f:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 10340a4:	48 83 b8 00 01 00 00 00 	cmp	qword ptr [rax + 256], 0
 10340ac:	0f 84 88 00 00 00 	je	136 <_runtime.sigprof+0x2fa>
 10340b2:	48 8d 05 37 36 04 00 	lea	rax, [rip + 276023]
 10340b9:	84 00 	test	byte ptr [rax], al
 10340bb:	48 8b 05 2e 36 04 00 	mov	rax, qword ptr [rip + 276014]
 10340c2:	48 ff c0 	inc	rax
 10340c5:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 10340ca:	b8 02 00 00 00 	mov	eax, 2
 10340cf:	83 3d d6 37 0c 00 00 	cmp	dword ptr [rip + 800726], 0
 10340d6:	74 3f 	je	63 <_runtime.sigprof+0x2d7>
 10340d8:	48 83 f8 40 	cmp	rax, 64
 10340dc:	0f 87 48 02 00 00 	ja	584 <_runtime.sigprof+0x4ea>
 10340e2:	48 8d 0d f7 af 09 00 	lea	rcx, [rip + 634871]
 10340e9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10340ed:	48 8b 8c 24 88 02 00 00 	mov	rcx, qword ptr [rsp + 648]
 10340f5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10340fa:	48 8d 4c 24 60 	lea	rcx, [rsp + 96]
 10340ff:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1034104:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1034109:	48 c7 44 24 20 40 00 00 00 	mov	qword ptr [rsp + 32], 64
 1034112:	e8 e9 0c fd ff 	call	-193303 <_runtime.(*cpuProfile).add>
 1034117:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1034120:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1034124:	ff 88 f0 00 00 00 	dec	dword ptr [rax + 240]
 103412a:	48 8b ac 24 60 02 00 00 	mov	rbp, qword ptr [rsp + 608]
 1034132:	48 81 c4 68 02 00 00 	add	rsp, 616
 1034139:	c3 	ret
 103413a:	48 8d 05 c7 35 04 00 	lea	rax, [rip + 275911]
 1034141:	84 00 	test	byte ptr [rax], al
 1034143:	48 8b 05 be 35 04 00 	mov	rax, qword ptr [rip + 275902]
 103414a:	48 ff c0 	inc	rax
 103414d:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1034152:	e9 73 ff ff ff 	jmp	-141 <_runtime.sigprof+0x28a>
 1034157:	48 89 c8 	mov	rax, rcx
 103415a:	e9 70 ff ff ff 	jmp	-144 <_runtime.sigprof+0x28f>
 103415f:	48 8b 88 30 03 00 00 	mov	rcx, qword ptr [rax + 816]
 1034166:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103416a:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 103416f:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1034178:	48 8b 8c 24 88 02 00 00 	mov	rcx, qword ptr [rsp + 648]
 1034180:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1034185:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 103418e:	48 8d 54 24 60 	lea	rdx, [rsp + 96]
 1034193:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1034198:	48 c7 44 24 30 40 00 00 00 	mov	qword ptr [rsp + 48], 64
 10341a1:	0f 57 c0 	xorps	xmm0, xmm0
 10341a4:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 10341a9:	48 c7 44 24 48 06 00 00 00 	mov	qword ptr [rsp + 72], 6
 10341b2:	e8 e9 32 01 00 	call	78569 <_runtime.gentraceback>
 10341b7:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10341bc:	48 8b 84 24 90 02 00 00 	mov	rax, qword ptr [rsp + 656]
 10341c4:	e9 a9 fe ff ff 	jmp	-343 <_runtime.sigprof+0x232>
 10341c9:	48 89 34 24 	mov	qword ptr [rsp], rsi
 10341cd:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 10341d2:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10341db:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 10341e0:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 10341e9:	48 8d 44 24 60 	lea	rax, [rsp + 96]
 10341ee:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10341f3:	48 c7 44 24 30 40 00 00 00 	mov	qword ptr [rsp + 48], 64
 10341fc:	0f 57 c0 	xorps	xmm0, xmm0
 10341ff:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1034204:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 103420d:	e8 8e 32 01 00 	call	78478 <_runtime.gentraceback>
 1034212:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1034217:	48 8b 84 24 90 02 00 00 	mov	rax, qword ptr [rsp + 656]
 103421f:	e9 39 fe ff ff 	jmp	-455 <_runtime.sigprof+0x21d>
 1034224:	4c 89 c2 	mov	rdx, r8
 1034227:	31 c0 	xor	eax, eax
 1034229:	e9 76 fd ff ff 	jmp	-650 <_runtime.sigprof+0x164>
 103422e:	84 c0 	test	al, al
 1034230:	75 07 	jne	7 <_runtime.sigprof+0x3f9>
 1034232:	31 c0 	xor	eax, eax
 1034234:	e9 e9 fd ff ff 	jmp	-535 <_runtime.sigprof+0x1e2>
 1034239:	48 8b 84 24 70 02 00 00 	mov	rax, qword ptr [rsp + 624]
 1034241:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034245:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 103424a:	48 8b 8c 24 80 02 00 00 	mov	rcx, qword ptr [rsp + 640]
 1034252:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1034257:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 103425c:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1034265:	48 8d 4c 24 60 	lea	rcx, [rsp + 96]
 103426a:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103426f:	48 c7 44 24 30 40 00 00 00 	mov	qword ptr [rsp + 48], 64
 1034278:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 103427d:	48 c7 44 24 48 06 00 00 00 	mov	qword ptr [rsp + 72], 6
 1034286:	e8 15 32 01 00 	call	78357 <_runtime.gentraceback>
 103428b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1034290:	48 8b 9c 24 88 02 00 00 	mov	rbx, qword ptr [rsp + 648]
 1034298:	4c 8b 84 24 90 02 00 00 	mov	r8, qword ptr [rsp + 656]
 10342a0:	0f 57 c0 	xorps	xmm0, xmm0
 10342a3:	e9 7a fd ff ff 	jmp	-646 <_runtime.sigprof+0x1e2>
 10342a8:	4c 8b 84 24 90 02 00 00 	mov	r8, qword ptr [rsp + 656]
 10342b0:	4d 85 c0 	test	r8, r8
 10342b3:	74 0e 	je	14 <_runtime.sigprof+0x483>
 10342b5:	49 83 b8 28 03 00 00 00 	cmp	qword ptr [r8 + 808], 0
 10342bd:	0f 85 fe fb ff ff 	jne	-1026 <_runtime.sigprof+0x81>
 10342c3:	b8 01 00 00 00 	mov	eax, 1
 10342c8:	e9 f6 fb ff ff 	jmp	-1034 <_runtime.sigprof+0x83>
 10342cd:	48 39 73 08 	cmp	qword ptr [rbx + 8], rsi
 10342d1:	73 0a 	jae	10 <_runtime.sigprof+0x49d>
 10342d3:	b8 01 00 00 00 	mov	eax, 1
 10342d8:	e9 dc fb ff ff 	jmp	-1060 <_runtime.sigprof+0x79>
 10342dd:	48 8b 84 24 70 02 00 00 	mov	rax, qword ptr [rsp + 624]
 10342e5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10342e9:	e8 82 01 00 00 	call	386 <_runtime.setsSP>
 10342ee:	0f b6 44 24 08 	movzx	eax, byte ptr [rsp + 8]
 10342f3:	48 8b 9c 24 88 02 00 00 	mov	rbx, qword ptr [rsp + 648]
 10342fb:	48 8b b4 24 78 02 00 00 	mov	rsi, qword ptr [rsp + 632]
 1034303:	e9 b1 fb ff ff 	jmp	-1103 <_runtime.sigprof+0x79>
 1034308:	48 8b b4 24 78 02 00 00 	mov	rsi, qword ptr [rsp + 632]
 1034310:	b8 01 00 00 00 	mov	eax, 1
 1034315:	e9 9f fb ff ff 	jmp	-1121 <_runtime.sigprof+0x79>
 103431a:	48 8b ac 24 60 02 00 00 	mov	rbp, qword ptr [rsp + 608]
 1034322:	48 81 c4 68 02 00 00 	add	rsp, 616
 1034329:	c3 	ret
 103432a:	48 89 c1 	mov	rcx, rax
 103432d:	ba 40 00 00 00 	mov	edx, 64
 1034332:	e8 39 f0 01 00 	call	127033 <_runtime.panicSliceAlen>
 1034337:	b9 40 00 00 00 	mov	ecx, 64
 103433c:	e8 0f f0 01 00 	call	126991 <_runtime.panicIndex>
 1034341:	48 89 c1 	mov	rcx, rax
 1034344:	ba 20 00 00 00 	mov	edx, 32
 1034349:	e8 22 f0 01 00 	call	127010 <_runtime.panicSliceAlen>
 103434e:	90 	nop
 103434f:	e8 7c c8 01 00 	call	116860 <_runtime.morestack_noctxt>
 1034354:	e9 e7 fa ff ff 	jmp	-1305 <_runtime.sigprof>
 1034359:	cc 	int3
 103435a:	cc 	int3
 103435b:	cc 	int3
 103435c:	cc 	int3
 103435d:	cc 	int3
 103435e:	cc 	int3
 103435f:	cc 	int3

_runtime.sigprofNonGo:
 1034360:	48 83 ec 28 	sub	rsp, 40
 1034364:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1034369:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103436e:	83 3d 37 35 0c 00 00 	cmp	dword ptr [rip + 800055], 0
 1034375:	74 46 	je	70 <_runtime.sigprofNonGo+0x5d>
 1034377:	31 c0 	xor	eax, eax
 1034379:	eb 03 	jmp	3 <_runtime.sigprofNonGo+0x1e>
 103437b:	48 ff c0 	inc	rax
 103437e:	48 83 f8 20 	cmp	rax, 32
 1034382:	7d 4e 	jge	78 <_runtime.sigprofNonGo+0x72>
 1034384:	48 8d 1d 95 3b 0c 00 	lea	rbx, [rip + 801685]
 103438b:	48 8b 34 c3 	mov	rsi, qword ptr [rbx + 8*rax]
 103438f:	48 85 f6 	test	rsi, rsi
 1034392:	75 e7 	jne	-25 <_runtime.sigprofNonGo+0x1b>
 1034394:	48 83 f8 20 	cmp	rax, 32
 1034398:	77 41 	ja	65 <_runtime.sigprofNonGo+0x7b>
 103439a:	48 8d 0d 3f ad 09 00 	lea	rcx, [rip + 634175]
 10343a1:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10343a5:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10343aa:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10343af:	48 c7 44 24 18 20 00 00 00 	mov	qword ptr [rsp + 24], 32
 10343b8:	e8 83 0b fd ff 	call	-193661 <_runtime.(*cpuProfile).addNonGo>
 10343bd:	31 c0 	xor	eax, eax
 10343bf:	48 8d 0d 02 34 0c 00 	lea	rcx, [rip + 799746]
 10343c6:	87 01 	xchg	dword ptr [rcx], eax
 10343c8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10343cd:	48 83 c4 28 	add	rsp, 40
 10343d1:	c3 	ret
 10343d2:	48 8d 1d 47 3b 0c 00 	lea	rbx, [rip + 801607]
 10343d9:	eb bd 	jmp	-67 <_runtime.sigprofNonGo+0x38>
 10343db:	48 89 c1 	mov	rcx, rax
 10343de:	ba 20 00 00 00 	mov	edx, 32
 10343e3:	e8 88 ef 01 00 	call	126856 <_runtime.panicSliceAlen>
 10343e8:	90 	nop
 10343e9:	cc 	int3
 10343ea:	cc 	int3
 10343eb:	cc 	int3
 10343ec:	cc 	int3
 10343ed:	cc 	int3
 10343ee:	cc 	int3
 10343ef:	cc 	int3

_runtime.sigprofNonGoPC:
 10343f0:	48 83 ec 38 	sub	rsp, 56
 10343f4:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 10343f9:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 10343fe:	83 3d a7 34 0c 00 00 	cmp	dword ptr [rip + 799911], 0
 1034405:	75 0a 	jne	10 <_runtime.sigprofNonGoPC+0x21>
 1034407:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 103440c:	48 83 c4 38 	add	rsp, 56
 1034410:	c3 	ret
 1034411:	48 8d 05 d0 32 04 00 	lea	rax, [rip + 275152]
 1034418:	84 00 	test	byte ptr [rax], al
 103441a:	48 8b 05 c7 32 04 00 	mov	rax, qword ptr [rip + 275143]
 1034421:	0f 57 c0 	xorps	xmm0, xmm0
 1034424:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1034429:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103442e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1034433:	48 ff c0 	inc	rax
 1034436:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 103443b:	48 8d 05 9e ac 09 00 	lea	rax, [rip + 634014]
 1034442:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034446:	48 8d 44 24 20 	lea	rax, [rsp + 32]
 103444b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1034450:	48 c7 44 24 10 02 00 00 00 	mov	qword ptr [rsp + 16], 2
 1034459:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1034462:	e8 d9 0a fd ff 	call	-193831 <_runtime.(*cpuProfile).addNonGo>
 1034467:	eb 9e 	jmp	-98 <_runtime.sigprofNonGoPC+0x17>
 1034469:	cc 	int3
 103446a:	cc 	int3
 103446b:	cc 	int3
 103446c:	cc 	int3
 103446d:	cc 	int3
 103446e:	cc 	int3
 103446f:	cc 	int3

_runtime.setsSP:
 1034470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1034479:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103447d:	76 69 	jbe	105 <_runtime.setsSP+0x78>
 103447f:	48 83 ec 20 	sub	rsp, 32
 1034483:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1034488:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 103448d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1034492:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034496:	e8 d5 d6 00 00 	call	54997 <_runtime.findfunc>
 103449b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10344a0:	48 85 c0 	test	rax, rax
 10344a3:	74 34 	je	52 <_runtime.setsSP+0x69>
 10344a5:	0f b6 40 24 	movzx	eax, byte ptr [rax + 36]
 10344a9:	8d 48 fc 	lea	ecx, [rax - 4]
 10344ac:	80 f9 01 	cmp	cl, 1
 10344af:	77 0f 	ja	15 <_runtime.setsSP+0x50>
 10344b1:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 10344b6:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10344bb:	48 83 c4 20 	add	rsp, 32
 10344bf:	c3 	ret
 10344c0:	80 f8 0d 	cmp	al, 13
 10344c3:	74 ec 	je	-20 <_runtime.setsSP+0x41>
 10344c5:	80 f8 0f 	cmp	al, 15
 10344c8:	74 e7 	je	-25 <_runtime.setsSP+0x41>
 10344ca:	c6 44 24 30 00 	mov	byte ptr [rsp + 48], 0
 10344cf:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10344d4:	48 83 c4 20 	add	rsp, 32
 10344d8:	c3 	ret
 10344d9:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 10344de:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10344e3:	48 83 c4 20 	add	rsp, 32
 10344e7:	c3 	ret
 10344e8:	e8 e3 c6 01 00 	call	116451 <_runtime.morestack_noctxt>
 10344ed:	eb 81 	jmp	-127 <_runtime.setsSP>
 10344ef:	cc 	int3

_runtime.(*p).init:
 10344f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10344f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10344fd:	0f 86 32 01 00 00 	jbe	306 <_runtime.(*p).init+0x145>
 1034503:	48 83 ec 18 	sub	rsp, 24
 1034507:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103450c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1034511:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 1034515:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 103451a:	89 0a 	mov	dword ptr [rdx], ecx
 103451c:	c7 42 04 03 00 00 00 	mov	dword ptr [rdx + 4], 3
 1034523:	48 c7 82 18 0e 00 00 00 00 00 00 	mov	qword ptr [rdx + 3608], 0
 103452e:	48 c7 82 20 0e 00 00 80 00 00 00 	mov	qword ptr [rdx + 3616], 128
 1034539:	48 8d 82 28 0e 00 00 	lea	rax, [rdx + 3624]
 1034540:	83 3d b9 33 0c 00 00 	cmp	dword ptr [rip + 799673], 0
 1034547:	0f 85 bd 00 00 00 	jne	189 <_runtime.(*p).init+0x11a>
 103454d:	48 89 82 10 0e 00 00 	mov	qword ptr [rdx + 3600], rax
 1034554:	31 c0 	xor	eax, eax
 1034556:	eb 04 	jmp	4 <_runtime.(*p).init+0x6c>
 1034558:	48 8d 46 01 	lea	rax, [rsi + 1]
 103455c:	48 83 f8 05 	cmp	rax, 5
 1034560:	7d 47 	jge	71 <_runtime.(*p).init+0xb9>
 1034562:	48 8d 1c 40 	lea	rbx, [rax + 2*rax]
 1034566:	48 c7 44 da 70 00 00 00 00 	mov	qword ptr [rdx + 8*rbx + 112], 0
 103456f:	48 c7 44 da 78 20 00 00 00 	mov	qword ptr [rdx + 8*rbx + 120], 32
 1034578:	48 8d 3c da 	lea	rdi, [rdx + 8*rbx]
 103457c:	48 8d 7f 68 	lea	rdi, [rdi + 104]
 1034580:	48 89 c6 	mov	rsi, rax
 1034583:	48 c1 e0 08 	shl	rax, 8
 1034587:	48 8d 04 02 	lea	rax, [rdx + rax]
 103458b:	48 8d 80 e0 00 00 00 	lea	rax, [rax + 224]
 1034592:	83 3d 67 33 0c 00 00 	cmp	dword ptr [rip + 799591], 0
 1034599:	75 07 	jne	7 <_runtime.(*p).init+0xb2>
 103459b:	48 89 44 da 68 	mov	qword ptr [rdx + 8*rbx + 104], rax
 10345a0:	eb b6 	jmp	-74 <_runtime.(*p).init+0x68>
 10345a2:	e8 39 e4 01 00 	call	123961 <_runtime.gcWriteBarrier>
 10345a7:	eb af 	jmp	-81 <_runtime.(*p).init+0x68>
 10345a9:	48 8d 82 48 17 00 00 	lea	rax, [rdx + 5960]
 10345b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10345b4:	e8 27 0d ff ff 	call	-62169 <_runtime.(*wbBuf).reset>
 10345b9:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10345be:	48 83 78 40 00 	cmp	qword ptr [rax + 64], 0
 10345c3:	74 0a 	je	10 <_runtime.(*p).init+0xdf>
 10345c5:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10345ca:	48 83 c4 18 	add	rsp, 24
 10345ce:	c3 	ret
 10345cf:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 10345d3:	85 c9 	test	ecx, ecx
 10345d5:	75 1f 	jne	31 <_runtime.(*p).init+0x106>
 10345d7:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10345e0:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 10345e4:	48 8b 89 60 01 00 00 	mov	rcx, qword ptr [rcx + 352]
 10345eb:	48 85 c9 	test	rcx, rcx
 10345ee:	74 2b 	je	43 <_runtime.(*p).init+0x12b>
 10345f0:	48 89 48 40 	mov	qword ptr [rax + 64], rcx
 10345f4:	eb cf 	jmp	-49 <_runtime.(*p).init+0xd5>
 10345f6:	e8 25 bc fd ff 	call	-148443 <_runtime.allocmcache>
 10345fb:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10345ff:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1034604:	48 89 41 40 	mov	qword ptr [rcx + 64], rax
 1034608:	eb bb 	jmp	-69 <_runtime.(*p).init+0xd5>
 103460a:	48 8d ba 10 0e 00 00 	lea	rdi, [rdx + 3600]
 1034611:	e8 ca e3 01 00 	call	123850 <_runtime.gcWriteBarrier>
 1034616:	e9 39 ff ff ff 	jmp	-199 <_runtime.(*p).init+0x64>
 103461b:	48 8d 05 6b f3 03 00 	lea	rax, [rip + 258923]
 1034622:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034626:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 103462f:	e8 2c 47 ff ff 	call	-47316 <_runtime.throw>
 1034634:	90 	nop
 1034635:	e8 96 c5 01 00 	call	116118 <_runtime.morestack_noctxt>
 103463a:	e9 b1 fe ff ff 	jmp	-335 <_runtime.(*p).init>
 103463f:	cc 	int3

_runtime.(*p).destroy:
 1034640:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1034649:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103464d:	0f 86 21 04 00 00 	jbe	1057 <_runtime.(*p).destroy+0x434>
 1034653:	48 83 ec 60 	sub	rsp, 96
 1034657:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 103465c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1034661:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034666:	eb 06 	jmp	6 <_runtime.(*p).destroy+0x2e>
 1034668:	ff 05 62 a0 09 00 	inc	dword ptr [rip + 630882]
 103466e:	8b 88 f4 05 00 00 	mov	ecx, dword ptr [rax + 1524]
 1034674:	39 88 f0 05 00 00 	cmp	dword ptr [rax + 1520], ecx
 103467a:	74 42 	je	66 <_runtime.(*p).destroy+0x7e>
 103467c:	ff c9 	dec	ecx
 103467e:	89 88 f4 05 00 00 	mov	dword ptr [rax + 1524], ecx
 1034684:	0f b6 c9 	movzx	ecx, cl
 1034687:	48 8b 8c c8 f8 05 00 00 	mov	rcx, qword ptr [rax + 8*rcx + 1528]
 103468f:	90 	nop
 1034690:	90 	nop
 1034691:	48 8b 15 28 a0 09 00 	mov	rdx, qword ptr [rip + 630824]
 1034698:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 103469f:	90 	nop
 10346a0:	48 89 ca 	mov	rdx, rcx
 10346a3:	48 89 0d 16 a0 09 00 	mov	qword ptr [rip + 630806], rcx
 10346aa:	48 83 3d 16 a0 09 00 00 	cmp	qword ptr [rip + 630806], 0
 10346b2:	75 b4 	jne	-76 <_runtime.(*p).destroy+0x28>
 10346b4:	90 	nop
 10346b5:	48 89 15 0c a0 09 00 	mov	qword ptr [rip + 630796], rdx
 10346bc:	eb aa 	jmp	-86 <_runtime.(*p).destroy+0x28>
 10346be:	48 8b 88 f8 0d 00 00 	mov	rcx, qword ptr [rax + 3576]
 10346c5:	48 85 c9 	test	rcx, rcx
 10346c8:	74 3f 	je	63 <_runtime.(*p).destroy+0xc9>
 10346ca:	90 	nop
 10346cb:	90 	nop
 10346cc:	90 	nop
 10346cd:	48 8b 15 ec 9f 09 00 	mov	rdx, qword ptr [rip + 630764]
 10346d4:	48 89 91 a0 00 00 00 	mov	qword ptr [rcx + 160], rdx
 10346db:	90 	nop
 10346dc:	48 89 ca 	mov	rdx, rcx
 10346df:	48 89 0d da 9f 09 00 	mov	qword ptr [rip + 630746], rcx
 10346e6:	48 83 3d da 9f 09 00 00 	cmp	qword ptr [rip + 630746], 0
 10346ee:	75 08 	jne	8 <_runtime.(*p).destroy+0xb8>
 10346f0:	90 	nop
 10346f1:	48 89 15 d0 9f 09 00 	mov	qword ptr [rip + 630736], rdx
 10346f8:	ff 05 d2 9f 09 00 	inc	dword ptr [rip + 630738]
 10346fe:	48 c7 80 f8 0d 00 00 00 00 00 00 	mov	qword ptr [rax + 3576], 0
 1034709:	48 83 b8 78 27 00 00 00 	cmp	qword ptr [rax + 10104], 0
 1034711:	0f 8f 5f 02 00 00 	jg	607 <_runtime.(*p).destroy+0x336>
 1034717:	48 8b 88 80 16 00 00 	mov	rcx, qword ptr [rax + 5760]
 103471e:	48 85 c9 	test	rcx, rcx
 1034721:	0f 85 ba 01 00 00 	jne	442 <_runtime.(*p).destroy+0x2a1>
 1034727:	83 3d 6e 30 0c 00 00 	cmp	dword ptr [rip + 798830], 0
 103472e:	0f 85 85 01 00 00 	jne	389 <_runtime.(*p).destroy+0x279>
 1034734:	48 8d 88 28 0e 00 00 	lea	rcx, [rax + 3624]
 103473b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103473f:	48 c7 44 24 08 00 04 00 00 	mov	qword ptr [rsp + 8], 1024
 1034748:	e8 93 8c fd ff 	call	-160621 <_runtime.memclrHasPointers>
 103474d:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034752:	48 c7 80 18 0e 00 00 00 00 00 00 	mov	qword ptr [rax + 3608], 0
 103475d:	48 c7 80 20 0e 00 00 80 00 00 00 	mov	qword ptr [rax + 3616], 128
 1034768:	48 8d 88 28 0e 00 00 	lea	rcx, [rax + 3624]
 103476f:	83 3d 8a 31 0c 00 00 	cmp	dword ptr [rip + 799114], 0
 1034776:	0f 85 23 01 00 00 	jne	291 <_runtime.(*p).destroy+0x25f>
 103477c:	48 89 88 10 0e 00 00 	mov	qword ptr [rax + 3600], rcx
 1034783:	31 c9 	xor	ecx, ecx
 1034785:	eb 07 	jmp	7 <_runtime.(*p).destroy+0x14e>
 1034787:	48 8d 48 01 	lea	rcx, [rax + 1]
 103478b:	48 89 d0 	mov	rax, rdx
 103478e:	48 83 f9 05 	cmp	rcx, 5
 1034792:	0f 8d 89 00 00 00 	jge	137 <_runtime.(*p).destroy+0x1e1>
 1034798:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103479d:	48 c1 e1 08 	shl	rcx, 8
 10347a1:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 10347a6:	48 8d 1c 08 	lea	rbx, [rax + rcx]
 10347aa:	48 8d 9b e0 00 00 00 	lea	rbx, [rbx + 224]
 10347b1:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10347b5:	48 c7 44 24 08 00 01 00 00 	mov	qword ptr [rsp + 8], 256
 10347be:	e8 1d 8c fd ff 	call	-160739 <_runtime.memclrHasPointers>
 10347c3:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10347c8:	48 8d 0c 40 	lea	rcx, [rax + 2*rax]
 10347cc:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 10347d1:	48 c7 44 ca 70 00 00 00 00 	mov	qword ptr [rdx + 8*rcx + 112], 0
 10347da:	48 c7 44 ca 78 20 00 00 00 	mov	qword ptr [rdx + 8*rcx + 120], 32
 10347e3:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 10347e8:	48 8d 1c 1a 	lea	rbx, [rdx + rbx]
 10347ec:	48 8d 9b e0 00 00 00 	lea	rbx, [rbx + 224]
 10347f3:	48 8d 3c ca 	lea	rdi, [rdx + 8*rcx]
 10347f7:	48 8d 7f 68 	lea	rdi, [rdi + 104]
 10347fb:	83 3d fe 30 0c 00 00 	cmp	dword ptr [rip + 798974], 0
 1034802:	75 0a 	jne	10 <_runtime.(*p).destroy+0x1ce>
 1034804:	48 89 5c ca 68 	mov	qword ptr [rdx + 8*rcx + 104], rbx
 1034809:	e9 79 ff ff ff 	jmp	-135 <_runtime.(*p).destroy+0x147>
 103480e:	48 89 c1 	mov	rcx, rax
 1034811:	48 89 d8 	mov	rax, rbx
 1034814:	e8 c7 e1 01 00 	call	123335 <_runtime.gcWriteBarrier>
 1034819:	48 89 c8 	mov	rax, rcx
 103481c:	e9 66 ff ff ff 	jmp	-154 <_runtime.(*p).destroy+0x147>
 1034821:	0f 57 c0 	xorps	xmm0, xmm0
 1034824:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 1034829:	48 8d 0d c0 ba 01 00 	lea	rcx, [rip + 113344]
 1034830:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1034835:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 103483a:	48 8d 4c 24 48 	lea	rcx, [rsp + 72]
 103483f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034843:	e8 38 c2 01 00 	call	115256 <_runtime.systemstack>
 1034848:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103484d:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 1034851:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034855:	e8 86 ba fd ff 	call	-148858 <_runtime.freemcache>
 103485a:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103485f:	48 c7 40 40 00 00 00 00 	mov	qword ptr [rax + 64], 0
 1034867:	48 89 04 24 	mov	qword ptr [rsp], rax
 103486b:	e8 40 f3 ff ff 	call	-3264 <_runtime.gfpurge>
 1034870:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034875:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034879:	e8 b2 11 01 00 	call	70066 <_runtime.traceProcFree>
 103487e:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034883:	48 c7 80 70 16 00 00 00 00 00 00 	mov	qword ptr [rax + 5744], 0
 103488e:	c7 40 04 04 00 00 00 	mov	dword ptr [rax + 4], 4
 1034895:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 103489a:	48 83 c4 60 	add	rsp, 96
 103489e:	c3 	ret
 103489f:	48 8d b8 10 0e 00 00 	lea	rdi, [rax + 3600]
 10348a6:	48 89 c2 	mov	rdx, rax
 10348a9:	48 89 c8 	mov	rax, rcx
 10348ac:	e8 2f e1 01 00 	call	123183 <_runtime.gcWriteBarrier>
 10348b1:	48 89 d0 	mov	rax, rdx
 10348b4:	e9 ca fe ff ff 	jmp	-310 <_runtime.(*p).destroy+0x143>
 10348b9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10348bd:	e8 9e 0b ff ff 	call	-62562 <_runtime.wbBufFlush1>
 10348c2:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10348c7:	48 8d 88 98 16 00 00 	lea	rcx, [rax + 5784]
 10348ce:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10348d2:	e8 49 79 fe ff 	call	-100023 <_runtime.(*gcWork).dispose>
 10348d7:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10348dc:	e9 53 fe ff ff 	jmp	-429 <_runtime.(*p).destroy+0xf4>
 10348e1:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10348e6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10348ea:	48 b8 04 00 00 00 01 00 00 00 	movabs	rax, 4294967300
 10348f4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10348f9:	e8 12 8a ff ff 	call	-30190 <_runtime.casgstatus>
 10348fe:	80 3d 2b 06 0a 00 00 	cmp	byte ptr [rip + 656939], 0
 1034905:	75 56 	jne	86 <_runtime.(*p).destroy+0x31d>
 1034907:	90 	nop
 1034908:	90 	nop
 1034909:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103490e:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 1034919:	48 8b 0d a8 9d 09 00 	mov	rcx, qword ptr [rip + 630184]
 1034920:	48 85 c9 	test	rcx, rcx
 1034923:	74 2c 	je	44 <_runtime.(*p).destroy+0x311>
 1034925:	48 89 c2 	mov	rdx, rax
 1034928:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 103492f:	90 	nop
 1034930:	48 89 15 91 9d 09 00 	mov	qword ptr [rip + 630161], rdx
 1034937:	ff 05 93 9d 09 00 	inc	dword ptr [rip + 630163]
 103493d:	90 	nop
 103493e:	31 c9 	xor	ecx, ecx
 1034940:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034945:	48 89 88 80 16 00 00 	mov	qword ptr [rax + 5760], rcx
 103494c:	e9 d6 fd ff ff 	jmp	-554 <_runtime.(*p).destroy+0xe7>
 1034951:	48 89 c2 	mov	rdx, rax
 1034954:	48 89 05 65 9d 09 00 	mov	qword ptr [rip + 630117], rax
 103495b:	eb d2 	jmp	-46 <_runtime.(*p).destroy+0x2ef>
 103495d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1034962:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034966:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103496f:	e8 9c 24 01 00 	call	74908 <_runtime.traceGoUnpark>
 1034974:	eb 91 	jmp	-111 <_runtime.(*p).destroy+0x2c7>
 1034976:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103497f:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1034983:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 103498a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 103498f:	84 00 	test	byte ptr [rax], al
 1034991:	48 8d 88 68 27 00 00 	lea	rcx, [rax + 10088]
 1034998:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 103499d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10349a1:	e8 8a 37 fd ff 	call	-182390 <_runtime.lock>
 10349a6:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10349ab:	48 8d 88 68 27 00 00 	lea	rcx, [rax + 10088]
 10349b2:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10349b7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10349bb:	e8 70 37 fd ff 	call	-182416 <_runtime.lock>
 10349c0:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10349c5:	48 8b 88 80 27 00 00 	mov	rcx, qword ptr [rax + 10112]
 10349cc:	48 8b 90 78 27 00 00 	mov	rdx, qword ptr [rax + 10104]
 10349d3:	48 8b 98 70 27 00 00 	mov	rbx, qword ptr [rax + 10096]
 10349da:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10349df:	48 89 34 24 	mov	qword ptr [rsp], rsi
 10349e3:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10349e8:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10349ed:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10349f2:	e8 a9 fb 00 00 	call	64425 <_runtime.moveTimers>
 10349f7:	0f 57 c0 	xorps	xmm0, xmm0
 10349fa:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10349ff:	0f 11 80 78 27 00 00 	movups	xmmword ptr [rax + 10104], xmm0
 1034a06:	83 3d f3 2e 0c 00 00 	cmp	dword ptr [rip + 798451], 0
 1034a0d:	75 4f 	jne	79 <_runtime.(*p).destroy+0x41e>
 1034a0f:	48 c7 80 70 27 00 00 00 00 00 00 	mov	qword ptr [rax + 10096], 0
 1034a1a:	48 c7 80 88 27 00 00 00 00 00 00 	mov	qword ptr [rax + 10120], 0
 1034a25:	c7 80 90 27 00 00 00 00 00 00 	mov	dword ptr [rax + 10128], 0
 1034a2f:	31 c9 	xor	ecx, ecx
 1034a31:	48 87 88 68 16 00 00 	xchg	qword ptr [rax + 5736], rcx
 1034a38:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1034a3d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034a41:	e8 ca 38 fd ff 	call	-182070 <_runtime.unlock>
 1034a46:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1034a4b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034a4f:	e8 bc 38 fd ff 	call	-182084 <_runtime.unlock>
 1034a54:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034a59:	e9 b9 fc ff ff 	jmp	-839 <_runtime.(*p).destroy+0xd7>
 1034a5e:	48 8d b8 70 27 00 00 	lea	rdi, [rax + 10096]
 1034a65:	48 89 c1 	mov	rcx, rax
 1034a68:	31 c0 	xor	eax, eax
 1034a6a:	e8 71 df 01 00 	call	122737 <_runtime.gcWriteBarrier>
 1034a6f:	48 89 c8 	mov	rax, rcx
 1034a72:	eb a6 	jmp	-90 <_runtime.(*p).destroy+0x3da>
 1034a74:	e8 57 c1 01 00 	call	115031 <_runtime.morestack_noctxt>
 1034a79:	e9 c2 fb ff ff 	jmp	-1086 <_runtime.(*p).destroy>
 1034a7e:	cc 	int3
 1034a7f:	cc 	int3

_runtime.procresize:
 1034a80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1034a89:	48 8d 44 24 e8 	lea	rax, [rsp - 24]
 1034a8e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1034a92:	0f 86 fb 05 00 00 	jbe	1531 <_runtime.procresize+0x613>
 1034a98:	48 81 ec 98 00 00 00 	sub	rsp, 152
 1034a9f:	48 89 ac 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbp
 1034aa7:	48 8d ac 24 90 00 00 00 	lea	rbp, [rsp + 144]
 1034aaf:	8b 05 eb 2c 0c 00 	mov	eax, dword ptr [rip + 797931]
 1034ab5:	85 c0 	test	eax, eax
 1034ab7:	0f 8c bc 05 00 00 	jl	1468 <_runtime.procresize+0x5f9>
 1034abd:	8b 8c 24 a0 00 00 00 	mov	ecx, dword ptr [rsp + 160]
 1034ac4:	85 c9 	test	ecx, ecx
 1034ac6:	0f 8e ad 05 00 00 	jle	1453 <_runtime.procresize+0x5f9>
 1034acc:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 1034ad0:	80 3d 59 04 0a 00 00 	cmp	byte ptr [rip + 656473], 0
 1034ad7:	0f 85 23 05 00 00 	jne	1315 <_runtime.procresize+0x580>
 1034add:	e8 de e7 00 00 	call	59358 <_runtime.nanotime1>
 1034ae2:	48 8b 05 b7 9c 09 00 	mov	rax, qword ptr [rip + 629943]
 1034ae9:	48 8b 0c 24 	mov	rcx, qword ptr [rsp]
 1034aed:	48 85 c0 	test	rax, rax
 1034af0:	0f 84 fe 04 00 00 	je	1278 <_runtime.procresize+0x574>
 1034af6:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1034afa:	48 63 da 	movsxd	rbx, edx
 1034afd:	48 89 ce 	mov	rsi, rcx
 1034b00:	48 29 c1 	sub	rcx, rax
 1034b03:	48 0f af d9 	imul	rbx, rcx
 1034b07:	48 01 1d 9a 9c 09 00 	add	qword ptr [rip + 629914], rbx
 1034b0e:	48 89 35 8b 9c 09 00 	mov	qword ptr [rip + 629899], rsi
 1034b15:	48 8b 1d 2c 98 09 00 	mov	rbx, qword ptr [rip + 628780]
 1034b1c:	8b b4 24 a0 00 00 00 	mov	esi, dword ptr [rsp + 160]
 1034b23:	39 de 	cmp	esi, ebx
 1034b25:	0f 8f bb 03 00 00 	jg	955 <_runtime.procresize+0x466>
 1034b2b:	89 d0 	mov	eax, edx
 1034b2d:	eb 30 	jmp	48 <_runtime.procresize+0xdf>
 1034b2f:	48 8d 04 d0 	lea	rax, [rax + 8*rdx]
 1034b33:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034b37:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1034b3c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1034b41:	e8 ba df fc ff 	call	-204870 <_runtime.atomicstorep>
 1034b46:	8b 44 24 4c 	mov	eax, dword ptr [rsp + 76]
 1034b4a:	8d 50 01 	lea	edx, [rax + 1]
 1034b4d:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034b54:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 1034b58:	8b b4 24 a0 00 00 00 	mov	esi, dword ptr [rsp + 160]
 1034b5f:	39 f2 	cmp	edx, esi
 1034b61:	7d 7a 	jge	122 <_runtime.procresize+0x15d>
 1034b63:	48 63 da 	movsxd	rbx, edx
 1034b66:	48 8b 0d db 97 09 00 	mov	rcx, qword ptr [rip + 628699]
 1034b6d:	48 8b 3d cc 97 09 00 	mov	rdi, qword ptr [rip + 628684]
 1034b74:	48 39 cb 	cmp	rbx, rcx
 1034b77:	0f 83 ef 04 00 00 	jae	1263 <_runtime.procresize+0x5ec>
 1034b7d:	89 54 24 4c 	mov	dword ptr [rsp + 76], edx
 1034b81:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1034b86:	48 8b 0c df 	mov	rcx, qword ptr [rdi + 8*rbx]
 1034b8a:	48 85 c9 	test	rcx, rcx
 1034b8d:	74 33 	je	51 <_runtime.procresize+0x142>
 1034b8f:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1034b94:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034b98:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 1034b9c:	e8 4f f9 ff ff 	call	-1713 <_runtime.(*p).init>
 1034ba1:	48 8b 0d a0 97 09 00 	mov	rcx, qword ptr [rip + 628640]
 1034ba8:	48 8b 05 91 97 09 00 	mov	rax, qword ptr [rip + 628625]
 1034baf:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1034bb4:	48 39 ca 	cmp	rdx, rcx
 1034bb7:	0f 82 72 ff ff ff 	jb	-142 <_runtime.procresize+0xaf>
 1034bbd:	e9 a2 04 00 00 	jmp	1186 <_runtime.procresize+0x5e4>
 1034bc2:	48 8d 05 17 d1 03 00 	lea	rax, [rip + 250135]
 1034bc9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034bcd:	e8 2e 58 fd ff 	call	-174034 <_runtime.newobject>
 1034bd2:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1034bd7:	8b 54 24 4c 	mov	edx, dword ptr [rsp + 76]
 1034bdb:	eb b2 	jmp	-78 <_runtime.procresize+0x10f>
 1034bdd:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1034be6:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 1034bee:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1034bf2:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 1034bf9:	48 85 db 	test	rbx, rbx
 1034bfc:	0f 84 dc 02 00 00 	je	732 <_runtime.procresize+0x45e>
 1034c02:	48 89 df 	mov	rdi, rbx
 1034c05:	39 33 	cmp	dword ptr [rbx], esi
 1034c07:	0f 8c ad 02 00 00 	jl	685 <_runtime.procresize+0x43a>
 1034c0d:	48 85 ff 	test	rdi, rdi
 1034c10:	74 20 	je	32 <_runtime.procresize+0x1b2>
 1034c12:	80 3d 17 03 0a 00 00 	cmp	byte ptr [rip + 656151], 0
 1034c19:	0f 85 3c 02 00 00 	jne	572 <_runtime.procresize+0x3db>
 1034c1f:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1034c23:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 1034c2a:	48 c7 43 38 00 00 00 00 	mov	qword ptr [rbx + 56], 0
 1034c32:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1034c36:	48 c7 83 d0 00 00 00 00 00 00 00 	mov	qword ptr [rbx + 208], 0
 1034c41:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1034c45:	48 c7 83 60 01 00 00 00 00 00 00 	mov	qword ptr [rbx + 352], 0
 1034c50:	48 8b 0d f1 96 09 00 	mov	rcx, qword ptr [rip + 628465]
 1034c57:	48 8b 1d e2 96 09 00 	mov	rbx, qword ptr [rip + 628450]
 1034c5e:	48 85 c9 	test	rcx, rcx
 1034c61:	0f 86 f6 03 00 00 	jbe	1014 <_runtime.procresize+0x5dd>
 1034c67:	48 8b 03 	mov	rax, qword ptr [rbx]
 1034c6a:	48 c7 40 38 00 00 00 00 	mov	qword ptr [rax + 56], 0
 1034c72:	c7 40 04 00 00 00 00 	mov	dword ptr [rax + 4], 0
 1034c79:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034c7d:	e8 1e 04 00 00 	call	1054 <_runtime.acquirep>
 1034c82:	80 3d a7 02 0a 00 00 	cmp	byte ptr [rip + 656039], 0
 1034c89:	0f 85 c2 01 00 00 	jne	450 <_runtime.procresize+0x3d1>
 1034c8f:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1034c93:	8b 9c 24 a0 00 00 00 	mov	ebx, dword ptr [rsp + 160]
 1034c9a:	89 d8 	mov	eax, ebx
 1034c9c:	eb 27 	jmp	39 <_runtime.procresize+0x245>
 1034c9e:	89 5c 24 48 	mov	dword ptr [rsp + 72], ebx
 1034ca2:	48 8b 04 f7 	mov	rax, qword ptr [rdi + 8*rsi]
 1034ca6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034caa:	e8 91 f9 ff ff 	call	-1647 <_runtime.(*p).destroy>
 1034caf:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 1034cb3:	8d 58 01 	lea	ebx, [rax + 1]
 1034cb6:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 1034cba:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034cc1:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1034cc5:	39 d3 	cmp	ebx, edx
 1034cc7:	7d 1b 	jge	27 <_runtime.procresize+0x264>
 1034cc9:	48 63 f3 	movsxd	rsi, ebx
 1034ccc:	48 8b 0d 75 96 09 00 	mov	rcx, qword ptr [rip + 628341]
 1034cd3:	48 8b 3d 66 96 09 00 	mov	rdi, qword ptr [rip + 628326]
 1034cda:	48 39 ce 	cmp	rsi, rcx
 1034cdd:	72 bf 	jb	-65 <_runtime.procresize+0x21e>
 1034cdf:	e9 71 03 00 00 	jmp	881 <_runtime.procresize+0x5d5>
 1034ce4:	48 8b 15 5d 96 09 00 	mov	rdx, qword ptr [rip + 628317]
 1034ceb:	39 c2 	cmp	edx, eax
 1034ced:	0f 85 11 01 00 00 	jne	273 <_runtime.procresize+0x384>
 1034cf3:	8d 50 ff 	lea	edx, [rax - 1]
 1034cf6:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 1034cfe:	31 c9 	xor	ecx, ecx
 1034d00:	eb 02 	jmp	2 <_runtime.procresize+0x284>
 1034d02:	ff ca 	dec	edx
 1034d04:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1034d09:	85 d2 	test	edx, edx
 1034d0b:	0f 8c b2 00 00 00 	jl	178 <_runtime.procresize+0x343>
 1034d11:	48 63 f2 	movsxd	rsi, edx
 1034d14:	48 8b 3d 2d 96 09 00 	mov	rdi, qword ptr [rip + 628269]
 1034d1b:	4c 8b 05 1e 96 09 00 	mov	r8, qword ptr [rip + 628254]
 1034d22:	48 39 fe 	cmp	rsi, rdi
 1034d25:	0f 83 1a 03 00 00 	jae	794 <_runtime.procresize+0x5c5>
 1034d2b:	48 8b 7b 30 	mov	rdi, qword ptr [rbx + 48]
 1034d2f:	49 8b 34 f0 	mov	rsi, qword ptr [r8 + 8*rsi]
 1034d33:	48 8b bf d0 00 00 00 	mov	rdi, qword ptr [rdi + 208]
 1034d3a:	48 39 f7 	cmp	rdi, rsi
 1034d3d:	74 c3 	je	-61 <_runtime.procresize+0x282>
 1034d3f:	89 54 24 44 	mov	dword ptr [rsp + 68], edx
 1034d43:	48 89 74 24 78 	mov	qword ptr [rsp + 120], rsi
 1034d48:	c7 46 04 00 00 00 00 	mov	dword ptr [rsi + 4], 0
 1034d4f:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1034d53:	e8 78 23 00 00 	call	9080 <_runtime.runqempty>
 1034d58:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1034d5d:	75 4f 	jne	79 <_runtime.procresize+0x32e>
 1034d5f:	90 	nop
 1034d60:	48 8b 15 19 99 09 00 	mov	rdx, qword ptr [rip + 629017]
 1034d67:	48 85 d2 	test	rdx, rdx
 1034d6a:	74 14 	je	20 <_runtime.procresize+0x300>
 1034d6c:	48 8b 9a 58 01 00 00 	mov	rbx, qword ptr [rdx + 344]
 1034d73:	48 89 1d 06 99 09 00 	mov	qword ptr [rip + 628998], rbx
 1034d7a:	ff 0d 08 99 09 00 	dec	dword ptr [rip + 629000]
 1034d80:	90 	nop
 1034d81:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 1034d86:	48 89 53 38 	mov	qword ptr [rbx + 56], rdx
 1034d8a:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1034d8f:	48 89 53 08 	mov	qword ptr [rbx + 8], rdx
 1034d93:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034d9a:	8b 54 24 44 	mov	edx, dword ptr [rsp + 68]
 1034d9e:	48 89 d9 	mov	rcx, rbx
 1034da1:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 1034da9:	e9 54 ff ff ff 	jmp	-172 <_runtime.procresize+0x282>
 1034dae:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1034db3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034db7:	e8 84 22 00 00 	call	8836 <_runtime.pidleput>
 1034dbc:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1034dc1:	eb d0 	jmp	-48 <_runtime.procresize+0x313>
 1034dc3:	48 8d 0d 76 96 09 00 	lea	rcx, [rip + 628342]
 1034dca:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034dce:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 1034dd2:	e8 29 29 00 00 	call	10537 <_runtime.(*randomOrder).reset>
 1034dd7:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034dde:	48 8d 0d bb 29 0c 00 	lea	rcx, [rip + 797115]
 1034de5:	87 01 	xchg	dword ptr [rcx], eax
 1034de7:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1034dec:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 1034df4:	48 8b ac 24 90 00 00 00 	mov	rbp, qword ptr [rsp + 144]
 1034dfc:	48 81 c4 98 00 00 00 	add	rsp, 152
 1034e03:	c3 	ret
 1034e04:	48 8d 05 e5 29 0c 00 	lea	rax, [rip + 797157]
 1034e0b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034e0f:	e8 1c 33 fd ff 	call	-183524 <_runtime.lock>
 1034e14:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034e1b:	48 63 c8 	movsxd	rcx, eax
 1034e1e:	48 8b 15 2b 95 09 00 	mov	rdx, qword ptr [rip + 628011]
 1034e25:	48 39 d1 	cmp	rcx, rdx
 1034e28:	0f 87 22 02 00 00 	ja	546 <_runtime.procresize+0x5d0>
 1034e2e:	48 89 0d 13 95 09 00 	mov	qword ptr [rip + 627987], rcx
 1034e35:	48 8d 05 b4 29 0c 00 	lea	rax, [rip + 797108]
 1034e3c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034e40:	e8 cb 34 fd ff 	call	-183093 <_runtime.unlock>
 1034e45:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034e4c:	e9 a2 fe ff ff 	jmp	-350 <_runtime.procresize+0x273>
 1034e51:	e8 8a 1d 01 00 	call	73098 <_runtime.traceGoStart>
 1034e56:	e9 34 fe ff ff 	jmp	-460 <_runtime.procresize+0x20f>
 1034e5b:	90 	nop
 1034e5c:	48 89 ba d0 00 00 00 	mov	qword ptr [rdx + 208], rdi
 1034e63:	c6 04 24 11 	mov	byte ptr [rsp], 17
 1034e67:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1034e70:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1034e79:	0f 57 c0 	xorps	xmm0, xmm0
 1034e7c:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1034e81:	e8 6a 0c 01 00 	call	68714 <_runtime.traceEvent>
 1034e86:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1034e8e:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1034e92:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1034e99:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034e9d:	e8 6e 19 01 00 	call	72046 <_runtime.traceProcStop>
 1034ea2:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 1034ea6:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1034eae:	8b b4 24 a0 00 00 00 	mov	esi, dword ptr [rsp + 160]
 1034eb5:	e9 65 fd ff ff 	jmp	-667 <_runtime.procresize+0x19f>
 1034eba:	c7 43 04 01 00 00 00 	mov	dword ptr [rbx + 4], 1
 1034ec1:	48 8b 42 30 	mov	rax, qword ptr [rdx + 48]
 1034ec5:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1034ecc:	48 8b 40 40 	mov	rax, qword ptr [rax + 64]
 1034ed0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034ed4:	e8 47 b6 fd ff 	call	-149945 <_runtime.(*mcache).prepareForSweep>
 1034ed9:	e9 b1 fd ff ff 	jmp	-591 <_runtime.procresize+0x20f>
 1034ede:	48 89 df 	mov	rdi, rbx
 1034ee1:	e9 2a fd ff ff 	jmp	-726 <_runtime.procresize+0x190>
 1034ee6:	48 8d 05 03 29 0c 00 	lea	rax, [rip + 796931]
 1034eed:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034ef1:	e8 3a 32 fd ff 	call	-183750 <_runtime.lock>
 1034ef6:	48 8b 15 53 94 09 00 	mov	rdx, qword ptr [rip + 627795]
 1034efd:	8b 84 24 a0 00 00 00 	mov	eax, dword ptr [rsp + 160]
 1034f04:	39 d0 	cmp	eax, edx
 1034f06:	7f 33 	jg	51 <_runtime.procresize+0x4bb>
 1034f08:	48 63 c8 	movsxd	rcx, eax
 1034f0b:	48 39 d1 	cmp	rcx, rdx
 1034f0e:	0f 87 60 01 00 00 	ja	352 <_runtime.procresize+0x5f4>
 1034f14:	48 89 0d 2d 94 09 00 	mov	qword ptr [rip + 627757], rcx
 1034f1b:	48 8d 05 ce 28 0c 00 	lea	rax, [rip + 796878]
 1034f22:	48 89 04 24 	mov	qword ptr [rsp], rax
 1034f26:	e8 e5 33 fd ff 	call	-183323 <_runtime.unlock>
 1034f2b:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1034f2f:	8b b4 24 a0 00 00 00 	mov	esi, dword ptr [rsp + 160]
 1034f36:	e9 f0 fb ff ff 	jmp	-1040 <_runtime.procresize+0xab>
 1034f3b:	48 8d 0d be f0 02 00 	lea	rcx, [rip + 192702]
 1034f42:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1034f46:	48 63 d0 	movsxd	rdx, eax
 1034f49:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 1034f4e:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1034f53:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1034f58:	e8 c3 7b 00 00 	call	31683 <_runtime.makeslice>
 1034f5d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1034f62:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1034f6a:	48 8b 0d df 93 09 00 	mov	rcx, qword ptr [rip + 627679]
 1034f71:	48 8b 15 c8 93 09 00 	mov	rdx, qword ptr [rip + 627656]
 1034f78:	48 8d 1d 81 f0 02 00 	lea	rbx, [rip + 192641]
 1034f7f:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1034f83:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1034f88:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1034f8d:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1034f92:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1034f97:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1034f9c:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1034fa1:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1034fa6:	e8 95 82 fd ff 	call	-163179 <_runtime.typedslicecopy>
 1034fab:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1034fb0:	48 89 05 91 93 09 00 	mov	qword ptr [rip + 627601], rax
 1034fb7:	48 89 05 92 93 09 00 	mov	qword ptr [rip + 627602], rax
 1034fbe:	83 3d 3b 29 0c 00 00 	cmp	dword ptr [rip + 796987], 0
 1034fc5:	75 14 	jne	20 <_runtime.procresize+0x55b>
 1034fc7:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1034fcf:	48 89 05 6a 93 09 00 	mov	qword ptr [rip + 627562], rax
 1034fd6:	e9 40 ff ff ff 	jmp	-192 <_runtime.procresize+0x49b>
 1034fdb:	48 8d 3d 5e 93 09 00 	lea	rdi, [rip + 627550]
 1034fe2:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1034fea:	e8 f1 d9 01 00 	call	121329 <_runtime.gcWriteBarrier>
 1034fef:	e9 27 ff ff ff 	jmp	-217 <_runtime.procresize+0x49b>
 1034ff4:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1034ff8:	48 89 ce 	mov	rsi, rcx
 1034ffb:	e9 0e fb ff ff 	jmp	-1266 <_runtime.procresize+0x8e>
 1035000:	90 	nop
 1035001:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 103500a:	48 63 c1 	movsxd	rax, ecx
 103500d:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1035012:	c6 04 24 04 	mov	byte ptr [rsp], 4
 1035016:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 103501f:	48 8d 44 24 60 	lea	rax, [rsp + 96]
 1035024:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1035029:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1035032:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 103503b:	e8 b0 0a 01 00 	call	68272 <_runtime.traceEvent>
 1035040:	e9 98 fa ff ff 	jmp	-1384 <_runtime.procresize+0x5d>
 1035045:	48 89 f0 	mov	rax, rsi
 1035048:	48 89 f9 	mov	rcx, rdi
 103504b:	e8 00 e3 01 00 	call	123648 <_runtime.panicIndex>
 1035050:	e8 3b e3 01 00 	call	123707 <_runtime.panicSliceAcap>
 1035055:	48 89 f0 	mov	rax, rsi
 1035058:	e8 f3 e2 01 00 	call	123635 <_runtime.panicIndex>
 103505d:	31 c0 	xor	eax, eax
 103505f:	e8 ec e2 01 00 	call	123628 <_runtime.panicIndex>
 1035064:	48 89 d0 	mov	rax, rdx
 1035067:	e8 e4 e2 01 00 	call	123620 <_runtime.panicIndex>
 103506c:	48 89 d8 	mov	rax, rbx
 103506f:	e8 dc e2 01 00 	call	123612 <_runtime.panicIndex>
 1035074:	e8 17 e3 01 00 	call	123671 <_runtime.panicSliceAcap>
 1035079:	48 8d 05 73 f8 03 00 	lea	rax, [rip + 260211]
 1035080:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035084:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 103508d:	e8 ce 3c ff ff 	call	-49970 <_runtime.throw>
 1035092:	90 	nop
 1035093:	e8 38 bb 01 00 	call	113464 <_runtime.morestack_noctxt>
 1035098:	e9 e3 f9 ff ff 	jmp	-1565 <_runtime.procresize>
 103509d:	cc 	int3
 103509e:	cc 	int3
 103509f:	cc 	int3

_runtime.acquirep:
 10350a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10350a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10350ad:	76 48 	jbe	72 <_runtime.acquirep+0x57>
 10350af:	48 83 ec 10 	sub	rsp, 16
 10350b3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 10350b8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 10350bd:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10350c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10350c6:	e8 35 00 00 00 	call	53 <_runtime.wirep>
 10350cb:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10350d0:	48 8b 40 40 	mov	rax, qword ptr [rax + 64]
 10350d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10350d8:	e8 43 b4 fd ff 	call	-150461 <_runtime.(*mcache).prepareForSweep>
 10350dd:	80 3d 4c fe 09 00 00 	cmp	byte ptr [rip + 654924], 0
 10350e4:	75 0a 	jne	10 <_runtime.acquirep+0x50>
 10350e6:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10350eb:	48 83 c4 10 	add	rsp, 16
 10350ef:	c3 	ret
 10350f0:	e8 9b 16 01 00 	call	71323 <_runtime.traceProcStart>
 10350f5:	eb ef 	jmp	-17 <_runtime.acquirep+0x46>
 10350f7:	e8 d4 ba 01 00 	call	113364 <_runtime.morestack_noctxt>
 10350fc:	eb a2 	jmp	-94 <_runtime.acquirep>
 10350fe:	cc 	int3
 10350ff:	cc 	int3

_runtime.wirep:
 1035100:	48 83 ec 30 	sub	rsp, 48
 1035104:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1035109:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103510e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1035117:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103511b:	48 83 b9 d0 00 00 00 00 	cmp	qword ptr [rcx + 208], 0
 1035123:	0f 85 16 01 00 00 	jne	278 <_runtime.wirep+0x13f>
 1035129:	48 83 b9 60 01 00 00 00 	cmp	qword ptr [rcx + 352], 0
 1035131:	0f 85 08 01 00 00 	jne	264 <_runtime.wirep+0x13f>
 1035137:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 103513c:	48 8b 5a 38 	mov	rbx, qword ptr [rdx + 56]
 1035140:	48 85 db 	test	rbx, rbx
 1035143:	75 3b 	jne	59 <_runtime.wirep+0x80>
 1035145:	83 7a 04 00 	cmp	dword ptr [rdx + 4], 0
 1035149:	75 32 	jne	50 <_runtime.wirep+0x7d>
 103514b:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 103514f:	48 89 99 60 01 00 00 	mov	qword ptr [rcx + 352], rbx
 1035156:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103515a:	48 89 d3 	mov	rbx, rdx
 103515d:	48 89 91 d0 00 00 00 	mov	qword ptr [rcx + 208], rdx
 1035164:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1035168:	48 89 43 38 	mov	qword ptr [rbx + 56], rax
 103516c:	c7 43 04 01 00 00 00 	mov	dword ptr [rbx + 4], 1
 1035173:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1035178:	48 83 c4 30 	add	rsp, 48
 103517c:	c3 	ret
 103517d:	48 85 db 	test	rbx, rbx
 1035180:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1035185:	74 0c 	je	12 <_runtime.wirep+0x93>
 1035187:	48 8b 8b e8 00 00 00 	mov	rcx, qword ptr [rbx + 232]
 103518e:	48 89 c8 	mov	rax, rcx
 1035191:	eb 02 	jmp	2 <_runtime.wirep+0x95>
 1035193:	31 c0 	xor	eax, eax
 1035195:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103519a:	8b 4a 04 	mov	ecx, dword ptr [rdx + 4]
 103519d:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10351a2:	e8 f9 52 ff ff 	call	-44295 <_runtime.printlock>
 10351a7:	48 8d 05 6d e4 03 00 	lea	rax, [rip + 255085]
 10351ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10351b2:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 10351bb:	e8 20 5c ff ff 	call	-41952 <_runtime.printstring>
 10351c0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10351c5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10351c9:	e8 52 59 ff ff 	call	-42670 <_runtime.printuint>
 10351ce:	48 8d 05 84 da 03 00 	lea	rax, [rip + 252548]
 10351d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10351d9:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10351e2:	e8 f9 5b ff ff 	call	-41991 <_runtime.printstring>
 10351e7:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10351ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10351f0:	e8 2b 5a ff ff 	call	-42453 <_runtime.printint>
 10351f5:	48 8d 05 47 e3 03 00 	lea	rax, [rip + 254791]
 10351fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035200:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1035209:	e8 d2 5b ff ff 	call	-42030 <_runtime.printstring>
 103520e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1035213:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035217:	e8 04 59 ff ff 	call	-42748 <_runtime.printuint>
 103521c:	e8 0f 55 ff ff 	call	-43761 <_runtime.printnl>
 1035221:	e8 fa 52 ff ff 	call	-44294 <_runtime.printunlock>
 1035226:	48 8d 05 29 f5 03 00 	lea	rax, [rip + 259369]
 103522d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035231:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 103523a:	e8 21 3b ff ff 	call	-50399 <_runtime.throw>
 103523f:	48 8d 05 f2 f0 03 00 	lea	rax, [rip + 258290]
 1035246:	48 89 04 24 	mov	qword ptr [rsp], rax
 103524a:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1035253:	e8 08 3b ff ff 	call	-50424 <_runtime.throw>
 1035258:	90 	nop
 1035259:	cc 	int3
 103525a:	cc 	int3
 103525b:	cc 	int3
 103525c:	cc 	int3
 103525d:	cc 	int3
 103525e:	cc 	int3
 103525f:	cc 	int3

_runtime.releasep:
 1035260:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1035269:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103526d:	0f 86 01 02 00 00 	jbe	513 <_runtime.releasep+0x214>
 1035273:	48 83 ec 50 	sub	rsp, 80
 1035277:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 103527c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1035281:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103528a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103528e:	48 8b 91 d0 00 00 00 	mov	rdx, qword ptr [rcx + 208]
 1035295:	48 85 d2 	test	rdx, rdx
 1035298:	0f 84 bc 01 00 00 	je	444 <_runtime.releasep+0x1fa>
 103529e:	48 8b 99 60 01 00 00 	mov	rbx, qword ptr [rcx + 352]
 10352a5:	48 85 db 	test	rbx, rbx
 10352a8:	0f 84 ac 01 00 00 	je	428 <_runtime.releasep+0x1fa>
 10352ae:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10352b3:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 10352b8:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 10352bd:	90 	nop
 10352be:	48 8b 72 38 	mov	rsi, qword ptr [rdx + 56]
 10352c2:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10352c7:	48 39 ce 	cmp	rsi, rcx
 10352ca:	75 6b 	jne	107 <_runtime.releasep+0xd7>
 10352cc:	48 39 5a 40 	cmp	qword ptr [rdx + 64], rbx
 10352d0:	75 65 	jne	101 <_runtime.releasep+0xd7>
 10352d2:	83 7a 04 01 	cmp	dword ptr [rdx + 4], 1
 10352d6:	75 5f 	jne	95 <_runtime.releasep+0xd7>
 10352d8:	80 3d 51 fc 09 00 00 	cmp	byte ptr [rip + 654417], 0
 10352df:	75 3c 	jne	60 <_runtime.releasep+0xbd>
 10352e1:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10352e5:	48 c7 81 d0 00 00 00 00 00 00 00 	mov	qword ptr [rcx + 208], 0
 10352f0:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10352f4:	48 c7 80 60 01 00 00 00 00 00 00 	mov	qword ptr [rax + 352], 0
 10352ff:	48 c7 42 38 00 00 00 00 	mov	qword ptr [rdx + 56], 0
 1035307:	c7 42 04 00 00 00 00 	mov	dword ptr [rdx + 4], 0
 103530e:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1035313:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1035318:	48 83 c4 50 	add	rsp, 80
 103531c:	c3 	ret
 103531d:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1035322:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1035326:	e8 e5 14 01 00 	call	70885 <_runtime.traceProcStop>
 103532b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1035330:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1035335:	eb aa 	jmp	-86 <_runtime.releasep+0x81>
 1035337:	48 8b 42 40 	mov	rax, qword ptr [rdx + 64]
 103533b:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1035340:	8b 4a 04 	mov	ecx, dword ptr [rdx + 4]
 1035343:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1035348:	e8 53 51 ff ff 	call	-44717 <_runtime.printlock>
 103534d:	48 8d 05 a3 e2 03 00 	lea	rax, [rip + 254627]
 1035354:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035358:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1035361:	e8 7a 5a ff ff 	call	-42374 <_runtime.printstring>
 1035366:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103536b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103536f:	e8 2c 5a ff ff 	call	-42452 <_runtime.printpointer>
 1035374:	48 8d 05 af da 03 00 	lea	rax, [rip + 252591]
 103537b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103537f:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1035388:	e8 53 5a ff ff 	call	-42413 <_runtime.printstring>
 103538d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1035392:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035396:	e8 05 5a ff ff 	call	-42491 <_runtime.printpointer>
 103539b:	48 8d 05 94 da 03 00 	lea	rax, [rip + 252564]
 10353a2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10353a6:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 10353af:	e8 2c 5a ff ff 	call	-42452 <_runtime.printstring>
 10353b4:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10353b9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10353bd:	e8 ce 58 ff ff 	call	-42802 <_runtime.printhex>
 10353c2:	48 8d 05 63 df 03 00 	lea	rax, [rip + 253795]
 10353c9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10353cd:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 10353d6:	e8 05 5a ff ff 	call	-42491 <_runtime.printstring>
 10353db:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10353e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10353e4:	e8 b7 59 ff ff 	call	-42569 <_runtime.printpointer>
 10353e9:	48 8d 05 68 df 03 00 	lea	rax, [rip + 253800]
 10353f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10353f4:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 10353fd:	e8 de 59 ff ff 	call	-42530 <_runtime.printstring>
 1035402:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1035407:	48 89 04 24 	mov	qword ptr [rsp], rax
 103540b:	e8 90 59 ff ff 	call	-42608 <_runtime.printpointer>
 1035410:	48 8d 05 4c df 03 00 	lea	rax, [rip + 253772]
 1035417:	48 89 04 24 	mov	qword ptr [rsp], rax
 103541b:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1035424:	e8 b7 59 ff ff 	call	-42569 <_runtime.printstring>
 1035429:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103542e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035432:	e8 e9 56 ff ff 	call	-43287 <_runtime.printuint>
 1035437:	e8 f4 52 ff ff 	call	-44300 <_runtime.printnl>
 103543c:	e8 df 50 ff ff 	call	-44833 <_runtime.printunlock>
 1035441:	48 8d 05 80 f8 03 00 	lea	rax, [rip + 260224]
 1035448:	48 89 04 24 	mov	qword ptr [rsp], rax
 103544c:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 1035455:	e8 06 39 ff ff 	call	-50938 <_runtime.throw>
 103545a:	48 8d 05 d0 ef 03 00 	lea	rax, [rip + 258000]
 1035461:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035465:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 103546e:	e8 ed 38 ff ff 	call	-50963 <_runtime.throw>
 1035473:	90 	nop
 1035474:	e8 57 b7 01 00 	call	112471 <_runtime.morestack_noctxt>
 1035479:	e9 e2 fd ff ff 	jmp	-542 <_runtime.releasep>
 103547e:	cc 	int3
 103547f:	cc 	int3

_runtime.incidlelocked:
 1035480:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1035489:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103548d:	76 4d 	jbe	77 <_runtime.incidlelocked+0x5c>
 103548f:	48 83 ec 10 	sub	rsp, 16
 1035493:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1035498:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 103549d:	48 8d 05 d4 91 09 00 	lea	rax, [rip + 627156]
 10354a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10354a8:	e8 83 2c fd ff 	call	-185213 <_runtime.lock>
 10354ad:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 10354b1:	01 05 d5 91 09 00 	add	dword ptr [rip + 627157], eax
 10354b7:	85 c0 	test	eax, eax
 10354b9:	7f 1a 	jg	26 <_runtime.incidlelocked+0x55>
 10354bb:	48 8d 05 b6 91 09 00 	lea	rax, [rip + 627126]
 10354c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10354c6:	e8 45 2e fd ff 	call	-184763 <_runtime.unlock>
 10354cb:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10354d0:	48 83 c4 10 	add	rsp, 16
 10354d4:	c3 	ret
 10354d5:	e8 16 00 00 00 	call	22 <_runtime.checkdead>
 10354da:	eb df 	jmp	-33 <_runtime.incidlelocked+0x3b>
 10354dc:	e8 ef b6 01 00 	call	112367 <_runtime.morestack_noctxt>
 10354e1:	eb 9d 	jmp	-99 <_runtime.incidlelocked>
 10354e3:	cc 	int3
 10354e4:	cc 	int3
 10354e5:	cc 	int3
 10354e6:	cc 	int3
 10354e7:	cc 	int3
 10354e8:	cc 	int3
 10354e9:	cc 	int3
 10354ea:	cc 	int3
 10354eb:	cc 	int3
 10354ec:	cc 	int3
 10354ed:	cc 	int3
 10354ee:	cc 	int3
 10354ef:	cc 	int3

_runtime.checkdead:
 10354f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10354f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10354fd:	0f 86 5c 04 00 00 	jbe	1116 <_runtime.checkdead+0x46f>
 1035503:	48 83 ec 58 	sub	rsp, 88
 1035507:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 103550c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1035511:	80 3d 53 22 0c 00 00 	cmp	byte ptr [rip + 795219], 0
 1035518:	0f 85 3a 02 00 00 	jne	570 <_runtime.checkdead+0x268>
 103551e:	80 3d 44 22 0c 00 00 	cmp	byte ptr [rip + 795204], 0
 1035525:	0f 85 2d 02 00 00 	jne	557 <_runtime.checkdead+0x268>
 103552b:	83 3d 86 22 0c 00 00 	cmp	dword ptr [rip + 795270], 0
 1035532:	0f 87 16 02 00 00 	ja	534 <_runtime.checkdead+0x25e>
 1035538:	80 3d 2b 22 0c 00 00 	cmp	byte ptr [rip + 795179], 0
 103553f:	0f 84 cc 01 00 00 	je	460 <_runtime.checkdead+0x221>
 1035545:	31 c0 	xor	eax, eax
 1035547:	8b 0d 3b 91 09 00 	mov	ecx, dword ptr [rip + 627003]
 103554d:	48 8b 15 3c 91 09 00 	mov	rdx, qword ptr [rip + 627004]
 1035554:	48 2b 15 45 91 09 00 	sub	rdx, qword ptr [rip + 627013]
 103555b:	48 89 d3 	mov	rbx, rdx
 103555e:	29 ca 	sub	edx, ecx
 1035560:	8b 35 26 91 09 00 	mov	esi, dword ptr [rip + 626982]
 1035566:	29 f2 	sub	edx, esi
 1035568:	8b 3d 2e 91 09 00 	mov	edi, dword ptr [rip + 626990]
 103556e:	29 fa 	sub	edx, edi
 1035570:	39 c2 	cmp	edx, eax
 1035572:	0f 8f 8f 01 00 00 	jg	399 <_runtime.checkdead+0x217>
 1035578:	85 d2 	test	edx, edx
 103557a:	0f 8c 00 03 00 00 	jl	768 <_runtime.checkdead+0x390>
 1035580:	48 8d 05 61 22 0c 00 	lea	rax, [rip + 795233]
 1035587:	48 89 04 24 	mov	qword ptr [rsp], rax
 103558b:	e8 a0 2b fd ff 	call	-185440 <_runtime.lock>
 1035590:	31 c0 	xor	eax, eax
 1035592:	31 c9 	xor	ecx, ecx
 1035594:	eb 0e 	jmp	14 <_runtime.checkdead+0xb4>
 1035596:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 103559b:	48 ff c2 	inc	rdx
 103559e:	48 89 c1 	mov	rcx, rax
 10355a1:	48 89 d0 	mov	rax, rdx
 10355a4:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10355a9:	48 8b 15 70 8d 09 00 	mov	rdx, qword ptr [rip + 626032]
 10355b0:	48 39 05 71 8d 09 00 	cmp	qword ptr [rip + 626033], rax
 10355b7:	7e 66 	jle	102 <_runtime.checkdead+0x12f>
 10355b9:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10355be:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 10355c2:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10355c7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10355cb:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 10355d0:	e8 eb 54 01 00 	call	87275 <_runtime.isSystemGoroutine>
 10355d5:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 10355da:	74 07 	je	7 <_runtime.checkdead+0xf3>
 10355dc:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10355e1:	eb b3 	jmp	-77 <_runtime.checkdead+0xa6>
 10355e3:	90 	nop
 10355e4:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10355e9:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 10355ef:	89 ca 	mov	edx, ecx
 10355f1:	0f ba f1 0c 	btr	ecx, 12
 10355f5:	8d 59 ff 	lea	ebx, [rcx - 1]
 10355f8:	83 fb 02 	cmp	ebx, 2
 10355fb:	0f 86 e3 01 00 00 	jbe	483 <_runtime.checkdead+0x2f4>
 1035601:	83 f9 04 	cmp	ecx, 4
 1035604:	75 0a 	jne	10 <_runtime.checkdead+0x120>
 1035606:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103560b:	48 ff c0 	inc	rax
 103560e:	eb 86 	jmp	-122 <_runtime.checkdead+0xa6>
 1035610:	83 f9 09 	cmp	ecx, 9
 1035613:	74 f1 	je	-15 <_runtime.checkdead+0x116>
 1035615:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103561a:	e9 77 ff ff ff 	jmp	-137 <_runtime.checkdead+0xa6>
 103561f:	48 8d 05 c2 21 0c 00 	lea	rax, [rip + 795074]
 1035626:	48 89 04 24 	mov	qword ptr [rsp], rax
 103562a:	e8 e1 2c fd ff 	call	-185119 <_runtime.unlock>
 103562f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1035634:	48 85 c0 	test	rax, rax
 1035637:	0f 84 7e 01 00 00 	je	382 <_runtime.checkdead+0x2cb>
 103563d:	48 83 3d eb 21 0c 00 00 	cmp	qword ptr [rip + 795115], 0
 1035645:	75 38 	jne	56 <_runtime.checkdead+0x18f>
 1035647:	48 8b 05 fa 8c 09 00 	mov	rax, qword ptr [rip + 625914]
 103564e:	48 8b 0d eb 8c 09 00 	mov	rcx, qword ptr [rip + 625899]
 1035655:	31 d2 	xor	edx, edx
 1035657:	eb 03 	jmp	3 <_runtime.checkdead+0x16c>
 1035659:	48 ff c2 	inc	rdx
 103565c:	48 39 c2 	cmp	rdx, rax
 103565f:	0f 8d fd 00 00 00 	jge	253 <_runtime.checkdead+0x272>
 1035665:	48 8b 1c d1 	mov	rbx, qword ptr [rcx + 8*rdx]
 1035669:	84 03 	test	byte ptr [rbx], al
 103566b:	48 83 bb 78 27 00 00 00 	cmp	qword ptr [rbx + 10104], 0
 1035673:	7e e4 	jle	-28 <_runtime.checkdead+0x169>
 1035675:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 103567a:	48 83 c4 58 	add	rsp, 88
 103567e:	c3 	ret
 103567f:	e8 7c fd 00 00 	call	64892 <_runtime.timeSleepUntil>
 1035684:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1035688:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 103568d:	48 85 c9 	test	rcx, rcx
 1035690:	74 b5 	je	-75 <_runtime.checkdead+0x157>
 1035692:	48 89 05 97 21 0c 00 	mov	qword ptr [rip + 795031], rax
 1035699:	48 8d 05 10 90 09 00 	lea	rax, [rip + 626704]
 10356a0:	eb 06 	jmp	6 <_runtime.checkdead+0x1b8>
 10356a2:	84 02 	test	byte ptr [rdx], al
 10356a4:	48 8d 42 08 	lea	rax, [rdx + 8]
 10356a8:	48 8b 10 	mov	rdx, qword ptr [rax]
 10356ab:	48 85 d2 	test	rdx, rdx
 10356ae:	74 0c 	je	12 <_runtime.checkdead+0x1cc>
 10356b0:	48 39 ca 	cmp	rdx, rcx
 10356b3:	75 ed 	jne	-19 <_runtime.checkdead+0x1b2>
 10356b5:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 10356b9:	48 89 10 	mov	qword ptr [rax], rdx
 10356bc:	90 	nop
 10356bd:	48 8b 05 bc 8f 09 00 	mov	rax, qword ptr [rip + 626620]
 10356c4:	48 85 c0 	test	rax, rax
 10356c7:	74 17 	je	23 <_runtime.checkdead+0x1f0>
 10356c9:	48 8b 90 58 01 00 00 	mov	rdx, qword ptr [rax + 344]
 10356d0:	48 89 15 a9 8f 09 00 	mov	qword ptr [rip + 626601], rdx
 10356d7:	ff 0d ab 8f 09 00 	dec	dword ptr [rip + 626603]
 10356dd:	48 85 c0 	test	rax, rax
 10356e0:	0f 84 bc 00 00 00 	je	188 <_runtime.checkdead+0x2b2>
 10356e6:	90 	nop
 10356e7:	48 89 88 d8 00 00 00 	mov	qword ptr [rax + 216], rcx
 10356ee:	48 05 48 01 00 00 	add	rax, 328
 10356f4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10356f8:	e8 f3 2c fd ff 	call	-185101 <_runtime.notewakeup>
 10356fd:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1035702:	48 83 c4 58 	add	rsp, 88
 1035706:	c3 	ret
 1035707:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 103570c:	48 83 c4 58 	add	rsp, 88
 1035710:	c3 	ret
 1035711:	80 3d 4b 20 0c 00 00 	cmp	byte ptr [rip + 794699], 0
 1035718:	0f 84 27 fe ff ff 	je	-473 <_runtime.checkdead+0x55>
 103571e:	c6 04 24 01 	mov	byte ptr [rsp], 1
 1035722:	e8 c9 93 ff ff 	call	-27703 <_runtime.lockextra>
 1035727:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103572c:	90 	nop
 103572d:	83 3d 50 20 0c 00 00 	cmp	dword ptr [rip + 794704], 0
 1035734:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1035739:	48 8d 0d e8 20 0c 00 	lea	rcx, [rip + 794856]
 1035740:	48 87 01 	xchg	qword ptr [rcx], rax
 1035743:	0f 97 c0 	seta	al
 1035746:	0f b6 c0 	movzx	eax, al
 1035749:	e9 f9 fd ff ff 	jmp	-519 <_runtime.checkdead+0x57>
 103574e:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1035753:	48 83 c4 58 	add	rsp, 88
 1035757:	c3 	ret
 1035758:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 103575d:	48 83 c4 58 	add	rsp, 88
 1035761:	c3 	ret
 1035762:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103576b:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103576f:	c7 80 f4 00 00 00 ff ff ff ff 	mov	dword ptr [rax + 244], 4294967295
 1035779:	48 8d 05 f8 8e 09 00 	lea	rax, [rip + 626424]
 1035780:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035784:	e8 87 2b fd ff 	call	-185465 <_runtime.unlock>
 1035789:	48 8d 05 e9 0c 04 00 	lea	rax, [rip + 265449]
 1035790:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035794:	48 c7 44 24 08 25 00 00 00 	mov	qword ptr [rsp + 8], 37
 103579d:	e8 be 35 ff ff 	call	-51778 <_runtime.throw>
 10357a2:	48 8d 05 d4 f4 03 00 	lea	rax, [rip + 259284]
 10357a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10357ad:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 10357b6:	e8 a5 35 ff ff 	call	-51803 <_runtime.throw>
 10357bb:	48 8d 05 b6 8e 09 00 	lea	rax, [rip + 626358]
 10357c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10357c6:	e8 45 2b fd ff 	call	-185531 <_runtime.unlock>
 10357cb:	48 8d 05 77 1b 04 00 	lea	rax, [rip + 269175]
 10357d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10357d6:	48 c7 44 24 08 36 00 00 00 	mov	qword ptr [rsp + 8], 54
 10357df:	e8 7c 35 ff ff 	call	-51844 <_runtime.throw>
 10357e4:	89 54 24 24 	mov	dword ptr [rsp + 36], edx
 10357e8:	48 8d 05 f9 1f 0c 00 	lea	rax, [rip + 794617]
 10357ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10357f3:	e8 18 2b fd ff 	call	-185576 <_runtime.unlock>
 10357f8:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10357fd:	48 8b 80 98 00 00 00 	mov	rax, qword ptr [rax + 152]
 1035804:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1035809:	e8 92 4c ff ff 	call	-45934 <_runtime.printlock>
 103580e:	48 8d 05 af f8 03 00 	lea	rax, [rip + 260271]
 1035815:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035819:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1035822:	e8 b9 55 ff ff 	call	-43591 <_runtime.printstring>
 1035827:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103582c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035830:	e8 eb 53 ff ff 	call	-44053 <_runtime.printint>
 1035835:	48 8d 05 e5 da 03 00 	lea	rax, [rip + 252645]
 103583c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035840:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1035849:	e8 92 55 ff ff 	call	-43630 <_runtime.printstring>
 103584e:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 1035852:	89 c0 	mov	eax, eax
 1035854:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035858:	e8 c3 52 ff ff 	call	-44349 <_runtime.printuint>
 103585d:	e8 ce 4e ff ff 	call	-45362 <_runtime.printnl>
 1035862:	e8 b9 4c ff ff 	call	-45895 <_runtime.printunlock>
 1035867:	48 8d 05 5a eb 03 00 	lea	rax, [rip + 256858]
 103586e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035872:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 103587b:	e8 e0 34 ff ff 	call	-52000 <_runtime.throw>
 1035880:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 1035885:	89 4c 24 20 	mov	dword ptr [rsp + 32], ecx
 1035889:	89 74 24 1c 	mov	dword ptr [rsp + 28], esi
 103588d:	89 7c 24 18 	mov	dword ptr [rsp + 24], edi
 1035891:	e8 0a 4c ff ff 	call	-46070 <_runtime.printlock>
 1035896:	48 8d 05 42 f8 03 00 	lea	rax, [rip + 260162]
 103589d:	48 89 04 24 	mov	qword ptr [rsp], rax
 10358a1:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 10358aa:	e8 31 55 ff ff 	call	-43727 <_runtime.printstring>
 10358af:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 10358b3:	48 63 c0 	movsxd	rax, eax
 10358b6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10358ba:	e8 61 53 ff ff 	call	-44191 <_runtime.printint>
 10358bf:	48 8d 05 1c df 03 00 	lea	rax, [rip + 253724]
 10358c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10358ca:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 10358d3:	e8 08 55 ff ff 	call	-43768 <_runtime.printstring>
 10358d8:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 10358dc:	48 63 c0 	movsxd	rax, eax
 10358df:	48 89 04 24 	mov	qword ptr [rsp], rax
 10358e3:	e8 38 53 ff ff 	call	-44232 <_runtime.printint>
 10358e8:	48 8d 05 e0 d6 03 00 	lea	rax, [rip + 251616]
 10358ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10358f3:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 10358fc:	e8 df 54 ff ff 	call	-43809 <_runtime.printstring>
 1035901:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1035906:	48 63 c0 	movsxd	rax, eax
 1035909:	48 89 04 24 	mov	qword ptr [rsp], rax
 103590d:	e8 0e 53 ff ff 	call	-44274 <_runtime.printint>
 1035912:	48 8d 05 9b d5 03 00 	lea	rax, [rip + 251291]
 1035919:	48 89 04 24 	mov	qword ptr [rsp], rax
 103591d:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1035926:	e8 b5 54 ff ff 	call	-43851 <_runtime.printstring>
 103592b:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 103592f:	48 63 c0 	movsxd	rax, eax
 1035932:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035936:	e8 e5 52 ff ff 	call	-44315 <_runtime.printint>
 103593b:	e8 f0 4d ff ff 	call	-45584 <_runtime.printnl>
 1035940:	e8 db 4b ff ff 	call	-46117 <_runtime.printunlock>
 1035945:	48 8d 05 77 fe 03 00 	lea	rax, [rip + 261751]
 103594c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035950:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1035959:	e8 02 34 ff ff 	call	-52222 <_runtime.throw>
 103595e:	90 	nop
 103595f:	e8 6c b2 01 00 	call	111212 <_runtime.morestack_noctxt>
 1035964:	e9 87 fb ff ff 	jmp	-1145 <_runtime.checkdead>
 1035969:	cc 	int3
 103596a:	cc 	int3
 103596b:	cc 	int3
 103596c:	cc 	int3
 103596d:	cc 	int3
 103596e:	cc 	int3
 103596f:	cc 	int3

_runtime.sysmon:
 1035970:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1035979:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103597d:	0f 86 bf 04 00 00 	jbe	1215 <_runtime.sysmon+0x4d2>
 1035983:	48 83 ec 70 	sub	rsp, 112
 1035987:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 103598c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1035991:	48 8d 05 e0 8c 09 00 	lea	rax, [rip + 625888]
 1035998:	48 89 04 24 	mov	qword ptr [rsp], rax
 103599c:	e8 8f 27 fd ff 	call	-186481 <_runtime.lock>
 10359a1:	ff 05 f5 8c 09 00 	inc	dword ptr [rip + 625909]
 10359a7:	e8 44 fb ff ff 	call	-1212 <_runtime.checkdead>
 10359ac:	48 8d 05 c5 8c 09 00 	lea	rax, [rip + 625861]
 10359b3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10359b7:	e8 54 29 fd ff 	call	-186028 <_runtime.unlock>
 10359bc:	31 c0 	xor	eax, eax
 10359be:	31 c9 	xor	ecx, ecx
 10359c0:	31 d2 	xor	edx, edx
 10359c2:	eb 07 	jmp	7 <_runtime.sysmon+0x5b>
 10359c4:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 10359c8:	48 89 da 	mov	rdx, rbx
 10359cb:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 10359d0:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 10359d5:	48 85 c0 	test	rax, rax
 10359d8:	0f 85 52 04 00 00 	jne	1106 <_runtime.sysmon+0x4c0>
 10359de:	b9 14 00 00 00 	mov	ecx, 20
 10359e3:	81 f9 10 27 00 00 	cmp	ecx, 10000
 10359e9:	b8 10 27 00 00 	mov	eax, 10000
 10359ee:	0f 47 c8 	cmova	ecx, eax
 10359f1:	89 4c 24 1c 	mov	dword ptr [rsp + 28], ecx
 10359f5:	89 0c 24 	mov	dword ptr [rsp], ecx
 10359f8:	e8 e3 d7 00 00 	call	55267 <_runtime.usleep>
 10359fd:	90 	nop
 10359fe:	e8 bd d8 00 00 	call	55485 <_runtime.nanotime1>
 1035a03:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1035a07:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1035a0c:	e8 ef f9 00 00 	call	63983 <_runtime.timeSleepUntil>
 1035a11:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1035a15:	83 3d 60 20 0c 00 00 	cmp	dword ptr [rip + 794720], 0
 1035a1c:	0f 8f 07 04 00 00 	jg	1031 <_runtime.sysmon+0x4b9>
 1035a22:	83 3d 37 8d 09 00 00 	cmp	dword ptr [rip + 625975], 0
 1035a29:	0f 84 e4 03 00 00 	je	996 <_runtime.sysmon+0x4a3>
 1035a2f:	b9 01 00 00 00 	mov	ecx, 1
 1035a34:	84 c9 	test	cl, cl
 1035a36:	0f 85 7a 02 00 00 	jne	634 <_runtime.sysmon+0x346>
 1035a3c:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 1035a40:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1035a45:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1035a4a:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1035a4f:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1035a54:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1035a59:	89 4c 24 1c 	mov	dword ptr [rsp + 28], ecx
 1035a5d:	48 8b 35 e4 6c 09 00 	mov	rsi, qword ptr [rip + 617700]
 1035a64:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1035a67:	48 85 f6 	test	rsi, rsi
 1035a6a:	0f 85 1c 02 00 00 	jne	540 <_runtime.sysmon+0x31c>
 1035a70:	48 8b 35 f1 8b 09 00 	mov	rsi, qword ptr [rip + 625649]
 1035a77:	8b 3d 2f 1d 0c 00 	mov	edi, dword ptr [rip + 793903]
 1035a7d:	85 ff 	test	edi, edi
 1035a7f:	74 15 	je	21 <_runtime.sysmon+0x126>
 1035a81:	48 85 f6 	test	rsi, rsi
 1035a84:	74 10 	je	16 <_runtime.sysmon+0x126>
 1035a86:	48 8d be 80 96 98 00 	lea	rdi, [rsi + 10000000]
 1035a8d:	48 39 d7 	cmp	rdi, rdx
 1035a90:	0f 8c 88 01 00 00 	jl	392 <_runtime.sysmon+0x2ae>
 1035a96:	48 39 d0 	cmp	rax, rdx
 1035a99:	0f 8c 63 01 00 00 	jl	355 <_runtime.sysmon+0x292>
 1035a9f:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1035aa3:	e8 a8 03 00 00 	call	936 <_runtime.retake>
 1035aa8:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1035aad:	48 ff c0 	inc	rax
 1035ab0:	83 7c 24 08 00 	cmp	dword ptr [rsp + 8], 0
 1035ab5:	b9 00 00 00 00 	mov	ecx, 0
 1035aba:	48 0f 45 c1 	cmovne	rax, rcx
 1035abe:	80 3d 2b 3c 0c 00 00 	cmp	byte ptr [rip + 801835], 0
 1035ac5:	74 0d 	je	13 <_runtime.sysmon+0x164>
 1035ac7:	83 3d ea 1c 0c 00 00 	cmp	dword ptr [rip + 793834], 0
 1035ace:	0f 84 df 00 00 00 	je	223 <_runtime.sysmon+0x243>
 1035ad4:	31 d2 	xor	edx, edx
 1035ad6:	84 d2 	test	dl, dl
 1035ad8:	0f 84 ce 00 00 00 	je	206 <_runtime.sysmon+0x23c>
 1035ade:	8b 15 cc 88 09 00 	mov	edx, dword ptr [rip + 624844]
 1035ae4:	85 d2 	test	edx, edx
 1035ae6:	0f 95 c2 	setne	dl
 1035ae9:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1035aee:	84 d2 	test	dl, dl
 1035af0:	75 55 	jne	85 <_runtime.sysmon+0x1d7>
 1035af2:	8b 15 84 1f 0c 00 	mov	edx, dword ptr [rip + 794500]
 1035af8:	85 d2 	test	edx, edx
 1035afa:	7e 41 	jle	65 <_runtime.sysmon+0x1cd>
 1035afc:	48 63 d2 	movsxd	rdx, edx
 1035aff:	48 69 d2 40 42 0f 00 	imul	rdx, rdx, 1000000
 1035b06:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1035b0b:	48 01 da 	add	rdx, rbx
 1035b0e:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1035b13:	48 39 f2 	cmp	rdx, rsi
 1035b16:	0f 8f a8 fe ff ff 	jg	-344 <_runtime.sysmon+0x54>
 1035b1c:	83 3d 55 1f 0c 00 00 	cmp	dword ptr [rip + 794453], 0
 1035b23:	0f 9f 04 24 	setg	byte ptr [rsp]
 1035b27:	e8 04 07 00 00 	call	1796 <_runtime.schedtrace>
 1035b2c:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1035b31:	31 c9 	xor	ecx, ecx
 1035b33:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1035b38:	e9 87 fe ff ff 	jmp	-377 <_runtime.sysmon+0x54>
 1035b3d:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1035b42:	e9 7d fe ff ff 	jmp	-387 <_runtime.sysmon+0x54>
 1035b47:	48 8d 05 52 88 09 00 	lea	rax, [rip + 624722]
 1035b4e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035b52:	e8 d9 25 fd ff 	call	-186919 <_runtime.lock>
 1035b57:	c7 05 4f 88 09 00 00 00 00 00 	mov	dword ptr [rip + 624719], 0
 1035b61:	48 c7 44 24 40 00 00 00 00 	mov	qword ptr [rsp + 64], 0
 1035b6a:	48 8b 05 37 88 09 00 	mov	rax, qword ptr [rip + 624695]
 1035b71:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 1035b7c:	90 	nop
 1035b7d:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1035b82:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 1035b87:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035b8b:	e8 20 b1 ff ff 	call	-20192 <_runtime.injectglist>
 1035b90:	48 8d 05 09 88 09 00 	lea	rax, [rip + 624649]
 1035b97:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035b9b:	e8 70 27 fd ff 	call	-186512 <_runtime.unlock>
 1035ba0:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1035ba5:	31 c9 	xor	ecx, ecx
 1035ba7:	e9 46 ff ff ff 	jmp	-186 <_runtime.sysmon+0x182>
 1035bac:	31 d2 	xor	edx, edx
 1035bae:	e9 36 ff ff ff 	jmp	-202 <_runtime.sysmon+0x179>
 1035bb3:	83 3d e2 1b 0c 00 00 	cmp	dword ptr [rip + 793570], 0
 1035bba:	0f 85 14 ff ff ff 	jne	-236 <_runtime.sysmon+0x164>
 1035bc0:	83 3d d1 1b 0c 00 00 	cmp	dword ptr [rip + 793553], 0
 1035bc7:	7d 07 	jge	7 <_runtime.sysmon+0x260>
 1035bc9:	31 d2 	xor	edx, edx
 1035bcb:	e9 06 ff ff ff 	jmp	-250 <_runtime.sysmon+0x166>
 1035bd0:	48 8b 15 69 41 0c 00 	mov	rdx, qword ptr [rip + 803177]
 1035bd7:	48 85 d2 	test	rdx, rdx
 1035bda:	74 1a 	je	26 <_runtime.sysmon+0x286>
 1035bdc:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1035be1:	48 89 de 	mov	rsi, rbx
 1035be4:	48 29 d3 	sub	rbx, rdx
 1035be7:	48 39 1d aa 55 09 00 	cmp	qword ptr [rip + 611754], rbx
 1035bee:	0f 9c c2 	setl	dl
 1035bf1:	e9 e0 fe ff ff 	jmp	-288 <_runtime.sysmon+0x166>
 1035bf6:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1035bfb:	31 d2 	xor	edx, edx
 1035bfd:	e9 d4 fe ff ff 	jmp	-300 <_runtime.sysmon+0x166>
 1035c02:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1035c0a:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1035c0f:	e8 7c 94 ff ff 	call	-27524 <_runtime.startm>
 1035c14:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1035c19:	e9 81 fe ff ff 	jmp	-383 <_runtime.sysmon+0x12f>
 1035c1e:	48 89 f0 	mov	rax, rsi
 1035c21:	48 8d 0d 40 8a 09 00 	lea	rcx, [rip + 625216]
 1035c28:	f0 	lock
 1035c29:	48 0f b1 11 	cmpxchg	qword ptr [rcx], rdx
 1035c2d:	0f 94 c1 	sete	cl
 1035c30:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1035c38:	e8 33 00 ff ff 	call	-65485 <_runtime.netpoll>
 1035c3d:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1035c42:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1035c47:	48 85 c9 	test	rcx, rcx
 1035c4a:	75 18 	jne	24 <_runtime.sysmon+0x2f4>
 1035c4c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1035c51:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 1035c55:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1035c5a:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1035c5f:	e9 32 fe ff ff 	jmp	-462 <_runtime.sysmon+0x126>
 1035c64:	c7 04 24 ff ff ff ff 	mov	dword ptr [rsp], 4294967295
 1035c6b:	e8 10 f8 ff ff 	call	-2032 <_runtime.incidlelocked>
 1035c70:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1035c75:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035c79:	e8 32 b0 ff ff 	call	-20430 <_runtime.injectglist>
 1035c7e:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1035c85:	e8 f6 f7 ff ff 	call	-2058 <_runtime.incidlelocked>
 1035c8a:	eb c0 	jmp	-64 <_runtime.sysmon+0x2dc>
 1035c8c:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1035c90:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1035c99:	e8 b2 c5 01 00 	call	116146 <_runtime.asmcgocall>
 1035c9e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1035ca3:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 1035ca7:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1035cac:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1035cb1:	e9 ba fd ff ff 	jmp	-582 <_runtime.sysmon+0x100>
 1035cb6:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1035cbb:	48 8d 05 b6 89 09 00 	lea	rax, [rip + 625078]
 1035cc2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035cc6:	e8 65 24 fd ff 	call	-187291 <_runtime.lock>
 1035ccb:	8b 05 8f 8a 09 00 	mov	eax, dword ptr [rip + 625295]
 1035cd1:	85 c0 	test	eax, eax
 1035cd3:	0f 84 24 01 00 00 	je	292 <_runtime.sysmon+0x48d>
 1035cd9:	b8 01 00 00 00 	mov	eax, 1
 1035cde:	84 c0 	test	al, al
 1035ce0:	0f 84 ff 00 00 00 	je	255 <_runtime.sysmon+0x475>
 1035ce6:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1035ceb:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1035cf0:	48 39 c8 	cmp	rax, rcx
 1035cf3:	7f 42 	jg	66 <_runtime.sysmon+0x3c7>
 1035cf5:	ba 14 00 00 00 	mov	edx, 20
 1035cfa:	31 db 	xor	ebx, ebx
 1035cfc:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1035d01:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1035d06:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1035d0b:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 1035d0f:	48 8d 35 62 89 09 00 	lea	rsi, [rip + 624994]
 1035d16:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1035d1a:	e8 f1 25 fd ff 	call	-186895 <_runtime.unlock>
 1035d1f:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 1035d23:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1035d28:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1035d2d:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1035d32:	e9 13 fd ff ff 	jmp	-749 <_runtime.sysmon+0xda>
 1035d37:	b8 01 00 00 00 	mov	eax, 1
 1035d3c:	48 8d 0d 2d 8a 09 00 	lea	rcx, [rip + 625197]
 1035d43:	87 01 	xchg	dword ptr [rcx], eax
 1035d45:	48 8d 05 2c 89 09 00 	lea	rax, [rip + 624940]
 1035d4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035d50:	e8 bb 25 fd ff 	call	-186949 <_runtime.unlock>
 1035d55:	48 8b 05 3c 54 09 00 	mov	rax, qword ptr [rip + 611388]
 1035d5c:	48 8d 0d 15 8a 09 00 	lea	rcx, [rip + 625173]
 1035d63:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1035d67:	48 89 c1 	mov	rcx, rax
 1035d6a:	48 c1 e8 3f 	shr	rax, 63
 1035d6e:	48 01 c8 	add	rax, rcx
 1035d71:	48 d1 f8 	sar	rax
 1035d74:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1035d79:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1035d7e:	48 29 d1 	sub	rcx, rdx
 1035d81:	48 39 c1 	cmp	rcx, rax
 1035d84:	48 0f 4c c1 	cmovl	rax, rcx
 1035d88:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1035d8d:	e8 8e 2a fd ff 	call	-185714 <_runtime.notetsleep>
 1035d92:	90 	nop
 1035d93:	e8 28 d5 00 00 	call	54568 <_runtime.nanotime1>
 1035d98:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1035d9c:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1035da1:	e8 5a f6 00 00 	call	63066 <_runtime.timeSleepUntil>
 1035da6:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1035daa:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1035daf:	48 8d 0d c2 88 09 00 	lea	rcx, [rip + 624834]
 1035db6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1035dba:	e8 71 23 fd ff 	call	-187535 <_runtime.lock>
 1035dbf:	31 c0 	xor	eax, eax
 1035dc1:	48 8d 0d a8 89 09 00 	lea	rcx, [rip + 625064]
 1035dc8:	87 01 	xchg	dword ptr [rcx], eax
 1035dca:	90 	nop
 1035dcb:	48 c7 05 a2 89 09 00 00 00 00 00 	mov	qword ptr [rip + 625058], 0
 1035dd6:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1035ddb:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1035de0:	e9 10 ff ff ff 	jmp	-240 <_runtime.sysmon+0x385>
 1035de5:	8b 54 24 1c 	mov	edx, dword ptr [rsp + 28]
 1035de9:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1035dee:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1035df3:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1035df8:	e9 ff fe ff ff 	jmp	-257 <_runtime.sysmon+0x38c>
 1035dfd:	8b 0d b5 88 09 00 	mov	ecx, dword ptr [rip + 624821]
 1035e03:	8b 15 97 19 0c 00 	mov	edx, dword ptr [rip + 792983]
 1035e09:	39 d1 	cmp	ecx, edx
 1035e0b:	0f 94 c0 	sete	al
 1035e0e:	e9 cb fe ff ff 	jmp	-309 <_runtime.sysmon+0x36e>
 1035e13:	8b 15 9f 88 09 00 	mov	edx, dword ptr [rip + 624799]
 1035e19:	8b 1d 81 19 0c 00 	mov	ebx, dword ptr [rip + 792961]
 1035e1f:	39 da 	cmp	edx, ebx
 1035e21:	0f 94 c1 	sete	cl
 1035e24:	e9 0b fc ff ff 	jmp	-1013 <_runtime.sysmon+0xc4>
 1035e29:	31 c9 	xor	ecx, ecx
 1035e2b:	e9 04 fc ff ff 	jmp	-1020 <_runtime.sysmon+0xc4>
 1035e30:	89 cb 	mov	ebx, ecx
 1035e32:	d1 e1 	shl	ecx
 1035e34:	48 83 f8 32 	cmp	rax, 50
 1035e38:	0f 4f d9 	cmovg	ebx, ecx
 1035e3b:	89 d9 	mov	ecx, ebx
 1035e3d:	e9 a1 fb ff ff 	jmp	-1119 <_runtime.sysmon+0x73>
 1035e42:	e8 89 ad 01 00 	call	109961 <_runtime.morestack_noctxt>
 1035e47:	e9 24 fb ff ff 	jmp	-1244 <_runtime.sysmon>
 1035e4c:	cc 	int3
 1035e4d:	cc 	int3
 1035e4e:	cc 	int3
 1035e4f:	cc 	int3

_runtime.retake:
 1035e50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1035e59:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1035e5d:	0f 86 34 02 00 00 	jbe	564 <_runtime.retake+0x247>
 1035e63:	48 83 ec 40 	sub	rsp, 64
 1035e67:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1035e6c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1035e71:	48 8d 05 78 19 0c 00 	lea	rax, [rip + 792952]
 1035e78:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035e7c:	e8 af 22 fd ff 	call	-187729 <_runtime.lock>
 1035e81:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1035e86:	31 c9 	xor	ecx, ecx
 1035e88:	31 d2 	xor	edx, edx
 1035e8a:	eb 03 	jmp	3 <_runtime.retake+0x3f>
 1035e8c:	48 ff c1 	inc	rcx
 1035e8f:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1035e94:	48 8b 1d a5 84 09 00 	mov	rbx, qword ptr [rip + 623781]
 1035e9b:	48 39 0d a6 84 09 00 	cmp	qword ptr [rip + 623782], rcx
 1035ea2:	0f 8e cc 01 00 00 	jle	460 <_runtime.retake+0x224>
 1035ea8:	48 8b 1c cb 	mov	rbx, qword ptr [rbx + 8*rcx]
 1035eac:	48 85 db 	test	rbx, rbx
 1035eaf:	74 db 	je	-37 <_runtime.retake+0x3c>
 1035eb1:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1035eb6:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1035ebb:	8b 73 04 	mov	esi, dword ptr [rbx + 4]
 1035ebe:	89 74 24 14 	mov	dword ptr [rsp + 20], esi
 1035ec2:	83 fe 01 	cmp	esi, 1
 1035ec5:	0f 85 99 01 00 00 	jne	409 <_runtime.retake+0x214>
 1035ecb:	8b 7b 10 	mov	edi, dword ptr [rbx + 16]
 1035ece:	44 8b 43 18 	mov	r8d, dword ptr [rbx + 24]
 1035ed2:	49 39 f8 	cmp	r8, rdi
 1035ed5:	0f 84 3d 01 00 00 	je	317 <_runtime.retake+0x1c8>
 1035edb:	89 7b 18 	mov	dword ptr [rbx + 24], edi
 1035ede:	48 89 43 20 	mov	qword ptr [rbx + 32], rax
 1035ee2:	31 ff 	xor	edi, edi
 1035ee4:	83 fe 02 	cmp	esi, 2
 1035ee7:	0f 85 26 01 00 00 	jne	294 <_runtime.retake+0x1c3>
 1035eed:	44 8b 43 14 	mov	r8d, dword ptr [rbx + 20]
 1035ef1:	40 84 ff 	test	dil, dil
 1035ef4:	75 12 	jne	18 <_runtime.retake+0xb8>
 1035ef6:	8b 7b 28 	mov	edi, dword ptr [rbx + 40]
 1035ef9:	4c 39 c7 	cmp	rdi, r8
 1035efc:	74 0a 	je	10 <_runtime.retake+0xb8>
 1035efe:	44 89 43 28 	mov	dword ptr [rbx + 40], r8d
 1035f02:	48 89 43 30 	mov	qword ptr [rbx + 48], rax
 1035f06:	eb 84 	jmp	-124 <_runtime.retake+0x3c>
 1035f08:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1035f0c:	e8 bf 11 00 00 	call	4543 <_runtime.runqempty>
 1035f11:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1035f16:	0f 84 f0 00 00 00 	je	240 <_runtime.retake+0x1bc>
 1035f1c:	8b 05 9a 87 09 00 	mov	eax, dword ptr [rip + 624538]
 1035f22:	8b 0d 90 87 09 00 	mov	ecx, dword ptr [rip + 624528]
 1035f28:	01 c8 	add	eax, ecx
 1035f2a:	85 c0 	test	eax, eax
 1035f2c:	0f 97 c0 	seta	al
 1035f2f:	84 c0 	test	al, al
 1035f31:	74 2c 	je	44 <_runtime.retake+0x10f>
 1035f33:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1035f38:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1035f3c:	48 81 c1 80 96 98 00 	add	rcx, 10000000
 1035f43:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1035f48:	48 39 d1 	cmp	rcx, rdx
 1035f4b:	7e 12 	jle	18 <_runtime.retake+0x10f>
 1035f4d:	48 89 d0 	mov	rax, rdx
 1035f50:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1035f55:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1035f5a:	e9 2d ff ff ff 	jmp	-211 <_runtime.retake+0x3c>
 1035f5f:	48 8d 05 8a 18 0c 00 	lea	rax, [rip + 792714]
 1035f66:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035f6a:	e8 a1 23 fd ff 	call	-187487 <_runtime.unlock>
 1035f6f:	c7 04 24 ff ff ff ff 	mov	dword ptr [rsp], 4294967295
 1035f76:	e8 05 f5 ff ff 	call	-2811 <_runtime.incidlelocked>
 1035f7b:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 1035f7f:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1035f84:	31 d2 	xor	edx, edx
 1035f86:	f0 	lock
 1035f87:	0f b1 51 04 	cmpxchg	dword ptr [rcx + 4], edx
 1035f8b:	0f 94 c0 	sete	al
 1035f8e:	84 c0 	test	al, al
 1035f90:	74 73 	je	115 <_runtime.retake+0x1b5>
 1035f92:	80 3d 97 ef 09 00 00 	cmp	byte ptr [rip + 651159], 0
 1035f99:	75 4c 	jne	76 <_runtime.retake+0x197>
 1035f9b:	ff 41 14 	inc	dword ptr [rcx + 20]
 1035f9e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1035fa2:	e8 f9 92 ff ff 	call	-27911 <_runtime.handoffp>
 1035fa7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1035fac:	48 ff c0 	inc	rax
 1035faf:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1035fb4:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1035fbb:	e8 c0 f4 ff ff 	call	-2880 <_runtime.incidlelocked>
 1035fc0:	48 8d 05 29 18 0c 00 	lea	rax, [rip + 792617]
 1035fc7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035fcb:	e8 60 21 fd ff 	call	-188064 <_runtime.lock>
 1035fd0:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1035fd5:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1035fda:	48 89 c2 	mov	rdx, rax
 1035fdd:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1035fe2:	e9 a5 fe ff ff 	jmp	-347 <_runtime.retake+0x3c>
 1035fe7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1035feb:	e8 60 10 01 00 	call	69728 <_runtime.traceGoSysBlock>
 1035ff0:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1035ff5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1035ff9:	e8 12 08 01 00 	call	67602 <_runtime.traceProcStop>
 1035ffe:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1036003:	eb 96 	jmp	-106 <_runtime.retake+0x14b>
 1036005:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103600a:	eb a3 	jmp	-93 <_runtime.retake+0x15f>
 103600c:	31 c0 	xor	eax, eax
 103600e:	e9 1c ff ff ff 	jmp	-228 <_runtime.retake+0xdf>
 1036013:	48 89 d0 	mov	rax, rdx
 1036016:	eb bd 	jmp	-67 <_runtime.retake+0x185>
 1036018:	48 8b 7b 20 	mov	rdi, qword ptr [rbx + 32]
 103601c:	48 81 c7 80 96 98 00 	add	rdi, 10000000
 1036023:	48 39 c7 	cmp	rdi, rax
 1036026:	7e 09 	jle	9 <_runtime.retake+0x1e1>
 1036028:	40 0f 9e c7 	setle	dil
 103602c:	e9 b3 fe ff ff 	jmp	-333 <_runtime.retake+0x94>
 1036031:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1036036:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 103603a:	e8 11 01 00 00 	call	273 <_runtime.preemptone>
 103603f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1036044:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1036049:	48 39 c8 	cmp	rax, rcx
 103604c:	48 89 c8 	mov	rax, rcx
 103604f:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1036054:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1036059:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 103605e:	8b 74 24 14 	mov	esi, dword ptr [rsp + 20]
 1036062:	eb c4 	jmp	-60 <_runtime.retake+0x1d8>
 1036064:	83 fe 02 	cmp	esi, 2
 1036067:	0f 84 5e fe ff ff 	je	-418 <_runtime.retake+0x7b>
 103606d:	31 ff 	xor	edi, edi
 103606f:	e9 70 fe ff ff 	jmp	-400 <_runtime.retake+0x94>
 1036074:	48 8d 05 75 17 0c 00 	lea	rax, [rip + 792437]
 103607b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103607f:	e8 8c 22 fd ff 	call	-187764 <_runtime.unlock>
 1036084:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1036089:	89 44 24 50 	mov	dword ptr [rsp + 80], eax
 103608d:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1036092:	48 83 c4 40 	add	rsp, 64
 1036096:	c3 	ret
 1036097:	e8 34 ab 01 00 	call	109364 <_runtime.morestack_noctxt>
 103609c:	e9 af fd ff ff 	jmp	-593 <_runtime.retake>
 10360a1:	cc 	int3
 10360a2:	cc 	int3
 10360a3:	cc 	int3
 10360a4:	cc 	int3
 10360a5:	cc 	int3
 10360a6:	cc 	int3
 10360a7:	cc 	int3
 10360a8:	cc 	int3
 10360a9:	cc 	int3
 10360aa:	cc 	int3
 10360ab:	cc 	int3
 10360ac:	cc 	int3
 10360ad:	cc 	int3
 10360ae:	cc 	int3
 10360af:	cc 	int3

_runtime.preemptall:
 10360b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10360b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10360bd:	76 7b 	jbe	123 <_runtime.preemptall+0x8a>
 10360bf:	48 83 ec 38 	sub	rsp, 56
 10360c3:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 10360c8:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 10360cd:	48 8b 05 74 82 09 00 	mov	rax, qword ptr [rip + 623220]
 10360d4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10360d9:	48 8b 0d 60 82 09 00 	mov	rcx, qword ptr [rip + 623200]
 10360e0:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 10360e5:	31 d2 	xor	edx, edx
 10360e7:	31 db 	xor	ebx, ebx
 10360e9:	eb 03 	jmp	3 <_runtime.preemptall+0x3e>
 10360eb:	48 ff c2 	inc	rdx
 10360ee:	48 39 c2 	cmp	rdx, rax
 10360f1:	7d 39 	jge	57 <_runtime.preemptall+0x7c>
 10360f3:	48 8b 34 d1 	mov	rsi, qword ptr [rcx + 8*rdx]
 10360f7:	83 7e 04 01 	cmp	dword ptr [rsi + 4], 1
 10360fb:	75 ee 	jne	-18 <_runtime.preemptall+0x3b>
 10360fd:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1036102:	88 5c 24 17 	mov	byte ptr [rsp + 23], bl
 1036106:	48 89 34 24 	mov	qword ptr [rsp], rsi
 103610a:	e8 41 00 00 00 	call	65 <_runtime.preemptone>
 103610f:	0f b6 5c 24 08 	movzx	ebx, byte ptr [rsp + 8]
 1036114:	0f b6 44 24 17 	movzx	eax, byte ptr [rsp + 23]
 1036119:	09 c3 	or	ebx, eax
 103611b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1036120:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1036125:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 103612a:	eb bf 	jmp	-65 <_runtime.preemptall+0x3b>
 103612c:	88 5c 24 40 	mov	byte ptr [rsp + 64], bl
 1036130:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1036135:	48 83 c4 38 	add	rsp, 56
 1036139:	c3 	ret
 103613a:	e8 91 aa 01 00 	call	109201 <_runtime.morestack_noctxt>
 103613f:	e9 6c ff ff ff 	jmp	-148 <_runtime.preemptall>
 1036144:	cc 	int3
 1036145:	cc 	int3
 1036146:	cc 	int3
 1036147:	cc 	int3
 1036148:	cc 	int3
 1036149:	cc 	int3
 103614a:	cc 	int3
 103614b:	cc 	int3
 103614c:	cc 	int3
 103614d:	cc 	int3
 103614e:	cc 	int3
 103614f:	cc 	int3

_runtime.preemptone:
 1036150:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1036159:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103615d:	0f 86 b7 00 00 00 	jbe	183 <_runtime.preemptone+0xca>
 1036163:	48 83 ec 18 	sub	rsp, 24
 1036167:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103616c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1036171:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1036176:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 103617a:	48 85 d2 	test	rdx, rdx
 103617d:	74 0f 	je	15 <_runtime.preemptone+0x3e>
 103617f:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1036188:	48 39 53 30 	cmp	qword ptr [rbx + 48], rdx
 103618c:	75 0f 	jne	15 <_runtime.preemptone+0x4d>
 103618e:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 1036193:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1036198:	48 83 c4 18 	add	rsp, 24
 103619c:	c3 	ret
 103619d:	48 8b 9a c0 00 00 00 	mov	rbx, qword ptr [rdx + 192]
 10361a4:	48 85 db 	test	rbx, rbx
 10361a7:	74 05 	je	5 <_runtime.preemptone+0x5e>
 10361a9:	48 39 1a 	cmp	qword ptr [rdx], rbx
 10361ac:	75 0f 	jne	15 <_runtime.preemptone+0x6d>
 10361ae:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 10361b3:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10361b8:	48 83 c4 18 	add	rsp, 24
 10361bc:	c3 	ret
 10361bd:	c6 83 b1 00 00 00 01 	mov	byte ptr [rbx + 177], 1
 10361c4:	48 c7 43 10 de fa ff ff 	mov	qword ptr [rbx + 16], -1314
 10361cc:	83 3d b1 18 0c 00 00 	cmp	dword ptr [rip + 792753], 0
 10361d3:	75 1e 	jne	30 <_runtime.preemptone+0xa3>
 10361d5:	c6 81 a0 27 00 00 01 	mov	byte ptr [rcx + 10144], 1
 10361dc:	90 	nop
 10361dd:	31 c0 	xor	eax, eax
 10361df:	b9 01 00 00 00 	mov	ecx, 1
 10361e4:	f0 	lock
 10361e5:	0f b1 8a 3c 03 00 00 	cmpxchg	dword ptr [rdx + 828], ecx
 10361ec:	0f 94 c1 	sete	cl
 10361ef:	84 c9 	test	cl, cl
 10361f1:	75 0f 	jne	15 <_runtime.preemptone+0xb2>
 10361f3:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 10361f8:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10361fd:	48 83 c4 18 	add	rsp, 24
 1036201:	c3 	ret
 1036202:	90 	nop
 1036203:	48 8b 42 48 	mov	rax, qword ptr [rdx + 72]
 1036207:	48 89 04 24 	mov	qword ptr [rsp], rax
 103620b:	c7 44 24 08 10 00 00 00 	mov	dword ptr [rsp + 8], 16
 1036213:	e8 d8 cc 00 00 	call	52440 <_runtime.pthread_kill>
 1036218:	eb d9 	jmp	-39 <_runtime.preemptone+0xa3>
 103621a:	e8 b1 a9 01 00 	call	108977 <_runtime.morestack_noctxt>
 103621f:	e9 2c ff ff ff 	jmp	-212 <_runtime.preemptone>
 1036224:	cc 	int3
 1036225:	cc 	int3
 1036226:	cc 	int3
 1036227:	cc 	int3
 1036228:	cc 	int3
 1036229:	cc 	int3
 103622a:	cc 	int3
 103622b:	cc 	int3
 103622c:	cc 	int3
 103622d:	cc 	int3
 103622e:	cc 	int3
 103622f:	cc 	int3

_runtime.schedtrace:
 1036230:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1036239:	48 8d 44 24 98 	lea	rax, [rsp - 104]
 103623e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1036242:	0f 86 de 0a 00 00 	jbe	2782 <_runtime.schedtrace+0xaf6>
 1036248:	48 81 ec e8 00 00 00 	sub	rsp, 232
 103624f:	48 89 ac 24 e0 00 00 00 	mov	qword ptr [rsp + 224], rbp
 1036257:	48 8d ac 24 e0 00 00 00 	lea	rbp, [rsp + 224]
 103625f:	90 	nop
 1036260:	e8 5b d0 00 00 	call	53339 <_runtime.nanotime1>
 1036265:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1036269:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103626e:	48 83 3d 52 16 0c 00 00 	cmp	qword ptr [rip + 792146], 0
 1036276:	75 07 	jne	7 <_runtime.schedtrace+0x4f>
 1036278:	48 89 05 49 16 0c 00 	mov	qword ptr [rip + 792137], rax
 103627f:	48 8d 05 f2 83 09 00 	lea	rax, [rip + 623602]
 1036286:	48 89 04 24 	mov	qword ptr [rsp], rax
 103628a:	e8 a1 1e fd ff 	call	-188767 <_runtime.lock>
 103628f:	48 8b 05 32 16 0c 00 	mov	rax, qword ptr [rip + 792114]
 1036296:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 103629e:	8b 0d 14 84 09 00 	mov	ecx, dword ptr [rip + 623636]
 10362a4:	48 89 8c 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rcx
 10362ac:	8b 15 0a 84 09 00 	mov	edx, dword ptr [rip + 623626]
 10362b2:	48 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdx
 10362ba:	48 63 1d c7 83 09 00 	movsxd	rbx, dword ptr [rip + 623559]
 10362c1:	48 89 9c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rbx
 10362c9:	48 63 35 00 84 09 00 	movsxd	rsi, dword ptr [rip + 623616]
 10362d0:	48 89 b4 24 98 00 00 00 	mov	qword ptr [rsp + 152], rsi
 10362d8:	48 8b 3d b1 83 09 00 	mov	rdi, qword ptr [rip + 623537]
 10362df:	48 2b 3d ba 83 09 00 	sub	rdi, qword ptr [rip + 623546]
 10362e6:	48 89 bc 24 90 00 00 00 	mov	qword ptr [rsp + 144], rdi
 10362ee:	e8 ad 41 ff ff 	call	-48723 <_runtime.printlock>
 10362f3:	48 8d 05 6c cb 03 00 	lea	rax, [rip + 248684]
 10362fa:	48 89 04 24 	mov	qword ptr [rsp], rax
 10362fe:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1036307:	e8 d4 4a ff ff 	call	-46380 <_runtime.printstring>
 103630c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1036311:	48 8b 8c 24 b8 00 00 00 	mov	rcx, qword ptr [rsp + 184]
 1036319:	48 29 c8 	sub	rax, rcx
 103631c:	48 89 c1 	mov	rcx, rax
 103631f:	48 b8 db 34 b6 d7 82 de 1b 43 	movabs	rax, 4835703278458516699
 1036329:	48 f7 e9 	imul	rcx
 103632c:	48 c1 fa 12 	sar	rdx, 18
 1036330:	48 c1 f9 3f 	sar	rcx, 63
 1036334:	48 29 ca 	sub	rdx, rcx
 1036337:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103633b:	e8 e0 48 ff ff 	call	-46880 <_runtime.printint>
 1036340:	48 8d 05 55 d6 03 00 	lea	rax, [rip + 251477]
 1036347:	48 89 04 24 	mov	qword ptr [rsp], rax
 103634b:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1036354:	e8 87 4a ff ff 	call	-46457 <_runtime.printstring>
 1036359:	48 63 05 40 14 0c 00 	movsxd	rax, dword ptr [rip + 791616]
 1036360:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036364:	e8 b7 48 ff ff 	call	-46921 <_runtime.printint>
 1036369:	48 8d 05 a6 cf 03 00 	lea	rax, [rip + 249766]
 1036370:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036374:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 103637d:	e8 5e 4a ff ff 	call	-46498 <_runtime.printstring>
 1036382:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 103638a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103638e:	e8 8d 47 ff ff 	call	-47219 <_runtime.printuint>
 1036393:	48 8d 05 4a cd 03 00 	lea	rax, [rip + 249162]
 103639a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103639e:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 10363a7:	e8 34 4a ff ff 	call	-46540 <_runtime.printstring>
 10363ac:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10363b4:	48 63 c0 	movsxd	rax, eax
 10363b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10363bb:	e8 60 48 ff ff 	call	-47008 <_runtime.printint>
 10363c0:	48 8d 05 8c d8 03 00 	lea	rax, [rip + 252044]
 10363c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10363cb:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 10363d4:	e8 07 4a ff ff 	call	-46585 <_runtime.printstring>
 10363d9:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 10363e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10363e5:	e8 36 47 ff ff 	call	-47306 <_runtime.printuint>
 10363ea:	48 8d 05 84 d2 03 00 	lea	rax, [rip + 250500]
 10363f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10363f5:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10363fe:	e8 dd 49 ff ff 	call	-46627 <_runtime.printstring>
 1036403:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 103640b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103640f:	e8 0c 48 ff ff 	call	-47092 <_runtime.printint>
 1036414:	48 8d 05 d4 cd 03 00 	lea	rax, [rip + 249300]
 103641b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103641f:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1036428:	e8 b3 49 ff ff 	call	-46669 <_runtime.printstring>
 103642d:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1036435:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036439:	e8 e2 47 ff ff 	call	-47134 <_runtime.printint>
 103643e:	e8 dd 40 ff ff 	call	-48931 <_runtime.printunlock>
 1036443:	0f b6 84 24 f0 00 00 00 	movzx	eax, byte ptr [rsp + 240]
 103644b:	84 c0 	test	al, al
 103644d:	0f 85 d5 07 00 00 	jne	2005 <_runtime.schedtrace+0x9f8>
 1036453:	48 8b 0d ee 7e 09 00 	mov	rcx, qword ptr [rip + 622318]
 103645a:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 1036462:	48 8b 15 d7 7e 09 00 	mov	rdx, qword ptr [rip + 622295]
 1036469:	48 89 94 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rdx
 1036471:	31 db 	xor	ebx, ebx
 1036473:	eb 21 	jmp	33 <_runtime.schedtrace+0x266>
 1036475:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 103647a:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 103647e:	0f b6 84 24 f0 00 00 00 	movzx	eax, byte ptr [rsp + 240]
 1036486:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 103648e:	48 8b 94 24 d8 00 00 00 	mov	rdx, qword ptr [rsp + 216]
 1036496:	48 39 cb 	cmp	rbx, rcx
 1036499:	0f 8d 8a 02 00 00 	jge	650 <_runtime.schedtrace+0x4f9>
 103649f:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 10364a4:	48 8b 34 da 	mov	rsi, qword ptr [rdx + 8*rbx]
 10364a8:	48 8b 7e 38 	mov	rdi, qword ptr [rsi + 56]
 10364ac:	44 8b 86 f0 05 00 00 	mov	r8d, dword ptr [rsi + 1520]
 10364b3:	44 89 44 24 24 	mov	dword ptr [rsp + 36], r8d
 10364b8:	44 8b 8e f4 05 00 00 	mov	r9d, dword ptr [rsi + 1524]
 10364bf:	44 89 4c 24 1c 	mov	dword ptr [rsp + 28], r9d
 10364c4:	84 c0 	test	al, al
 10364c6:	0f 84 ba 01 00 00 	je	442 <_runtime.schedtrace+0x456>
 10364cc:	48 85 ff 	test	rdi, rdi
 10364cf:	0f 84 a5 01 00 00 	je	421 <_runtime.schedtrace+0x44a>
 10364d5:	48 8b bf e8 00 00 00 	mov	rdi, qword ptr [rdi + 232]
 10364dc:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 10364e1:	8b 46 04 	mov	eax, dword ptr [rsi + 4]
 10364e4:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 10364ec:	8b 4e 10 	mov	ecx, dword ptr [rsi + 16]
 10364ef:	48 89 8c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rcx
 10364f7:	8b 56 14 	mov	edx, dword ptr [rsi + 20]
 10364fa:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 1036502:	48 63 9e 08 0e 00 00 	movsxd	rbx, dword ptr [rsi + 3592]
 1036509:	48 89 9c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rbx
 1036511:	48 8b b6 78 27 00 00 	mov	rsi, qword ptr [rsi + 10104]
 1036518:	48 89 74 24 78 	mov	qword ptr [rsp + 120], rsi
 103651d:	e8 7e 3f ff ff 	call	-49282 <_runtime.printlock>
 1036522:	48 8d 05 67 c7 03 00 	lea	rax, [rip + 247655]
 1036529:	48 89 04 24 	mov	qword ptr [rsp], rax
 103652d:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1036536:	e8 a5 48 ff ff 	call	-46939 <_runtime.printstring>
 103653b:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1036540:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036544:	e8 d7 46 ff ff 	call	-47401 <_runtime.printint>
 1036549:	48 8d 05 dc cb 03 00 	lea	rax, [rip + 248796]
 1036550:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036554:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 103655d:	e8 7e 48 ff ff 	call	-46978 <_runtime.printstring>
 1036562:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 103656a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103656e:	e8 ad 45 ff ff 	call	-47699 <_runtime.printuint>
 1036573:	48 8d 05 ff cd 03 00 	lea	rax, [rip + 249343]
 103657a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103657e:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1036587:	e8 54 48 ff ff 	call	-47020 <_runtime.printstring>
 103658c:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1036594:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036598:	e8 83 45 ff ff 	call	-47741 <_runtime.printuint>
 103659d:	48 8d 05 12 d1 03 00 	lea	rax, [rip + 250130]
 10365a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10365a8:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10365b1:	e8 2a 48 ff ff 	call	-47062 <_runtime.printstring>
 10365b6:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10365be:	48 89 04 24 	mov	qword ptr [rsp], rax
 10365c2:	e8 59 45 ff ff 	call	-47783 <_runtime.printuint>
 10365c7:	48 8d 05 d1 c6 03 00 	lea	rax, [rip + 247505]
 10365ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10365d2:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 10365db:	e8 00 48 ff ff 	call	-47104 <_runtime.printstring>
 10365e0:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10365e5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10365e9:	e8 32 46 ff ff 	call	-47566 <_runtime.printint>
 10365ee:	48 8d 05 f0 cb 03 00 	lea	rax, [rip + 248816]
 10365f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10365f9:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1036602:	e8 d9 47 ff ff 	call	-47143 <_runtime.printstring>
 1036607:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 103660b:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 103660f:	29 c8 	sub	eax, ecx
 1036611:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036615:	e8 06 45 ff ff 	call	-47866 <_runtime.printuint>
 103661a:	48 8d 05 b0 cb 03 00 	lea	rax, [rip + 248752]
 1036621:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036625:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 103662e:	e8 ad 47 ff ff 	call	-47187 <_runtime.printstring>
 1036633:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 103663b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103663f:	e8 dc 45 ff ff 	call	-47652 <_runtime.printint>
 1036644:	48 8d 05 44 cd 03 00 	lea	rax, [rip + 249156]
 103664b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103664f:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1036658:	e8 83 47 ff ff 	call	-47229 <_runtime.printstring>
 103665d:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1036662:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036666:	e8 b5 45 ff ff 	call	-47691 <_runtime.printint>
 103666b:	e8 c0 40 ff ff 	call	-48960 <_runtime.printnl>
 1036670:	e8 ab 3e ff ff 	call	-49493 <_runtime.printunlock>
 1036675:	e9 fb fd ff ff 	jmp	-517 <_runtime.schedtrace+0x245>
 103667a:	48 c7 c7 ff ff ff ff 	mov	rdi, -1
 1036681:	e9 56 fe ff ff 	jmp	-426 <_runtime.schedtrace+0x2ac>
 1036686:	e8 15 3e ff ff 	call	-49643 <_runtime.printlock>
 103668b:	e8 50 40 ff ff 	call	-49072 <_runtime.printsp>
 1036690:	e8 8b 3e ff ff 	call	-49525 <_runtime.printunlock>
 1036695:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103669a:	48 85 c0 	test	rax, rax
 103669d:	74 62 	je	98 <_runtime.schedtrace+0x4d1>
 103669f:	e8 fc 3d ff ff 	call	-49668 <_runtime.printlock>
 10366a4:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 10366a8:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 10366ac:	29 c8 	sub	eax, ecx
 10366ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10366b2:	e8 69 44 ff ff 	call	-48023 <_runtime.printuint>
 10366b7:	e8 64 3e ff ff 	call	-49564 <_runtime.printunlock>
 10366bc:	48 8b 05 85 7c 09 00 	mov	rax, qword ptr [rip + 621701]
 10366c3:	48 ff c8 	dec	rax
 10366c6:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10366cb:	48 39 c8 	cmp	rax, rcx
 10366ce:	0f 85 a1 fd ff ff 	jne	-607 <_runtime.schedtrace+0x245>
 10366d4:	e8 c7 3d ff ff 	call	-49721 <_runtime.printlock>
 10366d9:	48 8d 05 a2 c5 03 00 	lea	rax, [rip + 247202]
 10366e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10366e4:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 10366ed:	e8 ee 46 ff ff 	call	-47378 <_runtime.printstring>
 10366f2:	e8 29 3e ff ff 	call	-49623 <_runtime.printunlock>
 10366f7:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10366fc:	e9 74 fd ff ff 	jmp	-652 <_runtime.schedtrace+0x245>
 1036701:	e8 9a 3d ff ff 	call	-49766 <_runtime.printlock>
 1036706:	48 8d 05 57 c5 03 00 	lea	rax, [rip + 247127]
 103670d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036711:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 103671a:	e8 c1 46 ff ff 	call	-47423 <_runtime.printstring>
 103671f:	e8 fc 3d ff ff 	call	-49668 <_runtime.printunlock>
 1036724:	e9 76 ff ff ff 	jmp	-138 <_runtime.schedtrace+0x46f>
 1036729:	84 c0 	test	al, al
 103672b:	0f 84 d7 04 00 00 	je	1239 <_runtime.schedtrace+0x9d8>
 1036731:	48 8b 05 c8 7a 09 00 	mov	rax, qword ptr [rip + 621256]
 1036738:	e9 74 02 00 00 	jmp	628 <_runtime.schedtrace+0x781>
 103673d:	48 89 84 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rax
 1036745:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 103674a:	48 8b 88 e8 00 00 00 	mov	rcx, qword ptr [rax + 232]
 1036751:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 1036759:	48 63 90 f0 00 00 00 	movsxd	rdx, dword ptr [rax + 240]
 1036760:	48 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdx
 1036768:	48 63 b0 f4 00 00 00 	movsxd	rsi, dword ptr [rax + 244]
 103676f:	48 89 b4 24 98 00 00 00 	mov	qword ptr [rsp + 152], rsi
 1036777:	48 8b b8 f8 00 00 00 	mov	rdi, qword ptr [rax + 248]
 103677e:	48 89 bc 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rdi
 1036786:	4c 8b 80 00 01 00 00 	mov	r8, qword ptr [rax + 256]
 103678d:	4c 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], r8
 1036795:	4c 63 88 08 01 00 00 	movsxd	r9, dword ptr [rax + 264]
 103679c:	4c 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], r9
 10367a4:	4c 63 90 0c 01 00 00 	movsxd	r10, dword ptr [rax + 268]
 10367ab:	4c 89 54 24 70 	mov	qword ptr [rsp + 112], r10
 10367b0:	44 0f b6 98 14 01 00 00 	movzx	r11d, byte ptr [rax + 276]
 10367b8:	44 88 5c 24 17 	mov	byte ptr [rsp + 23], r11b
 10367bd:	44 0f b6 a0 15 01 00 00 	movzx	r12d, byte ptr [rax + 277]
 10367c5:	44 88 64 24 16 	mov	byte ptr [rsp + 22], r12b
 10367ca:	e8 d1 3c ff ff 	call	-49967 <_runtime.printlock>
 10367cf:	48 8d 05 b7 c4 03 00 	lea	rax, [rip + 246967]
 10367d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10367da:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 10367e3:	e8 f8 45 ff ff 	call	-47624 <_runtime.printstring>
 10367e8:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 10367f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10367f4:	e8 27 44 ff ff 	call	-48089 <_runtime.printint>
 10367f9:	48 8d 05 07 c5 03 00 	lea	rax, [rip + 247047]
 1036800:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036804:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103680d:	e8 ce 45 ff ff 	call	-47666 <_runtime.printstring>
 1036812:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 1036816:	48 63 c0 	movsxd	rax, eax
 1036819:	48 89 04 24 	mov	qword ptr [rsp], rax
 103681d:	e8 fe 43 ff ff 	call	-48130 <_runtime.printint>
 1036822:	48 8d 05 e9 c5 03 00 	lea	rax, [rip + 247273]
 1036829:	48 89 04 24 	mov	qword ptr [rsp], rax
 103682d:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1036836:	e8 a5 45 ff ff 	call	-47707 <_runtime.printstring>
 103683b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1036840:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036844:	e8 d7 43 ff ff 	call	-48169 <_runtime.printint>
 1036849:	48 8d 05 e7 ca 03 00 	lea	rax, [rip + 248551]
 1036850:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036854:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 103685d:	e8 7e 45 ff ff 	call	-47746 <_runtime.printstring>
 1036862:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 103686a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103686e:	e8 ad 43 ff ff 	call	-48211 <_runtime.printint>
 1036873:	48 8d 05 bb c9 03 00 	lea	rax, [rip + 248251]
 103687a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103687e:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1036887:	e8 54 45 ff ff 	call	-47788 <_runtime.printstring>
 103688c:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1036894:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036898:	e8 83 43 ff ff 	call	-48253 <_runtime.printint>
 103689d:	48 8d 05 3f cc 03 00 	lea	rax, [rip + 248895]
 10368a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10368a8:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 10368b1:	e8 2a 45 ff ff 	call	-47830 <_runtime.printstring>
 10368b6:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10368be:	48 89 04 24 	mov	qword ptr [rsp], rax
 10368c2:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 10368ca:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10368cf:	e8 0c 45 ff ff 	call	-47860 <_runtime.printstring>
 10368d4:	48 8d 05 cb c5 03 00 	lea	rax, [rip + 247243]
 10368db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10368df:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 10368e8:	e8 f3 44 ff ff 	call	-47885 <_runtime.printstring>
 10368ed:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10368f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10368f9:	e8 22 43 ff ff 	call	-48350 <_runtime.printint>
 10368fe:	48 8d 05 9a c5 03 00 	lea	rax, [rip + 247194]
 1036905:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036909:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1036912:	e8 c9 44 ff ff 	call	-47927 <_runtime.printstring>
 1036917:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103691c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036920:	e8 fb 42 ff ff 	call	-48389 <_runtime.printint>
 1036925:	48 8d 05 d7 c8 03 00 	lea	rax, [rip + 248023]
 103692c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036930:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1036939:	e8 a2 44 ff ff 	call	-47966 <_runtime.printstring>
 103693e:	0f b6 44 24 17 	movzx	eax, byte ptr [rsp + 23]
 1036943:	88 04 24 	mov	byte ptr [rsp], al
 1036946:	e8 35 3e ff ff 	call	-49611 <_runtime.printbool>
 103694b:	48 8d 05 2f c7 03 00 	lea	rax, [rip + 247599]
 1036952:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036956:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 103695f:	e8 7c 44 ff ff 	call	-48004 <_runtime.printstring>
 1036964:	0f b6 44 24 16 	movzx	eax, byte ptr [rsp + 22]
 1036969:	88 04 24 	mov	byte ptr [rsp], al
 103696c:	e8 0f 3e ff ff 	call	-49649 <_runtime.printbool>
 1036971:	48 8d 05 24 c7 03 00 	lea	rax, [rip + 247588]
 1036978:	48 89 04 24 	mov	qword ptr [rsp], rax
 103697c:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1036985:	e8 56 44 ff ff 	call	-48042 <_runtime.printstring>
 103698a:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103698f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036993:	e8 88 42 ff ff 	call	-48504 <_runtime.printint>
 1036998:	e8 93 3d ff ff 	call	-49773 <_runtime.printnl>
 103699d:	e8 7e 3b ff ff 	call	-50306 <_runtime.printunlock>
 10369a2:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 10369aa:	48 8b 80 50 01 00 00 	mov	rax, qword ptr [rax + 336]
 10369b1:	48 85 c0 	test	rax, rax
 10369b4:	74 5e 	je	94 <_runtime.schedtrace+0x7e4>
 10369b6:	48 8b 88 d0 00 00 00 	mov	rcx, qword ptr [rax + 208]
 10369bd:	48 8b 90 c0 00 00 00 	mov	rdx, qword ptr [rax + 192]
 10369c4:	48 8b 98 68 01 00 00 	mov	rbx, qword ptr [rax + 360]
 10369cb:	48 85 c9 	test	rcx, rcx
 10369ce:	74 3d 	je	61 <_runtime.schedtrace+0x7dd>
 10369d0:	8b 09 	mov	ecx, dword ptr [rcx]
 10369d2:	48 85 d2 	test	rdx, rdx
 10369d5:	74 2d 	je	45 <_runtime.schedtrace+0x7d4>
 10369d7:	48 8b 92 98 00 00 00 	mov	rdx, qword ptr [rdx + 152]
 10369de:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 10369e3:	89 4c 24 20 	mov	dword ptr [rsp + 32], ecx
 10369e7:	48 85 db 	test	rbx, rbx
 10369ea:	74 0c 	je	12 <_runtime.schedtrace+0x7c8>
 10369ec:	48 8b 9b 98 00 00 00 	mov	rbx, qword ptr [rbx + 152]
 10369f3:	e9 45 fd ff ff 	jmp	-699 <_runtime.schedtrace+0x50d>
 10369f8:	48 c7 c3 ff ff ff ff 	mov	rbx, -1
 10369ff:	e9 39 fd ff ff 	jmp	-711 <_runtime.schedtrace+0x50d>
 1036a04:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 1036a0b:	eb d1 	jmp	-47 <_runtime.schedtrace+0x7ae>
 1036a0d:	b9 ff ff ff ff 	mov	ecx, 4294967295
 1036a12:	eb be 	jmp	-66 <_runtime.schedtrace+0x7a2>
 1036a14:	48 8d 05 cd 0d 0c 00 	lea	rax, [rip + 789965]
 1036a1b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036a1f:	e8 0c 17 fd ff 	call	-190708 <_runtime.lock>
 1036a24:	31 c0 	xor	eax, eax
 1036a26:	e9 07 01 00 00 	jmp	263 <_runtime.schedtrace+0x902>
 1036a2b:	48 89 bc 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rdi
 1036a33:	4c 89 44 24 28 	mov	qword ptr [rsp + 40], r8
 1036a38:	48 8b 81 98 00 00 00 	mov	rax, qword ptr [rcx + 152]
 1036a3f:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1036a47:	e8 54 3a ff ff 	call	-50604 <_runtime.printlock>
 1036a4c:	48 8d 05 37 c2 03 00 	lea	rax, [rip + 246327]
 1036a53:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036a57:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1036a60:	e8 7b 43 ff ff 	call	-48261 <_runtime.printstring>
 1036a65:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1036a6d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036a71:	e8 aa 41 ff ff 	call	-48726 <_runtime.printint>
 1036a76:	48 8d 05 af c6 03 00 	lea	rax, [rip + 247471]
 1036a7d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036a81:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1036a8a:	e8 51 43 ff ff 	call	-48303 <_runtime.printstring>
 1036a8f:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1036a93:	89 c0 	mov	eax, eax
 1036a95:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036a99:	e8 82 40 ff ff 	call	-49022 <_runtime.printuint>
 1036a9e:	48 8d 05 b4 c1 03 00 	lea	rax, [rip + 246196]
 1036aa5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036aa9:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1036ab2:	e8 29 43 ff ff 	call	-48343 <_runtime.printstring>
 1036ab7:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1036abf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036ac3:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1036ac8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1036acd:	e8 0e 43 ff ff 	call	-48370 <_runtime.printstring>
 1036ad2:	48 8d 05 1e c2 03 00 	lea	rax, [rip + 246302]
 1036ad9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036add:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1036ae6:	e8 f5 42 ff ff 	call	-48395 <_runtime.printstring>
 1036aeb:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1036af0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036af4:	e8 27 41 ff ff 	call	-48857 <_runtime.printint>
 1036af9:	48 8d 05 a5 c5 03 00 	lea	rax, [rip + 247205]
 1036b00:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036b04:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1036b0d:	e8 ce 42 ff ff 	call	-48434 <_runtime.printstring>
 1036b12:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1036b17:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036b1b:	e8 00 41 ff ff 	call	-48896 <_runtime.printint>
 1036b20:	e8 0b 3c ff ff 	call	-50165 <_runtime.printnl>
 1036b25:	e8 f6 39 ff ff 	call	-50698 <_runtime.printunlock>
 1036b2a:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1036b2f:	48 ff c0 	inc	rax
 1036b32:	48 8b 0d e7 77 09 00 	mov	rcx, qword ptr [rip + 620519]
 1036b39:	48 39 05 e8 77 09 00 	cmp	qword ptr [rip + 620520], rax
 1036b40:	0f 8e 92 00 00 00 	jle	146 <_runtime.schedtrace+0x9a8>
 1036b46:	48 8b 0c c1 	mov	rcx, qword ptr [rcx + 8*rax]
 1036b4a:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 1036b4e:	48 8b 99 d8 00 00 00 	mov	rbx, qword ptr [rcx + 216]
 1036b55:	48 85 d2 	test	rdx, rdx
 1036b58:	74 75 	je	117 <_runtime.schedtrace+0x99f>
 1036b5a:	48 8b 92 e8 00 00 00 	mov	rdx, qword ptr [rdx + 232]
 1036b61:	48 85 db 	test	rbx, rbx
 1036b64:	74 60 	je	96 <_runtime.schedtrace+0x996>
 1036b66:	48 8b 9b e8 00 00 00 	mov	rbx, qword ptr [rbx + 232]
 1036b6d:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1036b72:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 1036b77:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 1036b7c:	8b b1 90 00 00 00 	mov	esi, dword ptr [rcx + 144]
 1036b82:	89 74 24 18 	mov	dword ptr [rsp + 24], esi
 1036b86:	0f b6 b9 b0 00 00 00 	movzx	edi, byte ptr [rcx + 176]
 1036b8d:	40 84 ff 	test	dil, dil
 1036b90:	73 12 	jae	18 <_runtime.schedtrace+0x974>
 1036b92:	48 8d 3d 5c d5 03 00 	lea	rdi, [rip + 251228]
 1036b99:	41 b8 13 00 00 00 	mov	r8d, 19
 1036b9f:	e9 87 fe ff ff 	jmp	-377 <_runtime.schedtrace+0x7fb>
 1036ba4:	40 80 ff 1a 	cmp	dil, 26
 1036ba8:	73 e8 	jae	-24 <_runtime.schedtrace+0x962>
 1036baa:	48 c1 e7 04 	shl	rdi, 4
 1036bae:	4c 8d 0d 8b 5f 09 00 	lea	r9, [rip + 614283]
 1036bb5:	4d 8b 14 39 	mov	r10, qword ptr [r9 + rdi]
 1036bb9:	4d 8b 44 39 08 	mov	r8, qword ptr [r9 + rdi + 8]
 1036bbe:	4c 89 d7 	mov	rdi, r10
 1036bc1:	e9 65 fe ff ff 	jmp	-411 <_runtime.schedtrace+0x7fb>
 1036bc6:	48 c7 c3 ff ff ff ff 	mov	rbx, -1
 1036bcd:	eb 9e 	jmp	-98 <_runtime.schedtrace+0x93d>
 1036bcf:	48 c7 c2 ff ff ff ff 	mov	rdx, -1
 1036bd6:	eb 89 	jmp	-119 <_runtime.schedtrace+0x931>
 1036bd8:	48 8d 05 09 0c 0c 00 	lea	rax, [rip + 789513]
 1036bdf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036be3:	e8 28 17 fd ff 	call	-190680 <_runtime.unlock>
 1036be8:	48 8d 05 89 7a 09 00 	lea	rax, [rip + 621193]
 1036bef:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036bf3:	e8 18 17 fd ff 	call	-190696 <_runtime.unlock>
 1036bf8:	48 8b ac 24 e0 00 00 00 	mov	rbp, qword ptr [rsp + 224]
 1036c00:	48 81 c4 e8 00 00 00 	add	rsp, 232
 1036c07:	c3 	ret
 1036c08:	48 8d 05 69 7a 09 00 	lea	rax, [rip + 621161]
 1036c0f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036c13:	e8 f8 16 fd ff 	call	-190728 <_runtime.unlock>
 1036c18:	48 8b ac 24 e0 00 00 00 	mov	rbp, qword ptr [rsp + 224]
 1036c20:	48 81 c4 e8 00 00 00 	add	rsp, 232
 1036c27:	c3 	ret
 1036c28:	8b 05 32 7b 09 00 	mov	eax, dword ptr [rip + 621362]
 1036c2e:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 1036c36:	48 63 0d 4f 7a 09 00 	movsxd	rcx, dword ptr [rip + 621135]
 1036c3d:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 1036c45:	48 63 15 18 7b 09 00 	movsxd	rdx, dword ptr [rip + 621336]
 1036c4c:	48 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdx
 1036c54:	8b 1d 16 7b 09 00 	mov	ebx, dword ptr [rip + 621334]
 1036c5a:	48 89 9c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbx
 1036c62:	e8 39 38 ff ff 	call	-51143 <_runtime.printlock>
 1036c67:	48 8d 05 92 c6 03 00 	lea	rax, [rip + 247442]
 1036c6e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036c72:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1036c7b:	e8 60 41 ff ff 	call	-48800 <_runtime.printstring>
 1036c80:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1036c88:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036c8c:	e8 8f 3e ff ff 	call	-49521 <_runtime.printuint>
 1036c91:	48 8d 05 4a cb 03 00 	lea	rax, [rip + 248650]
 1036c98:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036c9c:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 1036ca5:	e8 36 41 ff ff 	call	-48842 <_runtime.printstring>
 1036caa:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1036cb2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036cb6:	e8 65 3f ff ff 	call	-49307 <_runtime.printint>
 1036cbb:	48 8d 05 4b c5 03 00 	lea	rax, [rip + 247115]
 1036cc2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036cc6:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1036ccf:	e8 0c 41 ff ff 	call	-48884 <_runtime.printstring>
 1036cd4:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1036cdc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036ce0:	e8 3b 3f ff ff 	call	-49349 <_runtime.printint>
 1036ce5:	48 8d 05 33 c8 03 00 	lea	rax, [rip + 247859]
 1036cec:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036cf0:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1036cf9:	e8 e2 40 ff ff 	call	-48926 <_runtime.printstring>
 1036cfe:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1036d06:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036d0a:	e8 11 3e ff ff 	call	-49647 <_runtime.printuint>
 1036d0f:	e8 1c 3a ff ff 	call	-50660 <_runtime.printnl>
 1036d14:	e8 07 38 ff ff 	call	-51193 <_runtime.printunlock>
 1036d19:	0f b6 84 24 f0 00 00 00 	movzx	eax, byte ptr [rsp + 240]
 1036d21:	e9 2d f7 ff ff 	jmp	-2259 <_runtime.schedtrace+0x223>
 1036d26:	e8 a5 9e 01 00 	call	106149 <_runtime.morestack_noctxt>
 1036d2b:	e9 00 f5 ff ff 	jmp	-2816 <_runtime.schedtrace>

_runtime.schedEnableUser:
 1036d30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1036d39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1036d3d:	0f 86 25 01 00 00 	jbe	293 <_runtime.schedEnableUser+0x138>
 1036d43:	48 83 ec 20 	sub	rsp, 32
 1036d47:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1036d4c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1036d51:	48 8d 05 20 79 09 00 	lea	rax, [rip + 620832]
 1036d58:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036d5c:	e8 cf 13 fd ff 	call	-191537 <_runtime.lock>
 1036d61:	0f b6 44 24 28 	movzx	eax, byte ptr [rsp + 40]
 1036d66:	89 c1 	mov	ecx, eax
 1036d68:	83 f0 01 	xor	eax, 1
 1036d6b:	38 05 67 79 09 00 	cmp	byte ptr [rip + 620903], al
 1036d71:	0f 84 d7 00 00 00 	je	215 <_runtime.schedEnableUser+0x11e>
 1036d77:	88 05 5b 79 09 00 	mov	byte ptr [rip + 620891], al
 1036d7d:	84 c9 	test	cl, cl
 1036d7f:	0f 84 b7 00 00 00 	je	183 <_runtime.schedEnableUser+0x10c>
 1036d85:	8b 05 65 79 09 00 	mov	eax, dword ptr [rip + 620901]
 1036d8b:	c7 05 5b 79 09 00 00 00 00 00 	mov	dword ptr [rip + 620891], 0
 1036d95:	90 	nop
 1036d96:	48 8b 0d 43 79 09 00 	mov	rcx, qword ptr [rip + 620867]
 1036d9d:	48 8b 15 44 79 09 00 	mov	rdx, qword ptr [rip + 620868]
 1036da4:	48 85 d2 	test	rdx, rdx
 1036da7:	75 5d 	jne	93 <_runtime.schedEnableUser+0xd6>
 1036da9:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 1036dad:	01 05 1d 79 09 00 	add	dword ptr [rip + 620829], eax
 1036db3:	0f 57 c0 	xorps	xmm0, xmm0
 1036db6:	0f 11 05 23 79 09 00 	movups	xmmword ptr [rip + 620835], xmm0
 1036dbd:	48 8d 0d b4 78 09 00 	lea	rcx, [rip + 620724]
 1036dc4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1036dc8:	e8 43 15 fd ff 	call	-191165 <_runtime.unlock>
 1036dcd:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1036dd1:	eb 1c 	jmp	28 <_runtime.schedEnableUser+0xbf>
 1036dd3:	89 44 24 14 	mov	dword ptr [rsp + 20], eax
 1036dd7:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1036ddf:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 1036de4:	e8 a7 82 ff ff 	call	-32089 <_runtime.startm>
 1036de9:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 1036ded:	ff c8 	dec	eax
 1036def:	85 c0 	test	eax, eax
 1036df1:	74 09 	je	9 <_runtime.schedEnableUser+0xcc>
 1036df3:	83 3d be 78 09 00 00 	cmp	dword ptr [rip + 620734], 0
 1036dfa:	75 d7 	jne	-41 <_runtime.schedEnableUser+0xa3>
 1036dfc:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1036e01:	48 83 c4 20 	add	rsp, 32
 1036e05:	c3 	ret
 1036e06:	48 89 d3 	mov	rbx, rdx
 1036e09:	48 c7 82 a0 00 00 00 00 00 00 00 	mov	qword ptr [rdx + 160], 0
 1036e14:	48 8b 15 ad 78 09 00 	mov	rdx, qword ptr [rip + 620717]
 1036e1b:	48 85 d2 	test	rdx, rdx
 1036e1e:	74 13 	je	19 <_runtime.schedEnableUser+0x103>
 1036e20:	48 89 8a a0 00 00 00 	mov	qword ptr [rdx + 160], rcx
 1036e27:	48 89 1d 9a 78 09 00 	mov	qword ptr [rip + 620698], rbx
 1036e2e:	e9 76 ff ff ff 	jmp	-138 <_runtime.schedEnableUser+0x79>
 1036e33:	48 89 0d 86 78 09 00 	mov	qword ptr [rip + 620678], rcx
 1036e3a:	eb eb 	jmp	-21 <_runtime.schedEnableUser+0xf7>
 1036e3c:	48 8d 05 35 78 09 00 	lea	rax, [rip + 620597]
 1036e43:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036e47:	e8 c4 14 fd ff 	call	-191292 <_runtime.unlock>
 1036e4c:	eb ae 	jmp	-82 <_runtime.schedEnableUser+0xcc>
 1036e4e:	48 8d 05 23 78 09 00 	lea	rax, [rip + 620579]
 1036e55:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036e59:	e8 b2 14 fd ff 	call	-191310 <_runtime.unlock>
 1036e5e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1036e63:	48 83 c4 20 	add	rsp, 32
 1036e67:	c3 	ret
 1036e68:	e8 63 9d 01 00 	call	105827 <_runtime.morestack_noctxt>
 1036e6d:	e9 be fe ff ff 	jmp	-322 <_runtime.schedEnableUser>
 1036e72:	cc 	int3
 1036e73:	cc 	int3
 1036e74:	cc 	int3
 1036e75:	cc 	int3
 1036e76:	cc 	int3
 1036e77:	cc 	int3
 1036e78:	cc 	int3
 1036e79:	cc 	int3
 1036e7a:	cc 	int3
 1036e7b:	cc 	int3
 1036e7c:	cc 	int3
 1036e7d:	cc 	int3
 1036e7e:	cc 	int3
 1036e7f:	cc 	int3

_runtime.schedEnabled:
 1036e80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1036e89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1036e8d:	76 4c 	jbe	76 <_runtime.schedEnabled+0x5b>
 1036e8f:	48 83 ec 20 	sub	rsp, 32
 1036e93:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1036e98:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1036e9d:	80 3d 34 78 09 00 00 	cmp	byte ptr [rip + 620596], 0
 1036ea4:	74 26 	je	38 <_runtime.schedEnabled+0x4c>
 1036ea6:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1036eab:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036eaf:	c6 44 24 08 01 	mov	byte ptr [rsp + 8], 1
 1036eb4:	e8 07 3c 01 00 	call	80903 <_runtime.isSystemGoroutine>
 1036eb9:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 1036ebe:	88 44 24 30 	mov	byte ptr [rsp + 48], al
 1036ec2:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1036ec7:	48 83 c4 20 	add	rsp, 32
 1036ecb:	c3 	ret
 1036ecc:	c6 44 24 30 01 	mov	byte ptr [rsp + 48], 1
 1036ed1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1036ed6:	48 83 c4 20 	add	rsp, 32
 1036eda:	c3 	ret
 1036edb:	e8 f0 9c 01 00 	call	105712 <_runtime.morestack_noctxt>
 1036ee0:	eb 9e 	jmp	-98 <_runtime.schedEnabled>
 1036ee2:	cc 	int3
 1036ee3:	cc 	int3
 1036ee4:	cc 	int3
 1036ee5:	cc 	int3
 1036ee6:	cc 	int3
 1036ee7:	cc 	int3
 1036ee8:	cc 	int3
 1036ee9:	cc 	int3
 1036eea:	cc 	int3
 1036eeb:	cc 	int3
 1036eec:	cc 	int3
 1036eed:	cc 	int3
 1036eee:	cc 	int3
 1036eef:	cc 	int3

_runtime.globrunqget:
 1036ef0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1036ef9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1036efd:	0f 86 2b 01 00 00 	jbe	299 <_runtime.globrunqget+0x13e>
 1036f03:	48 83 ec 30 	sub	rsp, 48
 1036f07:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1036f0c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1036f11:	8b 05 b9 77 09 00 	mov	eax, dword ptr [rip + 620473]
 1036f17:	85 c0 	test	eax, eax
 1036f19:	0f 84 f6 00 00 00 	je	246 <_runtime.globrunqget+0x125>
 1036f1f:	8b 0d 7b 08 0c 00 	mov	ecx, dword ptr [rip + 788603]
 1036f25:	85 c9 	test	ecx, ecx
 1036f27:	0f 84 fb 00 00 00 	je	251 <_runtime.globrunqget+0x138>
 1036f2d:	89 c2 	mov	edx, eax
 1036f2f:	89 d3 	mov	ebx, edx
 1036f31:	83 f9 ff 	cmp	ecx, -1
 1036f34:	74 05 	je	5 <_runtime.globrunqget+0x4b>
 1036f36:	99 	cdq
 1036f37:	f7 f9 	idiv	ecx
 1036f39:	eb 04 	jmp	4 <_runtime.globrunqget+0x4f>
 1036f3b:	f7 d8 	neg	eax
 1036f3d:	31 d2 	xor	edx, edx
 1036f3f:	8d 48 01 	lea	ecx, [rax + 1]
 1036f42:	39 d9 	cmp	ecx, ebx
 1036f44:	0f 4f cb 	cmovg	ecx, ebx
 1036f47:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1036f4b:	85 d2 	test	edx, edx
 1036f4d:	0f 8e bb 00 00 00 	jle	187 <_runtime.globrunqget+0x11e>
 1036f53:	39 d1 	cmp	ecx, edx
 1036f55:	0f 8e b3 00 00 00 	jle	179 <_runtime.globrunqget+0x11e>
 1036f5b:	81 fa 80 00 00 00 	cmp	edx, 128
 1036f61:	b8 80 00 00 00 	mov	eax, 128
 1036f66:	0f 4f d0 	cmovg	edx, eax
 1036f69:	29 d3 	sub	ebx, edx
 1036f6b:	89 1d 5f 77 09 00 	mov	dword ptr [rip + 620383], ebx
 1036f71:	90 	nop
 1036f72:	48 8b 05 47 77 09 00 	mov	rax, qword ptr [rip + 620359]
 1036f79:	48 85 c0 	test	rax, rax
 1036f7c:	74 1e 	je	30 <_runtime.globrunqget+0xac>
 1036f7e:	48 8b 88 a0 00 00 00 	mov	rcx, qword ptr [rax + 160]
 1036f85:	48 89 0d 34 77 09 00 	mov	qword ptr [rip + 620340], rcx
 1036f8c:	48 85 c9 	test	rcx, rcx
 1036f8f:	75 0b 	jne	11 <_runtime.globrunqget+0xac>
 1036f91:	48 c7 05 2c 77 09 00 00 00 00 00 	mov	qword ptr [rip + 620332], 0
 1036f9c:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1036fa1:	8d 4a ff 	lea	ecx, [rdx - 1]
 1036fa4:	eb 24 	jmp	36 <_runtime.globrunqget+0xda>
 1036fa6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1036fab:	48 89 04 24 	mov	qword ptr [rsp], rax
 1036faf:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1036fb4:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1036fb9:	e8 52 01 00 00 	call	338 <_runtime.runqput>
 1036fbe:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1036fc2:	8d 48 ff 	lea	ecx, [rax - 1]
 1036fc5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1036fca:	85 c9 	test	ecx, ecx
 1036fcc:	7e 31 	jle	49 <_runtime.globrunqget+0x10f>
 1036fce:	89 4c 24 1c 	mov	dword ptr [rsp + 28], ecx
 1036fd2:	90 	nop
 1036fd3:	48 8b 15 e6 76 09 00 	mov	rdx, qword ptr [rip + 620262]
 1036fda:	48 85 d2 	test	rdx, rdx
 1036fdd:	74 c7 	je	-57 <_runtime.globrunqget+0xb6>
 1036fdf:	48 8b 9a a0 00 00 00 	mov	rbx, qword ptr [rdx + 160]
 1036fe6:	48 89 1d d3 76 09 00 	mov	qword ptr [rip + 620243], rbx
 1036fed:	48 85 db 	test	rbx, rbx
 1036ff0:	75 b4 	jne	-76 <_runtime.globrunqget+0xb6>
 1036ff2:	48 c7 05 cb 76 09 00 00 00 00 00 	mov	qword ptr [rip + 620235], 0
 1036ffd:	eb a7 	jmp	-89 <_runtime.globrunqget+0xb6>
 1036fff:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1037004:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1037009:	48 83 c4 30 	add	rsp, 48
 103700d:	c3 	ret
 103700e:	89 ca 	mov	edx, ecx
 1037010:	e9 46 ff ff ff 	jmp	-186 <_runtime.globrunqget+0x6b>
 1037015:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 103701e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1037023:	48 83 c4 30 	add	rsp, 48
 1037027:	c3 	ret
 1037028:	e8 13 03 ff ff 	call	-64749 <_runtime.panicdivide>
 103702d:	90 	nop
 103702e:	e8 9d 9b 01 00 	call	105373 <_runtime.morestack_noctxt>
 1037033:	e9 b8 fe ff ff 	jmp	-328 <_runtime.globrunqget>
 1037038:	cc 	int3
 1037039:	cc 	int3
 103703a:	cc 	int3
 103703b:	cc 	int3
 103703c:	cc 	int3
 103703d:	cc 	int3
 103703e:	cc 	int3
 103703f:	cc 	int3

_runtime.pidleput:
 1037040:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037049:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103704d:	76 6f 	jbe	111 <_runtime.pidleput+0x7e>
 103704f:	48 83 ec 18 	sub	rsp, 24
 1037053:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1037058:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103705d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1037062:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037066:	e8 65 00 00 00 	call	101 <_runtime.runqempty>
 103706b:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 1037070:	74 32 	je	50 <_runtime.pidleput+0x64>
 1037072:	48 8b 05 37 76 09 00 	mov	rax, qword ptr [rip + 620087]
 1037079:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103707e:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 1037082:	90 	nop
 1037083:	48 89 0d 26 76 09 00 	mov	qword ptr [rip + 620070], rcx
 103708a:	b8 01 00 00 00 	mov	eax, 1
 103708f:	48 8d 0d 22 76 09 00 	lea	rcx, [rip + 620066]
 1037096:	f0 	lock
 1037097:	0f c1 01 	xadd	dword ptr [rcx], eax
 103709a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 103709f:	48 83 c4 18 	add	rsp, 24
 10370a3:	c3 	ret
 10370a4:	48 8d 05 8d f1 03 00 	lea	rax, [rip + 258445]
 10370ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10370af:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 10370b8:	e8 a3 1c ff ff 	call	-58205 <_runtime.throw>
 10370bd:	90 	nop
 10370be:	e8 0d 9b 01 00 	call	105229 <_runtime.morestack_noctxt>
 10370c3:	e9 78 ff ff ff 	jmp	-136 <_runtime.pidleput>
 10370c8:	cc 	int3
 10370c9:	cc 	int3
 10370ca:	cc 	int3
 10370cb:	cc 	int3
 10370cc:	cc 	int3
 10370cd:	cc 	int3
 10370ce:	cc 	int3
 10370cf:	cc 	int3

_runtime.runqempty:
 10370d0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10370d5:	8b 88 f0 05 00 00 	mov	ecx, dword ptr [rax + 1520]
 10370db:	8b 90 f4 05 00 00 	mov	edx, dword ptr [rax + 1524]
 10370e1:	48 8b 98 f8 0d 00 00 	mov	rbx, qword ptr [rax + 3576]
 10370e8:	8b b0 f4 05 00 00 	mov	esi, dword ptr [rax + 1524]
 10370ee:	39 d6 	cmp	esi, edx
 10370f0:	75 e3 	jne	-29 <_runtime.runqempty+0x5>
 10370f2:	39 ca 	cmp	edx, ecx
 10370f4:	75 0b 	jne	11 <_runtime.runqempty+0x31>
 10370f6:	48 85 db 	test	rbx, rbx
 10370f9:	0f 94 c0 	sete	al
 10370fc:	88 44 24 10 	mov	byte ptr [rsp + 16], al
 1037100:	c3 	ret
 1037101:	31 c0 	xor	eax, eax
 1037103:	eb f7 	jmp	-9 <_runtime.runqempty+0x2c>
 1037105:	cc 	int3
 1037106:	cc 	int3
 1037107:	cc 	int3
 1037108:	cc 	int3
 1037109:	cc 	int3
 103710a:	cc 	int3
 103710b:	cc 	int3
 103710c:	cc 	int3
 103710d:	cc 	int3
 103710e:	cc 	int3
 103710f:	cc 	int3

_runtime.runqput:
 1037110:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037119:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103711d:	0f 86 dc 00 00 00 	jbe	220 <_runtime.runqput+0xef>
 1037123:	48 83 ec 38 	sub	rsp, 56
 1037127:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 103712c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1037131:	0f b6 4c 24 50 	movzx	ecx, byte ptr [rsp + 80]
 1037136:	84 c9 	test	cl, cl
 1037138:	0f 84 b2 00 00 00 	je	178 <_runtime.runqput+0xe0>
 103713e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1037143:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1037148:	eb 03 	jmp	3 <_runtime.runqput+0x3d>
 103714a:	48 89 da 	mov	rdx, rbx
 103714d:	48 8b 81 f8 0d 00 00 	mov	rax, qword ptr [rcx + 3576]
 1037154:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1037159:	48 89 d3 	mov	rbx, rdx
 103715c:	f0 	lock
 103715d:	48 0f b1 91 f8 0d 00 00 	cmpxchg	qword ptr [rcx + 3576], rdx
 1037165:	0f 94 c2 	sete	dl
 1037168:	84 d2 	test	dl, dl
 103716a:	74 de 	je	-34 <_runtime.runqput+0x3a>
 103716c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1037171:	48 85 c0 	test	rax, rax
 1037174:	74 70 	je	112 <_runtime.runqput+0xd6>
 1037176:	90 	nop
 1037177:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 103717c:	eb 0a 	jmp	10 <_runtime.runqput+0x78>
 103717e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1037183:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1037188:	8b 91 f0 05 00 00 	mov	edx, dword ptr [rcx + 1520]
 103718e:	8b 99 f4 05 00 00 	mov	ebx, dword ptr [rcx + 1524]
 1037194:	89 de 	mov	esi, ebx
 1037196:	29 d3 	sub	ebx, edx
 1037198:	81 fb 00 01 00 00 	cmp	ebx, 256
 103719e:	72 27 	jb	39 <_runtime.runqput+0xb7>
 10371a0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10371a4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10371a9:	89 54 24 10 	mov	dword ptr [rsp + 16], edx
 10371ad:	89 74 24 14 	mov	dword ptr [rsp + 20], esi
 10371b1:	e8 5a 00 00 00 	call	90 <_runtime.runqputslow>
 10371b6:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10371bb:	74 c1 	je	-63 <_runtime.runqput+0x6e>
 10371bd:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10371c2:	48 83 c4 38 	add	rsp, 56
 10371c6:	c3 	ret
 10371c7:	40 0f b6 d6 	movzx	edx, sil
 10371cb:	48 89 84 d1 f8 05 00 00 	mov	qword ptr [rcx + 8*rdx + 1528], rax
 10371d3:	8d 46 01 	lea	eax, [rsi + 1]
 10371d6:	87 81 f4 05 00 00 	xchg	dword ptr [rcx + 1524], eax
 10371dc:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10371e1:	48 83 c4 38 	add	rsp, 56
 10371e5:	c3 	ret
 10371e6:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10371eb:	48 83 c4 38 	add	rsp, 56
 10371ef:	c3 	ret
 10371f0:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10371f5:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10371fa:	e9 78 ff ff ff 	jmp	-136 <_runtime.runqput+0x67>
 10371ff:	e8 cc 99 01 00 	call	104908 <_runtime.morestack_noctxt>
 1037204:	e9 07 ff ff ff 	jmp	-249 <_runtime.runqput>
 1037209:	cc 	int3
 103720a:	cc 	int3
 103720b:	cc 	int3
 103720c:	cc 	int3
 103720d:	cc 	int3
 103720e:	cc 	int3
 103720f:	cc 	int3

_runtime.runqputslow:
 1037210:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037219:	48 8d 84 24 48 fc ff ff 	lea	rax, [rsp - 952]
 1037221:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1037225:	0f 86 cd 01 00 00 	jbe	461 <_runtime.runqputslow+0x1e8>
 103722b:	48 81 ec 38 04 00 00 	sub	rsp, 1080
 1037232:	48 89 ac 24 30 04 00 00 	mov	qword ptr [rsp + 1072], rbp
 103723a:	48 8d ac 24 30 04 00 00 	lea	rbp, [rsp + 1072]
 1037242:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 103724b:	48 8d 7c 24 30 	lea	rdi, [rsp + 48]
 1037250:	0f 57 c0 	xorps	xmm0, xmm0
 1037253:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1037258:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 103725d:	e8 8e c1 01 00 	call	115086 <_runtime.duffzero>
 1037262:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1037266:	8b 94 24 54 04 00 00 	mov	edx, dword ptr [rsp + 1108]
 103726d:	8b 84 24 50 04 00 00 	mov	eax, dword ptr [rsp + 1104]
 1037274:	29 c2 	sub	edx, eax
 1037276:	d1 ea 	shr	edx
 1037278:	81 fa 80 00 00 00 	cmp	edx, 128
 103727e:	0f 85 5a 01 00 00 	jne	346 <_runtime.runqputslow+0x1ce>
 1037284:	48 8b 9c 24 40 04 00 00 	mov	rbx, qword ptr [rsp + 1088]
 103728c:	31 c9 	xor	ecx, ecx
 103728e:	eb 1f 	jmp	31 <_runtime.runqputslow+0x9f>
 1037290:	84 03 	test	byte ptr [rbx], al
 1037292:	89 ce 	mov	esi, ecx
 1037294:	48 c1 e1 03 	shl	rcx, 3
 1037298:	8d 3c 06 	lea	edi, [rsi + rax]
 103729b:	40 0f b6 ff 	movzx	edi, dil
 103729f:	48 8b bc fb f8 05 00 00 	mov	rdi, qword ptr [rbx + 8*rdi + 1528]
 10372a7:	48 89 7c 0c 28 	mov	qword ptr [rsp + rcx + 40], rdi
 10372ac:	8d 4e 01 	lea	ecx, [rsi + 1]
 10372af:	39 d1 	cmp	ecx, edx
 10372b1:	72 dd 	jb	-35 <_runtime.runqputslow+0x80>
 10372b3:	8d 34 02 	lea	esi, [rdx + rax]
 10372b6:	f0 	lock
 10372b7:	0f b1 b3 f0 05 00 00 	cmpxchg	dword ptr [rbx + 1520], esi
 10372be:	0f 94 c3 	sete	bl
 10372c1:	84 db 	test	bl, bl
 10372c3:	0f 84 f3 00 00 00 	je	243 <_runtime.runqputslow+0x1ac>
 10372c9:	89 d3 	mov	ebx, edx
 10372cb:	48 c1 e2 03 	shl	rdx, 3
 10372cf:	48 8b b4 24 48 04 00 00 	mov	rsi, qword ptr [rsp + 1096]
 10372d7:	48 89 74 14 28 	mov	qword ptr [rsp + rdx + 40], rsi
 10372dc:	31 c0 	xor	eax, eax
 10372de:	eb 0c 	jmp	12 <_runtime.runqputslow+0xdc>
 10372e0:	48 8b 74 c4 28 	mov	rsi, qword ptr [rsp + 8*rax + 40]
 10372e5:	48 89 b2 a0 00 00 00 	mov	qword ptr [rdx + 160], rsi
 10372ec:	39 d8 	cmp	eax, ebx
 10372ee:	73 16 	jae	22 <_runtime.runqputslow+0xf6>
 10372f0:	48 8b 54 c4 28 	mov	rdx, qword ptr [rsp + 8*rax + 40]
 10372f5:	84 02 	test	byte ptr [rdx], al
 10372f7:	ff c0 	inc	eax
 10372f9:	48 3d 81 00 00 00 	cmp	rax, 129
 10372ff:	72 df 	jb	-33 <_runtime.runqputslow+0xd0>
 1037301:	e9 ce 00 00 00 	jmp	206 <_runtime.runqputslow+0x1c4>
 1037306:	89 5c 24 14 	mov	dword ptr [rsp + 20], ebx
 103730a:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 103730f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1037314:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1037319:	48 8b 44 dc 28 	mov	rax, qword ptr [rsp + 8*rbx + 40]
 103731e:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1037323:	48 8d 05 4e 73 09 00 	lea	rax, [rip + 619342]
 103732a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103732e:	e8 fd 0d fd ff 	call	-193027 <_runtime.lock>
 1037333:	90 	nop
 1037334:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1037339:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 103733e:	48 85 c0 	test	rax, rax
 1037341:	75 46 	jne	70 <_runtime.runqputslow+0x179>
 1037343:	8b 05 87 73 09 00 	mov	eax, dword ptr [rip + 619399]
 1037349:	8b 4c 24 14 	mov	ecx, dword ptr [rsp + 20]
 103734d:	8d 04 08 	lea	eax, [rax + rcx]
 1037350:	8d 40 01 	lea	eax, [rax + 1]
 1037353:	89 05 77 73 09 00 	mov	dword ptr [rip + 619383], eax
 1037359:	0f 57 c0 	xorps	xmm0, xmm0
 103735c:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1037361:	48 8d 05 10 73 09 00 	lea	rax, [rip + 619280]
 1037368:	48 89 04 24 	mov	qword ptr [rsp], rax
 103736c:	e8 9f 0f fd ff 	call	-192609 <_runtime.unlock>
 1037371:	c6 84 24 58 04 00 00 01 	mov	byte ptr [rsp + 1112], 1
 1037379:	48 8b ac 24 30 04 00 00 	mov	rbp, qword ptr [rsp + 1072]
 1037381:	48 81 c4 38 04 00 00 	add	rsp, 1080
 1037388:	c3 	ret
 1037389:	48 89 c2 	mov	rdx, rax
 103738c:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 1037397:	48 8b 05 2a 73 09 00 	mov	rax, qword ptr [rip + 619306]
 103739e:	48 85 c0 	test	rax, rax
 10373a1:	74 10 	je	16 <_runtime.runqputslow+0x1a3>
 10373a3:	48 89 88 a0 00 00 00 	mov	qword ptr [rax + 160], rcx
 10373aa:	48 89 15 17 73 09 00 	mov	qword ptr [rip + 619287], rdx
 10373b1:	eb 90 	jmp	-112 <_runtime.runqputslow+0x133>
 10373b3:	48 89 0d 06 73 09 00 	mov	qword ptr [rip + 619270], rcx
 10373ba:	eb ee 	jmp	-18 <_runtime.runqputslow+0x19a>
 10373bc:	c6 84 24 58 04 00 00 00 	mov	byte ptr [rsp + 1112], 0
 10373c4:	48 8b ac 24 30 04 00 00 	mov	rbp, qword ptr [rsp + 1072]
 10373cc:	48 81 c4 38 04 00 00 	add	rsp, 1080
 10373d3:	c3 	ret
 10373d4:	b9 81 00 00 00 	mov	ecx, 129
 10373d9:	e8 72 bf 01 00 	call	114546 <_runtime.panicIndex>
 10373de:	48 8d 05 92 e4 03 00 	lea	rax, [rip + 255122]
 10373e5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10373e9:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 10373f2:	e8 69 19 ff ff 	call	-59031 <_runtime.throw>
 10373f7:	90 	nop
 10373f8:	e8 d3 97 01 00 	call	104403 <_runtime.morestack_noctxt>
 10373fd:	e9 0e fe ff ff 	jmp	-498 <_runtime.runqputslow>
 1037402:	cc 	int3
 1037403:	cc 	int3
 1037404:	cc 	int3
 1037405:	cc 	int3
 1037406:	cc 	int3
 1037407:	cc 	int3
 1037408:	cc 	int3
 1037409:	cc 	int3
 103740a:	cc 	int3
 103740b:	cc 	int3
 103740c:	cc 	int3
 103740d:	cc 	int3
 103740e:	cc 	int3
 103740f:	cc 	int3

_runtime.runqget:
 1037410:	48 83 ec 10 	sub	rsp, 16
 1037414:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1037419:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 103741e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1037423:	48 8b 81 f8 0d 00 00 	mov	rax, qword ptr [rcx + 3576]
 103742a:	48 85 c0 	test	rax, rax
 103742d:	74 2e 	je	46 <_runtime.runqget+0x4d>
 103742f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037433:	31 d2 	xor	edx, edx
 1037435:	f0 	lock
 1037436:	48 0f b1 91 f8 0d 00 00 	cmpxchg	qword ptr [rcx + 3576], rdx
 103743e:	0f 94 c3 	sete	bl
 1037441:	84 db 	test	bl, bl
 1037443:	74 de 	je	-34 <_runtime.runqget+0x13>
 1037445:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1037449:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 103744e:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1037453:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1037458:	48 83 c4 10 	add	rsp, 16
 103745c:	c3 	ret
 103745d:	8b 91 f0 05 00 00 	mov	edx, dword ptr [rcx + 1520]
 1037463:	8b 99 f4 05 00 00 	mov	ebx, dword ptr [rcx + 1524]
 1037469:	39 d3 	cmp	ebx, edx
 103746b:	74 33 	je	51 <_runtime.runqget+0x90>
 103746d:	0f b6 da 	movzx	ebx, dl
 1037470:	48 8b 9c d9 f8 05 00 00 	mov	rbx, qword ptr [rcx + 8*rbx + 1528]
 1037478:	8d 72 01 	lea	esi, [rdx + 1]
 103747b:	89 d0 	mov	eax, edx
 103747d:	f0 	lock
 103747e:	0f b1 b1 f0 05 00 00 	cmpxchg	dword ptr [rcx + 1520], esi
 1037485:	0f 94 c2 	sete	dl
 1037488:	84 d2 	test	dl, dl
 103748a:	74 d1 	je	-47 <_runtime.runqget+0x4d>
 103748c:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1037491:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 1037496:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 103749b:	48 83 c4 10 	add	rsp, 16
 103749f:	c3 	ret
 10374a0:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 10374a9:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 10374ae:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10374b3:	48 83 c4 10 	add	rsp, 16
 10374b7:	c3 	ret
 10374b8:	cc 	int3
 10374b9:	cc 	int3
 10374ba:	cc 	int3
 10374bb:	cc 	int3
 10374bc:	cc 	int3
 10374bd:	cc 	int3
 10374be:	cc 	int3
 10374bf:	cc 	int3

_runtime.runqgrab:
 10374c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10374c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10374cd:	0f 86 32 01 00 00 	jbe	306 <_runtime.runqgrab+0x145>
 10374d3:	48 83 ec 18 	sub	rsp, 24
 10374d7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10374dc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10374e1:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10374e6:	8b 54 24 30 	mov	edx, dword ptr [rsp + 48]
 10374ea:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10374ef:	0f b6 74 24 34 	movzx	esi, byte ptr [rsp + 52]
 10374f4:	8b bb f0 05 00 00 	mov	edi, dword ptr [rbx + 1520]
 10374fa:	44 8b 83 f4 05 00 00 	mov	r8d, dword ptr [rbx + 1524]
 1037501:	41 29 f8 	sub	r8d, edi
 1037504:	45 89 c1 	mov	r9d, r8d
 1037507:	41 d1 e8 	shr	r8d
 103750a:	45 29 c1 	sub	r9d, r8d
 103750d:	45 85 c9 	test	r9d, r9d
 1037510:	0f 85 88 00 00 00 	jne	136 <_runtime.runqgrab+0xde>
 1037516:	40 84 f6 	test	sil, sil
 1037519:	74 71 	je	113 <_runtime.runqgrab+0xcc>
 103751b:	48 8b 83 f8 0d 00 00 	mov	rax, qword ptr [rbx + 3576]
 1037522:	48 85 c0 	test	rax, rax
 1037525:	74 65 	je	101 <_runtime.runqgrab+0xcc>
 1037527:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103752c:	83 7b 04 01 	cmp	dword ptr [rbx + 4], 1
 1037530:	74 34 	je	52 <_runtime.runqgrab+0xa6>
 1037532:	31 ff 	xor	edi, edi
 1037534:	f0 	lock
 1037535:	48 0f b1 bb f8 0d 00 00 	cmpxchg	qword ptr [rbx + 3576], rdi
 103753d:	41 0f 94 c0 	sete	r8b
 1037541:	45 84 c0 	test	r8b, r8b
 1037544:	74 ae 	je	-82 <_runtime.runqgrab+0x34>
 1037546:	84 01 	test	byte ptr [rcx], al
 1037548:	0f b6 c2 	movzx	eax, dl
 103754b:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1037550:	48 89 14 c1 	mov	qword ptr [rcx + 8*rax], rdx
 1037554:	c7 44 24 38 01 00 00 00 	mov	dword ptr [rsp + 56], 1
 103755c:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1037561:	48 83 c4 18 	add	rsp, 24
 1037565:	c3 	ret
 1037566:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 103756d:	e8 6e bc 00 00 	call	48238 <_runtime.usleep>
 1037572:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1037577:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103757c:	8b 54 24 30 	mov	edx, dword ptr [rsp + 48]
 1037580:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1037585:	0f b6 74 24 34 	movzx	esi, byte ptr [rsp + 52]
 103758a:	eb a6 	jmp	-90 <_runtime.runqgrab+0x72>
 103758c:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1037594:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1037599:	48 83 c4 18 	add	rsp, 24
 103759d:	c3 	ret
 103759e:	41 81 f9 80 00 00 00 	cmp	r9d, 128
 10375a5:	76 07 	jbe	7 <_runtime.runqgrab+0xee>
 10375a7:	31 ff 	xor	edi, edi
 10375a9:	e9 46 ff ff ff 	jmp	-186 <_runtime.runqgrab+0x34>
 10375ae:	31 c0 	xor	eax, eax
 10375b0:	eb 20 	jmp	32 <_runtime.runqgrab+0x112>
 10375b2:	84 01 	test	byte ptr [rcx], al
 10375b4:	44 8d 04 38 	lea	r8d, [rax + rdi]
 10375b8:	45 0f b6 c0 	movzx	r8d, r8b
 10375bc:	4e 8b 84 c3 f8 05 00 00 	mov	r8, qword ptr [rbx + 8*r8 + 1528]
 10375c4:	44 8d 14 10 	lea	r10d, [rax + rdx]
 10375c8:	45 0f b6 d2 	movzx	r10d, r10b
 10375cc:	4e 89 04 d1 	mov	qword ptr [rcx + 8*r10], r8
 10375d0:	ff c0 	inc	eax
 10375d2:	44 39 c8 	cmp	eax, r9d
 10375d5:	72 db 	jb	-37 <_runtime.runqgrab+0xf2>
 10375d7:	45 8d 04 39 	lea	r8d, [r9 + rdi]
 10375db:	89 f8 	mov	eax, edi
 10375dd:	f0 	lock
 10375de:	44 0f b1 83 f0 05 00 00 	cmpxchg	dword ptr [rbx + 1520], r8d
 10375e6:	40 0f 94 c7 	sete	dil
 10375ea:	40 84 ff 	test	dil, dil
 10375ed:	75 07 	jne	7 <_runtime.runqgrab+0x136>
 10375ef:	31 ff 	xor	edi, edi
 10375f1:	e9 fe fe ff ff 	jmp	-258 <_runtime.runqgrab+0x34>
 10375f6:	44 89 4c 24 38 	mov	dword ptr [rsp + 56], r9d
 10375fb:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1037600:	48 83 c4 18 	add	rsp, 24
 1037604:	c3 	ret
 1037605:	e8 c6 95 01 00 	call	103878 <_runtime.morestack_noctxt>
 103760a:	e9 b1 fe ff ff 	jmp	-335 <_runtime.runqgrab>
 103760f:	cc 	int3

_runtime.runqsteal:
 1037610:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037619:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103761d:	0f 86 d1 00 00 00 	jbe	209 <_runtime.runqsteal+0xe4>
 1037623:	48 83 ec 30 	sub	rsp, 48
 1037627:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 103762c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1037631:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1037636:	8b 88 f4 05 00 00 	mov	ecx, dword ptr [rax + 1524]
 103763c:	89 4c 24 24 	mov	dword ptr [rsp + 36], ecx
 1037640:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1037645:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1037649:	48 8d 90 f8 05 00 00 	lea	rdx, [rax + 1528]
 1037650:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1037655:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1037659:	0f b6 54 24 48 	movzx	edx, byte ptr [rsp + 72]
 103765e:	88 54 24 14 	mov	byte ptr [rsp + 20], dl
 1037662:	e8 59 fe ff ff 	call	-423 <_runtime.runqgrab>
 1037667:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 103766b:	85 c0 	test	eax, eax
 103766d:	74 58 	je	88 <_runtime.runqsteal+0xb7>
 103766f:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 1037673:	8d 14 08 	lea	edx, [rax + rcx]
 1037676:	8d 52 ff 	lea	edx, [rdx - 1]
 1037679:	0f b6 da 	movzx	ebx, dl
 103767c:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1037681:	48 8b 9c de f8 05 00 00 	mov	rbx, qword ptr [rsi + 8*rbx + 1528]
 1037689:	83 f8 01 	cmp	eax, 1
 103768c:	74 2a 	je	42 <_runtime.runqsteal+0xa8>
 103768e:	8b be f0 05 00 00 	mov	edi, dword ptr [rsi + 1520]
 1037694:	29 f9 	sub	ecx, edi
 1037696:	8d 04 01 	lea	eax, [rcx + rax]
 1037699:	8d 40 ff 	lea	eax, [rax - 1]
 103769c:	3d 00 01 00 00 	cmp	eax, 256
 10376a1:	73 37 	jae	55 <_runtime.runqsteal+0xca>
 10376a3:	87 96 f4 05 00 00 	xchg	dword ptr [rsi + 1524], edx
 10376a9:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 10376ae:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10376b3:	48 83 c4 30 	add	rsp, 48
 10376b7:	c3 	ret
 10376b8:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 10376bd:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10376c2:	48 83 c4 30 	add	rsp, 48
 10376c6:	c3 	ret
 10376c7:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 10376d0:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10376d5:	48 83 c4 30 	add	rsp, 48
 10376d9:	c3 	ret
 10376da:	48 8d 05 5c d4 03 00 	lea	rax, [rip + 250972]
 10376e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10376e5:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 10376ee:	e8 6d 16 ff ff 	call	-59795 <_runtime.throw>
 10376f3:	90 	nop
 10376f4:	e8 d7 94 01 00 	call	103639 <_runtime.morestack_noctxt>
 10376f9:	e9 12 ff ff ff 	jmp	-238 <_runtime.runqsteal>
 10376fe:	cc 	int3
 10376ff:	cc 	int3

_runtime.(*randomOrder).reset:
 1037700:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037709:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103770d:	0f 86 f7 00 00 00 	jbe	247 <_runtime.(*randomOrder).reset+0x10a>
 1037713:	48 83 ec 50 	sub	rsp, 80
 1037717:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 103771c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1037721:	8b 44 24 60 	mov	eax, dword ptr [rsp + 96]
 1037725:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 103772a:	89 01 	mov	dword ptr [rcx], eax
 103772c:	48 c7 41 10 00 00 00 00 	mov	qword ptr [rcx + 16], 0
 1037734:	ba 01 00 00 00 	mov	edx, 1
 1037739:	eb 0b 	jmp	11 <_runtime.(*randomOrder).reset+0x46>
 103773b:	ff c2 	inc	edx
 103773d:	8b 44 24 60 	mov	eax, dword ptr [rsp + 96]
 1037741:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1037746:	39 c2 	cmp	edx, eax
 1037748:	0f 87 b2 00 00 00 	ja	178 <_runtime.(*randomOrder).reset+0x100>
 103774e:	89 54 24 44 	mov	dword ptr [rsp + 68], edx
 1037752:	89 14 24 	mov	dword ptr [rsp], edx
 1037755:	89 44 24 04 	mov	dword ptr [rsp + 4], eax
 1037759:	e8 c2 00 00 00 	call	194 <_runtime.gcd>
 103775e:	83 7c 24 08 01 	cmp	dword ptr [rsp + 8], 1
 1037763:	0f 85 89 00 00 00 	jne	137 <_runtime.(*randomOrder).reset+0xf2>
 1037769:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103776e:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1037772:	48 8d 51 01 	lea	rdx, [rcx + 1]
 1037776:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 103777a:	48 8b 70 18 	mov	rsi, qword ptr [rax + 24]
 103777e:	48 39 f2 	cmp	rdx, rsi
 1037781:	77 11 	ja	17 <_runtime.(*randomOrder).reset+0x94>
 1037783:	48 8d 51 01 	lea	rdx, [rcx + 1]
 1037787:	48 89 50 10 	mov	qword ptr [rax + 16], rdx
 103778b:	8b 54 24 44 	mov	edx, dword ptr [rsp + 68]
 103778f:	89 14 8b 	mov	dword ptr [rbx + 4*rcx], edx
 1037792:	eb a7 	jmp	-89 <_runtime.(*randomOrder).reset+0x3b>
 1037794:	48 8d 05 c5 88 02 00 	lea	rax, [rip + 166085]
 103779b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103779f:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10377a4:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10377a9:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 10377ae:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 10377b3:	e8 68 54 00 00 	call	21608 <_runtime.growslice>
 10377b8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10377bd:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10377c2:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10377c7:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 10377cc:	48 89 53 18 	mov	qword ptr [rbx + 24], rdx
 10377d0:	83 3d 29 01 0c 00 00 	cmp	dword ptr [rip + 786729], 0
 10377d7:	75 0e 	jne	14 <_runtime.(*randomOrder).reset+0xe7>
 10377d9:	48 89 43 08 	mov	qword ptr [rbx + 8], rax
 10377dd:	48 89 c3 	mov	rbx, rax
 10377e0:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10377e5:	eb 9c 	jmp	-100 <_runtime.(*randomOrder).reset+0x83>
 10377e7:	48 8d 7b 08 	lea	rdi, [rbx + 8]
 10377eb:	e8 f0 b1 01 00 	call	111088 <_runtime.gcWriteBarrier>
 10377f0:	eb eb 	jmp	-21 <_runtime.(*randomOrder).reset+0xdd>
 10377f2:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10377f7:	8b 54 24 44 	mov	edx, dword ptr [rsp + 68]
 10377fb:	e9 3b ff ff ff 	jmp	-197 <_runtime.(*randomOrder).reset+0x3b>
 1037800:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1037805:	48 83 c4 50 	add	rsp, 80
 1037809:	c3 	ret
 103780a:	e8 c1 93 01 00 	call	103361 <_runtime.morestack_noctxt>
 103780f:	e9 ec fe ff ff 	jmp	-276 <_runtime.(*randomOrder).reset>
 1037814:	cc 	int3
 1037815:	cc 	int3
 1037816:	cc 	int3
 1037817:	cc 	int3
 1037818:	cc 	int3
 1037819:	cc 	int3
 103781a:	cc 	int3
 103781b:	cc 	int3
 103781c:	cc 	int3
 103781d:	cc 	int3
 103781e:	cc 	int3
 103781f:	cc 	int3

_runtime.gcd:
 1037820:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 1037824:	8b 54 24 0c 	mov	edx, dword ptr [rsp + 12]
 1037828:	eb 0a 	jmp	10 <_runtime.gcd+0x14>
 103782a:	89 c8 	mov	eax, ecx
 103782c:	89 d3 	mov	ebx, edx
 103782e:	31 d2 	xor	edx, edx
 1037830:	f7 f3 	div	ebx
 1037832:	89 d9 	mov	ecx, ebx
 1037834:	85 d2 	test	edx, edx
 1037836:	75 f2 	jne	-14 <_runtime.gcd+0xa>
 1037838:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 103783c:	c3 	ret
 103783d:	cc 	int3
 103783e:	cc 	int3
 103783f:	cc 	int3

_runtime.doInit:
 1037840:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037849:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103784d:	0f 86 c0 00 00 00 	jbe	192 <_runtime.doInit+0xd3>
 1037853:	48 83 ec 28 	sub	rsp, 40
 1037857:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103785c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1037861:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1037866:	48 8b 08 	mov	rcx, qword ptr [rax]
 1037869:	48 83 f9 01 	cmp	rcx, 1
 103786d:	0f 84 86 00 00 00 	je	134 <_runtime.doInit+0xb9>
 1037873:	48 83 f9 02 	cmp	rcx, 2
 1037877:	74 76 	je	118 <_runtime.doInit+0xaf>
 1037879:	48 c7 00 01 00 00 00 	mov	qword ptr [rax], 1
 1037880:	31 c9 	xor	ecx, ecx
 1037882:	eb 21 	jmp	33 <_runtime.doInit+0x65>
 1037884:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1037889:	48 8b 54 c8 18 	mov	rdx, qword ptr [rax + 8*rcx + 24]
 103788e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1037892:	e8 a9 ff ff ff 	call	-87 <_runtime.doInit>
 1037897:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103789c:	48 8d 48 01 	lea	rcx, [rax + 1]
 10378a0:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10378a5:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 10378a9:	77 d9 	ja	-39 <_runtime.doInit+0x44>
 10378ab:	31 c9 	xor	ecx, ecx
 10378ad:	eb 29 	jmp	41 <_runtime.doInit+0x98>
 10378af:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10378b4:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 10378b8:	48 8d 1c 19 	lea	rbx, [rcx + rbx]
 10378bc:	48 8d 5b 03 	lea	rbx, [rbx + 3]
 10378c0:	48 8b 34 d8 	mov	rsi, qword ptr [rax + 8*rbx]
 10378c4:	48 8d 14 d8 	lea	rdx, [rax + 8*rbx]
 10378c8:	ff d6 	call	rsi
 10378ca:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10378cf:	48 8d 48 01 	lea	rcx, [rax + 1]
 10378d3:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10378d8:	48 39 48 10 	cmp	qword ptr [rax + 16], rcx
 10378dc:	77 d1 	ja	-47 <_runtime.doInit+0x6f>
 10378de:	48 c7 00 02 00 00 00 	mov	qword ptr [rax], 2
 10378e5:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10378ea:	48 83 c4 28 	add	rsp, 40
 10378ee:	c3 	ret
 10378ef:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10378f4:	48 83 c4 28 	add	rsp, 40
 10378f8:	c3 	ret
 10378f9:	48 8d 05 76 f8 03 00 	lea	rax, [rip + 260214]
 1037900:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037904:	48 c7 44 24 08 32 00 00 00 	mov	qword ptr [rsp + 8], 50
 103790d:	e8 4e 14 ff ff 	call	-60338 <_runtime.throw>
 1037912:	90 	nop
 1037913:	e8 b8 92 01 00 	call	103096 <_runtime.morestack_noctxt>
 1037918:	e9 23 ff ff ff 	jmp	-221 <_runtime.doInit>
 103791d:	cc 	int3
 103791e:	cc 	int3
 103791f:	cc 	int3

_runtime.(*profBuf).takeOverflow:
 1037920:	48 83 ec 10 	sub	rsp, 16
 1037924:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1037929:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 103792e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1037933:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 1037937:	48 8b 59 18 	mov	rbx, qword ptr [rcx + 24]
 103793b:	eb 0e 	jmp	14 <_runtime.(*profBuf).takeOverflow+0x2b>
 103793d:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1037941:	48 8b 79 18 	mov	rdi, qword ptr [rcx + 24]
 1037945:	48 89 f2 	mov	rdx, rsi
 1037948:	48 89 fb 	mov	rbx, rdi
 103794b:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103794f:	85 d2 	test	edx, edx
 1037951:	74 32 	je	50 <_runtime.(*profBuf).takeOverflow+0x65>
 1037953:	48 89 d0 	mov	rax, rdx
 1037956:	48 c1 ea 20 	shr	rdx, 32
 103795a:	48 ff c2 	inc	rdx
 103795d:	48 c1 e2 20 	shl	rdx, 32
 1037961:	f0 	lock
 1037962:	48 0f b1 51 10 	cmpxchg	qword ptr [rcx + 16], rdx
 1037967:	0f 94 c2 	sete	dl
 103796a:	84 d2 	test	dl, dl
 103796c:	74 cf 	je	-49 <_runtime.(*profBuf).takeOverflow+0x1d>
 103796e:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1037972:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 1037976:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 103797b:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1037980:	48 83 c4 10 	add	rsp, 16
 1037984:	c3 	ret
 1037985:	31 db 	xor	ebx, ebx
 1037987:	eb e5 	jmp	-27 <_runtime.(*profBuf).takeOverflow+0x4e>
 1037989:	cc 	int3
 103798a:	cc 	int3
 103798b:	cc 	int3
 103798c:	cc 	int3
 103798d:	cc 	int3
 103798e:	cc 	int3
 103798f:	cc 	int3

_runtime.(*profBuf).incrementOverflow:
 1037990:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1037995:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 1037999:	85 d2 	test	edx, edx
 103799b:	74 1a 	je	26 <_runtime.(*profBuf).incrementOverflow+0x27>
 103799d:	83 fa ff 	cmp	edx, -1
 10379a0:	74 14 	je	20 <_runtime.(*profBuf).incrementOverflow+0x26>
 10379a2:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 10379a6:	48 89 d0 	mov	rax, rdx
 10379a9:	f0 	lock
 10379aa:	48 0f b1 59 10 	cmpxchg	qword ptr [rcx + 16], rbx
 10379af:	0f 94 c2 	sete	dl
 10379b2:	84 d2 	test	dl, dl
 10379b4:	74 df 	je	-33 <_runtime.(*profBuf).incrementOverflow+0x5>
 10379b6:	c3 	ret
 10379b7:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10379bc:	48 87 41 18 	xchg	qword ptr [rcx + 24], rax
 10379c0:	48 c1 ea 20 	shr	rdx, 32
 10379c4:	48 8d 42 01 	lea	rax, [rdx + 1]
 10379c8:	48 c1 e0 20 	shl	rax, 32
 10379cc:	48 ff c0 	inc	rax
 10379cf:	48 87 41 10 	xchg	qword ptr [rcx + 16], rax
 10379d3:	eb e1 	jmp	-31 <_runtime.(*profBuf).incrementOverflow+0x26>
 10379d5:	cc 	int3
 10379d6:	cc 	int3
 10379d7:	cc 	int3
 10379d8:	cc 	int3
 10379d9:	cc 	int3
 10379da:	cc 	int3
 10379db:	cc 	int3
 10379dc:	cc 	int3
 10379dd:	cc 	int3
 10379de:	cc 	int3
 10379df:	cc 	int3

_runtime.(*profBuf).canWriteRecord:
 10379e0:	48 83 ec 08 	sub	rsp, 8
 10379e4:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 10379e8:	48 8d 2c 24 	lea	rbp, [rsp]
 10379ec:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10379f1:	48 8b 11 	mov	rdx, qword ptr [rcx]
 10379f4:	90 	nop
 10379f5:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 10379f9:	48 8b 71 50 	mov	rsi, qword ptr [rcx + 80]
 10379fd:	48 89 d7 	mov	rdi, rdx
 1037a00:	48 c1 ea 22 	shr	rdx, 34
 1037a04:	48 89 d8 	mov	rax, rbx
 1037a07:	48 c1 eb 22 	shr	rbx, 34
 1037a0b:	29 da 	sub	edx, ebx
 1037a0d:	c1 e2 02 	shl	edx, 2
 1037a10:	c1 fa 02 	sar	edx, 2
 1037a13:	48 63 d2 	movsxd	rdx, edx
 1037a16:	48 01 f2 	add	rdx, rsi
 1037a19:	48 83 fa 01 	cmp	rdx, 1
 1037a1d:	7c 50 	jl	80 <_runtime.(*profBuf).canWriteRecord+0x8f>
 1037a1f:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 1037a23:	29 c7 	sub	edi, eax
 1037a25:	c1 e7 02 	shl	edi, 2
 1037a28:	c1 ff 02 	sar	edi, 2
 1037a2b:	48 63 df 	movsxd	rbx, edi
 1037a2e:	48 01 d3 	add	rbx, rdx
 1037a31:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 1037a36:	48 03 71 28 	add	rsi, qword ptr [rcx + 40]
 1037a3a:	85 d2 	test	edx, edx
 1037a3c:	74 3f 	je	63 <_runtime.(*profBuf).canWriteRecord+0x9d>
 1037a3e:	48 89 d1 	mov	rcx, rdx
 1037a41:	31 d2 	xor	edx, edx
 1037a43:	f7 f1 	div	ecx
 1037a45:	89 d2 	mov	edx, edx
 1037a47:	48 8d 3c 32 	lea	rdi, [rdx + rsi]
 1037a4b:	48 8d 7f 02 	lea	rdi, [rdi + 2]
 1037a4f:	48 39 cf 	cmp	rdi, rcx
 1037a52:	7e 06 	jle	6 <_runtime.(*profBuf).canWriteRecord+0x7a>
 1037a54:	48 29 d1 	sub	rcx, rdx
 1037a57:	48 29 cb 	sub	rbx, rcx
 1037a5a:	48 8d 46 02 	lea	rax, [rsi + 2]
 1037a5e:	48 39 c3 	cmp	rbx, rax
 1037a61:	0f 9d 44 24 20 	setge	byte ptr [rsp + 32]
 1037a66:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1037a6a:	48 83 c4 08 	add	rsp, 8
 1037a6e:	c3 	ret
 1037a6f:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1037a74:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1037a78:	48 83 c4 08 	add	rsp, 8
 1037a7c:	c3 	ret
 1037a7d:	e8 be f8 fe ff 	call	-67394 <_runtime.panicdivide>
 1037a82:	90 	nop
 1037a83:	cc 	int3
 1037a84:	cc 	int3
 1037a85:	cc 	int3
 1037a86:	cc 	int3
 1037a87:	cc 	int3
 1037a88:	cc 	int3
 1037a89:	cc 	int3
 1037a8a:	cc 	int3
 1037a8b:	cc 	int3
 1037a8c:	cc 	int3
 1037a8d:	cc 	int3
 1037a8e:	cc 	int3
 1037a8f:	cc 	int3

_runtime.(*profBuf).canWriteTwoRecords:
 1037a90:	48 83 ec 08 	sub	rsp, 8
 1037a94:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1037a98:	48 8d 2c 24 	lea	rbp, [rsp]
 1037a9c:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1037aa1:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1037aa4:	90 	nop
 1037aa5:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 1037aa9:	48 8b 71 50 	mov	rsi, qword ptr [rcx + 80]
 1037aad:	48 89 d7 	mov	rdi, rdx
 1037ab0:	48 c1 ea 22 	shr	rdx, 34
 1037ab4:	48 89 d8 	mov	rax, rbx
 1037ab7:	48 c1 eb 22 	shr	rbx, 34
 1037abb:	29 da 	sub	edx, ebx
 1037abd:	c1 e2 02 	shl	edx, 2
 1037ac0:	c1 fa 02 	sar	edx, 2
 1037ac3:	48 63 d2 	movsxd	rdx, edx
 1037ac6:	48 01 f2 	add	rdx, rsi
 1037ac9:	48 83 fa 02 	cmp	rdx, 2
 1037acd:	0f 8c 94 00 00 00 	jl	148 <_runtime.(*profBuf).canWriteTwoRecords+0xd7>
 1037ad3:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 1037ad7:	29 c7 	sub	edi, eax
 1037ad9:	c1 e7 02 	shl	edi, 2
 1037adc:	c1 ff 02 	sar	edi, 2
 1037adf:	48 63 df 	movsxd	rbx, edi
 1037ae2:	48 01 d3 	add	rbx, rdx
 1037ae5:	48 8b 49 28 	mov	rcx, qword ptr [rcx + 40]
 1037ae9:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 1037aee:	48 8d 3c 31 	lea	rdi, [rcx + rsi]
 1037af2:	48 8d 7f 02 	lea	rdi, [rdi + 2]
 1037af6:	48 01 ce 	add	rsi, rcx
 1037af9:	85 d2 	test	edx, edx
 1037afb:	74 78 	je	120 <_runtime.(*profBuf).canWriteTwoRecords+0xe5>
 1037afd:	49 89 d0 	mov	r8, rdx
 1037b00:	31 d2 	xor	edx, edx
 1037b02:	41 f7 f0 	div	r8d
 1037b05:	89 d2 	mov	edx, edx
 1037b07:	4c 8d 0c 16 	lea	r9, [rsi + rdx]
 1037b0b:	4d 8d 49 02 	lea	r9, [r9 + 2]
 1037b0f:	4d 39 c1 	cmp	r9, r8
 1037b12:	7e 4e 	jle	78 <_runtime.(*profBuf).canWriteTwoRecords+0xd2>
 1037b14:	4c 89 c0 	mov	rax, r8
 1037b17:	49 29 d0 	sub	r8, rdx
 1037b1a:	4c 29 c3 	sub	rbx, r8
 1037b1d:	31 d2 	xor	edx, edx
 1037b1f:	4c 8d 04 16 	lea	r8, [rsi + rdx]
 1037b23:	4d 8d 40 02 	lea	r8, [r8 + 2]
 1037b27:	48 01 f2 	add	rdx, rsi
 1037b2a:	48 29 fb 	sub	rbx, rdi
 1037b2d:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1037b32:	48 8d 3c 31 	lea	rdi, [rcx + rsi]
 1037b36:	48 8d 0c 31 	lea	rcx, [rcx + rsi]
 1037b3a:	48 8d 49 02 	lea	rcx, [rcx + 2]
 1037b3e:	48 8d 14 17 	lea	rdx, [rdi + rdx]
 1037b42:	48 8d 52 04 	lea	rdx, [rdx + 4]
 1037b46:	48 39 c2 	cmp	rdx, rax
 1037b49:	7e 06 	jle	6 <_runtime.(*profBuf).canWriteTwoRecords+0xc1>
 1037b4b:	4c 29 c0 	sub	rax, r8
 1037b4e:	48 29 c3 	sub	rbx, rax
 1037b51:	48 39 cb 	cmp	rbx, rcx
 1037b54:	0f 9d 44 24 28 	setge	byte ptr [rsp + 40]
 1037b59:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1037b5d:	48 83 c4 08 	add	rsp, 8
 1037b61:	c3 	ret
 1037b62:	4c 89 c0 	mov	rax, r8
 1037b65:	eb b8 	jmp	-72 <_runtime.(*profBuf).canWriteTwoRecords+0x8f>
 1037b67:	c6 44 24 28 00 	mov	byte ptr [rsp + 40], 0
 1037b6c:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1037b70:	48 83 c4 08 	add	rsp, 8
 1037b74:	c3 	ret
 1037b75:	e8 c6 f7 fe ff 	call	-67642 <_runtime.panicdivide>
 1037b7a:	90 	nop
 1037b7b:	cc 	int3
 1037b7c:	cc 	int3
 1037b7d:	cc 	int3
 1037b7e:	cc 	int3
 1037b7f:	cc 	int3

_runtime.(*profBuf).write:
 1037b80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037b89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1037b8d:	0f 86 45 04 00 00 	jbe	1093 <_runtime.(*profBuf).write+0x458>
 1037b93:	48 83 c4 80 	add	rsp, -128
 1037b97:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 1037b9c:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 1037ba1:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1037ba9:	48 85 db 	test	rbx, rbx
 1037bac:	0f 84 b3 03 00 00 	je	947 <_runtime.(*profBuf).write+0x3e5>
 1037bb2:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1037bba:	48 39 73 28 	cmp	qword ptr [rbx + 40], rsi
 1037bbe:	0f 8c fa 03 00 00 	jl	1018 <_runtime.(*profBuf).write+0x43e>
 1037bc4:	48 8b 7b 10 	mov	rdi, qword ptr [rbx + 16]
 1037bc8:	85 ff 	test	edi, edi
 1037bca:	0f 87 52 03 00 00 	ja	850 <_runtime.(*profBuf).write+0x3a2>
 1037bd0:	31 c0 	xor	eax, eax
 1037bd2:	84 c0 	test	al, al
 1037bd4:	0f 85 c1 02 00 00 	jne	705 <_runtime.(*profBuf).write+0x31b>
 1037bda:	85 ff 	test	edi, edi
 1037bdc:	0f 86 86 02 00 00 	jbe	646 <_runtime.(*profBuf).write+0x2e8>
 1037be2:	b8 01 00 00 00 	mov	eax, 1
 1037be7:	84 c0 	test	al, al
 1037be9:	0f 85 48 02 00 00 	jne	584 <_runtime.(*profBuf).write+0x2b7>
 1037bef:	90 	nop
 1037bf0:	48 8b 3b 	mov	rdi, qword ptr [rbx]
 1037bf3:	90 	nop
 1037bf4:	48 8b 7b 08 	mov	rdi, qword ptr [rbx + 8]
 1037bf8:	48 8b 4b 50 	mov	rcx, qword ptr [rbx + 80]
 1037bfc:	4c 8b 43 48 	mov	r8, qword ptr [rbx + 72]
 1037c00:	85 c9 	test	ecx, ecx
 1037c02:	0f 84 b1 03 00 00 	je	945 <_runtime.(*profBuf).write+0x439>
 1037c08:	48 89 f8 	mov	rax, rdi
 1037c0b:	48 c1 e8 22 	shr	rax, 34
 1037c0f:	31 d2 	xor	edx, edx
 1037c11:	f7 f1 	div	ecx
 1037c13:	4c 8b 8c 24 90 00 00 00 	mov	r9, qword ptr [rsp + 144]
 1037c1b:	4d 85 c9 	test	r9, r9
 1037c1e:	74 12 	je	18 <_runtime.(*profBuf).write+0xb2>
 1037c20:	89 d0 	mov	eax, edx
 1037c22:	48 39 c8 	cmp	rax, rcx
 1037c25:	0f 83 89 03 00 00 	jae	905 <_runtime.(*profBuf).write+0x434>
 1037c2b:	4d 8b 09 	mov	r9, qword ptr [r9]
 1037c2e:	4d 89 0c c0 	mov	qword ptr [r8 + 8*rax], r9
 1037c32:	48 8b 4b 38 	mov	rcx, qword ptr [rbx + 56]
 1037c36:	4c 8b 43 30 	mov	r8, qword ptr [rbx + 48]
 1037c3a:	85 c9 	test	ecx, ecx
 1037c3c:	0f 84 6d 03 00 00 	je	877 <_runtime.(*profBuf).write+0x42f>
 1037c42:	48 89 f8 	mov	rax, rdi
 1037c45:	31 d2 	xor	edx, edx
 1037c47:	f7 f1 	div	ecx
 1037c49:	89 d0 	mov	eax, edx
 1037c4b:	48 8b 7b 28 	mov	rdi, qword ptr [rbx + 40]
 1037c4f:	48 01 c7 	add	rdi, rax
 1037c52:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 1037c5a:	4a 8d 3c 0f 	lea	rdi, [rdi + r9]
 1037c5e:	48 8d 7f 02 	lea	rdi, [rdi + 2]
 1037c62:	48 39 cf 	cmp	rdi, rcx
 1037c65:	0f 8e c5 01 00 00 	jle	453 <_runtime.(*profBuf).write+0x2b0>
 1037c6b:	48 39 c8 	cmp	rax, rcx
 1037c6e:	0f 83 36 03 00 00 	jae	822 <_runtime.(*profBuf).write+0x42a>
 1037c74:	49 c7 04 c0 00 00 00 00 	mov	qword ptr [r8 + 8*rax], 0
 1037c7c:	48 8b 7b 38 	mov	rdi, qword ptr [rbx + 56]
 1037c80:	48 29 c7 	sub	rdi, rax
 1037c83:	31 c0 	xor	eax, eax
 1037c85:	48 8b 53 40 	mov	rdx, qword ptr [rbx + 64]
 1037c89:	48 8b 4b 38 	mov	rcx, qword ptr [rbx + 56]
 1037c8d:	4c 8b 43 30 	mov	r8, qword ptr [rbx + 48]
 1037c91:	48 39 c8 	cmp	rax, rcx
 1037c94:	0f 87 0b 03 00 00 	ja	779 <_runtime.(*profBuf).write+0x425>
 1037c9a:	48 29 c1 	sub	rcx, rax
 1037c9d:	48 29 c2 	sub	rdx, rax
 1037ca0:	49 89 d2 	mov	r10, rdx
 1037ca3:	48 f7 da 	neg	rdx
 1037ca6:	48 c1 e0 03 	shl	rax, 3
 1037caa:	48 c1 fa 3f 	sar	rdx, 63
 1037cae:	48 21 c2 	and	rdx, rax
 1037cb1:	4e 8d 1c 02 	lea	r11, [rdx + r8]
 1037cb5:	4c 8b 63 28 	mov	r12, qword ptr [rbx + 40]
 1037cb9:	4f 8d 24 21 	lea	r12, [r9 + r12]
 1037cbd:	4d 8d 64 24 02 	lea	r12, [r12 + 2]
 1037cc2:	48 85 c9 	test	rcx, rcx
 1037cc5:	0f 86 d3 02 00 00 	jbe	723 <_runtime.(*profBuf).write+0x41e>
 1037ccb:	4d 89 24 10 	mov	qword ptr [r8 + rdx], r12
 1037ccf:	48 83 f9 01 	cmp	rcx, 1
 1037cd3:	0f 86 bb 02 00 00 	jbe	699 <_runtime.(*profBuf).write+0x414>
 1037cd9:	4c 8b a4 24 98 00 00 00 	mov	r12, qword ptr [rsp + 152]
 1037ce1:	4d 89 64 10 08 	mov	qword ptr [r8 + rdx + 8], r12
 1037ce6:	4c 8b 43 28 	mov	r8, qword ptr [rbx + 40]
 1037cea:	4d 8d 60 02 	lea	r12, [r8 + 2]
 1037cee:	4d 39 d4 	cmp	r12, r10
 1037cf1:	0f 87 92 02 00 00 	ja	658 <_runtime.(*profBuf).write+0x409>
 1037cf7:	49 83 fc 02 	cmp	r12, 2
 1037cfb:	0f 82 7b 02 00 00 	jb	635 <_runtime.(*profBuf).write+0x3fc>
 1037d01:	49 39 f0 	cmp	r8, rsi
 1037d04:	4c 0f 4f c6 	cmovg	r8, rsi
 1037d08:	49 8d 52 fe 	lea	rdx, [r10 - 2]
 1037d0c:	48 f7 da 	neg	rdx
 1037d0f:	48 c1 fa 3f 	sar	rdx, 63
 1037d13:	48 83 e2 10 	and	rdx, 16
 1037d17:	4c 01 da 	add	rdx, r11
 1037d1a:	48 8b b4 24 a0 00 00 00 	mov	rsi, qword ptr [rsp + 160]
 1037d22:	48 39 f2 	cmp	rdx, rsi
 1037d25:	74 11 	je	17 <_runtime.(*profBuf).write+0x1b8>
 1037d27:	e9 b0 00 00 00 	jmp	176 <_runtime.(*profBuf).write+0x25c>
 1037d2c:	4b c7 44 c3 10 00 00 00 00 	mov	qword ptr [r11 + 8*r8 + 16], 0
 1037d35:	49 ff c0 	inc	r8
 1037d38:	4c 39 43 28 	cmp	qword ptr [rbx + 40], r8
 1037d3c:	76 0e 	jbe	14 <_runtime.(*profBuf).write+0x1cc>
 1037d3e:	49 8d 40 02 	lea	rax, [r8 + 2]
 1037d42:	48 39 c8 	cmp	rax, rcx
 1037d45:	72 e5 	jb	-27 <_runtime.(*profBuf).write+0x1ac>
 1037d47:	e9 2b 02 00 00 	jmp	555 <_runtime.(*profBuf).write+0x3f7>
 1037d4c:	48 8b 94 24 b8 00 00 00 	mov	rdx, qword ptr [rsp + 184]
 1037d54:	31 c0 	xor	eax, eax
 1037d56:	eb 07 	jmp	7 <_runtime.(*profBuf).write+0x1df>
 1037d58:	4b 89 34 c3 	mov	qword ptr [r11 + 8*r8], rsi
 1037d5c:	48 ff c0 	inc	rax
 1037d5f:	4c 39 c8 	cmp	rax, r9
 1037d62:	7d 1a 	jge	26 <_runtime.(*profBuf).write+0x1fe>
 1037d64:	48 8b 34 c2 	mov	rsi, qword ptr [rdx + 8*rax]
 1037d68:	4c 8b 43 28 	mov	r8, qword ptr [rbx + 40]
 1037d6c:	4d 8d 04 00 	lea	r8, [r8 + rax]
 1037d70:	4d 8d 40 02 	lea	r8, [r8 + 2]
 1037d74:	49 39 c8 	cmp	r8, rcx
 1037d77:	72 df 	jb	-33 <_runtime.(*profBuf).write+0x1d8>
 1037d79:	e9 f1 01 00 00 	jmp	497 <_runtime.(*profBuf).write+0x3ef>
 1037d7e:	90 	nop
 1037d7f:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1037d83:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1037d88:	49 8d 14 39 	lea	rdx, [r9 + rdi]
 1037d8c:	48 03 53 28 	add	rdx, qword ptr [rbx + 40]
 1037d90:	48 83 c2 02 	add	rdx, 2
 1037d94:	48 89 c8 	mov	rax, rcx
 1037d97:	48 c1 e9 22 	shr	rcx, 34
 1037d9b:	48 ff c1 	inc	rcx
 1037d9e:	48 c1 e1 22 	shl	rcx, 34
 1037da2:	01 c2 	add	edx, eax
 1037da4:	48 09 d1 	or	rcx, rdx
 1037da7:	f0 	lock
 1037da8:	48 0f b1 4b 08 	cmpxchg	qword ptr [rbx + 8], rcx
 1037dad:	0f 94 c1 	sete	cl
 1037db0:	84 c9 	test	cl, cl
 1037db2:	74 ca 	je	-54 <_runtime.(*profBuf).write+0x1fe>
 1037db4:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1037db9:	48 0f ba e0 20 	bt	rax, 32
 1037dbe:	72 0a 	jb	10 <_runtime.(*profBuf).write+0x24a>
 1037dc0:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1037dc5:	48 83 ec 80 	sub	rsp, -128
 1037dc9:	c3 	ret
 1037dca:	48 8d 83 80 00 00 00 	lea	rax, [rbx + 128]
 1037dd1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037dd5:	e8 16 06 fd ff 	call	-195050 <_runtime.notewakeup>
 1037dda:	eb e4 	jmp	-28 <_runtime.(*profBuf).write+0x240>
 1037ddc:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1037de1:	4c 89 5c 24 70 	mov	qword ptr [rsp + 112], r11
 1037de6:	48 89 7c 24 50 	mov	qword ptr [rsp + 80], rdi
 1037deb:	4c 89 44 24 60 	mov	qword ptr [rsp + 96], r8
 1037df0:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1037df4:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1037df9:	49 c1 e0 03 	shl	r8, 3
 1037dfd:	4c 89 44 24 10 	mov	qword ptr [rsp + 16], r8
 1037e02:	e8 49 bd 01 00 	call	113993 <_runtime.memmove>
 1037e07:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1037e0c:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1037e14:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 1037e19:	4c 8b 44 24 60 	mov	r8, qword ptr [rsp + 96]
 1037e1e:	4c 8b 8c 24 c0 00 00 00 	mov	r9, qword ptr [rsp + 192]
 1037e26:	4c 8b 5c 24 70 	mov	r11, qword ptr [rsp + 112]
 1037e2b:	e9 08 ff ff ff 	jmp	-248 <_runtime.(*profBuf).write+0x1b8>
 1037e30:	31 ff 	xor	edi, edi
 1037e32:	e9 4e fe ff ff 	jmp	-434 <_runtime.(*profBuf).write+0x105>
 1037e37:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1037e3b:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1037e43:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1037e48:	e8 43 fb ff ff 	call	-1213 <_runtime.(*profBuf).incrementOverflow>
 1037e4d:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1037e55:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037e59:	e8 92 01 00 00 	call	402 <_runtime.(*profBuf).wakeupExtra>
 1037e5e:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1037e63:	48 83 ec 80 	sub	rsp, -128
 1037e67:	c3 	ret
 1037e68:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1037e6c:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1037e74:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1037e79:	e8 62 fb ff ff 	call	-1182 <_runtime.(*profBuf).canWriteRecord>
 1037e7e:	0f b6 44 24 10 	movzx	eax, byte ptr [rsp + 16]
 1037e83:	83 f0 01 	xor	eax, 1
 1037e86:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1037e8e:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1037e96:	e9 4c fd ff ff 	jmp	-692 <_runtime.(*profBuf).write+0x67>
 1037e9b:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1037e9f:	e8 7c fa ff ff 	call	-1412 <_runtime.(*profBuf).takeOverflow>
 1037ea4:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 1037ea8:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1037ead:	85 c0 	test	eax, eax
 1037eaf:	77 15 	ja	21 <_runtime.(*profBuf).write+0x346>
 1037eb1:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1037eb9:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1037ec1:	e9 29 fd ff ff 	jmp	-727 <_runtime.(*profBuf).write+0x6f>
 1037ec6:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1037ecf:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1037ed4:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1037edc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037ee0:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1037ee9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1037eee:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1037ef7:	0f 57 c0 	xorps	xmm0, xmm0
 1037efa:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 1037eff:	48 8d 4c 24 48 	lea	rcx, [rsp + 72]
 1037f04:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1037f09:	48 c7 44 24 38 01 00 00 00 	mov	qword ptr [rsp + 56], 1
 1037f12:	48 c7 44 24 40 01 00 00 00 	mov	qword ptr [rsp + 64], 1
 1037f1b:	e8 60 fc ff ff 	call	-928 <_runtime.(*profBuf).write>
 1037f20:	eb 8f 	jmp	-113 <_runtime.(*profBuf).write+0x331>
 1037f22:	48 89 7c 24 68 	mov	qword ptr [rsp + 104], rdi
 1037f27:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1037f2b:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1037f34:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1037f3c:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1037f41:	e8 4a fb ff ff 	call	-1206 <_runtime.(*profBuf).canWriteTwoRecords>
 1037f46:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1037f4b:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1037f53:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1037f5b:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1037f60:	e9 6d fc ff ff 	jmp	-915 <_runtime.(*profBuf).write+0x52>
 1037f65:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1037f6a:	48 83 ec 80 	sub	rsp, -128
 1037f6e:	c3 	ret
 1037f6f:	4c 89 c0 	mov	rax, r8
 1037f72:	e8 e9 b3 01 00 	call	111593 <_runtime.panicIndexU>
 1037f77:	e8 e4 b3 01 00 	call	111588 <_runtime.panicIndexU>
 1037f7c:	b8 02 00 00 00 	mov	eax, 2
 1037f81:	4c 89 e1 	mov	rcx, r12
 1037f84:	e8 27 b4 01 00 	call	111655 <_runtime.panicSliceB>
 1037f89:	4c 89 e1 	mov	rcx, r12
 1037f8c:	4c 89 d2 	mov	rdx, r10
 1037f8f:	e8 0c b4 01 00 	call	111628 <_runtime.panicSliceAcapU>
 1037f94:	b8 01 00 00 00 	mov	eax, 1
 1037f99:	e8 b2 b3 01 00 	call	111538 <_runtime.panicIndex>
 1037f9e:	31 c0 	xor	eax, eax
 1037fa0:	e8 ab b3 01 00 	call	111531 <_runtime.panicIndex>
 1037fa5:	e8 06 b4 01 00 	call	111622 <_runtime.panicSliceB>
 1037faa:	e8 a1 b3 01 00 	call	111521 <_runtime.panicIndex>
 1037faf:	e8 8c f3 fe ff 	call	-68724 <_runtime.panicdivide>
 1037fb4:	e8 97 b3 01 00 	call	111511 <_runtime.panicIndex>
 1037fb9:	e8 82 f3 fe ff 	call	-68734 <_runtime.panicdivide>
 1037fbe:	48 8d 05 e9 c8 03 00 	lea	rax, [rip + 248041]
 1037fc5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1037fc9:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 1037fd2:	e8 89 0d ff ff 	call	-62071 <_runtime.throw>
 1037fd7:	90 	nop
 1037fd8:	e8 f3 8b 01 00 	call	101363 <_runtime.morestack_noctxt>
 1037fdd:	e9 9e fb ff ff 	jmp	-1122 <_runtime.(*profBuf).write>
 1037fe2:	cc 	int3
 1037fe3:	cc 	int3
 1037fe4:	cc 	int3
 1037fe5:	cc 	int3
 1037fe6:	cc 	int3
 1037fe7:	cc 	int3
 1037fe8:	cc 	int3
 1037fe9:	cc 	int3
 1037fea:	cc 	int3
 1037feb:	cc 	int3
 1037fec:	cc 	int3
 1037fed:	cc 	int3
 1037fee:	cc 	int3
 1037fef:	cc 	int3

_runtime.(*profBuf).wakeupExtra:
 1037ff0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1037ff9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1037ffd:	76 59 	jbe	89 <_runtime.(*profBuf).wakeupExtra+0x68>
 1037fff:	48 83 ec 18 	sub	rsp, 24
 1038003:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1038008:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103800d:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1038012:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 1038016:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103801b:	48 89 d0 	mov	rax, rdx
 103801e:	48 0f ba ea 21 	bts	rdx, 33
 1038023:	f0 	lock
 1038024:	48 0f b1 51 08 	cmpxchg	qword ptr [rcx + 8], rdx
 1038029:	0f 94 c2 	sete	dl
 103802c:	84 d2 	test	dl, dl
 103802e:	74 e2 	je	-30 <_runtime.(*profBuf).wakeupExtra+0x22>
 1038030:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1038035:	48 0f ba e0 20 	bt	rax, 32
 103803a:	72 0a 	jb	10 <_runtime.(*profBuf).wakeupExtra+0x56>
 103803c:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1038041:	48 83 c4 18 	add	rsp, 24
 1038045:	c3 	ret
 1038046:	48 8d 81 80 00 00 00 	lea	rax, [rcx + 128]
 103804d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038051:	e8 9a 03 fd ff 	call	-195686 <_runtime.notewakeup>
 1038056:	eb e4 	jmp	-28 <_runtime.(*profBuf).wakeupExtra+0x4c>
 1038058:	e8 73 8b 01 00 	call	101235 <_runtime.morestack_noctxt>
 103805d:	eb 91 	jmp	-111 <_runtime.(*profBuf).wakeupExtra>
 103805f:	cc 	int3

_runtime.args:
 1038060:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038069:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103806d:	76 57 	jbe	87 <_runtime.args+0x66>
 103806f:	48 83 ec 18 	sub	rsp, 24
 1038073:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1038078:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103807d:	8b 4c 24 20 	mov	ecx, dword ptr [rsp + 32]
 1038081:	89 0d f5 f6 0b 00 	mov	dword ptr [rip + 784117], ecx
 1038087:	83 3d 72 f8 0b 00 00 	cmp	dword ptr [rip + 784498], 0
 103808e:	75 23 	jne	35 <_runtime.args+0x53>
 1038090:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1038095:	48 89 05 6c 61 09 00 	mov	qword ptr [rip + 614764], rax
 103809c:	89 0c 24 	mov	dword ptr [rsp], ecx
 103809f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10380a4:	e8 d7 e8 fe ff 	call	-71465 <_runtime.sysargs>
 10380a9:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10380ae:	48 83 c4 18 	add	rsp, 24
 10380b2:	c3 	ret
 10380b3:	48 8d 3d 4e 61 09 00 	lea	rdi, [rip + 614734]
 10380ba:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10380bf:	e8 1c a9 01 00 	call	108828 <_runtime.gcWriteBarrier>
 10380c4:	eb d6 	jmp	-42 <_runtime.args+0x3c>
 10380c6:	e8 05 8b 01 00 	call	101125 <_runtime.morestack_noctxt>
 10380cb:	eb 93 	jmp	-109 <_runtime.args>
 10380cd:	cc 	int3
 10380ce:	cc 	int3
 10380cf:	cc 	int3

_runtime.goargs:
 10380d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10380d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10380dd:	0f 86 2b 01 00 00 	jbe	299 <_runtime.goargs+0x13e>
 10380e3:	48 83 ec 48 	sub	rsp, 72
 10380e7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 10380ec:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 10380f1:	48 8d 05 a8 7e 02 00 	lea	rax, [rip + 163496]
 10380f8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10380fc:	48 63 05 79 f6 0b 00 	movsxd	rax, dword ptr [rip + 783993]
 1038103:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1038108:	48 63 05 6d f6 0b 00 	movsxd	rax, dword ptr [rip + 783981]
 103810f:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1038114:	e8 07 4a 00 00 	call	18951 <_runtime.makeslice>
 1038119:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103811e:	48 63 0d 57 f6 0b 00 	movsxd	rcx, dword ptr [rip + 783959]
 1038125:	48 89 0d 3c 62 09 00 	mov	qword ptr [rip + 614972], rcx
 103812c:	48 89 0d 3d 62 09 00 	mov	qword ptr [rip + 614973], rcx
 1038133:	83 3d c6 f7 0b 00 00 	cmp	dword ptr [rip + 784326], 0
 103813a:	0f 85 b1 00 00 00 	jne	177 <_runtime.goargs+0x121>
 1038140:	48 89 05 19 62 09 00 	mov	qword ptr [rip + 614937], rax
 1038147:	31 c0 	xor	eax, eax
 1038149:	eb 03 	jmp	3 <_runtime.goargs+0x7e>
 103814b:	8d 41 01 	lea	eax, [rcx + 1]
 103814e:	39 05 28 f6 0b 00 	cmp	dword ptr [rip + 783912], eax
 1038154:	0f 8e 8d 00 00 00 	jle	141 <_runtime.goargs+0x117>
 103815a:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 103815e:	48 63 c8 	movsxd	rcx, eax
 1038161:	48 c1 e1 03 	shl	rcx, 3
 1038165:	48 03 0d 9c 60 09 00 	add	rcx, qword ptr [rip + 614556]
 103816c:	48 8b 09 	mov	rcx, qword ptr [rcx]
 103816f:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1038174:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1038178:	e8 b3 8e 00 00 	call	36531 <_runtime.findnull>
 103817d:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1038182:	0f 57 c0 	xorps	xmm0, xmm0
 1038185:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 103818a:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103818f:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1038194:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1038199:	8b 4c 24 24 	mov	ecx, dword ptr [rsp + 36]
 103819d:	48 63 d1 	movsxd	rdx, ecx
 10381a0:	48 8b 1d c1 61 09 00 	mov	rbx, qword ptr [rip + 614849]
 10381a7:	48 8b 35 b2 61 09 00 	mov	rsi, qword ptr [rip + 614834]
 10381ae:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 10381b3:	48 39 da 	cmp	rdx, rbx
 10381b6:	73 4a 	jae	74 <_runtime.goargs+0x132>
 10381b8:	48 c1 e2 04 	shl	rdx, 4
 10381bc:	48 89 44 16 08 	mov	qword ptr [rsi + rdx + 8], rax
 10381c1:	48 8d 1c 16 	lea	rbx, [rsi + rdx]
 10381c5:	83 3d 34 f7 0b 00 00 	cmp	dword ptr [rip + 784180], 0
 10381cc:	75 09 	jne	9 <_runtime.goargs+0x107>
 10381ce:	48 89 3c 16 	mov	qword ptr [rsi + rdx], rdi
 10381d2:	e9 74 ff ff ff 	jmp	-140 <_runtime.goargs+0x7b>
 10381d7:	48 89 f8 	mov	rax, rdi
 10381da:	48 89 df 	mov	rdi, rbx
 10381dd:	e8 fe a7 01 00 	call	108542 <_runtime.gcWriteBarrier>
 10381e2:	e9 64 ff ff ff 	jmp	-156 <_runtime.goargs+0x7b>
 10381e7:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 10381ec:	48 83 c4 48 	add	rsp, 72
 10381f0:	c3 	ret
 10381f1:	48 8d 3d 68 61 09 00 	lea	rdi, [rip + 614760]
 10381f8:	e8 e3 a7 01 00 	call	108515 <_runtime.gcWriteBarrier>
 10381fd:	e9 45 ff ff ff 	jmp	-187 <_runtime.goargs+0x77>
 1038202:	48 89 d0 	mov	rax, rdx
 1038205:	48 89 d9 	mov	rcx, rbx
 1038208:	e8 43 b1 01 00 	call	110915 <_runtime.panicIndex>
 103820d:	90 	nop
 103820e:	e8 bd 89 01 00 	call	100797 <_runtime.morestack_noctxt>
 1038213:	e9 b8 fe ff ff 	jmp	-328 <_runtime.goargs>
 1038218:	cc 	int3
 1038219:	cc 	int3
 103821a:	cc 	int3
 103821b:	cc 	int3
 103821c:	cc 	int3
 103821d:	cc 	int3
 103821e:	cc 	int3
 103821f:	cc 	int3

_runtime.goenvs_unix:
 1038220:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038229:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103822d:	0f 86 2d 01 00 00 	jbe	301 <_runtime.goenvs_unix+0x140>
 1038233:	48 83 ec 38 	sub	rsp, 56
 1038237:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 103823c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1038241:	31 c0 	xor	eax, eax
 1038243:	eb 02 	jmp	2 <_runtime.goenvs_unix+0x27>
 1038245:	ff c0 	inc	eax
 1038247:	8b 0d 2f f5 0b 00 	mov	ecx, dword ptr [rip + 783663]
 103824d:	8d 0c 08 	lea	ecx, [rax + rcx]
 1038250:	8d 49 01 	lea	ecx, [rcx + 1]
 1038253:	48 63 c9 	movsxd	rcx, ecx
 1038256:	48 c1 e1 03 	shl	rcx, 3
 103825a:	48 03 0d a7 5f 09 00 	add	rcx, qword ptr [rip + 614311]
 1038261:	48 83 39 00 	cmp	qword ptr [rcx], 0
 1038265:	75 de 	jne	-34 <_runtime.goenvs_unix+0x25>
 1038267:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 103826b:	48 8d 0d 2e 7d 02 00 	lea	rcx, [rip + 163118]
 1038272:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1038276:	48 63 c8 	movsxd	rcx, eax
 1038279:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103827e:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1038283:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1038288:	e8 93 48 00 00 	call	18579 <_runtime.makeslice>
 103828d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1038292:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1038297:	48 89 0d ea 60 09 00 	mov	qword ptr [rip + 614634], rcx
 103829e:	48 89 0d eb 60 09 00 	mov	qword ptr [rip + 614635], rcx
 10382a5:	83 3d 54 f6 0b 00 00 	cmp	dword ptr [rip + 783956], 0
 10382ac:	0f 85 94 00 00 00 	jne	148 <_runtime.goenvs_unix+0x126>
 10382b2:	48 89 05 c7 60 09 00 	mov	qword ptr [rip + 614599], rax
 10382b9:	31 c0 	xor	eax, eax
 10382bb:	eb 03 	jmp	3 <_runtime.goenvs_unix+0xa0>
 10382bd:	8d 42 01 	lea	eax, [rdx + 1]
 10382c0:	8b 4c 24 20 	mov	ecx, dword ptr [rsp + 32]
 10382c4:	39 c8 	cmp	eax, ecx
 10382c6:	7d 74 	jge	116 <_runtime.goenvs_unix+0x11c>
 10382c8:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 10382cc:	8b 0d aa f4 0b 00 	mov	ecx, dword ptr [rip + 783530]
 10382d2:	8d 0c 01 	lea	ecx, [rcx + rax]
 10382d5:	8d 49 01 	lea	ecx, [rcx + 1]
 10382d8:	48 63 c9 	movsxd	rcx, ecx
 10382db:	48 c1 e1 03 	shl	rcx, 3
 10382df:	48 03 0d 22 5f 09 00 	add	rcx, qword ptr [rip + 614178]
 10382e6:	48 8b 09 	mov	rcx, qword ptr [rcx]
 10382e9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10382ed:	e8 3e 8a 00 00 	call	35390 <_runtime.gostring>
 10382f2:	48 8b 05 87 60 09 00 	mov	rax, qword ptr [rip + 614535]
 10382f9:	48 8b 0d 88 60 09 00 	mov	rcx, qword ptr [rip + 614536]
 1038300:	8b 54 24 24 	mov	edx, dword ptr [rsp + 36]
 1038304:	48 63 da 	movsxd	rbx, edx
 1038307:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 103830c:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 1038311:	48 39 cb 	cmp	rbx, rcx
 1038314:	73 41 	jae	65 <_runtime.goenvs_unix+0x137>
 1038316:	48 c1 e3 04 	shl	rbx, 4
 103831a:	48 89 7c 18 08 	mov	qword ptr [rax + rbx + 8], rdi
 103831f:	48 8d 3c 18 	lea	rdi, [rax + rbx]
 1038323:	83 3d d6 f5 0b 00 00 	cmp	dword ptr [rip + 783830], 0
 103832a:	75 06 	jne	6 <_runtime.goenvs_unix+0x112>
 103832c:	48 89 34 18 	mov	qword ptr [rax + rbx], rsi
 1038330:	eb 8b 	jmp	-117 <_runtime.goenvs_unix+0x9d>
 1038332:	48 89 f0 	mov	rax, rsi
 1038335:	e8 a6 a6 01 00 	call	108198 <_runtime.gcWriteBarrier>
 103833a:	eb 81 	jmp	-127 <_runtime.goenvs_unix+0x9d>
 103833c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1038341:	48 83 c4 38 	add	rsp, 56
 1038345:	c3 	ret
 1038346:	48 8d 3d 33 60 09 00 	lea	rdi, [rip + 614451]
 103834d:	e8 8e a6 01 00 	call	108174 <_runtime.gcWriteBarrier>
 1038352:	e9 62 ff ff ff 	jmp	-158 <_runtime.goenvs_unix+0x99>
 1038357:	48 89 d8 	mov	rax, rbx
 103835a:	e8 f1 af 01 00 	call	110577 <_runtime.panicIndex>
 103835f:	90 	nop
 1038360:	e8 6b 88 01 00 	call	100459 <_runtime.morestack_noctxt>
 1038365:	e9 b6 fe ff ff 	jmp	-330 <_runtime.goenvs_unix>
 103836a:	cc 	int3
 103836b:	cc 	int3
 103836c:	cc 	int3
 103836d:	cc 	int3
 103836e:	cc 	int3
 103836f:	cc 	int3

_runtime.testAtomic64:
 1038370:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038379:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103837d:	0f 86 2c 02 00 00 	jbe	556 <_runtime.testAtomic64+0x23f>
 1038383:	48 83 ec 18 	sub	rsp, 24
 1038387:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103838c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1038391:	48 c7 05 3c f5 0b 00 2a 00 00 00 	mov	qword ptr [rip + 783676], 42
 103839c:	48 c7 05 29 f5 0b 00 00 00 00 00 	mov	qword ptr [rip + 783657], 0
 10383a7:	31 c0 	xor	eax, eax
 10383a9:	48 8d 0d 28 f5 0b 00 	lea	rcx, [rip + 783656]
 10383b0:	ba 01 00 00 00 	mov	edx, 1
 10383b5:	f0 	lock
 10383b6:	48 0f b1 11 	cmpxchg	qword ptr [rcx], rdx
 10383ba:	0f 94 c3 	sete	bl
 10383bd:	84 db 	test	bl, bl
 10383bf:	0f 85 d0 01 00 00 	jne	464 <_runtime.testAtomic64+0x225>
 10383c5:	48 83 3d 03 f5 0b 00 00 	cmp	qword ptr [rip + 783619], 0
 10383cd:	0f 85 a9 01 00 00 	jne	425 <_runtime.testAtomic64+0x20c>
 10383d3:	48 c7 05 f2 f4 0b 00 2a 00 00 00 	mov	qword ptr [rip + 783602], 42
 10383de:	b8 2a 00 00 00 	mov	eax, 42
 10383e3:	f0 	lock
 10383e4:	48 0f b1 11 	cmpxchg	qword ptr [rcx], rdx
 10383e8:	0f 94 c2 	sete	dl
 10383eb:	84 d2 	test	dl, dl
 10383ed:	0f 84 70 01 00 00 	je	368 <_runtime.testAtomic64+0x1f3>
 10383f3:	48 83 3d d5 f4 0b 00 2a 	cmp	qword ptr [rip + 783573], 42
 10383fb:	0f 85 49 01 00 00 	jne	329 <_runtime.testAtomic64+0x1da>
 1038401:	48 83 3d cf f4 0b 00 01 	cmp	qword ptr [rip + 783567], 1
 1038409:	0f 85 3b 01 00 00 	jne	315 <_runtime.testAtomic64+0x1da>
 103840f:	48 8b 05 c2 f4 0b 00 	mov	rax, qword ptr [rip + 783554]
 1038416:	48 83 f8 01 	cmp	rax, 1
 103841a:	0f 85 11 01 00 00 	jne	273 <_runtime.testAtomic64+0x1c1>
 1038420:	48 b8 01 00 00 00 00 01 00 00 	movabs	rax, 1099511627777
 103842a:	48 87 01 	xchg	qword ptr [rcx], rax
 103842d:	48 8b 05 a4 f4 0b 00 	mov	rax, qword ptr [rip + 783524]
 1038434:	48 ba 01 00 00 00 00 01 00 00 	movabs	rdx, 1099511627777
 103843e:	48 39 c2 	cmp	rdx, rax
 1038441:	0f 85 d1 00 00 00 	jne	209 <_runtime.testAtomic64+0x1a8>
 1038447:	48 b8 01 00 00 00 00 01 00 00 	movabs	rax, 1099511627777
 1038451:	f0 	lock
 1038452:	48 0f c1 01 	xadd	qword ptr [rcx], rax
 1038456:	48 ba 01 00 00 00 00 01 00 00 	movabs	rdx, 1099511627777
 1038460:	48 01 d0 	add	rax, rdx
 1038463:	48 ba 02 00 00 00 00 02 00 00 	movabs	rdx, 2199023255554
 103846d:	48 39 c2 	cmp	rdx, rax
 1038470:	0f 85 89 00 00 00 	jne	137 <_runtime.testAtomic64+0x18f>
 1038476:	48 8b 05 5b f4 0b 00 	mov	rax, qword ptr [rip + 783451]
 103847d:	48 39 d0 	cmp	rax, rdx
 1038480:	75 64 	jne	100 <_runtime.testAtomic64+0x176>
 1038482:	48 b8 03 00 00 00 00 03 00 00 	movabs	rax, 3298534883331
 103848c:	48 87 01 	xchg	qword ptr [rcx], rax
 103848f:	48 39 d0 	cmp	rax, rdx
 1038492:	75 39 	jne	57 <_runtime.testAtomic64+0x15d>
 1038494:	48 8b 05 3d f4 0b 00 	mov	rax, qword ptr [rip + 783421]
 103849b:	48 b9 03 00 00 00 00 03 00 00 	movabs	rcx, 3298534883331
 10384a5:	48 39 c1 	cmp	rcx, rax
 10384a8:	75 0a 	jne	10 <_runtime.testAtomic64+0x144>
 10384aa:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10384af:	48 83 c4 18 	add	rsp, 24
 10384b3:	c3 	ret
 10384b4:	48 8d 05 ff b2 03 00 	lea	rax, [rip + 242431]
 10384bb:	48 89 04 24 	mov	qword ptr [rsp], rax
 10384bf:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10384c8:	e8 93 08 ff ff 	call	-63341 <_runtime.throw>
 10384cd:	48 8d 05 e6 b2 03 00 	lea	rax, [rip + 242406]
 10384d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10384d8:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10384e1:	e8 7a 08 ff ff 	call	-63366 <_runtime.throw>
 10384e6:	48 8d 05 c0 b2 03 00 	lea	rax, [rip + 242368]
 10384ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10384f1:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10384fa:	e8 61 08 ff ff 	call	-63391 <_runtime.throw>
 10384ff:	48 8d 05 a7 b2 03 00 	lea	rax, [rip + 242343]
 1038506:	48 89 04 24 	mov	qword ptr [rsp], rax
 103850a:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1038513:	e8 48 08 ff ff 	call	-63416 <_runtime.throw>
 1038518:	48 8d 05 db b3 03 00 	lea	rax, [rip + 242651]
 103851f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038523:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 103852c:	e8 2f 08 ff ff 	call	-63441 <_runtime.throw>
 1038531:	48 8d 05 27 b2 03 00 	lea	rax, [rip + 242215]
 1038538:	48 89 04 24 	mov	qword ptr [rsp], rax
 103853c:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 1038545:	e8 16 08 ff ff 	call	-63466 <_runtime.throw>
 103854a:	48 8d 05 46 b0 03 00 	lea	rax, [rip + 241734]
 1038551:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038555:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 103855e:	e8 fd 07 ff ff 	call	-63491 <_runtime.throw>
 1038563:	48 8d 05 2d b0 03 00 	lea	rax, [rip + 241709]
 103856a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103856e:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1038577:	e8 e4 07 ff ff 	call	-63516 <_runtime.throw>
 103857c:	48 8d 05 14 b0 03 00 	lea	rax, [rip + 241684]
 1038583:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038587:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 1038590:	e8 cb 07 ff ff 	call	-63541 <_runtime.throw>
 1038595:	48 8d 05 fb af 03 00 	lea	rax, [rip + 241659]
 103859c:	48 89 04 24 	mov	qword ptr [rsp], rax
 10385a0:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 10385a9:	e8 b2 07 ff ff 	call	-63566 <_runtime.throw>
 10385ae:	90 	nop
 10385af:	e8 1c 86 01 00 	call	99868 <_runtime.morestack_noctxt>
 10385b4:	e9 b7 fd ff ff 	jmp	-585 <_runtime.testAtomic64>
 10385b9:	cc 	int3
 10385ba:	cc 	int3
 10385bb:	cc 	int3
 10385bc:	cc 	int3
 10385bd:	cc 	int3
 10385be:	cc 	int3
 10385bf:	cc 	int3

_runtime.check:
 10385c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10385c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10385cd:	0f 86 66 03 00 00 	jbe	870 <_runtime.check+0x379>
 10385d3:	48 83 ec 40 	sub	rsp, 64
 10385d7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 10385dc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10385e1:	c7 44 24 2c 00 00 00 00 	mov	dword ptr [rsp + 44], 0
 10385e9:	0f 57 c0 	xorps	xmm0, xmm0
 10385ec:	f3 0f 11 44 24 28 	movss	dword ptr [rsp + 40], xmm0
 10385f2:	0f 57 c0 	xorps	xmm0, xmm0
 10385f5:	f2 0f 11 44 24 30 	movsd	qword ptr [rsp + 48], xmm0
 10385fb:	c7 44 24 24 00 00 00 00 	mov	dword ptr [rsp + 36], 0
 1038603:	48 b8 31 ce 57 4b 3a 0b 00 00 	movabs	rax, 12345000054321
 103860d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038611:	c7 44 24 08 00 ca 9a 3b 	mov	dword ptr [rsp + 8], 1000000000
 1038619:	48 8d 44 24 2c 	lea	rax, [rsp + 44]
 103861e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1038623:	e8 08 08 00 00 	call	2056 <_runtime.timediv>
 1038628:	81 7c 24 18 39 30 00 00 	cmp	dword ptr [rsp + 24], 12345
 1038630:	0f 85 e9 02 00 00 	jne	745 <_runtime.check+0x35f>
 1038636:	81 7c 24 2c 31 d4 00 00 	cmp	dword ptr [rsp + 44], 54321
 103863e:	0f 85 db 02 00 00 	jne	731 <_runtime.check+0x35f>
 1038644:	c7 44 24 20 00 00 00 00 	mov	dword ptr [rsp + 32], 0
 103864c:	c7 44 24 20 01 00 00 00 	mov	dword ptr [rsp + 32], 1
 1038654:	b8 01 00 00 00 	mov	eax, 1
 1038659:	48 8d 4c 24 20 	lea	rcx, [rsp + 32]
 103865e:	ba 02 00 00 00 	mov	edx, 2
 1038663:	f0 	lock
 1038664:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 1038667:	0f 94 c2 	sete	dl
 103866a:	84 d2 	test	dl, dl
 103866c:	0f 84 94 02 00 00 	je	660 <_runtime.check+0x346>
 1038672:	83 7c 24 20 02 	cmp	dword ptr [rsp + 32], 2
 1038677:	0f 85 70 02 00 00 	jne	624 <_runtime.check+0x32d>
 103867d:	c7 44 24 20 04 00 00 00 	mov	dword ptr [rsp + 32], 4
 1038685:	b8 05 00 00 00 	mov	eax, 5
 103868a:	ba 06 00 00 00 	mov	edx, 6
 103868f:	f0 	lock
 1038690:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 1038693:	0f 94 c2 	sete	dl
 1038696:	84 d2 	test	dl, dl
 1038698:	0f 85 36 02 00 00 	jne	566 <_runtime.check+0x314>
 103869e:	83 7c 24 20 04 	cmp	dword ptr [rsp + 32], 4
 10386a3:	0f 85 12 02 00 00 	jne	530 <_runtime.check+0x2fb>
 10386a9:	c7 44 24 20 ff ff ff ff 	mov	dword ptr [rsp + 32], 4294967295
 10386b1:	b8 ff ff ff ff 	mov	eax, 4294967295
 10386b6:	ba fe ff ff ff 	mov	edx, 4294967294
 10386bb:	f0 	lock
 10386bc:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 10386bf:	0f 94 c1 	sete	cl
 10386c2:	84 c9 	test	cl, cl
 10386c4:	0f 84 d8 01 00 00 	je	472 <_runtime.check+0x2e2>
 10386ca:	83 7c 24 20 fe 	cmp	dword ptr [rsp + 32], -2
 10386cf:	0f 85 b4 01 00 00 	jne	436 <_runtime.check+0x2c9>
 10386d5:	c7 44 24 24 00 00 00 00 	mov	dword ptr [rsp + 36], 0
 10386dd:	c7 44 24 24 01 01 01 01 	mov	dword ptr [rsp + 36], 16843009
 10386e5:	b8 f0 ff ff ff 	mov	eax, 4294967280
 10386ea:	48 8d 4c 24 25 	lea	rcx, [rsp + 37]
 10386ef:	f0 	lock
 10386f0:	08 01 	or	byte ptr [rcx], al
 10386f2:	80 7c 24 24 01 	cmp	byte ptr [rsp + 36], 1
 10386f7:	0f 85 73 01 00 00 	jne	371 <_runtime.check+0x2b0>
 10386fd:	80 7c 24 25 f1 	cmp	byte ptr [rsp + 37], -15
 1038702:	0f 85 68 01 00 00 	jne	360 <_runtime.check+0x2b0>
 1038708:	80 7c 24 26 01 	cmp	byte ptr [rsp + 38], 1
 103870d:	0f 85 5d 01 00 00 	jne	349 <_runtime.check+0x2b0>
 1038713:	80 7c 24 27 01 	cmp	byte ptr [rsp + 39], 1
 1038718:	0f 85 52 01 00 00 	jne	338 <_runtime.check+0x2b0>
 103871e:	c7 44 24 24 00 00 00 00 	mov	dword ptr [rsp + 36], 0
 1038726:	c7 44 24 24 ff ff ff ff 	mov	dword ptr [rsp + 36], 4294967295
 103872e:	b8 01 00 00 00 	mov	eax, 1
 1038733:	f0 	lock
 1038734:	20 01 	and	byte ptr [rcx], al
 1038736:	80 7c 24 24 ff 	cmp	byte ptr [rsp + 36], -1
 103873b:	0f 85 16 01 00 00 	jne	278 <_runtime.check+0x297>
 1038741:	80 7c 24 25 01 	cmp	byte ptr [rsp + 37], 1
 1038746:	0f 85 0b 01 00 00 	jne	267 <_runtime.check+0x297>
 103874c:	80 7c 24 26 ff 	cmp	byte ptr [rsp + 38], -1
 1038751:	0f 85 00 01 00 00 	jne	256 <_runtime.check+0x297>
 1038757:	80 7c 24 27 ff 	cmp	byte ptr [rsp + 39], -1
 103875c:	0f 85 f5 00 00 00 	jne	245 <_runtime.check+0x297>
 1038762:	48 c7 44 24 30 ff ff ff ff 	mov	qword ptr [rsp + 48], -1
 103876b:	f2 0f 10 44 24 30 	movsd	xmm0, qword ptr [rsp + 48]
 1038771:	f2 0f 10 0d 1f b0 04 00 	movsd	xmm1, qword ptr [rip + 307231]
 1038779:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 103877d:	75 06 	jne	6 <_runtime.check+0x1c5>
 103877f:	0f 8b b9 00 00 00 	jnp	185 <_runtime.check+0x27e>
 1038785:	75 06 	jne	6 <_runtime.check+0x1cd>
 1038787:	0f 8b 98 00 00 00 	jnp	152 <_runtime.check+0x265>
 103878d:	c7 44 24 28 ff ff ff ff 	mov	dword ptr [rsp + 40], 4294967295
 1038795:	f3 0f 10 44 24 28 	movss	xmm0, dword ptr [rsp + 40]
 103879b:	f3 0f 10 0d 2d af 04 00 	movss	xmm1, dword ptr [rip + 306989]
 10387a3:	0f 2e c8 	ucomiss	xmm1, xmm0
 10387a6:	75 02 	jne	2 <_runtime.check+0x1ea>
 10387a8:	7b 62 	jnp	98 <_runtime.check+0x24c>
 10387aa:	e8 c1 fb ff ff 	call	-1087 <_runtime.testAtomic64>
 10387af:	c7 04 24 00 08 00 00 	mov	dword ptr [rsp], 2048
 10387b6:	e8 f5 65 00 00 	call	26101 <_runtime.round2>
 10387bb:	81 7c 24 08 00 08 00 00 	cmp	dword ptr [rsp + 8], 2048
 10387c3:	75 2e 	jne	46 <_runtime.check+0x233>
 10387c5:	e8 e6 a1 01 00 	call	106982 <_runtime.checkASM>
 10387ca:	80 3c 24 00 	cmp	byte ptr [rsp], 0
 10387ce:	74 0a 	je	10 <_runtime.check+0x21a>
 10387d0:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10387d5:	48 83 c4 40 	add	rsp, 64
 10387d9:	c3 	ret
 10387da:	48 8d 05 39 bd 03 00 	lea	rax, [rip + 245049]
 10387e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10387e5:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 10387ee:	e8 6d 05 ff ff 	call	-64147 <_runtime.throw>
 10387f3:	48 8d 05 0f ca 03 00 	lea	rax, [rip + 248335]
 10387fa:	48 89 04 24 	mov	qword ptr [rsp], rax
 10387fe:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1038807:	e8 54 05 ff ff 	call	-64172 <_runtime.throw>
 103880c:	48 8d 05 df ab 03 00 	lea	rax, [rip + 240607]
 1038813:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038817:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1038820:	e8 3b 05 ff ff 	call	-64197 <_runtime.throw>
 1038825:	48 8d 05 dc ab 03 00 	lea	rax, [rip + 240604]
 103882c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038830:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1038839:	e8 22 05 ff ff 	call	-64222 <_runtime.throw>
 103883e:	48 8d 05 b8 ab 03 00 	lea	rax, [rip + 240568]
 1038845:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038849:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1038852:	e8 09 05 ff ff 	call	-64247 <_runtime.throw>
 1038857:	48 8d 05 1d aa 03 00 	lea	rax, [rip + 240157]
 103885e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038862:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 103886b:	e8 f0 04 ff ff 	call	-64272 <_runtime.throw>
 1038870:	48 8d 05 be a8 03 00 	lea	rax, [rip + 239806]
 1038877:	48 89 04 24 	mov	qword ptr [rsp], rax
 103887b:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 1038884:	e8 d7 04 ff ff 	call	-64297 <_runtime.throw>
 1038889:	48 8d 05 af a4 03 00 	lea	rax, [rip + 238767]
 1038890:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038894:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103889d:	e8 be 04 ff ff 	call	-64322 <_runtime.throw>
 10388a2:	48 8d 05 92 a4 03 00 	lea	rax, [rip + 238738]
 10388a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10388ad:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 10388b6:	e8 a5 04 ff ff 	call	-64347 <_runtime.throw>
 10388bb:	48 8d 05 75 a4 03 00 	lea	rax, [rip + 238709]
 10388c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10388c6:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 10388cf:	e8 8c 04 ff ff 	call	-64372 <_runtime.throw>
 10388d4:	48 8d 05 58 a4 03 00 	lea	rax, [rip + 238680]
 10388db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10388df:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 10388e8:	e8 73 04 ff ff 	call	-64397 <_runtime.throw>
 10388ed:	48 8d 05 3b a4 03 00 	lea	rax, [rip + 238651]
 10388f4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10388f8:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1038901:	e8 5a 04 ff ff 	call	-64422 <_runtime.throw>
 1038906:	48 8d 05 1e a4 03 00 	lea	rax, [rip + 238622]
 103890d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038911:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103891a:	e8 41 04 ff ff 	call	-64447 <_runtime.throw>
 103891f:	48 8d 05 a0 aa 03 00 	lea	rax, [rip + 240288]
 1038926:	48 89 04 24 	mov	qword ptr [rsp], rax
 103892a:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1038933:	e8 28 04 ff ff 	call	-64472 <_runtime.throw>
 1038938:	90 	nop
 1038939:	e8 92 82 01 00 	call	98962 <_runtime.morestack_noctxt>
 103893e:	e9 7d fc ff ff 	jmp	-899 <_runtime.check>
 1038943:	cc 	int3
 1038944:	cc 	int3
 1038945:	cc 	int3
 1038946:	cc 	int3
 1038947:	cc 	int3
 1038948:	cc 	int3
 1038949:	cc 	int3
 103894a:	cc 	int3
 103894b:	cc 	int3
 103894c:	cc 	int3
 103894d:	cc 	int3
 103894e:	cc 	int3
 103894f:	cc 	int3

_runtime.parsedebugvars:
 1038950:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038959:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 103895e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1038962:	0f 86 51 03 00 00 	jbe	849 <_runtime.parsedebugvars+0x369>
 1038968:	48 81 ec 88 00 00 00 	sub	rsp, 136
 103896f:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1038977:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 103897f:	c7 05 bb f0 0b 00 01 00 00 00 	mov	dword ptr [rip + 782523], 1
 1038989:	c7 05 d1 f0 0b 00 01 00 00 00 	mov	dword ptr [rip + 782545], 1
 1038993:	48 8d 05 36 a5 03 00 	lea	rax, [rip + 238902]
 103899a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103899e:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 10389a7:	e8 04 cb fc ff 	call	-210172 <_runtime.gogetenv>
 10389ac:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10389b1:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10389b6:	eb 0a 	jmp	10 <_runtime.parsedebugvars+0x72>
 10389b8:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10389bd:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10389c2:	48 85 c0 	test	rax, rax
 10389c5:	0f 84 86 02 00 00 	je	646 <_runtime.parsedebugvars+0x301>
 10389cb:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 10389d0:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10389d5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10389d9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10389de:	48 8d 15 77 a2 03 00 	lea	rdx, [rip + 238199]
 10389e5:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10389ea:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 10389f3:	e8 08 84 00 00 	call	33800 <_runtime.index>
 10389f8:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10389fd:	48 85 c9 	test	rcx, rcx
 1038a00:	0f 8d 09 02 00 00 	jge	521 <_runtime.parsedebugvars+0x2bf>
 1038a06:	31 c0 	xor	eax, eax
 1038a08:	31 c9 	xor	ecx, ecx
 1038a0a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1038a0f:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1038a14:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1038a19:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1038a1e:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1038a23:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1038a27:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1038a2c:	48 8d 35 2f a2 03 00 	lea	rsi, [rip + 238127]
 1038a33:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1038a38:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1038a41:	e8 ba 83 00 00 	call	33722 <_runtime.index>
 1038a46:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1038a4b:	48 85 c9 	test	rcx, rcx
 1038a4e:	0f 8c 64 ff ff ff 	jl	-156 <_runtime.parsedebugvars+0x68>
 1038a54:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1038a59:	48 39 d1 	cmp	rcx, rdx
 1038a5c:	0f 87 44 02 00 00 	ja	580 <_runtime.parsedebugvars+0x356>
 1038a62:	48 8d 41 01 	lea	rax, [rcx + 1]
 1038a66:	48 39 d0 	cmp	rax, rdx
 1038a69:	0f 87 2f 02 00 00 	ja	559 <_runtime.parsedebugvars+0x34e>
 1038a6f:	48 29 c2 	sub	rdx, rax
 1038a72:	48 89 d3 	mov	rbx, rdx
 1038a75:	48 f7 da 	neg	rdx
 1038a78:	48 c1 fa 3f 	sar	rdx, 63
 1038a7c:	48 21 c2 	and	rdx, rax
 1038a7f:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1038a84:	48 01 c2 	add	rdx, rax
 1038a87:	48 83 f9 0e 	cmp	rcx, 14
 1038a8b:	0f 85 6f 01 00 00 	jne	367 <_runtime.parsedebugvars+0x2b0>
 1038a91:	48 be 6d 65 6d 70 72 6f 66 69 	movabs	rsi, 7594880358910092653
 1038a9b:	48 39 30 	cmp	qword ptr [rax], rsi
 1038a9e:	75 15 	jne	21 <_runtime.parsedebugvars+0x165>
 1038aa0:	81 78 08 6c 65 72 61 	cmp	dword ptr [rax + 8], 1634887020
 1038aa7:	75 0c 	jne	12 <_runtime.parsedebugvars+0x165>
 1038aa9:	66 81 78 0c 74 65 	cmp	word ptr [rax + 12], 25972
 1038aaf:	0f 84 1b 01 00 00 	je	283 <_runtime.parsedebugvars+0x280>
 1038ab5:	48 8b 3d f4 3d 09 00 	mov	rdi, qword ptr [rip + 605684]
 1038abc:	4c 8b 05 f5 3d 09 00 	mov	r8, qword ptr [rip + 605685]
 1038ac3:	4d 85 c0 	test	r8, r8
 1038ac6:	0f 8e ec fe ff ff 	jle	-276 <_runtime.parsedebugvars+0x68>
 1038acc:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1038ad1:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 1038ad6:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1038adb:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 1038ae0:	45 31 c9 	xor	r9d, r9d
 1038ae3:	eb 04 	jmp	4 <_runtime.parsedebugvars+0x199>
 1038ae5:	48 83 c7 18 	add	rdi, 24
 1038ae9:	4c 8b 57 10 	mov	r10, qword ptr [rdi + 16]
 1038aed:	4c 8b 5f 08 	mov	r11, qword ptr [rdi + 8]
 1038af1:	4c 8b 27 	mov	r12, qword ptr [rdi]
 1038af4:	49 39 cb 	cmp	r11, rcx
 1038af7:	74 0d 	je	13 <_runtime.parsedebugvars+0x1b6>
 1038af9:	49 ff c1 	inc	r9
 1038afc:	4d 39 c1 	cmp	r9, r8
 1038aff:	7c e4 	jl	-28 <_runtime.parsedebugvars+0x195>
 1038b01:	e9 b2 fe ff ff 	jmp	-334 <_runtime.parsedebugvars+0x68>
 1038b06:	48 89 7c 24 78 	mov	qword ptr [rsp + 120], rdi
 1038b0b:	4c 89 4c 24 40 	mov	qword ptr [rsp + 64], r9
 1038b10:	4c 89 54 24 70 	mov	qword ptr [rsp + 112], r10
 1038b15:	4c 89 24 24 	mov	qword ptr [rsp], r12
 1038b19:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1038b1e:	4c 89 5c 24 10 	mov	qword ptr [rsp + 16], r11
 1038b23:	e8 c8 95 fc ff 	call	-223800 <_runtime.memequal>
 1038b28:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1038b2d:	75 2f 	jne	47 <_runtime.parsedebugvars+0x20e>
 1038b2f:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1038b34:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038b39:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1038b3e:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1038b43:	48 be 6d 65 6d 70 72 6f 66 69 	movabs	rsi, 7594880358910092653
 1038b4d:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 1038b52:	4c 8b 44 24 48 	mov	r8, qword ptr [rsp + 72]
 1038b57:	4c 8b 4c 24 40 	mov	r9, qword ptr [rsp + 64]
 1038b5c:	eb 9b 	jmp	-101 <_runtime.parsedebugvars+0x1a9>
 1038b5e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1038b63:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038b67:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1038b6c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1038b71:	e8 8a 83 00 00 	call	33674 <_runtime.atoi>
 1038b76:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1038b7b:	48 63 c8 	movsxd	rcx, eax
 1038b7e:	48 39 c1 	cmp	rcx, rax
 1038b81:	b9 00 00 00 00 	mov	ecx, 0
 1038b86:	0f 44 c8 	cmove	ecx, eax
 1038b89:	0f 94 c0 	sete	al
 1038b8c:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 1038b91:	21 d0 	and	eax, edx
 1038b93:	84 c0 	test	al, al
 1038b95:	74 07 	je	7 <_runtime.parsedebugvars+0x24e>
 1038b97:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1038b9c:	89 08 	mov	dword ptr [rax], ecx
 1038b9e:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1038ba3:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038ba8:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1038bad:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 1038bb2:	48 be 6d 65 6d 70 72 6f 66 69 	movabs	rsi, 7594880358910092653
 1038bbc:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 1038bc1:	4c 8b 44 24 48 	mov	r8, qword ptr [rsp + 72]
 1038bc6:	4c 8b 4c 24 40 	mov	r9, qword ptr [rsp + 64]
 1038bcb:	e9 29 ff ff ff 	jmp	-215 <_runtime.parsedebugvars+0x1a9>
 1038bd0:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1038bd4:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1038bd9:	e8 22 83 00 00 	call	33570 <_runtime.atoi>
 1038bde:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1038be3:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1038be8:	74 07 	je	7 <_runtime.parsedebugvars+0x2a1>
 1038bea:	48 89 05 97 25 09 00 	mov	qword ptr [rip + 599447], rax
 1038bf1:	48 be 6d 65 6d 70 72 6f 66 69 	movabs	rsi, 7594880358910092653
 1038bfb:	e9 b8 fd ff ff 	jmp	-584 <_runtime.parsedebugvars+0x68>
 1038c00:	48 be 6d 65 6d 70 72 6f 66 69 	movabs	rsi, 7594880358910092653
 1038c0a:	e9 a6 fe ff ff 	jmp	-346 <_runtime.parsedebugvars+0x165>
 1038c0f:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1038c14:	48 39 d1 	cmp	rcx, rdx
 1038c17:	0f 87 96 00 00 00 	ja	150 <_runtime.parsedebugvars+0x363>
 1038c1d:	48 8d 41 01 	lea	rax, [rcx + 1]
 1038c21:	48 39 d0 	cmp	rax, rdx
 1038c24:	0f 87 81 00 00 00 	ja	129 <_runtime.parsedebugvars+0x35b>
 1038c2a:	48 29 c2 	sub	rdx, rax
 1038c2d:	48 89 d3 	mov	rbx, rdx
 1038c30:	48 f7 da 	neg	rdx
 1038c33:	48 c1 fa 3f 	sar	rdx, 63
 1038c37:	48 21 c2 	and	rdx, rax
 1038c3a:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 1038c3f:	48 8d 3c 16 	lea	rdi, [rsi + rdx]
 1038c43:	48 89 d8 	mov	rax, rbx
 1038c46:	48 89 ca 	mov	rdx, rcx
 1038c49:	48 89 f9 	mov	rcx, rdi
 1038c4c:	e9 be fd ff ff 	jmp	-578 <_runtime.parsedebugvars+0xbf>
 1038c51:	48 8d 05 58 a7 03 00 	lea	rax, [rip + 239448]
 1038c58:	48 89 04 24 	mov	qword ptr [rsp], rax
 1038c5c:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1038c65:	e8 46 c8 fc ff 	call	-210874 <_runtime.gogetenv>
 1038c6a:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1038c6f:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1038c74:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1038c78:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1038c7d:	e8 4e 00 00 00 	call	78 <_runtime/debug.SetTraceback>
 1038c82:	8b 05 e4 24 09 00 	mov	eax, dword ptr [rip + 599268]
 1038c88:	89 05 3e eb 0b 00 	mov	dword ptr [rip + 781118], eax
 1038c8e:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1038c96:	48 81 c4 88 00 00 00 	add	rsp, 136
 1038c9d:	c3 	ret
 1038c9e:	48 89 d1 	mov	rcx, rdx
 1038ca1:	e8 0a a7 01 00 	call	108298 <_runtime.panicSliceB>
 1038ca6:	e8 c5 a6 01 00 	call	108229 <_runtime.panicSliceAlen>
 1038cab:	48 89 d1 	mov	rcx, rdx
 1038cae:	e8 fd a6 01 00 	call	108285 <_runtime.panicSliceB>
 1038cb3:	e8 b8 a6 01 00 	call	108216 <_runtime.panicSliceAlen>
 1038cb8:	90 	nop
 1038cb9:	e8 12 7f 01 00 	call	98066 <_runtime.morestack_noctxt>
 1038cbe:	e9 8d fc ff ff 	jmp	-883 <_runtime.parsedebugvars>
 1038cc3:	cc 	int3
 1038cc4:	cc 	int3
 1038cc5:	cc 	int3
 1038cc6:	cc 	int3
 1038cc7:	cc 	int3
 1038cc8:	cc 	int3
 1038cc9:	cc 	int3
 1038cca:	cc 	int3
 1038ccb:	cc 	int3
 1038ccc:	cc 	int3
 1038ccd:	cc 	int3
 1038cce:	cc 	int3
 1038ccf:	cc 	int3

_runtime/debug.SetTraceback:
 1038cd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038cd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1038cdd:	0f 86 35 01 00 00 	jbe	309 <_runtime/debug.SetTraceback+0x148>
 1038ce3:	48 83 ec 28 	sub	rsp, 40
 1038ce7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1038cec:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1038cf1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1038cf6:	48 83 f8 03 	cmp	rax, 3
 1038cfa:	0f 8f 90 00 00 00 	jg	144 <_runtime/debug.SetTraceback+0xc0>
 1038d00:	48 85 c0 	test	rax, rax
 1038d03:	75 35 	jne	53 <_runtime/debug.SetTraceback+0x6a>
 1038d05:	b8 04 00 00 00 	mov	eax, 4
 1038d0a:	80 3d 5a ea 0b 00 00 	cmp	byte ptr [rip + 780890], 0
 1038d11:	74 1c 	je	28 <_runtime/debug.SetTraceback+0x5f>
 1038d13:	83 c8 01 	or	eax, 1
 1038d16:	0b 05 b0 ea 0b 00 	or	eax, dword ptr [rip + 780976]
 1038d1c:	48 8d 0d 49 24 09 00 	lea	rcx, [rip + 599113]
 1038d23:	87 01 	xchg	dword ptr [rcx], eax
 1038d25:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1038d2a:	48 83 c4 28 	add	rsp, 40
 1038d2e:	c3 	ret
 1038d2f:	80 3d 33 ea 0b 00 00 	cmp	byte ptr [rip + 780851], 0
 1038d36:	75 db 	jne	-37 <_runtime/debug.SetTraceback+0x43>
 1038d38:	eb dc 	jmp	-36 <_runtime/debug.SetTraceback+0x46>
 1038d3a:	48 83 f8 03 	cmp	rax, 3
 1038d3e:	75 49 	jne	73 <_runtime/debug.SetTraceback+0xb9>
 1038d40:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038d45:	66 81 39 61 6c 	cmp	word ptr [rcx], 27745
 1038d4a:	75 0d 	jne	13 <_runtime/debug.SetTraceback+0x89>
 1038d4c:	80 79 02 6c 	cmp	byte ptr [rcx + 2], 108
 1038d50:	75 07 	jne	7 <_runtime/debug.SetTraceback+0x89>
 1038d52:	b8 06 00 00 00 	mov	eax, 6
 1038d57:	eb b1 	jmp	-79 <_runtime/debug.SetTraceback+0x3a>
 1038d59:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1038d5d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1038d62:	e8 99 81 00 00 	call	33177 <_runtime.atoi>
 1038d67:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1038d6c:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1038d71:	74 0f 	je	15 <_runtime/debug.SetTraceback+0xb2>
 1038d73:	89 c1 	mov	ecx, eax
 1038d75:	48 39 c1 	cmp	rcx, rax
 1038d78:	75 08 	jne	8 <_runtime/debug.SetTraceback+0xb2>
 1038d7a:	c1 e0 02 	shl	eax, 2
 1038d7d:	83 c8 02 	or	eax, 2
 1038d80:	eb 88 	jmp	-120 <_runtime/debug.SetTraceback+0x3a>
 1038d82:	b8 02 00 00 00 	mov	eax, 2
 1038d87:	eb 81 	jmp	-127 <_runtime/debug.SetTraceback+0x3a>
 1038d89:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038d8e:	eb c9 	jmp	-55 <_runtime/debug.SetTraceback+0x89>
 1038d90:	48 83 f8 04 	cmp	rax, 4
 1038d94:	75 14 	jne	20 <_runtime/debug.SetTraceback+0xda>
 1038d96:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038d9b:	81 39 6e 6f 6e 65 	cmp	dword ptr [rcx], 1701736302
 1038da1:	75 b6 	jne	-74 <_runtime/debug.SetTraceback+0x89>
 1038da3:	31 c0 	xor	eax, eax
 1038da5:	e9 60 ff ff ff 	jmp	-160 <_runtime/debug.SetTraceback+0x3a>
 1038daa:	48 83 f8 05 	cmp	rax, 5
 1038dae:	75 1d 	jne	29 <_runtime/debug.SetTraceback+0xfd>
 1038db0:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038db5:	81 39 63 72 61 73 	cmp	dword ptr [rcx], 1935766115
 1038dbb:	75 9c 	jne	-100 <_runtime/debug.SetTraceback+0x89>
 1038dbd:	80 79 04 68 	cmp	byte ptr [rcx + 4], 104
 1038dc1:	75 96 	jne	-106 <_runtime/debug.SetTraceback+0x89>
 1038dc3:	b8 0b 00 00 00 	mov	eax, 11
 1038dc8:	e9 3d ff ff ff 	jmp	-195 <_runtime/debug.SetTraceback+0x3a>
 1038dcd:	48 83 f8 06 	cmp	rax, 6
 1038dd1:	75 3b 	jne	59 <_runtime/debug.SetTraceback+0x13e>
 1038dd3:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038dd8:	81 39 73 69 6e 67 	cmp	dword ptr [rcx], 1735289203
 1038dde:	75 0c 	jne	12 <_runtime/debug.SetTraceback+0x11c>
 1038de0:	66 81 79 04 6c 65 	cmp	word ptr [rcx + 4], 25964
 1038de6:	0f 84 19 ff ff ff 	je	-231 <_runtime/debug.SetTraceback+0x35>
 1038dec:	81 39 73 79 73 74 	cmp	dword ptr [rcx], 1953724787
 1038df2:	0f 85 61 ff ff ff 	jne	-159 <_runtime/debug.SetTraceback+0x89>
 1038df8:	66 81 79 04 65 6d 	cmp	word ptr [rcx + 4], 28005
 1038dfe:	0f 85 55 ff ff ff 	jne	-171 <_runtime/debug.SetTraceback+0x89>
 1038e04:	b8 0a 00 00 00 	mov	eax, 10
 1038e09:	e9 fc fe ff ff 	jmp	-260 <_runtime/debug.SetTraceback+0x3a>
 1038e0e:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1038e13:	e9 41 ff ff ff 	jmp	-191 <_runtime/debug.SetTraceback+0x89>
 1038e18:	e8 b3 7d 01 00 	call	97715 <_runtime.morestack_noctxt>
 1038e1d:	e9 ae fe ff ff 	jmp	-338 <_runtime/debug.SetTraceback>
 1038e22:	cc 	int3
 1038e23:	cc 	int3
 1038e24:	cc 	int3
 1038e25:	cc 	int3
 1038e26:	cc 	int3
 1038e27:	cc 	int3
 1038e28:	cc 	int3
 1038e29:	cc 	int3
 1038e2a:	cc 	int3
 1038e2b:	cc 	int3
 1038e2c:	cc 	int3
 1038e2d:	cc 	int3
 1038e2e:	cc 	int3
 1038e2f:	cc 	int3

_runtime.timediv:
 1038e30:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1038e34:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1038e39:	b9 1e 00 00 00 	mov	ecx, 30
 1038e3e:	31 db 	xor	ebx, ebx
 1038e40:	eb 03 	jmp	3 <_runtime.timediv+0x15>
 1038e42:	48 ff c9 	dec	rcx
 1038e45:	48 85 c9 	test	rcx, rcx
 1038e48:	7c 13 	jl	19 <_runtime.timediv+0x2d>
 1038e4a:	48 63 f0 	movsxd	rsi, eax
 1038e4d:	48 d3 e6 	shl	rsi, cl
 1038e50:	48 39 f2 	cmp	rdx, rsi
 1038e53:	7c ed 	jl	-19 <_runtime.timediv+0x12>
 1038e55:	48 29 f2 	sub	rdx, rsi
 1038e58:	0f ab cb 	bts	ebx, ecx
 1038e5b:	eb e5 	jmp	-27 <_runtime.timediv+0x12>
 1038e5d:	48 63 c0 	movsxd	rax, eax
 1038e60:	48 39 c2 	cmp	rdx, rax
 1038e63:	7c 19 	jl	25 <_runtime.timediv+0x4e>
 1038e65:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1038e6a:	48 85 c0 	test	rax, rax
 1038e6d:	74 06 	je	6 <_runtime.timediv+0x45>
 1038e6f:	c7 00 00 00 00 00 	mov	dword ptr [rax], 0
 1038e75:	c7 44 24 20 ff ff ff 7f 	mov	dword ptr [rsp + 32], 2147483647
 1038e7d:	c3 	ret
 1038e7e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1038e83:	48 85 c0 	test	rax, rax
 1038e86:	74 02 	je	2 <_runtime.timediv+0x5a>
 1038e88:	89 10 	mov	dword ptr [rax], edx
 1038e8a:	89 5c 24 20 	mov	dword ptr [rsp + 32], ebx
 1038e8e:	c3 	ret
 1038e8f:	cc 	int3

_runtime.efaceOf:
 1038e90:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1038e95:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1038e9a:	c3 	ret
 1038e9b:	cc 	int3
 1038e9c:	cc 	int3
 1038e9d:	cc 	int3
 1038e9e:	cc 	int3
 1038e9f:	cc 	int3

_runtime.extendRandom:
 1038ea0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038ea9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1038ead:	0f 86 cb 00 00 00 	jbe	203 <_runtime.extendRandom+0xde>
 1038eb3:	48 83 ec 30 	sub	rsp, 48
 1038eb7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1038ebc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1038ec1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1038ec6:	48 85 c0 	test	rax, rax
 1038ec9:	b9 00 00 00 00 	mov	ecx, 0
 1038ece:	48 0f 4c c1 	cmovl	rax, rcx
 1038ed2:	eb 1f 	jmp	31 <_runtime.extendRandom+0x53>
 1038ed4:	88 04 1a 	mov	byte ptr [rdx + rbx], al
 1038ed7:	48 ff c6 	inc	rsi
 1038eda:	48 ff c3 	inc	rbx
 1038edd:	48 c1 e8 08 	shr	rax, 8
 1038ee1:	48 83 fe 08 	cmp	rsi, 8
 1038ee5:	7d 09 	jge	9 <_runtime.extendRandom+0x50>
 1038ee7:	48 39 cb 	cmp	rbx, rcx
 1038eea:	7d 04 	jge	4 <_runtime.extendRandom+0x50>
 1038eec:	72 e6 	jb	-26 <_runtime.extendRandom+0x34>
 1038eee:	eb 7a 	jmp	122 <_runtime.extendRandom+0xca>
 1038ef0:	48 89 d8 	mov	rax, rbx
 1038ef3:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1038ef8:	48 39 c8 	cmp	rax, rcx
 1038efb:	7d 63 	jge	99 <_runtime.extendRandom+0xc0>
 1038efd:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1038f02:	e8 b9 a3 00 00 	call	41913 <_runtime.nanotime1>
 1038f07:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1038f0c:	48 83 f8 10 	cmp	rax, 16
 1038f10:	b9 10 00 00 00 	mov	ecx, 16
 1038f15:	48 89 c2 	mov	rdx, rax
 1038f18:	48 0f 4f c1 	cmovg	rax, rcx
 1038f1c:	48 29 c2 	sub	rdx, rax
 1038f1f:	48 8b 34 24 	mov	rsi, qword ptr [rsp]
 1038f23:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 1038f28:	48 39 fa 	cmp	rdx, rdi
 1038f2b:	73 45 	jae	69 <_runtime.extendRandom+0xd2>
 1038f2d:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1038f32:	48 01 ca 	add	rdx, rcx
 1038f35:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1038f39:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1038f3e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1038f43:	e8 18 94 01 00 	call	103448 <_runtime.memhash>
 1038f48:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1038f4d:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1038f52:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1038f57:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1038f5c:	31 f6 	xor	esi, esi
 1038f5e:	eb 81 	jmp	-127 <_runtime.extendRandom+0x41>
 1038f60:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1038f65:	48 83 c4 30 	add	rsp, 48
 1038f69:	c3 	ret
 1038f6a:	48 89 d8 	mov	rax, rbx
 1038f6d:	e8 de a3 01 00 	call	107486 <_runtime.panicIndex>
 1038f72:	48 89 d0 	mov	rax, rdx
 1038f75:	48 89 f9 	mov	rcx, rdi
 1038f78:	e8 d3 a3 01 00 	call	107475 <_runtime.panicIndex>
 1038f7d:	90 	nop
 1038f7e:	e8 4d 7c 01 00 	call	97357 <_runtime.morestack_noctxt>
 1038f83:	e9 18 ff ff ff 	jmp	-232 <_runtime.extendRandom>
 1038f88:	cc 	int3
 1038f89:	cc 	int3
 1038f8a:	cc 	int3
 1038f8b:	cc 	int3
 1038f8c:	cc 	int3
 1038f8d:	cc 	int3
 1038f8e:	cc 	int3
 1038f8f:	cc 	int3

_runtime.waitReason.String:
 1038f90:	0f b6 44 24 08 	movzx	eax, byte ptr [rsp + 8]
 1038f95:	84 c0 	test	al, al
 1038f97:	73 16 	jae	22 <_runtime.waitReason.String+0x1f>
 1038f99:	48 8d 05 55 b1 03 00 	lea	rax, [rip + 242005]
 1038fa0:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1038fa5:	48 c7 44 24 18 13 00 00 00 	mov	qword ptr [rsp + 24], 19
 1038fae:	c3 	ret
 1038faf:	80 f8 1a 	cmp	al, 26
 1038fb2:	73 e5 	jae	-27 <_runtime.waitReason.String+0x9>
 1038fb4:	48 c1 e0 04 	shl	rax, 4
 1038fb8:	48 8d 0d 81 3b 09 00 	lea	rcx, [rip + 605057]
 1038fbf:	48 8b 54 01 08 	mov	rdx, qword ptr [rcx + rax + 8]
 1038fc4:	48 8b 04 01 	mov	rax, qword ptr [rcx + rax]
 1038fc8:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1038fcd:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1038fd2:	c3 	ret
 1038fd3:	cc 	int3
 1038fd4:	cc 	int3
 1038fd5:	cc 	int3
 1038fd6:	cc 	int3
 1038fd7:	cc 	int3
 1038fd8:	cc 	int3
 1038fd9:	cc 	int3
 1038fda:	cc 	int3
 1038fdb:	cc 	int3
 1038fdc:	cc 	int3
 1038fdd:	cc 	int3
 1038fde:	cc 	int3
 1038fdf:	cc 	int3

_runtime.(*rwmutex).rlock:
 1038fe0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1038fe9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1038fed:	76 6c 	jbe	108 <_runtime.(*rwmutex).rlock+0x7b>
 1038fef:	48 83 ec 20 	sub	rsp, 32
 1038ff3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1038ff8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1038ffd:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1039006:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103900a:	90 	nop
 103900b:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1039011:	84 00 	test	byte ptr [rax], al
 1039013:	b8 01 00 00 00 	mov	eax, 1
 1039018:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103901d:	f0 	lock
 103901e:	0f c1 41 28 	xadd	dword ptr [rcx + 40], eax
 1039022:	ff c0 	inc	eax
 1039024:	85 c0 	test	eax, eax
 1039026:	7c 0a 	jl	10 <_runtime.(*rwmutex).rlock+0x52>
 1039028:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103902d:	48 83 c4 20 	add	rsp, 32
 1039031:	c3 	ret
 1039032:	0f 57 c0 	xorps	xmm0, xmm0
 1039035:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 103903a:	48 8d 05 6f 73 01 00 	lea	rax, [rip + 95087]
 1039041:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1039046:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103904b:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1039050:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039054:	e8 27 7a 01 00 	call	96807 <_runtime.systemstack>
 1039059:	eb cd 	jmp	-51 <_runtime.(*rwmutex).rlock+0x48>
 103905b:	e8 70 7b 01 00 	call	97136 <_runtime.morestack_noctxt>
 1039060:	e9 7b ff ff ff 	jmp	-133 <_runtime.(*rwmutex).rlock>
 1039065:	cc 	int3
 1039066:	cc 	int3
 1039067:	cc 	int3
 1039068:	cc 	int3
 1039069:	cc 	int3
 103906a:	cc 	int3
 103906b:	cc 	int3
 103906c:	cc 	int3
 103906d:	cc 	int3
 103906e:	cc 	int3
 103906f:	cc 	int3

_runtime.(*rwmutex).runlock:
 1039070:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1039079:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103907d:	0f 86 d6 00 00 00 	jbe	214 <_runtime.(*rwmutex).runlock+0xe9>
 1039083:	48 83 ec 18 	sub	rsp, 24
 1039087:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103908c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1039091:	b8 ff ff ff ff 	mov	eax, 4294967295
 1039096:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103909b:	f0 	lock
 103909c:	0f c1 41 28 	xadd	dword ptr [rcx + 40], eax
 10390a0:	ff c8 	dec	eax
 10390a2:	85 c0 	test	eax, eax
 10390a4:	7d 24 	jge	36 <_runtime.(*rwmutex).runlock+0x5a>
 10390a6:	83 f8 ff 	cmp	eax, -1
 10390a9:	0f 84 90 00 00 00 	je	144 <_runtime.(*rwmutex).runlock+0xcf>
 10390af:	3d ff ff ff bf 	cmp	eax, 3221225471
 10390b4:	0f 84 85 00 00 00 	je	133 <_runtime.(*rwmutex).runlock+0xcf>
 10390ba:	b8 ff ff ff ff 	mov	eax, 4294967295
 10390bf:	f0 	lock
 10390c0:	0f c1 41 2c 	xadd	dword ptr [rcx + 44], eax
 10390c4:	ff c8 	dec	eax
 10390c6:	85 c0 	test	eax, eax
 10390c8:	74 3c 	je	60 <_runtime.(*rwmutex).runlock+0x96>
 10390ca:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10390d3:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10390d7:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 10390dd:	8d 5a ff 	lea	ebx, [rdx - 1]
 10390e0:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 10390e6:	83 fa 01 	cmp	edx, 1
 10390e9:	75 11 	jne	17 <_runtime.(*rwmutex).runlock+0x8c>
 10390eb:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 10390f2:	74 08 	je	8 <_runtime.(*rwmutex).runlock+0x8c>
 10390f4:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 10390fc:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1039101:	48 83 c4 18 	add	rsp, 24
 1039105:	c3 	ret
 1039106:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103910a:	e8 21 f0 fc ff 	call	-200671 <_runtime.lock>
 103910f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1039114:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 1039118:	48 85 c9 	test	rcx, rcx
 103911b:	75 0b 	jne	11 <_runtime.(*rwmutex).runlock+0xb8>
 103911d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039121:	e8 ea f1 fc ff 	call	-200214 <_runtime.unlock>
 1039126:	eb a2 	jmp	-94 <_runtime.(*rwmutex).runlock+0x5a>
 1039128:	48 8d 81 48 01 00 00 	lea	rax, [rcx + 328]
 103912f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039133:	e8 b8 f2 fc ff 	call	-200008 <_runtime.notewakeup>
 1039138:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103913d:	eb de 	jmp	-34 <_runtime.(*rwmutex).runlock+0xad>
 103913f:	48 8d 05 48 bf 03 00 	lea	rax, [rip + 245576]
 1039146:	48 89 04 24 	mov	qword ptr [rsp], rax
 103914a:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 1039153:	e8 08 fc fe ff 	call	-66552 <_runtime.throw>
 1039158:	90 	nop
 1039159:	e8 72 7a 01 00 	call	96882 <_runtime.morestack_noctxt>
 103915e:	e9 0d ff ff ff 	jmp	-243 <_runtime.(*rwmutex).runlock>
 1039163:	cc 	int3
 1039164:	cc 	int3
 1039165:	cc 	int3
 1039166:	cc 	int3
 1039167:	cc 	int3
 1039168:	cc 	int3
 1039169:	cc 	int3
 103916a:	cc 	int3
 103916b:	cc 	int3
 103916c:	cc 	int3
 103916d:	cc 	int3
 103916e:	cc 	int3
 103916f:	cc 	int3

_runtime.readyWithTime:
 1039170:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1039179:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103917d:	76 51 	jbe	81 <_runtime.readyWithTime+0x60>
 103917f:	48 83 ec 18 	sub	rsp, 24
 1039183:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1039188:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103918d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1039192:	48 83 78 30 00 	cmp	qword ptr [rax + 48], 0
 1039197:	75 20 	jne	32 <_runtime.readyWithTime+0x49>
 1039199:	48 8b 00 	mov	rax, qword ptr [rax]
 103919c:	48 89 04 24 	mov	qword ptr [rsp], rax
 10391a0:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10391a5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10391aa:	e8 d1 26 ff ff 	call	-55599 <_runtime.goready>
 10391af:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10391b4:	48 83 c4 18 	add	rsp, 24
 10391b8:	c3 	ret
 10391b9:	e8 82 91 01 00 	call	102786 <_runtime.cputicks>
 10391be:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10391c2:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10391c7:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 10391cb:	48 89 c8 	mov	rax, rcx
 10391ce:	eb c9 	jmp	-55 <_runtime.readyWithTime+0x29>
 10391d0:	e8 fb 79 01 00 	call	96763 <_runtime.morestack_noctxt>
 10391d5:	eb 99 	jmp	-103 <_runtime.readyWithTime>
 10391d7:	cc 	int3
 10391d8:	cc 	int3
 10391d9:	cc 	int3
 10391da:	cc 	int3
 10391db:	cc 	int3
 10391dc:	cc 	int3
 10391dd:	cc 	int3
 10391de:	cc 	int3
 10391df:	cc 	int3

_runtime.semacquire1:
 10391e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10391e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10391ed:	0f 86 b5 02 00 00 	jbe	693 <_runtime.semacquire1+0x2c8>
 10391f3:	48 83 ec 60 	sub	rsp, 96
 10391f7:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 10391fc:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1039201:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103920a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103920e:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 1039215:	0f 85 73 02 00 00 	jne	627 <_runtime.semacquire1+0x2ae>
 103921b:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1039220:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039224:	e8 a7 04 00 00 	call	1191 <_runtime.cansemacquire>
 1039229:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 103922e:	0f 85 50 02 00 00 	jne	592 <_runtime.semacquire1+0x2a4>
 1039234:	e8 b7 26 ff ff 	call	-55625 <_runtime.acquireSudog>
 1039239:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 103923d:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1039242:	90 	nop
 1039243:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1039248:	48 89 ca 	mov	rdx, rcx
 103924b:	48 c7 40 30 00 00 00 00 	mov	qword ptr [rax + 48], 0
 1039253:	48 c7 40 28 00 00 00 00 	mov	qword ptr [rax + 40], 0
 103925b:	c7 40 38 00 00 00 00 	mov	dword ptr [rax + 56], 0
 1039262:	48 c1 e9 03 	shr	rcx, 3
 1039266:	48 89 c3 	mov	rbx, rax
 1039269:	48 b8 47 41 40 73 7d 7f 19 05 	movabs	rax, 367465021388636487
 1039273:	48 89 d6 	mov	rsi, rdx
 1039276:	48 f7 e1 	mul	rcx
 1039279:	48 01 ca 	add	rdx, rcx
 103927c:	48 d1 da 	rcr	rdx
 103927f:	48 c1 ea 07 	shr	rdx, 7
 1039283:	48 69 c2 fb 00 00 00 	imul	rax, rdx, 251
 103928a:	48 29 c1 	sub	rcx, rax
 103928d:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1039292:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1039297:	0f ba e0 00 	bt	eax, 0
 103929b:	73 0e 	jae	14 <_runtime.semacquire1+0xcb>
 103929d:	48 83 3d 53 e5 0b 00 00 	cmp	qword ptr [rip + 779603], 0
 10392a5:	0f 87 af 01 00 00 	ja	431 <_runtime.semacquire1+0x27a>
 10392ab:	31 d2 	xor	edx, edx
 10392ad:	0f ba e0 01 	bt	eax, 1
 10392b1:	73 17 	jae	23 <_runtime.semacquire1+0xea>
 10392b3:	48 83 3d a5 e5 0b 00 00 	cmp	qword ptr [rip + 779685], 0
 10392bb:	76 0d 	jbe	13 <_runtime.semacquire1+0xea>
 10392bd:	48 85 d2 	test	rdx, rdx
 10392c0:	0f 84 77 01 00 00 	je	375 <_runtime.semacquire1+0x25d>
 10392c6:	48 89 53 28 	mov	qword ptr [rbx + 40], rdx
 10392ca:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 10392cf:	48 c1 e1 06 	shl	rcx, 6
 10392d3:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 10392d8:	48 8d 05 81 7d 09 00 	lea	rax, [rip + 621953]
 10392df:	48 8d 3c 08 	lea	rdi, [rax + rcx]
 10392e3:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 10392e8:	eb 0c 	jmp	12 <_runtime.semacquire1+0x116>
 10392ea:	48 8d 05 6f 7d 09 00 	lea	rax, [rip + 621935]
 10392f1:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10392f6:	48 8d 14 08 	lea	rdx, [rax + rcx]
 10392fa:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 10392ff:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1039303:	e8 28 ee fc ff 	call	-201176 <_runtime.lock>
 1039308:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103930d:	48 8d 0d 4c 7d 09 00 	lea	rcx, [rip + 621900]
 1039314:	48 8d 14 01 	lea	rdx, [rcx + rax]
 1039318:	48 8d 52 10 	lea	rdx, [rdx + 16]
 103931c:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 1039321:	bb 01 00 00 00 	mov	ebx, 1
 1039326:	f0 	lock
 1039327:	0f c1 1a 	xadd	dword ptr [rdx], ebx
 103932a:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 103932f:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1039333:	e8 98 03 00 00 	call	920 <_runtime.cansemacquire>
 1039338:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 103933d:	0f 85 d4 00 00 00 	jne	212 <_runtime.semacquire1+0x237>
 1039343:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1039348:	48 89 04 24 	mov	qword ptr [rsp], rax
 103934c:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1039351:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1039356:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 103935b:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1039360:	0f b6 5c 24 70 	movzx	ebx, byte ptr [rsp + 112]
 1039365:	88 5c 24 18 	mov	byte ptr [rsp + 24], bl
 1039369:	e8 92 03 00 00 	call	914 <_runtime.(*semaRoot).queue>
 103936e:	48 8d 05 e3 e5 03 00 	lea	rax, [rip + 255459]
 1039375:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039379:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 103937e:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1039383:	66 c7 44 24 10 12 19 	mov	word ptr [rsp + 16], 6418
 103938a:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1039392:	48 8d 51 04 	lea	rdx, [rcx + 4]
 1039396:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 103939b:	e8 a0 23 ff ff 	call	-56416 <_runtime.gopark>
 10393a0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10393a5:	83 78 38 00 	cmp	dword ptr [rax + 56], 0
 10393a9:	74 52 	je	82 <_runtime.semacquire1+0x21d>
 10393ab:	b9 01 00 00 00 	mov	ecx, 1
 10393b0:	84 c9 	test	cl, cl
 10393b2:	0f 84 32 ff ff ff 	je	-206 <_runtime.semacquire1+0x10a>
 10393b8:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10393bc:	48 85 c9 	test	rcx, rcx
 10393bf:	7f 13 	jg	19 <_runtime.semacquire1+0x1f4>
 10393c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10393c5:	e8 b6 28 ff ff 	call	-55114 <_runtime.releaseSudog>
 10393ca:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 10393cf:	48 83 c4 60 	add	rsp, 96
 10393d3:	c3 	ret
 10393d4:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10393d9:	48 29 c1 	sub	rcx, rax
 10393dc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10393e0:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 10393e8:	48 83 c0 03 	add	rax, 3
 10393ec:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10393f1:	e8 1a ac fe ff 	call	-87014 <_runtime.blockevent>
 10393f6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10393fb:	eb c4 	jmp	-60 <_runtime.semacquire1+0x1e1>
 10393fd:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1039402:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039406:	e8 c5 02 00 00 	call	709 <_runtime.cansemacquire>
 103940b:	0f b6 4c 24 08 	movzx	ecx, byte ptr [rsp + 8]
 1039410:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1039415:	eb 99 	jmp	-103 <_runtime.semacquire1+0x1d0>
 1039417:	b8 ff ff ff ff 	mov	eax, 4294967295
 103941c:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1039421:	f0 	lock
 1039422:	0f c1 01 	xadd	dword ptr [rcx], eax
 1039425:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103942a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103942e:	e8 dd ee fc ff 	call	-200995 <_runtime.unlock>
 1039433:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1039438:	e9 7b ff ff ff 	jmp	-133 <_runtime.semacquire1+0x1d8>
 103943d:	e8 fe 8e 01 00 	call	102142 <_runtime.cputicks>
 1039442:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 1039446:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103944b:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1039450:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 1039455:	e9 6c fe ff ff 	jmp	-404 <_runtime.semacquire1+0xe6>
 103945a:	e8 e1 8e 01 00 	call	102113 <_runtime.cputicks>
 103945f:	48 8b 14 24 	mov	rdx, qword ptr [rsp]
 1039463:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1039468:	48 c7 43 30 ff ff ff ff 	mov	qword ptr [rbx + 48], -1
 1039470:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1039475:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103947a:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 103947f:	e9 29 fe ff ff 	jmp	-471 <_runtime.semacquire1+0xcd>
 1039484:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1039489:	48 83 c4 60 	add	rsp, 96
 103948d:	c3 	ret
 103948e:	48 8d 05 c8 c1 03 00 	lea	rax, [rip + 246216]
 1039495:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039499:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 10394a2:	e8 b9 f8 fe ff 	call	-67399 <_runtime.throw>
 10394a7:	90 	nop
 10394a8:	e8 23 77 01 00 	call	96035 <_runtime.morestack_noctxt>
 10394ad:	e9 2e fd ff ff 	jmp	-722 <_runtime.semacquire1>
 10394b2:	cc 	int3
 10394b3:	cc 	int3
 10394b4:	cc 	int3
 10394b5:	cc 	int3
 10394b6:	cc 	int3
 10394b7:	cc 	int3
 10394b8:	cc 	int3
 10394b9:	cc 	int3
 10394ba:	cc 	int3
 10394bb:	cc 	int3
 10394bc:	cc 	int3
 10394bd:	cc 	int3
 10394be:	cc 	int3
 10394bf:	cc 	int3

_runtime.semrelease1:
 10394c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10394c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10394cd:	0f 86 ee 01 00 00 	jbe	494 <_runtime.semrelease1+0x201>
 10394d3:	48 83 ec 50 	sub	rsp, 80
 10394d7:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 10394dc:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 10394e1:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10394e6:	48 89 ca 	mov	rdx, rcx
 10394e9:	bb 01 00 00 00 	mov	ebx, 1
 10394ee:	f0 	lock
 10394ef:	0f c1 1a 	xadd	dword ptr [rdx], ebx
 10394f2:	48 c1 e9 03 	shr	rcx, 3
 10394f6:	48 b8 47 41 40 73 7d 7f 19 05 	movabs	rax, 367465021388636487
 1039500:	48 f7 e1 	mul	rcx
 1039503:	48 01 ca 	add	rdx, rcx
 1039506:	48 d1 da 	rcr	rdx
 1039509:	48 c1 ea 07 	shr	rdx, 7
 103950d:	48 69 d2 fb 00 00 00 	imul	rdx, rdx, 251
 1039514:	48 29 d1 	sub	rcx, rdx
 1039517:	48 c1 e1 06 	shl	rcx, 6
 103951b:	48 8d 15 3e 7b 09 00 	lea	rdx, [rip + 621374]
 1039522:	48 8d 34 0a 	lea	rsi, [rdx + rcx]
 1039526:	48 8d 76 10 	lea	rsi, [rsi + 16]
 103952a:	8b 3e 	mov	edi, dword ptr [rsi]
 103952c:	85 ff 	test	edi, edi
 103952e:	0f 84 69 01 00 00 	je	361 <_runtime.semrelease1+0x1dd>
 1039534:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 1039539:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103953e:	48 8d 04 0a 	lea	rax, [rdx + rcx]
 1039542:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1039547:	48 89 04 24 	mov	qword ptr [rsp], rax
 103954b:	e8 e0 eb fc ff 	call	-201760 <_runtime.lock>
 1039550:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1039555:	8b 08 	mov	ecx, dword ptr [rax]
 1039557:	85 c9 	test	ecx, ecx
 1039559:	0f 84 26 01 00 00 	je	294 <_runtime.semrelease1+0x1c5>
 103955f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1039564:	48 8d 0d f5 7a 09 00 	lea	rcx, [rip + 621301]
 103956b:	48 8d 04 01 	lea	rax, [rcx + rax]
 103956f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039573:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1039578:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103957d:	e8 be 05 00 00 	call	1470 <_runtime.(*semaRoot).dequeue>
 1039582:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1039587:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103958c:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1039591:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1039596:	48 85 c0 	test	rax, rax
 1039599:	74 0e 	je	14 <_runtime.semrelease1+0xe9>
 103959b:	ba ff ff ff ff 	mov	edx, 4294967295
 10395a0:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 10395a5:	f0 	lock
 10395a6:	0f c1 13 	xadd	dword ptr [rbx], edx
 10395a9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10395ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10395b2:	e8 59 ed fc ff 	call	-201383 <_runtime.unlock>
 10395b7:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10395bc:	48 85 c0 	test	rax, rax
 10395bf:	74 65 	je	101 <_runtime.semrelease1+0x166>
 10395c1:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 10395c5:	48 85 c9 	test	rcx, rcx
 10395c8:	0f 85 8e 00 00 00 	jne	142 <_runtime.semrelease1+0x19c>
 10395ce:	83 78 38 00 	cmp	dword ptr [rax + 56], 0
 10395d2:	0f 85 cf 00 00 00 	jne	207 <_runtime.semrelease1+0x1e7>
 10395d8:	0f b6 4c 24 60 	movzx	ecx, byte ptr [rsp + 96]
 10395dd:	84 c9 	test	cl, cl
 10395df:	75 61 	jne	97 <_runtime.semrelease1+0x182>
 10395e1:	31 c9 	xor	ecx, ecx
 10395e3:	84 c9 	test	cl, cl
 10395e5:	74 07 	je	7 <_runtime.semrelease1+0x12e>
 10395e7:	c7 40 38 01 00 00 00 	mov	dword ptr [rax + 56], 1
 10395ee:	48 89 04 24 	mov	qword ptr [rsp], rax
 10395f2:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 10395f7:	48 83 c1 05 	add	rcx, 5
 10395fb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1039600:	e8 6b fb ff ff 	call	-1173 <_runtime.readyWithTime>
 1039605:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103960a:	83 78 38 01 	cmp	dword ptr [rax + 56], 1
 103960e:	75 16 	jne	22 <_runtime.semrelease1+0x166>
 1039610:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1039619:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103961d:	83 b8 08 01 00 00 00 	cmp	dword ptr [rax + 264], 0
 1039624:	74 0a 	je	10 <_runtime.semrelease1+0x170>
 1039626:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 103962b:	48 83 c4 50 	add	rsp, 80
 103962f:	c3 	ret
 1039630:	48 8d 05 39 e2 03 00 	lea	rax, [rip + 254521]
 1039637:	48 89 04 24 	mov	qword ptr [rsp], rax
 103963b:	e8 c0 73 01 00 	call	95168 <_runtime.mcall>
 1039640:	eb e4 	jmp	-28 <_runtime.semrelease1+0x166>
 1039642:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1039647:	48 89 04 24 	mov	qword ptr [rsp], rax
 103964b:	e8 80 00 00 00 	call	128 <_runtime.cansemacquire>
 1039650:	0f b6 4c 24 08 	movzx	ecx, byte ptr [rsp + 8]
 1039655:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103965a:	eb 87 	jmp	-121 <_runtime.semrelease1+0x123>
 103965c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1039661:	48 29 c8 	sub	rax, rcx
 1039664:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039668:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103966d:	48 8d 48 03 	lea	rcx, [rax + 3]
 1039671:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1039676:	e8 55 ac fe ff 	call	-86955 <_sync.event>
 103967b:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1039680:	e9 49 ff ff ff 	jmp	-183 <_runtime.semrelease1+0x10e>
 1039685:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103968a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103968e:	e8 7d ec fc ff 	call	-201603 <_runtime.unlock>
 1039693:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1039698:	48 83 c4 50 	add	rsp, 80
 103969c:	c3 	ret
 103969d:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10396a2:	48 83 c4 50 	add	rsp, 80
 10396a6:	c3 	ret
 10396a7:	48 8d 05 2f b7 03 00 	lea	rax, [rip + 243503]
 10396ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10396b2:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 10396bb:	e8 a0 f6 fe ff 	call	-67936 <_runtime.throw>
 10396c0:	90 	nop
 10396c1:	e8 0a 75 01 00 	call	95498 <_runtime.morestack_noctxt>
 10396c6:	e9 f5 fd ff ff 	jmp	-523 <_runtime.semrelease1>
 10396cb:	cc 	int3
 10396cc:	cc 	int3
 10396cd:	cc 	int3
 10396ce:	cc 	int3
 10396cf:	cc 	int3

_runtime.cansemacquire:
 10396d0:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10396d5:	8b 11 	mov	edx, dword ptr [rcx]
 10396d7:	85 d2 	test	edx, edx
 10396d9:	74 16 	je	22 <_runtime.cansemacquire+0x21>
 10396db:	8d 5a ff 	lea	ebx, [rdx - 1]
 10396de:	89 d0 	mov	eax, edx
 10396e0:	f0 	lock
 10396e1:	0f b1 19 	cmpxchg	dword ptr [rcx], ebx
 10396e4:	0f 94 c2 	sete	dl
 10396e7:	84 d2 	test	dl, dl
 10396e9:	74 ea 	je	-22 <_runtime.cansemacquire+0x5>
 10396eb:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 10396f0:	c3 	ret
 10396f1:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 10396f6:	c3 	ret
 10396f7:	cc 	int3
 10396f8:	cc 	int3
 10396f9:	cc 	int3
 10396fa:	cc 	int3
 10396fb:	cc 	int3
 10396fc:	cc 	int3
 10396fd:	cc 	int3
 10396fe:	cc 	int3
 10396ff:	cc 	int3

_runtime.(*semaRoot).queue:
 1039700:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1039709:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103970d:	0f 86 1f 04 00 00 	jbe	1055 <_runtime.(*semaRoot).queue+0x432>
 1039713:	48 83 ec 18 	sub	rsp, 24
 1039717:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103971c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1039721:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1039726:	84 00 	test	byte ptr [rax], al
 1039728:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1039731:	48 8d 78 10 	lea	rdi, [rax + 16]
 1039735:	48 8d 50 18 	lea	rdx, [rax + 24]
 1039739:	83 3d c0 e1 0b 00 00 	cmp	dword ptr [rip + 778688], 0
 1039740:	0f 85 87 03 00 00 	jne	903 <_runtime.(*semaRoot).queue+0x3cd>
 1039746:	48 89 08 	mov	qword ptr [rax], rcx
 1039749:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103974e:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 1039752:	0f 57 c0 	xorps	xmm0, xmm0
 1039755:	0f 11 40 10 	movups	xmmword ptr [rax + 16], xmm0
 1039759:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 103975e:	48 8d 73 08 	lea	rsi, [rbx + 8]
 1039762:	4c 8b 43 08 	mov	r8, qword ptr [rbx + 8]
 1039766:	45 31 c9 	xor	r9d, r9d
 1039769:	eb 12 	jmp	18 <_runtime.(*semaRoot).queue+0x7d>
 103976b:	4c 8b 11 	mov	r10, qword ptr [rcx]
 103976e:	4d 89 c1 	mov	r9, r8
 1039771:	4d 89 d0 	mov	r8, r10
 1039774:	49 89 cb 	mov	r11, rcx
 1039777:	48 89 f1 	mov	rcx, rsi
 103977a:	4c 89 de 	mov	rsi, r11
 103977d:	4d 85 c0 	test	r8, r8
 1039780:	0f 84 6d 02 00 00 	je	621 <_runtime.(*semaRoot).queue+0x2f3>
 1039786:	4d 8b 48 20 	mov	r9, qword ptr [r8 + 32]
 103978a:	4c 39 c9 	cmp	rcx, r9
 103978d:	74 14 	je	20 <_runtime.(*semaRoot).queue+0xa3>
 103978f:	48 89 ce 	mov	rsi, rcx
 1039792:	4c 39 c9 	cmp	rcx, r9
 1039795:	73 06 	jae	6 <_runtime.(*semaRoot).queue+0x9d>
 1039797:	49 8d 48 18 	lea	rcx, [r8 + 24]
 103979b:	eb ce 	jmp	-50 <_runtime.(*semaRoot).queue+0x6b>
 103979d:	49 8d 48 10 	lea	rcx, [r8 + 16]
 10397a1:	eb c8 	jmp	-56 <_runtime.(*semaRoot).queue+0x6b>
 10397a3:	0f b6 4c 24 38 	movzx	ecx, byte ptr [rsp + 56]
 10397a8:	84 c9 	test	cl, cl
 10397aa:	0f 84 d5 01 00 00 	je	469 <_runtime.(*semaRoot).queue+0x285>
 10397b0:	83 3d 49 e1 0b 00 00 	cmp	dword ptr [rip + 778569], 0
 10397b7:	0f 85 b5 01 00 00 	jne	437 <_runtime.(*semaRoot).queue+0x272>
 10397bd:	48 89 06 	mov	qword ptr [rsi], rax
 10397c0:	41 8b 48 38 	mov	ecx, dword ptr [r8 + 56]
 10397c4:	89 48 38 	mov	dword ptr [rax + 56], ecx
 10397c7:	49 8b 48 28 	mov	rcx, qword ptr [r8 + 40]
 10397cb:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 10397cf:	49 8b 48 40 	mov	rcx, qword ptr [r8 + 64]
 10397d3:	83 3d 26 e1 0b 00 00 	cmp	dword ptr [rip + 778534], 0
 10397da:	0f 85 72 01 00 00 	jne	370 <_runtime.(*semaRoot).queue+0x252>
 10397e0:	48 89 48 40 	mov	qword ptr [rax + 64], rcx
 10397e4:	49 8b 48 18 	mov	rcx, qword ptr [r8 + 24]
 10397e8:	83 3d 11 e1 0b 00 00 	cmp	dword ptr [rip + 778513], 0
 10397ef:	0f 85 41 01 00 00 	jne	321 <_runtime.(*semaRoot).queue+0x236>
 10397f5:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 10397f9:	49 8b 50 10 	mov	rdx, qword ptr [r8 + 16]
 10397fd:	83 3d fc e0 0b 00 00 	cmp	dword ptr [rip + 778492], 0
 1039804:	0f 85 19 01 00 00 	jne	281 <_runtime.(*semaRoot).queue+0x223>
 103980a:	48 89 50 10 	mov	qword ptr [rax + 16], rdx
 103980e:	48 85 c9 	test	rcx, rcx
 1039811:	74 11 	je	17 <_runtime.(*semaRoot).queue+0x124>
 1039813:	83 3d e6 e0 0b 00 00 	cmp	dword ptr [rip + 778470], 0
 103981a:	0f 85 f5 00 00 00 	jne	245 <_runtime.(*semaRoot).queue+0x215>
 1039820:	48 89 41 40 	mov	qword ptr [rcx + 64], rax
 1039824:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1039828:	48 85 c9 	test	rcx, rcx
 103982b:	74 11 	je	17 <_runtime.(*semaRoot).queue+0x13e>
 103982d:	83 3d cc e0 0b 00 00 	cmp	dword ptr [rip + 778444], 0
 1039834:	0f 85 cd 00 00 00 	jne	205 <_runtime.(*semaRoot).queue+0x207>
 103983a:	48 89 41 40 	mov	qword ptr [rcx + 64], rax
 103983e:	83 3d bb e0 0b 00 00 	cmp	dword ptr [rip + 778427], 0
 1039845:	0f 85 a5 00 00 00 	jne	165 <_runtime.(*semaRoot).queue+0x1f0>
 103984b:	4c 89 40 48 	mov	qword ptr [rax + 72], r8
 103984f:	48 8d 78 50 	lea	rdi, [rax + 80]
 1039853:	49 8b 48 50 	mov	rcx, qword ptr [r8 + 80]
 1039857:	83 3d a2 e0 0b 00 00 	cmp	dword ptr [rip + 778402], 0
 103985e:	75 7d 	jne	125 <_runtime.(*semaRoot).queue+0x1dd>
 1039860:	48 89 48 50 	mov	qword ptr [rax + 80], rcx
 1039864:	48 85 c9 	test	rcx, rcx
 1039867:	74 5b 	je	91 <_runtime.(*semaRoot).queue+0x1c4>
 1039869:	83 3d 90 e0 0b 00 00 	cmp	dword ptr [rip + 778384], 0
 1039870:	75 2a 	jne	42 <_runtime.(*semaRoot).queue+0x19c>
 1039872:	49 c7 40 40 00 00 00 00 	mov	qword ptr [r8 + 64], 0
 103987a:	49 c7 40 18 00 00 00 00 	mov	qword ptr [r8 + 24], 0
 1039882:	49 c7 40 10 00 00 00 00 	mov	qword ptr [r8 + 16], 0
 103988a:	49 c7 40 50 00 00 00 00 	mov	qword ptr [r8 + 80], 0
 1039892:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1039897:	48 83 c4 18 	add	rsp, 24
 103989b:	c3 	ret
 103989c:	49 8d 78 40 	lea	rdi, [r8 + 64]
 10398a0:	31 c0 	xor	eax, eax
 10398a2:	e8 39 91 01 00 	call	102713 <_runtime.gcWriteBarrier>
 10398a7:	49 8d 78 18 	lea	rdi, [r8 + 24]
 10398ab:	e8 30 91 01 00 	call	102704 <_runtime.gcWriteBarrier>
 10398b0:	49 8d 78 10 	lea	rdi, [r8 + 16]
 10398b4:	e8 27 91 01 00 	call	102695 <_runtime.gcWriteBarrier>
 10398b9:	49 8d 78 50 	lea	rdi, [r8 + 80]
 10398bd:	e8 1e 91 01 00 	call	102686 <_runtime.gcWriteBarrier>
 10398c2:	eb ce 	jmp	-50 <_runtime.(*semaRoot).queue+0x192>
 10398c4:	83 3d 35 e0 0b 00 00 	cmp	dword ptr [rip + 778293], 0
 10398cb:	75 06 	jne	6 <_runtime.(*semaRoot).queue+0x1d3>
 10398cd:	4c 89 40 50 	mov	qword ptr [rax + 80], r8
 10398d1:	eb 96 	jmp	-106 <_runtime.(*semaRoot).queue+0x169>
 10398d3:	4c 89 c0 	mov	rax, r8
 10398d6:	e8 05 91 01 00 	call	102661 <_runtime.gcWriteBarrier>
 10398db:	eb 8c 	jmp	-116 <_runtime.(*semaRoot).queue+0x169>
 10398dd:	48 89 c2 	mov	rdx, rax
 10398e0:	48 89 c8 	mov	rax, rcx
 10398e3:	e8 f8 90 01 00 	call	102648 <_runtime.gcWriteBarrier>
 10398e8:	48 89 d0 	mov	rax, rdx
 10398eb:	e9 74 ff ff ff 	jmp	-140 <_runtime.(*semaRoot).queue+0x164>
 10398f0:	48 8d 78 48 	lea	rdi, [rax + 72]
 10398f4:	48 89 c1 	mov	rcx, rax
 10398f7:	4c 89 c0 	mov	rax, r8
 10398fa:	e8 e1 90 01 00 	call	102625 <_runtime.gcWriteBarrier>
 10398ff:	48 89 c8 	mov	rax, rcx
 1039902:	e9 48 ff ff ff 	jmp	-184 <_runtime.(*semaRoot).queue+0x14f>
 1039907:	48 8d 79 40 	lea	rdi, [rcx + 64]
 103990b:	e8 d0 90 01 00 	call	102608 <_runtime.gcWriteBarrier>
 1039910:	e9 29 ff ff ff 	jmp	-215 <_runtime.(*semaRoot).queue+0x13e>
 1039915:	48 8d 79 40 	lea	rdi, [rcx + 64]
 1039919:	e8 c2 90 01 00 	call	102594 <_runtime.gcWriteBarrier>
 103991e:	e9 01 ff ff ff 	jmp	-255 <_runtime.(*semaRoot).queue+0x124>
 1039923:	48 89 c3 	mov	rbx, rax
 1039926:	48 89 d0 	mov	rax, rdx
 1039929:	e8 b2 90 01 00 	call	102578 <_runtime.gcWriteBarrier>
 103992e:	48 89 d8 	mov	rax, rbx
 1039931:	e9 d8 fe ff ff 	jmp	-296 <_runtime.(*semaRoot).queue+0x10e>
 1039936:	48 89 fb 	mov	rbx, rdi
 1039939:	48 89 d7 	mov	rdi, rdx
 103993c:	48 89 c6 	mov	rsi, rax
 103993f:	48 89 c8 	mov	rax, rcx
 1039942:	e8 99 90 01 00 	call	102553 <_runtime.gcWriteBarrier>
 1039947:	48 89 f0 	mov	rax, rsi
 103994a:	48 89 df 	mov	rdi, rbx
 103994d:	e9 a7 fe ff ff 	jmp	-345 <_runtime.(*semaRoot).queue+0xf9>
 1039952:	48 8d 58 40 	lea	rbx, [rax + 64]
 1039956:	48 89 fe 	mov	rsi, rdi
 1039959:	48 89 df 	mov	rdi, rbx
 103995c:	49 89 c1 	mov	r9, rax
 103995f:	48 89 c8 	mov	rax, rcx
 1039962:	e8 79 90 01 00 	call	102521 <_runtime.gcWriteBarrier>
 1039967:	4c 89 c8 	mov	rax, r9
 103996a:	48 89 f7 	mov	rdi, rsi
 103996d:	e9 72 fe ff ff 	jmp	-398 <_runtime.(*semaRoot).queue+0xe4>
 1039972:	48 89 f9 	mov	rcx, rdi
 1039975:	48 89 f7 	mov	rdi, rsi
 1039978:	e8 63 90 01 00 	call	102499 <_runtime.gcWriteBarrier>
 103997d:	48 89 cf 	mov	rdi, rcx
 1039980:	e9 3b fe ff ff 	jmp	-453 <_runtime.(*semaRoot).queue+0xc0>
 1039985:	49 8b 48 50 	mov	rcx, qword ptr [r8 + 80]
 1039989:	48 85 c9 	test	rcx, rcx
 103998c:	74 4b 	je	75 <_runtime.(*semaRoot).queue+0x2d9>
 103998e:	83 3d 6b df 0b 00 00 	cmp	dword ptr [rip + 778091], 0
 1039995:	75 37 	jne	55 <_runtime.(*semaRoot).queue+0x2ce>
 1039997:	48 89 41 48 	mov	qword ptr [rcx + 72], rax
 103999b:	83 3d 5e df 0b 00 00 	cmp	dword ptr [rip + 778078], 0
 10399a2:	75 11 	jne	17 <_runtime.(*semaRoot).queue+0x2b5>
 10399a4:	49 89 40 50 	mov	qword ptr [r8 + 80], rax
 10399a8:	48 c7 40 48 00 00 00 00 	mov	qword ptr [rax + 72], 0
 10399b0:	e9 dd fe ff ff 	jmp	-291 <_runtime.(*semaRoot).queue+0x192>
 10399b5:	49 8d 78 50 	lea	rdi, [r8 + 80]
 10399b9:	e8 22 90 01 00 	call	102434 <_runtime.gcWriteBarrier>
 10399be:	48 8d 78 48 	lea	rdi, [rax + 72]
 10399c2:	31 c0 	xor	eax, eax
 10399c4:	e8 17 90 01 00 	call	102423 <_runtime.gcWriteBarrier>
 10399c9:	e9 c4 fe ff ff 	jmp	-316 <_runtime.(*semaRoot).queue+0x192>
 10399ce:	48 8d 79 48 	lea	rdi, [rcx + 72]
 10399d2:	e8 09 90 01 00 	call	102409 <_runtime.gcWriteBarrier>
 10399d7:	eb c2 	jmp	-62 <_runtime.(*semaRoot).queue+0x29b>
 10399d9:	83 3d 20 df 0b 00 00 	cmp	dword ptr [rip + 778016], 0
 10399e0:	75 06 	jne	6 <_runtime.(*semaRoot).queue+0x2e8>
 10399e2:	49 89 40 48 	mov	qword ptr [r8 + 72], rax
 10399e6:	eb b3 	jmp	-77 <_runtime.(*semaRoot).queue+0x29b>
 10399e8:	49 8d 78 48 	lea	rdi, [r8 + 72]
 10399ec:	e8 ef 8f 01 00 	call	102383 <_runtime.gcWriteBarrier>
 10399f1:	eb a8 	jmp	-88 <_runtime.(*semaRoot).queue+0x29b>
 10399f3:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10399fc:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1039a00:	8b 91 20 01 00 00 	mov	edx, dword ptr [rcx + 288]
 1039a06:	44 8b 81 24 01 00 00 	mov	r8d, dword ptr [rcx + 292]
 1039a0d:	44 89 81 20 01 00 00 	mov	dword ptr [rcx + 288], r8d
 1039a14:	41 89 d2 	mov	r10d, edx
 1039a17:	c1 e2 11 	shl	edx, 17
 1039a1a:	44 31 d2 	xor	edx, r10d
 1039a1d:	45 89 c2 	mov	r10d, r8d
 1039a20:	41 31 d0 	xor	r8d, edx
 1039a23:	c1 ea 07 	shr	edx, 7
 1039a26:	44 31 c2 	xor	edx, r8d
 1039a29:	45 89 d0 	mov	r8d, r10d
 1039a2c:	41 c1 ea 10 	shr	r10d, 16
 1039a30:	41 31 d2 	xor	r10d, edx
 1039a33:	44 89 91 24 01 00 00 	mov	dword ptr [rcx + 292], r10d
 1039a3a:	43 8d 0c 10 	lea	ecx, [r8 + r10]
 1039a3e:	83 c9 01 	or	ecx, 1
 1039a41:	89 48 38 	mov	dword ptr [rax + 56], ecx
 1039a44:	83 3d b5 de 0b 00 00 	cmp	dword ptr [rip + 777909], 0
 1039a4b:	75 64 	jne	100 <_runtime.(*semaRoot).queue+0x3b1>
 1039a4d:	4c 89 48 40 	mov	qword ptr [rax + 64], r9
 1039a51:	48 89 06 	mov	qword ptr [rsi], rax
 1039a54:	eb 10 	jmp	16 <_runtime.(*semaRoot).queue+0x366>
 1039a56:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1039a5b:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1039a60:	48 89 c8 	mov	rax, rcx
 1039a63:	48 89 d3 	mov	rbx, rdx
 1039a66:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 1039a6a:	48 85 c9 	test	rcx, rcx
 1039a6d:	74 38 	je	56 <_runtime.(*semaRoot).queue+0x3a7>
 1039a6f:	8b 50 38 	mov	edx, dword ptr [rax + 56]
 1039a72:	39 51 38 	cmp	dword ptr [rcx + 56], edx
 1039a75:	76 30 	jbe	48 <_runtime.(*semaRoot).queue+0x3a7>
 1039a77:	48 39 41 18 	cmp	qword ptr [rcx + 24], rax
 1039a7b:	74 1a 	je	26 <_runtime.(*semaRoot).queue+0x397>
 1039a7d:	48 39 41 10 	cmp	qword ptr [rcx + 16], rax
 1039a81:	0f 85 8e 00 00 00 	jne	142 <_runtime.(*semaRoot).queue+0x415>
 1039a87:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1039a8b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1039a90:	e8 2b 04 00 00 	call	1067 <_runtime.(*semaRoot).rotateLeft>
 1039a95:	eb bf 	jmp	-65 <_runtime.(*semaRoot).queue+0x356>
 1039a97:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1039a9b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1039aa0:	e8 7b 05 00 00 	call	1403 <_runtime.(*semaRoot).rotateRight>
 1039aa5:	eb af 	jmp	-81 <_runtime.(*semaRoot).queue+0x356>
 1039aa7:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1039aac:	48 83 c4 18 	add	rsp, 24
 1039ab0:	c3 	ret
 1039ab1:	48 8d 78 40 	lea	rdi, [rax + 64]
 1039ab5:	48 89 c1 	mov	rcx, rax
 1039ab8:	4c 89 c8 	mov	rax, r9
 1039abb:	e8 20 8f 01 00 	call	102176 <_runtime.gcWriteBarrier>
 1039ac0:	48 89 f7 	mov	rdi, rsi
 1039ac3:	48 89 c8 	mov	rax, rcx
 1039ac6:	e8 15 8f 01 00 	call	102165 <_runtime.gcWriteBarrier>
 1039acb:	eb 87 	jmp	-121 <_runtime.(*semaRoot).queue+0x354>
 1039acd:	48 89 fb 	mov	rbx, rdi
 1039ad0:	48 89 c7 	mov	rdi, rax
 1039ad3:	48 89 c8 	mov	rax, rcx
 1039ad6:	e8 05 8f 01 00 	call	102149 <_runtime.gcWriteBarrier>
 1039adb:	48 8d 77 20 	lea	rsi, [rdi + 32]
 1039adf:	48 89 f8 	mov	rax, rdi
 1039ae2:	48 89 f7 	mov	rdi, rsi
 1039ae5:	48 89 c1 	mov	rcx, rax
 1039ae8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1039aed:	e8 ee 8e 01 00 	call	102126 <_runtime.gcWriteBarrier>
 1039af2:	48 89 df 	mov	rdi, rbx
 1039af5:	48 89 c6 	mov	rsi, rax
 1039af8:	31 c0 	xor	eax, eax
 1039afa:	e8 e1 8e 01 00 	call	102113 <_runtime.gcWriteBarrier>
 1039aff:	48 89 d7 	mov	rdi, rdx
 1039b02:	e8 d9 8e 01 00 	call	102105 <_runtime.gcWriteBarrier>
 1039b07:	48 89 c8 	mov	rax, rcx
 1039b0a:	48 89 f1 	mov	rcx, rsi
 1039b0d:	48 89 df 	mov	rdi, rbx
 1039b10:	e9 44 fc ff ff 	jmp	-956 <_runtime.(*semaRoot).queue+0x59>
 1039b15:	48 8d 05 84 64 02 00 	lea	rax, [rip + 156804]
 1039b1c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1039b20:	48 8d 05 f9 9e 04 00 	lea	rax, [rip + 302841]
 1039b27:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1039b2c:	e8 8f ea fe ff 	call	-71025 <_runtime.gopanic>
 1039b31:	90 	nop
 1039b32:	e8 99 70 01 00 	call	94361 <_runtime.morestack_noctxt>
 1039b37:	e9 c4 fb ff ff 	jmp	-1084 <_runtime.(*semaRoot).queue>
 1039b3c:	cc 	int3
 1039b3d:	cc 	int3
 1039b3e:	cc 	int3
 1039b3f:	cc 	int3

_runtime.(*semaRoot).dequeue:
 1039b40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1039b49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1039b4d:	0f 86 59 03 00 00 	jbe	857 <_runtime.(*semaRoot).dequeue+0x36c>
 1039b53:	48 83 ec 38 	sub	rsp, 56
 1039b57:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1039b5c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1039b61:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1039b66:	48 8d 79 08 	lea	rdi, [rcx + 8]
 1039b6a:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 1039b6e:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1039b73:	48 89 f8 	mov	rax, rdi
 1039b76:	eb 0c 	jmp	12 <_runtime.(*semaRoot).dequeue+0x44>
 1039b78:	48 8b 32 	mov	rsi, qword ptr [rdx]
 1039b7b:	4c 89 c3 	mov	rbx, r8
 1039b7e:	48 89 d7 	mov	rdi, rdx
 1039b81:	48 89 f2 	mov	rdx, rsi
 1039b84:	48 85 d2 	test	rdx, rdx
 1039b87:	0f 84 03 03 00 00 	je	771 <_runtime.(*semaRoot).dequeue+0x350>
 1039b8d:	48 8b 72 20 	mov	rsi, qword ptr [rdx + 32]
 1039b91:	48 39 f3 	cmp	rbx, rsi
 1039b94:	74 14 	je	20 <_runtime.(*semaRoot).dequeue+0x6a>
 1039b96:	49 89 d8 	mov	r8, rbx
 1039b99:	48 39 f3 	cmp	rbx, rsi
 1039b9c:	73 06 	jae	6 <_runtime.(*semaRoot).dequeue+0x64>
 1039b9e:	48 83 c2 18 	add	rdx, 24
 1039ba2:	eb d4 	jmp	-44 <_runtime.(*semaRoot).dequeue+0x38>
 1039ba4:	48 83 c2 10 	add	rdx, 16
 1039ba8:	eb ce 	jmp	-50 <_runtime.(*semaRoot).dequeue+0x38>
 1039baa:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1039baf:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1039bb4:	48 83 7a 28 00 	cmp	qword ptr [rdx + 40], 0
 1039bb9:	0f 85 aa 02 00 00 	jne	682 <_runtime.(*semaRoot).dequeue+0x329>
 1039bbf:	31 db 	xor	ebx, ebx
 1039bc1:	48 8b 72 48 	mov	rsi, qword ptr [rdx + 72]
 1039bc5:	48 85 f6 	test	rsi, rsi
 1039bc8:	0f 85 50 01 00 00 	jne	336 <_runtime.(*semaRoot).dequeue+0x1de>
 1039bce:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1039bd3:	eb 1a 	jmp	26 <_runtime.(*semaRoot).dequeue+0xaf>
 1039bd5:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 1039bda:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 1039bdf:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1039be4:	4c 89 c1 	mov	rcx, r8
 1039be7:	48 89 f2 	mov	rdx, rsi
 1039bea:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 1039bef:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 1039bf3:	48 85 f6 	test	rsi, rsi
 1039bf6:	74 33 	je	51 <_runtime.(*semaRoot).dequeue+0xeb>
 1039bf8:	74 11 	je	17 <_runtime.(*semaRoot).dequeue+0xcb>
 1039bfa:	48 8b 7a 18 	mov	rdi, qword ptr [rdx + 24]
 1039bfe:	48 85 ff 	test	rdi, rdi
 1039c01:	74 18 	je	24 <_runtime.(*semaRoot).dequeue+0xdb>
 1039c03:	8b 76 38 	mov	esi, dword ptr [rsi + 56]
 1039c06:	39 77 38 	cmp	dword ptr [rdi + 56], esi
 1039c09:	73 10 	jae	16 <_runtime.(*semaRoot).dequeue+0xdb>
 1039c0b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1039c0f:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1039c14:	e8 07 04 00 00 	call	1031 <_runtime.(*semaRoot).rotateRight>
 1039c19:	eb ba 	jmp	-70 <_runtime.(*semaRoot).dequeue+0x95>
 1039c1b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1039c1f:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1039c24:	e8 97 02 00 00 	call	663 <_runtime.(*semaRoot).rotateLeft>
 1039c29:	eb aa 	jmp	-86 <_runtime.(*semaRoot).dequeue+0x95>
 1039c2b:	48 83 7a 18 00 	cmp	qword ptr [rdx + 24], 0
 1039c30:	74 05 	je	5 <_runtime.(*semaRoot).dequeue+0xf7>
 1039c32:	48 85 f6 	test	rsi, rsi
 1039c35:	eb c1 	jmp	-63 <_runtime.(*semaRoot).dequeue+0xb8>
 1039c37:	48 8b 72 40 	mov	rsi, qword ptr [rdx + 64]
 1039c3b:	48 85 f6 	test	rsi, rsi
 1039c3e:	0f 84 b5 00 00 00 	je	181 <_runtime.(*semaRoot).dequeue+0x1b9>
 1039c44:	48 39 56 18 	cmp	qword ptr [rsi + 24], rdx
 1039c48:	0f 85 85 00 00 00 	jne	133 <_runtime.(*semaRoot).dequeue+0x193>
 1039c4e:	83 3d ab dc 0b 00 00 	cmp	dword ptr [rip + 777387], 0
 1039c55:	75 6f 	jne	111 <_runtime.(*semaRoot).dequeue+0x186>
 1039c57:	48 c7 46 18 00 00 00 00 	mov	qword ptr [rsi + 24], 0
 1039c5f:	83 3d 9a dc 0b 00 00 	cmp	dword ptr [rip + 777370], 0
 1039c66:	75 32 	jne	50 <_runtime.(*semaRoot).dequeue+0x15a>
 1039c68:	48 c7 42 40 00 00 00 00 	mov	qword ptr [rdx + 64], 0
 1039c70:	48 c7 42 20 00 00 00 00 	mov	qword ptr [rdx + 32], 0
 1039c78:	0f 57 c0 	xorps	xmm0, xmm0
 1039c7b:	0f 11 42 10 	movups	xmmword ptr [rdx + 16], xmm0
 1039c7f:	c7 42 38 00 00 00 00 	mov	dword ptr [rdx + 56], 0
 1039c86:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 1039c8b:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 1039c90:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1039c95:	48 83 c4 38 	add	rsp, 56
 1039c99:	c3 	ret
 1039c9a:	48 8d 7a 40 	lea	rdi, [rdx + 64]
 1039c9e:	31 c0 	xor	eax, eax
 1039ca0:	e8 3b 8d 01 00 	call	101691 <_runtime.gcWriteBarrier>
 1039ca5:	48 8d 7a 20 	lea	rdi, [rdx + 32]
 1039ca9:	31 c0 	xor	eax, eax
 1039cab:	e8 30 8d 01 00 	call	101680 <_runtime.gcWriteBarrier>
 1039cb0:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 1039cb4:	31 c0 	xor	eax, eax
 1039cb6:	e8 25 8d 01 00 	call	101669 <_runtime.gcWriteBarrier>
 1039cbb:	48 8d 7a 18 	lea	rdi, [rdx + 24]
 1039cbf:	e8 1c 8d 01 00 	call	101660 <_runtime.gcWriteBarrier>
 1039cc4:	eb b9 	jmp	-71 <_runtime.(*semaRoot).dequeue+0x13f>
 1039cc6:	48 8d 7e 18 	lea	rdi, [rsi + 24]
 1039cca:	31 c0 	xor	eax, eax
 1039ccc:	e8 0f 8d 01 00 	call	101647 <_runtime.gcWriteBarrier>
 1039cd1:	eb 8c 	jmp	-116 <_runtime.(*semaRoot).dequeue+0x11f>
 1039cd3:	83 3d 26 dc 0b 00 00 	cmp	dword ptr [rip + 777254], 0
 1039cda:	75 0d 	jne	13 <_runtime.(*semaRoot).dequeue+0x1a9>
 1039cdc:	48 c7 46 10 00 00 00 00 	mov	qword ptr [rsi + 16], 0
 1039ce4:	e9 76 ff ff ff 	jmp	-138 <_runtime.(*semaRoot).dequeue+0x11f>
 1039ce9:	48 8d 7e 10 	lea	rdi, [rsi + 16]
 1039ced:	31 c0 	xor	eax, eax
 1039cef:	e8 ec 8c 01 00 	call	101612 <_runtime.gcWriteBarrier>
 1039cf4:	e9 66 ff ff ff 	jmp	-154 <_runtime.(*semaRoot).dequeue+0x11f>
 1039cf9:	83 3d 00 dc 0b 00 00 	cmp	dword ptr [rip + 777216], 0
 1039d00:	75 0d 	jne	13 <_runtime.(*semaRoot).dequeue+0x1cf>
 1039d02:	48 c7 41 08 00 00 00 00 	mov	qword ptr [rcx + 8], 0
 1039d0a:	e9 50 ff ff ff 	jmp	-176 <_runtime.(*semaRoot).dequeue+0x11f>
 1039d0f:	48 89 c7 	mov	rdi, rax
 1039d12:	31 c0 	xor	eax, eax
 1039d14:	e8 c7 8c 01 00 	call	101575 <_runtime.gcWriteBarrier>
 1039d19:	e9 41 ff ff ff 	jmp	-191 <_runtime.(*semaRoot).dequeue+0x11f>
 1039d1e:	83 3d db db 0b 00 00 	cmp	dword ptr [rip + 777179], 0
 1039d25:	0f 85 31 01 00 00 	jne	305 <_runtime.(*semaRoot).dequeue+0x31c>
 1039d2b:	48 89 37 	mov	qword ptr [rdi], rsi
 1039d2e:	8b 4a 38 	mov	ecx, dword ptr [rdx + 56]
 1039d31:	89 4e 38 	mov	dword ptr [rsi + 56], ecx
 1039d34:	48 8b 42 40 	mov	rax, qword ptr [rdx + 64]
 1039d38:	83 3d c1 db 0b 00 00 	cmp	dword ptr [rip + 777153], 0
 1039d3f:	0f 85 09 01 00 00 	jne	265 <_runtime.(*semaRoot).dequeue+0x30e>
 1039d45:	48 89 46 40 	mov	qword ptr [rsi + 64], rax
 1039d49:	48 8b 42 18 	mov	rax, qword ptr [rdx + 24]
 1039d4d:	83 3d ac db 0b 00 00 	cmp	dword ptr [rip + 777132], 0
 1039d54:	0f 85 e6 00 00 00 	jne	230 <_runtime.(*semaRoot).dequeue+0x300>
 1039d5a:	48 89 46 18 	mov	qword ptr [rsi + 24], rax
 1039d5e:	48 85 c0 	test	rax, rax
 1039d61:	74 11 	je	17 <_runtime.(*semaRoot).dequeue+0x234>
 1039d63:	83 3d 96 db 0b 00 00 	cmp	dword ptr [rip + 777110], 0
 1039d6a:	0f 85 bf 00 00 00 	jne	191 <_runtime.(*semaRoot).dequeue+0x2ef>
 1039d70:	48 89 70 40 	mov	qword ptr [rax + 64], rsi
 1039d74:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 1039d78:	83 3d 81 db 0b 00 00 	cmp	dword ptr [rip + 777089], 0
 1039d7f:	0f 85 9c 00 00 00 	jne	156 <_runtime.(*semaRoot).dequeue+0x2e1>
 1039d85:	48 89 46 10 	mov	qword ptr [rsi + 16], rax
 1039d89:	48 85 c0 	test	rax, rax
 1039d8c:	74 0d 	je	13 <_runtime.(*semaRoot).dequeue+0x25b>
 1039d8e:	83 3d 6b db 0b 00 00 	cmp	dword ptr [rip + 777067], 0
 1039d95:	75 79 	jne	121 <_runtime.(*semaRoot).dequeue+0x2d0>
 1039d97:	48 89 70 40 	mov	qword ptr [rax + 64], rsi
 1039d9b:	48 83 7e 48 00 	cmp	qword ptr [rsi + 72], 0
 1039da0:	74 4e 	je	78 <_runtime.(*semaRoot).dequeue+0x2b0>
 1039da2:	48 8b 42 50 	mov	rax, qword ptr [rdx + 80]
 1039da6:	83 3d 53 db 0b 00 00 	cmp	dword ptr [rip + 777043], 0
 1039dad:	75 36 	jne	54 <_runtime.(*semaRoot).dequeue+0x2a5>
 1039daf:	48 89 46 50 	mov	qword ptr [rsi + 80], rax
 1039db3:	48 89 5e 28 	mov	qword ptr [rsi + 40], rbx
 1039db7:	83 3d 42 db 0b 00 00 	cmp	dword ptr [rip + 777026], 0
 1039dbe:	75 0c 	jne	12 <_runtime.(*semaRoot).dequeue+0x28c>
 1039dc0:	0f 57 c0 	xorps	xmm0, xmm0
 1039dc3:	0f 11 42 48 	movups	xmmword ptr [rdx + 72], xmm0
 1039dc7:	e9 93 fe ff ff 	jmp	-365 <_runtime.(*semaRoot).dequeue+0x11f>
 1039dcc:	48 8d 7a 48 	lea	rdi, [rdx + 72]
 1039dd0:	31 c0 	xor	eax, eax
 1039dd2:	e8 09 8c 01 00 	call	101385 <_runtime.gcWriteBarrier>
 1039dd7:	48 8d 7a 50 	lea	rdi, [rdx + 80]
 1039ddb:	e8 00 8c 01 00 	call	101376 <_runtime.gcWriteBarrier>
 1039de0:	e9 7a fe ff ff 	jmp	-390 <_runtime.(*semaRoot).dequeue+0x11f>
 1039de5:	48 8d 7e 50 	lea	rdi, [rsi + 80]
 1039de9:	e8 f2 8b 01 00 	call	101362 <_runtime.gcWriteBarrier>
 1039dee:	eb c3 	jmp	-61 <_runtime.(*semaRoot).dequeue+0x273>
 1039df0:	83 3d 09 db 0b 00 00 	cmp	dword ptr [rip + 776969], 0
 1039df7:	75 0a 	jne	10 <_runtime.(*semaRoot).dequeue+0x2c3>
 1039df9:	48 c7 46 50 00 00 00 00 	mov	qword ptr [rsi + 80], 0
 1039e01:	eb b0 	jmp	-80 <_runtime.(*semaRoot).dequeue+0x273>
 1039e03:	48 8d 7e 50 	lea	rdi, [rsi + 80]
 1039e07:	31 c0 	xor	eax, eax
 1039e09:	e8 d2 8b 01 00 	call	101330 <_runtime.gcWriteBarrier>
 1039e0e:	eb a3 	jmp	-93 <_runtime.(*semaRoot).dequeue+0x273>
 1039e10:	48 8d 78 40 	lea	rdi, [rax + 64]
 1039e14:	48 89 f0 	mov	rax, rsi
 1039e17:	e8 c4 8b 01 00 	call	101316 <_runtime.gcWriteBarrier>
 1039e1c:	e9 7a ff ff ff 	jmp	-134 <_runtime.(*semaRoot).dequeue+0x25b>
 1039e21:	48 8d 7e 10 	lea	rdi, [rsi + 16]
 1039e25:	e8 b6 8b 01 00 	call	101302 <_runtime.gcWriteBarrier>
 1039e2a:	e9 5a ff ff ff 	jmp	-166 <_runtime.(*semaRoot).dequeue+0x249>
 1039e2f:	48 8d 78 40 	lea	rdi, [rax + 64]
 1039e33:	48 89 f0 	mov	rax, rsi
 1039e36:	e8 a5 8b 01 00 	call	101285 <_runtime.gcWriteBarrier>
 1039e3b:	e9 34 ff ff ff 	jmp	-204 <_runtime.(*semaRoot).dequeue+0x234>
 1039e40:	48 8d 7e 18 	lea	rdi, [rsi + 24]
 1039e44:	e8 97 8b 01 00 	call	101271 <_runtime.gcWriteBarrier>
 1039e49:	e9 10 ff ff ff 	jmp	-240 <_runtime.(*semaRoot).dequeue+0x21e>
 1039e4e:	48 8d 7e 40 	lea	rdi, [rsi + 64]
 1039e52:	e8 89 8b 01 00 	call	101257 <_runtime.gcWriteBarrier>
 1039e57:	e9 ed fe ff ff 	jmp	-275 <_runtime.(*semaRoot).dequeue+0x209>
 1039e5c:	48 89 f0 	mov	rax, rsi
 1039e5f:	e8 7c 8b 01 00 	call	101244 <_runtime.gcWriteBarrier>
 1039e64:	e9 c5 fe ff ff 	jmp	-315 <_runtime.(*semaRoot).dequeue+0x1ee>
 1039e69:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 1039e6e:	e8 cd 84 01 00 	call	99533 <_runtime.cputicks>
 1039e73:	48 8b 1c 24 	mov	rbx, qword ptr [rsp]
 1039e77:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1039e7c:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1039e81:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1039e86:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 1039e8b:	e9 31 fd ff ff 	jmp	-719 <_runtime.(*semaRoot).dequeue+0x81>
 1039e90:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 1039e99:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 1039ea2:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1039ea7:	48 83 c4 38 	add	rsp, 56
 1039eab:	c3 	ret
 1039eac:	e8 1f 6d 01 00 	call	93471 <_runtime.morestack_noctxt>
 1039eb1:	e9 8a fc ff ff 	jmp	-886 <_runtime.(*semaRoot).dequeue>
 1039eb6:	cc 	int3
 1039eb7:	cc 	int3
 1039eb8:	cc 	int3
 1039eb9:	cc 	int3
 1039eba:	cc 	int3
 1039ebb:	cc 	int3
 1039ebc:	cc 	int3
 1039ebd:	cc 	int3
 1039ebe:	cc 	int3
 1039ebf:	cc 	int3

_runtime.(*semaRoot).rotateLeft:
 1039ec0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1039ec9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1039ecd:	0f 86 41 01 00 00 	jbe	321 <_runtime.(*semaRoot).rotateLeft+0x154>
 1039ed3:	48 83 ec 18 	sub	rsp, 24
 1039ed7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1039edc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1039ee1:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1039ee6:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1039eea:	48 8b 50 40 	mov	rdx, qword ptr [rax + 64]
 1039eee:	48 8b 59 18 	mov	rbx, qword ptr [rcx + 24]
 1039ef2:	83 3d 07 da 0b 00 00 	cmp	dword ptr [rip + 776711], 0
 1039ef9:	0f 85 cf 00 00 00 	jne	207 <_runtime.(*semaRoot).rotateLeft+0x10e>
 1039eff:	48 89 41 18 	mov	qword ptr [rcx + 24], rax
 1039f03:	48 89 48 40 	mov	qword ptr [rax + 64], rcx
 1039f07:	48 89 58 10 	mov	qword ptr [rax + 16], rbx
 1039f0b:	48 85 db 	test	rbx, rbx
 1039f0e:	74 11 	je	17 <_runtime.(*semaRoot).rotateLeft+0x61>
 1039f10:	83 3d e9 d9 0b 00 00 	cmp	dword ptr [rip + 776681], 0
 1039f17:	0f 85 a3 00 00 00 	jne	163 <_runtime.(*semaRoot).rotateLeft+0x100>
 1039f1d:	48 89 43 40 	mov	qword ptr [rbx + 64], rax
 1039f21:	83 3d d8 d9 0b 00 00 	cmp	dword ptr [rip + 776664], 0
 1039f28:	75 7f 	jne	127 <_runtime.(*semaRoot).rotateLeft+0xe9>
 1039f2a:	48 89 51 40 	mov	qword ptr [rcx + 64], rdx
 1039f2e:	48 85 d2 	test	rdx, rdx
 1039f31:	74 52 	je	82 <_runtime.(*semaRoot).rotateLeft+0xc5>
 1039f33:	48 39 42 18 	cmp	qword ptr [rdx + 24], rax
 1039f37:	75 25 	jne	37 <_runtime.(*semaRoot).rotateLeft+0x9e>
 1039f39:	83 3d c0 d9 0b 00 00 	cmp	dword ptr [rip + 776640], 0
 1039f40:	75 0e 	jne	14 <_runtime.(*semaRoot).rotateLeft+0x90>
 1039f42:	48 89 4a 18 	mov	qword ptr [rdx + 24], rcx
 1039f46:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1039f4b:	48 83 c4 18 	add	rsp, 24
 1039f4f:	c3 	ret
 1039f50:	48 8d 7a 18 	lea	rdi, [rdx + 24]
 1039f54:	48 89 c8 	mov	rax, rcx
 1039f57:	e8 84 8a 01 00 	call	100996 <_runtime.gcWriteBarrier>
 1039f5c:	eb e8 	jmp	-24 <_runtime.(*semaRoot).rotateLeft+0x86>
 1039f5e:	48 39 42 10 	cmp	qword ptr [rdx + 16], rax
 1039f62:	0f 85 92 00 00 00 	jne	146 <_runtime.(*semaRoot).rotateLeft+0x13a>
 1039f68:	83 3d 91 d9 0b 00 00 	cmp	dword ptr [rip + 776593], 0
 1039f6f:	75 06 	jne	6 <_runtime.(*semaRoot).rotateLeft+0xb7>
 1039f71:	48 89 4a 10 	mov	qword ptr [rdx + 16], rcx
 1039f75:	eb cf 	jmp	-49 <_runtime.(*semaRoot).rotateLeft+0x86>
 1039f77:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 1039f7b:	48 89 c8 	mov	rax, rcx
 1039f7e:	e8 5d 8a 01 00 	call	100957 <_runtime.gcWriteBarrier>
 1039f83:	eb c1 	jmp	-63 <_runtime.(*semaRoot).rotateLeft+0x86>
 1039f85:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1039f8a:	84 02 	test	byte ptr [rdx], al
 1039f8c:	83 3d 6d d9 0b 00 00 	cmp	dword ptr [rip + 776557], 0
 1039f93:	75 06 	jne	6 <_runtime.(*semaRoot).rotateLeft+0xdb>
 1039f95:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 1039f99:	eb ab 	jmp	-85 <_runtime.(*semaRoot).rotateLeft+0x86>
 1039f9b:	48 8d 7a 08 	lea	rdi, [rdx + 8]
 1039f9f:	48 89 c8 	mov	rax, rcx
 1039fa2:	e8 39 8a 01 00 	call	100921 <_runtime.gcWriteBarrier>
 1039fa7:	eb 9d 	jmp	-99 <_runtime.(*semaRoot).rotateLeft+0x86>
 1039fa9:	48 8d 79 40 	lea	rdi, [rcx + 64]
 1039fad:	48 89 c3 	mov	rbx, rax
 1039fb0:	48 89 d0 	mov	rax, rdx
 1039fb3:	e8 28 8a 01 00 	call	100904 <_runtime.gcWriteBarrier>
 1039fb8:	48 89 d8 	mov	rax, rbx
 1039fbb:	e9 6e ff ff ff 	jmp	-146 <_runtime.(*semaRoot).rotateLeft+0x6e>
 1039fc0:	48 8d 7b 40 	lea	rdi, [rbx + 64]
 1039fc4:	e8 17 8a 01 00 	call	100887 <_runtime.gcWriteBarrier>
 1039fc9:	e9 53 ff ff ff 	jmp	-173 <_runtime.(*semaRoot).rotateLeft+0x61>
 1039fce:	48 8d 79 18 	lea	rdi, [rcx + 24]
 1039fd2:	e8 09 8a 01 00 	call	100873 <_runtime.gcWriteBarrier>
 1039fd7:	48 8d 78 40 	lea	rdi, [rax + 64]
 1039fdb:	48 89 c6 	mov	rsi, rax
 1039fde:	48 89 c8 	mov	rax, rcx
 1039fe1:	e8 fa 89 01 00 	call	100858 <_runtime.gcWriteBarrier>
 1039fe6:	48 8d 7e 10 	lea	rdi, [rsi + 16]
 1039fea:	48 89 d8 	mov	rax, rbx
 1039fed:	e8 ee 89 01 00 	call	100846 <_runtime.gcWriteBarrier>
 1039ff2:	48 89 f0 	mov	rax, rsi
 1039ff5:	e9 11 ff ff ff 	jmp	-239 <_runtime.(*semaRoot).rotateLeft+0x4b>
 1039ffa:	48 8d 05 bb a0 03 00 	lea	rax, [rip + 237755]
 103a001:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a005:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 103a00e:	e8 4d ed fe ff 	call	-70323 <_runtime.throw>
 103a013:	90 	nop
 103a014:	e8 b7 6b 01 00 	call	93111 <_runtime.morestack_noctxt>
 103a019:	e9 a2 fe ff ff 	jmp	-350 <_runtime.(*semaRoot).rotateLeft>
 103a01e:	cc 	int3
 103a01f:	cc 	int3

_runtime.(*semaRoot).rotateRight:
 103a020:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103a029:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103a02d:	0f 86 41 01 00 00 	jbe	321 <_runtime.(*semaRoot).rotateRight+0x154>
 103a033:	48 83 ec 18 	sub	rsp, 24
 103a037:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103a03c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103a041:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103a046:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 103a04a:	48 8b 50 40 	mov	rdx, qword ptr [rax + 64]
 103a04e:	48 8b 59 10 	mov	rbx, qword ptr [rcx + 16]
 103a052:	83 3d a7 d8 0b 00 00 	cmp	dword ptr [rip + 776359], 0
 103a059:	0f 85 cf 00 00 00 	jne	207 <_runtime.(*semaRoot).rotateRight+0x10e>
 103a05f:	48 89 41 10 	mov	qword ptr [rcx + 16], rax
 103a063:	48 89 48 40 	mov	qword ptr [rax + 64], rcx
 103a067:	48 89 58 18 	mov	qword ptr [rax + 24], rbx
 103a06b:	48 85 db 	test	rbx, rbx
 103a06e:	74 11 	je	17 <_runtime.(*semaRoot).rotateRight+0x61>
 103a070:	83 3d 89 d8 0b 00 00 	cmp	dword ptr [rip + 776329], 0
 103a077:	0f 85 a3 00 00 00 	jne	163 <_runtime.(*semaRoot).rotateRight+0x100>
 103a07d:	48 89 43 40 	mov	qword ptr [rbx + 64], rax
 103a081:	83 3d 78 d8 0b 00 00 	cmp	dword ptr [rip + 776312], 0
 103a088:	75 7f 	jne	127 <_runtime.(*semaRoot).rotateRight+0xe9>
 103a08a:	48 89 51 40 	mov	qword ptr [rcx + 64], rdx
 103a08e:	48 85 d2 	test	rdx, rdx
 103a091:	74 52 	je	82 <_runtime.(*semaRoot).rotateRight+0xc5>
 103a093:	48 39 42 18 	cmp	qword ptr [rdx + 24], rax
 103a097:	75 25 	jne	37 <_runtime.(*semaRoot).rotateRight+0x9e>
 103a099:	83 3d 60 d8 0b 00 00 	cmp	dword ptr [rip + 776288], 0
 103a0a0:	75 0e 	jne	14 <_runtime.(*semaRoot).rotateRight+0x90>
 103a0a2:	48 89 4a 18 	mov	qword ptr [rdx + 24], rcx
 103a0a6:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 103a0ab:	48 83 c4 18 	add	rsp, 24
 103a0af:	c3 	ret
 103a0b0:	48 8d 7a 18 	lea	rdi, [rdx + 24]
 103a0b4:	48 89 c8 	mov	rax, rcx
 103a0b7:	e8 24 89 01 00 	call	100644 <_runtime.gcWriteBarrier>
 103a0bc:	eb e8 	jmp	-24 <_runtime.(*semaRoot).rotateRight+0x86>
 103a0be:	48 39 42 10 	cmp	qword ptr [rdx + 16], rax
 103a0c2:	0f 85 92 00 00 00 	jne	146 <_runtime.(*semaRoot).rotateRight+0x13a>
 103a0c8:	83 3d 31 d8 0b 00 00 	cmp	dword ptr [rip + 776241], 0
 103a0cf:	75 06 	jne	6 <_runtime.(*semaRoot).rotateRight+0xb7>
 103a0d1:	48 89 4a 10 	mov	qword ptr [rdx + 16], rcx
 103a0d5:	eb cf 	jmp	-49 <_runtime.(*semaRoot).rotateRight+0x86>
 103a0d7:	48 8d 7a 10 	lea	rdi, [rdx + 16]
 103a0db:	48 89 c8 	mov	rax, rcx
 103a0de:	e8 fd 88 01 00 	call	100605 <_runtime.gcWriteBarrier>
 103a0e3:	eb c1 	jmp	-63 <_runtime.(*semaRoot).rotateRight+0x86>
 103a0e5:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 103a0ea:	84 02 	test	byte ptr [rdx], al
 103a0ec:	83 3d 0d d8 0b 00 00 	cmp	dword ptr [rip + 776205], 0
 103a0f3:	75 06 	jne	6 <_runtime.(*semaRoot).rotateRight+0xdb>
 103a0f5:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 103a0f9:	eb ab 	jmp	-85 <_runtime.(*semaRoot).rotateRight+0x86>
 103a0fb:	48 8d 7a 08 	lea	rdi, [rdx + 8]
 103a0ff:	48 89 c8 	mov	rax, rcx
 103a102:	e8 d9 88 01 00 	call	100569 <_runtime.gcWriteBarrier>
 103a107:	eb 9d 	jmp	-99 <_runtime.(*semaRoot).rotateRight+0x86>
 103a109:	48 8d 79 40 	lea	rdi, [rcx + 64]
 103a10d:	48 89 c3 	mov	rbx, rax
 103a110:	48 89 d0 	mov	rax, rdx
 103a113:	e8 c8 88 01 00 	call	100552 <_runtime.gcWriteBarrier>
 103a118:	48 89 d8 	mov	rax, rbx
 103a11b:	e9 6e ff ff ff 	jmp	-146 <_runtime.(*semaRoot).rotateRight+0x6e>
 103a120:	48 8d 7b 40 	lea	rdi, [rbx + 64]
 103a124:	e8 b7 88 01 00 	call	100535 <_runtime.gcWriteBarrier>
 103a129:	e9 53 ff ff ff 	jmp	-173 <_runtime.(*semaRoot).rotateRight+0x61>
 103a12e:	48 8d 79 10 	lea	rdi, [rcx + 16]
 103a132:	e8 a9 88 01 00 	call	100521 <_runtime.gcWriteBarrier>
 103a137:	48 8d 78 40 	lea	rdi, [rax + 64]
 103a13b:	48 89 c6 	mov	rsi, rax
 103a13e:	48 89 c8 	mov	rax, rcx
 103a141:	e8 9a 88 01 00 	call	100506 <_runtime.gcWriteBarrier>
 103a146:	48 8d 7e 18 	lea	rdi, [rsi + 24]
 103a14a:	48 89 d8 	mov	rax, rbx
 103a14d:	e8 8e 88 01 00 	call	100494 <_runtime.gcWriteBarrier>
 103a152:	48 89 f0 	mov	rax, rsi
 103a155:	e9 11 ff ff ff 	jmp	-239 <_runtime.(*semaRoot).rotateRight+0x4b>
 103a15a:	48 8d 05 af a1 03 00 	lea	rax, [rip + 237999]
 103a161:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a165:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 103a16e:	e8 ed eb fe ff 	call	-70675 <_runtime.throw>
 103a173:	90 	nop
 103a174:	e8 57 6a 01 00 	call	92759 <_runtime.morestack_noctxt>
 103a179:	e9 a2 fe ff ff 	jmp	-350 <_runtime.(*semaRoot).rotateRight>
 103a17e:	cc 	int3
 103a17f:	cc 	int3

_runtime.dumpregs:
 103a180:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103a189:	48 8d 44 24 c0 	lea	rax, [rsp - 64]
 103a18e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 103a192:	0f 86 f6 06 00 00 	jbe	1782 <_runtime.dumpregs+0x70e>
 103a198:	48 81 ec c0 00 00 00 	sub	rsp, 192
 103a19f:	48 89 ac 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rbp
 103a1a7:	48 8d ac 24 b8 00 00 00 	lea	rbp, [rsp + 184]
 103a1af:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a1b7:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a1bb:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a1bf:	90 	nop
 103a1c0:	48 8b 49 10 	mov	rcx, qword ptr [rcx + 16]
 103a1c4:	48 89 8c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rcx
 103a1cc:	e8 cf 02 ff ff 	call	-64817 <_runtime.printlock>
 103a1d1:	48 8d 05 76 8d 03 00 	lea	rax, [rip + 232822]
 103a1d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a1dc:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a1e5:	e8 f6 0b ff ff 	call	-62474 <_runtime.printstring>
 103a1ea:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 103a1f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a1f6:	e8 95 0a ff ff 	call	-62827 <_runtime.printhex>
 103a1fb:	e8 30 05 ff ff 	call	-64208 <_runtime.printnl>
 103a200:	e8 1b 03 ff ff 	call	-64741 <_runtime.printunlock>
 103a205:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a20d:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a211:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a215:	90 	nop
 103a216:	48 8b 49 18 	mov	rcx, qword ptr [rcx + 24]
 103a21a:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 103a222:	e8 79 02 ff ff 	call	-64903 <_runtime.printlock>
 103a227:	48 8d 05 2e 8d 03 00 	lea	rax, [rip + 232750]
 103a22e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a232:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a23b:	e8 a0 0b ff ff 	call	-62560 <_runtime.printstring>
 103a240:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103a248:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a24c:	e8 3f 0a ff ff 	call	-62913 <_runtime.printhex>
 103a251:	e8 da 04 ff ff 	call	-64294 <_runtime.printnl>
 103a256:	e8 c5 02 ff ff 	call	-64827 <_runtime.printunlock>
 103a25b:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a263:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a267:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a26b:	90 	nop
 103a26c:	48 8b 49 20 	mov	rcx, qword ptr [rcx + 32]
 103a270:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 103a275:	e8 26 02 ff ff 	call	-64986 <_runtime.printlock>
 103a27a:	48 8d 05 e2 8c 03 00 	lea	rax, [rip + 232674]
 103a281:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a285:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a28e:	e8 4d 0b ff ff 	call	-62643 <_runtime.printstring>
 103a293:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103a298:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a29c:	e8 ef 09 ff ff 	call	-62993 <_runtime.printhex>
 103a2a1:	e8 8a 04 ff ff 	call	-64374 <_runtime.printnl>
 103a2a6:	e8 75 02 ff ff 	call	-64907 <_runtime.printunlock>
 103a2ab:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a2b3:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a2b7:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a2bb:	90 	nop
 103a2bc:	48 8b 49 28 	mov	rcx, qword ptr [rcx + 40]
 103a2c0:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103a2c5:	e8 d6 01 ff ff 	call	-65066 <_runtime.printlock>
 103a2ca:	48 8d 05 a0 8c 03 00 	lea	rax, [rip + 232608]
 103a2d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a2d5:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a2de:	e8 fd 0a ff ff 	call	-62723 <_runtime.printstring>
 103a2e3:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103a2e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a2ec:	e8 9f 09 ff ff 	call	-63073 <_runtime.printhex>
 103a2f1:	e8 3a 04 ff ff 	call	-64454 <_runtime.printnl>
 103a2f6:	e8 25 02 ff ff 	call	-64987 <_runtime.printunlock>
 103a2fb:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a303:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a307:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a30b:	90 	nop
 103a30c:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a310:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 103a315:	e8 86 01 ff ff 	call	-65146 <_runtime.printlock>
 103a31a:	48 8d 05 49 8c 03 00 	lea	rax, [rip + 232521]
 103a321:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a325:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a32e:	e8 ad 0a ff ff 	call	-62803 <_runtime.printstring>
 103a333:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103a338:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a33c:	e8 4f 09 ff ff 	call	-63153 <_runtime.printhex>
 103a341:	e8 ea 03 ff ff 	call	-64534 <_runtime.printnl>
 103a346:	e8 d5 01 ff ff 	call	-65067 <_runtime.printunlock>
 103a34b:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a353:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a357:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a35b:	90 	nop
 103a35c:	48 8b 49 38 	mov	rcx, qword ptr [rcx + 56]
 103a360:	48 89 8c 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rcx
 103a368:	e8 33 01 ff ff 	call	-65229 <_runtime.printlock>
 103a36d:	48 8d 05 12 8c 03 00 	lea	rax, [rip + 232466]
 103a374:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a378:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a381:	e8 5a 0a ff ff 	call	-62886 <_runtime.printstring>
 103a386:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 103a38e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a392:	e8 f9 08 ff ff 	call	-63239 <_runtime.printhex>
 103a397:	e8 94 03 ff ff 	call	-64620 <_runtime.printnl>
 103a39c:	e8 7f 01 ff ff 	call	-65153 <_runtime.printunlock>
 103a3a1:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a3a9:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a3ad:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a3b1:	90 	nop
 103a3b2:	48 8b 49 40 	mov	rcx, qword ptr [rcx + 64]
 103a3b6:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 103a3bb:	e8 e0 00 ff ff 	call	-65312 <_runtime.printlock>
 103a3c0:	48 8d 05 8e 8b 03 00 	lea	rax, [rip + 232334]
 103a3c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a3cb:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a3d4:	e8 07 0a ff ff 	call	-62969 <_runtime.printstring>
 103a3d9:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103a3de:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a3e2:	e8 a9 08 ff ff 	call	-63319 <_runtime.printhex>
 103a3e7:	e8 44 03 ff ff 	call	-64700 <_runtime.printnl>
 103a3ec:	e8 2f 01 ff ff 	call	-65233 <_runtime.printunlock>
 103a3f1:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a3f9:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a3fd:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a401:	90 	nop
 103a402:	48 8b 49 48 	mov	rcx, qword ptr [rcx + 72]
 103a406:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 103a40b:	e8 90 00 ff ff 	call	-65392 <_runtime.printlock>
 103a410:	48 8d 05 76 8b 03 00 	lea	rax, [rip + 232310]
 103a417:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a41b:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a424:	e8 b7 09 ff ff 	call	-63049 <_runtime.printstring>
 103a429:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103a42e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a432:	e8 59 08 ff ff 	call	-63399 <_runtime.printhex>
 103a437:	e8 f4 02 ff ff 	call	-64780 <_runtime.printnl>
 103a43c:	e8 df 00 ff ff 	call	-65313 <_runtime.printunlock>
 103a441:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a449:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a44d:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a451:	90 	nop
 103a452:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103a456:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 103a45b:	e8 40 00 ff ff 	call	-65472 <_runtime.printlock>
 103a460:	48 8d 05 d9 8a 03 00 	lea	rax, [rip + 232153]
 103a467:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a46b:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a474:	e8 67 09 ff ff 	call	-63129 <_runtime.printstring>
 103a479:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103a47e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a482:	e8 09 08 ff ff 	call	-63479 <_runtime.printhex>
 103a487:	e8 a4 02 ff ff 	call	-64860 <_runtime.printnl>
 103a48c:	e8 8f 00 ff ff 	call	-65393 <_runtime.printunlock>
 103a491:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a499:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a49d:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a4a1:	90 	nop
 103a4a2:	48 8b 49 58 	mov	rcx, qword ptr [rcx + 88]
 103a4a6:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 103a4ab:	e8 f0 ff fe ff 	call	-65552 <_runtime.printlock>
 103a4b0:	48 8d 05 90 8a 03 00 	lea	rax, [rip + 232080]
 103a4b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a4bb:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a4c4:	e8 17 09 ff ff 	call	-63209 <_runtime.printstring>
 103a4c9:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103a4ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a4d2:	e8 b9 07 ff ff 	call	-63559 <_runtime.printhex>
 103a4d7:	e8 54 02 ff ff 	call	-64940 <_runtime.printnl>
 103a4dc:	e8 3f 00 ff ff 	call	-65473 <_runtime.printunlock>
 103a4e1:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a4e9:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a4ed:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a4f1:	90 	nop
 103a4f2:	48 8b 49 60 	mov	rcx, qword ptr [rcx + 96]
 103a4f6:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 103a4fb:	e8 a0 ff fe ff 	call	-65632 <_runtime.printlock>
 103a500:	48 8d 05 0f 8a 03 00 	lea	rax, [rip + 231951]
 103a507:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a50b:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a514:	e8 c7 08 ff ff 	call	-63289 <_runtime.printstring>
 103a519:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103a51e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a522:	e8 69 07 ff ff 	call	-63639 <_runtime.printhex>
 103a527:	e8 04 02 ff ff 	call	-65020 <_runtime.printnl>
 103a52c:	e8 ef ff fe ff 	call	-65553 <_runtime.printunlock>
 103a531:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a539:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a53d:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a541:	90 	nop
 103a542:	48 8b 49 68 	mov	rcx, qword ptr [rcx + 104]
 103a546:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 103a54b:	e8 50 ff fe ff 	call	-65712 <_runtime.printlock>
 103a550:	48 8d 05 c6 89 03 00 	lea	rax, [rip + 231878]
 103a557:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a55b:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a564:	e8 77 08 ff ff 	call	-63369 <_runtime.printstring>
 103a569:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103a56e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a572:	e8 19 07 ff ff 	call	-63719 <_runtime.printhex>
 103a577:	e8 b4 01 ff ff 	call	-65100 <_runtime.printnl>
 103a57c:	e8 9f ff fe ff 	call	-65633 <_runtime.printunlock>
 103a581:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a589:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a58d:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a591:	90 	nop
 103a592:	48 8b 49 70 	mov	rcx, qword ptr [rcx + 112]
 103a596:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 103a59b:	e8 00 ff fe ff 	call	-65792 <_runtime.printlock>
 103a5a0:	48 8d 05 7d 89 03 00 	lea	rax, [rip + 231805]
 103a5a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a5ab:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a5b4:	e8 27 08 ff ff 	call	-63449 <_runtime.printstring>
 103a5b9:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103a5be:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a5c2:	e8 c9 06 ff ff 	call	-63799 <_runtime.printhex>
 103a5c7:	e8 64 01 ff ff 	call	-65180 <_runtime.printnl>
 103a5cc:	e8 4f ff fe ff 	call	-65713 <_runtime.printunlock>
 103a5d1:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a5d9:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a5dd:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a5e1:	90 	nop
 103a5e2:	48 8b 49 78 	mov	rcx, qword ptr [rcx + 120]
 103a5e6:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 103a5ee:	e8 ad fe fe ff 	call	-65875 <_runtime.printlock>
 103a5f3:	48 8d 05 31 89 03 00 	lea	rax, [rip + 231729]
 103a5fa:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a5fe:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a607:	e8 d4 07 ff ff 	call	-63532 <_runtime.printstring>
 103a60c:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 103a614:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a618:	e8 73 06 ff ff 	call	-63885 <_runtime.printhex>
 103a61d:	e8 0e 01 ff ff 	call	-65266 <_runtime.printnl>
 103a622:	e8 f9 fe fe ff 	call	-65799 <_runtime.printunlock>
 103a627:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a62f:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a633:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a637:	90 	nop
 103a638:	48 8b 89 80 00 00 00 	mov	rcx, qword ptr [rcx + 128]
 103a63f:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103a644:	e8 57 fe fe ff 	call	-65961 <_runtime.printlock>
 103a649:	48 8d 05 e2 88 03 00 	lea	rax, [rip + 231650]
 103a650:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a654:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a65d:	e8 7e 07 ff ff 	call	-63618 <_runtime.printstring>
 103a662:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103a667:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a66b:	e8 20 06 ff ff 	call	-63968 <_runtime.printhex>
 103a670:	e8 bb 00 ff ff 	call	-65349 <_runtime.printnl>
 103a675:	e8 a6 fe fe ff 	call	-65882 <_runtime.printunlock>
 103a67a:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a682:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a686:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a68a:	90 	nop
 103a68b:	48 8b 89 88 00 00 00 	mov	rcx, qword ptr [rcx + 136]
 103a692:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 103a69a:	e8 01 fe fe ff 	call	-66047 <_runtime.printlock>
 103a69f:	48 8d 05 93 88 03 00 	lea	rax, [rip + 231571]
 103a6a6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a6aa:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a6b3:	e8 28 07 ff ff 	call	-63704 <_runtime.printstring>
 103a6b8:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103a6c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a6c4:	e8 c7 05 ff ff 	call	-64057 <_runtime.printhex>
 103a6c9:	e8 62 00 ff ff 	call	-65438 <_runtime.printnl>
 103a6ce:	e8 4d fe fe ff 	call	-65971 <_runtime.printunlock>
 103a6d3:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a6db:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a6df:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a6e3:	90 	nop
 103a6e4:	48 8b 89 90 00 00 00 	mov	rcx, qword ptr [rcx + 144]
 103a6eb:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103a6f0:	e8 ab fd fe ff 	call	-66133 <_runtime.printlock>
 103a6f5:	48 8d 05 83 88 03 00 	lea	rax, [rip + 231555]
 103a6fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a700:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a709:	e8 d2 06 ff ff 	call	-63790 <_runtime.printstring>
 103a70e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103a713:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a717:	e8 74 05 ff ff 	call	-64140 <_runtime.printhex>
 103a71c:	e8 0f 00 ff ff 	call	-65521 <_runtime.printnl>
 103a721:	e8 fa fd fe ff 	call	-66054 <_runtime.printunlock>
 103a726:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a72e:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a732:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a736:	90 	nop
 103a737:	48 8b 89 98 00 00 00 	mov	rcx, qword ptr [rcx + 152]
 103a73e:	48 89 8c 24 98 00 00 00 	mov	qword ptr [rsp + 152], rcx
 103a746:	e8 55 fd fe ff 	call	-66219 <_runtime.printlock>
 103a74b:	48 8d 05 26 88 03 00 	lea	rax, [rip + 231462]
 103a752:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a756:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a75f:	e8 7c 06 ff ff 	call	-63876 <_runtime.printstring>
 103a764:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103a76c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a770:	e8 1b 05 ff ff 	call	-64229 <_runtime.printhex>
 103a775:	e8 b6 ff fe ff 	call	-65610 <_runtime.printnl>
 103a77a:	e8 a1 fd fe ff 	call	-66143 <_runtime.printunlock>
 103a77f:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a787:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a78b:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a78f:	90 	nop
 103a790:	48 8b 89 a0 00 00 00 	mov	rcx, qword ptr [rcx + 160]
 103a797:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 103a79f:	e8 fc fc fe ff 	call	-66308 <_runtime.printlock>
 103a7a4:	48 8d 05 48 87 03 00 	lea	rax, [rip + 231240]
 103a7ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a7af:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a7b8:	e8 23 06 ff ff 	call	-63965 <_runtime.printstring>
 103a7bd:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 103a7c5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a7c9:	e8 c2 04 ff ff 	call	-64318 <_runtime.printhex>
 103a7ce:	e8 5d ff fe ff 	call	-65699 <_runtime.printnl>
 103a7d3:	e8 48 fd fe ff 	call	-66232 <_runtime.printunlock>
 103a7d8:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a7e0:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a7e4:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103a7e8:	90 	nop
 103a7e9:	48 8b 89 a8 00 00 00 	mov	rcx, qword ptr [rcx + 168]
 103a7f0:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 103a7f5:	e8 a6 fc fe ff 	call	-66394 <_runtime.printlock>
 103a7fa:	48 8d 05 f9 86 03 00 	lea	rax, [rip + 231161]
 103a801:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a805:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a80e:	e8 cd 05 ff ff 	call	-64051 <_runtime.printstring>
 103a813:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103a818:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a81c:	e8 6f 04 ff ff 	call	-64401 <_runtime.printhex>
 103a821:	e8 0a ff fe ff 	call	-65782 <_runtime.printnl>
 103a826:	e8 f5 fc fe ff 	call	-66315 <_runtime.printunlock>
 103a82b:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103a833:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 103a837:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103a83b:	90 	nop
 103a83c:	48 8b 80 b0 00 00 00 	mov	rax, qword ptr [rax + 176]
 103a843:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 103a848:	e8 53 fc fe ff 	call	-66477 <_runtime.printlock>
 103a84d:	48 8d 05 b4 86 03 00 	lea	rax, [rip + 231092]
 103a854:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a858:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103a861:	e8 7a 05 ff ff 	call	-64134 <_runtime.printstring>
 103a866:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103a86b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103a86f:	e8 1c 04 ff ff 	call	-64484 <_runtime.printhex>
 103a874:	e8 b7 fe fe ff 	call	-65865 <_runtime.printnl>
 103a879:	e8 a2 fc fe ff 	call	-66398 <_runtime.printunlock>
 103a87e:	48 8b ac 24 b8 00 00 00 	mov	rbp, qword ptr [rsp + 184]
 103a886:	48 81 c4 c0 00 00 00 	add	rsp, 192
 103a88d:	c3 	ret
 103a88e:	e8 3d 63 01 00 	call	90941 <_runtime.morestack_noctxt>
 103a893:	e9 e8 f8 ff ff 	jmp	-1816 <_runtime.dumpregs>
 103a898:	cc 	int3
 103a899:	cc 	int3
 103a89a:	cc 	int3
 103a89b:	cc 	int3
 103a89c:	cc 	int3
 103a89d:	cc 	int3
 103a89e:	cc 	int3
 103a89f:	cc 	int3

_runtime.(*sigctxt).preparePanic:
 103a8a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103a8a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103a8ad:	0f 86 2e 01 00 00 	jbe	302 <_runtime.(*sigctxt).preparePanic+0x141>
 103a8b3:	48 83 ec 28 	sub	rsp, 40
 103a8b7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103a8bc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103a8c1:	8b 54 24 38 	mov	edx, dword ptr [rsp + 56]
 103a8c5:	83 fa 08 	cmp	edx, 8
 103a8c8:	0f 85 fe 00 00 00 	jne	254 <_runtime.(*sigctxt).preparePanic+0x12c>
 103a8ce:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 103a8d3:	48 83 ba 00 01 00 00 00 	cmp	qword ptr [rdx + 256], 0
 103a8db:	75 3f 	jne	63 <_runtime.(*sigctxt).preparePanic+0x7c>
 103a8dd:	48 8b 9a 10 01 00 00 	mov	rbx, qword ptr [rdx + 272]
 103a8e4:	0f b6 33 	movzx	esi, byte ptr [rbx]
 103a8e7:	89 f7 	mov	edi, esi
 103a8e9:	83 e6 f0 	and	esi, -16
 103a8ec:	40 80 fe 40 	cmp	sil, 64
 103a8f0:	0f 85 c5 00 00 00 	jne	197 <_runtime.(*sigctxt).preparePanic+0x11b>
 103a8f6:	b8 01 00 00 00 	mov	eax, 1
 103a8fb:	48 83 f8 04 	cmp	rax, 4
 103a8ff:	0f 83 d1 00 00 00 	jae	209 <_runtime.(*sigctxt).preparePanic+0x136>
 103a905:	0f b6 04 03 	movzx	eax, byte ptr [rbx + rax]
 103a909:	3c f6 	cmp	al, -10
 103a90b:	0f 85 9d 00 00 00 	jne	157 <_runtime.(*sigctxt).preparePanic+0x10e>
 103a911:	48 c7 82 00 01 00 00 07 00 00 00 	mov	qword ptr [rdx + 256], 7
 103a91c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103a921:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a925:	48 8b 59 30 	mov	rbx, qword ptr [rcx + 48]
 103a929:	48 8b 73 48 	mov	rsi, qword ptr [rbx + 72]
 103a92d:	84 00 	test	byte ptr [rax], al
 103a92f:	84 01 	test	byte ptr [rcx], al
 103a931:	90 	nop
 103a932:	90 	nop
 103a933:	48 8b 0e 	mov	rcx, qword ptr [rsi]
 103a936:	90 	nop
 103a937:	48 8b 9b 90 00 00 00 	mov	rbx, qword ptr [rbx + 144]
 103a93e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103a942:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 103a947:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103a94c:	e8 2f ec fe ff 	call	-70609 <_runtime.shouldPushSigpanic>
 103a951:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 103a956:	75 31 	jne	49 <_runtime.(*sigctxt).preparePanic+0xe9>
 103a958:	48 8d 05 e1 d0 03 00 	lea	rax, [rip + 250081]
 103a95f:	84 00 	test	byte ptr [rax], al
 103a961:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103a966:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 103a96a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103a96e:	90 	nop
 103a96f:	90 	nop
 103a970:	48 8b 0d c9 d0 03 00 	mov	rcx, qword ptr [rip + 250057]
 103a977:	90 	nop
 103a978:	48 89 88 90 00 00 00 	mov	qword ptr [rax + 144], rcx
 103a97f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 103a984:	48 83 c4 28 	add	rsp, 40
 103a988:	c3 	ret
 103a989:	48 8d 05 b0 d0 03 00 	lea	rax, [rip + 250032]
 103a990:	84 00 	test	byte ptr [rax], al
 103a992:	48 8b 05 a7 d0 03 00 	mov	rax, qword ptr [rip + 250023]
 103a999:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103a99e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103a9a2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103a9a7:	e8 44 00 00 00 	call	68 <_runtime.(*sigctxt).pushCall>
 103a9ac:	eb d1 	jmp	-47 <_runtime.(*sigctxt).preparePanic+0xdf>
 103a9ae:	3c f7 	cmp	al, -9
 103a9b0:	0f 84 5b ff ff ff 	je	-165 <_runtime.(*sigctxt).preparePanic+0x71>
 103a9b6:	e9 61 ff ff ff 	jmp	-159 <_runtime.(*sigctxt).preparePanic+0x7c>
 103a9bb:	40 80 ff 66 	cmp	dil, 102
 103a9bf:	40 0f 94 c6 	sete	sil
 103a9c3:	40 0f b6 c6 	movzx	eax, sil
 103a9c7:	e9 2f ff ff ff 	jmp	-209 <_runtime.(*sigctxt).preparePanic+0x5b>
 103a9cc:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 103a9d1:	e9 46 ff ff ff 	jmp	-186 <_runtime.(*sigctxt).preparePanic+0x7c>
 103a9d6:	b9 04 00 00 00 	mov	ecx, 4
 103a9db:	e8 70 89 01 00 	call	100720 <_runtime.panicIndex>
 103a9e0:	90 	nop
 103a9e1:	e8 ea 61 01 00 	call	90602 <_runtime.morestack_noctxt>
 103a9e6:	e9 b5 fe ff ff 	jmp	-331 <_runtime.(*sigctxt).preparePanic>
 103a9eb:	cc 	int3
 103a9ec:	cc 	int3
 103a9ed:	cc 	int3
 103a9ee:	cc 	int3
 103a9ef:	cc 	int3

_runtime.(*sigctxt).pushCall:
 103a9f0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103a9f5:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103a9f9:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 103a9fd:	48 8b 5a 48 	mov	rbx, qword ptr [rdx + 72]
 103aa01:	48 83 c3 f8 	add	rbx, -8
 103aa05:	48 89 de 	mov	rsi, rbx
 103aa08:	84 00 	test	byte ptr [rax], al
 103aa0a:	84 01 	test	byte ptr [rcx], al
 103aa0c:	90 	nop
 103aa0d:	90 	nop
 103aa0e:	90 	nop
 103aa0f:	48 8b 8a 90 00 00 00 	mov	rcx, qword ptr [rdx + 144]
 103aa16:	48 89 0b 	mov	qword ptr [rbx], rcx
 103aa19:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103aa1d:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103aa21:	90 	nop
 103aa22:	90 	nop
 103aa23:	48 89 71 48 	mov	qword ptr [rcx + 72], rsi
 103aa27:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 103aa2b:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103aa2f:	90 	nop
 103aa30:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103aa35:	48 89 88 90 00 00 00 	mov	qword ptr [rax + 144], rcx
 103aa3c:	c3 	ret
 103aa3d:	cc 	int3
 103aa3e:	cc 	int3
 103aa3f:	cc 	int3

_runtime.(*sigctxt).fixsigcode:
 103aa40:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 103aa44:	83 f8 05 	cmp	eax, 5
 103aa47:	75 40 	jne	64 <_runtime.(*sigctxt).fixsigcode+0x49>
 103aa49:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103aa4e:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103aa52:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 103aa56:	48 8b 9a 90 00 00 00 	mov	rbx, qword ptr [rdx + 144]
 103aa5d:	48 83 c3 fe 	add	rbx, -2
 103aa61:	84 00 	test	byte ptr [rax], al
 103aa63:	84 01 	test	byte ptr [rcx], al
 103aa65:	84 02 	test	byte ptr [rdx], al
 103aa67:	90 	nop
 103aa68:	0f b6 4b 01 	movzx	ecx, byte ptr [rbx + 1]
 103aa6c:	80 f9 cc 	cmp	cl, -52
 103aa6f:	74 10 	je	16 <_runtime.(*sigctxt).fixsigcode+0x41>
 103aa71:	80 3b cd 	cmp	byte ptr [rbx], -51
 103aa74:	74 0c 	je	12 <_runtime.(*sigctxt).fixsigcode+0x42>
 103aa76:	48 8b 00 	mov	rax, qword ptr [rax]
 103aa79:	90 	nop
 103aa7a:	c7 40 08 00 00 00 00 	mov	dword ptr [rax + 8], 0
 103aa81:	c3 	ret
 103aa82:	80 f9 03 	cmp	cl, 3
 103aa85:	75 ef 	jne	-17 <_runtime.(*sigctxt).fixsigcode+0x36>
 103aa87:	eb f8 	jmp	-8 <_runtime.(*sigctxt).fixsigcode+0x41>
 103aa89:	83 f8 0b 	cmp	eax, 11
 103aa8c:	75 f3 	jne	-13 <_runtime.(*sigctxt).fixsigcode+0x41>
 103aa8e:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103aa93:	48 8b 08 	mov	rcx, qword ptr [rax]
 103aa96:	48 63 51 08 	movsxd	rdx, dword ptr [rcx + 8]
 103aa9a:	48 85 d2 	test	rdx, rdx
 103aa9d:	75 e2 	jne	-30 <_runtime.(*sigctxt).fixsigcode+0x41>
 103aa9f:	90 	nop
 103aaa0:	c7 41 08 01 00 00 00 	mov	dword ptr [rcx + 8], 1
 103aaa7:	48 8b 00 	mov	rax, qword ptr [rax]
 103aaaa:	90 	nop
 103aaab:	48 b9 1e ac eb ed ac df 01 0b 	movabs	rcx, 793160943212932126
 103aab5:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 103aab9:	eb c6 	jmp	-58 <_runtime.(*sigctxt).fixsigcode+0x41>
 103aabb:	cc 	int3
 103aabc:	cc 	int3
 103aabd:	cc 	int3
 103aabe:	cc 	int3
 103aabf:	cc 	int3

_runtime.initsig:
 103aac0:	48 83 ec 40 	sub	rsp, 64
 103aac4:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 103aac9:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 103aace:	0f b6 44 24 48 	movzx	eax, byte ptr [rsp + 72]
 103aad3:	84 c0 	test	al, al
 103aad5:	0f 84 ac 01 00 00 	je	428 <_runtime.initsig+0x1c7>
 103aadb:	80 3d 87 cc 0b 00 00 	cmp	byte ptr [rip + 773255], 0
 103aae2:	0f 84 8b 01 00 00 	je	395 <_runtime.initsig+0x1b3>
 103aae8:	84 c0 	test	al, al
 103aaea:	0f 84 79 01 00 00 	je	377 <_runtime.initsig+0x1a9>
 103aaf0:	31 c0 	xor	eax, eax
 103aaf2:	eb 02 	jmp	2 <_runtime.initsig+0x36>
 103aaf4:	ff c0 	inc	eax
 103aaf6:	83 f8 20 	cmp	eax, 32
 103aaf9:	0f 83 60 01 00 00 	jae	352 <_runtime.initsig+0x19f>
 103aaff:	48 8d 0c 40 	lea	rcx, [rax + 2*rax]
 103ab03:	48 8d 15 96 23 09 00 	lea	rdx, [rip + 598934]
 103ab0a:	8b 1c ca 	mov	ebx, dword ptr [rdx + 8*rcx]
 103ab0d:	85 db 	test	ebx, ebx
 103ab0f:	74 e3 	je	-29 <_runtime.initsig+0x34>
 103ab11:	0f ba e3 04 	bt	ebx, 4
 103ab15:	72 dd 	jb	-35 <_runtime.initsig+0x34>
 103ab17:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 103ab1b:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103ab20:	0f 57 c0 	xorps	xmm0, xmm0
 103ab23:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 103ab28:	89 04 24 	mov	dword ptr [rsp], eax
 103ab2b:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103ab34:	48 8d 4c 24 28 	lea	rcx, [rsp + 40]
 103ab39:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103ab3e:	e8 8d 88 00 00 	call	34957 <_runtime.sigaction>
 103ab43:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103ab48:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 103ab4c:	48 8d 15 cd d2 0b 00 	lea	rdx, [rip + 774861]
 103ab53:	48 89 04 ca 	mov	qword ptr [rdx + 8*rcx], rax
 103ab57:	8d 41 ff 	lea	eax, [rcx - 1]
 103ab5a:	83 f8 01 	cmp	eax, 1
 103ab5d:	0f 87 b0 00 00 00 	ja	176 <_runtime.initsig+0x153>
 103ab63:	48 8d 1c ca 	lea	rbx, [rdx + 8*rcx]
 103ab67:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 103ab6a:	48 83 fb 01 	cmp	rbx, 1
 103ab6e:	0f 85 9f 00 00 00 	jne	159 <_runtime.initsig+0x153>
 103ab74:	31 c0 	xor	eax, eax
 103ab76:	84 c0 	test	al, al
 103ab78:	75 5e 	jne	94 <_runtime.initsig+0x118>
 103ab7a:	48 8b 1c ca 	mov	rbx, qword ptr [rdx + 8*rcx]
 103ab7e:	48 85 db 	test	rbx, rbx
 103ab81:	74 06 	je	6 <_runtime.initsig+0xc9>
 103ab83:	48 83 fb 01 	cmp	rbx, 1
 103ab87:	75 3a 	jne	58 <_runtime.initsig+0x103>
 103ab89:	48 83 fb 01 	cmp	rbx, 1
 103ab8d:	75 26 	jne	38 <_runtime.initsig+0xf5>
 103ab8f:	90 	nop
 103ab90:	8b 1d fa cd 0b 00 	mov	ebx, dword ptr [rip + 773626]
 103ab96:	89 c8 	mov	eax, ecx
 103ab98:	c1 e8 05 	shr	eax, 5
 103ab9b:	48 83 f8 01 	cmp	rax, 1
 103ab9f:	0f 83 ee 00 00 00 	jae	238 <_runtime.initsig+0x1d3>
 103aba5:	0f ab cb 	bts	ebx, ecx
 103aba8:	48 8d 35 e1 cd 0b 00 	lea	rsi, [rip + 773601]
 103abaf:	48 8d 04 86 	lea	rax, [rsi + 4*rax]
 103abb3:	87 18 	xchg	dword ptr [rax], ebx
 103abb5:	89 c8 	mov	eax, ecx
 103abb7:	48 8d 15 e2 22 09 00 	lea	rdx, [rip + 598754]
 103abbe:	e9 31 ff ff ff 	jmp	-207 <_runtime.initsig+0x34>
 103abc3:	89 0c 24 	mov	dword ptr [rsp], ecx
 103abc6:	e8 15 bd fe ff 	call	-82667 <_runtime.setsigstack>
 103abcb:	8b 4c 24 1c 	mov	ecx, dword ptr [rsp + 28]
 103abcf:	48 8d 15 4a d2 0b 00 	lea	rdx, [rip + 774730]
 103abd6:	eb dd 	jmp	-35 <_runtime.initsig+0xf5>
 103abd8:	48 8d 05 41 cf 0b 00 	lea	rax, [rip + 773953]
 103abdf:	c7 04 88 01 00 00 00 	mov	dword ptr [rax + 4*rcx], 1
 103abe6:	48 8d 15 4b ce 03 00 	lea	rdx, [rip + 249419]
 103abed:	84 02 	test	byte ptr [rdx], al
 103abef:	48 8b 1d 42 ce 03 00 	mov	rbx, qword ptr [rip + 249410]
 103abf6:	89 0c 24 	mov	dword ptr [rsp], ecx
 103abf9:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 103abfe:	e8 3d bc fe ff 	call	-82883 <_runtime.setsig>
 103ac03:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 103ac07:	48 8d 15 92 22 09 00 	lea	rdx, [rip + 598674]
 103ac0e:	e9 e1 fe ff ff 	jmp	-287 <_runtime.initsig+0x34>
 103ac13:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 103ac18:	48 8d 35 81 22 09 00 	lea	rsi, [rip + 598657]
 103ac1f:	8b 1c de 	mov	ebx, dword ptr [rsi + 8*rbx]
 103ac22:	0f ba e3 06 	bt	ebx, 6
 103ac26:	73 07 	jae	7 <_runtime.initsig+0x16f>
 103ac28:	31 c0 	xor	eax, eax
 103ac2a:	e9 47 ff ff ff 	jmp	-185 <_runtime.initsig+0xb6>
 103ac2f:	80 3d 33 cb 0b 00 00 	cmp	byte ptr [rip + 772915], 0
 103ac36:	74 1c 	je	28 <_runtime.initsig+0x194>
 103ac38:	0f ba e3 03 	bt	ebx, 3
 103ac3c:	72 0c 	jb	12 <_runtime.initsig+0x18a>
 103ac3e:	83 f9 0d 	cmp	ecx, 13
 103ac41:	74 07 	je	7 <_runtime.initsig+0x18a>
 103ac43:	31 c0 	xor	eax, eax
 103ac45:	e9 2c ff ff ff 	jmp	-212 <_runtime.initsig+0xb6>
 103ac4a:	b8 01 00 00 00 	mov	eax, 1
 103ac4f:	e9 22 ff ff ff 	jmp	-222 <_runtime.initsig+0xb6>
 103ac54:	80 3d 10 cb 0b 00 00 	cmp	byte ptr [rip + 772880], 0
 103ac5b:	75 db 	jne	-37 <_runtime.initsig+0x178>
 103ac5d:	eb eb 	jmp	-21 <_runtime.initsig+0x18a>
 103ac5f:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103ac64:	48 83 c4 40 	add	rsp, 64
 103ac68:	c3 	ret
 103ac69:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103ac6e:	48 83 c4 40 	add	rsp, 64
 103ac72:	c3 	ret
 103ac73:	80 3d f1 ca 0b 00 00 	cmp	byte ptr [rip + 772849], 0
 103ac7a:	0f 84 70 fe ff ff 	je	-400 <_runtime.initsig+0x30>
 103ac80:	84 c0 	test	al, al
 103ac82:	e9 63 fe ff ff 	jmp	-413 <_runtime.initsig+0x2a>
 103ac87:	c6 05 e0 ca 0b 00 01 	mov	byte ptr [rip + 772832], 1
 103ac8e:	e9 48 fe ff ff 	jmp	-440 <_runtime.initsig+0x1b>
 103ac93:	b9 01 00 00 00 	mov	ecx, 1
 103ac98:	e8 b3 86 01 00 	call	100019 <_runtime.panicIndex>
 103ac9d:	90 	nop
 103ac9e:	cc 	int3
 103ac9f:	cc 	int3

_runtime.setThreadCPUProfiler:
 103aca0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103aca9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103acad:	0f 86 a5 00 00 00 	jbe	165 <_runtime.setThreadCPUProfiler+0xb8>
 103acb3:	48 83 ec 40 	sub	rsp, 64
 103acb7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 103acbc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 103acc1:	0f 57 c0 	xorps	xmm0, xmm0
 103acc4:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 103acc9:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 103acce:	8b 4c 24 48 	mov	ecx, dword ptr [rsp + 72]
 103acd2:	85 c9 	test	ecx, ecx
 103acd4:	75 40 	jne	64 <_runtime.setThreadCPUProfiler+0x76>
 103acd6:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 103acdd:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 103ace2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ace7:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103acf0:	e8 fb 87 00 00 	call	34811 <_runtime.setitimer>
 103acf5:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103acfe:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103ad02:	8b 4c 24 48 	mov	ecx, dword ptr [rsp + 72]
 103ad06:	89 88 10 01 00 00 	mov	dword ptr [rax + 272], ecx
 103ad0c:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103ad11:	48 83 c4 40 	add	rsp, 64
 103ad15:	c3 	ret
 103ad16:	b8 40 42 0f 00 	mov	eax, 1000000
 103ad1b:	83 f9 ff 	cmp	ecx, -1
 103ad1e:	74 05 	je	5 <_runtime.setThreadCPUProfiler+0x85>
 103ad20:	99 	cdq
 103ad21:	f7 f9 	idiv	ecx
 103ad23:	eb 04 	jmp	4 <_runtime.setThreadCPUProfiler+0x89>
 103ad25:	f7 d8 	neg	eax
 103ad27:	31 d2 	xor	edx, edx
 103ad29:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 103ad2d:	0f 10 44 24 18 	movups	xmm0, xmmword ptr [rsp + 24]
 103ad32:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 103ad37:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 103ad3e:	48 8d 54 24 18 	lea	rdx, [rsp + 24]
 103ad43:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103ad48:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103ad51:	e8 9a 87 00 00 	call	34714 <_runtime.setitimer>
 103ad56:	eb 9d 	jmp	-99 <_runtime.setThreadCPUProfiler+0x55>
 103ad58:	e8 73 5e 01 00 	call	89715 <_runtime.morestack_noctxt>
 103ad5d:	e9 3e ff ff ff 	jmp	-194 <_runtime.setThreadCPUProfiler>
 103ad62:	cc 	int3
 103ad63:	cc 	int3
 103ad64:	cc 	int3
 103ad65:	cc 	int3
 103ad66:	cc 	int3
 103ad67:	cc 	int3
 103ad68:	cc 	int3
 103ad69:	cc 	int3
 103ad6a:	cc 	int3
 103ad6b:	cc 	int3
 103ad6c:	cc 	int3
 103ad6d:	cc 	int3
 103ad6e:	cc 	int3
 103ad6f:	cc 	int3

_runtime.doSigPreempt:
 103ad70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103ad79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103ad7d:	0f 86 fe 00 00 00 	jbe	254 <_runtime.doSigPreempt+0x111>
 103ad83:	48 83 ec 30 	sub	rsp, 48
 103ad87:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 103ad8c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103ad91:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103ad96:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 103ad9d:	0f 84 b1 00 00 00 	je	177 <_runtime.doSigPreempt+0xe4>
 103ada3:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 103ada9:	0f ba f1 0c 	btr	ecx, 12
 103adad:	83 f9 02 	cmp	ecx, 2
 103adb0:	0f 94 c1 	sete	cl
 103adb3:	84 c9 	test	cl, cl
 103adb5:	75 57 	jne	87 <_runtime.doSigPreempt+0x9e>
 103adb7:	31 c9 	xor	ecx, ecx
 103adb9:	84 c9 	test	cl, cl
 103adbb:	75 27 	jne	39 <_runtime.doSigPreempt+0x74>
 103adbd:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103adc1:	ba 01 00 00 00 	mov	edx, 1
 103adc6:	f0 	lock
 103adc7:	0f c1 91 38 03 00 00 	xadd	dword ptr [rcx + 824], edx
 103adce:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103add2:	31 c9 	xor	ecx, ecx
 103add4:	87 88 3c 03 00 00 	xchg	dword ptr [rax + 828], ecx
 103adda:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103addf:	48 83 c4 30 	add	rsp, 48
 103ade3:	c3 	ret
 103ade4:	48 8d 05 45 c9 03 00 	lea	rax, [rip + 248133]
 103adeb:	84 00 	test	byte ptr [rax], al
 103aded:	48 8b 05 3c c9 03 00 	mov	rax, qword ptr [rip + 248124]
 103adf4:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103adf9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103adfd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ae02:	e8 e9 fb ff ff 	call	-1047 <_runtime.(*sigctxt).pushCall>
 103ae07:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103ae0c:	eb af 	jmp	-81 <_runtime.doSigPreempt+0x4d>
 103ae0e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103ae13:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 103ae17:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 103ae1b:	90 	nop
 103ae1c:	90 	nop
 103ae1d:	48 8b 9a 90 00 00 00 	mov	rbx, qword ptr [rdx + 144]
 103ae24:	90 	nop
 103ae25:	48 8b 52 48 	mov	rdx, qword ptr [rdx + 72]
 103ae29:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ae2d:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 103ae32:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 103ae37:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 103ae40:	e8 7b f1 fe ff 	call	-69253 <_runtime.isAsyncSafePoint>
 103ae45:	0f b6 4c 24 20 	movzx	ecx, byte ptr [rsp + 32]
 103ae4a:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103ae4f:	e9 65 ff ff ff 	jmp	-155 <_runtime.doSigPreempt+0x49>
 103ae54:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103ae58:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 103ae5f:	48 85 c9 	test	rcx, rcx
 103ae62:	74 16 	je	22 <_runtime.doSigPreempt+0x10a>
 103ae64:	84 01 	test	byte ptr [rcx], al
 103ae66:	80 b9 a0 27 00 00 00 	cmp	byte ptr [rcx + 10144], 0
 103ae6d:	0f 85 30 ff ff ff 	jne	-208 <_runtime.doSigPreempt+0x33>
 103ae73:	31 c9 	xor	ecx, ecx
 103ae75:	e9 39 ff ff ff 	jmp	-199 <_runtime.doSigPreempt+0x43>
 103ae7a:	31 c9 	xor	ecx, ecx
 103ae7c:	e9 32 ff ff ff 	jmp	-206 <_runtime.doSigPreempt+0x43>
 103ae81:	e8 4a 5d 01 00 	call	89418 <_runtime.morestack_noctxt>
 103ae86:	e9 e5 fe ff ff 	jmp	-283 <_runtime.doSigPreempt>
 103ae8b:	cc 	int3
 103ae8c:	cc 	int3
 103ae8d:	cc 	int3
 103ae8e:	cc 	int3
 103ae8f:	cc 	int3

_runtime.sigFetchG:
 103ae90:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103ae99:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103ae9e:	c3 	ret
 103ae9f:	cc 	int3

_runtime.sigtrampgo:
 103aea0:	48 83 ec 70 	sub	rsp, 112
 103aea4:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 103aea9:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 103aeae:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103aeb2:	89 04 24 	mov	dword ptr [rsp], eax
 103aeb5:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 103aebd:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103aec2:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 103aeca:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 103aecf:	e8 2c 15 00 00 	call	5420 <_runtime.sigfwdgo>
 103aed4:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 103aed9:	0f 85 0c 02 00 00 	jne	524 <_runtime.sigtrampgo+0x24b>
 103aedf:	0f 57 c0 	xorps	xmm0, xmm0
 103aee2:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 103aee7:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103aeef:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 103aef4:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 103aefc:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 103af01:	48 8d 54 24 58 	lea	rdx, [rsp + 88]
 103af06:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103af0a:	e8 81 ff ff ff 	call	-127 <_runtime.sigFetchG>
 103af0f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103af14:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 103af19:	48 89 04 24 	mov	qword ptr [rsp], rax
 103af1d:	e8 ee 73 01 00 	call	95214 <_runtime.setg>
 103af22:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103af27:	48 85 c0 	test	rax, rax
 103af2a:	75 79 	jne	121 <_runtime.sigtrampgo+0x105>
 103af2c:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103af30:	83 f8 1b 	cmp	eax, 27
 103af33:	74 4b 	je	75 <_runtime.sigtrampgo+0xe0>
 103af35:	83 f8 10 	cmp	eax, 16
 103af38:	75 09 	jne	9 <_runtime.sigtrampgo+0xa3>
 103af3a:	83 3d 43 cb 0b 00 00 	cmp	dword ptr [rip + 772931], 0
 103af41:	74 33 	je	51 <_runtime.sigtrampgo+0xd6>
 103af43:	48 8d 4c 24 58 	lea	rcx, [rsp + 88]
 103af48:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103af4c:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 103af50:	e8 eb fa ff ff 	call	-1301 <_runtime.(*sigctxt).fixsigcode>
 103af55:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103af59:	48 89 04 24 	mov	qword ptr [rsp], rax
 103af5d:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 103af62:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103af67:	e8 e4 13 00 00 	call	5092 <_runtime.badsignal>
 103af6c:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103af71:	48 83 c4 70 	add	rsp, 112
 103af75:	c3 	ret
 103af76:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103af7b:	48 83 c4 70 	add	rsp, 112
 103af7f:	c3 	ret
 103af80:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103af85:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103af89:	90 	nop
 103af8a:	90 	nop
 103af8b:	48 8b 80 90 00 00 00 	mov	rax, qword ptr [rax + 144]
 103af92:	48 89 04 24 	mov	qword ptr [rsp], rax
 103af96:	e8 55 94 ff ff 	call	-27563 <_runtime.sigprofNonGoPC>
 103af9b:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103afa0:	48 83 c4 70 	add	rsp, 112
 103afa4:	c3 	ret
 103afa5:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 103afae:	0f 57 c0 	xorps	xmm0, xmm0
 103afb1:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 103afb6:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 103afbb:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103afbf:	8b 54 24 78 	mov	edx, dword ptr [rsp + 120]
 103afc3:	89 14 24 	mov	dword ptr [rsp], edx
 103afc6:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103afcb:	48 8d 4c 24 28 	lea	rcx, [rsp + 40]
 103afd0:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103afd5:	e8 26 01 00 00 	call	294 <_runtime.adjustSignalStack>
 103afda:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 103afdf:	88 44 24 27 	mov	byte ptr [rsp + 39], al
 103afe3:	84 c0 	test	al, al
 103afe5:	0f 84 f6 00 00 00 	je	246 <_runtime.sigtrampgo+0x241>
 103afeb:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 103aff0:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 103aff4:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103aff8:	48 8d 5c 24 78 	lea	rbx, [rsp + 120]
 103affd:	48 89 9a 80 00 00 00 	mov	qword ptr [rdx + 128], rbx
 103b004:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 103b008:	48 8b 40 50 	mov	rax, qword ptr [rax + 80]
 103b00c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b010:	e8 fb 72 01 00 	call	94971 <_runtime.setg>
 103b015:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b01a:	48 81 78 10 2e fb ff ff 	cmp	qword ptr [rax + 16], -1234
 103b022:	0f 84 a8 00 00 00 	je	168 <_runtime.sigtrampgo+0x230>
 103b028:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 103b02d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b031:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103b035:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 103b039:	e8 02 fa ff ff 	call	-1534 <_runtime.(*sigctxt).fixsigcode>
 103b03e:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103b042:	89 04 24 	mov	dword ptr [rsp], eax
 103b045:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103b04d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103b052:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103b05a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103b05f:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b064:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103b069:	e8 22 03 00 00 	call	802 <_runtime.sighandler>
 103b06e:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b073:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b077:	e8 94 72 01 00 	call	94868 <_runtime.setg>
 103b07c:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 103b081:	84 c0 	test	al, al
 103b083:	74 41 	je	65 <_runtime.sigtrampgo+0x226>
 103b085:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103b08e:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103b092:	48 8b 40 50 	mov	rax, qword ptr [rax + 80]
 103b096:	90 	nop
 103b097:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103b09c:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 103b0a1:	48 89 10 	mov	qword ptr [rax], rdx
 103b0a4:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 103b0a8:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103b0ad:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 103b0b1:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103b0b6:	48 89 48 18 	mov	qword ptr [rax + 24], rcx
 103b0ba:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 103b0bf:	48 89 88 80 00 00 00 	mov	qword ptr [rax + 128], rcx
 103b0c6:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103b0cb:	48 83 c4 70 	add	rsp, 112
 103b0cf:	c3 	ret
 103b0d0:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103b0d4:	89 04 24 	mov	dword ptr [rsp], eax
 103b0d7:	e8 e4 11 00 00 	call	4580 <_runtime.signalDuringFork>
 103b0dc:	e9 47 ff ff ff 	jmp	-185 <_runtime.sigtrampgo+0x188>
 103b0e1:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 103b0e6:	e9 19 ff ff ff 	jmp	-231 <_runtime.sigtrampgo+0x164>
 103b0eb:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103b0f0:	48 83 c4 70 	add	rsp, 112
 103b0f4:	c3 	ret
 103b0f5:	cc 	int3
 103b0f6:	cc 	int3
 103b0f7:	cc 	int3
 103b0f8:	cc 	int3
 103b0f9:	cc 	int3
 103b0fa:	cc 	int3
 103b0fb:	cc 	int3
 103b0fc:	cc 	int3
 103b0fd:	cc 	int3
 103b0fe:	cc 	int3
 103b0ff:	cc 	int3

_runtime.adjustSignalStack:
 103b100:	48 83 ec 50 	sub	rsp, 80
 103b104:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 103b109:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 103b10e:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103b113:	48 8b 48 50 	mov	rcx, qword ptr [rax + 80]
 103b117:	48 8d 54 24 58 	lea	rdx, [rsp + 88]
 103b11c:	48 39 11 	cmp	qword ptr [rcx], rdx
 103b11f:	77 0a 	ja	10 <_runtime.adjustSignalStack+0x2b>
 103b121:	48 39 51 08 	cmp	qword ptr [rcx + 8], rdx
 103b125:	0f 87 56 02 00 00 	ja	598 <_runtime.adjustSignalStack+0x281>
 103b12b:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 103b130:	48 8b 08 	mov	rcx, qword ptr [rax]
 103b133:	48 39 11 	cmp	qword ptr [rcx], rdx
 103b136:	0f 87 e4 00 00 00 	ja	228 <_runtime.adjustSignalStack+0x120>
 103b13c:	48 39 51 08 	cmp	qword ptr [rcx + 8], rdx
 103b140:	0f 86 da 00 00 00 	jbe	218 <_runtime.adjustSignalStack+0x120>
 103b146:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 103b14f:	0f 57 c0 	xorps	xmm0, xmm0
 103b152:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 103b157:	48 8b 08 	mov	rcx, qword ptr [rax]
 103b15a:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 103b15e:	48 2b 11 	sub	rdx, qword ptr [rcx]
 103b161:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 103b166:	48 8b 00 	mov	rax, qword ptr [rax]
 103b169:	48 8b 00 	mov	rax, qword ptr [rax]
 103b16c:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103b171:	90 	nop
 103b172:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103b17b:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 103b180:	48 85 c9 	test	rcx, rcx
 103b183:	74 49 	je	73 <_runtime.adjustSignalStack+0xce>
 103b185:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b189:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b18d:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 103b191:	48 8b 12 	mov	rdx, qword ptr [rdx]
 103b194:	48 89 11 	mov	qword ptr [rcx], rdx
 103b197:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 103b19b:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b19f:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b1a3:	48 8b 52 10 	mov	rdx, qword ptr [rdx + 16]
 103b1a7:	48 89 51 10 	mov	qword ptr [rcx + 16], rdx
 103b1ab:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b1af:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b1b3:	48 8b 52 18 	mov	rdx, qword ptr [rdx + 24]
 103b1b7:	48 89 51 18 	mov	qword ptr [rcx + 24], rdx
 103b1bb:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b1bf:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b1c3:	48 8b 92 80 00 00 00 	mov	rdx, qword ptr [rdx + 128]
 103b1ca:	48 89 51 20 	mov	qword ptr [rcx + 32], rdx
 103b1ce:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b1d2:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103b1d6:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 103b1db:	48 89 11 	mov	qword ptr [rcx], rdx
 103b1de:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b1e2:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103b1e6:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 103b1eb:	48 01 d3 	add	rbx, rdx
 103b1ee:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 103b1f2:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b1f6:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103b1fa:	48 81 c2 80 03 00 00 	add	rdx, 896
 103b201:	48 89 51 10 	mov	qword ptr [rcx + 16], rdx
 103b205:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103b209:	48 8b 40 50 	mov	rax, qword ptr [rax + 80]
 103b20d:	48 89 50 18 	mov	qword ptr [rax + 24], rdx
 103b211:	c6 44 24 70 01 	mov	byte ptr [rsp + 112], 1
 103b216:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 103b21b:	48 83 c4 50 	add	rsp, 80
 103b21f:	c3 	ret
 103b220:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 103b229:	0f 57 c0 	xorps	xmm0, xmm0
 103b22c:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 103b231:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 103b239:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 103b23e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103b243:	e8 08 82 00 00 	call	33288 <_runtime.sigaltstack>
 103b248:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103b24c:	0f ba e0 02 	bt	eax, 2
 103b250:	0f 82 ff 00 00 00 	jb	255 <_runtime.adjustSignalStack+0x255>
 103b256:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103b25b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103b260:	48 39 c1 	cmp	rcx, rax
 103b263:	0f 83 d6 00 00 00 	jae	214 <_runtime.adjustSignalStack+0x23f>
 103b269:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 103b271:	e8 9a 70 01 00 	call	94362 <_runtime.setg>
 103b276:	c6 04 24 00 	mov	byte ptr [rsp], 0
 103b27a:	e8 81 33 ff ff 	call	-52351 <_runtime.needm>
 103b27f:	8b 44 24 58 	mov	eax, dword ptr [rsp + 88]
 103b283:	89 04 24 	mov	dword ptr [rsp], eax
 103b286:	e8 a5 0f 00 00 	call	4005 <_runtime.sigNotOnStack>
 103b28b:	e8 30 37 ff ff 	call	-51408 <_runtime.dropm>
 103b290:	90 	nop
 103b291:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103b29a:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 103b29f:	48 85 c9 	test	rcx, rcx
 103b2a2:	74 49 	je	73 <_runtime.adjustSignalStack+0x1ed>
 103b2a4:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b2a8:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b2ac:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 103b2b0:	48 8b 12 	mov	rdx, qword ptr [rdx]
 103b2b3:	48 89 11 	mov	qword ptr [rcx], rdx
 103b2b6:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 103b2ba:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b2be:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b2c2:	48 8b 52 10 	mov	rdx, qword ptr [rdx + 16]
 103b2c6:	48 89 51 10 	mov	qword ptr [rcx + 16], rdx
 103b2ca:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b2ce:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b2d2:	48 8b 52 18 	mov	rdx, qword ptr [rdx + 24]
 103b2d6:	48 89 51 18 	mov	qword ptr [rcx + 24], rdx
 103b2da:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103b2de:	48 8b 52 50 	mov	rdx, qword ptr [rdx + 80]
 103b2e2:	48 8b 92 80 00 00 00 	mov	rdx, qword ptr [rdx + 128]
 103b2e9:	48 89 51 20 	mov	qword ptr [rcx + 32], rdx
 103b2ed:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b2f1:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103b2f5:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 103b2fa:	48 89 11 	mov	qword ptr [rcx], rdx
 103b2fd:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b301:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103b305:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 103b30a:	48 01 d3 	add	rbx, rdx
 103b30d:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 103b311:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b315:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103b319:	48 81 c2 80 03 00 00 	add	rdx, 896
 103b320:	48 89 51 10 	mov	qword ptr [rcx + 16], rdx
 103b324:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103b328:	48 8b 40 50 	mov	rax, qword ptr [rax + 80]
 103b32c:	48 89 50 18 	mov	qword ptr [rax + 24], rdx
 103b330:	c6 44 24 70 01 	mov	byte ptr [rsp + 112], 1
 103b335:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 103b33a:	48 83 c4 50 	add	rsp, 80
 103b33e:	c3 	ret
 103b33f:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 103b344:	48 01 d0 	add	rax, rdx
 103b347:	48 39 c1 	cmp	rcx, rax
 103b34a:	0f 83 19 ff ff ff 	jae	-231 <_runtime.adjustSignalStack+0x169>
 103b350:	e9 3b ff ff ff 	jmp	-197 <_runtime.adjustSignalStack+0x190>
 103b355:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 103b35d:	e8 ae 6f 01 00 	call	94126 <_runtime.setg>
 103b362:	c6 04 24 00 	mov	byte ptr [rsp], 0
 103b366:	e8 95 32 ff ff 	call	-52587 <_runtime.needm>
 103b36b:	8b 44 24 58 	mov	eax, dword ptr [rsp + 88]
 103b36f:	89 04 24 	mov	dword ptr [rsp], eax
 103b372:	e8 29 0e 00 00 	call	3625 <_runtime.noSignalStack>
 103b377:	e8 44 36 ff ff 	call	-51644 <_runtime.dropm>
 103b37c:	e9 d5 fe ff ff 	jmp	-299 <_runtime.adjustSignalStack+0x156>
 103b381:	c6 44 24 70 00 	mov	byte ptr [rsp + 112], 0
 103b386:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 103b38b:	48 83 c4 50 	add	rsp, 80
 103b38f:	c3 	ret

_runtime.sighandler:
 103b390:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103b399:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103b39d:	0f 86 8e 07 00 00 	jbe	1934 <_runtime.sighandler+0x7a1>
 103b3a3:	48 83 ec 78 	sub	rsp, 120
 103b3a7:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 103b3ac:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 103b3b1:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 103b3ba:	0f 57 c0 	xorps	xmm0, xmm0
 103b3bd:	0f 11 44 24 60 	movups	xmmword ptr [rsp + 96], xmm0
 103b3c2:	48 8b b4 24 88 00 00 00 	mov	rsi, qword ptr [rsp + 136]
 103b3ca:	48 89 74 24 60 	mov	qword ptr [rsp + 96], rsi
 103b3cf:	48 8b bc 24 90 00 00 00 	mov	rdi, qword ptr [rsp + 144]
 103b3d7:	48 89 7c 24 68 	mov	qword ptr [rsp + 104], rdi
 103b3dc:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 103b3e3:	83 f8 1b 	cmp	eax, 27
 103b3e6:	0f 84 f1 06 00 00 	je	1777 <_runtime.sighandler+0x74d>
 103b3ec:	48 89 5c 24 50 	mov	qword ptr [rsp + 80], rbx
 103b3f1:	83 f8 05 	cmp	eax, 5
 103b3f4:	0f 85 dc 06 00 00 	jne	1756 <_runtime.sighandler+0x746>
 103b3fa:	48 8b 15 87 2e 09 00 	mov	rdx, qword ptr [rip + 601735]
 103b401:	48 85 d2 	test	rdx, rdx
 103b404:	0f 85 96 06 00 00 	jne	1686 <_runtime.sighandler+0x710>
 103b40a:	31 c9 	xor	ecx, ecx
 103b40c:	84 c9 	test	cl, cl
 103b40e:	0f 85 82 06 00 00 	jne	1666 <_runtime.sighandler+0x706>
 103b414:	83 f8 1e 	cmp	eax, 30
 103b417:	0f 85 72 06 00 00 	jne	1650 <_runtime.sighandler+0x6ff>
 103b41d:	48 8b 15 6c 2e 09 00 	mov	rdx, qword ptr [rip + 601708]
 103b424:	48 85 d2 	test	rdx, rdx
 103b427:	0f 85 3b 06 00 00 	jne	1595 <_runtime.sighandler+0x6d8>
 103b42d:	31 c9 	xor	ecx, ecx
 103b42f:	84 c9 	test	cl, cl
 103b431:	0f 85 27 06 00 00 	jne	1575 <_runtime.sighandler+0x6ce>
 103b437:	83 f8 10 	cmp	eax, 16
 103b43a:	0f 84 f2 05 00 00 	je	1522 <_runtime.sighandler+0x6a2>
 103b440:	83 f8 20 	cmp	eax, 32
 103b443:	0f 83 d8 05 00 00 	jae	1496 <_runtime.sighandler+0x691>
 103b449:	48 8d 14 40 	lea	rdx, [rax + 2*rax]
 103b44d:	48 8d 35 4c 1a 09 00 	lea	rsi, [rip + 596556]
 103b454:	8b 14 d6 	mov	edx, dword ptr [rsi + 8*rdx]
 103b457:	0f ba e2 03 	bt	edx, 3
 103b45b:	0f 83 b3 05 00 00 	jae	1459 <_runtime.sighandler+0x684>
 103b461:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 103b469:	80 bf b7 00 00 00 00 	cmp	byte ptr [rdi + 183], 0
 103b470:	74 06 	je	6 <_runtime.sighandler+0xe8>
 103b472:	83 e2 f7 	and	edx, -9
 103b475:	83 ca 04 	or	edx, 4
 103b478:	4c 8b 44 24 68 	mov	r8, qword ptr [rsp + 104]
 103b47d:	4d 8b 40 30 	mov	r8, qword ptr [r8 + 48]
 103b481:	4c 8d 0d 88 c2 03 00 	lea	r9, [rip + 246408]
 103b488:	41 84 01 	test	byte ptr [r9], al
 103b48b:	4c 8b 4c 24 60 	mov	r9, qword ptr [rsp + 96]
 103b490:	4d 8b 80 90 00 00 00 	mov	r8, qword ptr [r8 + 144]
 103b497:	4c 39 05 72 c2 03 00 	cmp	qword ptr [rip + 246386], r8
 103b49e:	41 b8 04 00 00 00 	mov	r8d, 4
 103b4a4:	41 0f 44 d0 	cmove	edx, r8d
 103b4a8:	90 	nop
 103b4a9:	90 	nop
 103b4aa:	90 	nop
 103b4ab:	4d 63 41 08 	movsxd	r8, dword ptr [r9 + 8]
 103b4af:	4d 85 c0 	test	r8, r8
 103b4b2:	74 0d 	je	13 <_runtime.sighandler+0x131>
 103b4b4:	0f ba e2 03 	bt	edx, 3
 103b4b8:	0f 82 f5 04 00 00 	jb	1269 <_runtime.sighandler+0x623>
 103b4be:	4d 85 c0 	test	r8, r8
 103b4c1:	89 54 24 28 	mov	dword ptr [rsp + 40], edx
 103b4c5:	0f 85 d9 04 00 00 	jne	1241 <_runtime.sighandler+0x614>
 103b4cb:	89 04 24 	mov	dword ptr [rsp], eax
 103b4ce:	e8 9d 14 00 00 	call	5277 <_runtime.sigsend>
 103b4d3:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 103b4d8:	0f 85 bc 04 00 00 	jne	1212 <_runtime.sighandler+0x60a>
 103b4de:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 103b4e3:	48 63 52 08 	movsxd	rdx, dword ptr [rdx + 8]
 103b4e7:	48 85 d2 	test	rdx, rdx
 103b4ea:	0f 85 9c 04 00 00 	jne	1180 <_runtime.sighandler+0x5fc>
 103b4f0:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 103b4f7:	89 c2 	mov	edx, eax
 103b4f9:	c1 e8 05 	shr	eax, 5
 103b4fc:	48 83 f8 01 	cmp	rax, 1
 103b500:	0f 83 20 06 00 00 	jae	1568 <_runtime.sighandler+0x796>
 103b506:	48 8d 0d 83 c4 0b 00 	lea	rcx, [rip + 771203]
 103b50d:	48 8d 04 81 	lea	rax, [rcx + 4*rax]
 103b511:	8b 00 	mov	eax, dword ptr [rax]
 103b513:	0f a3 d0 	bt	eax, edx
 103b516:	0f 92 c0 	setb	al
 103b519:	84 c0 	test	al, al
 103b51b:	0f 85 61 04 00 00 	jne	1121 <_runtime.sighandler+0x5f2>
 103b521:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103b525:	0f ba e0 01 	bt	eax, 1
 103b529:	0f 82 3b 04 00 00 	jb	1083 <_runtime.sighandler+0x5da>
 103b52f:	0f ba e0 02 	bt	eax, 2
 103b533:	0f 83 27 04 00 00 	jae	1063 <_runtime.sighandler+0x5d0>
 103b539:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b53e:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b542:	c7 81 f4 00 00 00 01 00 00 00 	mov	dword ptr [rcx + 244], 1
 103b54c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b550:	48 8b 9c 24 98 00 00 00 	mov	rbx, qword ptr [rsp + 152]
 103b558:	48 89 de 	mov	rsi, rbx
 103b55b:	48 89 99 c8 00 00 00 	mov	qword ptr [rcx + 200], rbx
 103b562:	83 3d 17 c2 0b 00 00 	cmp	dword ptr [rip + 770583], 0
 103b569:	0f 84 d0 03 00 00 	je	976 <_runtime.sighandler+0x5af>
 103b56f:	83 fa 20 	cmp	edx, 32
 103b572:	0f 83 8a 03 00 00 	jae	906 <_runtime.sighandler+0x572>
 103b578:	48 8d 04 52 	lea	rax, [rdx + 2*rdx]
 103b57c:	48 8d 0d 1d 19 09 00 	lea	rcx, [rip + 596253]
 103b583:	48 8b 54 c1 08 	mov	rdx, qword ptr [rcx + 8*rax + 8]
 103b588:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 103b58d:	48 8b 44 c1 10 	mov	rax, qword ptr [rcx + 8*rax + 16]
 103b592:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 103b597:	e8 04 ef fe ff 	call	-69884 <_runtime.printlock>
 103b59c:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103b5a1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b5a5:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103b5aa:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103b5af:	e8 2c f8 fe ff 	call	-67540 <_runtime.printstring>
 103b5b4:	e8 77 f1 fe ff 	call	-69257 <_runtime.printnl>
 103b5b9:	e8 62 ef fe ff 	call	-69790 <_runtime.printunlock>
 103b5be:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b5c3:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b5c7:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 103b5cc:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 103b5d0:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 103b5d5:	48 8b 89 e8 00 00 00 	mov	rcx, qword ptr [rcx + 232]
 103b5dc:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 103b5e1:	90 	nop
 103b5e2:	90 	nop
 103b5e3:	48 8b 92 90 00 00 00 	mov	rdx, qword ptr [rdx + 144]
 103b5ea:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 103b5ef:	48 63 5b 08 	movsxd	rbx, dword ptr [rbx + 8]
 103b5f3:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 103b5f8:	e8 a3 ee fe ff 	call	-69981 <_runtime.printlock>
 103b5fd:	48 8d 05 a7 76 03 00 	lea	rax, [rip + 226983]
 103b604:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b608:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 103b611:	e8 ca f7 fe ff 	call	-67638 <_runtime.printstring>
 103b616:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103b61b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b61f:	e8 6c f6 fe ff 	call	-67988 <_runtime.printhex>
 103b624:	48 8d 05 74 76 03 00 	lea	rax, [rip + 226932]
 103b62b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b62f:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 103b638:	e8 a3 f7 fe ff 	call	-67677 <_runtime.printstring>
 103b63d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103b642:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b646:	e8 d5 f5 fe ff 	call	-68139 <_runtime.printint>
 103b64b:	48 8d 05 89 7a 03 00 	lea	rax, [rip + 227977]
 103b652:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b656:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 103b65f:	e8 7c f7 fe ff 	call	-67716 <_runtime.printstring>
 103b664:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103b669:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b66d:	e8 ae f4 fe ff 	call	-68434 <_runtime.printuint>
 103b672:	e8 b9 f0 fe ff 	call	-69447 <_runtime.printnl>
 103b677:	e8 a4 ee fe ff 	call	-69980 <_runtime.printunlock>
 103b67c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b681:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b685:	48 83 b9 68 01 00 00 00 	cmp	qword ptr [rcx + 360], 0
 103b68d:	0f 84 62 02 00 00 	je	610 <_runtime.sighandler+0x565>
 103b693:	83 b9 38 01 00 00 00 	cmp	dword ptr [rcx + 312], 0
 103b69a:	0f 8e 48 02 00 00 	jle	584 <_runtime.sighandler+0x558>
 103b6a0:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103b6a8:	48 39 11 	cmp	qword ptr [rcx], rdx
 103b6ab:	0f 84 ff 01 00 00 	je	511 <_runtime.sighandler+0x520>
 103b6b1:	48 89 94 24 98 00 00 00 	mov	qword ptr [rsp + 152], rdx
 103b6b9:	e8 e2 ed fe ff 	call	-70174 <_runtime.printlock>
 103b6be:	e8 6d f0 fe ff 	call	-69523 <_runtime.printnl>
 103b6c3:	e8 58 ee fe ff 	call	-70056 <_runtime.printunlock>
 103b6c8:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103b6d1:	8b 0d 95 fa 08 00 	mov	ecx, dword ptr [rip + 588437]
 103b6d7:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103b6db:	0f b6 80 29 01 00 00 	movzx	eax, byte ptr [rax + 297]
 103b6e2:	89 ca 	mov	edx, ecx
 103b6e4:	c1 e9 02 	shr	ecx, 2
 103b6e7:	84 c0 	test	al, al
 103b6e9:	0f 45 c8 	cmovne	ecx, eax
 103b6ec:	85 c9 	test	ecx, ecx
 103b6ee:	7f 7f 	jg	127 <_runtime.sighandler+0x3df>
 103b6f0:	0f ba e2 00 	bt	edx, 0
 103b6f4:	73 26 	jae	38 <_runtime.sighandler+0x38c>
 103b6f6:	8b 05 84 c0 0b 00 	mov	eax, dword ptr [rip + 770180]
 103b6fc:	ff c0 	inc	eax
 103b6fe:	89 05 7c c0 0b 00 	mov	dword ptr [rip + 770172], eax
 103b704:	48 8b 0d 85 2f 09 00 	mov	rcx, qword ptr [rip + 601989]
 103b70b:	48 2b 0d 8e 2f 09 00 	sub	rcx, qword ptr [rip + 601998]
 103b712:	2b 0d 6c c0 0b 00 	sub	ecx, dword ptr [rip + 770156]
 103b718:	39 c8 	cmp	eax, ecx
 103b71a:	7c 16 	jl	22 <_runtime.sighandler+0x3a2>
 103b71c:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 103b723:	e8 78 7a 00 00 	call	31352 <_runtime.exit>
 103b728:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103b72d:	48 83 c4 78 	add	rsp, 120
 103b731:	c3 	ret
 103b732:	e8 69 ed fe ff 	call	-70295 <_runtime.printlock>
 103b737:	48 8d 05 e9 78 03 00 	lea	rax, [rip + 227561]
 103b73e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b742:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 103b74b:	e8 90 f6 fe ff 	call	-67952 <_runtime.printstring>
 103b750:	e8 cb ed fe ff 	call	-70197 <_runtime.printunlock>
 103b755:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 103b75c:	e8 4f 7d 00 00 	call	32079 <_runtime.raiseproc>
 103b761:	c7 04 24 40 4b 4c 00 	mov	dword ptr [rsp], 5000000
 103b768:	e8 73 7a 00 00 	call	31347 <_runtime.usleep>
 103b76d:	eb ad 	jmp	-83 <_runtime.sighandler+0x38c>
 103b76f:	89 54 24 2c 	mov	dword ptr [rsp + 44], edx
 103b773:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103b77b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b77f:	e8 dc eb 00 00 	call	60380 <_runtime.goroutineheader>
 103b784:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103b789:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103b78d:	90 	nop
 103b78e:	90 	nop
 103b78f:	48 8b 88 90 00 00 00 	mov	rcx, qword ptr [rax + 144]
 103b796:	90 	nop
 103b797:	48 8b 40 48 	mov	rax, qword ptr [rax + 72]
 103b79b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103b79f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103b7a4:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103b7ad:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103b7b5:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103b7ba:	e8 71 de 00 00 	call	56945 <_runtime.tracebacktrap>
 103b7bf:	83 3d ba bf 0b 00 00 	cmp	dword ptr [rip + 769978], 0
 103b7c6:	0f 8e d0 00 00 00 	jle	208 <_runtime.sighandler+0x50c>
 103b7cc:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b7d1:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b7d5:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 103b7dc:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103b7e4:	48 39 ca 	cmp	rdx, rcx
 103b7e7:	0f 84 a8 00 00 00 	je	168 <_runtime.sighandler+0x505>
 103b7ed:	48 85 c9 	test	rcx, rcx
 103b7f0:	0f 84 98 00 00 00 	je	152 <_runtime.sighandler+0x4fe>
 103b7f6:	8b 89 90 00 00 00 	mov	ecx, dword ptr [rcx + 144]
 103b7fc:	0f ba f1 0c 	btr	ecx, 12
 103b800:	83 f9 02 	cmp	ecx, 2
 103b803:	0f 94 c1 	sete	cl
 103b806:	84 c9 	test	cl, cl
 103b808:	75 3a 	jne	58 <_runtime.sighandler+0x4b4>
 103b80a:	83 3d 6f bf 0b 00 00 	cmp	dword ptr [rip + 769903], 0
 103b811:	74 17 	je	23 <_runtime.sighandler+0x49a>
 103b813:	48 8d 44 24 60 	lea	rax, [rsp + 96]
 103b818:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b81c:	e8 5f e9 ff ff 	call	-5793 <_runtime.dumpregs>
 103b821:	8b 54 24 2c 	mov	edx, dword ptr [rsp + 44]
 103b825:	e9 c6 fe ff ff 	jmp	-314 <_runtime.sighandler+0x360>
 103b82a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103b82e:	e8 ed ed 00 00 	call	60909 <_runtime.tracebackothers>
 103b833:	e8 68 ec fe ff 	call	-70552 <_runtime.printlock>
 103b838:	e8 f3 ee fe ff 	call	-69901 <_runtime.printnl>
 103b83d:	e8 de ec fe ff 	call	-70434 <_runtime.printunlock>
 103b842:	eb cf 	jmp	-49 <_runtime.sighandler+0x483>
 103b844:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b848:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 103b84f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103b853:	e8 08 eb 00 00 	call	60168 <_runtime.goroutineheader>
 103b858:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b85d:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103b861:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 103b868:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 103b870:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 103b879:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103b882:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103b887:	e8 34 dd 00 00 	call	56628 <_runtime.traceback>
 103b88c:	eb 85 	jmp	-123 <_runtime.sighandler+0x483>
 103b88e:	31 c9 	xor	ecx, ecx
 103b890:	e9 71 ff ff ff 	jmp	-143 <_runtime.sighandler+0x476>
 103b895:	31 c9 	xor	ecx, ecx
 103b897:	e9 6a ff ff ff 	jmp	-150 <_runtime.sighandler+0x476>
 103b89c:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b8a1:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103b8a9:	31 c9 	xor	ecx, ecx
 103b8ab:	e9 56 ff ff ff 	jmp	-170 <_runtime.sighandler+0x476>
 103b8b0:	e8 eb eb fe ff 	call	-70677 <_runtime.printlock>
 103b8b5:	48 8d 05 06 ab 03 00 	lea	rax, [rip + 240390]
 103b8bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b8c0:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 103b8c9:	e8 12 f5 fe ff 	call	-68334 <_runtime.printstring>
 103b8ce:	e8 4d ec fe ff 	call	-70579 <_runtime.printunlock>
 103b8d3:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b8d8:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103b8dc:	48 8b 91 68 01 00 00 	mov	rdx, qword ptr [rcx + 360]
 103b8e3:	e9 c9 fd ff ff 	jmp	-567 <_runtime.sighandler+0x321>
 103b8e8:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103b8f0:	e9 bc fd ff ff 	jmp	-580 <_runtime.sighandler+0x321>
 103b8f5:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103b8fd:	e9 af fd ff ff 	jmp	-593 <_runtime.sighandler+0x321>
 103b902:	e8 99 eb fe ff 	call	-70759 <_runtime.printlock>
 103b907:	48 8d 05 d0 75 03 00 	lea	rax, [rip + 226768]
 103b90e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b912:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103b91b:	e8 c0 f4 fe ff 	call	-68416 <_runtime.printstring>
 103b920:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 103b927:	48 89 04 24 	mov	qword ptr [rsp], rax
 103b92b:	e8 f0 f1 fe ff 	call	-69136 <_runtime.printuint>
 103b930:	e8 fb ed fe ff 	call	-70149 <_runtime.printnl>
 103b935:	e8 e6 eb fe ff 	call	-70682 <_runtime.printunlock>
 103b93a:	e9 7f fc ff ff 	jmp	-897 <_runtime.sighandler+0x22e>
 103b93f:	e8 0c d7 fe ff 	call	-76020 <_runtime.startpanic_m>
 103b944:	8b 94 24 80 00 00 00 	mov	edx, dword ptr [rsp + 128]
 103b94b:	83 fa 20 	cmp	edx, 32
 103b94e:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103b953:	48 8b b4 24 98 00 00 00 	mov	rsi, qword ptr [rsp + 152]
 103b95b:	e9 12 fc ff ff 	jmp	-1006 <_runtime.sighandler+0x1e2>
 103b960:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103b965:	48 83 c4 78 	add	rsp, 120
 103b969:	c3 	ret
 103b96a:	89 14 24 	mov	dword ptr [rsp], edx
 103b96d:	e8 4e 06 00 00 	call	1614 <_runtime.dieFromSignal>
 103b972:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103b976:	8b 94 24 80 00 00 00 	mov	edx, dword ptr [rsp + 128]
 103b97d:	e9 ad fb ff ff 	jmp	-1107 <_runtime.sighandler+0x19f>
 103b982:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103b987:	48 83 c4 78 	add	rsp, 120
 103b98b:	c3 	ret
 103b98c:	8b 94 24 80 00 00 00 	mov	edx, dword ptr [rsp + 128]
 103b993:	31 c0 	xor	eax, eax
 103b995:	e9 7f fb ff ff 	jmp	-1153 <_runtime.sighandler+0x189>
 103b99a:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103b99f:	48 83 c4 78 	add	rsp, 120
 103b9a3:	c3 	ret
 103b9a4:	0f ba e2 00 	bt	edx, 0
 103b9a8:	0f 82 1d fb ff ff 	jb	-1251 <_runtime.sighandler+0x13b>
 103b9ae:	e9 2b fb ff ff 	jmp	-1237 <_runtime.sighandler+0x14e>
 103b9b3:	89 87 e0 00 00 00 	mov	dword ptr [rdi + 224], eax
 103b9b9:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 103b9be:	48 63 49 08 	movsxd	rcx, dword ptr [rcx + 8]
 103b9c2:	48 89 8f 00 01 00 00 	mov	qword ptr [rdi + 256], rcx
 103b9c9:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 103b9ce:	90 	nop
 103b9cf:	48 8b 49 18 	mov	rcx, qword ptr [rcx + 24]
 103b9d3:	48 89 8f 08 01 00 00 	mov	qword ptr [rdi + 264], rcx
 103b9da:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 103b9df:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103b9e3:	90 	nop
 103b9e4:	90 	nop
 103b9e5:	48 8b 89 90 00 00 00 	mov	rcx, qword ptr [rcx + 144]
 103b9ec:	48 89 8f 10 01 00 00 	mov	qword ptr [rdi + 272], rcx
 103b9f3:	48 8d 4c 24 60 	lea	rcx, [rsp + 96]
 103b9f8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103b9fc:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 103ba00:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 103ba05:	e8 96 ee ff ff 	call	-4458 <_runtime.(*sigctxt).preparePanic>
 103ba0a:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103ba0f:	48 83 c4 78 	add	rsp, 120
 103ba13:	c3 	ret
 103ba14:	48 8b bc 24 98 00 00 00 	mov	rdi, qword ptr [rsp + 152]
 103ba1c:	e9 57 fa ff ff 	jmp	-1449 <_runtime.sighandler+0xe8>
 103ba21:	48 8d 35 78 14 09 00 	lea	rsi, [rip + 595064]
 103ba28:	ba 04 00 00 00 	mov	edx, 4
 103ba2d:	e9 25 fa ff ff 	jmp	-1499 <_runtime.sighandler+0xc7>
 103ba32:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103ba3a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ba3e:	48 8d 4c 24 60 	lea	rcx, [rsp + 96]
 103ba43:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103ba48:	e8 23 f3 ff ff 	call	-3293 <_runtime.doSigPreempt>
 103ba4d:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 103ba54:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 103ba59:	e9 e2 f9 ff ff 	jmp	-1566 <_runtime.sighandler+0xb0>
 103ba5e:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103ba63:	48 83 c4 78 	add	rsp, 120
 103ba67:	c3 	ret
 103ba68:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103ba70:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ba74:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 103ba77:	ff d1 	call	rcx
 103ba79:	0f b6 4c 24 08 	movzx	ecx, byte ptr [rsp + 8]
 103ba7e:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 103ba85:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 103ba8a:	e9 a0 f9 ff ff 	jmp	-1632 <_runtime.sighandler+0x9f>
 103ba8f:	31 c9 	xor	ecx, ecx
 103ba91:	e9 99 f9 ff ff 	jmp	-1639 <_runtime.sighandler+0x9f>
 103ba96:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103ba9b:	48 83 c4 78 	add	rsp, 120
 103ba9f:	c3 	ret
 103baa0:	48 89 34 24 	mov	qword ptr [rsp], rsi
 103baa4:	48 8d 44 24 60 	lea	rax, [rsp + 96]
 103baa9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103baae:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 103bab6:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103babb:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 103babe:	ff d3 	call	rbx
 103bac0:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 103bac5:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 103bacc:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 103bad1:	e9 36 f9 ff ff 	jmp	-1738 <_runtime.sighandler+0x7c>
 103bad6:	31 c9 	xor	ecx, ecx
 103bad8:	e9 2f f9 ff ff 	jmp	-1745 <_runtime.sighandler+0x7c>
 103badd:	48 8b 47 30 	mov	rax, qword ptr [rdi + 48]
 103bae1:	48 8b 4b 30 	mov	rcx, qword ptr [rbx + 48]
 103bae5:	90 	nop
 103bae6:	90 	nop
 103bae7:	48 8b 90 90 00 00 00 	mov	rdx, qword ptr [rax + 144]
 103baee:	90 	nop
 103baef:	48 8b 40 48 	mov	rax, qword ptr [rax + 72]
 103baf3:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103baf7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103bafc:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103bb05:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103bb0d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103bb12:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103bb17:	e8 24 83 ff ff 	call	-31964 <_runtime.sigprof>
 103bb1c:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 103bb21:	48 83 c4 78 	add	rsp, 120
 103bb25:	c3 	ret
 103bb26:	b9 01 00 00 00 	mov	ecx, 1
 103bb2b:	e8 20 78 01 00 	call	96288 <_runtime.panicIndex>
 103bb30:	90 	nop
 103bb31:	e8 9a 50 01 00 	call	86170 <_runtime.morestack_noctxt>
 103bb36:	e9 55 f8 ff ff 	jmp	-1963 <_runtime.sighandler>
 103bb3b:	cc 	int3
 103bb3c:	cc 	int3
 103bb3d:	cc 	int3
 103bb3e:	cc 	int3
 103bb3f:	cc 	int3

_runtime.sigpanic:
 103bb40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103bb49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103bb4d:	0f 86 58 04 00 00 	jbe	1112 <_runtime.sigpanic+0x46b>
 103bb53:	48 83 ec 28 	sub	rsp, 40
 103bb57:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103bb5c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103bb61:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103bb6a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103bb6e:	48 85 c0 	test	rax, rax
 103bb71:	74 0d 	je	13 <_runtime.sigpanic+0x40>
 103bb73:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 103bb7a:	0f 84 46 02 00 00 	je	582 <_runtime.sigpanic+0x286>
 103bb80:	31 c9 	xor	ecx, ecx
 103bb82:	84 c9 	test	cl, cl
 103bb84:	0f 84 07 04 00 00 	je	1031 <_runtime.sigpanic+0x451>
 103bb8a:	8b 88 e0 00 00 00 	mov	ecx, dword ptr [rax + 224]
 103bb90:	83 f9 08 	cmp	ecx, 8
 103bb93:	0f 85 c1 00 00 00 	jne	193 <_runtime.sigpanic+0x11a>
 103bb99:	48 8b 80 00 01 00 00 	mov	rax, qword ptr [rax + 256]
 103bba0:	48 83 f8 07 	cmp	rax, 7
 103bba4:	74 7a 	je	122 <_runtime.sigpanic+0xe0>
 103bba6:	48 83 f8 08 	cmp	rax, 8
 103bbaa:	75 3a 	jne	58 <_runtime.sigpanic+0xa6>
 103bbac:	90 	nop
 103bbad:	48 8d 05 8e 7f 03 00 	lea	rax, [rip + 229262]
 103bbb4:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bbb8:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 103bbc1:	e8 ba af fe ff 	call	-86086 <_runtime.panicCheck2>
 103bbc6:	48 8b 05 7b 0c 09 00 	mov	rax, qword ptr [rip + 593019]
 103bbcd:	48 8b 0d 6c 0c 09 00 	mov	rcx, qword ptr [rip + 593004]
 103bbd4:	48 85 c9 	test	rcx, rcx
 103bbd7:	0f 84 aa 02 00 00 	je	682 <_runtime.sigpanic+0x347>
 103bbdd:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 103bbe1:	e9 a1 02 00 00 	jmp	673 <_runtime.sigpanic+0x347>
 103bbe6:	90 	nop
 103bbe7:	48 8d 05 f6 85 03 00 	lea	rax, [rip + 230902]
 103bbee:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bbf2:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 103bbfb:	e8 80 af fe ff 	call	-86144 <_runtime.panicCheck2>
 103bc00:	48 8b 05 11 0c 09 00 	mov	rax, qword ptr [rip + 592913]
 103bc07:	48 8b 0d 02 0c 09 00 	mov	rcx, qword ptr [rip + 592898]
 103bc0e:	48 85 c9 	test	rcx, rcx
 103bc11:	0f 84 62 02 00 00 	je	610 <_runtime.sigpanic+0x339>
 103bc17:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 103bc1b:	e9 59 02 00 00 	jmp	601 <_runtime.sigpanic+0x339>
 103bc20:	90 	nop
 103bc21:	48 8d 05 8c 89 03 00 	lea	rax, [rip + 231820]
 103bc28:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bc2c:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 103bc35:	e8 46 af fe ff 	call	-86202 <_runtime.panicCheck2>
 103bc3a:	48 8b 05 bf 0b 09 00 	mov	rax, qword ptr [rip + 592831]
 103bc41:	48 8b 0d c0 0b 09 00 	mov	rcx, qword ptr [rip + 592832]
 103bc48:	48 85 c0 	test	rax, rax
 103bc4b:	0f 84 44 02 00 00 	je	580 <_runtime.sigpanic+0x355>
 103bc51:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 103bc55:	e9 3b 02 00 00 	jmp	571 <_runtime.sigpanic+0x355>
 103bc5a:	83 f9 0a 	cmp	ecx, 10
 103bc5d:	0f 85 98 00 00 00 	jne	152 <_runtime.sigpanic+0x1bb>
 103bc63:	48 83 b8 00 01 00 00 02 	cmp	qword ptr [rax + 256], 2
 103bc6b:	75 0d 	jne	13 <_runtime.sigpanic+0x13a>
 103bc6d:	48 81 b8 08 01 00 00 00 10 00 00 	cmp	qword ptr [rax + 264], 4096
 103bc78:	72 47 	jb	71 <_runtime.sigpanic+0x181>
 103bc7a:	80 b8 b5 00 00 00 00 	cmp	byte ptr [rax + 181], 0
 103bc81:	0f 84 a1 02 00 00 	je	673 <_runtime.sigpanic+0x3e8>
 103bc87:	90 	nop
 103bc88:	48 8d 05 8e b3 03 00 	lea	rax, [rip + 242574]
 103bc8f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bc93:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 103bc9c:	e8 df ae fe ff 	call	-86305 <_runtime.panicCheck2>
 103bca1:	48 8b 05 80 0b 09 00 	mov	rax, qword ptr [rip + 592768]
 103bca8:	48 8b 0d 71 0b 09 00 	mov	rcx, qword ptr [rip + 592753]
 103bcaf:	48 85 c9 	test	rcx, rcx
 103bcb2:	0f 84 62 02 00 00 	je	610 <_runtime.sigpanic+0x3da>
 103bcb8:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 103bcbc:	e9 59 02 00 00 	jmp	601 <_runtime.sigpanic+0x3da>
 103bcc1:	90 	nop
 103bcc2:	48 8d 05 54 b3 03 00 	lea	rax, [rip + 242516]
 103bcc9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bccd:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 103bcd6:	e8 a5 ae fe ff 	call	-86363 <_runtime.panicCheck2>
 103bcdb:	48 8b 05 46 0b 09 00 	mov	rax, qword ptr [rip + 592710]
 103bce2:	48 8b 0d 37 0b 09 00 	mov	rcx, qword ptr [rip + 592695]
 103bce9:	48 85 c9 	test	rcx, rcx
 103bcec:	0f 84 91 02 00 00 	je	657 <_runtime.sigpanic+0x443>
 103bcf2:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 103bcf6:	e9 88 02 00 00 	jmp	648 <_runtime.sigpanic+0x443>
 103bcfb:	83 f9 0b 	cmp	ecx, 11
 103bcfe:	0f 85 b7 00 00 00 	jne	183 <_runtime.sigpanic+0x27b>
 103bd04:	48 8b 88 00 01 00 00 	mov	rcx, qword ptr [rax + 256]
 103bd0b:	48 85 c9 	test	rcx, rcx
 103bd0e:	0f 85 8e 00 00 00 	jne	142 <_runtime.sigpanic+0x262>
 103bd14:	48 81 b8 08 01 00 00 00 10 00 00 	cmp	qword ptr [rax + 264], 4096
 103bd1f:	72 47 	jb	71 <_runtime.sigpanic+0x228>
 103bd21:	80 b8 b5 00 00 00 00 	cmp	byte ptr [rax + 181], 0
 103bd28:	0f 84 83 01 00 00 	je	387 <_runtime.sigpanic+0x371>
 103bd2e:	90 	nop
 103bd2f:	48 8d 05 e7 b2 03 00 	lea	rax, [rip + 242407]
 103bd36:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bd3a:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 103bd43:	e8 38 ae fe ff 	call	-86472 <_runtime.panicCheck2>
 103bd48:	48 8b 05 d9 0a 09 00 	mov	rax, qword ptr [rip + 592601]
 103bd4f:	48 8b 0d ca 0a 09 00 	mov	rcx, qword ptr [rip + 592586]
 103bd56:	48 85 c9 	test	rcx, rcx
 103bd59:	0f 84 44 01 00 00 	je	324 <_runtime.sigpanic+0x363>
 103bd5f:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 103bd63:	e9 3b 01 00 00 	jmp	315 <_runtime.sigpanic+0x363>
 103bd68:	90 	nop
 103bd69:	48 8d 05 ad b2 03 00 	lea	rax, [rip + 242349]
 103bd70:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bd74:	48 c7 44 24 08 31 00 00 00 	mov	qword ptr [rsp + 8], 49
 103bd7d:	e8 fe ad fe ff 	call	-86530 <_runtime.panicCheck2>
 103bd82:	48 8b 05 9f 0a 09 00 	mov	rax, qword ptr [rip + 592543]
 103bd89:	48 8b 0d 90 0a 09 00 	mov	rcx, qword ptr [rip + 592528]
 103bd90:	48 85 c9 	test	rcx, rcx
 103bd93:	0f 84 73 01 00 00 	je	371 <_runtime.sigpanic+0x3cc>
 103bd99:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 103bd9d:	e9 6a 01 00 00 	jmp	362 <_runtime.sigpanic+0x3cc>
 103bda2:	48 83 f9 01 	cmp	rcx, 1
 103bda6:	0f 84 68 ff ff ff 	je	-152 <_runtime.sigpanic+0x1d4>
 103bdac:	48 83 f9 02 	cmp	rcx, 2
 103bdb0:	0f 84 5e ff ff ff 	je	-162 <_runtime.sigpanic+0x1d4>
 103bdb6:	e9 66 ff ff ff 	jmp	-154 <_runtime.sigpanic+0x1e1>
 103bdbb:	83 f9 20 	cmp	ecx, 32
 103bdbe:	0f 83 9c 00 00 00 	jae	156 <_runtime.sigpanic+0x320>
 103bdc4:	eb 5d 	jmp	93 <_runtime.sigpanic+0x2e3>
 103bdc6:	83 b9 08 01 00 00 00 	cmp	dword ptr [rcx + 264], 0
 103bdcd:	74 07 	je	7 <_runtime.sigpanic+0x296>
 103bdcf:	31 c9 	xor	ecx, ecx
 103bdd1:	e9 ac fd ff ff 	jmp	-596 <_runtime.sigpanic+0x42>
 103bdd6:	83 b9 f0 00 00 00 00 	cmp	dword ptr [rcx + 240], 0
 103bddd:	75 f0 	jne	-16 <_runtime.sigpanic+0x28f>
 103bddf:	83 b9 f4 00 00 00 00 	cmp	dword ptr [rcx + 244], 0
 103bde6:	75 e7 	jne	-25 <_runtime.sigpanic+0x28f>
 103bde8:	48 83 b9 00 01 00 00 00 	cmp	qword ptr [rcx + 256], 0
 103bdf0:	75 dd 	jne	-35 <_runtime.sigpanic+0x28f>
 103bdf2:	83 b9 0c 01 00 00 00 	cmp	dword ptr [rcx + 268], 0
 103bdf9:	75 d4 	jne	-44 <_runtime.sigpanic+0x28f>
 103bdfb:	90 	nop
 103bdfc:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 103be02:	0f ba f1 0c 	btr	ecx, 12
 103be06:	83 f9 02 	cmp	ecx, 2
 103be09:	74 07 	je	7 <_runtime.sigpanic+0x2d2>
 103be0b:	31 c9 	xor	ecx, ecx
 103be0d:	e9 70 fd ff ff 	jmp	-656 <_runtime.sigpanic+0x42>
 103be12:	48 83 78 70 00 	cmp	qword ptr [rax + 112], 0
 103be17:	75 f2 	jne	-14 <_runtime.sigpanic+0x2cb>
 103be19:	b9 01 00 00 00 	mov	ecx, 1
 103be1e:	e9 5f fd ff ff 	jmp	-673 <_runtime.sigpanic+0x42>
 103be23:	48 8d 04 49 	lea	rax, [rcx + 2*rcx]
 103be27:	48 8d 0d 72 10 09 00 	lea	rcx, [rip + 594034]
 103be2e:	48 8b 54 c1 08 	mov	rdx, qword ptr [rcx + 8*rax + 8]
 103be33:	48 8b 44 c1 10 	mov	rax, qword ptr [rcx + 8*rax + 16]
 103be38:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103be3c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103be41:	e8 3a be fc ff 	call	-213446 <_runtime.convTstring>
 103be46:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103be4b:	48 8d 0d ee 78 02 00 	lea	rcx, [rip + 162030]
 103be52:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103be56:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103be5b:	e8 60 c7 fe ff 	call	-80032 <_runtime.gopanic>
 103be60:	48 8d 05 a0 8b 03 00 	lea	rax, [rip + 232352]
 103be67:	48 89 04 24 	mov	qword ptr [rsp], rax
 103be6b:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 103be74:	e8 e7 ce fe ff 	call	-78105 <_runtime.throw>
 103be79:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103be7d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103be82:	e8 39 c7 fe ff 	call	-80071 <_runtime.gopanic>
 103be87:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103be8b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103be90:	e8 2b c7 fe ff 	call	-80085 <_runtime.gopanic>
 103be95:	48 89 04 24 	mov	qword ptr [rsp], rax
 103be99:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103be9e:	e8 1d c7 fe ff 	call	-80099 <_runtime.gopanic>
 103bea3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103bea7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103beac:	e8 0f c7 fe ff 	call	-80113 <_runtime.gopanic>
 103beb1:	48 8b 80 08 01 00 00 	mov	rax, qword ptr [rax + 264]
 103beb8:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103bebd:	e8 de e5 fe ff 	call	-72226 <_runtime.printlock>
 103bec2:	48 8d 05 c7 8e 03 00 	lea	rax, [rip + 233159]
 103bec9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103becd:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 103bed6:	e8 05 ef fe ff 	call	-69883 <_runtime.printstring>
 103bedb:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103bee0:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bee4:	e8 a7 ed fe ff 	call	-70233 <_runtime.printhex>
 103bee9:	e8 42 e8 fe ff 	call	-71614 <_runtime.printnl>
 103beee:	e8 2d e6 fe ff 	call	-72147 <_runtime.printunlock>
 103bef3:	48 8d 05 d8 6e 03 00 	lea	rax, [rip + 224984]
 103befa:	48 89 04 24 	mov	qword ptr [rsp], rax
 103befe:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 103bf07:	e8 54 ce fe ff 	call	-78252 <_runtime.throw>
 103bf0c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103bf10:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103bf15:	e8 a6 c6 fe ff 	call	-80218 <_runtime.gopanic>
 103bf1a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103bf1e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103bf23:	e8 98 c6 fe ff 	call	-80232 <_runtime.gopanic>
 103bf28:	48 8b 80 08 01 00 00 	mov	rax, qword ptr [rax + 264]
 103bf2f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103bf34:	e8 67 e5 fe ff 	call	-72345 <_runtime.printlock>
 103bf39:	48 8d 05 50 8e 03 00 	lea	rax, [rip + 233040]
 103bf40:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bf44:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 103bf4d:	e8 8e ee fe ff 	call	-70002 <_runtime.printstring>
 103bf52:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103bf57:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bf5b:	e8 30 ed fe ff 	call	-70352 <_runtime.printhex>
 103bf60:	e8 cb e7 fe ff 	call	-71733 <_runtime.printnl>
 103bf65:	e8 b6 e5 fe ff 	call	-72266 <_runtime.printunlock>
 103bf6a:	48 8d 05 61 6e 03 00 	lea	rax, [rip + 224865]
 103bf71:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bf75:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 103bf7e:	e8 dd cd fe ff 	call	-78371 <_runtime.throw>
 103bf83:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103bf87:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103bf8c:	e8 2f c6 fe ff 	call	-80337 <_runtime.gopanic>
 103bf91:	48 8d 05 e4 aa 03 00 	lea	rax, [rip + 240356]
 103bf98:	48 89 04 24 	mov	qword ptr [rsp], rax
 103bf9c:	48 c7 44 24 08 2a 00 00 00 	mov	qword ptr [rsp + 8], 42
 103bfa5:	e8 b6 cd fe ff 	call	-78410 <_runtime.throw>
 103bfaa:	90 	nop
 103bfab:	e8 20 4c 01 00 	call	85024 <_runtime.morestack_noctxt>
 103bfb0:	e9 8b fb ff ff 	jmp	-1141 <_runtime.sigpanic>
 103bfb5:	cc 	int3
 103bfb6:	cc 	int3
 103bfb7:	cc 	int3
 103bfb8:	cc 	int3
 103bfb9:	cc 	int3
 103bfba:	cc 	int3
 103bfbb:	cc 	int3
 103bfbc:	cc 	int3
 103bfbd:	cc 	int3
 103bfbe:	cc 	int3
 103bfbf:	cc 	int3

_runtime.dieFromSignal:
 103bfc0:	48 83 ec 18 	sub	rsp, 24
 103bfc4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103bfc9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103bfce:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103bfd2:	89 04 24 	mov	dword ptr [rsp], eax
 103bfd5:	e8 06 06 00 00 	call	1542 <_runtime.unblocksig>
 103bfda:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103bfde:	48 83 f8 20 	cmp	rax, 32
 103bfe2:	0f 83 9c 00 00 00 	jae	156 <_runtime.dieFromSignal+0xc4>
 103bfe8:	48 8d 0d 31 bb 0b 00 	lea	rcx, [rip + 768817]
 103bfef:	48 8d 0c 81 	lea	rcx, [rcx + 4*rax]
 103bff3:	31 d2 	xor	edx, edx
 103bff5:	87 11 	xchg	dword ptr [rcx], edx
 103bff7:	89 04 24 	mov	dword ptr [rsp], eax
 103bffa:	e8 61 6e 00 00 	call	28257 <_runtime.raise>
 103bfff:	90 	nop
 103c000:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 103c007:	e8 d4 71 00 00 	call	29140 <_runtime.usleep>
 103c00c:	90 	nop
 103c00d:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 103c014:	e8 c7 71 00 00 	call	29127 <_runtime.usleep>
 103c019:	90 	nop
 103c01a:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 103c021:	e8 ba 71 00 00 	call	29114 <_runtime.usleep>
 103c026:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103c02a:	89 04 24 	mov	dword ptr [rsp], eax
 103c02d:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103c036:	e8 05 a8 fe ff 	call	-88059 <_runtime.setsig>
 103c03b:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103c03f:	89 04 24 	mov	dword ptr [rsp], eax
 103c042:	e8 19 6e 00 00 	call	28185 <_runtime.raise>
 103c047:	90 	nop
 103c048:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 103c04f:	e8 8c 71 00 00 	call	29068 <_runtime.usleep>
 103c054:	90 	nop
 103c055:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 103c05c:	e8 7f 71 00 00 	call	29055 <_runtime.usleep>
 103c061:	90 	nop
 103c062:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 103c069:	e8 72 71 00 00 	call	29042 <_runtime.usleep>
 103c06e:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 103c075:	e8 26 71 00 00 	call	28966 <_runtime.exit>
 103c07a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 103c07f:	48 83 c4 18 	add	rsp, 24
 103c083:	c3 	ret
 103c084:	b9 20 00 00 00 	mov	ecx, 32
 103c089:	e8 c2 72 01 00 	call	94914 <_runtime.panicIndex>
 103c08e:	90 	nop
 103c08f:	cc 	int3

_runtime.raisebadsignal:
 103c090:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c099:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c09d:	0f 86 e5 00 00 00 	jbe	229 <_runtime.raisebadsignal+0xf8>
 103c0a3:	48 83 ec 20 	sub	rsp, 32
 103c0a7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 103c0ac:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 103c0b1:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103c0b5:	83 f8 1b 	cmp	eax, 27
 103c0b8:	0f 84 c0 00 00 00 	je	192 <_runtime.raisebadsignal+0xee>
 103c0be:	83 f8 20 	cmp	eax, 32
 103c0c1:	0f 82 a1 00 00 00 	jb	161 <_runtime.raisebadsignal+0xd8>
 103c0c7:	31 c9 	xor	ecx, ecx
 103c0c9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103c0ce:	89 04 24 	mov	dword ptr [rsp], eax
 103c0d1:	e8 0a 05 00 00 	call	1290 <_runtime.unblocksig>
 103c0d6:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103c0da:	89 04 24 	mov	dword ptr [rsp], eax
 103c0dd:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103c0e2:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103c0e7:	e8 54 a7 fe ff 	call	-88236 <_runtime.setsig>
 103c0ec:	80 3d 76 b6 0b 00 00 	cmp	byte ptr [rip + 767606], 0
 103c0f3:	74 68 	je	104 <_runtime.raisebadsignal+0xcd>
 103c0f5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103c0fa:	48 85 c0 	test	rax, rax
 103c0fd:	75 11 	jne	17 <_runtime.raisebadsignal+0x80>
 103c0ff:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103c104:	48 8b 00 	mov	rax, qword ptr [rax]
 103c107:	48 63 40 08 	movsxd	rax, dword ptr [rax + 8]
 103c10b:	48 85 c0 	test	rax, rax
 103c10e:	75 43 	jne	67 <_runtime.raisebadsignal+0xc3>
 103c110:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103c114:	89 04 24 	mov	dword ptr [rsp], eax
 103c117:	e8 44 6d 00 00 	call	27972 <_runtime.raise>
 103c11c:	c7 04 24 e8 03 00 00 	mov	dword ptr [rsp], 1000
 103c123:	e8 b8 70 00 00 	call	28856 <_runtime.usleep>
 103c128:	48 8d 05 09 b9 03 00 	lea	rax, [rip + 243977]
 103c12f:	84 00 	test	byte ptr [rax], al
 103c131:	48 8b 05 00 b9 03 00 	mov	rax, qword ptr [rip + 243968]
 103c138:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 103c13c:	89 0c 24 	mov	dword ptr [rsp], ecx
 103c13f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103c144:	e8 f7 a6 fe ff 	call	-88329 <_runtime.setsig>
 103c149:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103c14e:	48 83 c4 20 	add	rsp, 32
 103c152:	c3 	ret
 103c153:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103c158:	48 83 c4 20 	add	rsp, 32
 103c15c:	c3 	ret
 103c15d:	80 3d 07 b6 0b 00 00 	cmp	byte ptr [rip + 767495], 0
 103c164:	75 8f 	jne	-113 <_runtime.raisebadsignal+0x65>
 103c166:	eb a8 	jmp	-88 <_runtime.raisebadsignal+0x80>
 103c168:	48 8d 15 b1 bc 0b 00 	lea	rdx, [rip + 769201]
 103c16f:	48 8d 14 c2 	lea	rdx, [rdx + 8*rax]
 103c173:	48 8b 12 	mov	rdx, qword ptr [rdx]
 103c176:	48 89 d1 	mov	rcx, rdx
 103c179:	e9 4b ff ff ff 	jmp	-181 <_runtime.raisebadsignal+0x39>
 103c17e:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103c183:	48 83 c4 20 	add	rsp, 32
 103c187:	c3 	ret
 103c188:	e8 43 4a 01 00 	call	84547 <_runtime.morestack_noctxt>
 103c18d:	e9 fe fe ff ff 	jmp	-258 <_runtime.raisebadsignal>
 103c192:	cc 	int3
 103c193:	cc 	int3
 103c194:	cc 	int3
 103c195:	cc 	int3
 103c196:	cc 	int3
 103c197:	cc 	int3
 103c198:	cc 	int3
 103c199:	cc 	int3
 103c19a:	cc 	int3
 103c19b:	cc 	int3
 103c19c:	cc 	int3
 103c19d:	cc 	int3
 103c19e:	cc 	int3
 103c19f:	cc 	int3

_runtime.noSignalStack:
 103c1a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c1a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c1ad:	76 71 	jbe	113 <_runtime.noSignalStack+0x80>
 103c1af:	48 83 ec 18 	sub	rsp, 24
 103c1b3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103c1b8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103c1bd:	e8 de e2 fe ff 	call	-72994 <_runtime.printlock>
 103c1c2:	48 8d 05 d2 6d 03 00 	lea	rax, [rip + 224722]
 103c1c9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c1cd:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103c1d6:	e8 05 ec fe ff 	call	-70651 <_runtime.printstring>
 103c1db:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103c1df:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c1e3:	e8 38 e9 fe ff 	call	-71368 <_runtime.printuint>
 103c1e8:	48 8d 05 73 a6 03 00 	lea	rax, [rip + 239219]
 103c1ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c1f3:	48 c7 44 24 08 29 00 00 00 	mov	qword ptr [rsp + 8], 41
 103c1fc:	e8 df eb fe ff 	call	-70689 <_runtime.printstring>
 103c201:	e8 1a e3 fe ff 	call	-72934 <_runtime.printunlock>
 103c206:	48 8d 05 91 99 03 00 	lea	rax, [rip + 235921]
 103c20d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c211:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 103c21a:	e8 41 cb fe ff 	call	-79039 <_runtime.throw>
 103c21f:	90 	nop
 103c220:	e8 ab 49 01 00 	call	84395 <_runtime.morestack_noctxt>
 103c225:	e9 76 ff ff ff 	jmp	-138 <_runtime.noSignalStack>
 103c22a:	cc 	int3
 103c22b:	cc 	int3
 103c22c:	cc 	int3
 103c22d:	cc 	int3
 103c22e:	cc 	int3
 103c22f:	cc 	int3

_runtime.sigNotOnStack:
 103c230:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c239:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c23d:	76 71 	jbe	113 <_runtime.sigNotOnStack+0x80>
 103c23f:	48 83 ec 18 	sub	rsp, 24
 103c243:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103c248:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103c24d:	e8 4e e2 fe ff 	call	-73138 <_runtime.printlock>
 103c252:	48 8d 05 42 6d 03 00 	lea	rax, [rip + 224578]
 103c259:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c25d:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103c266:	e8 75 eb fe ff 	call	-70795 <_runtime.printstring>
 103c26b:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103c26f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c273:	e8 a8 e8 fe ff 	call	-71512 <_runtime.printuint>
 103c278:	48 8d 05 2b a7 03 00 	lea	rax, [rip + 239403]
 103c27f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c283:	48 c7 44 24 08 2a 00 00 00 	mov	qword ptr [rsp + 8], 42
 103c28c:	e8 4f eb fe ff 	call	-70833 <_runtime.printstring>
 103c291:	e8 8a e2 fe ff 	call	-73078 <_runtime.printunlock>
 103c296:	48 8d 05 f8 b1 03 00 	lea	rax, [rip + 242168]
 103c29d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c2a1:	48 c7 44 24 08 39 00 00 00 	mov	qword ptr [rsp + 8], 57
 103c2aa:	e8 b1 ca fe ff 	call	-79183 <_runtime.throw>
 103c2af:	90 	nop
 103c2b0:	e8 1b 49 01 00 	call	84251 <_runtime.morestack_noctxt>
 103c2b5:	e9 76 ff ff ff 	jmp	-138 <_runtime.sigNotOnStack>
 103c2ba:	cc 	int3
 103c2bb:	cc 	int3
 103c2bc:	cc 	int3
 103c2bd:	cc 	int3
 103c2be:	cc 	int3
 103c2bf:	cc 	int3

_runtime.signalDuringFork:
 103c2c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c2c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c2cd:	76 71 	jbe	113 <_runtime.signalDuringFork+0x80>
 103c2cf:	48 83 ec 18 	sub	rsp, 24
 103c2d3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 103c2d8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 103c2dd:	e8 be e1 fe ff 	call	-73282 <_runtime.printlock>
 103c2e2:	48 8d 05 b2 6c 03 00 	lea	rax, [rip + 224434]
 103c2e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c2ed:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103c2f6:	e8 e5 ea fe ff 	call	-70939 <_runtime.printstring>
 103c2fb:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 103c2ff:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c303:	e8 18 e8 fe ff 	call	-71656 <_runtime.printuint>
 103c308:	48 8d 05 df 81 03 00 	lea	rax, [rip + 229855]
 103c30f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c313:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 103c31c:	e8 bf ea fe ff 	call	-70977 <_runtime.printstring>
 103c321:	e8 fa e1 fe ff 	call	-73222 <_runtime.printunlock>
 103c326:	48 8d 05 1e 8e 03 00 	lea	rax, [rip + 232990]
 103c32d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c331:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 103c33a:	e8 21 ca fe ff 	call	-79327 <_runtime.throw>
 103c33f:	90 	nop
 103c340:	e8 8b 48 01 00 	call	84107 <_runtime.morestack_noctxt>
 103c345:	e9 76 ff ff ff 	jmp	-138 <_runtime.signalDuringFork>
 103c34a:	cc 	int3
 103c34b:	cc 	int3
 103c34c:	cc 	int3
 103c34d:	cc 	int3
 103c34e:	cc 	int3
 103c34f:	cc 	int3

_runtime.badsignal:
 103c350:	48 83 ec 28 	sub	rsp, 40
 103c354:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103c359:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103c35e:	80 3d 05 b4 0b 00 00 	cmp	byte ptr [rip + 766981], 0
 103c365:	74 45 	je	69 <_runtime.badsignal+0x5c>
 103c367:	c6 04 24 00 	mov	byte ptr [rsp], 0
 103c36b:	e8 90 22 ff ff 	call	-56688 <_runtime.needm>
 103c370:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103c375:	89 04 24 	mov	dword ptr [rsp], eax
 103c378:	e8 f3 05 00 00 	call	1523 <_runtime.sigsend>
 103c37d:	80 7c 24 08 00 	cmp	byte ptr [rsp + 8], 0
 103c382:	74 0f 	je	15 <_runtime.badsignal+0x43>
 103c384:	e8 37 26 ff ff 	call	-55753 <_runtime.dropm>
 103c389:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 103c38e:	48 83 c4 28 	add	rsp, 40
 103c392:	c3 	ret
 103c393:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103c398:	89 04 24 	mov	dword ptr [rsp], eax
 103c39b:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103c3a0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103c3a5:	e8 e6 fc ff ff 	call	-794 <_runtime.raisebadsignal>
 103c3aa:	eb d8 	jmp	-40 <_runtime.badsignal+0x34>
 103c3ac:	80 3d b0 b3 0b 00 00 	cmp	byte ptr [rip + 766896], 0
 103c3b3:	75 b2 	jne	-78 <_runtime.badsignal+0x17>
 103c3b5:	48 8b 05 f4 03 09 00 	mov	rax, qword ptr [rip + 590836]
 103c3bc:	48 8b 0d f5 03 09 00 	mov	rcx, qword ptr [rip + 590837]
 103c3c3:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 103c3cb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103c3d0:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 103c3d4:	e8 47 6e 00 00 	call	28231 <_runtime.write1>
 103c3d9:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 103c3e0:	e8 bb 6d 00 00 	call	28091 <_runtime.exit>
 103c3e5:	b8 7b 00 00 00 	mov	eax, 123
 103c3ea:	48 c7 00 02 00 00 00 	mov	qword ptr [rax], 2
 103c3f1:	e9 71 ff ff ff 	jmp	-143 <_runtime.badsignal+0x17>
 103c3f6:	cc 	int3
 103c3f7:	cc 	int3
 103c3f8:	cc 	int3
 103c3f9:	cc 	int3
 103c3fa:	cc 	int3
 103c3fb:	cc 	int3
 103c3fc:	cc 	int3
 103c3fd:	cc 	int3
 103c3fe:	cc 	int3
 103c3ff:	cc 	int3

_runtime.sigfwdgo:
 103c400:	48 83 ec 40 	sub	rsp, 64
 103c404:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 103c409:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 103c40e:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 103c412:	83 f8 20 	cmp	eax, 32
 103c415:	0f 83 b2 01 00 00 	jae	434 <_runtime.sigfwdgo+0x1cd>
 103c41b:	48 8d 0d fe b9 0b 00 	lea	rcx, [rip + 768510]
 103c422:	48 8d 0c c1 	lea	rcx, [rcx + 8*rax]
 103c426:	48 8b 09 	mov	rcx, qword ptr [rcx]
 103c429:	48 8d 14 40 	lea	rdx, [rax + 2*rax]
 103c42d:	48 8d 1d 6c 0a 09 00 	lea	rbx, [rip + 592492]
 103c434:	8b 14 d3 	mov	edx, dword ptr [rbx + 8*rdx]
 103c437:	48 8d 1d e2 b6 0b 00 	lea	rbx, [rip + 767714]
 103c43e:	48 8d 1c 83 	lea	rbx, [rbx + 4*rax]
 103c442:	8b 1b 	mov	ebx, dword ptr [rbx]
 103c444:	85 db 	test	ebx, ebx
 103c446:	0f 85 81 00 00 00 	jne	129 <_runtime.sigfwdgo+0xcd>
 103c44c:	48 83 f9 01 	cmp	rcx, 1
 103c450:	75 0f 	jne	15 <_runtime.sigfwdgo+0x61>
 103c452:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 103c457:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c45c:	48 83 c4 40 	add	rsp, 64
 103c460:	c3 	ret
 103c461:	48 85 c9 	test	rcx, rcx
 103c464:	75 09 	jne	9 <_runtime.sigfwdgo+0x6f>
 103c466:	0f ba e2 08 	bt	edx, 8
 103c46a:	72 e6 	jb	-26 <_runtime.sigfwdgo+0x52>
 103c46c:	48 85 c9 	test	rcx, rcx
 103c46f:	75 2c 	jne	44 <_runtime.sigfwdgo+0x9d>
 103c471:	89 04 24 	mov	dword ptr [rsp], eax
 103c474:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103c47d:	e8 be a3 fe ff 	call	-89154 <_runtime.setsig>
 103c482:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 103c486:	89 04 24 	mov	dword ptr [rsp], eax
 103c489:	e8 32 fb ff ff 	call	-1230 <_runtime.dieFromSignal>
 103c48e:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 103c493:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c498:	48 83 c4 40 	add	rsp, 64
 103c49c:	c3 	ret
 103c49d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103c4a1:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 103c4a5:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103c4aa:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103c4af:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103c4b4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103c4b9:	e8 42 81 01 00 	call	98626 <_runtime.sigfwd>
 103c4be:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 103c4c3:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c4c8:	48 83 c4 40 	add	rsp, 64
 103c4cc:	c3 	ret
 103c4cd:	80 3d 9a b2 0b 00 00 	cmp	byte ptr [rip + 766618], 0
 103c4d4:	0f 84 72 ff ff ff 	je	-142 <_runtime.sigfwdgo+0x4c>
 103c4da:	83 f8 0d 	cmp	eax, 13
 103c4dd:	0f 84 db 00 00 00 	je	219 <_runtime.sigfwdgo+0x1be>
 103c4e3:	48 85 c9 	test	rcx, rcx
 103c4e6:	0f 84 c3 00 00 00 	je	195 <_runtime.sigfwdgo+0x1af>
 103c4ec:	0f 57 c0 	xorps	xmm0, xmm0
 103c4ef:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 103c4f4:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 103c4f9:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 103c4fe:	48 8b 74 24 58 	mov	rsi, qword ptr [rsp + 88]
 103c503:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 103c508:	48 63 7b 08 	movsxd	rdi, dword ptr [rbx + 8]
 103c50c:	48 85 ff 	test	rdi, rdi
 103c50f:	75 0f 	jne	15 <_runtime.sigfwdgo+0x120>
 103c511:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 103c516:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c51b:	48 83 c4 40 	add	rsp, 64
 103c51f:	c3 	ret
 103c520:	0f ba e2 03 	bt	edx, 3
 103c524:	73 eb 	jae	-21 <_runtime.sigfwdgo+0x111>
 103c526:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103c52b:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 103c530:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c534:	e8 57 e9 ff ff 	call	-5801 <_runtime.sigFetchG>
 103c539:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103c53e:	48 85 c0 	test	rax, rax
 103c541:	74 1c 	je	28 <_runtime.sigfwdgo+0x15f>
 103c543:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103c547:	48 85 c0 	test	rax, rax
 103c54a:	74 13 	je	19 <_runtime.sigfwdgo+0x15f>
 103c54c:	48 83 b8 c0 00 00 00 00 	cmp	qword ptr [rax + 192], 0
 103c554:	74 09 	je	9 <_runtime.sigfwdgo+0x15f>
 103c556:	80 b8 18 01 00 00 00 	cmp	byte ptr [rax + 280], 0
 103c55d:	74 41 	je	65 <_runtime.sigfwdgo+0x1a0>
 103c55f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103c564:	48 83 f8 01 	cmp	rax, 1
 103c568:	75 0f 	jne	15 <_runtime.sigfwdgo+0x179>
 103c56a:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 103c56f:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c574:	48 83 c4 40 	add	rsp, 64
 103c578:	c3 	ret
 103c579:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c57d:	8b 44 24 48 	mov	eax, dword ptr [rsp + 72]
 103c581:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 103c585:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103c58a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103c58f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103c594:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103c599:	e8 62 80 01 00 	call	98402 <_runtime.sigfwd>
 103c59e:	eb ca 	jmp	-54 <_runtime.sigfwdgo+0x16a>
 103c5a0:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 103c5a5:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c5aa:	48 83 c4 40 	add	rsp, 64
 103c5ae:	c3 	ret
 103c5af:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 103c5b4:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c5b9:	48 83 c4 40 	add	rsp, 64
 103c5bd:	c3 	ret
 103c5be:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 103c5c3:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c5c8:	48 83 c4 40 	add	rsp, 64
 103c5cc:	c3 	ret
 103c5cd:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 103c5d2:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103c5d7:	48 83 c4 40 	add	rsp, 64
 103c5db:	c3 	ret
 103c5dc:	cc 	int3
 103c5dd:	cc 	int3
 103c5de:	cc 	int3
 103c5df:	cc 	int3

_runtime.unblocksig:
 103c5e0:	48 83 ec 28 	sub	rsp, 40
 103c5e4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103c5e9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103c5ee:	c7 44 24 1c 00 00 00 00 	mov	dword ptr [rsp + 28], 0
 103c5f6:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 103c5fa:	8d 48 ff 	lea	ecx, [rax - 1]
 103c5fd:	83 f9 20 	cmp	ecx, 32
 103c600:	19 c0 	sbb	eax, eax
 103c602:	90 	nop
 103c603:	ba 01 00 00 00 	mov	edx, 1
 103c608:	d3 e2 	shl	edx, cl
 103c60a:	21 c2 	and	edx, eax
 103c60c:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 103c610:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 103c617:	48 8d 44 24 1c 	lea	rax, [rsp + 28]
 103c61c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103c621:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103c62a:	e8 e1 6d 00 00 	call	28129 <_runtime.sigprocmask>
 103c62f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 103c634:	48 83 c4 28 	add	rsp, 40
 103c638:	c3 	ret
 103c639:	cc 	int3
 103c63a:	cc 	int3
 103c63b:	cc 	int3
 103c63c:	cc 	int3
 103c63d:	cc 	int3
 103c63e:	cc 	int3
 103c63f:	cc 	int3

_runtime.minitSignalStack:
 103c640:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c649:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c64d:	0f 86 38 01 00 00 	jbe	312 <_runtime.minitSignalStack+0x14b>
 103c653:	48 83 ec 38 	sub	rsp, 56
 103c657:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 103c65c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 103c661:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103c66a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103c66f:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 103c678:	0f 57 c0 	xorps	xmm0, xmm0
 103c67b:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 103c680:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 103c688:	48 8d 4c 24 18 	lea	rcx, [rsp + 24]
 103c68d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103c692:	e8 b9 6d 00 00 	call	28089 <_runtime.sigaltstack>
 103c697:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 103c69b:	0f ba e0 02 	bt	eax, 2
 103c69f:	73 32 	jae	50 <_runtime.minitSignalStack+0x93>
 103c6a1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103c6a6:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103c6aa:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103c6ae:	84 01 	test	byte ptr [rcx], al
 103c6b0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103c6b4:	e8 57 02 00 00 	call	599 <_runtime.signalstack>
 103c6b9:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103c6be:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103c6c2:	c6 80 16 01 00 00 01 	mov	byte ptr [rax + 278], 1
 103c6c9:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 103c6ce:	48 83 c4 38 	add	rsp, 56
 103c6d2:	c3 	ret
 103c6d3:	80 3d 90 b0 0b 00 00 	cmp	byte ptr [rip + 766096], 0
 103c6da:	74 c5 	je	-59 <_runtime.minitSignalStack+0x61>
 103c6dc:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103c6e1:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103c6e5:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 103c6ee:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103c6f2:	48 8b 5b 50 	mov	rbx, qword ptr [rbx + 80]
 103c6f6:	48 8b 33 	mov	rsi, qword ptr [rbx]
 103c6f9:	48 8b 5b 08 	mov	rbx, qword ptr [rbx + 8]
 103c6fd:	48 89 71 58 	mov	qword ptr [rcx + 88], rsi
 103c701:	48 89 59 60 	mov	qword ptr [rcx + 96], rbx
 103c705:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103c709:	48 8b 5b 50 	mov	rbx, qword ptr [rbx + 80]
 103c70d:	48 8b 5b 10 	mov	rbx, qword ptr [rbx + 16]
 103c711:	48 89 59 68 	mov	qword ptr [rcx + 104], rbx
 103c715:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103c719:	48 8b 5b 50 	mov	rbx, qword ptr [rbx + 80]
 103c71d:	48 8b 5b 18 	mov	rbx, qword ptr [rbx + 24]
 103c721:	48 89 59 70 	mov	qword ptr [rcx + 112], rbx
 103c725:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103c729:	48 8b 5b 50 	mov	rbx, qword ptr [rbx + 80]
 103c72d:	48 8b 9b 80 00 00 00 	mov	rbx, qword ptr [rbx + 128]
 103c734:	48 89 59 78 	mov	qword ptr [rcx + 120], rbx
 103c738:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 103c73c:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103c740:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 103c745:	48 89 19 	mov	qword ptr [rcx], rbx
 103c748:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 103c74c:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103c750:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 103c755:	48 01 de 	add	rsi, rbx
 103c758:	48 89 71 08 	mov	qword ptr [rcx + 8], rsi
 103c75c:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 103c760:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103c764:	48 81 c3 80 03 00 00 	add	rbx, 896
 103c76b:	48 89 59 10 	mov	qword ptr [rcx + 16], rbx
 103c76f:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 103c773:	48 8b 49 50 	mov	rcx, qword ptr [rcx + 80]
 103c777:	48 89 59 18 	mov	qword ptr [rcx + 24], rbx
 103c77b:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103c77f:	c6 80 16 01 00 00 00 	mov	byte ptr [rax + 278], 0
 103c786:	e9 3e ff ff ff 	jmp	-194 <_runtime.minitSignalStack+0x89>
 103c78b:	e8 40 44 01 00 	call	83008 <_runtime.morestack_noctxt>
 103c790:	e9 ab fe ff ff 	jmp	-341 <_runtime.minitSignalStack>
 103c795:	cc 	int3
 103c796:	cc 	int3
 103c797:	cc 	int3
 103c798:	cc 	int3
 103c799:	cc 	int3
 103c79a:	cc 	int3
 103c79b:	cc 	int3
 103c79c:	cc 	int3
 103c79d:	cc 	int3
 103c79e:	cc 	int3
 103c79f:	cc 	int3

_runtime.minitSignalMask:
 103c7a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c7a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c7ad:	0f 86 ba 00 00 00 	jbe	186 <_runtime.minitSignalMask+0xcd>
 103c7b3:	48 83 ec 28 	sub	rsp, 40
 103c7b7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103c7bc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103c7c1:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 103c7ca:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 103c7ce:	8b 92 80 00 00 00 	mov	edx, dword ptr [rdx + 128]
 103c7d4:	89 54 24 1c 	mov	dword ptr [rsp + 28], edx
 103c7d8:	31 c0 	xor	eax, eax
 103c7da:	eb 03 	jmp	3 <_runtime.minitSignalMask+0x3f>
 103c7dc:	48 ff c0 	inc	rax
 103c7df:	48 83 f8 20 	cmp	rax, 32
 103c7e3:	7d 51 	jge	81 <_runtime.minitSignalMask+0x96>
 103c7e5:	89 c2 	mov	edx, eax
 103c7e7:	48 83 fa 20 	cmp	rdx, 32
 103c7eb:	73 72 	jae	114 <_runtime.minitSignalMask+0xbf>
 103c7ed:	48 8d 14 52 	lea	rdx, [rdx + 2*rdx]
 103c7f1:	48 8d 1d a8 06 09 00 	lea	rbx, [rip + 591528]
 103c7f8:	8b 14 d3 	mov	edx, dword ptr [rbx + 8*rdx]
 103c7fb:	0f ba e2 07 	bt	edx, 7
 103c7ff:	73 19 	jae	25 <_runtime.minitSignalMask+0x7a>
 103c801:	8d 48 ff 	lea	ecx, [rax - 1]
 103c804:	83 f9 20 	cmp	ecx, 32
 103c807:	19 d2 	sbb	edx, edx
 103c809:	be 01 00 00 00 	mov	esi, 1
 103c80e:	d3 e6 	shl	esi, cl
 103c810:	21 d6 	and	esi, edx
 103c812:	f7 d6 	not	esi
 103c814:	21 74 24 1c 	and	dword ptr [rsp + 28], esi
 103c818:	eb c2 	jmp	-62 <_runtime.minitSignalMask+0x3c>
 103c81a:	80 3d 48 af 0b 00 00 	cmp	byte ptr [rip + 765768], 0
 103c821:	75 b9 	jne	-71 <_runtime.minitSignalMask+0x3c>
 103c823:	80 3d 41 af 0b 00 00 	cmp	byte ptr [rip + 765761], 0
 103c82a:	75 b0 	jne	-80 <_runtime.minitSignalMask+0x3c>
 103c82c:	f7 c2 06 00 00 00 	test	edx, 6
 103c832:	74 a8 	je	-88 <_runtime.minitSignalMask+0x3c>
 103c834:	eb cb 	jmp	-53 <_runtime.minitSignalMask+0x61>
 103c836:	c7 04 24 03 00 00 00 	mov	dword ptr [rsp], 3
 103c83d:	48 8d 44 24 1c 	lea	rax, [rsp + 28]
 103c842:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103c847:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103c850:	e8 bb 6b 00 00 	call	27579 <_runtime.sigprocmask>
 103c855:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 103c85a:	48 83 c4 28 	add	rsp, 40
 103c85e:	c3 	ret
 103c85f:	48 89 d0 	mov	rax, rdx
 103c862:	b9 20 00 00 00 	mov	ecx, 32
 103c867:	e8 e4 6a 01 00 	call	92900 <_runtime.panicIndex>
 103c86c:	90 	nop
 103c86d:	e8 5e 43 01 00 	call	82782 <_runtime.morestack_noctxt>
 103c872:	e9 29 ff ff ff 	jmp	-215 <_runtime.minitSignalMask>
 103c877:	cc 	int3
 103c878:	cc 	int3
 103c879:	cc 	int3
 103c87a:	cc 	int3
 103c87b:	cc 	int3
 103c87c:	cc 	int3
 103c87d:	cc 	int3
 103c87e:	cc 	int3
 103c87f:	cc 	int3

_runtime.unminitSignals:
 103c880:	48 83 ec 30 	sub	rsp, 48
 103c884:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 103c889:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103c88e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103c897:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103c89b:	80 b8 16 01 00 00 00 	cmp	byte ptr [rax + 278], 0
 103c8a2:	75 39 	jne	57 <_runtime.unminitSignals+0x5d>
 103c8a4:	48 8b 48 50 	mov	rcx, qword ptr [rax + 80]
 103c8a8:	90 	nop
 103c8a9:	48 8b 50 60 	mov	rdx, qword ptr [rax + 96]
 103c8ad:	48 8b 58 58 	mov	rbx, qword ptr [rax + 88]
 103c8b1:	48 89 19 	mov	qword ptr [rcx], rbx
 103c8b4:	48 89 51 08 	mov	qword ptr [rcx + 8], rdx
 103c8b8:	48 8b 50 68 	mov	rdx, qword ptr [rax + 104]
 103c8bc:	48 89 51 10 	mov	qword ptr [rcx + 16], rdx
 103c8c0:	48 8b 50 70 	mov	rdx, qword ptr [rax + 112]
 103c8c4:	48 89 51 18 	mov	qword ptr [rcx + 24], rdx
 103c8c8:	48 8b 40 78 	mov	rax, qword ptr [rax + 120]
 103c8cc:	48 89 81 80 00 00 00 	mov	qword ptr [rcx + 128], rax
 103c8d3:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103c8d8:	48 83 c4 30 	add	rsp, 48
 103c8dc:	c3 	ret
 103c8dd:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103c8e6:	0f 57 c0 	xorps	xmm0, xmm0
 103c8e9:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 103c8ee:	c7 44 24 20 04 00 00 00 	mov	dword ptr [rsp + 32], 4
 103c8f6:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 103c8fb:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c8ff:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103c908:	e8 43 6b 00 00 	call	27459 <_runtime.sigaltstack>
 103c90d:	eb c4 	jmp	-60 <_runtime.unminitSignals+0x53>
 103c90f:	cc 	int3

_runtime.signalstack:
 103c910:	48 83 ec 30 	sub	rsp, 48
 103c914:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 103c919:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103c91e:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103c927:	0f 57 c0 	xorps	xmm0, xmm0
 103c92a:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 103c92f:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103c934:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103c938:	48 2b 08 	sub	rcx, qword ptr [rax]
 103c93b:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 103c940:	48 8b 00 	mov	rax, qword ptr [rax]
 103c943:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103c948:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 103c94d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103c951:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103c95a:	e8 f1 6a 00 00 	call	27377 <_runtime.sigaltstack>
 103c95f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103c964:	48 83 c4 30 	add	rsp, 48
 103c968:	c3 	ret
 103c969:	cc 	int3
 103c96a:	cc 	int3
 103c96b:	cc 	int3
 103c96c:	cc 	int3
 103c96d:	cc 	int3
 103c96e:	cc 	int3
 103c96f:	cc 	int3

_runtime.sigsend:
 103c970:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103c979:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103c97d:	0f 86 8b 01 00 00 	jbe	395 <_runtime.sigsend+0x19e>
 103c983:	48 83 ec 30 	sub	rsp, 48
 103c987:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 103c98c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103c991:	80 3d 08 b0 0b 00 00 	cmp	byte ptr [rip + 765960], 0
 103c998:	0f 84 3d 01 00 00 	je	317 <_runtime.sigsend+0x16b>
 103c99e:	8b 44 24 38 	mov	eax, dword ptr [rsp + 56]
 103c9a2:	83 f8 20 	cmp	eax, 32
 103c9a5:	0f 83 30 01 00 00 	jae	304 <_runtime.sigsend+0x16b>
 103c9ab:	ba 01 00 00 00 	mov	edx, 1
 103c9b0:	48 8d 1d e5 af 0b 00 	lea	rbx, [rip + 765925]
 103c9b7:	f0 	lock
 103c9b8:	0f c1 13 	xadd	dword ptr [rbx], edx
 103c9bb:	89 c2 	mov	edx, eax
 103c9bd:	c1 e8 05 	shr	eax, 5
 103c9c0:	48 83 f8 01 	cmp	rax, 1
 103c9c4:	0f 83 39 01 00 00 	jae	313 <_runtime.sigsend+0x193>
 103c9ca:	48 8d 0d bb af 0b 00 	lea	rcx, [rip + 765883]
 103c9d1:	48 8d 0c 81 	lea	rcx, [rcx + 4*rax]
 103c9d5:	8b 09 	mov	ecx, dword ptr [rcx]
 103c9d7:	0f a3 d1 	bt	ecx, edx
 103c9da:	72 08 	jb	8 <_runtime.sigsend+0x74>
 103c9dc:	e9 e2 00 00 00 	jmp	226 <_runtime.sigsend+0x153>
 103c9e1:	44 89 c0 	mov	eax, r8d
 103c9e4:	8b 0d 9e af 0b 00 	mov	ecx, dword ptr [rip + 765854]
 103c9ea:	0f a3 d1 	bt	ecx, edx
 103c9ed:	0f 82 b8 00 00 00 	jb	184 <_runtime.sigsend+0x13b>
 103c9f3:	48 8d 35 8e af 0b 00 	lea	rsi, [rip + 765838]
 103c9fa:	48 8d 34 86 	lea	rsi, [rsi + 4*rax]
 103c9fe:	89 cf 	mov	edi, ecx
 103ca00:	0f ab d1 	bts	ecx, edx
 103ca03:	41 89 c0 	mov	r8d, eax
 103ca06:	89 f8 	mov	eax, edi
 103ca08:	f0 	lock
 103ca09:	0f b1 0e 	cmpxchg	dword ptr [rsi], ecx
 103ca0c:	0f 94 c1 	sete	cl
 103ca0f:	84 c9 	test	cl, cl
 103ca11:	74 ce 	je	-50 <_runtime.sigsend+0x71>
 103ca13:	8b 0d 7f af 0b 00 	mov	ecx, dword ptr [rip + 765823]
 103ca19:	85 c9 	test	ecx, ecx
 103ca1b:	75 31 	jne	49 <_runtime.sigsend+0xde>
 103ca1d:	31 c0 	xor	eax, eax
 103ca1f:	48 8d 0d 72 af 0b 00 	lea	rcx, [rip + 765810]
 103ca26:	ba 02 00 00 00 	mov	edx, 2
 103ca2b:	f0 	lock
 103ca2c:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 103ca2f:	0f 94 c1 	sete	cl
 103ca32:	84 c9 	test	cl, cl
 103ca34:	74 dd 	je	-35 <_runtime.sigsend+0xa3>
 103ca36:	b8 ff ff ff ff 	mov	eax, 4294967295
 103ca3b:	f0 	lock
 103ca3c:	0f c1 03 	xadd	dword ptr [rbx], eax
 103ca3f:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 103ca44:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103ca49:	48 83 c4 30 	add	rsp, 48
 103ca4d:	c3 	ret
 103ca4e:	83 f9 01 	cmp	ecx, 1
 103ca51:	75 51 	jne	81 <_runtime.sigsend+0x134>
 103ca53:	b8 01 00 00 00 	mov	eax, 1
 103ca58:	48 8d 0d 39 af 0b 00 	lea	rcx, [rip + 765753]
 103ca5f:	31 d2 	xor	edx, edx
 103ca61:	f0 	lock
 103ca62:	0f b1 11 	cmpxchg	dword ptr [rcx], edx
 103ca65:	0f 94 c1 	sete	cl
 103ca68:	84 c9 	test	cl, cl
 103ca6a:	75 07 	jne	7 <_runtime.sigsend+0x103>
 103ca6c:	ba 02 00 00 00 	mov	edx, 2
 103ca71:	eb a0 	jmp	-96 <_runtime.sigsend+0xa3>
 103ca73:	90 	nop
 103ca74:	c6 44 24 27 00 	mov	byte ptr [rsp + 39], 0
 103ca79:	48 63 05 44 ad 0b 00 	movsxd	rax, dword ptr [rip + 765252]
 103ca80:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ca84:	48 8d 44 24 27 	lea	rax, [rsp + 39]
 103ca89:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ca8e:	c7 44 24 10 01 00 00 00 	mov	dword ptr [rsp + 16], 1
 103ca96:	e8 85 67 00 00 	call	26501 <_runtime.write1>
 103ca9b:	48 8d 1d fa ae 0b 00 	lea	rbx, [rip + 765690]
 103caa2:	eb 92 	jmp	-110 <_runtime.sigsend+0xc6>
 103caa4:	83 f9 02 	cmp	ecx, 2
 103caa7:	74 8d 	je	-115 <_runtime.sigsend+0xc6>
 103caa9:	eb 3f 	jmp	63 <_runtime.sigsend+0x17a>
 103caab:	b8 ff ff ff ff 	mov	eax, 4294967295
 103cab0:	f0 	lock
 103cab1:	0f c1 03 	xadd	dword ptr [rbx], eax
 103cab4:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 103cab9:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103cabe:	48 83 c4 30 	add	rsp, 48
 103cac2:	c3 	ret
 103cac3:	b8 ff ff ff ff 	mov	eax, 4294967295
 103cac8:	f0 	lock
 103cac9:	0f c1 03 	xadd	dword ptr [rbx], eax
 103cacc:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 103cad1:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103cad6:	48 83 c4 30 	add	rsp, 48
 103cada:	c3 	ret
 103cadb:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 103cae0:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103cae5:	48 83 c4 30 	add	rsp, 48
 103cae9:	c3 	ret
 103caea:	48 8d 05 75 86 03 00 	lea	rax, [rip + 231029]
 103caf1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103caf5:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 103cafe:	e8 5d c2 fe ff 	call	-81315 <_runtime.throw>
 103cb03:	b9 01 00 00 00 	mov	ecx, 1
 103cb08:	e8 43 68 01 00 	call	92227 <_runtime.panicIndex>
 103cb0d:	90 	nop
 103cb0e:	e8 bd 40 01 00 	call	82109 <_runtime.morestack_noctxt>
 103cb13:	e9 58 fe ff ff 	jmp	-424 <_runtime.sigsend>
 103cb18:	cc 	int3
 103cb19:	cc 	int3
 103cb1a:	cc 	int3
 103cb1b:	cc 	int3
 103cb1c:	cc 	int3
 103cb1d:	cc 	int3
 103cb1e:	cc 	int3
 103cb1f:	cc 	int3

_runtime.makeslice:
 103cb20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103cb29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103cb2d:	0f 86 de 00 00 00 	jbe	222 <_runtime.makeslice+0xf1>
 103cb33:	48 83 ec 28 	sub	rsp, 40
 103cb37:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103cb3c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103cb41:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103cb46:	48 8b 01 	mov	rax, qword ptr [rcx]
 103cb49:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 103cb4e:	48 89 c3 	mov	rbx, rax
 103cb51:	48 f7 e2 	mul	rdx
 103cb54:	70 6f 	jo	111 <_runtime.makeslice+0xa5>
 103cb56:	48 ba 00 00 00 00 00 00 01 00 	movabs	rdx, 281474976710656
 103cb60:	48 39 d0 	cmp	rax, rdx
 103cb63:	77 59 	ja	89 <_runtime.makeslice+0x9e>
 103cb65:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 103cb6a:	48 85 f6 	test	rsi, rsi
 103cb6d:	7c 31 	jl	49 <_runtime.makeslice+0x80>
 103cb6f:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 103cb74:	48 39 fe 	cmp	rsi, rdi
 103cb77:	7f 27 	jg	39 <_runtime.makeslice+0x80>
 103cb79:	48 89 04 24 	mov	qword ptr [rsp], rax
 103cb7d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103cb82:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 103cb87:	e8 24 cd fc ff 	call	-209628 <_runtime.mallocgc>
 103cb8c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103cb91:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 103cb96:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 103cb9b:	48 83 c4 28 	add	rsp, 40
 103cb9f:	c3 	ret
 103cba0:	48 89 d8 	mov	rax, rbx
 103cba3:	48 f7 e6 	mul	rsi
 103cba6:	70 2e 	jo	46 <_runtime.makeslice+0xb6>
 103cba8:	48 b9 00 00 00 00 00 00 01 00 	movabs	rcx, 281474976710656
 103cbb2:	48 39 c8 	cmp	rax, rcx
 103cbb5:	77 1f 	ja	31 <_runtime.makeslice+0xb6>
 103cbb7:	48 85 f6 	test	rsi, rsi
 103cbba:	7c 1a 	jl	26 <_runtime.makeslice+0xb6>
 103cbbc:	eb 35 	jmp	53 <_runtime.makeslice+0xd3>
 103cbbe:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 103cbc3:	eb db 	jmp	-37 <_runtime.makeslice+0x80>
 103cbc5:	48 ba 00 00 00 00 00 00 01 00 	movabs	rdx, 281474976710656
 103cbcf:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 103cbd4:	eb ca 	jmp	-54 <_runtime.makeslice+0x80>
 103cbd6:	90 	nop
 103cbd7:	48 8d 05 62 6b 02 00 	lea	rax, [rip + 158562]
 103cbde:	48 89 04 24 	mov	qword ptr [rsp], rax
 103cbe2:	48 8d 05 47 6e 04 00 	lea	rax, [rip + 290375]
 103cbe9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103cbee:	e8 cd b9 fe ff 	call	-83507 <_runtime.gopanic>
 103cbf3:	90 	nop
 103cbf4:	48 8d 05 45 6b 02 00 	lea	rax, [rip + 158533]
 103cbfb:	48 89 04 24 	mov	qword ptr [rsp], rax
 103cbff:	48 8d 05 3a 6e 04 00 	lea	rax, [rip + 290362]
 103cc06:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103cc0b:	e8 b0 b9 fe ff 	call	-83536 <_runtime.gopanic>
 103cc10:	90 	nop
 103cc11:	e8 ba 3f 01 00 	call	81850 <_runtime.morestack_noctxt>
 103cc16:	e9 05 ff ff ff 	jmp	-251 <_runtime.makeslice>
 103cc1b:	cc 	int3
 103cc1c:	cc 	int3
 103cc1d:	cc 	int3
 103cc1e:	cc 	int3
 103cc1f:	cc 	int3

_runtime.growslice:
 103cc20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103cc29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103cc2d:	0f 86 a0 06 00 00 	jbe	1696 <_runtime.growslice+0x6b3>
 103cc33:	48 83 ec 60 	sub	rsp, 96
 103cc37:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 103cc3c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 103cc41:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 103cc49:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 103cc51:	48 39 da 	cmp	rdx, rbx
 103cc54:	0f 8c 5c 06 00 00 	jl	1628 <_runtime.growslice+0x696>
 103cc5a:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 103cc5f:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 103cc62:	48 85 ff 	test	rdi, rdi
 103cc65:	0f 84 43 05 00 00 	je	1347 <_runtime.growslice+0x58e>
 103cc6b:	4c 8d 04 1b 	lea	r8, [rbx + rbx]
 103cc6f:	4c 39 c2 	cmp	rdx, r8
 103cc72:	0f 8f 29 05 00 00 	jg	1321 <_runtime.growslice+0x581>
 103cc78:	4c 8b 4c 24 78 	mov	r9, qword ptr [rsp + 120]
 103cc7d:	49 81 f9 00 04 00 00 	cmp	r9, 1024
 103cc84:	7d 1c 	jge	28 <_runtime.growslice+0x82>
 103cc86:	e9 0b 05 00 00 	jmp	1291 <_runtime.growslice+0x576>
 103cc8b:	49 89 d8 	mov	r8, rbx
 103cc8e:	48 c1 fb 3f 	sar	rbx, 63
 103cc92:	48 c1 eb 3e 	shr	rbx, 62
 103cc96:	4e 8d 14 03 	lea	r10, [rbx + r8]
 103cc9a:	49 c1 fa 02 	sar	r10, 2
 103cc9e:	4b 8d 1c 02 	lea	rbx, [r10 + r8]
 103cca2:	48 85 db 	test	rbx, rbx
 103cca5:	7e 08 	jle	8 <_runtime.growslice+0x8f>
 103cca7:	48 39 d3 	cmp	rbx, rdx
 103ccaa:	7c df 	jl	-33 <_runtime.growslice+0x6b>
 103ccac:	48 85 db 	test	rbx, rbx
 103ccaf:	0f 8f d6 04 00 00 	jg	1238 <_runtime.growslice+0x56b>
 103ccb5:	48 89 d0 	mov	rax, rdx
 103ccb8:	48 83 ff 01 	cmp	rdi, 1
 103ccbc:	0f 85 e9 01 00 00 	jne	489 <_runtime.growslice+0x28b>
 103ccc2:	48 81 fa 00 80 00 00 	cmp	rdx, 32768
 103ccc9:	0f 83 b4 01 00 00 	jae	436 <_runtime.growslice+0x263>
 103cccf:	48 81 fa f8 03 00 00 	cmp	rdx, 1016
 103ccd6:	0f 87 6a 01 00 00 	ja	362 <_runtime.growslice+0x226>
 103ccdc:	48 8d 5a 07 	lea	rbx, [rdx + 7]
 103cce0:	48 c1 eb 03 	shr	rbx, 3
 103cce4:	48 81 fb 81 00 00 00 	cmp	rbx, 129
 103cceb:	0f 83 b8 05 00 00 	jae	1464 <_runtime.growslice+0x689>
 103ccf1:	48 8d 3d 68 e7 08 00 	lea	rdi, [rip + 583528]
 103ccf8:	0f b6 1c 3b 	movzx	ebx, byte ptr [rbx + rdi]
 103ccfc:	48 83 fb 43 	cmp	rbx, 67
 103cd00:	0f 83 97 05 00 00 	jae	1431 <_runtime.growslice+0x67d>
 103cd06:	48 8d 0d f3 e7 08 00 	lea	rcx, [rip + 583667]
 103cd0d:	0f b7 0c 59 	movzx	ecx, word ptr [rcx + 2*rbx]
 103cd11:	48 bb 00 00 00 00 00 00 01 00 	movabs	rbx, 281474976710656
 103cd1b:	48 39 da 	cmp	rdx, rbx
 103cd1e:	0f 97 c2 	seta	dl
 103cd21:	4c 89 cf 	mov	rdi, r9
 103cd24:	49 89 c8 	mov	r8, rcx
 103cd27:	84 d2 	test	dl, dl
 103cd29:	0f 85 ad 04 00 00 	jne	1197 <_runtime.growslice+0x5bc>
 103cd2f:	48 39 d9 	cmp	rcx, rbx
 103cd32:	0f 87 a4 04 00 00 	ja	1188 <_runtime.growslice+0x5bc>
 103cd38:	4c 89 4c 24 30 	mov	qword ptr [rsp + 48], r9
 103cd3d:	4c 89 44 24 28 	mov	qword ptr [rsp + 40], r8
 103cd42:	48 83 7e 08 00 	cmp	qword ptr [rsi + 8], 0
 103cd47:	0f 85 a2 00 00 00 	jne	162 <_runtime.growslice+0x1cf>
 103cd4d:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 103cd52:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 103cd57:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103cd5b:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 103cd64:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 103cd69:	e8 42 cb fc ff 	call	-210110 <_runtime.mallocgc>
 103cd6e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103cd73:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 103cd78:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103cd7d:	48 8d 14 08 	lea	rdx, [rax + rcx]
 103cd81:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103cd85:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 103cd8a:	48 29 ca 	sub	rdx, rcx
 103cd8d:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103cd92:	e8 29 6b 01 00 	call	92969 <_runtime.memclrNoHeapPointers>
 103cd97:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103cd9c:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 103cda1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103cda5:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 103cdaa:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103cdaf:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103cdb4:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103cdb9:	e8 92 6d 01 00 	call	93586 <_runtime.memmove>
 103cdbe:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103cdc3:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 103cdcb:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103cdd0:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 103cdd8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103cddd:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 103cde5:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 103cdea:	48 83 c4 60 	add	rsp, 96
 103cdee:	c3 	ret
 103cdef:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103cdf3:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 103cdf8:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 103cdfd:	e8 ae ca fc ff 	call	-210258 <_runtime.mallocgc>
 103ce02:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103ce07:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103ce0c:	48 85 c9 	test	rcx, rcx
 103ce0f:	76 8b 	jbe	-117 <_runtime.growslice+0x17c>
 103ce11:	80 3d e8 aa 0b 00 00 	cmp	byte ptr [rip + 764648], 0
 103ce18:	74 82 	je	-126 <_runtime.growslice+0x17c>
 103ce1a:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 103ce1f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ce23:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103ce28:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ce2d:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103ce32:	e8 89 13 fd ff 	call	-191607 <_runtime.bulkBarrierPreWriteSrcOnly>
 103ce37:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103ce3c:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103ce41:	e9 56 ff ff ff 	jmp	-170 <_runtime.growslice+0x17c>
 103ce46:	48 8d 9a 7f fc ff ff 	lea	rbx, [rdx - 897]
 103ce4d:	48 c1 eb 07 	shr	rbx, 7
 103ce51:	48 81 fb f9 00 00 00 	cmp	rbx, 249
 103ce58:	0f 83 32 04 00 00 	jae	1074 <_runtime.growslice+0x670>
 103ce5e:	48 8d 3d 3b e7 08 00 	lea	rdi, [rip + 583483]
 103ce65:	0f b6 1c 3b 	movzx	ebx, byte ptr [rbx + rdi]
 103ce69:	48 83 fb 43 	cmp	rbx, 67
 103ce6d:	0f 83 11 04 00 00 	jae	1041 <_runtime.growslice+0x664>
 103ce73:	48 8d 3d 86 e6 08 00 	lea	rdi, [rip + 583302]
 103ce7a:	0f b7 0c 5f 	movzx	ecx, word ptr [rdi + 2*rbx]
 103ce7e:	e9 8e fe ff ff 	jmp	-370 <_runtime.growslice+0xf1>
 103ce83:	48 8d 8a 00 20 00 00 	lea	rcx, [rdx + 8192]
 103ce8a:	48 39 d1 	cmp	rcx, rdx
 103ce8d:	73 08 	jae	8 <_runtime.growslice+0x277>
 103ce8f:	48 89 d1 	mov	rcx, rdx
 103ce92:	e9 7a fe ff ff 	jmp	-390 <_runtime.growslice+0xf1>
 103ce97:	90 	nop
 103ce98:	48 8d 8a ff 1f 00 00 	lea	rcx, [rdx + 8191]
 103ce9f:	48 81 e1 00 e0 ff ff 	and	rcx, -8192
 103cea6:	e9 66 fe ff ff 	jmp	-410 <_runtime.growslice+0xf1>
 103ceab:	48 83 ff 08 	cmp	rdi, 8
 103ceaf:	0f 85 e2 00 00 00 	jne	226 <_runtime.growslice+0x377>
 103ceb5:	48 89 d3 	mov	rbx, rdx
 103ceb8:	48 c1 e2 03 	shl	rdx, 3
 103cebc:	48 81 fa 00 80 00 00 	cmp	rdx, 32768
 103cec3:	0f 83 a9 00 00 00 	jae	169 <_runtime.growslice+0x352>
 103cec9:	48 81 fa f8 03 00 00 	cmp	rdx, 1016
 103ced0:	77 66 	ja	102 <_runtime.growslice+0x318>
 103ced2:	48 83 c2 07 	add	rdx, 7
 103ced6:	48 c1 ea 03 	shr	rdx, 3
 103ceda:	48 81 fa 81 00 00 00 	cmp	rdx, 129
 103cee1:	0f 83 90 03 00 00 	jae	912 <_runtime.growslice+0x657>
 103cee7:	48 8d 3d 72 e5 08 00 	lea	rdi, [rip + 583026]
 103ceee:	0f b6 14 3a 	movzx	edx, byte ptr [rdx + rdi]
 103cef2:	48 83 fa 43 	cmp	rdx, 67
 103cef6:	0f 83 6f 03 00 00 	jae	879 <_runtime.growslice+0x64b>
 103cefc:	48 8d 0d fd e5 08 00 	lea	rcx, [rip + 583165]
 103cf03:	0f b7 0c 51 	movzx	ecx, word ptr [rcx + 2*rdx]
 103cf07:	49 ba 00 00 00 00 00 20 00 00 	movabs	r10, 35184372088832
 103cf11:	4c 39 d3 	cmp	rbx, r10
 103cf14:	0f 97 c2 	seta	dl
 103cf17:	4c 89 cf 	mov	rdi, r9
 103cf1a:	49 c1 e1 03 	shl	r9, 3
 103cf1e:	48 c1 e0 03 	shl	rax, 3
 103cf22:	49 89 c8 	mov	r8, rcx
 103cf25:	49 c1 e8 03 	shr	r8, 3
 103cf29:	48 bb 00 00 00 00 00 00 01 00 	movabs	rbx, 281474976710656
 103cf33:	e9 ef fd ff ff 	jmp	-529 <_runtime.growslice+0x107>
 103cf38:	48 81 c2 7f fc ff ff 	add	rdx, -897
 103cf3f:	48 c1 ea 07 	shr	rdx, 7
 103cf43:	48 81 fa f9 00 00 00 	cmp	rdx, 249
 103cf4a:	0f 83 0e 03 00 00 	jae	782 <_runtime.growslice+0x63e>
 103cf50:	48 8d 3d 49 e6 08 00 	lea	rdi, [rip + 583241]
 103cf57:	0f b6 14 3a 	movzx	edx, byte ptr [rdx + rdi]
 103cf5b:	48 83 fa 43 	cmp	rdx, 67
 103cf5f:	0f 83 ed 02 00 00 	jae	749 <_runtime.growslice+0x632>
 103cf65:	48 8d 3d 94 e5 08 00 	lea	rdi, [rip + 583060]
 103cf6c:	0f b7 0c 57 	movzx	ecx, word ptr [rdi + 2*rdx]
 103cf70:	eb 95 	jmp	-107 <_runtime.growslice+0x2e7>
 103cf72:	48 8d 8a 00 20 00 00 	lea	rcx, [rdx + 8192]
 103cf79:	48 39 d1 	cmp	rcx, rdx
 103cf7c:	73 05 	jae	5 <_runtime.growslice+0x363>
 103cf7e:	48 89 d1 	mov	rcx, rdx
 103cf81:	eb 84 	jmp	-124 <_runtime.growslice+0x2e7>
 103cf83:	90 	nop
 103cf84:	48 8d 8a ff 1f 00 00 	lea	rcx, [rdx + 8191]
 103cf8b:	48 81 e1 00 e0 ff ff 	and	rcx, -8192
 103cf92:	e9 70 ff ff ff 	jmp	-144 <_runtime.growslice+0x2e7>
 103cf97:	48 8d 5f ff 	lea	rbx, [rdi - 1]
 103cf9b:	48 85 df 	test	rdi, rbx
 103cf9e:	0f 85 ee 00 00 00 	jne	238 <_runtime.growslice+0x472>
 103cfa4:	48 0f bc df 	bsf	rbx, rdi
 103cfa8:	48 89 d9 	mov	rcx, rbx
 103cfab:	4c 89 cf 	mov	rdi, r9
 103cfae:	49 d3 e1 	shl	r9, cl
 103cfb1:	48 d3 e0 	shl	rax, cl
 103cfb4:	49 89 d0 	mov	r8, rdx
 103cfb7:	48 d3 e2 	shl	rdx, cl
 103cfba:	48 81 fa 00 80 00 00 	cmp	rdx, 32768
 103cfc1:	0f 83 ab 00 00 00 	jae	171 <_runtime.growslice+0x452>
 103cfc7:	48 81 fa f8 03 00 00 	cmp	rdx, 1016
 103cfce:	77 66 	ja	102 <_runtime.growslice+0x416>
 103cfd0:	48 83 c2 07 	add	rdx, 7
 103cfd4:	48 c1 ea 03 	shr	rdx, 3
 103cfd8:	48 81 fa 81 00 00 00 	cmp	rdx, 129
 103cfdf:	0f 83 60 02 00 00 	jae	608 <_runtime.growslice+0x625>
 103cfe5:	4c 8d 15 74 e4 08 00 	lea	r10, [rip + 582772]
 103cfec:	42 0f b6 14 12 	movzx	edx, byte ptr [rdx + r10]
 103cff1:	48 83 fa 43 	cmp	rdx, 67
 103cff5:	0f 83 3e 02 00 00 	jae	574 <_runtime.growslice+0x619>
 103cffb:	4c 8d 15 fe e4 08 00 	lea	r10, [rip + 582910]
 103d002:	41 0f b7 14 52 	movzx	edx, word ptr [r10 + 2*rdx]
 103d007:	49 ba 00 00 00 00 00 00 01 00 	movabs	r10, 281474976710656
 103d011:	49 d3 ea 	shr	r10, cl
 103d014:	4d 39 d0 	cmp	r8, r10
 103d017:	41 0f 97 c2 	seta	r10b
 103d01b:	49 89 d0 	mov	r8, rdx
 103d01e:	49 d3 e8 	shr	r8, cl
 103d021:	48 bb 00 00 00 00 00 00 01 00 	movabs	rbx, 281474976710656
 103d02b:	48 89 d1 	mov	rcx, rdx
 103d02e:	44 89 d2 	mov	edx, r10d
 103d031:	e9 f1 fc ff ff 	jmp	-783 <_runtime.growslice+0x107>
 103d036:	48 81 c2 7f fc ff ff 	add	rdx, -897
 103d03d:	48 c1 ea 07 	shr	rdx, 7
 103d041:	48 81 fa f9 00 00 00 	cmp	rdx, 249
 103d048:	0f 83 de 01 00 00 	jae	478 <_runtime.growslice+0x60c>
 103d04e:	4c 8d 15 4b e5 08 00 	lea	r10, [rip + 582987]
 103d055:	41 0f b6 14 12 	movzx	edx, byte ptr [r10 + rdx]
 103d05a:	48 83 fa 43 	cmp	rdx, 67
 103d05e:	0f 83 bc 01 00 00 	jae	444 <_runtime.growslice+0x600>
 103d064:	4c 8d 15 95 e4 08 00 	lea	r10, [rip + 582805]
 103d06b:	41 0f b7 14 52 	movzx	edx, word ptr [r10 + 2*rdx]
 103d070:	eb 95 	jmp	-107 <_runtime.growslice+0x3e7>
 103d072:	4c 8d 92 00 20 00 00 	lea	r10, [rdx + 8192]
 103d079:	49 39 d2 	cmp	r10, rdx
 103d07c:	72 89 	jb	-119 <_runtime.growslice+0x3e7>
 103d07e:	90 	nop
 103d07f:	48 81 c2 ff 1f 00 00 	add	rdx, 8191
 103d086:	48 81 e2 00 e0 ff ff 	and	rdx, -8192
 103d08d:	e9 75 ff ff ff 	jmp	-139 <_runtime.growslice+0x3e7>
 103d092:	48 89 c1 	mov	rcx, rax
 103d095:	48 89 d0 	mov	rax, rdx
 103d098:	48 89 c3 	mov	rbx, rax
 103d09b:	48 f7 e7 	mul	rdi
 103d09e:	4c 89 ca 	mov	rdx, r9
 103d0a1:	4c 0f af cf 	imul	r9, rdi
 103d0a5:	48 0f af cf 	imul	rcx, rdi
 103d0a9:	48 3d 00 80 00 00 	cmp	rax, 32768
 103d0af:	0f 83 ae 00 00 00 	jae	174 <_runtime.growslice+0x543>
 103d0b5:	48 3d f8 03 00 00 	cmp	rax, 1016
 103d0bb:	77 6c 	ja	108 <_runtime.growslice+0x509>
 103d0bd:	48 83 c0 07 	add	rax, 7
 103d0c1:	48 c1 e8 03 	shr	rax, 3
 103d0c5:	48 3d 81 00 00 00 	cmp	rax, 129
 103d0cb:	0f 83 45 01 00 00 	jae	325 <_runtime.growslice+0x5f6>
 103d0d1:	4c 8d 05 88 e3 08 00 	lea	r8, [rip + 582536]
 103d0d8:	42 0f b6 04 00 	movzx	eax, byte ptr [rax + r8]
 103d0dd:	48 83 f8 43 	cmp	rax, 67
 103d0e1:	0f 83 25 01 00 00 	jae	293 <_runtime.growslice+0x5ec>
 103d0e7:	4c 8d 05 12 e4 08 00 	lea	r8, [rip + 582674]
 103d0ee:	45 0f b7 04 40 	movzx	r8d, word ptr [r8 + 2*rax]
 103d0f3:	4c 89 c0 	mov	rax, r8
 103d0f6:	49 89 d2 	mov	r10, rdx
 103d0f9:	31 d2 	xor	edx, edx
 103d0fb:	48 f7 f7 	div	rdi
 103d0fe:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 103d103:	48 89 d8 	mov	rax, rbx
 103d106:	48 f7 e7 	mul	rdi
 103d109:	0f 90 c2 	seto	dl
 103d10c:	48 bb 00 00 00 00 00 00 01 00 	movabs	rbx, 281474976710656
 103d116:	4c 89 d7 	mov	rdi, r10
 103d119:	48 89 c8 	mov	rax, rcx
 103d11c:	4c 89 c1 	mov	rcx, r8
 103d11f:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 103d124:	e9 fe fb ff ff 	jmp	-1026 <_runtime.growslice+0x107>
 103d129:	48 05 7f fc ff ff 	add	rax, -897
 103d12f:	48 c1 e8 07 	shr	rax, 7
 103d133:	48 3d f9 00 00 00 	cmp	rax, 249
 103d139:	0f 83 c3 00 00 00 	jae	195 <_runtime.growslice+0x5e2>
 103d13f:	4c 8d 05 5a e4 08 00 	lea	r8, [rip + 582746]
 103d146:	42 0f b6 04 00 	movzx	eax, byte ptr [rax + r8]
 103d14b:	48 83 f8 43 	cmp	rax, 67
 103d14f:	0f 83 a3 00 00 00 	jae	163 <_runtime.growslice+0x5d8>
 103d155:	4c 8d 15 a4 e3 08 00 	lea	r10, [rip + 582564]
 103d15c:	45 0f b7 04 42 	movzx	r8d, word ptr [r10 + 2*rax]
 103d161:	eb 90 	jmp	-112 <_runtime.growslice+0x4d3>
 103d163:	4c 8d 80 00 20 00 00 	lea	r8, [rax + 8192]
 103d16a:	49 39 c0 	cmp	r8, rax
 103d16d:	73 08 	jae	8 <_runtime.growslice+0x557>
 103d16f:	49 89 c0 	mov	r8, rax
 103d172:	e9 7c ff ff ff 	jmp	-132 <_runtime.growslice+0x4d3>
 103d177:	90 	nop
 103d178:	4c 8d 80 ff 1f 00 00 	lea	r8, [rax + 8191]
 103d17f:	49 81 e0 00 e0 ff ff 	and	r8, -8192
 103d186:	e9 68 ff ff ff 	jmp	-152 <_runtime.growslice+0x4d3>
 103d18b:	48 89 d0 	mov	rax, rdx
 103d18e:	48 89 da 	mov	rdx, rbx
 103d191:	e9 22 fb ff ff 	jmp	-1246 <_runtime.growslice+0x98>
 103d196:	48 89 d0 	mov	rax, rdx
 103d199:	4c 89 c2 	mov	rdx, r8
 103d19c:	e9 17 fb ff ff 	jmp	-1257 <_runtime.growslice+0x98>
 103d1a1:	48 89 d0 	mov	rax, rdx
 103d1a4:	4c 8b 4c 24 78 	mov	r9, qword ptr [rsp + 120]
 103d1a9:	e9 0a fb ff ff 	jmp	-1270 <_runtime.growslice+0x98>
 103d1ae:	48 8d 05 33 a7 0b 00 	lea	rax, [rip + 763699]
 103d1b5:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 103d1bd:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103d1c2:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 103d1ca:	48 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdx
 103d1d2:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 103d1d7:	48 83 c4 60 	add	rsp, 96
 103d1db:	c3 	ret
 103d1dc:	48 8d 05 5d 65 02 00 	lea	rax, [rip + 157021]
 103d1e3:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d1e7:	48 8d 05 82 68 04 00 	lea	rax, [rip + 288898]
 103d1ee:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103d1f3:	e8 c8 b3 fe ff 	call	-85048 <_runtime.gopanic>
 103d1f8:	b9 43 00 00 00 	mov	ecx, 67
 103d1fd:	e8 4e 61 01 00 	call	90446 <_runtime.panicIndex>
 103d202:	b9 f9 00 00 00 	mov	ecx, 249
 103d207:	e8 54 61 01 00 	call	90452 <_runtime.panicIndexU>
 103d20c:	b9 43 00 00 00 	mov	ecx, 67
 103d211:	e8 3a 61 01 00 	call	90426 <_runtime.panicIndex>
 103d216:	b9 81 00 00 00 	mov	ecx, 129
 103d21b:	e8 40 61 01 00 	call	90432 <_runtime.panicIndexU>
 103d220:	89 d0 	mov	eax, edx
 103d222:	b9 43 00 00 00 	mov	ecx, 67
 103d227:	e8 24 61 01 00 	call	90404 <_runtime.panicIndex>
 103d22c:	48 89 d0 	mov	rax, rdx
 103d22f:	b9 f9 00 00 00 	mov	ecx, 249
 103d234:	e8 27 61 01 00 	call	90407 <_runtime.panicIndexU>
 103d239:	89 d0 	mov	eax, edx
 103d23b:	b9 43 00 00 00 	mov	ecx, 67
 103d240:	e8 0b 61 01 00 	call	90379 <_runtime.panicIndex>
 103d245:	48 89 d0 	mov	rax, rdx
 103d248:	b9 81 00 00 00 	mov	ecx, 129
 103d24d:	e8 0e 61 01 00 	call	90382 <_runtime.panicIndexU>
 103d252:	89 d0 	mov	eax, edx
 103d254:	b9 43 00 00 00 	mov	ecx, 67
 103d259:	e8 f2 60 01 00 	call	90354 <_runtime.panicIndex>
 103d25e:	48 89 d0 	mov	rax, rdx
 103d261:	b9 f9 00 00 00 	mov	ecx, 249
 103d266:	e8 f5 60 01 00 	call	90357 <_runtime.panicIndexU>
 103d26b:	89 d0 	mov	eax, edx
 103d26d:	b9 43 00 00 00 	mov	ecx, 67
 103d272:	e8 d9 60 01 00 	call	90329 <_runtime.panicIndex>
 103d277:	48 89 d0 	mov	rax, rdx
 103d27a:	b9 81 00 00 00 	mov	ecx, 129
 103d27f:	e8 dc 60 01 00 	call	90332 <_runtime.panicIndexU>
 103d284:	89 d8 	mov	eax, ebx
 103d286:	b9 43 00 00 00 	mov	ecx, 67
 103d28b:	e8 c0 60 01 00 	call	90304 <_runtime.panicIndex>
 103d290:	48 89 d8 	mov	rax, rbx
 103d293:	b9 f9 00 00 00 	mov	ecx, 249
 103d298:	e8 c3 60 01 00 	call	90307 <_runtime.panicIndexU>
 103d29d:	89 d8 	mov	eax, ebx
 103d29f:	b9 43 00 00 00 	mov	ecx, 67
 103d2a4:	e8 a7 60 01 00 	call	90279 <_runtime.panicIndex>
 103d2a9:	48 89 d8 	mov	rax, rbx
 103d2ac:	b9 81 00 00 00 	mov	ecx, 129
 103d2b1:	e8 aa 60 01 00 	call	90282 <_runtime.panicIndexU>
 103d2b6:	48 8d 05 83 64 02 00 	lea	rax, [rip + 156803]
 103d2bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d2c1:	48 8d 05 98 67 04 00 	lea	rax, [rip + 288664]
 103d2c8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103d2cd:	e8 ee b2 fe ff 	call	-85266 <_runtime.gopanic>
 103d2d2:	90 	nop
 103d2d3:	e8 f8 38 01 00 	call	80120 <_runtime.morestack_noctxt>
 103d2d8:	e9 43 f9 ff ff 	jmp	-1725 <_runtime.growslice>
 103d2dd:	cc 	int3
 103d2de:	cc 	int3
 103d2df:	cc 	int3

_runtime.stackinit:
 103d2e0:	31 c0 	xor	eax, eax
 103d2e2:	eb 24 	jmp	36 <_runtime.stackinit+0x28>
 103d2e4:	48 89 c1 	mov	rcx, rax
 103d2e7:	48 c1 e0 06 	shl	rax, 6
 103d2eb:	48 8d 15 6e 12 09 00 	lea	rdx, [rip + 594542]
 103d2f2:	48 c7 44 02 08 00 00 00 00 	mov	qword ptr [rdx + rax + 8], 0
 103d2fb:	48 c7 44 02 10 00 00 00 00 	mov	qword ptr [rdx + rax + 16], 0
 103d304:	48 8d 41 01 	lea	rax, [rcx + 1]
 103d308:	48 83 f8 04 	cmp	rax, 4
 103d30c:	7c d6 	jl	-42 <_runtime.stackinit+0x4>
 103d30e:	31 c0 	xor	eax, eax
 103d310:	eb 23 	jmp	35 <_runtime.stackinit+0x55>
 103d312:	48 89 c1 	mov	rcx, rax
 103d315:	48 c1 e0 04 	shl	rax, 4
 103d319:	48 8d 15 c8 17 09 00 	lea	rdx, [rip + 595912]
 103d320:	48 c7 04 02 00 00 00 00 	mov	qword ptr [rdx + rax], 0
 103d328:	48 c7 44 02 08 00 00 00 00 	mov	qword ptr [rdx + rax + 8], 0
 103d331:	48 8d 41 01 	lea	rax, [rcx + 1]
 103d335:	48 83 f8 23 	cmp	rax, 35
 103d339:	7c d7 	jl	-41 <_runtime.stackinit+0x32>
 103d33b:	c3 	ret
 103d33c:	cc 	int3
 103d33d:	cc 	int3
 103d33e:	cc 	int3
 103d33f:	cc 	int3

_runtime.stacklog2:
 103d340:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103d345:	31 c9 	xor	ecx, ecx
 103d347:	eb 06 	jmp	6 <_runtime.stacklog2+0xf>
 103d349:	48 d1 e8 	shr	rax
 103d34c:	48 ff c1 	inc	rcx
 103d34f:	48 83 f8 01 	cmp	rax, 1
 103d353:	77 f4 	ja	-12 <_runtime.stacklog2+0x9>
 103d355:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103d35a:	c3 	ret
 103d35b:	cc 	int3
 103d35c:	cc 	int3
 103d35d:	cc 	int3
 103d35e:	cc 	int3
 103d35f:	cc 	int3

_runtime.stackpoolalloc:
 103d360:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103d369:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103d36d:	0f 86 a8 01 00 00 	jbe	424 <_runtime.stackpoolalloc+0x1bb>
 103d373:	48 83 ec 40 	sub	rsp, 64
 103d377:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 103d37c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 103d381:	0f b6 44 24 48 	movzx	eax, byte ptr [rsp + 72]
 103d386:	48 83 f8 04 	cmp	rax, 4
 103d38a:	0f 83 80 01 00 00 	jae	384 <_runtime.stackpoolalloc+0x1b0>
 103d390:	48 c1 e0 06 	shl	rax, 6
 103d394:	48 8d 15 c5 11 09 00 	lea	rdx, [rip + 594373]
 103d39b:	48 8d 1c 02 	lea	rbx, [rdx + rax]
 103d39f:	48 8d 5b 08 	lea	rbx, [rbx + 8]
 103d3a3:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 103d3a8:	48 8b 44 02 08 	mov	rax, qword ptr [rdx + rax + 8]
 103d3ad:	48 85 c0 	test	rax, rax
 103d3b0:	0f 85 a2 00 00 00 	jne	162 <_runtime.stackpoolalloc+0xf8>
 103d3b6:	48 8d 05 43 7c 0a 00 	lea	rax, [rip + 687171]
 103d3bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d3c1:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103d3ca:	48 8d 05 af b2 0b 00 	lea	rax, [rip + 766639]
 103d3d1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103d3d6:	e8 25 04 fe ff 	call	-130011 <_runtime.(*mheap).allocManual>
 103d3db:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103d3e0:	48 85 c0 	test	rax, rax
 103d3e3:	0f 84 0e 01 00 00 	je	270 <_runtime.stackpoolalloc+0x197>
 103d3e9:	66 83 78 60 00 	cmp	word ptr [rax + 96], 0
 103d3ee:	0f 85 ea 00 00 00 	jne	234 <_runtime.stackpoolalloc+0x17e>
 103d3f4:	48 8b 50 28 	mov	rdx, qword ptr [rax + 40]
 103d3f8:	48 85 d2 	test	rdx, rdx
 103d3fb:	0f 85 c4 00 00 00 	jne	196 <_runtime.stackpoolalloc+0x165>
 103d401:	0f b6 4c 24 48 	movzx	ecx, byte ptr [rsp + 72]
 103d406:	ba 00 08 00 00 	mov	edx, 2048
 103d40b:	48 d3 e2 	shl	rdx, cl
 103d40e:	48 89 50 68 	mov	qword ptr [rax + 104], rdx
 103d412:	31 c9 	xor	ecx, ecx
 103d414:	eb 1c 	jmp	28 <_runtime.stackpoolalloc+0xd2>
 103d416:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 103d41a:	48 01 ca 	add	rdx, rcx
 103d41d:	48 89 d3 	mov	rbx, rdx
 103d420:	48 8b 70 28 	mov	rsi, qword ptr [rax + 40]
 103d424:	48 89 32 	mov	qword ptr [rdx], rsi
 103d427:	48 89 58 28 	mov	qword ptr [rax + 40], rbx
 103d42b:	48 8b 50 68 	mov	rdx, qword ptr [rax + 104]
 103d42f:	48 01 d1 	add	rcx, rdx
 103d432:	48 81 f9 00 80 00 00 	cmp	rcx, 32768
 103d439:	72 db 	jb	-37 <_runtime.stackpoolalloc+0xb6>
 103d43b:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 103d440:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103d445:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103d449:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103d44e:	e8 8d 18 fe ff 	call	-124787 <_runtime.(*mSpanList).insert>
 103d453:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103d458:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 103d45c:	48 89 ca 	mov	rdx, rcx
 103d45f:	48 85 c9 	test	rcx, rcx
 103d462:	74 48 	je	72 <_runtime.stackpoolalloc+0x14c>
 103d464:	48 8b 09 	mov	rcx, qword ptr [rcx]
 103d467:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 103d46b:	0f b7 48 60 	movzx	ecx, word ptr [rax + 96]
 103d46f:	ff c1 	inc	ecx
 103d471:	66 89 48 60 	mov	word ptr [rax + 96], cx
 103d475:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 103d479:	48 85 c9 	test	rcx, rcx
 103d47c:	74 0f 	je	15 <_runtime.stackpoolalloc+0x12d>
 103d47e:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 103d483:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 103d488:	48 83 c4 40 	add	rsp, 64
 103d48c:	c3 	ret
 103d48d:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 103d492:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103d497:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103d49b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103d4a0:	e8 ab 16 fe ff 	call	-125269 <_runtime.(*mSpanList).remove>
 103d4a5:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 103d4aa:	eb d2 	jmp	-46 <_runtime.stackpoolalloc+0x11e>
 103d4ac:	48 8d 05 0f 75 03 00 	lea	rax, [rip + 226575]
 103d4b3:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d4b7:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 103d4c0:	e8 9b b8 fe ff 	call	-83813 <_runtime.throw>
 103d4c5:	48 8d 05 ab 69 03 00 	lea	rax, [rip + 223659]
 103d4cc:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d4d0:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 103d4d9:	e8 82 b8 fe ff 	call	-83838 <_runtime.throw>
 103d4de:	48 8d 05 7b 63 03 00 	lea	rax, [rip + 222075]
 103d4e5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d4e9:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 103d4f2:	e8 69 b8 fe ff 	call	-83863 <_runtime.throw>
 103d4f7:	48 8d 05 88 62 03 00 	lea	rax, [rip + 221832]
 103d4fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d502:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 103d50b:	e8 50 b8 fe ff 	call	-83888 <_runtime.throw>
 103d510:	b9 04 00 00 00 	mov	ecx, 4
 103d515:	e8 36 5e 01 00 	call	89654 <_runtime.panicIndex>
 103d51a:	90 	nop
 103d51b:	e8 b0 36 01 00 	call	79536 <_runtime.morestack_noctxt>
 103d520:	e9 3b fe ff ff 	jmp	-453 <_runtime.stackpoolalloc>
 103d525:	cc 	int3
 103d526:	cc 	int3
 103d527:	cc 	int3
 103d528:	cc 	int3
 103d529:	cc 	int3
 103d52a:	cc 	int3
 103d52b:	cc 	int3
 103d52c:	cc 	int3
 103d52d:	cc 	int3
 103d52e:	cc 	int3
 103d52f:	cc 	int3

_runtime.stackpoolfree:
 103d530:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103d539:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103d53d:	0f 86 79 01 00 00 	jbe	377 <_runtime.stackpoolfree+0x18c>
 103d543:	48 83 ec 28 	sub	rsp, 40
 103d547:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 103d54c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 103d551:	48 8b 15 78 7e 0b 00 	mov	rdx, qword ptr [rip + 753272]
 103d558:	84 02 	test	byte ptr [rdx], al
 103d55a:	90 	nop
 103d55b:	90 	nop
 103d55c:	48 bb 00 00 00 00 00 80 00 00 	movabs	rbx, 140737488355328
 103d566:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 103d56b:	48 8d 04 1e 	lea	rax, [rsi + rbx]
 103d56f:	48 c1 e8 1a 	shr	rax, 26
 103d573:	48 3d 00 00 40 00 	cmp	rax, 4194304
 103d579:	0f 83 32 01 00 00 	jae	306 <_runtime.stackpoolfree+0x181>
 103d57f:	48 8b 14 c2 	mov	rdx, qword ptr [rdx + 8*rax]
 103d583:	48 89 f3 	mov	rbx, rsi
 103d586:	48 c1 ee 0d 	shr	rsi, 13
 103d58a:	48 81 e6 ff 1f 00 00 	and	rsi, 8191
 103d591:	48 8b b4 f2 00 00 20 00 	mov	rsi, qword ptr [rdx + 8*rsi + 2097152]
 103d599:	84 02 	test	byte ptr [rdx], al
 103d59b:	8a 56 63 	mov	dl, byte ptr [rsi + 99]
 103d59e:	80 fa 02 	cmp	dl, 2
 103d5a1:	0f 85 f1 00 00 00 	jne	241 <_runtime.stackpoolfree+0x168>
 103d5a7:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 103d5ac:	48 8b 56 28 	mov	rdx, qword ptr [rsi + 40]
 103d5b0:	48 85 d2 	test	rdx, rdx
 103d5b3:	0f 84 90 00 00 00 	je	144 <_runtime.stackpoolfree+0x119>
 103d5b9:	48 89 da 	mov	rdx, rbx
 103d5bc:	48 8b 7e 28 	mov	rdi, qword ptr [rsi + 40]
 103d5c0:	48 89 3b 	mov	qword ptr [rbx], rdi
 103d5c3:	48 89 56 28 	mov	qword ptr [rsi + 40], rdx
 103d5c7:	0f b7 56 60 	movzx	edx, word ptr [rsi + 96]
 103d5cb:	8d 5a ff 	lea	ebx, [rdx - 1]
 103d5ce:	66 89 5e 60 	mov	word ptr [rsi + 96], bx
 103d5d2:	83 3d c3 a1 0b 00 00 	cmp	dword ptr [rip + 762307], 0
 103d5d9:	75 64 	jne	100 <_runtime.stackpoolfree+0x10f>
 103d5db:	66 83 fa 01 	cmp	dx, 1
 103d5df:	75 5e 	jne	94 <_runtime.stackpoolfree+0x10f>
 103d5e1:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 103d5e6:	48 83 f8 04 	cmp	rax, 4
 103d5ea:	0f 83 94 00 00 00 	jae	148 <_runtime.stackpoolfree+0x154>
 103d5f0:	48 c1 e0 06 	shl	rax, 6
 103d5f4:	48 8d 0d 65 0f 09 00 	lea	rcx, [rip + 593765]
 103d5fb:	48 8d 04 01 	lea	rax, [rcx + rax]
 103d5ff:	48 8d 40 08 	lea	rax, [rax + 8]
 103d603:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d607:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 103d60c:	e8 3f 15 fe ff 	call	-125633 <_runtime.(*mSpanList).remove>
 103d611:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103d616:	48 c7 40 28 00 00 00 00 	mov	qword ptr [rax + 40], 0
 103d61e:	48 8d 0d db 79 0a 00 	lea	rcx, [rip + 686555]
 103d625:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103d629:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103d62e:	48 8d 05 4b b0 0b 00 	lea	rax, [rip + 766027]
 103d635:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103d63a:	e8 e1 10 fe ff 	call	-126751 <_runtime.(*mheap).freeManual>
 103d63f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 103d644:	48 83 c4 28 	add	rsp, 40
 103d648:	c3 	ret
 103d649:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 103d64e:	48 83 f8 04 	cmp	rax, 4
 103d652:	73 3a 	jae	58 <_runtime.stackpoolfree+0x15e>
 103d654:	48 c1 e0 06 	shl	rax, 6
 103d658:	48 8d 15 01 0f 09 00 	lea	rdx, [rip + 593665]
 103d65f:	48 8d 04 02 	lea	rax, [rdx + rax]
 103d663:	48 8d 40 08 	lea	rax, [rax + 8]
 103d667:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d66b:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 103d670:	e8 6b 16 fe ff 	call	-125333 <_runtime.(*mSpanList).insert>
 103d675:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 103d67a:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 103d67f:	e9 35 ff ff ff 	jmp	-203 <_runtime.stackpoolfree+0x89>
 103d684:	b9 04 00 00 00 	mov	ecx, 4
 103d689:	e8 c2 5c 01 00 	call	89282 <_runtime.panicIndex>
 103d68e:	b9 04 00 00 00 	mov	ecx, 4
 103d693:	e8 b8 5c 01 00 	call	89272 <_runtime.panicIndex>
 103d698:	48 8d 05 a6 87 03 00 	lea	rax, [rip + 231334]
 103d69f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d6a3:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 103d6ac:	e8 af b6 fe ff 	call	-84305 <_runtime.throw>
 103d6b1:	b9 00 00 40 00 	mov	ecx, 4194304
 103d6b6:	e8 a5 5c 01 00 	call	89253 <_runtime.panicIndexU>
 103d6bb:	90 	nop
 103d6bc:	e8 0f 35 01 00 	call	79119 <_runtime.morestack_noctxt>
 103d6c1:	e9 6a fe ff ff 	jmp	-406 <_runtime.stackpoolfree>
 103d6c6:	cc 	int3
 103d6c7:	cc 	int3
 103d6c8:	cc 	int3
 103d6c9:	cc 	int3
 103d6ca:	cc 	int3
 103d6cb:	cc 	int3
 103d6cc:	cc 	int3
 103d6cd:	cc 	int3
 103d6ce:	cc 	int3
 103d6cf:	cc 	int3

_runtime.stackcacherefill:
 103d6d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103d6d9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 103d6dd:	0f 86 da 00 00 00 	jbe	218 <_runtime.stackcacherefill+0xed>
 103d6e3:	48 83 ec 30 	sub	rsp, 48
 103d6e7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 103d6ec:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 103d6f1:	0f b6 44 24 40 	movzx	eax, byte ptr [rsp + 64]
 103d6f6:	48 83 f8 04 	cmp	rax, 4
 103d6fa:	0f 83 b2 00 00 00 	jae	178 <_runtime.stackcacherefill+0xe2>
 103d700:	48 c1 e0 06 	shl	rax, 6
 103d704:	48 8d 15 55 0e 09 00 	lea	rdx, [rip + 593493]
 103d70b:	48 8d 04 02 	lea	rax, [rdx + rax]
 103d70f:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 103d714:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d718:	e8 13 aa fc ff 	call	-218605 <_runtime.lock>
 103d71d:	31 c0 	xor	eax, eax
 103d71f:	31 c9 	xor	ecx, ecx
 103d721:	eb 3b 	jmp	59 <_runtime.stackcacherefill+0x8e>
 103d723:	0f b6 44 24 40 	movzx	eax, byte ptr [rsp + 64]
 103d728:	88 04 24 	mov	byte ptr [rsp], al
 103d72b:	e8 30 fc ff ff 	call	-976 <_runtime.stackpoolalloc>
 103d730:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103d735:	48 89 c1 	mov	rcx, rax
 103d738:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 103d73d:	48 89 10 	mov	qword ptr [rax], rdx
 103d740:	48 89 c8 	mov	rax, rcx
 103d743:	0f b6 4c 24 40 	movzx	ecx, byte ptr [rsp + 64]
 103d748:	ba 00 08 00 00 	mov	edx, 2048
 103d74d:	48 d3 e2 	shl	rdx, cl
 103d750:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 103d755:	48 01 da 	add	rdx, rbx
 103d758:	48 89 c1 	mov	rcx, rax
 103d75b:	48 89 d0 	mov	rax, rdx
 103d75e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103d763:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 103d768:	48 3d 00 40 00 00 	cmp	rax, 16384
 103d76e:	72 b3 	jb	-77 <_runtime.stackcacherefill+0x53>
 103d770:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103d775:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d779:	e8 92 ab fc ff 	call	-218222 <_runtime.unlock>
 103d77e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103d783:	84 00 	test	byte ptr [rax], al
 103d785:	0f b6 4c 24 40 	movzx	ecx, byte ptr [rsp + 64]
 103d78a:	48 c1 e1 04 	shl	rcx, 4
 103d78e:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 103d793:	48 89 94 08 58 04 00 00 	mov	qword ptr [rax + rcx + 1112], rdx
 103d79b:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 103d7a0:	48 89 94 08 60 04 00 00 	mov	qword ptr [rax + rcx + 1120], rdx
 103d7a8:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 103d7ad:	48 83 c4 30 	add	rsp, 48
 103d7b1:	c3 	ret
 103d7b2:	b9 04 00 00 00 	mov	ecx, 4
 103d7b7:	e8 94 5b 01 00 	call	88980 <_runtime.panicIndex>
 103d7bc:	90 	nop
 103d7bd:	e8 3e 2f 00 00 	call	12094 <_runtime.morestackc>
 103d7c2:	e9 09 ff ff ff 	jmp	-247 <_runtime.stackcacherefill>
 103d7c7:	cc 	int3
 103d7c8:	cc 	int3
 103d7c9:	cc 	int3
 103d7ca:	cc 	int3
 103d7cb:	cc 	int3
 103d7cc:	cc 	int3
 103d7cd:	cc 	int3
 103d7ce:	cc 	int3
 103d7cf:	cc 	int3

_runtime.stackcacherelease:
 103d7d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103d7d9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 103d7dd:	0f 86 05 01 00 00 	jbe	261 <_runtime.stackcacherelease+0x118>
 103d7e3:	48 83 ec 48 	sub	rsp, 72
 103d7e7:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 103d7ec:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 103d7f1:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 103d7f6:	84 02 	test	byte ptr [rdx], al
 103d7f8:	0f b6 44 24 58 	movzx	eax, byte ptr [rsp + 88]
 103d7fd:	48 83 f8 04 	cmp	rax, 4
 103d801:	0f 83 d6 00 00 00 	jae	214 <_runtime.stackcacherelease+0x10d>
 103d807:	89 c1 	mov	ecx, eax
 103d809:	48 c1 e0 04 	shl	rax, 4
 103d80d:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103d812:	48 8b 9c 02 58 04 00 00 	mov	rbx, qword ptr [rdx + rax + 1112]
 103d81a:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 103d81f:	48 8b b4 02 60 04 00 00 	mov	rsi, qword ptr [rdx + rax + 1120]
 103d827:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 103d82c:	48 c1 e1 06 	shl	rcx, 6
 103d830:	4c 8d 05 29 0d 09 00 	lea	r8, [rip + 593193]
 103d837:	49 8d 0c 08 	lea	rcx, [r8 + rcx]
 103d83b:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 103d840:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103d844:	e8 e7 a8 fc ff 	call	-218905 <_runtime.lock>
 103d849:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103d84e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 103d853:	eb 3a 	jmp	58 <_runtime.stackcacherelease+0xbf>
 103d855:	48 89 c8 	mov	rax, rcx
 103d858:	48 8b 09 	mov	rcx, qword ptr [rcx]
 103d85b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103d860:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d864:	0f b6 44 24 58 	movzx	eax, byte ptr [rsp + 88]
 103d869:	88 44 24 08 	mov	byte ptr [rsp + 8], al
 103d86d:	e8 be fc ff ff 	call	-834 <_runtime.stackpoolfree>
 103d872:	0f b6 4c 24 58 	movzx	ecx, byte ptr [rsp + 88]
 103d877:	b8 00 08 00 00 	mov	eax, 2048
 103d87c:	48 d3 e0 	shl	rax, cl
 103d87f:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 103d884:	48 29 c2 	sub	rdx, rax
 103d887:	48 89 d0 	mov	rax, rdx
 103d88a:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103d88f:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 103d894:	48 3d 00 40 00 00 	cmp	rax, 16384
 103d89a:	77 b9 	ja	-71 <_runtime.stackcacherelease+0x85>
 103d89c:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103d8a1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103d8a6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103d8aa:	e8 61 aa fc ff 	call	-218527 <_runtime.unlock>
 103d8af:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103d8b4:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103d8b9:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 103d8be:	48 89 8c 02 58 04 00 00 	mov	qword ptr [rdx + rax + 1112], rcx
 103d8c6:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103d8cb:	48 89 8c 02 60 04 00 00 	mov	qword ptr [rdx + rax + 1120], rcx
 103d8d3:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 103d8d8:	48 83 c4 48 	add	rsp, 72
 103d8dc:	c3 	ret
 103d8dd:	b9 04 00 00 00 	mov	ecx, 4
 103d8e2:	e8 69 5a 01 00 	call	88681 <_runtime.panicIndex>
 103d8e7:	90 	nop
 103d8e8:	e8 13 2e 00 00 	call	11795 <_runtime.morestackc>
 103d8ed:	e9 de fe ff ff 	jmp	-290 <_runtime.stackcacherelease>
 103d8f2:	cc 	int3
 103d8f3:	cc 	int3
 103d8f4:	cc 	int3
 103d8f5:	cc 	int3
 103d8f6:	cc 	int3
 103d8f7:	cc 	int3
 103d8f8:	cc 	int3
 103d8f9:	cc 	int3
 103d8fa:	cc 	int3
 103d8fb:	cc 	int3
 103d8fc:	cc 	int3
 103d8fd:	cc 	int3
 103d8fe:	cc 	int3
 103d8ff:	cc 	int3

_runtime.stackcache_clear:
 103d900:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103d909:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 103d90d:	0f 86 c9 00 00 00 	jbe	201 <_runtime.stackcache_clear+0xdc>
 103d913:	48 83 ec 38 	sub	rsp, 56
 103d917:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 103d91c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 103d921:	31 c0 	xor	eax, eax
 103d923:	eb 5e 	jmp	94 <_runtime.stackcache_clear+0x83>
 103d925:	48 8b 02 	mov	rax, qword ptr [rdx]
 103d928:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103d92d:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 103d931:	0f b6 4c 24 17 	movzx	ecx, byte ptr [rsp + 23]
 103d936:	88 4c 24 08 	mov	byte ptr [rsp + 8], cl
 103d93a:	e8 f1 fb ff ff 	call	-1039 <_runtime.stackpoolfree>
 103d93f:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103d944:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103d949:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 103d94e:	48 89 d3 	mov	rbx, rdx
 103d951:	48 85 d2 	test	rdx, rdx
 103d954:	75 cf 	jne	-49 <_runtime.stackcache_clear+0x25>
 103d956:	48 c7 84 08 58 04 00 00 00 00 00 00 	mov	qword ptr [rax + rcx + 1112], 0
 103d962:	48 c7 84 08 60 04 00 00 00 00 00 00 	mov	qword ptr [rax + rcx + 1120], 0
 103d96e:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103d973:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103d977:	e8 94 a9 fc ff 	call	-218732 <_runtime.unlock>
 103d97c:	0f b6 44 24 17 	movzx	eax, byte ptr [rsp + 23]
 103d981:	ff c0 	inc	eax
 103d983:	3c 04 	cmp	al, 4
 103d985:	73 4b 	jae	75 <_runtime.stackcache_clear+0xd2>
 103d987:	88 44 24 17 	mov	byte ptr [rsp + 23], al
 103d98b:	0f b6 c8 	movzx	ecx, al
 103d98e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103d993:	48 c1 e1 06 	shl	rcx, 6
 103d997:	48 8d 1d c2 0b 09 00 	lea	rbx, [rip + 592834]
 103d99e:	48 8d 0c 0b 	lea	rcx, [rbx + rcx]
 103d9a2:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103d9a7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103d9ab:	e8 80 a7 fc ff 	call	-219264 <_runtime.lock>
 103d9b0:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103d9b5:	84 00 	test	byte ptr [rax], al
 103d9b7:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103d9bc:	48 c1 e1 04 	shl	rcx, 4
 103d9c0:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103d9c5:	48 8b 94 08 58 04 00 00 	mov	rdx, qword ptr [rax + rcx + 1112]
 103d9cd:	e9 7c ff ff ff 	jmp	-132 <_runtime.stackcache_clear+0x4e>
 103d9d2:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 103d9d7:	48 83 c4 38 	add	rsp, 56
 103d9db:	c3 	ret
 103d9dc:	e8 1f 2d 00 00 	call	11551 <_runtime.morestackc>
 103d9e1:	e9 1a ff ff ff 	jmp	-230 <_runtime.stackcache_clear>
 103d9e6:	cc 	int3
 103d9e7:	cc 	int3
 103d9e8:	cc 	int3
 103d9e9:	cc 	int3
 103d9ea:	cc 	int3
 103d9eb:	cc 	int3
 103d9ec:	cc 	int3
 103d9ed:	cc 	int3
 103d9ee:	cc 	int3
 103d9ef:	cc 	int3

_runtime.stackalloc:
 103d9f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103d9f9:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 103d9fd:	0f 86 20 03 00 00 	jbe	800 <_runtime.stackalloc+0x333>
 103da03:	48 83 ec 70 	sub	rsp, 112
 103da07:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 103da0c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 103da11:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 103da1a:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103da1e:	48 39 13 	cmp	qword ptr [rbx], rdx
 103da21:	0f 85 e2 02 00 00 	jne	738 <_runtime.stackalloc+0x319>
 103da27:	8b 54 24 78 	mov	edx, dword ptr [rsp + 120]
 103da2b:	8d 72 ff 	lea	esi, [rdx - 1]
 103da2e:	85 d6 	test	esi, edx
 103da30:	0f 85 ba 02 00 00 	jne	698 <_runtime.stackalloc+0x300>
 103da36:	83 3d 0f a0 0b 00 00 	cmp	dword ptr [rip + 761871], 0
 103da3d:	0f 85 fa 01 00 00 	jne	506 <_runtime.stackalloc+0x24d>
 103da43:	81 fa 00 80 00 00 	cmp	edx, 32768
 103da49:	0f 83 17 01 00 00 	jae	279 <_runtime.stackalloc+0x176>
 103da4f:	89 d0 	mov	eax, edx
 103da51:	31 c9 	xor	ecx, ecx
 103da53:	eb 04 	jmp	4 <_runtime.stackalloc+0x69>
 103da55:	ff c1 	inc	ecx
 103da57:	d1 ea 	shr	edx
 103da59:	81 fa 00 08 00 00 	cmp	edx, 2048
 103da5f:	77 f4 	ja	-12 <_runtime.stackalloc+0x65>
 103da61:	48 8b 93 60 01 00 00 	mov	rdx, qword ptr [rbx + 352]
 103da68:	48 85 d2 	test	rdx, rdx
 103da6b:	74 0a 	je	10 <_runtime.stackalloc+0x87>
 103da6d:	48 83 bb 00 01 00 00 00 	cmp	qword ptr [rbx + 256], 0
 103da75:	74 79 	je	121 <_runtime.stackalloc+0x100>
 103da77:	0f b6 d1 	movzx	edx, cl
 103da7a:	48 83 fa 04 	cmp	rdx, 4
 103da7e:	0f 83 46 02 00 00 	jae	582 <_runtime.stackalloc+0x2da>
 103da84:	88 4c 24 27 	mov	byte ptr [rsp + 39], cl
 103da88:	48 c1 e2 06 	shl	rdx, 6
 103da8c:	48 8d 05 cd 0a 09 00 	lea	rax, [rip + 592589]
 103da93:	48 8d 04 10 	lea	rax, [rax + rdx]
 103da97:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 103da9c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103daa0:	e8 8b a6 fc ff 	call	-219509 <_runtime.lock>
 103daa5:	0f b6 44 24 27 	movzx	eax, byte ptr [rsp + 39]
 103daaa:	88 04 24 	mov	byte ptr [rsp], al
 103daad:	e8 ae f8 ff ff 	call	-1874 <_runtime.stackpoolalloc>
 103dab2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103dab7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 103dabc:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 103dac1:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103dac5:	e8 46 a8 fc ff 	call	-219066 <_runtime.unlock>
 103daca:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103dacf:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 103dad7:	8b 4c 24 78 	mov	ecx, dword ptr [rsp + 120]
 103dadb:	48 01 c8 	add	rax, rcx
 103dade:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 103dae6:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103daeb:	48 83 c4 70 	add	rsp, 112
 103daef:	c3 	ret
 103daf0:	0f b6 d9 	movzx	ebx, cl
 103daf3:	48 83 fb 04 	cmp	rbx, 4
 103daf7:	0f 83 c0 01 00 00 	jae	448 <_runtime.stackalloc+0x2cd>
 103dafd:	48 c1 e3 04 	shl	rbx, 4
 103db01:	48 8b b4 1a 58 04 00 00 	mov	rsi, qword ptr [rdx + rbx + 1112]
 103db09:	48 89 f7 	mov	rdi, rsi
 103db0c:	48 85 f6 	test	rsi, rsi
 103db0f:	74 26 	je	38 <_runtime.stackalloc+0x147>
 103db11:	48 89 f9 	mov	rcx, rdi
 103db14:	48 8b 37 	mov	rsi, qword ptr [rdi]
 103db17:	48 89 b4 1a 58 04 00 00 	mov	qword ptr [rdx + rbx + 1112], rsi
 103db1f:	48 8b b4 1a 60 04 00 00 	mov	rsi, qword ptr [rdx + rbx + 1120]
 103db27:	48 29 c6 	sub	rsi, rax
 103db2a:	48 89 b4 1a 60 04 00 00 	mov	qword ptr [rdx + rbx + 1120], rsi
 103db32:	48 89 c8 	mov	rax, rcx
 103db35:	eb 98 	jmp	-104 <_runtime.stackalloc+0xdf>
 103db37:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 103db3c:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 103db41:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103db45:	88 4c 24 08 	mov	byte ptr [rsp + 8], cl
 103db49:	e8 82 fb ff ff 	call	-1150 <_runtime.stackcacherefill>
 103db4e:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 103db53:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 103db58:	48 8b bc 1a 58 04 00 00 	mov	rdi, qword ptr [rdx + rbx + 1112]
 103db60:	8b 44 24 78 	mov	eax, dword ptr [rsp + 120]
 103db64:	eb ab 	jmp	-85 <_runtime.stackalloc+0x121>
 103db66:	48 c1 ea 0d 	shr	rdx, 13
 103db6a:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 103db6f:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103db73:	e8 c8 f7 ff ff 	call	-2104 <_runtime.stacklog2>
 103db78:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103db7d:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103db82:	48 8d 0d 57 0f 09 00 	lea	rcx, [rip + 593751]
 103db89:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103db8d:	e8 9e a5 fc ff 	call	-219746 <_runtime.lock>
 103db92:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103db97:	48 83 f8 23 	cmp	rax, 35
 103db9b:	0f 83 12 01 00 00 	jae	274 <_runtime.stackalloc+0x2c3>
 103dba1:	48 c1 e0 04 	shl	rax, 4
 103dba5:	48 8d 0d 3c 0f 09 00 	lea	rcx, [rip + 593724]
 103dbac:	48 8b 14 01 	mov	rdx, qword ptr [rcx + rax]
 103dbb0:	48 85 d2 	test	rdx, rdx
 103dbb3:	75 68 	jne	104 <_runtime.stackalloc+0x22d>
 103dbb5:	31 c0 	xor	eax, eax
 103dbb7:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 103dbbc:	48 8d 0d 1d 0f 09 00 	lea	rcx, [rip + 593693]
 103dbc3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103dbc7:	e8 44 a7 fc ff 	call	-219324 <_runtime.unlock>
 103dbcc:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103dbd1:	48 85 c0 	test	rax, rax
 103dbd4:	74 09 	je	9 <_runtime.stackalloc+0x1ef>
 103dbd6:	48 8b 40 18 	mov	rax, qword ptr [rax + 24]
 103dbda:	e9 f0 fe ff ff 	jmp	-272 <_runtime.stackalloc+0xdf>
 103dbdf:	48 8d 05 1a 74 0a 00 	lea	rax, [rip + 685082]
 103dbe6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dbea:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103dbef:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103dbf4:	48 8d 05 85 aa 0b 00 	lea	rax, [rip + 764549]
 103dbfb:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103dc00:	e8 fb fb fd ff 	call	-132101 <_runtime.(*mheap).allocManual>
 103dc05:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103dc0a:	48 85 c0 	test	rax, rax
 103dc0d:	0f 84 87 00 00 00 	je	135 <_runtime.stackalloc+0x2aa>
 103dc13:	8b 4c 24 78 	mov	ecx, dword ptr [rsp + 120]
 103dc17:	48 89 48 68 	mov	qword ptr [rax + 104], rcx
 103dc1b:	eb b9 	jmp	-71 <_runtime.stackalloc+0x1e6>
 103dc1d:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 103dc22:	48 01 c8 	add	rax, rcx
 103dc25:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dc29:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103dc2e:	e8 1d 0f fe ff 	call	-127203 <_runtime.(*mSpanList).remove>
 103dc33:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103dc38:	e9 7a ff ff ff 	jmp	-134 <_runtime.stackalloc+0x1c7>
 103dc3d:	48 8b 05 54 9c 0b 00 	mov	rax, qword ptr [rip + 760916]
 103dc44:	48 8d 0c 10 	lea	rcx, [rax + rdx]
 103dc48:	48 8d 49 ff 	lea	rcx, [rcx - 1]
 103dc4c:	48 f7 d8 	neg	rax
 103dc4f:	48 21 c1 	and	rcx, rax
 103dc52:	89 c8 	mov	eax, ecx
 103dc54:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 103dc59:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dc5d:	48 8d 0d 24 aa 0b 00 	lea	rcx, [rip + 764452]
 103dc64:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103dc69:	e8 52 32 fd ff 	call	-183726 <_runtime.sysAlloc>
 103dc6e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103dc73:	48 85 c0 	test	rax, rax
 103dc76:	74 5f 	je	95 <_runtime.stackalloc+0x2e7>
 103dc78:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 103dc80:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103dc85:	48 01 c8 	add	rax, rcx
 103dc88:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 103dc90:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103dc95:	48 83 c4 70 	add	rsp, 112
 103dc99:	c3 	ret
 103dc9a:	48 8d 05 e5 5a 03 00 	lea	rax, [rip + 219877]
 103dca1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dca5:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 103dcae:	e8 ad b0 fe ff 	call	-85843 <_runtime.throw>
 103dcb3:	b9 23 00 00 00 	mov	ecx, 35
 103dcb8:	e8 93 56 01 00 	call	87699 <_runtime.panicIndex>
 103dcbd:	48 89 d8 	mov	rax, rbx
 103dcc0:	b9 04 00 00 00 	mov	ecx, 4
 103dcc5:	e8 86 56 01 00 	call	87686 <_runtime.panicIndex>
 103dcca:	48 89 d0 	mov	rax, rdx
 103dccd:	b9 04 00 00 00 	mov	ecx, 4
 103dcd2:	e8 79 56 01 00 	call	87673 <_runtime.panicIndex>
 103dcd7:	48 8d 05 b5 71 03 00 	lea	rax, [rip + 225717]
 103dcde:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dce2:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 103dceb:	e8 70 b0 fe ff 	call	-85904 <_runtime.throw>
 103dcf0:	48 8d 05 8a 74 03 00 	lea	rax, [rip + 226442]
 103dcf7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dcfb:	48 c7 44 24 08 1b 00 00 00 	mov	qword ptr [rsp + 8], 27
 103dd04:	e8 57 b0 fe ff 	call	-85929 <_runtime.throw>
 103dd09:	48 8d 05 c1 82 03 00 	lea	rax, [rip + 230081]
 103dd10:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dd14:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 103dd1d:	e8 3e b0 fe ff 	call	-85954 <_runtime.throw>
 103dd22:	90 	nop
 103dd23:	e8 d8 29 00 00 	call	10712 <_runtime.morestackc>
 103dd28:	e9 c3 fc ff ff 	jmp	-829 <_runtime.stackalloc>
 103dd2d:	cc 	int3
 103dd2e:	cc 	int3
 103dd2f:	cc 	int3

_runtime.stackfree:
 103dd30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103dd39:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 103dd3d:	0f 86 45 03 00 00 	jbe	837 <_runtime.stackfree+0x358>
 103dd43:	48 83 c4 80 	add	rsp, -128
 103dd47:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 103dd4c:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 103dd51:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 103dd5a:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 103dd62:	48 89 de 	mov	rsi, rbx
 103dd65:	48 8b bc 24 90 00 00 00 	mov	rdi, qword ptr [rsp + 144]
 103dd6d:	49 89 f8 	mov	r8, rdi
 103dd70:	48 29 f7 	sub	rdi, rsi
 103dd73:	4c 8d 4f ff 	lea	r9, [rdi - 1]
 103dd77:	4c 85 cf 	test	rdi, r9
 103dd7a:	0f 85 ee 02 00 00 	jne	750 <_runtime.stackfree+0x33e>
 103dd80:	4c 8d 0c 3e 	lea	r9, [rsi + rdi]
 103dd84:	4d 39 c1 	cmp	r9, r8
 103dd87:	0f 82 c8 02 00 00 	jb	712 <_runtime.stackfree+0x325>
 103dd8d:	83 3d b8 9c 0b 00 00 	cmp	dword ptr [rip + 761016], 0
 103dd94:	0f 85 07 02 00 00 	jne	519 <_runtime.stackfree+0x271>
 103dd9a:	48 81 ff 00 80 00 00 	cmp	rdi, 32768
 103dda1:	0f 83 11 01 00 00 	jae	273 <_runtime.stackfree+0x188>
 103dda7:	48 89 f8 	mov	rax, rdi
 103ddaa:	31 c9 	xor	ecx, ecx
 103ddac:	eb 05 	jmp	5 <_runtime.stackfree+0x83>
 103ddae:	ff c1 	inc	ecx
 103ddb0:	48 d1 ef 	shr	rdi
 103ddb3:	48 81 ff 00 08 00 00 	cmp	rdi, 2048
 103ddba:	77 f2 	ja	-14 <_runtime.stackfree+0x7e>
 103ddbc:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 103ddc0:	48 8b 9a 60 01 00 00 	mov	rbx, qword ptr [rdx + 352]
 103ddc7:	48 85 db 	test	rbx, rbx
 103ddca:	74 0a 	je	10 <_runtime.stackfree+0xa6>
 103ddcc:	48 83 ba 00 01 00 00 00 	cmp	qword ptr [rdx + 256], 0
 103ddd4:	74 60 	je	96 <_runtime.stackfree+0x106>
 103ddd6:	0f b6 c1 	movzx	eax, cl
 103ddd9:	48 83 f8 04 	cmp	rax, 4
 103dddd:	0f 83 68 02 00 00 	jae	616 <_runtime.stackfree+0x31b>
 103dde3:	88 4c 24 37 	mov	byte ptr [rsp + 55], cl
 103dde7:	48 c1 e0 06 	shl	rax, 6
 103ddeb:	48 8d 0d 6e 07 09 00 	lea	rcx, [rip + 591726]
 103ddf2:	48 8d 04 01 	lea	rax, [rcx + rax]
 103ddf6:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 103ddfb:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ddff:	e8 2c a3 fc ff 	call	-220372 <_runtime.lock>
 103de04:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103de0c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103de10:	0f b6 44 24 37 	movzx	eax, byte ptr [rsp + 55]
 103de15:	88 44 24 08 	mov	byte ptr [rsp + 8], al
 103de19:	e8 12 f7 ff ff 	call	-2286 <_runtime.stackpoolfree>
 103de1e:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103de23:	48 89 04 24 	mov	qword ptr [rsp], rax
 103de27:	e8 e4 a4 fc ff 	call	-219932 <_runtime.unlock>
 103de2c:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 103de31:	48 83 ec 80 	sub	rsp, -128
 103de35:	c3 	ret
 103de36:	0f b6 d1 	movzx	edx, cl
 103de39:	48 83 fa 04 	cmp	rdx, 4
 103de3d:	0f 83 fb 01 00 00 	jae	507 <_runtime.stackfree+0x30e>
 103de43:	48 c1 e2 04 	shl	rdx, 4
 103de47:	48 8b bc 13 60 04 00 00 	mov	rdi, qword ptr [rbx + rdx + 1120]
 103de4f:	48 81 ff 00 80 00 00 	cmp	rdi, 32768
 103de56:	73 2b 	jae	43 <_runtime.stackfree+0x153>
 103de58:	48 89 f1 	mov	rcx, rsi
 103de5b:	48 8b bc 13 58 04 00 00 	mov	rdi, qword ptr [rbx + rdx + 1112]
 103de63:	48 89 3e 	mov	qword ptr [rsi], rdi
 103de66:	48 89 8c 13 58 04 00 00 	mov	qword ptr [rbx + rdx + 1112], rcx
 103de6e:	48 8b 8c 13 60 04 00 00 	mov	rcx, qword ptr [rbx + rdx + 1120]
 103de76:	48 01 c8 	add	rax, rcx
 103de79:	48 89 84 13 60 04 00 00 	mov	qword ptr [rbx + rdx + 1120], rax
 103de81:	eb a9 	jmp	-87 <_runtime.stackfree+0xfc>
 103de83:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 103de88:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 103de8d:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 103de92:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 103de96:	88 4c 24 08 	mov	byte ptr [rsp + 8], cl
 103de9a:	e8 31 f9 ff ff 	call	-1743 <_runtime.stackcacherelease>
 103de9f:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103dea4:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 103dea9:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 103deae:	48 8b b4 24 88 00 00 00 	mov	rsi, qword ptr [rsp + 136]
 103deb6:	eb a0 	jmp	-96 <_runtime.stackfree+0x128>
 103deb8:	48 8b 15 11 75 0b 00 	mov	rdx, qword ptr [rip + 750865]
 103debf:	84 02 	test	byte ptr [rdx], al
 103dec1:	90 	nop
 103dec2:	90 	nop
 103dec3:	48 bf 00 00 00 00 00 80 00 00 	movabs	rdi, 140737488355328
 103decd:	48 8d 04 3e 	lea	rax, [rsi + rdi]
 103ded1:	48 c1 e8 1a 	shr	rax, 26
 103ded5:	48 3d 00 00 40 00 	cmp	rax, 4194304
 103dedb:	0f 83 53 01 00 00 	jae	339 <_runtime.stackfree+0x304>
 103dee1:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 103dee5:	48 c1 ee 0d 	shr	rsi, 13
 103dee9:	48 81 e6 ff 1f 00 00 	and	rsi, 8191
 103def0:	48 8b 8c f0 00 00 20 00 	mov	rcx, qword ptr [rax + 8*rsi + 2097152]
 103def8:	84 00 	test	byte ptr [rax], al
 103defa:	8a 41 63 	mov	al, byte ptr [rcx + 99]
 103defd:	3c 02 	cmp	al, 2
 103deff:	0f 85 d8 00 00 00 	jne	216 <_runtime.stackfree+0x2ad>
 103df05:	83 3d 90 98 0b 00 00 	cmp	dword ptr [rip + 759952], 0
 103df0c:	75 26 	jne	38 <_runtime.stackfree+0x204>
 103df0e:	48 8d 05 eb 70 0a 00 	lea	rax, [rip + 684267]
 103df15:	48 89 04 24 	mov	qword ptr [rsp], rax
 103df19:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103df1e:	48 8d 05 5b a7 0b 00 	lea	rax, [rip + 763739]
 103df25:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103df2a:	e8 f1 07 fe ff 	call	-129039 <_runtime.(*mheap).freeManual>
 103df2f:	e9 f8 fe ff ff 	jmp	-264 <_runtime.stackfree+0xfc>
 103df34:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 103df39:	48 8b 41 20 	mov	rax, qword ptr [rcx + 32]
 103df3d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103df41:	e8 fa f3 ff ff 	call	-3078 <_runtime.stacklog2>
 103df46:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103df4b:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 103df50:	48 8d 0d 89 0b 09 00 	lea	rcx, [rip + 592777]
 103df57:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103df5b:	e8 d0 a1 fc ff 	call	-220720 <_runtime.lock>
 103df60:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103df65:	48 83 f8 23 	cmp	rax, 35
 103df69:	73 68 	jae	104 <_runtime.stackfree+0x2a3>
 103df6b:	48 c1 e0 04 	shl	rax, 4
 103df6f:	48 8d 0d 72 0b 09 00 	lea	rcx, [rip + 592754]
 103df76:	48 01 c8 	add	rax, rcx
 103df79:	48 89 04 24 	mov	qword ptr [rsp], rax
 103df7d:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103df82:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103df87:	e8 54 0d fe ff 	call	-127660 <_runtime.(*mSpanList).insert>
 103df8c:	48 8d 05 4d 0b 09 00 	lea	rax, [rip + 592717]
 103df93:	48 89 04 24 	mov	qword ptr [rsp], rax
 103df97:	e8 74 a3 fc ff 	call	-220300 <_runtime.unlock>
 103df9c:	e9 8b fe ff ff 	jmp	-373 <_runtime.stackfree+0xfc>
 103dfa1:	90 	nop
 103dfa2:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 103dfa6:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 103dfab:	48 b8 00 00 00 00 12 10 00 00 	movabs	rax, 17669495455744
 103dfb5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103dfba:	b8 ff ff ff ff 	mov	eax, 4294967295
 103dfbf:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103dfc4:	e8 67 4f 00 00 	call	20327 <_runtime.mmap>
 103dfc9:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 103dfce:	48 83 ec 80 	sub	rsp, -128
 103dfd2:	c3 	ret
 103dfd3:	b9 23 00 00 00 	mov	ecx, 35
 103dfd8:	e8 73 53 01 00 	call	86899 <_runtime.panicIndex>
 103dfdd:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 103dfe2:	48 8b 41 18 	mov	rax, qword ptr [rcx + 24]
 103dfe6:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 103dfeb:	e8 b0 c4 fe ff 	call	-80720 <_runtime.printlock>
 103dff0:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103dff5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103dff9:	e8 92 cc fe ff 	call	-78702 <_runtime.printhex>
 103dffe:	e8 dd c6 fe ff 	call	-80163 <_runtime.printsp>
 103e003:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103e008:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e00c:	e8 8f cd fe ff 	call	-78449 <_runtime.printpointer>
 103e011:	e8 1a c7 fe ff 	call	-80102 <_runtime.printnl>
 103e016:	e8 05 c5 fe ff 	call	-80635 <_runtime.printunlock>
 103e01b:	48 8d 05 4c 58 03 00 	lea	rax, [rip + 219212]
 103e022:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e026:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 103e02f:	e8 2c ad fe ff 	call	-86740 <_runtime.throw>
 103e034:	b9 00 00 40 00 	mov	ecx, 4194304
 103e039:	e8 22 53 01 00 	call	86818 <_runtime.panicIndexU>
 103e03e:	48 89 d0 	mov	rax, rdx
 103e041:	b9 04 00 00 00 	mov	ecx, 4
 103e046:	e8 05 53 01 00 	call	86789 <_runtime.panicIndex>
 103e04b:	b9 04 00 00 00 	mov	ecx, 4
 103e050:	e8 fb 52 01 00 	call	86779 <_runtime.panicIndex>
 103e055:	48 8d 05 20 58 03 00 	lea	rax, [rip + 219168]
 103e05c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e060:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 103e069:	e8 f2 ac fe ff 	call	-86798 <_runtime.throw>
 103e06e:	48 8d 05 89 66 03 00 	lea	rax, [rip + 222857]
 103e075:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e079:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 103e082:	e8 d9 ac fe ff 	call	-86823 <_runtime.throw>
 103e087:	90 	nop
 103e088:	e8 73 26 00 00 	call	9843 <_runtime.morestackc>
 103e08d:	e9 9e fc ff ff 	jmp	-866 <_runtime.stackfree>
 103e092:	cc 	int3
 103e093:	cc 	int3
 103e094:	cc 	int3
 103e095:	cc 	int3
 103e096:	cc 	int3
 103e097:	cc 	int3
 103e098:	cc 	int3
 103e099:	cc 	int3
 103e09a:	cc 	int3
 103e09b:	cc 	int3
 103e09c:	cc 	int3
 103e09d:	cc 	int3
 103e09e:	cc 	int3
 103e09f:	cc 	int3

_runtime.adjustpointers:
 103e0a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103e0a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103e0ad:	0f 86 0e 02 00 00 	jbe	526 <_runtime.adjustpointers+0x221>
 103e0b3:	48 83 ec 58 	sub	rsp, 88
 103e0b7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 103e0bc:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 103e0c1:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 103e0c6:	48 8b 11 	mov	rdx, qword ptr [rcx]
 103e0c9:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 103e0cd:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 103e0d1:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 103e0d6:	4c 63 07 	movsxd	r8, dword ptr [rdi]
 103e0d9:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 103e0de:	4c 8b 4c 24 60 	mov	r9, qword ptr [rsp + 96]
 103e0e3:	4d 89 ca 	mov	r10, r9
 103e0e6:	48 8b 89 18 01 00 00 	mov	rcx, qword ptr [rcx + 280]
 103e0ed:	4c 39 c9 	cmp	rcx, r9
 103e0f0:	4c 8b 5c 24 78 	mov	r11, qword ptr [rsp + 120]
 103e0f5:	31 c0 	xor	eax, eax
 103e0f7:	e9 b5 00 00 00 	jmp	181 <_runtime.adjustpointers+0x111>
 103e0fc:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103e101:	4c 8b 44 24 38 	mov	r8, qword ptr [rsp + 56]
 103e106:	4c 8b 64 24 28 	mov	r12, qword ptr [rsp + 40]
 103e10b:	4f 8b 04 ea 	mov	r8, qword ptr [r10 + 8*r13]
 103e10f:	4c 89 44 24 20 	mov	qword ptr [rsp + 32], r8
 103e114:	4d 85 db 	test	r11, r11
 103e117:	74 1b 	je	27 <_runtime.adjustpointers+0x94>
 103e119:	4d 85 c0 	test	r8, r8
 103e11c:	76 16 	jbe	22 <_runtime.adjustpointers+0x94>
 103e11e:	49 81 f8 00 10 00 00 	cmp	r8, 4096
 103e125:	73 0d 	jae	13 <_runtime.adjustpointers+0x94>
 103e127:	83 3d 36 99 0b 00 00 	cmp	dword ptr [rip + 760118], 0
 103e12e:	0f 85 a2 00 00 00 	jne	162 <_runtime.adjustpointers+0x136>
 103e134:	4c 39 c2 	cmp	rdx, r8
 103e137:	77 23 	ja	35 <_runtime.adjustpointers+0xbc>
 103e139:	49 39 d8 	cmp	r8, rbx
 103e13c:	73 1e 	jae	30 <_runtime.adjustpointers+0xbc>
 103e13e:	4c 39 c9 	cmp	rcx, r9
 103e141:	76 5a 	jbe	90 <_runtime.adjustpointers+0xfd>
 103e143:	4c 8b 64 24 20 	mov	r12, qword ptr [rsp + 32]
 103e148:	49 01 f4 	add	r12, rsi
 103e14b:	4c 89 c0 	mov	rax, r8
 103e14e:	f0 	lock
 103e14f:	4c 0f b1 27 	cmpxchg	qword ptr [rdi], r12
 103e153:	41 0f 94 c0 	sete	r8b
 103e157:	45 84 c0 	test	r8b, r8b
 103e15a:	74 a0 	je	-96 <_runtime.adjustpointers+0x5c>
 103e15c:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103e161:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 103e166:	4c 8b 44 24 38 	mov	r8, qword ptr [rsp + 56]
 103e16b:	49 89 c4 	mov	r12, rax
 103e16e:	45 89 f5 	mov	r13d, r14d
 103e171:	45 84 ed 	test	r13b, r13b
 103e174:	74 36 	je	54 <_runtime.adjustpointers+0x10c>
 103e176:	90 	nop
 103e177:	45 8d 75 ff 	lea	r14d, [r13 - 1]
 103e17b:	45 21 ee 	and	r14d, r13d
 103e17e:	45 0f b6 ed 	movzx	r13d, r13b
 103e182:	4c 8d 3d 17 d8 08 00 	lea	r15, [rip + 579607]
 103e189:	47 0f b6 2c 2f 	movzx	r13d, byte ptr [r15 + r13]
 103e18e:	4d 01 e5 	add	r13, r12
 103e191:	48 89 f8 	mov	rax, rdi
 103e194:	4b 8d 3c ea 	lea	rdi, [r10 + 8*r13]
 103e198:	e9 6e ff ff ff 	jmp	-146 <_runtime.adjustpointers+0x6b>
 103e19d:	49 c1 e5 03 	shl	r13, 3
 103e1a1:	49 8d 3c 30 	lea	rdi, [r8 + rsi]
 103e1a5:	4b 89 7c 15 00 	mov	qword ptr [r13 + r10], rdi
 103e1aa:	eb b0 	jmp	-80 <_runtime.adjustpointers+0xbc>
 103e1ac:	49 8d 44 24 08 	lea	rax, [r12 + 8]
 103e1b1:	4c 39 c0 	cmp	rax, r8
 103e1b4:	73 16 	jae	22 <_runtime.adjustpointers+0x12c>
 103e1b6:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 103e1bb:	49 89 c4 	mov	r12, rax
 103e1be:	48 c1 e8 03 	shr	rax, 3
 103e1c2:	48 03 47 08 	add	rax, qword ptr [rdi + 8]
 103e1c6:	44 0f b6 28 	movzx	r13d, byte ptr [rax]
 103e1ca:	eb a5 	jmp	-91 <_runtime.adjustpointers+0xd1>
 103e1cc:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 103e1d1:	48 83 c4 58 	add	rsp, 88
 103e1d5:	c3 	ret
 103e1d6:	48 89 7c 24 48 	mov	qword ptr [rsp + 72], rdi
 103e1db:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103e1e4:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103e1e8:	c6 80 29 01 00 00 02 	mov	byte ptr [rax + 297], 2
 103e1ef:	4c 89 1c 24 	mov	qword ptr [rsp], r11
 103e1f3:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103e1fb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103e200:	e8 bb 40 00 00 	call	16571 <_runtime.funcname>
 103e205:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103e20a:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103e20f:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103e214:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 103e219:	e8 82 c2 fe ff 	call	-81278 <_runtime.printlock>
 103e21e:	48 8d 05 70 76 03 00 	lea	rax, [rip + 226928]
 103e225:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e229:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 103e232:	e8 a9 cb fe ff 	call	-78935 <_runtime.printstring>
 103e237:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103e23c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e240:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103e245:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103e24a:	e8 91 cb fe ff 	call	-78959 <_runtime.printstring>
 103e24f:	48 8d 05 7d 4a 03 00 	lea	rax, [rip + 215677]
 103e256:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e25a:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103e263:	e8 78 cb fe ff 	call	-78984 <_runtime.printstring>
 103e268:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103e26d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e271:	e8 2a cb fe ff 	call	-79062 <_runtime.printpointer>
 103e276:	48 8d 05 fb 49 03 00 	lea	rax, [rip + 215547]
 103e27d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e281:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103e28a:	e8 51 cb fe ff 	call	-79023 <_runtime.printstring>
 103e28f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 103e294:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e298:	e8 f3 c9 fe ff 	call	-79373 <_runtime.printhex>
 103e29d:	e8 8e c4 fe ff 	call	-80754 <_runtime.printnl>
 103e2a2:	e8 79 c2 fe ff 	call	-81287 <_runtime.printunlock>
 103e2a7:	48 8d 05 8d 75 03 00 	lea	rax, [rip + 226701]
 103e2ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e2b2:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 103e2bb:	e8 a0 aa fe ff 	call	-87392 <_runtime.throw>
 103e2c0:	90 	nop
 103e2c1:	e8 0a 29 01 00 	call	76042 <_runtime.morestack_noctxt>
 103e2c6:	e9 d5 fd ff ff 	jmp	-555 <_runtime.adjustpointers>
 103e2cb:	cc 	int3
 103e2cc:	cc 	int3
 103e2cd:	cc 	int3
 103e2ce:	cc 	int3
 103e2cf:	cc 	int3

_runtime.adjustframe:
 103e2d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103e2d9:	48 8d 44 24 b8 	lea	rax, [rsp - 72]
 103e2de:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 103e2e2:	0f 86 29 04 00 00 	jbe	1065 <_runtime.adjustframe+0x441>
 103e2e8:	48 81 ec c8 00 00 00 	sub	rsp, 200
 103e2ef:	48 89 ac 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rbp
 103e2f7:	48 8d ac 24 c0 00 00 00 	lea	rbp, [rsp + 192]
 103e2ff:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103e307:	48 83 78 18 00 	cmp	qword ptr [rax + 24], 0
 103e30c:	0f 84 33 03 00 00 	je	819 <_runtime.adjustframe+0x375>
 103e312:	48 8b 08 	mov	rcx, qword ptr [rax]
 103e315:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 103e319:	80 79 24 0c 	cmp	byte ptr [rcx + 36], 12
 103e31d:	0f 84 0a 03 00 00 	je	778 <_runtime.adjustframe+0x35d>
 103e323:	48 89 94 24 98 00 00 00 	mov	qword ptr [rsp + 152], rdx
 103e32b:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 103e333:	48 8b 8c 24 d8 00 00 00 	mov	rcx, qword ptr [rsp + 216]
 103e33b:	84 01 	test	byte ptr [rcx], al
 103e33d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e341:	48 8d 51 18 	lea	rdx, [rcx + 24]
 103e345:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103e34a:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 103e34f:	e8 0c 1b 00 00 	call	6924 <_runtime.getStackMap>
 103e354:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103e359:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 103e35e:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 103e363:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 103e368:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 103e36d:	8b 5c 24 28 	mov	ebx, dword ptr [rsp + 40]
 103e371:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 103e376:	8b 7c 24 18 	mov	edi, dword ptr [rsp + 24]
 103e37a:	89 bc 24 a0 00 00 00 	mov	dword ptr [rsp + 160], edi
 103e381:	48 89 b4 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rsi
 103e389:	89 9c 24 b0 00 00 00 	mov	dword ptr [rsp + 176], ebx
 103e390:	48 89 94 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rdx
 103e398:	8b 94 24 a0 00 00 00 	mov	edx, dword ptr [rsp + 160]
 103e39f:	85 d2 	test	edx, edx
 103e3a1:	0f 8f 24 02 00 00 	jg	548 <_runtime.adjustframe+0x2fb>
 103e3a7:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 103e3af:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 103e3b3:	48 8b 72 38 	mov	rsi, qword ptr [rdx + 56]
 103e3b7:	48 29 f3 	sub	rbx, rsi
 103e3ba:	48 83 fb 10 	cmp	rbx, 16
 103e3be:	0f 85 fa 01 00 00 	jne	506 <_runtime.adjustframe+0x2ee>
 103e3c4:	80 3d 75 e3 08 00 00 	cmp	byte ptr [rip + 582517], 0
 103e3cb:	0f 84 8c 02 00 00 	je	652 <_runtime.adjustframe+0x38d>
 103e3d1:	90 	nop
 103e3d2:	48 8b 1e 	mov	rbx, qword ptr [rsi]
 103e3d5:	48 8b bc 24 d8 00 00 00 	mov	rdi, qword ptr [rsp + 216]
 103e3dd:	48 39 1f 	cmp	qword ptr [rdi], rbx
 103e3e0:	77 10 	ja	16 <_runtime.adjustframe+0x122>
 103e3e2:	48 39 5f 08 	cmp	qword ptr [rdi + 8], rbx
 103e3e6:	76 0a 	jbe	10 <_runtime.adjustframe+0x122>
 103e3e8:	4c 8b 47 10 	mov	r8, qword ptr [rdi + 16]
 103e3ec:	4c 01 c3 	add	rbx, r8
 103e3ef:	48 89 1e 	mov	qword ptr [rsi], rbx
 103e3f2:	83 bc 24 b0 00 00 00 00 	cmp	dword ptr [rsp + 176], 0
 103e3fa:	0f 8f 78 01 00 00 	jg	376 <_runtime.adjustframe+0x2a8>
 103e400:	48 83 7a 38 00 	cmp	qword ptr [rdx + 56], 0
 103e405:	74 32 	je	50 <_runtime.adjustframe+0x169>
 103e407:	48 85 c0 	test	rax, rax
 103e40a:	7e 2d 	jle	45 <_runtime.adjustframe+0x169>
 103e40c:	31 db 	xor	ebx, ebx
 103e40e:	eb 04 	jmp	4 <_runtime.adjustframe+0x144>
 103e410:	48 83 c1 10 	add	rcx, 16
 103e414:	48 8b 71 08 	mov	rsi, qword ptr [rcx + 8]
 103e418:	4c 8b 01 	mov	r8, qword ptr [rcx]
 103e41b:	4c 8b 4a 38 	mov	r9, qword ptr [rdx + 56]
 103e41f:	4d 85 c0 	test	r8, r8
 103e422:	7c 04 	jl	4 <_runtime.adjustframe+0x158>
 103e424:	4c 8b 4a 40 	mov	r9, qword ptr [rdx + 64]
 103e428:	4d 01 c8 	add	r8, r9
 103e42b:	4c 39 42 28 	cmp	qword ptr [rdx + 40], r8
 103e42f:	76 20 	jbe	32 <_runtime.adjustframe+0x181>
 103e431:	48 ff c3 	inc	rbx
 103e434:	48 39 c3 	cmp	rbx, rax
 103e437:	7c d7 	jl	-41 <_runtime.adjustframe+0x140>
 103e439:	c6 84 24 e0 00 00 00 01 	mov	byte ptr [rsp + 224], 1
 103e441:	48 8b ac 24 c0 00 00 00 	mov	rbp, qword ptr [rsp + 192]
 103e449:	48 81 c4 c8 00 00 00 	add	rsp, 200
 103e450:	c3 	ret
 103e451:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 103e459:	48 89 5c 24 70 	mov	qword ptr [rsp + 112], rbx
 103e45e:	4c 8b 4e 20 	mov	r9, qword ptr [rsi + 32]
 103e462:	44 0f b6 56 17 	movzx	r10d, byte ptr [rsi + 23]
 103e467:	41 f6 c2 40 	test	r10b, 64
 103e46b:	0f 85 ab 00 00 00 	jne	171 <_runtime.adjustframe+0x24c>
 103e471:	45 31 d2 	xor	r10d, r10d
 103e474:	45 31 db 	xor	r11d, r11d
 103e477:	eb 07 	jmp	7 <_runtime.adjustframe+0x1b0>
 103e479:	4d 8d 5d 08 	lea	r11, [r13 + 8]
 103e47d:	4c 89 f1 	mov	rcx, r14
 103e480:	4c 39 5e 08 	cmp	qword ptr [rsi + 8], r11
 103e484:	76 45 	jbe	69 <_runtime.adjustframe+0x1fb>
 103e486:	4d 89 dc 	mov	r12, r11
 103e489:	49 c1 eb 06 	shr	r11, 6
 103e48d:	47 0f b6 1c 19 	movzx	r11d, byte ptr [r9 + r11]
 103e492:	4d 89 e5 	mov	r13, r12
 103e495:	49 c1 ec 03 	shr	r12, 3
 103e499:	49 83 e4 07 	and	r12, 7
 103e49d:	49 89 ce 	mov	r14, rcx
 103e4a0:	4c 89 e1 	mov	rcx, r12
 103e4a3:	41 d2 eb 	shr	r11b, cl
 103e4a6:	41 f6 c3 01 	test	r11b, 1
 103e4aa:	74 cd 	je	-51 <_runtime.adjustframe+0x1a9>
 103e4ac:	4f 8d 5c 05 00 	lea	r11, [r13 + r8]
 103e4b1:	4d 8b 23 	mov	r12, qword ptr [r11]
 103e4b4:	4c 39 27 	cmp	qword ptr [rdi], r12
 103e4b7:	77 c0 	ja	-64 <_runtime.adjustframe+0x1a9>
 103e4b9:	4c 39 67 08 	cmp	qword ptr [rdi + 8], r12
 103e4bd:	76 ba 	jbe	-70 <_runtime.adjustframe+0x1a9>
 103e4bf:	4c 8b 7f 10 	mov	r15, qword ptr [rdi + 16]
 103e4c3:	4d 01 fc 	add	r12, r15
 103e4c6:	4d 89 23 	mov	qword ptr [r11], r12
 103e4c9:	eb ae 	jmp	-82 <_runtime.adjustframe+0x1a9>
 103e4cb:	4d 85 d2 	test	r10, r10
 103e4ce:	0f 84 5d ff ff ff 	je	-163 <_runtime.adjustframe+0x161>
 103e4d4:	48 8d 05 25 6b 0a 00 	lea	rax, [rip + 682789]
 103e4db:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e4df:	4c 89 54 24 08 	mov	qword ptr [rsp + 8], r10
 103e4e4:	48 8d 0d cd a1 0b 00 	lea	rcx, [rip + 762317]
 103e4eb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103e4f0:	e8 2b 02 fe ff 	call	-130517 <_runtime.(*mheap).freeManual>
 103e4f5:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103e4fa:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 103e502:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 103e50a:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 103e50f:	48 8b bc 24 d8 00 00 00 	mov	rdi, qword ptr [rsp + 216]
 103e517:	e9 15 ff ff ff 	jmp	-235 <_runtime.adjustframe+0x161>
 103e51c:	4c 89 44 24 50 	mov	qword ptr [rsp + 80], r8
 103e521:	48 89 b4 24 80 00 00 00 	mov	qword ptr [rsp + 128], rsi
 103e529:	48 8b 46 08 	mov	rax, qword ptr [rsi + 8]
 103e52d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e531:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 103e536:	e8 35 1c fd ff 	call	-189387 <_runtime.materializeGCProg>
 103e53b:	4c 8b 54 24 10 	mov	r10, qword ptr [rsp + 16]
 103e540:	4d 8b 4a 18 	mov	r9, qword ptr [r10 + 24]
 103e544:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103e549:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 103e551:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 103e559:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 103e55e:	48 8b b4 24 80 00 00 00 	mov	rsi, qword ptr [rsp + 128]
 103e566:	48 8b bc 24 d8 00 00 00 	mov	rdi, qword ptr [rsp + 216]
 103e56e:	4c 8b 44 24 50 	mov	r8, qword ptr [rsp + 80]
 103e573:	e9 fc fe ff ff 	jmp	-260 <_runtime.adjustframe+0x1a4>
 103e578:	48 8b 42 40 	mov	rax, qword ptr [rdx + 64]
 103e57c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e580:	48 8d 84 24 b0 00 00 00 	lea	rax, [rsp + 176]
 103e588:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103e58d:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 103e592:	0f 57 c0 	xorps	xmm0, xmm0
 103e595:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 103e59a:	e8 01 fb ff ff 	call	-1279 <_runtime.adjustpointers>
 103e59f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103e5a4:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 103e5a9:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 103e5b1:	48 8b bc 24 d8 00 00 00 	mov	rdi, qword ptr [rsp + 216]
 103e5b9:	e9 42 fe ff ff 	jmp	-446 <_runtime.adjustframe+0x130>
 103e5be:	48 8b bc 24 d8 00 00 00 	mov	rdi, qword ptr [rsp + 216]
 103e5c6:	e9 27 fe ff ff 	jmp	-473 <_runtime.adjustframe+0x122>
 103e5cb:	48 63 c2 	movsxd	rax, edx
 103e5ce:	48 c1 e0 03 	shl	rax, 3
 103e5d2:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 103e5da:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 103e5de:	48 29 c2 	sub	rdx, rax
 103e5e1:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103e5e5:	48 8d 84 24 a0 00 00 00 	lea	rax, [rsp + 160]
 103e5ed:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103e5f2:	48 8b 84 24 d8 00 00 00 	mov	rax, qword ptr [rsp + 216]
 103e5fa:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103e5ff:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 103e607:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 103e60c:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103e614:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 103e619:	e8 82 fa ff ff 	call	-1406 <_runtime.adjustpointers>
 103e61e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103e623:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 103e628:	e9 7a fd ff ff 	jmp	-646 <_runtime.adjustframe+0xd7>
 103e62d:	c6 84 24 e0 00 00 00 01 	mov	byte ptr [rsp + 224], 1
 103e635:	48 8b ac 24 c0 00 00 00 	mov	rbp, qword ptr [rsp + 192]
 103e63d:	48 81 c4 c8 00 00 00 	add	rsp, 200
 103e644:	c3 	ret
 103e645:	c6 84 24 e0 00 00 00 01 	mov	byte ptr [rsp + 224], 1
 103e64d:	48 8b ac 24 c0 00 00 00 	mov	rbp, qword ptr [rsp + 192]
 103e655:	48 81 c4 c8 00 00 00 	add	rsp, 200
 103e65c:	c3 	ret
 103e65d:	e8 3e be fe ff 	call	-82370 <_runtime.printlock>
 103e662:	48 8d 05 e2 8f 03 00 	lea	rax, [rip + 233442]
 103e669:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e66d:	48 c7 44 24 08 4c 00 00 00 	mov	qword ptr [rsp + 8], 76
 103e676:	e8 65 c7 fe ff 	call	-80027 <_runtime.printstring>
 103e67b:	e8 a0 be fe ff 	call	-82272 <_runtime.printunlock>
 103e680:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103e688:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 103e68c:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 103e691:	48 8b 40 38 	mov	rax, qword ptr [rax + 56]
 103e695:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 103e69a:	e8 01 be fe ff 	call	-82431 <_runtime.printlock>
 103e69f:	48 8d 05 22 47 03 00 	lea	rax, [rip + 214818]
 103e6a6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e6aa:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 103e6b3:	e8 28 c7 fe ff 	call	-80088 <_runtime.printstring>
 103e6b8:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103e6bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e6c1:	e8 ca c5 fe ff 	call	-80438 <_runtime.printhex>
 103e6c6:	48 8d 05 7b 47 03 00 	lea	rax, [rip + 214907]
 103e6cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e6d1:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 103e6da:	e8 01 c7 fe ff 	call	-80127 <_runtime.printstring>
 103e6df:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103e6e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e6e8:	e8 a3 c5 fe ff 	call	-80477 <_runtime.printhex>
 103e6ed:	e8 3e c0 fe ff 	call	-81858 <_runtime.printnl>
 103e6f2:	e8 29 be fe ff 	call	-82391 <_runtime.printunlock>
 103e6f7:	48 8d 05 c4 53 03 00 	lea	rax, [rip + 218052]
 103e6fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e702:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 103e70b:	e8 50 a6 fe ff 	call	-88496 <_runtime.throw>
 103e710:	90 	nop
 103e711:	e8 ba 24 01 00 	call	74938 <_runtime.morestack_noctxt>
 103e716:	e9 b5 fb ff ff 	jmp	-1099 <_runtime.adjustframe>
 103e71b:	cc 	int3
 103e71c:	cc 	int3
 103e71d:	cc 	int3
 103e71e:	cc 	int3
 103e71f:	cc 	int3

_runtime.adjustctxt:
 103e720:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103e725:	48 8b 48 50 	mov	rcx, qword ptr [rax + 80]
 103e729:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 103e72e:	48 39 0a 	cmp	qword ptr [rdx], rcx
 103e731:	77 11 	ja	17 <_runtime.adjustctxt+0x24>
 103e733:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 103e737:	76 0b 	jbe	11 <_runtime.adjustctxt+0x24>
 103e739:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 103e73d:	48 01 d9 	add	rcx, rbx
 103e740:	48 89 48 50 	mov	qword ptr [rax + 80], rcx
 103e744:	80 3d f5 df 08 00 00 	cmp	byte ptr [rip + 581621], 0
 103e74b:	74 1c 	je	28 <_runtime.adjustctxt+0x49>
 103e74d:	90 	nop
 103e74e:	48 8b 48 68 	mov	rcx, qword ptr [rax + 104]
 103e752:	48 39 0a 	cmp	qword ptr [rdx], rcx
 103e755:	77 11 	ja	17 <_runtime.adjustctxt+0x48>
 103e757:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 103e75b:	76 0b 	jbe	11 <_runtime.adjustctxt+0x48>
 103e75d:	48 8b 52 10 	mov	rdx, qword ptr [rdx + 16]
 103e761:	48 01 d1 	add	rcx, rdx
 103e764:	48 89 48 68 	mov	qword ptr [rax + 104], rcx
 103e768:	c3 	ret
 103e769:	c3 	ret
 103e76a:	cc 	int3
 103e76b:	cc 	int3
 103e76c:	cc 	int3
 103e76d:	cc 	int3
 103e76e:	cc 	int3
 103e76f:	cc 	int3

_runtime.adjustdefers:
 103e770:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103e779:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103e77d:	0f 86 18 01 00 00 	jbe	280 <_runtime.adjustdefers+0x12b>
 103e783:	48 83 ec 20 	sub	rsp, 32
 103e787:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 103e78c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 103e791:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103e796:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 103e79a:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 103e79f:	48 39 0a 	cmp	qword ptr [rdx], rcx
 103e7a2:	77 11 	ja	17 <_runtime.adjustdefers+0x45>
 103e7a4:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 103e7a8:	76 0b 	jbe	11 <_runtime.adjustdefers+0x45>
 103e7aa:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 103e7ae:	48 01 d9 	add	rcx, rbx
 103e7b1:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 103e7b5:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 103e7b9:	eb 04 	jmp	4 <_runtime.adjustdefers+0x4f>
 103e7bb:	48 8b 49 28 	mov	rcx, qword ptr [rcx + 40]
 103e7bf:	48 85 c9 	test	rcx, rcx
 103e7c2:	0f 84 af 00 00 00 	je	175 <_runtime.adjustdefers+0x107>
 103e7c8:	90 	nop
 103e7c9:	48 8b 59 18 	mov	rbx, qword ptr [rcx + 24]
 103e7cd:	48 39 1a 	cmp	qword ptr [rdx], rbx
 103e7d0:	77 11 	ja	17 <_runtime.adjustdefers+0x73>
 103e7d2:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 103e7d6:	76 0b 	jbe	11 <_runtime.adjustdefers+0x73>
 103e7d8:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 103e7dc:	48 01 f3 	add	rbx, rsi
 103e7df:	48 89 59 18 	mov	qword ptr [rcx + 24], rbx
 103e7e3:	90 	nop
 103e7e4:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 103e7e8:	48 39 1a 	cmp	qword ptr [rdx], rbx
 103e7eb:	77 11 	ja	17 <_runtime.adjustdefers+0x8e>
 103e7ed:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 103e7f1:	76 0b 	jbe	11 <_runtime.adjustdefers+0x8e>
 103e7f3:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 103e7f7:	48 01 f3 	add	rbx, rsi
 103e7fa:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 103e7fe:	90 	nop
 103e7ff:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 103e803:	48 39 1a 	cmp	qword ptr [rdx], rbx
 103e806:	77 11 	ja	17 <_runtime.adjustdefers+0xa9>
 103e808:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 103e80c:	76 0b 	jbe	11 <_runtime.adjustdefers+0xa9>
 103e80e:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 103e812:	48 01 f3 	add	rbx, rsi
 103e815:	48 89 59 20 	mov	qword ptr [rcx + 32], rbx
 103e819:	90 	nop
 103e81a:	48 8b 59 28 	mov	rbx, qword ptr [rcx + 40]
 103e81e:	48 39 1a 	cmp	qword ptr [rdx], rbx
 103e821:	77 11 	ja	17 <_runtime.adjustdefers+0xc4>
 103e823:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 103e827:	76 0b 	jbe	11 <_runtime.adjustdefers+0xc4>
 103e829:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 103e82d:	48 01 f3 	add	rbx, rsi
 103e830:	48 89 59 28 	mov	qword ptr [rcx + 40], rbx
 103e834:	90 	nop
 103e835:	48 8b 59 38 	mov	rbx, qword ptr [rcx + 56]
 103e839:	48 39 1a 	cmp	qword ptr [rdx], rbx
 103e83c:	77 11 	ja	17 <_runtime.adjustdefers+0xdf>
 103e83e:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 103e842:	76 0b 	jbe	11 <_runtime.adjustdefers+0xdf>
 103e844:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 103e848:	48 01 f3 	add	rbx, rsi
 103e84b:	48 89 59 38 	mov	qword ptr [rcx + 56], rbx
 103e84f:	90 	nop
 103e850:	48 8b 59 30 	mov	rbx, qword ptr [rcx + 48]
 103e854:	48 39 1a 	cmp	qword ptr [rdx], rbx
 103e857:	0f 87 5e ff ff ff 	ja	-162 <_runtime.adjustdefers+0x4b>
 103e85d:	48 39 5a 08 	cmp	qword ptr [rdx + 8], rbx
 103e861:	0f 86 54 ff ff ff 	jbe	-172 <_runtime.adjustdefers+0x4b>
 103e867:	48 8b 72 10 	mov	rsi, qword ptr [rdx + 16]
 103e86b:	48 01 f3 	add	rbx, rsi
 103e86e:	48 89 59 30 	mov	qword ptr [rcx + 48], rbx
 103e872:	e9 44 ff ff ff 	jmp	-188 <_runtime.adjustdefers+0x4b>
 103e877:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e87b:	48 8d 05 96 8e 03 00 	lea	rax, [rip + 233110]
 103e882:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103e887:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 103e88c:	e8 df 89 00 00 	call	35295 <_runtime.tracebackdefers>
 103e891:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103e896:	48 83 c4 20 	add	rsp, 32
 103e89a:	c3 	ret
 103e89b:	e8 30 23 01 00 	call	74544 <_runtime.morestack_noctxt>
 103e8a0:	e9 cb fe ff ff 	jmp	-309 <_runtime.adjustdefers>
 103e8a5:	cc 	int3
 103e8a6:	cc 	int3
 103e8a7:	cc 	int3
 103e8a8:	cc 	int3
 103e8a9:	cc 	int3
 103e8aa:	cc 	int3
 103e8ab:	cc 	int3
 103e8ac:	cc 	int3
 103e8ad:	cc 	int3
 103e8ae:	cc 	int3
 103e8af:	cc 	int3

_runtime.adjustsudogs:
 103e8b0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103e8b5:	48 8b 80 38 01 00 00 	mov	rax, qword ptr [rax + 312]
 103e8bc:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103e8c1:	eb 04 	jmp	4 <_runtime.adjustsudogs+0x17>
 103e8c3:	48 8b 40 48 	mov	rax, qword ptr [rax + 72]
 103e8c7:	48 85 c0 	test	rax, rax
 103e8ca:	74 1d 	je	29 <_runtime.adjustsudogs+0x39>
 103e8cc:	90 	nop
 103e8cd:	48 8b 50 20 	mov	rdx, qword ptr [rax + 32]
 103e8d1:	48 39 11 	cmp	qword ptr [rcx], rdx
 103e8d4:	77 ed 	ja	-19 <_runtime.adjustsudogs+0x13>
 103e8d6:	48 39 51 08 	cmp	qword ptr [rcx + 8], rdx
 103e8da:	76 e7 	jbe	-25 <_runtime.adjustsudogs+0x13>
 103e8dc:	48 8b 59 10 	mov	rbx, qword ptr [rcx + 16]
 103e8e0:	48 01 da 	add	rdx, rbx
 103e8e3:	48 89 50 20 	mov	qword ptr [rax + 32], rdx
 103e8e7:	eb da 	jmp	-38 <_runtime.adjustsudogs+0x13>
 103e8e9:	c3 	ret
 103e8ea:	cc 	int3
 103e8eb:	cc 	int3
 103e8ec:	cc 	int3
 103e8ed:	cc 	int3
 103e8ee:	cc 	int3
 103e8ef:	cc 	int3

_runtime.findsghi:
 103e8f0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103e8f5:	48 8b 80 38 01 00 00 	mov	rax, qword ptr [rax + 312]
 103e8fc:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 103e901:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 103e906:	31 db 	xor	ebx, ebx
 103e908:	eb 07 	jmp	7 <_runtime.findsghi+0x21>
 103e90a:	48 8b 40 48 	mov	rax, qword ptr [rax + 72]
 103e90e:	48 89 f3 	mov	rbx, rsi
 103e911:	48 85 c0 	test	rax, rax
 103e914:	74 23 	je	35 <_runtime.findsghi+0x49>
 103e916:	48 8b 70 58 	mov	rsi, qword ptr [rax + 88]
 103e91a:	48 8b 78 20 	mov	rdi, qword ptr [rax + 32]
 103e91e:	0f b7 76 18 	movzx	esi, word ptr [rsi + 24]
 103e922:	48 01 fe 	add	rsi, rdi
 103e925:	48 39 f2 	cmp	rdx, rsi
 103e928:	77 0a 	ja	10 <_runtime.findsghi+0x44>
 103e92a:	48 39 ce 	cmp	rsi, rcx
 103e92d:	73 05 	jae	5 <_runtime.findsghi+0x44>
 103e92f:	48 39 de 	cmp	rsi, rbx
 103e932:	77 d6 	ja	-42 <_runtime.findsghi+0x1a>
 103e934:	48 89 de 	mov	rsi, rbx
 103e937:	eb d1 	jmp	-47 <_runtime.findsghi+0x1a>
 103e939:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 103e93e:	c3 	ret
 103e93f:	cc 	int3

_runtime.syncadjustsudogs:
 103e940:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103e949:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103e94d:	0f 86 31 01 00 00 	jbe	305 <_runtime.syncadjustsudogs+0x144>
 103e953:	48 83 ec 38 	sub	rsp, 56
 103e957:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 103e95c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 103e961:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103e966:	48 8b 88 38 01 00 00 	mov	rcx, qword ptr [rax + 312]
 103e96d:	48 85 c9 	test	rcx, rcx
 103e970:	0f 84 fb 00 00 00 	je	251 <_runtime.syncadjustsudogs+0x131>
 103e976:	31 d2 	xor	edx, edx
 103e978:	eb 0b 	jmp	11 <_runtime.syncadjustsudogs+0x45>
 103e97a:	48 8b 59 48 	mov	rbx, qword ptr [rcx + 72]
 103e97e:	48 8b 51 58 	mov	rdx, qword ptr [rcx + 88]
 103e982:	48 89 d9 	mov	rcx, rbx
 103e985:	48 85 c9 	test	rcx, rcx
 103e988:	74 29 	je	41 <_runtime.syncadjustsudogs+0x73>
 103e98a:	48 8b 59 58 	mov	rbx, qword ptr [rcx + 88]
 103e98e:	48 39 da 	cmp	rdx, rbx
 103e991:	74 e7 	je	-25 <_runtime.syncadjustsudogs+0x3a>
 103e993:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 103e998:	84 03 	test	byte ptr [rbx], al
 103e99a:	48 8d 43 58 	lea	rax, [rbx + 88]
 103e99e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e9a2:	e8 89 97 fc ff 	call	-223351 <_runtime.lock>
 103e9a7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103e9ac:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 103e9b1:	eb c7 	jmp	-57 <_runtime.syncadjustsudogs+0x3a>
 103e9b3:	48 89 04 24 	mov	qword ptr [rsp], rax
 103e9b7:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 103e9bc:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103e9c1:	e8 ea fe ff ff 	call	-278 <_runtime.adjustsudogs>
 103e9c6:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103e9cb:	48 8b 88 18 01 00 00 	mov	rcx, qword ptr [rax + 280]
 103e9d2:	48 85 c9 	test	rcx, rcx
 103e9d5:	75 5f 	jne	95 <_runtime.syncadjustsudogs+0xf6>
 103e9d7:	31 c0 	xor	eax, eax
 103e9d9:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103e9de:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 103e9e3:	48 8b 89 38 01 00 00 	mov	rcx, qword ptr [rcx + 312]
 103e9ea:	31 d2 	xor	edx, edx
 103e9ec:	eb 0b 	jmp	11 <_runtime.syncadjustsudogs+0xb9>
 103e9ee:	48 8b 59 48 	mov	rbx, qword ptr [rcx + 72]
 103e9f2:	48 8b 51 58 	mov	rdx, qword ptr [rcx + 88]
 103e9f6:	48 89 d9 	mov	rcx, rbx
 103e9f9:	48 85 c9 	test	rcx, rcx
 103e9fc:	74 29 	je	41 <_runtime.syncadjustsudogs+0xe7>
 103e9fe:	48 8b 59 58 	mov	rbx, qword ptr [rcx + 88]
 103ea02:	48 39 da 	cmp	rdx, rbx
 103ea05:	74 e7 	je	-25 <_runtime.syncadjustsudogs+0xae>
 103ea07:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 103ea0c:	84 03 	test	byte ptr [rbx], al
 103ea0e:	48 8d 43 58 	lea	rax, [rbx + 88]
 103ea12:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ea16:	e8 f5 98 fc ff 	call	-222987 <_runtime.unlock>
 103ea1b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103ea20:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103ea25:	eb c7 	jmp	-57 <_runtime.syncadjustsudogs+0xae>
 103ea27:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 103ea2c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 103ea31:	48 83 c4 38 	add	rsp, 56
 103ea35:	c3 	ret
 103ea36:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 103ea3a:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 103ea3f:	48 29 da 	sub	rdx, rbx
 103ea42:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 103ea46:	48 01 d0 	add	rax, rdx
 103ea49:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ea4d:	48 89 d0 	mov	rax, rdx
 103ea50:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103ea55:	48 29 c1 	sub	rcx, rax
 103ea58:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 103ea5d:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103ea62:	e8 e9 50 01 00 	call	86249 <_runtime.memmove>
 103ea67:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103ea6c:	e9 68 ff ff ff 	jmp	-152 <_runtime.syncadjustsudogs+0x99>
 103ea71:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 103ea7a:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 103ea7f:	48 83 c4 38 	add	rsp, 56
 103ea83:	c3 	ret
 103ea84:	e8 47 21 01 00 	call	74055 <_runtime.morestack_noctxt>
 103ea89:	e9 b2 fe ff ff 	jmp	-334 <_runtime.syncadjustsudogs>
 103ea8e:	cc 	int3
 103ea8f:	cc 	int3

_runtime.copystack:
 103ea90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103ea99:	48 8d 84 24 d0 fe ff ff 	lea	rax, [rsp - 304]
 103eaa1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 103eaa5:	0f 86 f4 02 00 00 	jbe	756 <_runtime.copystack+0x30f>
 103eaab:	48 81 ec b0 01 00 00 	sub	rsp, 432
 103eab2:	48 89 ac 24 a8 01 00 00 	mov	qword ptr [rsp + 424], rbp
 103eaba:	48 8d ac 24 a8 01 00 00 	lea	rbp, [rsp + 424]
 103eac2:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 103eaca:	48 83 78 70 00 	cmp	qword ptr [rax + 112], 0
 103eacf:	0f 85 b0 02 00 00 	jne	688 <_runtime.copystack+0x2f5>
 103ead5:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103ead9:	48 8b 10 	mov	rdx, qword ptr [rax]
 103eadc:	48 85 d2 	test	rdx, rdx
 103eadf:	0f 84 87 02 00 00 	je	647 <_runtime.copystack+0x2dc>
 103eae5:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 103eaed:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 103eaf2:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 103eaf6:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 103eafb:	48 8b 94 24 c0 01 00 00 	mov	rdx, qword ptr [rsp + 448]
 103eb03:	89 14 24 	mov	dword ptr [rsp], edx
 103eb06:	e8 e5 ee ff ff 	call	-4379 <_runtime.stackalloc>
 103eb0b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103eb10:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 103eb15:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 103eb1a:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 103eb1f:	48 8d bc 24 88 00 00 00 	lea	rdi, [rsp + 136]
 103eb27:	0f 57 c0 	xorps	xmm0, xmm0
 103eb2a:	48 8d 7f e0 	lea	rdi, [rdi - 32]
 103eb2e:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 103eb33:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 103eb38:	e8 8b 49 01 00 	call	84363 <_runtime.duffzero+0xd8>
 103eb3d:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 103eb41:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 103eb49:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 103eb51:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 103eb56:	48 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rbx
 103eb5e:	48 29 d8 	sub	rax, rbx
 103eb61:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 103eb69:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103eb6e:	48 89 df 	mov	rdi, rbx
 103eb71:	48 29 c3 	sub	rbx, rax
 103eb74:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 103eb79:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 103eb81:	80 b8 b8 00 00 00 00 	cmp	byte ptr [rax + 184], 0
 103eb88:	0f 84 be 01 00 00 	je	446 <_runtime.copystack+0x2bc>
 103eb8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103eb92:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 103eb97:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 103eb9c:	e8 4f fd ff ff 	call	-689 <_runtime.findsghi>
 103eba1:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103eba6:	48 89 84 24 a0 01 00 00 	mov	qword ptr [rsp + 416], rax
 103ebae:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 103ebb6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ebba:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 103ebbf:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103ebc4:	48 8d 94 24 88 00 00 00 	lea	rdx, [rsp + 136]
 103ebcc:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 103ebd1:	e8 6a fd ff ff 	call	-662 <_runtime.syncadjustsudogs>
 103ebd6:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103ebdb:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 103ebe0:	48 29 c1 	sub	rcx, rax
 103ebe3:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103ebe8:	48 29 c8 	sub	rax, rcx
 103ebeb:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ebef:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103ebf4:	48 29 c8 	sub	rax, rcx
 103ebf7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ebfc:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103ec01:	e8 4a 4f 01 00 	call	85834 <_runtime.memmove>
 103ec06:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 103ec0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ec12:	48 8d 8c 24 88 00 00 00 	lea	rcx, [rsp + 136]
 103ec1a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103ec1f:	e8 fc fa ff ff 	call	-1284 <_runtime.adjustctxt>
 103ec24:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 103ec2c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ec30:	48 8d 8c 24 88 00 00 00 	lea	rcx, [rsp + 136]
 103ec38:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103ec3d:	e8 2e fb ff ff 	call	-1234 <_runtime.adjustdefers>
 103ec42:	90 	nop
 103ec43:	90 	nop
 103ec44:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 103ec4c:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 103ec50:	48 39 8c 24 88 00 00 00 	cmp	qword ptr [rsp + 136], rcx
 103ec58:	77 19 	ja	25 <_runtime.copystack+0x1e3>
 103ec5a:	48 39 8c 24 90 00 00 00 	cmp	qword ptr [rsp + 144], rcx
 103ec62:	76 0f 	jbe	15 <_runtime.copystack+0x1e3>
 103ec64:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103ec6c:	48 01 d1 	add	rcx, rdx
 103ec6f:	48 89 48 20 	mov	qword ptr [rax + 32], rcx
 103ec73:	48 8b 8c 24 a0 01 00 00 	mov	rcx, qword ptr [rsp + 416]
 103ec7b:	48 85 c9 	test	rcx, rcx
 103ec7e:	74 13 	je	19 <_runtime.copystack+0x203>
 103ec80:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 103ec88:	48 01 d1 	add	rcx, rdx
 103ec8b:	48 89 8c 24 a0 01 00 00 	mov	qword ptr [rsp + 416], rcx
 103ec93:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 103ec98:	48 89 08 	mov	qword ptr [rax], rcx
 103ec9b:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 103eca0:	48 89 50 08 	mov	qword ptr [rax + 8], rdx
 103eca4:	48 81 c1 80 03 00 00 	add	rcx, 896
 103ecab:	48 89 48 10 	mov	qword ptr [rax + 16], rcx
 103ecaf:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 103ecb4:	48 29 ca 	sub	rdx, rcx
 103ecb7:	48 89 50 38 	mov	qword ptr [rax + 56], rdx
 103ecbb:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 103ecc3:	48 01 88 80 00 00 00 	add	qword ptr [rax + 128], rcx
 103ecca:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 103ecd2:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 103ecdb:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 103ece4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103ece9:	0f 57 c0 	xorps	xmm0, xmm0
 103ecec:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 103ecf1:	48 c7 44 24 30 ff ff ff 7f 	mov	qword ptr [rsp + 48], 2147483647
 103ecfa:	48 8d 05 17 8a 03 00 	lea	rax, [rip + 231959]
 103ed01:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 103ed06:	48 8d 84 24 88 00 00 00 	lea	rax, [rsp + 136]
 103ed0e:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 103ed13:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 103ed1c:	e8 7f 87 00 00 	call	34687 <_runtime.gentraceback>
 103ed21:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103ed29:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ed2d:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103ed32:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ed37:	e8 f4 ef ff ff 	call	-4108 <_runtime.stackfree>
 103ed3c:	48 8b ac 24 a8 01 00 00 	mov	rbp, qword ptr [rsp + 424]
 103ed44:	48 81 c4 b0 01 00 00 	add	rsp, 432
 103ed4b:	c3 	ret
 103ed4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ed50:	48 8d 8c 24 88 00 00 00 	lea	rcx, [rsp + 136]
 103ed58:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103ed5d:	e8 4e fb ff ff 	call	-1202 <_runtime.adjustsudogs>
 103ed62:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 103ed67:	e9 77 fe ff ff 	jmp	-393 <_runtime.copystack+0x153>
 103ed6c:	48 8d 05 06 4a 03 00 	lea	rax, [rip + 215558]
 103ed73:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ed77:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 103ed80:	e8 db 9f fe ff 	call	-90149 <_runtime.throw>
 103ed85:	48 8d 05 98 79 03 00 	lea	rax, [rip + 227736]
 103ed8c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ed90:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 103ed99:	e8 c2 9f fe ff 	call	-90174 <_runtime.throw>
 103ed9e:	90 	nop
 103ed9f:	e8 2c 1e 01 00 	call	73260 <_runtime.morestack_noctxt>
 103eda4:	e9 e7 fc ff ff 	jmp	-793 <_runtime.copystack>
 103eda9:	cc 	int3
 103edaa:	cc 	int3
 103edab:	cc 	int3
 103edac:	cc 	int3
 103edad:	cc 	int3
 103edae:	cc 	int3
 103edaf:	cc 	int3

_runtime.round2:
 103edb0:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 103edb4:	31 c9 	xor	ecx, ecx
 103edb6:	eb 03 	jmp	3 <_runtime.round2+0xb>
 103edb8:	48 ff c1 	inc	rcx
 103edbb:	48 83 f9 20 	cmp	rcx, 32
 103edbf:	19 d2 	sbb	edx, edx
 103edc1:	bb 01 00 00 00 	mov	ebx, 1
 103edc6:	d3 e3 	shl	ebx, cl
 103edc8:	21 d3 	and	ebx, edx
 103edca:	39 c3 	cmp	ebx, eax
 103edcc:	7c ea 	jl	-22 <_runtime.round2+0x8>
 103edce:	89 5c 24 10 	mov	dword ptr [rsp + 16], ebx
 103edd2:	c3 	ret
 103edd3:	cc 	int3
 103edd4:	cc 	int3
 103edd5:	cc 	int3
 103edd6:	cc 	int3
 103edd7:	cc 	int3
 103edd8:	cc 	int3
 103edd9:	cc 	int3
 103edda:	cc 	int3
 103eddb:	cc 	int3
 103eddc:	cc 	int3
 103eddd:	cc 	int3
 103edde:	cc 	int3
 103eddf:	cc 	int3

_runtime.newstack:
 103ede0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103ede9:	48 8d 84 24 f8 fe ff ff 	lea	rax, [rsp - 264]
 103edf1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 103edf5:	0f 86 d2 0c 00 00 	jbe	3282 <_runtime.newstack+0xced>
 103edfb:	48 81 ec 88 01 00 00 	sub	rsp, 392
 103ee02:	48 89 ac 24 80 01 00 00 	mov	qword ptr [rsp + 384], rbp
 103ee0a:	48 8d ac 24 80 01 00 00 	lea	rbp, [rsp + 384]
 103ee12:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 103ee1b:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103ee1f:	48 8b 51 18 	mov	rdx, qword ptr [rcx + 24]
 103ee23:	48 89 d3 	mov	rbx, rdx
 103ee26:	48 81 7a 10 2e fb ff ff 	cmp	qword ptr [rdx + 16], -1234
 103ee2e:	0f 84 7f 0c 00 00 	je	3199 <_runtime.newstack+0xcd3>
 103ee34:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 103ee3c:	48 8b b1 c0 00 00 00 	mov	rsi, qword ptr [rcx + 192]
 103ee43:	48 89 b4 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rsi
 103ee4b:	48 39 f2 	cmp	rdx, rsi
 103ee4e:	0f 85 ce 0a 00 00 	jne	2766 <_runtime.newstack+0xb42>
 103ee54:	80 be b7 00 00 00 00 	cmp	byte ptr [rsi + 183], 0
 103ee5b:	0f 85 70 04 00 00 	jne	1136 <_runtime.newstack+0x4f1>
 103ee61:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 103ee65:	48 89 94 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rdx
 103ee6d:	0f 10 41 10 	movups	xmm0, xmmword ptr [rcx + 16]
 103ee71:	0f 11 84 24 e0 00 00 00 	movups	xmmword ptr [rsp + 224], xmm0
 103ee79:	0f 10 41 20 	movups	xmm0, xmmword ptr [rcx + 32]
 103ee7d:	0f 11 84 24 f0 00 00 00 	movups	xmmword ptr [rsp + 240], xmm0
 103ee85:	0f 10 41 30 	movups	xmm0, xmmword ptr [rcx + 48]
 103ee89:	0f 11 84 24 00 01 00 00 	movups	xmmword ptr [rsp + 256], xmm0
 103ee91:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103ee95:	48 c7 41 10 00 00 00 00 	mov	qword ptr [rcx + 16], 0
 103ee9d:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103eea1:	48 c7 41 30 00 00 00 00 	mov	qword ptr [rcx + 48], 0
 103eea9:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103eead:	48 c7 41 08 00 00 00 00 	mov	qword ptr [rcx + 8], 0
 103eeb5:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103eeb9:	48 c7 41 18 00 00 00 00 	mov	qword ptr [rcx + 24], 0
 103eec1:	48 8b 4e 10 	mov	rcx, qword ptr [rsi + 16]
 103eec5:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 103eecd:	48 81 f9 de fa ff ff 	cmp	rcx, -1314
 103eed4:	75 3d 	jne	61 <_runtime.newstack+0x133>
 103eed6:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 103eeda:	83 ba 08 01 00 00 00 	cmp	dword ptr [rdx + 264], 0
 103eee1:	0f 85 b3 03 00 00 	jne	947 <_runtime.newstack+0x4ba>
 103eee7:	83 ba f0 00 00 00 00 	cmp	dword ptr [rdx + 240], 0
 103eeee:	0f 85 a6 03 00 00 	jne	934 <_runtime.newstack+0x4ba>
 103eef4:	48 83 ba 00 01 00 00 00 	cmp	qword ptr [rdx + 256], 0
 103eefc:	0f 85 98 03 00 00 	jne	920 <_runtime.newstack+0x4ba>
 103ef02:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 103ef09:	83 7a 04 01 	cmp	dword ptr [rdx + 4], 1
 103ef0d:	0f 85 87 03 00 00 	jne	903 <_runtime.newstack+0x4ba>
 103ef13:	48 8b 16 	mov	rdx, qword ptr [rsi]
 103ef16:	48 85 d2 	test	rdx, rdx
 103ef19:	0f 84 ff 06 00 00 	je	1791 <_runtime.newstack+0x83e>
 103ef1f:	48 8b 5e 38 	mov	rbx, qword ptr [rsi + 56]
 103ef23:	48 8d 7b f8 	lea	rdi, [rbx - 8]
 103ef27:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 103ef2c:	48 39 d7 	cmp	rdi, rdx
 103ef2f:	0f 82 33 01 00 00 	jb	307 <_runtime.newstack+0x288>
 103ef35:	48 39 3e 	cmp	qword ptr [rsi], rdi
 103ef38:	0f 87 a2 05 00 00 	ja	1442 <_runtime.newstack+0x700>
 103ef3e:	48 81 f9 de fa ff ff 	cmp	rcx, -1314
 103ef45:	75 47 	jne	71 <_runtime.newstack+0x1ae>
 103ef47:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103ef4b:	48 39 30 	cmp	qword ptr [rax], rsi
 103ef4e:	0f 84 73 05 00 00 	je	1395 <_runtime.newstack+0x6e7>
 103ef54:	48 83 b8 d0 00 00 00 00 	cmp	qword ptr [rax + 208], 0
 103ef5c:	75 0d 	jne	13 <_runtime.newstack+0x18b>
 103ef5e:	83 b8 08 01 00 00 00 	cmp	dword ptr [rax + 264], 0
 103ef65:	0f 84 43 05 00 00 	je	1347 <_runtime.newstack+0x6ce>
 103ef6b:	80 be b3 00 00 00 00 	cmp	byte ptr [rsi + 179], 0
 103ef72:	0f 85 ce 00 00 00 	jne	206 <_runtime.newstack+0x266>
 103ef78:	80 be b2 00 00 00 00 	cmp	byte ptr [rsi + 178], 0
 103ef7f:	0f 85 ab 00 00 00 	jne	171 <_runtime.newstack+0x250>
 103ef85:	48 89 34 24 	mov	qword ptr [rsp], rsi
 103ef89:	e8 32 2b ff ff 	call	-54478 <_runtime.gopreempt_m>
 103ef8e:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103ef96:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103ef9a:	48 2b 08 	sub	rcx, qword ptr [rax]
 103ef9d:	48 d1 e1 	shl	rcx
 103efa0:	48 39 0d 09 c2 08 00 	cmp	qword ptr [rip + 573961], rcx
 103efa7:	0f 82 df 03 00 00 	jb	991 <_runtime.newstack+0x5ac>
 103efad:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 103efb5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103efb9:	48 b9 02 00 00 00 08 00 00 00 	movabs	rcx, 34359738370
 103efc3:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103efc8:	e8 43 e3 fe ff 	call	-72893 <_runtime.casgstatus>
 103efcd:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103efd5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103efd9:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 103efe1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103efe6:	e8 a5 fa ff ff 	call	-1371 <_runtime.copystack>
 103efeb:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103eff3:	48 89 04 24 	mov	qword ptr [rsp], rax
 103eff7:	48 b9 08 00 00 00 02 00 00 00 	movabs	rcx, 8589934600
 103f001:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103f006:	e8 05 e3 fe ff 	call	-72955 <_runtime.casgstatus>
 103f00b:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103f013:	48 83 c0 38 	add	rax, 56
 103f017:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f01b:	e8 80 19 01 00 	call	72064 <_runtime.gogo>
 103f020:	48 8b ac 24 80 01 00 00 	mov	rbp, qword ptr [rsp + 384]
 103f028:	48 81 c4 88 01 00 00 	add	rsp, 392
 103f02f:	c3 	ret
 103f030:	48 89 34 24 	mov	qword ptr [rsp], rsi
 103f034:	e8 17 2b ff ff 	call	-54505 <_runtime.preemptPark>
 103f039:	48 8b b4 24 d0 00 00 00 	mov	rsi, qword ptr [rsp + 208]
 103f041:	e9 3f ff ff ff 	jmp	-193 <_runtime.newstack+0x1a5>
 103f046:	c6 86 b3 00 00 00 00 	mov	byte ptr [rsi + 179], 0
 103f04d:	48 89 34 24 	mov	qword ptr [rsp], rsi
 103f051:	e8 8a 0a 00 00 	call	2698 <_runtime.shrinkstack>
 103f056:	48 8b b4 24 d0 00 00 00 	mov	rsi, qword ptr [rsp + 208]
 103f05e:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 103f063:	e9 10 ff ff ff 	jmp	-240 <_runtime.newstack+0x198>
 103f068:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 103f070:	48 89 9c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbx
 103f078:	48 8b 46 08 	mov	rax, qword ptr [rsi + 8]
 103f07c:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 103f081:	48 8b 8c 24 e0 00 00 00 	mov	rcx, qword ptr [rsp + 224]
 103f089:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 103f08e:	48 8b 94 24 d8 00 00 00 	mov	rdx, qword ptr [rsp + 216]
 103f096:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 103f09b:	48 8b 9c 24 00 01 00 00 	mov	rbx, qword ptr [rsp + 256]
 103f0a3:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 103f0a8:	48 8b 7e 40 	mov	rdi, qword ptr [rsi + 64]
 103f0ac:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 103f0b1:	4c 8b 46 60 	mov	r8, qword ptr [rsi + 96]
 103f0b5:	4c 89 44 24 50 	mov	qword ptr [rsp + 80], r8
 103f0ba:	4c 8b 4e 50 	mov	r9, qword ptr [rsi + 80]
 103f0be:	4c 89 8c 24 c8 00 00 00 	mov	qword ptr [rsp + 200], r9
 103f0c6:	e8 d5 b3 fe ff 	call	-85035 <_runtime.printlock>
 103f0cb:	48 8d 05 9e 53 03 00 	lea	rax, [rip + 218014]
 103f0d2:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f0d6:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 103f0df:	e8 fc bc fe ff 	call	-82692 <_runtime.printstring>
 103f0e4:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103f0e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f0ed:	e8 9e bb fe ff 	call	-83042 <_runtime.printhex>
 103f0f2:	48 8d 05 0e 3f 03 00 	lea	rax, [rip + 212750]
 103f0f9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f0fd:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 103f106:	e8 d5 bc fe ff 	call	-82731 <_runtime.printstring>
 103f10b:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103f113:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f117:	e8 74 bb fe ff 	call	-83084 <_runtime.printhex>
 103f11c:	48 8d 05 51 3b 03 00 	lea	rax, [rip + 211793]
 103f123:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f127:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f130:	e8 ab bc fe ff 	call	-82773 <_runtime.printstring>
 103f135:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103f13a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f13e:	e8 4d bb fe ff 	call	-83123 <_runtime.printhex>
 103f143:	48 8d 05 e9 47 03 00 	lea	rax, [rip + 215017]
 103f14a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f14e:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 103f157:	e8 84 bc fe ff 	call	-82812 <_runtime.printstring>
 103f15c:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103f161:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f165:	e8 26 bb fe ff 	call	-83162 <_runtime.printhex>
 103f16a:	48 8d 05 7a 3b 03 00 	lea	rax, [rip + 211834]
 103f171:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f175:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f17e:	e8 5d bc fe ff 	call	-82851 <_runtime.printstring>
 103f183:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103f188:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f18c:	e8 ff ba fe ff 	call	-83201 <_runtime.printhex>
 103f191:	48 8d 05 47 3b 03 00 	lea	rax, [rip + 211783]
 103f198:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f19c:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f1a5:	e8 36 bc fe ff 	call	-82890 <_runtime.printstring>
 103f1aa:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103f1af:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f1b3:	e8 d8 ba fe ff 	call	-83240 <_runtime.printhex>
 103f1b8:	48 8d 05 08 46 03 00 	lea	rax, [rip + 214536]
 103f1bf:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f1c3:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 103f1cc:	e8 0f bc fe ff 	call	-82929 <_runtime.printstring>
 103f1d1:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103f1d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f1da:	e8 b1 ba fe ff 	call	-83279 <_runtime.printhex>
 103f1df:	48 8d 05 05 3b 03 00 	lea	rax, [rip + 211717]
 103f1e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f1ea:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f1f3:	e8 e8 bb fe ff 	call	-82968 <_runtime.printstring>
 103f1f8:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103f200:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f204:	e8 87 ba fe ff 	call	-83321 <_runtime.printhex>
 103f209:	48 8d 05 cf 3a 03 00 	lea	rax, [rip + 211663]
 103f210:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f214:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f21d:	e8 be bb fe ff 	call	-83010 <_runtime.printstring>
 103f222:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103f227:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f22b:	e8 60 ba fe ff 	call	-83360 <_runtime.printhex>
 103f230:	48 8d 05 d5 3b 03 00 	lea	rax, [rip + 211925]
 103f237:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f23b:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 103f244:	e8 97 bb fe ff 	call	-83049 <_runtime.printstring>
 103f249:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103f251:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f255:	e8 46 bb fe ff 	call	-83130 <_runtime.printpointer>
 103f25a:	48 8d 05 27 3a 03 00 	lea	rax, [rip + 211495]
 103f261:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f265:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f26e:	e8 6d bb fe ff 	call	-83091 <_runtime.printstring>
 103f273:	e8 a8 b2 fe ff 	call	-85336 <_runtime.printunlock>
 103f278:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103f280:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 103f288:	48 8b b4 24 d0 00 00 00 	mov	rsi, qword ptr [rsp + 208]
 103f290:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 103f295:	e9 9b fc ff ff 	jmp	-869 <_runtime.newstack+0x155>
 103f29a:	48 8b 06 	mov	rax, qword ptr [rsi]
 103f29d:	48 05 80 03 00 00 	add	rax, 896
 103f2a3:	48 89 46 10 	mov	qword ptr [rsi + 16], rax
 103f2a7:	48 8d 46 38 	lea	rax, [rsi + 56]
 103f2ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f2af:	e8 ec 16 01 00 	call	71404 <_runtime.gogo>
 103f2b4:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103f2bc:	48 8b 8c 24 90 00 00 00 	mov	rcx, qword ptr [rsp + 144]
 103f2c4:	48 8b b4 24 d0 00 00 00 	mov	rsi, qword ptr [rsp + 208]
 103f2cc:	e9 42 fc ff ff 	jmp	-958 <_runtime.newstack+0x133>
 103f2d1:	48 8b 41 08 	mov	rax, qword ptr [rcx + 8]
 103f2d5:	48 89 84 24 10 01 00 00 	mov	qword ptr [rsp + 272], rax
 103f2dd:	0f 10 41 10 	movups	xmm0, xmmword ptr [rcx + 16]
 103f2e1:	0f 11 84 24 18 01 00 00 	movups	xmmword ptr [rsp + 280], xmm0
 103f2e9:	0f 10 41 20 	movups	xmm0, xmmword ptr [rcx + 32]
 103f2ed:	0f 11 84 24 28 01 00 00 	movups	xmmword ptr [rsp + 296], xmm0
 103f2f5:	0f 10 41 30 	movups	xmm0, xmmword ptr [rcx + 48]
 103f2f9:	0f 11 84 24 38 01 00 00 	movups	xmmword ptr [rsp + 312], xmm0
 103f301:	48 8b 84 24 10 01 00 00 	mov	rax, qword ptr [rsp + 272]
 103f309:	48 89 46 70 	mov	qword ptr [rsi + 112], rax
 103f30d:	48 8b 84 24 18 01 00 00 	mov	rax, qword ptr [rsp + 280]
 103f315:	48 89 46 78 	mov	qword ptr [rsi + 120], rax
 103f319:	48 8b 46 40 	mov	rax, qword ptr [rsi + 64]
 103f31d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f321:	e8 4a 28 00 00 	call	10314 <_runtime.findfunc>
 103f326:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 103f32b:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 103f330:	48 85 c9 	test	rcx, rcx
 103f333:	75 1b 	jne	27 <_runtime.newstack+0x570>
 103f335:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 103f33d:	b8 09 00 00 00 	mov	eax, 9
 103f342:	48 8d 0d bf 3d 03 00 	lea	rcx, [rip + 212415]
 103f349:	31 db 	xor	ebx, ebx
 103f34b:	e9 e7 02 00 00 	jmp	743 <_runtime.newstack+0x857>
 103f350:	48 89 8c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rcx
 103f358:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103f35c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103f361:	e8 5a 2f 00 00 	call	12122 <_runtime.funcname>
 103f366:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103f36b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 103f370:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 103f378:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 103f37c:	48 8b b4 24 c0 00 00 00 	mov	rsi, qword ptr [rsp + 192]
 103f384:	48 2b 1e 	sub	rbx, qword ptr [rsi]
 103f387:	e9 ab 02 00 00 	jmp	683 <_runtime.newstack+0x857>
 103f38c:	e8 0f b1 fe ff 	call	-85745 <_runtime.printlock>
 103f391:	48 8d 05 73 6b 03 00 	lea	rax, [rip + 224115]
 103f398:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f39c:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 103f3a5:	e8 36 ba fe ff 	call	-83402 <_runtime.printstring>
 103f3aa:	48 8b 05 ff bd 08 00 	mov	rax, qword ptr [rip + 572927]
 103f3b1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f3b5:	e8 66 b7 fe ff 	call	-84122 <_runtime.printuint>
 103f3ba:	48 8d 05 8e 41 03 00 	lea	rax, [rip + 213390]
 103f3c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f3c5:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 103f3ce:	e8 0d ba fe ff 	call	-83443 <_runtime.printstring>
 103f3d3:	e8 48 b1 fe ff 	call	-85688 <_runtime.printunlock>
 103f3d8:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103f3e0:	48 8b 08 	mov	rcx, qword ptr [rax]
 103f3e3:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 103f3eb:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 103f3ef:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 103f3f7:	e8 a4 b0 fe ff 	call	-85852 <_runtime.printlock>
 103f3fc:	48 8d 05 0c 42 03 00 	lea	rax, [rip + 213516]
 103f403:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f407:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 103f410:	e8 cb b9 fe ff 	call	-83509 <_runtime.printstring>
 103f415:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103f41a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f41e:	e8 6d b8 fe ff 	call	-83859 <_runtime.printhex>
 103f423:	48 8d 05 dd 3b 03 00 	lea	rax, [rip + 211933]
 103f42a:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f42e:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 103f437:	e8 a4 b9 fe ff 	call	-83548 <_runtime.printstring>
 103f43c:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103f444:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f448:	e8 43 b8 fe ff 	call	-83901 <_runtime.printhex>
 103f44d:	48 8d 05 20 38 03 00 	lea	rax, [rip + 210976]
 103f454:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f458:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f461:	e8 7a b9 fe ff 	call	-83590 <_runtime.printstring>
 103f466:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103f46e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f472:	e8 19 b8 fe ff 	call	-83943 <_runtime.printhex>
 103f477:	48 8d 05 04 38 03 00 	lea	rax, [rip + 210948]
 103f47e:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f482:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f48b:	e8 50 b9 fe ff 	call	-83632 <_runtime.printstring>
 103f490:	e8 8b b0 fe ff 	call	-85877 <_runtime.printunlock>
 103f495:	48 8d 05 42 44 03 00 	lea	rax, [rip + 214082]
 103f49c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f4a0:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 103f4a9:	e8 b2 98 fe ff 	call	-91982 <_runtime.throw>
 103f4ae:	48 8d 05 08 6c 03 00 	lea	rax, [rip + 224264]
 103f4b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f4b9:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 103f4c2:	e8 99 98 fe ff 	call	-92007 <_runtime.throw>
 103f4c7:	48 8d 05 db 4b 03 00 	lea	rax, [rip + 216027]
 103f4ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f4d2:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 103f4db:	e8 80 98 fe ff 	call	-92032 <_runtime.throw>
 103f4e0:	8b 86 90 00 00 00 	mov	eax, dword ptr [rsi + 144]
 103f4e6:	89 44 24 24 	mov	dword ptr [rsp + 36], eax
 103f4ea:	48 8b 8e 98 00 00 00 	mov	rcx, qword ptr [rsi + 152]
 103f4f1:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 103f4f6:	e8 a5 af fe ff 	call	-86107 <_runtime.printlock>
 103f4fb:	48 8d 05 01 41 03 00 	lea	rax, [rip + 213249]
 103f502:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f506:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 103f50f:	e8 cc b8 fe ff 	call	-83764 <_runtime.printstring>
 103f514:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103f51c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f520:	e8 7b b8 fe ff 	call	-83845 <_runtime.printpointer>
 103f525:	48 8d 05 96 39 03 00 	lea	rax, [rip + 211350]
 103f52c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f530:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103f539:	e8 a2 b8 fe ff 	call	-83806 <_runtime.printstring>
 103f53e:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 103f543:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f547:	e8 d4 b6 fe ff 	call	-84268 <_runtime.printint>
 103f54c:	48 8d 05 8a 41 03 00 	lea	rax, [rip + 213386]
 103f553:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f557:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 103f560:	e8 7b b8 fe ff 	call	-83845 <_runtime.printstring>
 103f565:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 103f569:	89 c0 	mov	eax, eax
 103f56b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f56f:	e8 1c b7 fe ff 	call	-84196 <_runtime.printhex>
 103f574:	48 8d 05 03 37 03 00 	lea	rax, [rip + 210691]
 103f57b:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f57f:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f588:	e8 53 b8 fe ff 	call	-83885 <_runtime.printstring>
 103f58d:	e8 8e af fe ff 	call	-86130 <_runtime.printunlock>
 103f592:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103f59a:	48 8b 00 	mov	rax, qword ptr [rax]
 103f59d:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 103f5a5:	e8 f6 ae fe ff 	call	-86282 <_runtime.printlock>
 103f5aa:	48 8d 05 f0 64 03 00 	lea	rax, [rip + 222448]
 103f5b1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f5b5:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 103f5be:	e8 1d b8 fe ff 	call	-83939 <_runtime.printstring>
 103f5c3:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103f5c8:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f5cc:	e8 bf b6 fe ff 	call	-84289 <_runtime.printhex>
 103f5d1:	48 8d 05 c1 36 03 00 	lea	rax, [rip + 210625]
 103f5d8:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f5dc:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 103f5e5:	e8 f6 b7 fe ff 	call	-83978 <_runtime.printstring>
 103f5ea:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103f5f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f5f6:	e8 95 b6 fe ff 	call	-84331 <_runtime.printhex>
 103f5fb:	e8 30 b1 fe ff 	call	-85712 <_runtime.printnl>
 103f600:	e8 1b af fe ff 	call	-86245 <_runtime.printunlock>
 103f605:	48 8d 05 c0 5f 03 00 	lea	rax, [rip + 221120]
 103f60c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f610:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 103f619:	e8 42 97 fe ff 	call	-92350 <_runtime.throw>
 103f61e:	48 8d 05 71 56 03 00 	lea	rax, [rip + 218737]
 103f625:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f629:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 103f632:	e8 29 97 fe ff 	call	-92375 <_runtime.throw>
 103f637:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 103f63c:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 103f644:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 103f649:	48 8b 72 38 	mov	rsi, qword ptr [rdx + 56]
 103f64d:	48 89 b4 24 88 00 00 00 	mov	qword ptr [rsp + 136], rsi
 103f655:	48 8b 3a 	mov	rdi, qword ptr [rdx]
 103f658:	48 89 bc 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdi
 103f660:	4c 8b 42 08 	mov	r8, qword ptr [rdx + 8]
 103f664:	4c 89 44 24 78 	mov	qword ptr [rsp + 120], r8
 103f669:	4c 8b 8c 24 18 01 00 00 	mov	r9, qword ptr [rsp + 280]
 103f671:	4c 89 4c 24 70 	mov	qword ptr [rsp + 112], r9
 103f676:	4c 8b 94 24 10 01 00 00 	mov	r10, qword ptr [rsp + 272]
 103f67e:	4c 89 54 24 68 	mov	qword ptr [rsp + 104], r10
 103f683:	4c 8b 9c 24 38 01 00 00 	mov	r11, qword ptr [rsp + 312]
 103f68b:	4c 89 5c 24 60 	mov	qword ptr [rsp + 96], r11
 103f690:	4c 8b 62 40 	mov	r12, qword ptr [rdx + 64]
 103f694:	4c 89 64 24 58 	mov	qword ptr [rsp + 88], r12
 103f699:	4c 8b 6a 60 	mov	r13, qword ptr [rdx + 96]
 103f69d:	4c 89 6c 24 50 	mov	qword ptr [rsp + 80], r13
 103f6a2:	4c 8b 72 50 	mov	r14, qword ptr [rdx + 80]
 103f6a6:	4c 89 b4 24 c8 00 00 00 	mov	qword ptr [rsp + 200], r14
 103f6ae:	e8 ed ad fe ff 	call	-86547 <_runtime.printlock>
 103f6b3:	48 8d 05 a1 4d 03 00 	lea	rax, [rip + 216481]
 103f6ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f6be:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 103f6c7:	e8 14 b7 fe ff 	call	-84204 <_runtime.printstring>
 103f6cc:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 103f6d4:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f6d8:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103f6dd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103f6e2:	e8 f9 b6 fe ff 	call	-84231 <_runtime.printstring>
 103f6e7:	48 8d 05 6d 35 03 00 	lea	rax, [rip + 210285]
 103f6ee:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f6f2:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 103f6fb:	e8 e0 b6 fe ff 	call	-84256 <_runtime.printstring>
 103f700:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 103f705:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f709:	e8 82 b5 fe ff 	call	-84606 <_runtime.printhex>
 103f70e:	48 8d 05 da 35 03 00 	lea	rax, [rip + 210394]
 103f715:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f719:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f722:	e8 b9 b6 fe ff 	call	-84295 <_runtime.printstring>
 103f727:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103f72f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f733:	e8 58 b5 fe ff 	call	-84648 <_runtime.printhex>
 103f738:	48 8d 05 c8 38 03 00 	lea	rax, [rip + 211144]
 103f73f:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f743:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 103f74c:	e8 8f b6 fe ff 	call	-84337 <_runtime.printstring>
 103f751:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 103f759:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f75d:	e8 2e b5 fe ff 	call	-84690 <_runtime.printhex>
 103f762:	48 8d 05 0b 35 03 00 	lea	rax, [rip + 210187]
 103f769:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f76d:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f776:	e8 65 b6 fe ff 	call	-84379 <_runtime.printstring>
 103f77b:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 103f780:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f784:	e8 07 b5 fe ff 	call	-84729 <_runtime.printhex>
 103f789:	48 8d 05 a3 41 03 00 	lea	rax, [rip + 213411]
 103f790:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f794:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 103f79d:	e8 3e b6 fe ff 	call	-84418 <_runtime.printstring>
 103f7a2:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 103f7a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f7ab:	e8 e0 b4 fe ff 	call	-84768 <_runtime.printhex>
 103f7b0:	48 8d 05 34 35 03 00 	lea	rax, [rip + 210228]
 103f7b7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f7bb:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f7c4:	e8 17 b6 fe ff 	call	-84457 <_runtime.printstring>
 103f7c9:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 103f7ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f7d2:	e8 b9 b4 fe ff 	call	-84807 <_runtime.printhex>
 103f7d7:	48 8d 05 01 35 03 00 	lea	rax, [rip + 210177]
 103f7de:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f7e2:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f7eb:	e8 f0 b5 fe ff 	call	-84496 <_runtime.printstring>
 103f7f0:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103f7f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f7f9:	e8 92 b4 fe ff 	call	-84846 <_runtime.printhex>
 103f7fe:	48 8d 05 c2 3f 03 00 	lea	rax, [rip + 212930]
 103f805:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f809:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 103f812:	e8 c9 b5 fe ff 	call	-84535 <_runtime.printstring>
 103f817:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 103f81c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f820:	e8 6b b4 fe ff 	call	-84885 <_runtime.printhex>
 103f825:	48 8d 05 bf 34 03 00 	lea	rax, [rip + 210111]
 103f82c:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f830:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f839:	e8 a2 b5 fe ff 	call	-84574 <_runtime.printstring>
 103f83e:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 103f846:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f84a:	e8 41 b4 fe ff 	call	-84927 <_runtime.printhex>
 103f84f:	48 8d 05 89 34 03 00 	lea	rax, [rip + 210057]
 103f856:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f85a:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f863:	e8 78 b5 fe ff 	call	-84616 <_runtime.printstring>
 103f868:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 103f86d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f871:	e8 1a b4 fe ff 	call	-84966 <_runtime.printhex>
 103f876:	48 8d 05 8f 35 03 00 	lea	rax, [rip + 210319]
 103f87d:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f881:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 103f88a:	e8 51 b5 fe ff 	call	-84655 <_runtime.printstring>
 103f88f:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 103f897:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f89b:	e8 00 b5 fe ff 	call	-84736 <_runtime.printpointer>
 103f8a0:	48 8d 05 e1 33 03 00 	lea	rax, [rip + 209889]
 103f8a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f8ab:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 103f8b4:	e8 27 b5 fe ff 	call	-84697 <_runtime.printstring>
 103f8b9:	e8 62 ac fe ff 	call	-86942 <_runtime.printunlock>
 103f8be:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103f8c6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103f8ca:	c6 80 29 01 00 00 02 	mov	byte ptr [rax + 297], 2
 103f8d1:	48 8b 84 24 18 01 00 00 	mov	rax, qword ptr [rsp + 280]
 103f8d9:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f8dd:	48 8b 84 24 10 01 00 00 	mov	rax, qword ptr [rsp + 272]
 103f8e5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103f8ea:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 103f8f2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103f8f7:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103f8ff:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103f904:	e8 b7 9c 00 00 	call	40119 <_runtime.traceback>
 103f909:	48 8d 05 2e 63 03 00 	lea	rax, [rip + 221998]
 103f910:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f914:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 103f91d:	e8 3e 94 fe ff 	call	-93122 <_runtime.throw>
 103f922:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 103f92a:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 103f92f:	48 8b 01 	mov	rax, qword ptr [rcx]
 103f932:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 103f93a:	48 8b 51 50 	mov	rdx, qword ptr [rcx + 80]
 103f93e:	48 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdx
 103f946:	e8 55 ab fe ff 	call	-87211 <_runtime.printlock>
 103f94b:	48 8d 05 ac 62 03 00 	lea	rax, [rip + 221868]
 103f952:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f956:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 103f95f:	e8 7c b4 fe ff 	call	-84868 <_runtime.printstring>
 103f964:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103f969:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f96d:	e8 1e b3 fe ff 	call	-85218 <_runtime.printhex>
 103f972:	48 8d 05 96 33 03 00 	lea	rax, [rip + 209814]
 103f979:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f97d:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 103f986:	e8 55 b4 fe ff 	call	-84907 <_runtime.printstring>
 103f98b:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 103f993:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f997:	e8 04 b4 fe ff 	call	-84988 <_runtime.printpointer>
 103f99c:	48 8d 05 0b 37 03 00 	lea	rax, [rip + 210699]
 103f9a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f9a7:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 103f9b0:	e8 2b b4 fe ff 	call	-84949 <_runtime.printstring>
 103f9b5:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103f9bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f9c1:	e8 da b3 fe ff 	call	-85030 <_runtime.printpointer>
 103f9c6:	48 8d 05 e0 34 03 00 	lea	rax, [rip + 210144]
 103f9cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f9d1:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 103f9da:	e8 01 b4 fe ff 	call	-84991 <_runtime.printstring>
 103f9df:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 103f9e7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f9eb:	e8 b0 b3 fe ff 	call	-85072 <_runtime.printpointer>
 103f9f0:	48 8d 05 b0 3a 03 00 	lea	rax, [rip + 211632]
 103f9f7:	48 89 04 24 	mov	qword ptr [rsp], rax
 103f9fb:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 103fa04:	e8 d7 b3 fe ff 	call	-85033 <_runtime.printstring>
 103fa09:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 103fa11:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fa15:	e8 86 b3 fe ff 	call	-85114 <_runtime.printpointer>
 103fa1a:	e8 11 ad fe ff 	call	-86767 <_runtime.printnl>
 103fa1f:	e8 fc aa fe ff 	call	-87300 <_runtime.printunlock>
 103fa24:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 103fa2c:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 103fa30:	84 00 	test	byte ptr [rax], al
 103fa32:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103fa36:	48 89 8c 24 48 01 00 00 	mov	qword ptr [rsp + 328], rcx
 103fa3e:	0f 10 40 10 	movups	xmm0, xmmword ptr [rax + 16]
 103fa42:	0f 11 84 24 50 01 00 00 	movups	xmmword ptr [rsp + 336], xmm0
 103fa4a:	0f 10 40 20 	movups	xmm0, xmmword ptr [rax + 32]
 103fa4e:	0f 11 84 24 60 01 00 00 	movups	xmmword ptr [rsp + 352], xmm0
 103fa56:	0f 10 40 30 	movups	xmm0, xmmword ptr [rax + 48]
 103fa5a:	0f 11 84 24 70 01 00 00 	movups	xmmword ptr [rsp + 368], xmm0
 103fa62:	48 8b 84 24 50 01 00 00 	mov	rax, qword ptr [rsp + 336]
 103fa6a:	48 8b 8c 24 58 01 00 00 	mov	rcx, qword ptr [rsp + 344]
 103fa72:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fa76:	48 8b 84 24 48 01 00 00 	mov	rax, qword ptr [rsp + 328]
 103fa7e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103fa83:	48 8b 84 24 70 01 00 00 	mov	rax, qword ptr [rsp + 368]
 103fa8b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103fa90:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 103fa95:	e8 26 9b 00 00 	call	39718 <_runtime.traceback>
 103fa9a:	48 8d 05 fd 68 03 00 	lea	rax, [rip + 223485]
 103faa1:	48 89 04 24 	mov	qword ptr [rsp], rax
 103faa5:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 103faae:	e8 ad 92 fe ff 	call	-93523 <_runtime.throw>
 103fab3:	48 8d 05 1f 4f 03 00 	lea	rax, [rip + 216863]
 103faba:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fabe:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 103fac7:	e8 94 92 fe ff 	call	-93548 <_runtime.throw>
 103facc:	90 	nop
 103facd:	e8 fe 10 01 00 	call	69886 <_runtime.morestack_noctxt>
 103fad2:	e9 09 f3 ff ff 	jmp	-3319 <_runtime.newstack>
 103fad7:	cc 	int3
 103fad8:	cc 	int3
 103fad9:	cc 	int3
 103fada:	cc 	int3
 103fadb:	cc 	int3
 103fadc:	cc 	int3
 103fadd:	cc 	int3
 103fade:	cc 	int3
 103fadf:	cc 	int3

_runtime.shrinkstack:
 103fae0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103fae9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103faed:	0f 86 a2 01 00 00 	jbe	418 <_runtime.shrinkstack+0x1b5>
 103faf3:	48 83 ec 20 	sub	rsp, 32
 103faf7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 103fafc:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 103fb01:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103fb06:	48 83 38 00 	cmp	qword ptr [rax], 0
 103fb0a:	0f 84 6b 01 00 00 	je	363 <_runtime.shrinkstack+0x19b>
 103fb10:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 103fb16:	0f ba e1 0c 	bt	ecx, 12
 103fb1a:	72 2f 	jb	47 <_runtime.shrinkstack+0x6b>
 103fb1c:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 103fb25:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 103fb29:	48 8b 9b c0 00 00 00 	mov	rbx, qword ptr [rbx + 192]
 103fb30:	48 39 d8 	cmp	rax, rbx
 103fb33:	0f 85 29 01 00 00 	jne	297 <_runtime.shrinkstack+0x182>
 103fb39:	48 39 da 	cmp	rdx, rbx
 103fb3c:	0f 84 20 01 00 00 	je	288 <_runtime.shrinkstack+0x182>
 103fb42:	83 f9 02 	cmp	ecx, 2
 103fb45:	0f 85 17 01 00 00 	jne	279 <_runtime.shrinkstack+0x182>
 103fb4b:	48 83 78 70 00 	cmp	qword ptr [rax + 112], 0
 103fb50:	0f 85 f3 00 00 00 	jne	243 <_runtime.shrinkstack+0x169>
 103fb56:	80 b8 b4 00 00 00 00 	cmp	byte ptr [rax + 180], 0
 103fb5d:	0f 85 e6 00 00 00 	jne	230 <_runtime.shrinkstack+0x169>
 103fb63:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103fb6c:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 103fb70:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 103fb77:	75 12 	jne	18 <_runtime.shrinkstack+0xab>
 103fb79:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 103fb7d:	48 83 b9 e8 02 00 00 00 	cmp	qword ptr [rcx + 744], 0
 103fb85:	0f 85 a5 00 00 00 	jne	165 <_runtime.shrinkstack+0x150>
 103fb8b:	83 3d c6 7e 0b 00 00 	cmp	dword ptr [rip + 753350], 0
 103fb92:	0f 8f 8e 00 00 00 	jg	142 <_runtime.shrinkstack+0x146>
 103fb98:	48 8b 88 28 01 00 00 	mov	rcx, qword ptr [rax + 296]
 103fb9f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103fba3:	e8 c8 1f 00 00 	call	8136 <_runtime.findfunc>
 103fba8:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 103fbad:	48 85 c0 	test	rax, rax
 103fbb0:	74 06 	je	6 <_runtime.shrinkstack+0xd8>
 103fbb2:	80 78 24 0b 	cmp	byte ptr [rax + 36], 11
 103fbb6:	74 64 	je	100 <_runtime.shrinkstack+0x13c>
 103fbb8:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103fbbd:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 103fbc1:	48 8b 10 	mov	rdx, qword ptr [rax]
 103fbc4:	48 89 cb 	mov	rbx, rcx
 103fbc7:	48 29 d1 	sub	rcx, rdx
 103fbca:	48 89 ca 	mov	rdx, rcx
 103fbcd:	48 d1 e9 	shr	rcx
 103fbd0:	48 81 f9 00 08 00 00 	cmp	rcx, 2048
 103fbd7:	72 39 	jb	57 <_runtime.shrinkstack+0x132>
 103fbd9:	48 8b 70 38 	mov	rsi, qword ptr [rax + 56]
 103fbdd:	48 29 f3 	sub	rbx, rsi
 103fbe0:	48 81 c3 00 03 00 00 	add	rbx, 768
 103fbe7:	48 c1 ea 02 	shr	rdx, 2
 103fbeb:	48 39 d3 	cmp	rbx, rdx
 103fbee:	72 0a 	jb	10 <_runtime.shrinkstack+0x11a>
 103fbf0:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103fbf5:	48 83 c4 20 	add	rsp, 32
 103fbf9:	c3 	ret
 103fbfa:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fbfe:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103fc03:	e8 88 ee ff ff 	call	-4472 <_runtime.copystack>
 103fc08:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103fc0d:	48 83 c4 20 	add	rsp, 32
 103fc11:	c3 	ret
 103fc12:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103fc17:	48 83 c4 20 	add	rsp, 32
 103fc1b:	c3 	ret
 103fc1c:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103fc21:	48 83 c4 20 	add	rsp, 32
 103fc25:	c3 	ret
 103fc26:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 103fc2b:	48 83 c4 20 	add	rsp, 32
 103fc2f:	c3 	ret
 103fc30:	48 8d 05 c4 52 03 00 	lea	rax, [rip + 217796]
 103fc37:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fc3b:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 103fc44:	e8 17 91 fe ff 	call	-93929 <_runtime.throw>
 103fc49:	48 8d 05 5b 4d 03 00 	lea	rax, [rip + 216411]
 103fc50:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fc54:	48 c7 44 24 08 17 00 00 00 	mov	qword ptr [rsp + 8], 23
 103fc5d:	e8 fe 90 fe ff 	call	-93954 <_runtime.throw>
 103fc62:	48 8d 05 c9 4f 03 00 	lea	rax, [rip + 217033]
 103fc69:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fc6d:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 103fc76:	e8 e5 90 fe ff 	call	-93979 <_runtime.throw>
 103fc7b:	48 8d 05 d7 56 03 00 	lea	rax, [rip + 218839]
 103fc82:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fc86:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 103fc8f:	e8 cc 90 fe ff 	call	-94004 <_runtime.throw>
 103fc94:	90 	nop
 103fc95:	e8 36 0f 01 00 	call	69430 <_runtime.morestack_noctxt>
 103fc9a:	e9 41 fe ff ff 	jmp	-447 <_runtime.shrinkstack>
 103fc9f:	cc 	int3

_runtime.freeStackSpans:
 103fca0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103fca9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 103fcad:	0f 86 95 01 00 00 	jbe	405 <_runtime.freeStackSpans+0x1a8>
 103fcb3:	48 83 ec 70 	sub	rsp, 112
 103fcb7:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 103fcbc:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 103fcc1:	31 c0 	xor	eax, eax
 103fcc3:	e9 81 00 00 00 	jmp	129 <_runtime.freeStackSpans+0xa9>
 103fcc8:	48 89 d8 	mov	rax, rbx
 103fccb:	48 85 c0 	test	rax, rax
 103fcce:	74 63 	je	99 <_runtime.freeStackSpans+0x93>
 103fcd0:	48 8b 18 	mov	rbx, qword ptr [rax]
 103fcd3:	66 83 78 60 00 	cmp	word ptr [rax + 96], 0
 103fcd8:	75 ee 	jne	-18 <_runtime.freeStackSpans+0x28>
 103fcda:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 103fcdf:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 103fce4:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103fce8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103fced:	e8 5e ee fd ff 	call	-135586 <_runtime.(*mSpanList).remove>
 103fcf2:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 103fcf7:	48 c7 40 28 00 00 00 00 	mov	qword ptr [rax + 40], 0
 103fcff:	48 8d 0d fa 52 0a 00 	lea	rcx, [rip + 676602]
 103fd06:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 103fd0a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103fd0f:	48 8d 05 6a 89 0b 00 	lea	rax, [rip + 756074]
 103fd16:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 103fd1b:	e8 00 ea fd ff 	call	-136704 <_runtime.(*mheap).freeManual>
 103fd20:	48 8d 0d 39 e8 08 00 	lea	rcx, [rip + 583737]
 103fd27:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 103fd2c:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 103fd31:	eb 95 	jmp	-107 <_runtime.freeStackSpans+0x28>
 103fd33:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 103fd38:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fd3c:	e8 cf 85 fc ff 	call	-227889 <_runtime.unlock>
 103fd41:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103fd46:	48 ff c0 	inc	rax
 103fd49:	48 83 f8 04 	cmp	rax, 4
 103fd4d:	7d 4a 	jge	74 <_runtime.freeStackSpans+0xf9>
 103fd4f:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 103fd54:	48 c1 e0 06 	shl	rax, 6
 103fd58:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 103fd5d:	48 8d 15 fc e7 08 00 	lea	rdx, [rip + 583676]
 103fd64:	48 8d 1c 02 	lea	rbx, [rdx + rax]
 103fd68:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 103fd6d:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 103fd71:	e8 ba 83 fc ff 	call	-228422 <_runtime.lock>
 103fd76:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 103fd7b:	48 8d 0d de e7 08 00 	lea	rcx, [rip + 583646]
 103fd82:	48 8d 14 01 	lea	rdx, [rcx + rax]
 103fd86:	48 8d 52 08 	lea	rdx, [rdx + 8]
 103fd8a:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 103fd8f:	48 8b 44 01 08 	mov	rax, qword ptr [rcx + rax + 8]
 103fd94:	e9 32 ff ff ff 	jmp	-206 <_runtime.freeStackSpans+0x2b>
 103fd99:	48 8d 05 40 ed 08 00 	lea	rax, [rip + 585024]
 103fda0:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fda4:	e8 87 83 fc ff 	call	-228473 <_runtime.lock>
 103fda9:	31 c0 	xor	eax, eax
 103fdab:	eb 59 	jmp	89 <_runtime.freeStackSpans+0x166>
 103fdad:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 103fdb2:	48 8b 08 	mov	rcx, qword ptr [rax]
 103fdb5:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 103fdba:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 103fdbe:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103fdc3:	e8 88 ed fd ff 	call	-135800 <_runtime.(*mSpanList).remove>
 103fdc8:	48 8d 05 31 52 0a 00 	lea	rax, [rip + 676401]
 103fdcf:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fdd3:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 103fdd8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 103fddd:	48 8d 0d 9c 88 0b 00 	lea	rcx, [rip + 755868]
 103fde4:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 103fde9:	e8 32 e9 fd ff 	call	-136910 <_runtime.(*mheap).freeManual>
 103fdee:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 103fdf3:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 103fdf8:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 103fdfd:	48 85 c0 	test	rax, rax
 103fe00:	75 ab 	jne	-85 <_runtime.freeStackSpans+0x10d>
 103fe02:	48 8d 41 01 	lea	rax, [rcx + 1]
 103fe06:	48 83 f8 23 	cmp	rax, 35
 103fe0a:	7d 22 	jge	34 <_runtime.freeStackSpans+0x18e>
 103fe0c:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 103fe11:	48 89 c1 	mov	rcx, rax
 103fe14:	48 c1 e0 04 	shl	rax, 4
 103fe18:	48 8d 15 c9 ec 08 00 	lea	rdx, [rip + 584905]
 103fe1f:	48 8d 1c 02 	lea	rbx, [rdx + rax]
 103fe23:	48 89 5c 24 58 	mov	qword ptr [rsp + 88], rbx
 103fe28:	48 8b 04 02 	mov	rax, qword ptr [rdx + rax]
 103fe2c:	eb cf 	jmp	-49 <_runtime.freeStackSpans+0x15d>
 103fe2e:	48 8d 05 ab ec 08 00 	lea	rax, [rip + 584875]
 103fe35:	48 89 04 24 	mov	qword ptr [rsp], rax
 103fe39:	e8 d2 84 fc ff 	call	-228142 <_runtime.unlock>
 103fe3e:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 103fe43:	48 83 c4 70 	add	rsp, 112
 103fe47:	c3 	ret
 103fe48:	e8 83 0d 01 00 	call	68995 <_runtime.morestack_noctxt>
 103fe4d:	e9 4e fe ff ff 	jmp	-434 <_runtime.freeStackSpans>
 103fe52:	cc 	int3
 103fe53:	cc 	int3
 103fe54:	cc 	int3
 103fe55:	cc 	int3
 103fe56:	cc 	int3
 103fe57:	cc 	int3
 103fe58:	cc 	int3
 103fe59:	cc 	int3
 103fe5a:	cc 	int3
 103fe5b:	cc 	int3
 103fe5c:	cc 	int3
 103fe5d:	cc 	int3
 103fe5e:	cc 	int3
 103fe5f:	cc 	int3

_runtime.getStackMap:
 103fe60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 103fe69:	48 8d 44 24 b8 	lea	rax, [rsp - 72]
 103fe6e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 103fe72:	0f 86 71 08 00 00 	jbe	2161 <_runtime.getStackMap+0x889>
 103fe78:	48 81 ec c8 00 00 00 	sub	rsp, 200
 103fe7f:	48 89 ac 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rbp
 103fe87:	48 8d ac 24 c0 00 00 00 	lea	rbp, [rsp + 192]
 103fe8f:	48 c7 84 24 08 01 00 00 00 00 00 00 	mov	qword ptr [rsp + 264], 0
 103fe9b:	0f 57 c0 	xorps	xmm0, xmm0
 103fe9e:	0f 11 84 24 10 01 00 00 	movups	xmmword ptr [rsp + 272], xmm0
 103fea6:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 103feae:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 103feb2:	48 85 c9 	test	rcx, rcx
 103feb5:	0f 84 57 03 00 00 	je	855 <_runtime.getStackMap+0x3b2>
 103febb:	48 8b 10 	mov	rdx, qword ptr [rax]
 103febe:	48 89 94 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rdx
 103fec6:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 103feca:	48 89 9c 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rbx
 103fed2:	48 39 0a 	cmp	qword ptr [rdx], rcx
 103fed5:	0f 85 e0 02 00 00 	jne	736 <_runtime.getStackMap+0x35b>
 103fedb:	be ff ff ff ff 	mov	esi, 4294967295
 103fee0:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 103fee5:	83 fe ff 	cmp	esi, -1
 103fee8:	bf 00 00 00 00 	mov	edi, 0
 103feed:	0f 44 f7 	cmove	esi, edi
 103fef0:	89 74 24 3c 	mov	dword ptr [rsp + 60], esi
 103fef4:	4c 8b 40 38 	mov	r8, qword ptr [rax + 56]
 103fef8:	4c 2b 40 28 	sub	r8, qword ptr [rax + 40]
 103fefc:	4d 85 c0 	test	r8, r8
 103feff:	0f 86 ad 02 00 00 	jbe	685 <_runtime.getStackMap+0x352>
 103ff05:	4c 89 44 24 50 	mov	qword ptr [rsp + 80], r8
 103ff0a:	80 7a 24 11 	cmp	byte ptr [rdx + 36], 17
 103ff0e:	0f 84 e6 01 00 00 	je	486 <_runtime.getStackMap+0x29a>
 103ff14:	48 89 14 24 	mov	qword ptr [rsp], rdx
 103ff18:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 103ff1d:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 103ff22:	e8 59 2a 00 00 	call	10841 <_runtime.funcdata>
 103ff27:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103ff2c:	8b 4c 24 3c 	mov	ecx, dword ptr [rsp + 60]
 103ff30:	48 85 c0 	test	rax, rax
 103ff33:	0f 84 68 06 00 00 	je	1640 <_runtime.getStackMap+0x741>
 103ff39:	8b 10 	mov	edx, dword ptr [rax]
 103ff3b:	85 d2 	test	edx, edx
 103ff3d:	0f 8e 5e 06 00 00 	jle	1630 <_runtime.getStackMap+0x741>
 103ff43:	8b 58 04 	mov	ebx, dword ptr [rax + 4]
 103ff46:	85 db 	test	ebx, ebx
 103ff48:	0f 8e a3 01 00 00 	jle	419 <_runtime.getStackMap+0x291>
 103ff4e:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 103ff56:	89 4c 24 38 	mov	dword ptr [rsp + 56], ecx
 103ff5a:	85 c9 	test	ecx, ecx
 103ff5c:	0f 8c 13 05 00 00 	jl	1299 <_runtime.getStackMap+0x615>
 103ff62:	39 d1 	cmp	ecx, edx
 103ff64:	0f 8d 0b 05 00 00 	jge	1291 <_runtime.getStackMap+0x615>
 103ff6a:	90 	nop
 103ff6b:	8d 53 07 	lea	edx, [rbx + 7]
 103ff6e:	c1 fa 03 	sar	edx, 3
 103ff71:	0f af ca 	imul	ecx, edx
 103ff74:	48 63 c9 	movsxd	rcx, ecx
 103ff77:	48 8d 04 08 	lea	rax, [rax + rcx]
 103ff7b:	48 8d 40 08 	lea	rax, [rax + 8]
 103ff7f:	48 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rax
 103ff87:	89 5c 24 44 	mov	dword ptr [rsp + 68], ebx
 103ff8b:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 103ff93:	48 8b 51 48 	mov	rdx, qword ptr [rcx + 72]
 103ff97:	48 85 d2 	test	rdx, rdx
 103ff9a:	0f 86 48 01 00 00 	jbe	328 <_runtime.getStackMap+0x288>
 103ffa0:	48 8b 71 50 	mov	rsi, qword ptr [rcx + 80]
 103ffa4:	48 85 f6 	test	rsi, rsi
 103ffa7:	0f 84 ae 00 00 00 	je	174 <_runtime.getStackMap+0x1fb>
 103ffad:	8b 0e 	mov	ecx, dword ptr [rsi]
 103ffaf:	48 c1 ea 03 	shr	rdx, 3
 103ffb3:	39 ca 	cmp	edx, ecx
 103ffb5:	0f 4c ca 	cmovl	ecx, edx
 103ffb8:	48 8b 56 08 	mov	rdx, qword ptr [rsi + 8]
 103ffbc:	89 4c 24 40 	mov	dword ptr [rsp + 64], ecx
 103ffc0:	48 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdx
 103ffc8:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 103ffd0:	48 89 04 24 	mov	qword ptr [rsp], rax
 103ffd4:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 103ffdc:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 103ffe1:	c6 44 24 10 03 	mov	byte ptr [rsp + 16], 3
 103ffe6:	e8 95 29 00 00 	call	10645 <_runtime.funcdata>
 103ffeb:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 103fff0:	48 85 c0 	test	rax, rax
 103fff3:	74 20 	je	32 <_runtime.getStackMap+0x1b5>
 103fff5:	48 8b 08 	mov	rcx, qword ptr [rax]
 103fff8:	90 	nop
 103fff9:	48 83 c0 08 	add	rax, 8
 103fffd:	48 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], rax
 1040005:	48 89 8c 24 10 01 00 00 	mov	qword ptr [rsp + 272], rcx
 104000d:	48 89 8c 24 18 01 00 00 	mov	qword ptr [rsp + 280], rcx
 1040015:	8b 44 24 44 	mov	eax, dword ptr [rsp + 68]
 1040019:	89 84 24 e8 00 00 00 	mov	dword ptr [rsp + 232], eax
 1040020:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1040028:	48 89 84 24 f0 00 00 00 	mov	qword ptr [rsp + 240], rax
 1040030:	8b 44 24 40 	mov	eax, dword ptr [rsp + 64]
 1040034:	89 84 24 f8 00 00 00 	mov	dword ptr [rsp + 248], eax
 104003b:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1040043:	48 89 84 24 00 01 00 00 	mov	qword ptr [rsp + 256], rax
 104004b:	48 8b ac 24 c0 00 00 00 	mov	rbp, qword ptr [rsp + 192]
 1040053:	48 81 c4 c8 00 00 00 	add	rsp, 200
 104005a:	c3 	ret
 104005b:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1040063:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040067:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 104006f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1040074:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1040079:	e8 02 29 00 00 	call	10498 <_runtime.funcdata>
 104007e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1040083:	48 85 c0 	test	rax, rax
 1040086:	0f 84 f0 02 00 00 	je	752 <_runtime.getStackMap+0x51c>
 104008c:	8b 08 	mov	ecx, dword ptr [rax]
 104008e:	85 c9 	test	ecx, ecx
 1040090:	0f 8e e6 02 00 00 	jle	742 <_runtime.getStackMap+0x51c>
 1040096:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 104009e:	8b 54 24 3c 	mov	edx, dword ptr [rsp + 60]
 10400a2:	85 d2 	test	edx, edx
 10400a4:	0f 8c a6 01 00 00 	jl	422 <_runtime.getStackMap+0x3f0>
 10400aa:	39 ca 	cmp	edx, ecx
 10400ac:	0f 8d 9e 01 00 00 	jge	414 <_runtime.getStackMap+0x3f0>
 10400b2:	8b 48 04 	mov	ecx, dword ptr [rax + 4]
 10400b5:	85 c9 	test	ecx, ecx
 10400b7:	7e 29 	jle	41 <_runtime.getStackMap+0x282>
 10400b9:	90 	nop
 10400ba:	8d 59 07 	lea	ebx, [rcx + 7]
 10400bd:	c1 fb 03 	sar	ebx, 3
 10400c0:	0f af d3 	imul	edx, ebx
 10400c3:	48 63 d2 	movsxd	rdx, edx
 10400c6:	48 8d 04 10 	lea	rax, [rax + rdx]
 10400ca:	48 8d 40 08 	lea	rax, [rax + 8]
 10400ce:	8b 5c 24 44 	mov	ebx, dword ptr [rsp + 68]
 10400d2:	48 89 c2 	mov	rdx, rax
 10400d5:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 10400dd:	e9 da fe ff ff 	jmp	-294 <_runtime.getStackMap+0x15c>
 10400e2:	31 c9 	xor	ecx, ecx
 10400e4:	31 c0 	xor	eax, eax
 10400e6:	eb e6 	jmp	-26 <_runtime.getStackMap+0x26e>
 10400e8:	31 c9 	xor	ecx, ecx
 10400ea:	31 d2 	xor	edx, edx
 10400ec:	e9 cb fe ff ff 	jmp	-309 <_runtime.getStackMap+0x15c>
 10400f1:	31 c0 	xor	eax, eax
 10400f3:	31 db 	xor	ebx, ebx
 10400f5:	e9 85 fe ff ff 	jmp	-379 <_runtime.getStackMap+0x11f>
 10400fa:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 10400fe:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1040103:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1040107:	e8 64 1a 00 00 	call	6756 <_runtime.findfunc>
 104010c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1040111:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1040116:	48 85 c9 	test	rcx, rcx
 1040119:	0f 84 7a 05 00 00 	je	1402 <_runtime.getStackMap+0x839>
 104011f:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1040124:	48 39 11 	cmp	qword ptr [rcx], rdx
 1040127:	75 35 	jne	53 <_runtime.getStackMap+0x2fe>
 1040129:	ba ff ff ff ff 	mov	edx, 4294967295
 104012e:	89 54 24 34 	mov	dword ptr [rsp + 52], edx
 1040132:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1040136:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104013b:	c6 44 24 10 02 	mov	byte ptr [rsp + 16], 2
 1040140:	e8 3b 28 00 00 	call	10299 <_runtime.funcdata>
 1040145:	8b 4c 24 34 	mov	ecx, dword ptr [rsp + 52]
 1040149:	83 f9 ff 	cmp	ecx, -1
 104014c:	b8 00 00 00 00 	mov	eax, 0
 1040151:	0f 44 c8 	cmove	ecx, eax
 1040154:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1040159:	e9 d2 fd ff ff 	jmp	-558 <_runtime.getStackMap+0xd0>
 104015e:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 1040166:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 104016e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1040172:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040177:	c7 44 24 10 00 00 00 00 	mov	dword ptr [rsp + 16], 0
 104017f:	48 ff ca 	dec	rdx
 1040182:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1040187:	48 8b 94 24 d8 00 00 00 	mov	rdx, qword ptr [rsp + 216]
 104018f:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1040194:	e8 37 27 00 00 	call	10039 <_runtime.pcdatavalue>
 1040199:	8b 54 24 28 	mov	edx, dword ptr [rsp + 40]
 104019d:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 10401a5:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 10401ad:	e9 7c ff ff ff 	jmp	-132 <_runtime.getStackMap+0x2ce>
 10401b2:	31 c0 	xor	eax, eax
 10401b4:	31 db 	xor	ebx, ebx
 10401b6:	e9 c4 fd ff ff 	jmp	-572 <_runtime.getStackMap+0x11f>
 10401bb:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10401bf:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10401c4:	c7 44 24 10 01 00 00 00 	mov	dword ptr [rsp + 16], 1
 10401cc:	48 8d 41 ff 	lea	rax, [rcx - 1]
 10401d0:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10401d5:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10401da:	48 8b 8c 24 d8 00 00 00 	mov	rcx, qword ptr [rsp + 216]
 10401e2:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10401e7:	e8 e4 26 00 00 	call	9956 <_runtime.pcdatavalue>
 10401ec:	8b 74 24 28 	mov	esi, dword ptr [rsp + 40]
 10401f0:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10401f8:	48 8b 94 24 b8 00 00 00 	mov	rdx, qword ptr [rsp + 184]
 1040200:	48 8b 9c 24 b0 00 00 00 	mov	rbx, qword ptr [rsp + 176]
 1040208:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 104020d:	e9 ce fc ff ff 	jmp	-818 <_runtime.getStackMap+0x80>
 1040212:	c7 84 24 e8 00 00 00 00 00 00 00 	mov	dword ptr [rsp + 232], 0
 104021d:	48 c7 84 24 f0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 240], 0
 1040229:	c7 84 24 f8 00 00 00 00 00 00 00 	mov	dword ptr [rsp + 248], 0
 1040234:	48 c7 84 24 00 01 00 00 00 00 00 00 	mov	qword ptr [rsp + 256], 0
 1040240:	48 8b ac 24 c0 00 00 00 	mov	rbp, qword ptr [rsp + 192]
 1040248:	48 81 c4 c8 00 00 00 	add	rsp, 200
 104024f:	c3 	ret
 1040250:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1040258:	48 89 04 24 	mov	qword ptr [rsp], rax
 104025c:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1040264:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040269:	e8 52 20 00 00 	call	8274 <_runtime.funcname>
 104026e:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1040276:	48 63 00 	movsxd	rax, dword ptr [rax]
 1040279:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 104027e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1040283:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1040288:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 104028d:	48 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdx
 1040295:	e8 06 a2 fe ff 	call	-89594 <_runtime.printlock>
 104029a:	48 8d 05 f5 3d 03 00 	lea	rax, [rip + 212469]
 10402a1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10402a5:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 10402ae:	e8 2d ab fe ff 	call	-87251 <_runtime.printstring>
 10402b3:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 10402b7:	48 63 c0 	movsxd	rax, eax
 10402ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 10402be:	e8 5d a9 fe ff 	call	-87715 <_runtime.printint>
 10402c3:	48 8d 05 b3 2a 03 00 	lea	rax, [rip + 207539]
 10402ca:	48 89 04 24 	mov	qword ptr [rsp], rax
 10402ce:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 10402d7:	e8 04 ab fe ff 	call	-87292 <_runtime.printstring>
 10402dc:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 10402e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10402e5:	e8 36 a9 fe ff 	call	-87754 <_runtime.printint>
 10402ea:	48 8d 05 fc 4e 03 00 	lea	rax, [rip + 216828]
 10402f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10402f5:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 10402fe:	e8 dd aa fe ff 	call	-87331 <_runtime.printstring>
 1040303:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 104030b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104030f:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1040314:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040319:	e8 c2 aa fe ff 	call	-87358 <_runtime.printstring>
 104031e:	48 8d 05 c5 2f 03 00 	lea	rax, [rip + 208837]
 1040325:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040329:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1040332:	e8 a9 aa fe ff 	call	-87383 <_runtime.printstring>
 1040337:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104033c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040340:	e8 4b a9 fe ff 	call	-87733 <_runtime.printhex>
 1040345:	48 8d 05 26 29 03 00 	lea	rax, [rip + 207142]
 104034c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040350:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1040359:	e8 82 aa fe ff 	call	-87422 <_runtime.printstring>
 104035e:	e8 bd a1 fe ff 	call	-89667 <_runtime.printunlock>
 1040363:	48 8d 05 98 37 03 00 	lea	rax, [rip + 210840]
 104036a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104036e:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1040377:	e8 e4 89 fe ff 	call	-95772 <_runtime.throw>
 104037c:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1040384:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040388:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1040390:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040395:	e8 26 1f 00 00 	call	7974 <_runtime.funcname>
 104039a:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104039f:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 10403a4:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10403a9:	48 89 8c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rcx
 10403b1:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 10403b9:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 10403bd:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 10403c2:	48 8b 52 48 	mov	rdx, qword ptr [rdx + 72]
 10403c6:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 10403cb:	e8 d0 a0 fe ff 	call	-89904 <_runtime.printlock>
 10403d0:	48 8d 05 f2 35 03 00 	lea	rax, [rip + 210418]
 10403d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10403db:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 10403e4:	e8 f7 a9 fe ff 	call	-87561 <_runtime.printstring>
 10403e9:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 10403f1:	48 89 04 24 	mov	qword ptr [rsp], rax
 10403f5:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10403fa:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10403ff:	e8 dc a9 fe ff 	call	-87588 <_runtime.printstring>
 1040404:	48 8d 05 f3 33 03 00 	lea	rax, [rip + 209907]
 104040b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104040f:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 1040418:	e8 c3 a9 fe ff 	call	-87613 <_runtime.printstring>
 104041d:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1040422:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040426:	e8 65 a8 fe ff 	call	-87963 <_runtime.printhex>
 104042b:	48 8d 05 29 28 03 00 	lea	rax, [rip + 206889]
 1040432:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040436:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104043f:	e8 9c a9 fe ff 	call	-87652 <_runtime.printstring>
 1040444:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1040449:	48 89 04 24 	mov	qword ptr [rsp], rax
 104044d:	e8 3e a8 fe ff 	call	-88002 <_runtime.printhex>
 1040452:	e8 d9 a2 fe ff 	call	-89383 <_runtime.printnl>
 1040457:	e8 c4 a0 fe ff 	call	-89916 <_runtime.printunlock>
 104045c:	48 8d 05 2f 37 03 00 	lea	rax, [rip + 210735]
 1040463:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040467:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1040470:	e8 eb 88 fe ff 	call	-96021 <_runtime.throw>
 1040475:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 104047d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040481:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1040489:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104048e:	e8 2d 1e 00 00 	call	7725 <_runtime.funcname>
 1040493:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104049b:	48 63 00 	movsxd	rax, dword ptr [rax]
 104049e:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 10404a3:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10404a8:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 10404ad:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 10404b2:	48 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdx
 10404ba:	e8 e1 9f fe ff 	call	-90143 <_runtime.printlock>
 10404bf:	48 8d 05 d0 3b 03 00 	lea	rax, [rip + 211920]
 10404c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10404ca:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 10404d3:	e8 08 a9 fe ff 	call	-87800 <_runtime.printstring>
 10404d8:	8b 44 24 38 	mov	eax, dword ptr [rsp + 56]
 10404dc:	48 63 c0 	movsxd	rax, eax
 10404df:	48 89 04 24 	mov	qword ptr [rsp], rax
 10404e3:	e8 38 a7 fe ff 	call	-88264 <_runtime.printint>
 10404e8:	48 8d 05 8e 28 03 00 	lea	rax, [rip + 206990]
 10404ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10404f3:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 10404fc:	e8 df a8 fe ff 	call	-87841 <_runtime.printstring>
 1040501:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1040506:	48 89 04 24 	mov	qword ptr [rsp], rax
 104050a:	e8 11 a7 fe ff 	call	-88303 <_runtime.printint>
 104050f:	48 8d 05 bd 51 03 00 	lea	rax, [rip + 217533]
 1040516:	48 89 04 24 	mov	qword ptr [rsp], rax
 104051a:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1040523:	e8 b8 a8 fe ff 	call	-87880 <_runtime.printstring>
 1040528:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1040530:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040534:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1040539:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104053e:	e8 9d a8 fe ff 	call	-87907 <_runtime.printstring>
 1040543:	48 8d 05 a0 2d 03 00 	lea	rax, [rip + 208288]
 104054a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104054e:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1040557:	e8 84 a8 fe ff 	call	-87932 <_runtime.printstring>
 104055c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1040561:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040565:	e8 26 a7 fe ff 	call	-88282 <_runtime.printhex>
 104056a:	48 8d 05 01 27 03 00 	lea	rax, [rip + 206593]
 1040571:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040575:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104057e:	e8 5d a8 fe ff 	call	-87971 <_runtime.printstring>
 1040583:	e8 98 9f fe ff 	call	-90216 <_runtime.printunlock>
 1040588:	48 8d 05 73 35 03 00 	lea	rax, [rip + 210291]
 104058f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040593:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104059c:	e8 bf 87 fe ff 	call	-96321 <_runtime.throw>
 10405a1:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 10405a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10405ad:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 10405b5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10405ba:	e8 01 1d 00 00 	call	7425 <_runtime.funcname>
 10405bf:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10405c4:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 10405c9:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10405ce:	48 89 8c 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rcx
 10405d6:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 10405de:	48 8b 52 38 	mov	rdx, qword ptr [rdx + 56]
 10405e2:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 10405e7:	e8 b4 9e fe ff 	call	-90444 <_runtime.printlock>
 10405ec:	48 8d 05 d6 33 03 00 	lea	rax, [rip + 209878]
 10405f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10405f7:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1040600:	e8 db a7 fe ff 	call	-88101 <_runtime.printstring>
 1040605:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 104060d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040611:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1040616:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104061b:	e8 c0 a7 fe ff 	call	-88128 <_runtime.printstring>
 1040620:	48 8d 05 2b 34 03 00 	lea	rax, [rip + 209963]
 1040627:	48 89 04 24 	mov	qword ptr [rsp], rax
 104062b:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1040634:	e8 a7 a7 fe ff 	call	-88153 <_runtime.printstring>
 1040639:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 104063e:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1040643:	48 29 c8 	sub	rax, rcx
 1040646:	48 89 04 24 	mov	qword ptr [rsp], rax
 104064a:	e8 41 a6 fe ff 	call	-88511 <_runtime.printhex>
 104064f:	48 8d 05 05 26 03 00 	lea	rax, [rip + 206341]
 1040656:	48 89 04 24 	mov	qword ptr [rsp], rax
 104065a:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1040663:	e8 78 a7 fe ff 	call	-88200 <_runtime.printstring>
 1040668:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104066d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040671:	e8 1a a6 fe ff 	call	-88550 <_runtime.printhex>
 1040676:	e8 b5 a0 fe ff 	call	-89931 <_runtime.printnl>
 104067b:	e8 a0 9e fe ff 	call	-90464 <_runtime.printunlock>
 1040680:	48 8d 05 0b 35 03 00 	lea	rax, [rip + 210187]
 1040687:	48 89 04 24 	mov	qword ptr [rsp], rax
 104068b:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 1040694:	e8 c7 86 fe ff 	call	-96569 <_runtime.throw>
 1040699:	e8 02 9e fe ff 	call	-90622 <_runtime.printlock>
 104069e:	48 8d 05 19 67 03 00 	lea	rax, [rip + 223001]
 10406a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10406a9:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 10406b2:	e8 29 a7 fe ff 	call	-88279 <_runtime.printstring>
 10406b7:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10406bc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10406c0:	e8 cb a5 fe ff 	call	-88629 <_runtime.printhex>
 10406c5:	e8 66 a0 fe ff 	call	-90010 <_runtime.printnl>
 10406ca:	e8 51 9e fe ff 	call	-90543 <_runtime.printunlock>
 10406cf:	48 8d 05 7b 32 03 00 	lea	rax, [rip + 209531]
 10406d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10406da:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 10406e3:	e8 78 86 fe ff 	call	-96648 <_runtime.throw>
 10406e8:	90 	nop
 10406e9:	e8 e2 04 01 00 	call	66786 <_runtime.morestack_noctxt>
 10406ee:	e9 6d f7 ff ff 	jmp	-2195 <_runtime.getStackMap>
 10406f3:	cc 	int3
 10406f4:	cc 	int3
 10406f5:	cc 	int3
 10406f6:	cc 	int3
 10406f7:	cc 	int3
 10406f8:	cc 	int3
 10406f9:	cc 	int3
 10406fa:	cc 	int3
 10406fb:	cc 	int3
 10406fc:	cc 	int3
 10406fd:	cc 	int3
 10406fe:	cc 	int3
 10406ff:	cc 	int3

_runtime.morestackc:
 1040700:	48 83 ec 18 	sub	rsp, 24
 1040704:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1040709:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104070e:	48 8d 05 fd 69 03 00 	lea	rax, [rip + 223741]
 1040715:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040719:	48 c7 44 24 08 32 00 00 00 	mov	qword ptr [rsp + 8], 50
 1040722:	e8 39 86 fe ff 	call	-96711 <_runtime.throw>
 1040727:	90 	nop
 1040728:	cc 	int3
 1040729:	cc 	int3
 104072a:	cc 	int3
 104072b:	cc 	int3
 104072c:	cc 	int3
 104072d:	cc 	int3
 104072e:	cc 	int3
 104072f:	cc 	int3

_runtime.concatstrings:
 1040730:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040739:	48 8d 44 24 f0 	lea	rax, [rsp - 16]
 104073e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1040742:	0f 86 b5 02 00 00 	jbe	693 <_runtime.concatstrings+0x2cd>
 1040748:	48 81 ec 90 00 00 00 	sub	rsp, 144
 104074f:	48 89 ac 24 88 00 00 00 	mov	qword ptr [rsp + 136], rbp
 1040757:	48 8d ac 24 88 00 00 00 	lea	rbp, [rsp + 136]
 104075f:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 1040767:	48 85 c9 	test	rcx, rcx
 104076a:	0f 8e 44 02 00 00 	jle	580 <_runtime.concatstrings+0x284>
 1040770:	48 8b 94 24 a0 00 00 00 	mov	rdx, qword ptr [rsp + 160]
 1040778:	48 89 d0 	mov	rax, rdx
 104077b:	31 db 	xor	ebx, ebx
 104077d:	31 f6 	xor	esi, esi
 104077f:	31 ff 	xor	edi, edi
 1040781:	45 31 c0 	xor	r8d, r8d
 1040784:	eb 04 	jmp	4 <_runtime.concatstrings+0x5a>
 1040786:	48 83 c2 10 	add	rdx, 16
 104078a:	4c 8b 4a 08 	mov	r9, qword ptr [rdx + 8]
 104078e:	4d 85 c9 	test	r9, r9
 1040791:	0f 85 06 02 00 00 	jne	518 <_runtime.concatstrings+0x26d>
 1040797:	48 ff c3 	inc	rbx
 104079a:	48 39 cb 	cmp	rbx, rcx
 104079d:	7c e7 	jl	-25 <_runtime.concatstrings+0x56>
 104079f:	48 85 f6 	test	rsi, rsi
 10407a2:	0f 84 da 01 00 00 	je	474 <_runtime.concatstrings+0x252>
 10407a8:	48 83 fe 01 	cmp	rsi, 1
 10407ac:	0f 85 c1 01 00 00 	jne	449 <_runtime.concatstrings+0x243>
 10407b2:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 10407ba:	48 85 d2 	test	rdx, rdx
 10407bd:	0f 84 5b 01 00 00 	je	347 <_runtime.concatstrings+0x1ee>
 10407c3:	bb 01 00 00 00 	mov	ebx, 1
 10407c8:	84 db 	test	bl, bl
 10407ca:	0f 85 18 01 00 00 	jne	280 <_runtime.concatstrings+0x1b8>
 10407d0:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10407d4:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 10407d9:	e8 12 04 00 00 	call	1042 <_runtime.rawstringtmp>
 10407de:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10407e3:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10407e8:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10407ed:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10407f2:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 10407f7:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 10407ff:	48 85 ff 	test	rdi, rdi
 1040802:	7e 5e 	jle	94 <_runtime.concatstrings+0x132>
 1040804:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 1040809:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 104080e:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 1040816:	45 31 c9 	xor	r9d, r9d
 1040819:	eb 0a 	jmp	10 <_runtime.concatstrings+0xf5>
 104081b:	49 83 c0 10 	add	r8, 16
 104081f:	4c 89 d9 	mov	rcx, r11
 1040822:	4c 89 e0 	mov	rax, r12
 1040825:	4d 8b 50 08 	mov	r10, qword ptr [r8 + 8]
 1040829:	4c 39 d1 	cmp	rcx, r10
 104082c:	49 89 cb 	mov	r11, rcx
 104082f:	49 0f 4f ca 	cmovg	rcx, r10
 1040833:	4d 8b 20 	mov	r12, qword ptr [r8]
 1040836:	4c 39 e2 	cmp	rdx, r12
 1040839:	75 47 	jne	71 <_runtime.concatstrings+0x152>
 104083b:	4d 39 da 	cmp	r10, r11
 104083e:	0f 87 84 01 00 00 	ja	388 <_runtime.concatstrings+0x298>
 1040844:	49 ff c1 	inc	r9
 1040847:	4d 29 d3 	sub	r11, r10
 104084a:	4c 29 d0 	sub	rax, r10
 104084d:	49 89 c4 	mov	r12, rax
 1040850:	48 f7 d8 	neg	rax
 1040853:	48 c1 f8 3f 	sar	rax, 63
 1040857:	49 21 c2 	and	r10, rax
 104085a:	4c 01 d2 	add	rdx, r10
 104085d:	49 39 f9 	cmp	r9, rdi
 1040860:	7c b9 	jl	-71 <_runtime.concatstrings+0xeb>
 1040862:	48 89 9c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rbx
 104086a:	48 89 b4 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rsi
 1040872:	48 8b ac 24 88 00 00 00 	mov	rbp, qword ptr [rsp + 136]
 104087a:	48 81 c4 90 00 00 00 	add	rsp, 144
 1040881:	c3 	ret
 1040882:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 1040887:	4c 89 54 24 38 	mov	qword ptr [rsp + 56], r10
 104088c:	4c 89 44 24 70 	mov	qword ptr [rsp + 112], r8
 1040891:	4c 89 5c 24 58 	mov	qword ptr [rsp + 88], r11
 1040896:	4c 89 4c 24 50 	mov	qword ptr [rsp + 80], r9
 104089b:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10408a0:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10408a4:	4c 89 64 24 08 	mov	qword ptr [rsp + 8], r12
 10408a9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10408ae:	e8 9d 32 01 00 	call	78493 <_runtime.memmove>
 10408b3:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10408b8:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 10408bd:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 10408c2:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10408c7:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 10408cf:	4c 8b 44 24 70 	mov	r8, qword ptr [rsp + 112]
 10408d4:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 10408d9:	4c 8b 54 24 38 	mov	r10, qword ptr [rsp + 56]
 10408de:	4c 8b 5c 24 58 	mov	r11, qword ptr [rsp + 88]
 10408e3:	e9 53 ff ff ff 	jmp	-173 <_runtime.concatstrings+0x10b>
 10408e8:	48 39 cf 	cmp	rdi, rcx
 10408eb:	0f 83 e2 00 00 00 	jae	226 <_runtime.concatstrings+0x2a3>
 10408f1:	48 c1 e7 04 	shl	rdi, 4
 10408f5:	48 8b 0c 38 	mov	rcx, qword ptr [rax + rdi]
 10408f9:	48 8b 44 38 08 	mov	rax, qword ptr [rax + rdi + 8]
 10408fe:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 1040906:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 104090e:	48 8b ac 24 88 00 00 00 	mov	rbp, qword ptr [rsp + 136]
 1040916:	48 81 c4 90 00 00 00 	add	rsp, 144
 104091d:	c3 	ret
 104091e:	48 39 cf 	cmp	rdi, rcx
 1040921:	0f 83 b4 00 00 00 	jae	180 <_runtime.concatstrings+0x2ab>
 1040927:	48 89 fb 	mov	rbx, rdi
 104092a:	48 c1 e7 04 	shl	rdi, 4
 104092e:	48 8b 74 38 08 	mov	rsi, qword ptr [rax + rdi + 8]
 1040933:	48 8b 3c 38 	mov	rdi, qword ptr [rax + rdi]
 1040937:	48 89 7c 24 78 	mov	qword ptr [rsp + 120], rdi
 104093c:	48 89 b4 24 80 00 00 00 	mov	qword ptr [rsp + 128], rsi
 1040944:	48 8b 74 24 78 	mov	rsi, qword ptr [rsp + 120]
 1040949:	65 48 8b 3c 25 30 00 00 00 	mov	rdi, qword ptr gs:[48]
 1040952:	4c 8b 4f 08 	mov	r9, qword ptr [rdi + 8]
 1040956:	48 39 37 	cmp	qword ptr [rdi], rsi
 1040959:	77 14 	ja	20 <_runtime.concatstrings+0x23f>
 104095b:	4c 39 ce 	cmp	rsi, r9
 104095e:	40 0f 92 c6 	setb	sil
 1040962:	83 f6 01 	xor	esi, 1
 1040965:	48 89 df 	mov	rdi, rbx
 1040968:	89 f3 	mov	ebx, esi
 104096a:	e9 59 fe ff ff 	jmp	-423 <_runtime.concatstrings+0x98>
 104096f:	31 f6 	xor	esi, esi
 1040971:	eb ef 	jmp	-17 <_runtime.concatstrings+0x232>
 1040973:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 104097b:	31 db 	xor	ebx, ebx
 104097d:	e9 46 fe ff ff 	jmp	-442 <_runtime.concatstrings+0x98>
 1040982:	0f 57 c0 	xorps	xmm0, xmm0
 1040985:	0f 11 84 24 b8 00 00 00 	movups	xmmword ptr [rsp + 184], xmm0
 104098d:	48 8b ac 24 88 00 00 00 	mov	rbp, qword ptr [rsp + 136]
 1040995:	48 81 c4 90 00 00 00 	add	rsp, 144
 104099c:	c3 	ret
 104099d:	4b 8d 3c 08 	lea	rdi, [r8 + r9]
 10409a1:	4c 39 c7 	cmp	rdi, r8
 10409a4:	7c 3d 	jl	61 <_runtime.concatstrings+0x2b3>
 10409a6:	48 ff c6 	inc	rsi
 10409a9:	49 89 f8 	mov	r8, rdi
 10409ac:	48 89 df 	mov	rdi, rbx
 10409af:	e9 e3 fd ff ff 	jmp	-541 <_runtime.concatstrings+0x67>
 10409b4:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 10409bc:	31 f6 	xor	esi, esi
 10409be:	31 ff 	xor	edi, edi
 10409c0:	45 31 c0 	xor	r8d, r8d
 10409c3:	e9 d7 fd ff ff 	jmp	-553 <_runtime.concatstrings+0x6f>
 10409c8:	4c 89 d0 	mov	rax, r10
 10409cb:	4c 89 d9 	mov	rcx, r11
 10409ce:	e8 dd 29 01 00 	call	76253 <_runtime.panicSliceB>
 10409d3:	48 89 f8 	mov	rax, rdi
 10409d6:	e8 75 29 01 00 	call	76149 <_runtime.panicIndex>
 10409db:	48 89 f8 	mov	rax, rdi
 10409de:	e8 6d 29 01 00 	call	76141 <_runtime.panicIndex>
 10409e3:	48 8d 05 90 4c 03 00 	lea	rax, [rip + 216208]
 10409ea:	48 89 04 24 	mov	qword ptr [rsp], rax
 10409ee:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 10409f7:	e8 64 83 fe ff 	call	-97436 <_runtime.throw>
 10409fc:	90 	nop
 10409fd:	e8 ce 01 01 00 	call	65998 <_runtime.morestack_noctxt>
 1040a02:	e9 29 fd ff ff 	jmp	-727 <_runtime.concatstrings>
 1040a07:	cc 	int3
 1040a08:	cc 	int3
 1040a09:	cc 	int3
 1040a0a:	cc 	int3
 1040a0b:	cc 	int3
 1040a0c:	cc 	int3
 1040a0d:	cc 	int3
 1040a0e:	cc 	int3
 1040a0f:	cc 	int3

_runtime.concatstring2:
 1040a10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040a19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040a1d:	76 56 	jbe	86 <_runtime.concatstring2+0x65>
 1040a1f:	48 83 ec 38 	sub	rsp, 56
 1040a23:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1040a28:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1040a2d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1040a32:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040a36:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1040a3b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040a40:	48 c7 44 24 10 02 00 00 00 	mov	qword ptr [rsp + 16], 2
 1040a49:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1040a52:	e8 d9 fc ff ff 	call	-807 <_runtime.concatstrings>
 1040a57:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1040a5c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1040a61:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 1040a66:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1040a6b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1040a70:	48 83 c4 38 	add	rsp, 56
 1040a74:	c3 	ret
 1040a75:	e8 56 01 01 00 	call	65878 <_runtime.morestack_noctxt>
 1040a7a:	eb 94 	jmp	-108 <_runtime.concatstring2>
 1040a7c:	cc 	int3
 1040a7d:	cc 	int3
 1040a7e:	cc 	int3
 1040a7f:	cc 	int3

_runtime.concatstring4:
 1040a80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040a89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040a8d:	76 5c 	jbe	92 <_runtime.concatstring4+0x6b>
 1040a8f:	48 83 ec 38 	sub	rsp, 56
 1040a93:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1040a98:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1040a9d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1040aa2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040aa6:	48 8d 44 24 48 	lea	rax, [rsp + 72]
 1040aab:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040ab0:	48 c7 44 24 10 04 00 00 00 	mov	qword ptr [rsp + 16], 4
 1040ab9:	48 c7 44 24 18 04 00 00 00 	mov	qword ptr [rsp + 24], 4
 1040ac2:	e8 69 fc ff ff 	call	-919 <_runtime.concatstrings>
 1040ac7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1040acc:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1040ad1:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 1040ad9:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 1040ae1:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1040ae6:	48 83 c4 38 	add	rsp, 56
 1040aea:	c3 	ret
 1040aeb:	e8 e0 00 01 00 	call	65760 <_runtime.morestack_noctxt>
 1040af0:	eb 8e 	jmp	-114 <_runtime.concatstring4>
 1040af2:	cc 	int3
 1040af3:	cc 	int3
 1040af4:	cc 	int3
 1040af5:	cc 	int3
 1040af6:	cc 	int3
 1040af7:	cc 	int3
 1040af8:	cc 	int3
 1040af9:	cc 	int3
 1040afa:	cc 	int3
 1040afb:	cc 	int3
 1040afc:	cc 	int3
 1040afd:	cc 	int3
 1040afe:	cc 	int3
 1040aff:	cc 	int3

_runtime.slicebytetostring:
 1040b00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040b09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040b0d:	0f 86 c7 00 00 00 	jbe	199 <_runtime.slicebytetostring+0xda>
 1040b13:	48 83 ec 28 	sub	rsp, 40
 1040b17:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1040b1c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1040b21:	0f 57 c0 	xorps	xmm0, xmm0
 1040b24:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1040b29:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1040b2e:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1040b33:	48 85 c0 	test	rax, rax
 1040b36:	0f 84 8f 00 00 00 	je	143 <_runtime.slicebytetostring+0xcb>
 1040b3c:	48 83 f8 01 	cmp	rax, 1
 1040b40:	74 64 	je	100 <_runtime.slicebytetostring+0xa6>
 1040b42:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1040b47:	48 85 c9 	test	rcx, rcx
 1040b4a:	74 3c 	je	60 <_runtime.slicebytetostring+0x88>
 1040b4c:	48 83 f8 20 	cmp	rax, 32
 1040b50:	7f 36 	jg	54 <_runtime.slicebytetostring+0x88>
 1040b52:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1040b57:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1040b5c:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1040b61:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1040b66:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1040b6b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1040b6f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040b74:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1040b79:	e8 d2 2f 01 00 	call	77778 <_runtime.memmove>
 1040b7e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1040b83:	48 83 c4 28 	add	rsp, 40
 1040b87:	c3 	ret
 1040b88:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040b8c:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1040b95:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1040b9a:	e8 11 8d fc ff 	call	-226031 <_runtime.mallocgc>
 1040b9f:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1040ba4:	eb ac 	jmp	-84 <_runtime.slicebytetostring+0x52>
 1040ba6:	0f b6 01 	movzx	eax, byte ptr [rcx]
 1040ba9:	48 8d 0d f0 ab 08 00 	lea	rcx, [rip + 568304]
 1040bb0:	48 01 c8 	add	rax, rcx
 1040bb3:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1040bb8:	48 c7 44 24 58 01 00 00 00 	mov	qword ptr [rsp + 88], 1
 1040bc1:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1040bc6:	48 83 c4 28 	add	rsp, 40
 1040bca:	c3 	ret
 1040bcb:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1040bd0:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1040bd5:	48 83 c4 28 	add	rsp, 40
 1040bd9:	c3 	ret
 1040bda:	e8 f1 ff 00 00 	call	65521 <_runtime.morestack_noctxt>
 1040bdf:	e9 1c ff ff ff 	jmp	-228 <_runtime.slicebytetostring>
 1040be4:	cc 	int3
 1040be5:	cc 	int3
 1040be6:	cc 	int3
 1040be7:	cc 	int3
 1040be8:	cc 	int3
 1040be9:	cc 	int3
 1040bea:	cc 	int3
 1040beb:	cc 	int3
 1040bec:	cc 	int3
 1040bed:	cc 	int3
 1040bee:	cc 	int3
 1040bef:	cc 	int3

_runtime.rawstringtmp:
 1040bf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040bf9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040bfd:	0f 86 89 00 00 00 	jbe	137 <_runtime.rawstringtmp+0x9c>
 1040c03:	48 83 ec 38 	sub	rsp, 56
 1040c07:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1040c0c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1040c11:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1040c16:	48 85 c0 	test	rax, rax
 1040c19:	74 5f 	je	95 <_runtime.rawstringtmp+0x8a>
 1040c1b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1040c20:	48 83 f9 20 	cmp	rcx, 32
 1040c24:	7f 30 	jg	48 <_runtime.rawstringtmp+0x66>
 1040c26:	77 59 	ja	89 <_runtime.rawstringtmp+0x91>
 1040c28:	ba 20 00 00 00 	mov	edx, 32
 1040c2d:	48 89 cb 	mov	rbx, rcx
 1040c30:	48 89 c6 	mov	rsi, rax
 1040c33:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1040c38:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1040c3d:	48 89 74 24 60 	mov	qword ptr [rsp + 96], rsi
 1040c42:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 1040c47:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 1040c4c:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1040c51:	48 83 c4 38 	add	rsp, 56
 1040c55:	c3 	ret
 1040c56:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1040c5a:	e8 41 00 00 00 	call	65 <_runtime.rawstring>
 1040c5f:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 1040c64:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1040c69:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1040c6e:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1040c73:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1040c78:	eb b9 	jmp	-71 <_runtime.rawstringtmp+0x43>
 1040c7a:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1040c7f:	eb d5 	jmp	-43 <_runtime.rawstringtmp+0x66>
 1040c81:	ba 20 00 00 00 	mov	edx, 32
 1040c86:	e8 e5 26 01 00 	call	75493 <_runtime.panicSliceAlen>
 1040c8b:	90 	nop
 1040c8c:	e8 3f ff 00 00 	call	65343 <_runtime.morestack_noctxt>
 1040c91:	e9 5a ff ff ff 	jmp	-166 <_runtime.rawstringtmp>
 1040c96:	cc 	int3
 1040c97:	cc 	int3
 1040c98:	cc 	int3
 1040c99:	cc 	int3
 1040c9a:	cc 	int3
 1040c9b:	cc 	int3
 1040c9c:	cc 	int3
 1040c9d:	cc 	int3
 1040c9e:	cc 	int3
 1040c9f:	cc 	int3

_runtime.rawstring:
 1040ca0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040ca9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040cad:	76 6d 	jbe	109 <_runtime.rawstring+0x7c>
 1040caf:	48 83 ec 28 	sub	rsp, 40
 1040cb3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1040cb8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1040cbd:	0f 57 c0 	xorps	xmm0, xmm0
 1040cc0:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1040cc5:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1040cce:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1040cd3:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1040cd8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040cdc:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1040ce5:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1040cea:	e8 c1 8b fc ff 	call	-226367 <_runtime.mallocgc>
 1040cef:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1040cf4:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1040cf9:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1040cfe:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1040d03:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1040d08:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1040d0d:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1040d12:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1040d17:	48 83 c4 28 	add	rsp, 40
 1040d1b:	c3 	ret
 1040d1c:	e8 af fe 00 00 	call	65199 <_runtime.morestack_noctxt>
 1040d21:	e9 7a ff ff ff 	jmp	-134 <_runtime.rawstring>
 1040d26:	cc 	int3
 1040d27:	cc 	int3
 1040d28:	cc 	int3
 1040d29:	cc 	int3
 1040d2a:	cc 	int3
 1040d2b:	cc 	int3
 1040d2c:	cc 	int3
 1040d2d:	cc 	int3
 1040d2e:	cc 	int3
 1040d2f:	cc 	int3

_runtime.gostring:
 1040d30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040d39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040d3d:	0f 86 ac 00 00 00 	jbe	172 <_runtime.gostring+0xbf>
 1040d43:	48 83 ec 50 	sub	rsp, 80
 1040d47:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 1040d4c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1040d51:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1040d56:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040d5a:	e8 d1 02 00 00 	call	721 <_runtime.findnull>
 1040d5f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1040d64:	48 85 c0 	test	rax, rax
 1040d67:	74 6c 	je	108 <_runtime.gostring+0xa5>
 1040d69:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1040d6e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040d72:	e8 29 ff ff ff 	call	-215 <_runtime.rawstring>
 1040d77:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1040d7c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1040d81:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1040d86:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 1040d8b:	48 85 c9 	test	rcx, rcx
 1040d8e:	76 57 	jbe	87 <_runtime.gostring+0xb7>
 1040d90:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1040d95:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1040d9a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1040d9e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1040da3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1040da8:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1040dad:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1040db2:	e8 99 2d 01 00 	call	77209 <_runtime.memmove>
 1040db7:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1040dbc:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1040dc1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1040dc6:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1040dcb:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1040dd0:	48 83 c4 50 	add	rsp, 80
 1040dd4:	c3 	ret
 1040dd5:	0f 57 c0 	xorps	xmm0, xmm0
 1040dd8:	0f 11 44 24 60 	movups	xmmword ptr [rsp + 96], xmm0
 1040ddd:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1040de2:	48 83 c4 50 	add	rsp, 80
 1040de6:	c3 	ret
 1040de7:	31 c0 	xor	eax, eax
 1040de9:	e8 62 25 01 00 	call	75106 <_runtime.panicIndex>
 1040dee:	90 	nop
 1040def:	e8 dc fd 00 00 	call	64988 <_runtime.morestack_noctxt>
 1040df4:	e9 37 ff ff ff 	jmp	-201 <_runtime.gostring>
 1040df9:	cc 	int3
 1040dfa:	cc 	int3
 1040dfb:	cc 	int3
 1040dfc:	cc 	int3
 1040dfd:	cc 	int3
 1040dfe:	cc 	int3
 1040dff:	cc 	int3

_runtime.index:
 1040e00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1040e09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1040e0d:	0f 86 d8 00 00 00 	jbe	216 <_runtime.index+0xeb>
 1040e13:	48 83 ec 30 	sub	rsp, 48
 1040e17:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1040e1c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1040e21:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1040e26:	48 85 c0 	test	rax, rax
 1040e29:	0f 84 a9 00 00 00 	je	169 <_runtime.index+0xd8>
 1040e2f:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1040e34:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1040e39:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1040e3e:	31 f6 	xor	esi, esi
 1040e40:	eb 06 	jmp	6 <_runtime.index+0x48>
 1040e42:	48 ff c6 	inc	rsi
 1040e45:	48 89 f9 	mov	rcx, rdi
 1040e48:	48 39 ce 	cmp	rsi, rcx
 1040e4b:	7d 78 	jge	120 <_runtime.index+0xc5>
 1040e4d:	0f b6 3c 33 	movzx	edi, byte ptr [rbx + rsi]
 1040e51:	40 38 3a 	cmp	byte ptr [rdx], dil
 1040e54:	75 68 	jne	104 <_runtime.index+0xbe>
 1040e56:	48 89 cf 	mov	rdi, rcx
 1040e59:	48 29 f1 	sub	rcx, rsi
 1040e5c:	49 89 c8 	mov	r8, rcx
 1040e5f:	48 f7 d9 	neg	rcx
 1040e62:	48 c1 f9 3f 	sar	rcx, 63
 1040e66:	48 21 f1 	and	rcx, rsi
 1040e69:	48 01 d9 	add	rcx, rbx
 1040e6c:	49 39 c0 	cmp	r8, rax
 1040e6f:	7d 15 	jge	21 <_runtime.index+0x86>
 1040e71:	31 c9 	xor	ecx, ecx
 1040e73:	84 c9 	test	cl, cl
 1040e75:	74 cb 	je	-53 <_runtime.index+0x42>
 1040e77:	48 89 74 24 58 	mov	qword ptr [rsp + 88], rsi
 1040e7c:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1040e81:	48 83 c4 30 	add	rsp, 48
 1040e85:	c3 	ret
 1040e86:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 1040e8b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1040e8f:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1040e94:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1040e99:	e8 52 12 fc ff 	call	-257454 <_runtime.memequal>
 1040e9e:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1040ea3:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1040ea8:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1040ead:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1040eb2:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1040eb7:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 1040ebc:	eb b5 	jmp	-75 <_runtime.index+0x73>
 1040ebe:	48 89 cf 	mov	rdi, rcx
 1040ec1:	31 c9 	xor	ecx, ecx
 1040ec3:	eb ae 	jmp	-82 <_runtime.index+0x73>
 1040ec5:	48 c7 44 24 58 ff ff ff ff 	mov	qword ptr [rsp + 88], -1
 1040ece:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1040ed3:	48 83 c4 30 	add	rsp, 48
 1040ed7:	c3 	ret
 1040ed8:	48 c7 44 24 58 00 00 00 00 	mov	qword ptr [rsp + 88], 0
 1040ee1:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1040ee6:	48 83 c4 30 	add	rsp, 48
 1040eea:	c3 	ret
 1040eeb:	e8 e0 fc 00 00 	call	64736 <_runtime.morestack_noctxt>
 1040ef0:	e9 0b ff ff ff 	jmp	-245 <_runtime.index>
 1040ef5:	cc 	int3
 1040ef6:	cc 	int3
 1040ef7:	cc 	int3
 1040ef8:	cc 	int3
 1040ef9:	cc 	int3
 1040efa:	cc 	int3
 1040efb:	cc 	int3
 1040efc:	cc 	int3
 1040efd:	cc 	int3
 1040efe:	cc 	int3
 1040eff:	cc 	int3

_runtime.atoi:
 1040f00:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1040f05:	48 85 c0 	test	rax, rax
 1040f08:	0f 84 09 01 00 00 	je	265 <_runtime.atoi+0x117>
 1040f0e:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1040f13:	80 39 2d 	cmp	byte ptr [rcx], 45
 1040f16:	0f 85 ee 00 00 00 	jne	238 <_runtime.atoi+0x10a>
 1040f1c:	48 ff c8 	dec	rax
 1040f1f:	48 89 c2 	mov	rdx, rax
 1040f22:	48 f7 d8 	neg	rax
 1040f25:	48 c1 f8 3f 	sar	rax, 63
 1040f29:	48 83 e0 01 	and	rax, 1
 1040f2d:	48 01 c8 	add	rax, rcx
 1040f30:	b9 01 00 00 00 	mov	ecx, 1
 1040f35:	31 db 	xor	ebx, ebx
 1040f37:	31 f6 	xor	esi, esi
 1040f39:	eb 06 	jmp	6 <_runtime.atoi+0x41>
 1040f3b:	48 ff c3 	inc	rbx
 1040f3e:	48 89 fe 	mov	rsi, rdi
 1040f41:	48 39 d3 	cmp	rbx, rdx
 1040f44:	7d 63 	jge	99 <_runtime.atoi+0xa9>
 1040f46:	0f b6 3c 18 	movzx	edi, byte ptr [rax + rbx]
 1040f4a:	40 80 ff 30 	cmp	dil, 48
 1040f4e:	72 4a 	jb	74 <_runtime.atoi+0x9a>
 1040f50:	40 80 ff 39 	cmp	dil, 57
 1040f54:	77 44 	ja	68 <_runtime.atoi+0x9a>
 1040f56:	49 b8 99 99 99 99 99 99 99 19 	movabs	r8, 1844674407370955161
 1040f60:	4c 39 c6 	cmp	rsi, r8
 1040f63:	77 26 	ja	38 <_runtime.atoi+0x8b>
 1040f65:	48 8d 34 b6 	lea	rsi, [rsi + 4*rsi]
 1040f69:	49 89 f1 	mov	r9, rsi
 1040f6c:	48 d1 e6 	shl	rsi
 1040f6f:	4a 8d 3c 4f 	lea	rdi, [rdi + 2*r9]
 1040f73:	48 8d 7f d0 	lea	rdi, [rdi - 48]
 1040f77:	48 39 f7 	cmp	rdi, rsi
 1040f7a:	73 bf 	jae	-65 <_runtime.atoi+0x3b>
 1040f7c:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1040f85:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1040f8a:	c3 	ret
 1040f8b:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1040f94:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1040f99:	c3 	ret
 1040f9a:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1040fa3:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1040fa8:	c3 	ret
 1040fa9:	84 c9 	test	cl, cl
 1040fab:	74 3b 	je	59 <_runtime.atoi+0xe8>
 1040fad:	74 0f 	je	15 <_runtime.atoi+0xbe>
 1040faf:	48 b8 00 00 00 00 00 00 00 80 	movabs	rax, -9223372036854775808
 1040fb9:	48 39 c6 	cmp	rsi, rax
 1040fbc:	77 1b 	ja	27 <_runtime.atoi+0xd9>
 1040fbe:	48 89 f0 	mov	rax, rsi
 1040fc1:	48 f7 de 	neg	rsi
 1040fc4:	0f b6 c9 	movzx	ecx, cl
 1040fc7:	48 85 c9 	test	rcx, rcx
 1040fca:	48 0f 45 c6 	cmovne	rax, rsi
 1040fce:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1040fd3:	c6 44 24 20 01 	mov	byte ptr [rsp + 32], 1
 1040fd8:	c3 	ret
 1040fd9:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1040fe2:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1040fe7:	c3 	ret
 1040fe8:	48 b8 ff ff ff ff ff ff ff 7f 	movabs	rax, 9223372036854775807
 1040ff2:	48 39 c6 	cmp	rsi, rax
 1040ff5:	77 04 	ja	4 <_runtime.atoi+0xfb>
 1040ff7:	84 c9 	test	cl, cl
 1040ff9:	eb b2 	jmp	-78 <_runtime.atoi+0xad>
 1040ffb:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1041004:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1041009:	c3 	ret
 104100a:	48 89 c2 	mov	rdx, rax
 104100d:	48 89 c8 	mov	rax, rcx
 1041010:	31 c9 	xor	ecx, ecx
 1041012:	e9 1e ff ff ff 	jmp	-226 <_runtime.atoi+0x35>
 1041017:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1041020:	c6 44 24 20 00 	mov	byte ptr [rsp + 32], 0
 1041025:	c3 	ret
 1041026:	cc 	int3
 1041027:	cc 	int3
 1041028:	cc 	int3
 1041029:	cc 	int3
 104102a:	cc 	int3
 104102b:	cc 	int3
 104102c:	cc 	int3
 104102d:	cc 	int3
 104102e:	cc 	int3
 104102f:	cc 	int3

_runtime.findnull:
 1041030:	48 83 ec 50 	sub	rsp, 80
 1041034:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 1041039:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 104103e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1041043:	48 85 c0 	test	rax, rax
 1041046:	0f 84 8d 00 00 00 	je	141 <_runtime.findnull+0xa9>
 104104c:	48 89 c1 	mov	rcx, rax
 104104f:	48 25 ff 0f 00 00 	and	rax, 4095
 1041055:	48 05 00 f0 ff ff 	add	rax, -4096
 104105b:	48 f7 d8 	neg	rax
 104105e:	31 d2 	xor	edx, edx
 1041060:	eb 1c 	jmp	28 <_runtime.findnull+0x4e>
 1041062:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1041067:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 104106c:	48 8d 0c 1e 	lea	rcx, [rsi + rbx]
 1041070:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1041075:	48 8d 14 1e 	lea	rdx, [rsi + rbx]
 1041079:	b8 00 10 00 00 	mov	eax, 4096
 104107e:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1041083:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1041088:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104108d:	0f 57 c0 	xorps	xmm0, xmm0
 1041090:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1041095:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104109a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104109f:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10410a4:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10410a8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10410ad:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 10410b2:	e8 d9 11 fc ff 	call	-257575 <_internal/bytealg.IndexByteString>
 10410b7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10410bc:	48 83 f8 ff 	cmp	rax, -1
 10410c0:	74 a0 	je	-96 <_runtime.findnull+0x32>
 10410c2:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10410c7:	48 01 c8 	add	rax, rcx
 10410ca:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 10410cf:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10410d4:	48 83 c4 50 	add	rsp, 80
 10410d8:	c3 	ret
 10410d9:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 10410e2:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10410e7:	48 83 c4 50 	add	rsp, 80
 10410eb:	c3 	ret
 10410ec:	cc 	int3
 10410ed:	cc 	int3
 10410ee:	cc 	int3
 10410ef:	cc 	int3

_runtime.badsystemstack:
 10410f0:	48 83 ec 28 	sub	rsp, 40
 10410f4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10410f9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10410fe:	48 8b 05 db b6 08 00 	mov	rax, qword ptr [rip + 571099]
 1041105:	48 8b 0d dc b6 08 00 	mov	rcx, qword ptr [rip + 571100]
 104110c:	48 c7 04 24 02 00 00 00 	mov	qword ptr [rsp], 2
 1041114:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1041119:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 104111d:	e8 fe 20 00 00 	call	8446 <_runtime.write1>
 1041122:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1041127:	48 83 c4 28 	add	rsp, 40
 104112b:	c3 	ret
 104112c:	cc 	int3
 104112d:	cc 	int3
 104112e:	cc 	int3
 104112f:	cc 	int3

_runtime.fastrand:
 1041130:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1041139:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104113d:	8b 88 20 01 00 00 	mov	ecx, dword ptr [rax + 288]
 1041143:	8b 90 24 01 00 00 	mov	edx, dword ptr [rax + 292]
 1041149:	89 90 20 01 00 00 	mov	dword ptr [rax + 288], edx
 104114f:	89 cb 	mov	ebx, ecx
 1041151:	c1 e1 11 	shl	ecx, 17
 1041154:	31 d9 	xor	ecx, ebx
 1041156:	89 d3 	mov	ebx, edx
 1041158:	31 ca 	xor	edx, ecx
 104115a:	c1 e9 07 	shr	ecx, 7
 104115d:	31 d1 	xor	ecx, edx
 104115f:	89 da 	mov	edx, ebx
 1041161:	c1 eb 10 	shr	ebx, 16
 1041164:	31 cb 	xor	ebx, ecx
 1041166:	89 98 24 01 00 00 	mov	dword ptr [rax + 292], ebx
 104116c:	8d 04 1a 	lea	eax, [rdx + rbx]
 104116f:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 1041173:	c3 	ret
 1041174:	cc 	int3
 1041175:	cc 	int3
 1041176:	cc 	int3
 1041177:	cc 	int3
 1041178:	cc 	int3
 1041179:	cc 	int3
 104117a:	cc 	int3
 104117b:	cc 	int3
 104117c:	cc 	int3
 104117d:	cc 	int3
 104117e:	cc 	int3
 104117f:	cc 	int3

_runtime.modulesinit:
 1041180:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1041189:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104118d:	0f 86 65 02 00 00 	jbe	613 <_runtime.modulesinit+0x278>
 1041193:	48 83 ec 58 	sub	rsp, 88
 1041197:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 104119c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 10411a1:	48 8d 05 f8 d3 01 00 	lea	rax, [rip + 119800]
 10411a8:	48 89 04 24 	mov	qword ptr [rsp], rax
 10411ac:	e8 4f 92 fc ff 	call	-224689 <_runtime.newobject>
 10411b1:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10411b6:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10411bb:	48 8d 0d 9e ab 08 00 	lea	rcx, [rip + 568222]
 10411c2:	eb 07 	jmp	7 <_runtime.modulesinit+0x4b>
 10411c4:	48 8b 89 c0 01 00 00 	mov	rcx, qword ptr [rcx + 448]
 10411cb:	48 85 c9 	test	rcx, rcx
 10411ce:	0f 84 85 01 00 00 	je	389 <_runtime.modulesinit+0x1d9>
 10411d4:	80 b9 b8 01 00 00 00 	cmp	byte ptr [rcx + 440], 0
 10411db:	75 e7 	jne	-25 <_runtime.modulesinit+0x44>
 10411dd:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 10411e2:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 10411e6:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 10411ea:	48 8b 70 10 	mov	rsi, qword ptr [rax + 16]
 10411ee:	4c 8b 00 	mov	r8, qword ptr [rax]
 10411f1:	48 39 f3 	cmp	rbx, rsi
 10411f4:	0f 87 fd 00 00 00 	ja	253 <_runtime.modulesinit+0x177>
 10411fa:	48 8d 5a 01 	lea	rbx, [rdx + 1]
 10411fe:	48 89 58 08 	mov	qword ptr [rax + 8], rbx
 1041202:	49 8d 3c d0 	lea	rdi, [r8 + 8*rdx]
 1041206:	83 3d f3 66 0b 00 00 	cmp	dword ptr [rip + 747251], 0
 104120d:	0f 85 d1 00 00 00 	jne	209 <_runtime.modulesinit+0x164>
 1041213:	49 89 0c d0 	mov	qword ptr [r8 + 8*rdx], rcx
 1041217:	83 b9 90 01 00 00 00 	cmp	dword ptr [rcx + 400], 0
 104121e:	75 a4 	jne	-92 <_runtime.modulesinit+0x44>
 1041220:	48 83 b9 98 01 00 00 00 	cmp	qword ptr [rcx + 408], 0
 1041228:	75 9a 	jne	-102 <_runtime.modulesinit+0x44>
 104122a:	48 8b 81 b8 00 00 00 	mov	rax, qword ptr [rcx + 184]
 1041231:	48 8b 91 88 00 00 00 	mov	rdx, qword ptr [rcx + 136]
 1041238:	48 2b 91 80 00 00 00 	sub	rdx, qword ptr [rcx + 128]
 104123f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041243:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1041248:	e8 c3 e7 fc ff 	call	-202813 <_runtime.progToPointerMask>
 104124d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1041252:	8b 4c 24 10 	mov	ecx, dword ptr [rsp + 16]
 1041256:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 104125b:	89 8a 90 01 00 00 	mov	dword ptr [rdx + 400], ecx
 1041261:	83 3d 98 66 0b 00 00 	cmp	dword ptr [rip + 747160], 0
 1041268:	75 6c 	jne	108 <_runtime.modulesinit+0x156>
 104126a:	48 89 82 98 01 00 00 	mov	qword ptr [rdx + 408], rax
 1041271:	48 8b 82 c0 00 00 00 	mov	rax, qword ptr [rdx + 192]
 1041278:	48 8b 8a 98 00 00 00 	mov	rcx, qword ptr [rdx + 152]
 104127f:	48 2b 8a 90 00 00 00 	sub	rcx, qword ptr [rdx + 144]
 1041286:	48 89 04 24 	mov	qword ptr [rsp], rax
 104128a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104128f:	e8 7c e7 fc ff 	call	-202884 <_runtime.progToPointerMask>
 1041294:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1041298:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104129d:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 10412a2:	89 82 a0 01 00 00 	mov	dword ptr [rdx + 416], eax
 10412a8:	83 3d 51 66 0b 00 00 	cmp	dword ptr [rip + 747089], 0
 10412af:	75 14 	jne	20 <_runtime.modulesinit+0x145>
 10412b1:	48 89 8a a8 01 00 00 	mov	qword ptr [rdx + 424], rcx
 10412b8:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10412bd:	48 89 d1 	mov	rcx, rdx
 10412c0:	e9 ff fe ff ff 	jmp	-257 <_runtime.modulesinit+0x44>
 10412c5:	48 8d ba a8 01 00 00 	lea	rdi, [rdx + 424]
 10412cc:	48 89 c8 	mov	rax, rcx
 10412cf:	e8 0c 17 01 00 	call	71436 <_runtime.gcWriteBarrier>
 10412d4:	eb e2 	jmp	-30 <_runtime.modulesinit+0x138>
 10412d6:	48 8d ba 98 01 00 00 	lea	rdi, [rdx + 408]
 10412dd:	e8 fe 16 01 00 	call	71422 <_runtime.gcWriteBarrier>
 10412e2:	eb 8d 	jmp	-115 <_runtime.modulesinit+0xf1>
 10412e4:	48 89 c2 	mov	rdx, rax
 10412e7:	48 89 c8 	mov	rax, rcx
 10412ea:	e8 f1 16 01 00 	call	71409 <_runtime.gcWriteBarrier>
 10412ef:	48 89 d0 	mov	rax, rdx
 10412f2:	e9 20 ff ff ff 	jmp	-224 <_runtime.modulesinit+0x97>
 10412f7:	48 8d 05 02 c1 01 00 	lea	rax, [rip + 114946]
 10412fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041302:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1041307:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104130c:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 1041311:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1041316:	e8 05 b9 ff ff 	call	-18171 <_runtime.growslice>
 104131b:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1041320:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1041325:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104132a:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 104132f:	48 89 57 10 	mov	qword ptr [rdi + 16], rdx
 1041333:	83 3d c6 65 0b 00 00 	cmp	dword ptr [rip + 746950], 0
 104133a:	75 16 	jne	22 <_runtime.modulesinit+0x1d2>
 104133c:	48 89 07 	mov	qword ptr [rdi], rax
 104133f:	48 89 ca 	mov	rdx, rcx
 1041342:	49 89 c0 	mov	r8, rax
 1041345:	48 89 f8 	mov	rax, rdi
 1041348:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 104134d:	e9 a8 fe ff ff 	jmp	-344 <_runtime.modulesinit+0x7a>
 1041352:	e8 89 16 01 00 	call	71305 <_runtime.gcWriteBarrier>
 1041357:	eb e6 	jmp	-26 <_runtime.modulesinit+0x1bf>
 1041359:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 104135d:	48 8b 38 	mov	rdi, qword ptr [rax]
 1041360:	31 c9 	xor	ecx, ecx
 1041362:	eb 03 	jmp	3 <_runtime.modulesinit+0x1e7>
 1041364:	48 ff c1 	inc	rcx
 1041367:	48 39 d1 	cmp	rcx, rdx
 104136a:	7d 3d 	jge	61 <_runtime.modulesinit+0x229>
 104136c:	48 8b 1c cf 	mov	rbx, qword ptr [rdi + 8*rcx]
 1041370:	80 bb 88 01 00 00 00 	cmp	byte ptr [rbx + 392], 0
 1041377:	74 eb 	je	-21 <_runtime.modulesinit+0x1e4>
 1041379:	83 3d 80 65 0b 00 00 	cmp	dword ptr [rip + 746880], 0
 1041380:	75 5a 	jne	90 <_runtime.modulesinit+0x25c>
 1041382:	48 89 1f 	mov	qword ptr [rdi], rbx
 1041385:	48 8b 10 	mov	rdx, qword ptr [rax]
 1041388:	48 8b 58 08 	mov	rbx, qword ptr [rax + 8]
 104138c:	48 39 d9 	cmp	rcx, rbx
 104138f:	73 5b 	jae	91 <_runtime.modulesinit+0x26c>
 1041391:	48 8d 3c ca 	lea	rdi, [rdx + 8*rcx]
 1041395:	83 3d 64 65 0b 00 00 	cmp	dword ptr [rip + 746852], 0
 104139c:	75 2a 	jne	42 <_runtime.modulesinit+0x248>
 104139e:	48 8d 1d bb a9 08 00 	lea	rbx, [rip + 567739]
 10413a5:	48 89 1c ca 	mov	qword ptr [rdx + 8*rcx], rbx
 10413a9:	48 8d 0d b0 ce 08 00 	lea	rcx, [rip + 577200]
 10413b0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10413b4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10413b9:	e8 42 17 fc ff 	call	-256190 <_runtime.atomicstorep>
 10413be:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 10413c3:	48 83 c4 58 	add	rsp, 88
 10413c7:	c3 	ret
 10413c8:	48 89 c1 	mov	rcx, rax
 10413cb:	48 8d 05 8e a9 08 00 	lea	rax, [rip + 567694]
 10413d2:	e8 09 16 01 00 	call	71177 <_runtime.gcWriteBarrier>
 10413d7:	48 89 c8 	mov	rax, rcx
 10413da:	eb cd 	jmp	-51 <_runtime.modulesinit+0x229>
 10413dc:	48 89 c2 	mov	rdx, rax
 10413df:	48 89 d8 	mov	rax, rbx
 10413e2:	e8 f9 15 01 00 	call	71161 <_runtime.gcWriteBarrier>
 10413e7:	48 89 d0 	mov	rax, rdx
 10413ea:	eb 99 	jmp	-103 <_runtime.modulesinit+0x205>
 10413ec:	48 89 c8 	mov	rax, rcx
 10413ef:	48 89 d9 	mov	rcx, rbx
 10413f2:	e8 59 1f 01 00 	call	73561 <_runtime.panicIndex>
 10413f7:	90 	nop
 10413f8:	e8 d3 f7 00 00 	call	63443 <_runtime.morestack_noctxt>
 10413fd:	e9 7e fd ff ff 	jmp	-642 <_runtime.modulesinit>
 1041402:	cc 	int3
 1041403:	cc 	int3
 1041404:	cc 	int3
 1041405:	cc 	int3
 1041406:	cc 	int3
 1041407:	cc 	int3
 1041408:	cc 	int3
 1041409:	cc 	int3
 104140a:	cc 	int3
 104140b:	cc 	int3
 104140c:	cc 	int3
 104140d:	cc 	int3
 104140e:	cc 	int3
 104140f:	cc 	int3

_runtime.moduledataverify:
 1041410:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1041419:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104141d:	76 40 	jbe	64 <_runtime.moduledataverify+0x4f>
 104141f:	48 83 ec 18 	sub	rsp, 24
 1041423:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1041428:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104142d:	48 8d 05 2c a9 08 00 	lea	rax, [rip + 567596]
 1041434:	eb 1a 	jmp	26 <_runtime.moduledataverify+0x40>
 1041436:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104143b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104143f:	e8 2c 00 00 00 	call	44 <_runtime.moduledataverify1>
 1041444:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1041449:	48 8b 80 c0 01 00 00 	mov	rax, qword ptr [rax + 448]
 1041450:	48 85 c0 	test	rax, rax
 1041453:	75 e1 	jne	-31 <_runtime.moduledataverify+0x26>
 1041455:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104145a:	48 83 c4 18 	add	rsp, 24
 104145e:	c3 	ret
 104145f:	e8 6c f7 00 00 	call	63340 <_runtime.morestack_noctxt>
 1041464:	eb aa 	jmp	-86 <_runtime.moduledataverify>
 1041466:	cc 	int3
 1041467:	cc 	int3
 1041468:	cc 	int3
 1041469:	cc 	int3
 104146a:	cc 	int3
 104146b:	cc 	int3
 104146c:	cc 	int3
 104146d:	cc 	int3
 104146e:	cc 	int3
 104146f:	cc 	int3

_runtime.moduledataverify1:
 1041470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1041479:	48 8d 44 24 80 	lea	rax, [rsp - 128]
 104147e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1041482:	0f 86 8f 06 00 00 	jbe	1679 <_runtime.moduledataverify1+0x6a7>
 1041488:	48 81 ec 00 01 00 00 	sub	rsp, 256
 104148f:	48 89 ac 24 f8 00 00 00 	mov	qword ptr [rsp + 248], rbp
 1041497:	48 8d ac 24 f8 00 00 00 	lea	rbp, [rsp + 248]
 104149f:	48 8b 94 24 08 01 00 00 	mov	rdx, qword ptr [rsp + 264]
 10414a7:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 10414aa:	48 8b 32 	mov	rsi, qword ptr [rdx]
 10414ad:	8b 1b 	mov	ebx, dword ptr [rbx]
 10414af:	89 5c 24 24 	mov	dword ptr [rsp + 36], ebx
 10414b3:	83 fb fb 	cmp	ebx, -5
 10414b6:	0f 85 9c 05 00 00 	jne	1436 <_runtime.moduledataverify1+0x5e8>
 10414bc:	80 7e 04 00 	cmp	byte ptr [rsi + 4], 0
 10414c0:	0f 85 92 05 00 00 	jne	1426 <_runtime.moduledataverify1+0x5e8>
 10414c6:	80 7e 05 00 	cmp	byte ptr [rsi + 5], 0
 10414ca:	0f 85 88 05 00 00 	jne	1416 <_runtime.moduledataverify1+0x5e8>
 10414d0:	80 7e 06 01 	cmp	byte ptr [rsi + 6], 1
 10414d4:	0f 85 7e 05 00 00 	jne	1406 <_runtime.moduledataverify1+0x5e8>
 10414da:	80 7e 07 08 	cmp	byte ptr [rsi + 7], 8
 10414de:	0f 85 74 05 00 00 	jne	1396 <_runtime.moduledataverify1+0x5e8>
 10414e4:	48 8b 4a 20 	mov	rcx, qword ptr [rdx + 32]
 10414e8:	48 8b 5a 18 	mov	rbx, qword ptr [rdx + 24]
 10414ec:	48 8d 71 ff 	lea	rsi, [rcx - 1]
 10414f0:	31 c0 	xor	eax, eax
 10414f2:	eb 03 	jmp	3 <_runtime.moduledataverify1+0x87>
 10414f4:	4c 89 d0 	mov	rax, r10
 10414f7:	48 39 f0 	cmp	rax, rsi
 10414fa:	0f 8d e1 02 00 00 	jge	737 <_runtime.moduledataverify1+0x371>
 1041500:	48 89 c7 	mov	rdi, rax
 1041503:	48 c1 e0 04 	shl	rax, 4
 1041507:	4c 8b 04 18 	mov	r8, qword ptr [rax + rbx]
 104150b:	4c 8d 4f 01 	lea	r9, [rdi + 1]
 104150f:	49 39 c9 	cmp	r9, rcx
 1041512:	0f 83 38 05 00 00 	jae	1336 <_runtime.moduledataverify1+0x5e0>
 1041518:	4d 89 ca 	mov	r10, r9
 104151b:	49 c1 e1 04 	shl	r9, 4
 104151f:	4d 8b 1c 19 	mov	r11, qword ptr [r9 + rbx]
 1041523:	4d 39 d8 	cmp	r8, r11
 1041526:	76 cc 	jbe	-52 <_runtime.moduledataverify1+0x84>
 1041528:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104152c:	4c 8b 02 	mov	r8, qword ptr [rdx]
 104152f:	4c 8b 5c 03 08 	mov	r11, qword ptr [rbx + rax + 8]
 1041534:	49 39 cb 	cmp	r11, rcx
 1041537:	0f 83 0b 05 00 00 	jae	1291 <_runtime.moduledataverify1+0x5d8>
 104153d:	4d 01 c3 	add	r11, r8
 1041540:	49 8b 5c 19 08 	mov	rbx, qword ptr [r9 + rbx + 8]
 1041545:	48 39 cb 	cmp	rbx, rcx
 1041548:	0f 83 f2 04 00 00 	jae	1266 <_runtime.moduledataverify1+0x5d0>
 104154e:	48 89 7c 24 78 	mov	qword ptr [rsp + 120], rdi
 1041553:	4c 89 54 24 70 	mov	qword ptr [rsp + 112], r10
 1041558:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 104155d:	4c 89 4c 24 60 	mov	qword ptr [rsp + 96], r9
 1041562:	4a 8d 0c 03 	lea	rcx, [rbx + r8]
 1041566:	49 39 f2 	cmp	r10, rsi
 1041569:	0f 8c 3d 02 00 00 	jl	573 <_runtime.moduledataverify1+0x33c>
 104156f:	b9 03 00 00 00 	mov	ecx, 3
 1041574:	48 8d 1d 3f 17 03 00 	lea	rbx, [rip + 202559]
 104157b:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1041580:	48 89 9c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbx
 1041588:	4c 89 1c 24 	mov	qword ptr [rsp], r11
 104158c:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1041591:	e8 2a 0d 00 00 	call	3370 <_runtime.funcname>
 1041596:	48 8b 84 24 08 01 00 00 	mov	rax, qword ptr [rsp + 264]
 104159e:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 10415a2:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 10415a6:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 10415ab:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 10415b0:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 10415b5:	48 39 cf 	cmp	rdi, rcx
 10415b8:	0f 83 7a 04 00 00 	jae	1146 <_runtime.moduledataverify1+0x5c8>
 10415be:	4c 8b 44 24 68 	mov	r8, qword ptr [rsp + 104]
 10415c3:	4d 8b 04 10 	mov	r8, qword ptr [r8 + rdx]
 10415c7:	4c 8b 4c 24 70 	mov	r9, qword ptr [rsp + 112]
 10415cc:	49 39 c9 	cmp	r9, rcx
 10415cf:	0f 83 5b 04 00 00 	jae	1115 <_runtime.moduledataverify1+0x5c0>
 10415d5:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 10415da:	48 89 5c 24 70 	mov	qword ptr [rsp + 112], rbx
 10415df:	48 89 b4 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rsi
 10415e7:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10415ec:	48 8b 04 10 	mov	rax, qword ptr [rax + rdx]
 10415f0:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 10415f5:	e8 a6 8e fe ff 	call	-94554 <_runtime.printlock>
 10415fa:	48 8d 05 a7 5c 03 00 	lea	rax, [rip + 220327]
 1041601:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041605:	48 c7 44 24 08 35 00 00 00 	mov	qword ptr [rsp + 8], 53
 104160e:	e8 cd 97 fe ff 	call	-92211 <_runtime.printstring>
 1041613:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1041618:	48 89 04 24 	mov	qword ptr [rsp], rax
 104161c:	e8 6f 96 fe ff 	call	-92561 <_runtime.printhex>
 1041621:	e8 ba 90 fe ff 	call	-94022 <_runtime.printsp>
 1041626:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 104162e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041632:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1041637:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104163c:	e8 9f 97 fe ff 	call	-92257 <_runtime.printstring>
 1041641:	48 8d 05 54 16 03 00 	lea	rax, [rip + 202324]
 1041648:	48 89 04 24 	mov	qword ptr [rsp], rax
 104164c:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1041655:	e8 86 97 fe ff 	call	-92282 <_runtime.printstring>
 104165a:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104165f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041663:	e8 28 96 fe ff 	call	-92632 <_runtime.printhex>
 1041668:	e8 73 90 fe ff 	call	-94093 <_runtime.printsp>
 104166d:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1041675:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041679:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104167e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1041683:	e8 58 97 fe ff 	call	-92328 <_runtime.printstring>
 1041688:	e8 a3 90 fe ff 	call	-94045 <_runtime.printnl>
 104168d:	e8 8e 8e fe ff 	call	-94578 <_runtime.printunlock>
 1041692:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1041697:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104169f:	31 d2 	xor	edx, edx
 10416a1:	e9 87 00 00 00 	jmp	135 <_runtime.moduledataverify1+0x2bd>
 10416a6:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 10416ab:	48 89 b4 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rsi
 10416b3:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10416b8:	48 8b 04 10 	mov	rax, qword ptr [rax + rdx]
 10416bc:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 10416c1:	e8 da 8d fe ff 	call	-94758 <_runtime.printlock>
 10416c6:	48 8d 05 99 15 03 00 	lea	rax, [rip + 202137]
 10416cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10416d1:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10416da:	e8 01 97 fe ff 	call	-92415 <_runtime.printstring>
 10416df:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10416e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10416e8:	e8 a3 95 fe ff 	call	-92765 <_runtime.printhex>
 10416ed:	e8 ee 8f fe ff 	call	-94226 <_runtime.printsp>
 10416f2:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 10416fa:	48 89 04 24 	mov	qword ptr [rsp], rax
 10416fe:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1041703:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1041708:	e8 d3 96 fe ff 	call	-92461 <_runtime.printstring>
 104170d:	e8 1e 90 fe ff 	call	-94178 <_runtime.printnl>
 1041712:	e8 09 8e fe ff 	call	-94711 <_runtime.printunlock>
 1041717:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 104171c:	48 8d 50 01 	lea	rdx, [rax + 1]
 1041720:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1041725:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104172d:	48 39 c2 	cmp	rdx, rax
 1041730:	0f 8f c3 02 00 00 	jg	707 <_runtime.moduledataverify1+0x589>
 1041736:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 104173a:	48 8b 31 	mov	rsi, qword ptr [rcx]
 104173d:	48 8b 79 20 	mov	rdi, qword ptr [rcx + 32]
 1041741:	4c 8b 41 18 	mov	r8, qword ptr [rcx + 24]
 1041745:	48 39 fa 	cmp	rdx, rdi
 1041748:	0f 83 d7 02 00 00 	jae	727 <_runtime.moduledataverify1+0x5b5>
 104174e:	48 89 d7 	mov	rdi, rdx
 1041751:	48 c1 e2 04 	shl	rdx, 4
 1041755:	4e 8b 44 02 08 	mov	r8, qword ptr [rdx + r8 + 8]
 104175a:	49 39 d8 	cmp	r8, rbx
 104175d:	0f 83 b7 02 00 00 	jae	695 <_runtime.moduledataverify1+0x5aa>
 1041763:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 1041768:	48 89 7c 24 68 	mov	qword ptr [rsp + 104], rdi
 104176d:	49 8d 04 30 	lea	rax, [r8 + rsi]
 1041771:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041775:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104177a:	e8 41 0b 00 00 	call	2881 <_runtime.funcname>
 104177f:	48 8b 84 24 08 01 00 00 	mov	rax, qword ptr [rsp + 264]
 1041787:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 104178b:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 104178f:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 1041794:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 1041799:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 104179e:	48 39 cf 	cmp	rdi, rcx
 10417a1:	0f 82 ff fe ff ff 	jb	-257 <_runtime.moduledataverify1+0x236>
 10417a7:	e9 66 02 00 00 	jmp	614 <_runtime.moduledataverify1+0x5a2>
 10417ac:	4c 89 9c 24 98 00 00 00 	mov	qword ptr [rsp + 152], r11
 10417b4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10417b8:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10417bd:	e8 fe 0a 00 00 	call	2814 <_runtime.funcname>
 10417c2:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10417c7:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10417cc:	48 8b 94 24 08 01 00 00 	mov	rdx, qword ptr [rsp + 264]
 10417d4:	4c 8b 9c 24 98 00 00 00 	mov	r11, qword ptr [rsp + 152]
 10417dc:	e9 9a fd ff ff 	jmp	-614 <_runtime.moduledataverify1+0x10b>
 10417e1:	48 8b 7a 50 	mov	rdi, qword ptr [rdx + 80]
 10417e5:	48 85 c9 	test	rcx, rcx
 10417e8:	0f 86 04 02 00 00 	jbe	516 <_runtime.moduledataverify1+0x582>
 10417ee:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10417f1:	0f 85 e2 01 00 00 	jne	482 <_runtime.moduledataverify1+0x569>
 10417f7:	48 c1 e6 04 	shl	rsi, 4
 10417fb:	48 8b 04 1e 	mov	rax, qword ptr [rsi + rbx]
 10417ff:	48 39 42 58 	cmp	qword ptr [rdx + 88], rax
 1041803:	0f 85 d0 01 00 00 	jne	464 <_runtime.moduledataverify1+0x569>
 1041809:	48 8b 82 78 01 00 00 	mov	rax, qword ptr [rdx + 376]
 1041810:	48 8b 8a 70 01 00 00 	mov	rcx, qword ptr [rdx + 368]
 1041817:	48 85 c0 	test	rax, rax
 104181a:	0f 8e d9 00 00 00 	jle	217 <_runtime.moduledataverify1+0x489>
 1041820:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1041825:	31 db 	xor	ebx, ebx
 1041827:	eb 1f 	jmp	31 <_runtime.moduledataverify1+0x3d8>
 1041829:	48 8b b4 24 90 00 00 00 	mov	rsi, qword ptr [rsp + 144]
 1041831:	48 83 c6 28 	add	rsi, 40
 1041835:	48 8b 94 24 08 01 00 00 	mov	rdx, qword ptr [rsp + 264]
 104183d:	48 89 f1 	mov	rcx, rsi
 1041840:	48 89 c3 	mov	rbx, rax
 1041843:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1041848:	48 8b 31 	mov	rsi, qword ptr [rcx]
 104184b:	48 89 b4 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rsi
 1041853:	0f 10 41 08 	movups	xmm0, xmmword ptr [rcx + 8]
 1041857:	0f 11 84 24 d8 00 00 00 	movups	xmmword ptr [rsp + 216], xmm0
 104185f:	0f 10 41 18 	movups	xmm0, xmmword ptr [rcx + 24]
 1041863:	0f 11 84 24 e8 00 00 00 	movups	xmmword ptr [rsp + 232], xmm0
 104186b:	48 8b b4 24 d0 00 00 00 	mov	rsi, qword ptr [rsp + 208]
 1041873:	48 89 b4 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rsi
 104187b:	0f 10 84 24 d8 00 00 00 	movups	xmm0, xmmword ptr [rsp + 216]
 1041883:	0f 11 84 24 b0 00 00 00 	movups	xmmword ptr [rsp + 176], xmm0
 104188b:	0f 10 84 24 e8 00 00 00 	movups	xmm0, xmmword ptr [rsp + 232]
 1041893:	0f 11 84 24 c0 00 00 00 	movups	xmmword ptr [rsp + 192], xmm0
 104189b:	48 8b b4 24 c8 00 00 00 	mov	rsi, qword ptr [rsp + 200]
 10418a3:	48 8b bc 24 c0 00 00 00 	mov	rdi, qword ptr [rsp + 192]
 10418ab:	4c 8b 84 24 b8 00 00 00 	mov	r8, qword ptr [rsp + 184]
 10418b3:	4c 8b 0e 	mov	r9, qword ptr [rsi]
 10418b6:	48 39 7e 08 	cmp	qword ptr [rsi + 8], rdi
 10418ba:	75 55 	jne	85 <_runtime.moduledataverify1+0x4a1>
 10418bc:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 10418c4:	48 89 5c 24 70 	mov	qword ptr [rsp + 112], rbx
 10418c9:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10418cd:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 10418d2:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 10418d7:	e8 14 08 fc ff 	call	-260076 <_runtime.memequal>
 10418dc:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10418e1:	74 26 	je	38 <_runtime.moduledataverify1+0x499>
 10418e3:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10418e8:	48 ff c0 	inc	rax
 10418eb:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10418f0:	48 39 c8 	cmp	rax, rcx
 10418f3:	0f 8c 30 ff ff ff 	jl	-208 <_runtime.moduledataverify1+0x3b9>
 10418f9:	48 8b ac 24 f8 00 00 00 	mov	rbp, qword ptr [rsp + 248]
 1041901:	48 81 c4 00 01 00 00 	add	rsp, 256
 1041908:	c3 	ret
 1041909:	48 8b 94 24 08 01 00 00 	mov	rdx, qword ptr [rsp + 264]
 1041911:	48 8b 82 60 01 00 00 	mov	rax, qword ptr [rdx + 352]
 1041918:	48 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rax
 1041920:	48 8b 8a 68 01 00 00 	mov	rcx, qword ptr [rdx + 360]
 1041927:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 104192c:	48 8b 94 24 a8 00 00 00 	mov	rdx, qword ptr [rsp + 168]
 1041934:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 104193c:	48 8b 9c 24 b0 00 00 00 	mov	rbx, qword ptr [rsp + 176]
 1041944:	48 89 5c 24 70 	mov	qword ptr [rsp + 112], rbx
 1041949:	e8 52 8b fe ff 	call	-95406 <_runtime.printlock>
 104194e:	48 8d 05 32 3e 03 00 	lea	rax, [rip + 212530]
 1041955:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041959:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1041962:	e8 79 94 fe ff 	call	-93063 <_runtime.printstring>
 1041967:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 104196f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041973:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1041978:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104197d:	e8 5e 94 fe ff 	call	-93090 <_runtime.printstring>
 1041982:	48 8d 05 f4 13 03 00 	lea	rax, [rip + 201716]
 1041989:	48 89 04 24 	mov	qword ptr [rsp], rax
 104198d:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1041996:	e8 45 94 fe ff 	call	-93115 <_runtime.printstring>
 104199b:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 10419a3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10419a7:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10419ac:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10419b1:	e8 2a 94 fe ff 	call	-93142 <_runtime.printstring>
 10419b6:	e8 75 8d fe ff 	call	-94859 <_runtime.printnl>
 10419bb:	e8 60 8b fe ff 	call	-95392 <_runtime.printunlock>
 10419c0:	48 8d 05 94 1b 03 00 	lea	rax, [rip + 203668]
 10419c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10419cb:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 10419d4:	e8 87 73 fe ff 	call	-101497 <_runtime.throw>
 10419d9:	48 8d 05 00 2c 03 00 	lea	rax, [rip + 207872]
 10419e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10419e4:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 10419ed:	e8 6e 73 fe ff 	call	-101522 <_runtime.throw>
 10419f2:	31 c0 	xor	eax, eax
 10419f4:	e8 57 19 01 00 	call	72023 <_runtime.panicIndex>
 10419f9:	48 8d 05 21 39 03 00 	lea	rax, [rip + 211233]
 1041a00:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041a04:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1041a0d:	e8 4e 73 fe ff 	call	-101554 <_runtime.throw>
 1041a12:	48 89 f8 	mov	rax, rdi
 1041a15:	e8 36 19 01 00 	call	71990 <_runtime.panicIndex>
 1041a1a:	4c 89 c0 	mov	rax, r8
 1041a1d:	48 89 d9 	mov	rcx, rbx
 1041a20:	e8 3b 19 01 00 	call	71995 <_runtime.panicIndexU>
 1041a25:	48 89 d0 	mov	rax, rdx
 1041a28:	48 89 f9 	mov	rcx, rdi
 1041a2b:	e8 20 19 01 00 	call	71968 <_runtime.panicIndex>
 1041a30:	4c 89 c8 	mov	rax, r9
 1041a33:	e8 18 19 01 00 	call	71960 <_runtime.panicIndex>
 1041a38:	48 89 f8 	mov	rax, rdi
 1041a3b:	e8 10 19 01 00 	call	71952 <_runtime.panicIndex>
 1041a40:	48 89 d8 	mov	rax, rbx
 1041a43:	e8 18 19 01 00 	call	71960 <_runtime.panicIndexU>
 1041a48:	4c 89 d8 	mov	rax, r11
 1041a4b:	e8 10 19 01 00 	call	71952 <_runtime.panicIndexU>
 1041a50:	4c 89 c8 	mov	rax, r9
 1041a53:	e8 f8 18 01 00 	call	71928 <_runtime.panicIndex>
 1041a58:	0f b6 46 04 	movzx	eax, byte ptr [rsi + 4]
 1041a5c:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1041a61:	0f b6 4e 05 	movzx	ecx, byte ptr [rsi + 5]
 1041a65:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1041a6a:	0f b6 56 06 	movzx	edx, byte ptr [rsi + 6]
 1041a6e:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1041a73:	0f b6 5e 07 	movzx	ebx, byte ptr [rsi + 7]
 1041a77:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1041a7c:	e8 1f 8a fe ff 	call	-95713 <_runtime.printlock>
 1041a81:	48 8d 05 75 4c 03 00 	lea	rax, [rip + 216181]
 1041a88:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041a8c:	48 c7 44 24 08 27 00 00 00 	mov	qword ptr [rsp + 8], 39
 1041a95:	e8 46 93 fe ff 	call	-93370 <_runtime.printstring>
 1041a9a:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 1041a9e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041aa2:	e8 e9 91 fe ff 	call	-93719 <_runtime.printhex>
 1041aa7:	e8 34 8c fe ff 	call	-95180 <_runtime.printsp>
 1041aac:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1041ab1:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041ab5:	e8 d6 91 fe ff 	call	-93738 <_runtime.printhex>
 1041aba:	e8 21 8c fe ff 	call	-95199 <_runtime.printsp>
 1041abf:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1041ac4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041ac8:	e8 c3 91 fe ff 	call	-93757 <_runtime.printhex>
 1041acd:	e8 0e 8c fe ff 	call	-95218 <_runtime.printsp>
 1041ad2:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1041ad7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041adb:	e8 b0 91 fe ff 	call	-93776 <_runtime.printhex>
 1041ae0:	e8 fb 8b fe ff 	call	-95237 <_runtime.printsp>
 1041ae5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1041aea:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041aee:	e8 9d 91 fe ff 	call	-93795 <_runtime.printhex>
 1041af3:	e8 38 8c fe ff 	call	-95176 <_runtime.printnl>
 1041af8:	e8 23 8a fe ff 	call	-95709 <_runtime.printunlock>
 1041afd:	48 8d 05 19 3d 03 00 	lea	rax, [rip + 212249]
 1041b04:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041b08:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 1041b11:	e8 4a 72 fe ff 	call	-101814 <_runtime.throw>
 1041b16:	90 	nop
 1041b17:	e8 b4 f0 00 00 	call	61620 <_runtime.morestack_noctxt>
 1041b1c:	e9 4f f9 ff ff 	jmp	-1713 <_runtime.moduledataverify1>
 1041b21:	cc 	int3
 1041b22:	cc 	int3
 1041b23:	cc 	int3
 1041b24:	cc 	int3
 1041b25:	cc 	int3
 1041b26:	cc 	int3
 1041b27:	cc 	int3
 1041b28:	cc 	int3
 1041b29:	cc 	int3
 1041b2a:	cc 	int3
 1041b2b:	cc 	int3
 1041b2c:	cc 	int3
 1041b2d:	cc 	int3
 1041b2e:	cc 	int3
 1041b2f:	cc 	int3

_runtime.findmoduledatap:
 1041b30:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1041b35:	48 8d 0d 24 a2 08 00 	lea	rcx, [rip + 565796]
 1041b3c:	eb 07 	jmp	7 <_runtime.findmoduledatap+0x15>
 1041b3e:	48 8b 89 c0 01 00 00 	mov	rcx, qword ptr [rcx + 448]
 1041b45:	48 85 c9 	test	rcx, rcx
 1041b48:	74 12 	je	18 <_runtime.findmoduledatap+0x2c>
 1041b4a:	48 39 41 50 	cmp	qword ptr [rcx + 80], rax
 1041b4e:	77 ee 	ja	-18 <_runtime.findmoduledatap+0xe>
 1041b50:	48 39 41 58 	cmp	qword ptr [rcx + 88], rax
 1041b54:	76 e8 	jbe	-24 <_runtime.findmoduledatap+0xe>
 1041b56:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1041b5b:	c3 	ret
 1041b5c:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1041b65:	c3 	ret
 1041b66:	cc 	int3
 1041b67:	cc 	int3
 1041b68:	cc 	int3
 1041b69:	cc 	int3
 1041b6a:	cc 	int3
 1041b6b:	cc 	int3
 1041b6c:	cc 	int3
 1041b6d:	cc 	int3
 1041b6e:	cc 	int3
 1041b6f:	cc 	int3

_runtime.findfunc:
 1041b70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1041b79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1041b7d:	0f 86 83 01 00 00 	jbe	387 <_runtime.findfunc+0x196>
 1041b83:	48 83 ec 18 	sub	rsp, 24
 1041b87:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1041b8c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1041b91:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1041b96:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041b9a:	e8 91 ff ff ff 	call	-111 <_runtime.findmoduledatap>
 1041b9f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1041ba4:	48 85 c0 	test	rax, rax
 1041ba7:	0f 84 f9 00 00 00 	je	249 <_runtime.findfunc+0x136>
 1041bad:	48 8b 50 50 	mov	rdx, qword ptr [rax + 80]
 1041bb1:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1041bb6:	48 89 de 	mov	rsi, rbx
 1041bb9:	48 29 d3 	sub	rbx, rdx
 1041bbc:	48 89 da 	mov	rdx, rbx
 1041bbf:	48 c1 eb 0c 	shr	rbx, 12
 1041bc3:	48 8d 1c 9b 	lea	rbx, [rbx + 4*rbx]
 1041bc7:	48 c1 e3 02 	shl	rbx, 2
 1041bcb:	48 03 58 48 	add	rbx, qword ptr [rax + 72]
 1041bcf:	48 81 e2 ff 0f 00 00 	and	rdx, 4095
 1041bd6:	48 c1 ea 08 	shr	rdx, 8
 1041bda:	8b 3b 	mov	edi, dword ptr [rbx]
 1041bdc:	48 83 fa 10 	cmp	rdx, 16
 1041be0:	0f 83 12 01 00 00 	jae	274 <_runtime.findfunc+0x188>
 1041be6:	0f b6 54 13 04 	movzx	edx, byte ptr [rbx + rdx + 4]
 1041beb:	01 fa 	add	edx, edi
 1041bed:	48 8b 48 20 	mov	rcx, qword ptr [rax + 32]
 1041bf1:	48 8b 58 18 	mov	rbx, qword ptr [rax + 24]
 1041bf5:	39 ca 	cmp	edx, ecx
 1041bf7:	72 04 	jb	4 <_runtime.findfunc+0x8d>
 1041bf9:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 1041bfd:	89 d7 	mov	edi, edx
 1041bff:	48 39 cf 	cmp	rdi, rcx
 1041c02:	0f 83 e8 00 00 00 	jae	232 <_runtime.findfunc+0x180>
 1041c08:	48 c1 e7 04 	shl	rdi, 4
 1041c0c:	48 8b 3c 3b 	mov	rdi, qword ptr [rbx + rdi]
 1041c10:	48 39 fe 	cmp	rsi, rdi
 1041c13:	72 04 	jb	4 <_runtime.findfunc+0xa9>
 1041c15:	eb 75 	jmp	117 <_runtime.findfunc+0x11c>
 1041c17:	ff ca 	dec	edx
 1041c19:	89 d7 	mov	edi, edx
 1041c1b:	48 39 cf 	cmp	rdi, rcx
 1041c1e:	0f 83 c4 00 00 00 	jae	196 <_runtime.findfunc+0x178>
 1041c24:	48 c1 e7 04 	shl	rdi, 4
 1041c28:	48 8b 3c 3b 	mov	rdi, qword ptr [rbx + rdi]
 1041c2c:	48 39 f7 	cmp	rdi, rsi
 1041c2f:	76 04 	jbe	4 <_runtime.findfunc+0xc5>
 1041c31:	85 d2 	test	edx, edx
 1041c33:	77 e2 	ja	-30 <_runtime.findfunc+0xa7>
 1041c35:	85 d2 	test	edx, edx
 1041c37:	0f 84 92 00 00 00 	je	146 <_runtime.findfunc+0x15f>
 1041c3d:	89 d2 	mov	edx, edx
 1041c3f:	48 39 ca 	cmp	rdx, rcx
 1041c42:	73 7c 	jae	124 <_runtime.findfunc+0x150>
 1041c44:	48 c1 e2 04 	shl	rdx, 4
 1041c48:	48 8b 54 13 08 	mov	rdx, qword ptr [rbx + rdx + 8]
 1041c4d:	48 83 fa ff 	cmp	rdx, -1
 1041c51:	74 24 	je	36 <_runtime.findfunc+0x107>
 1041c53:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1041c57:	48 8b 18 	mov	rbx, qword ptr [rax]
 1041c5a:	48 39 ca 	cmp	rdx, rcx
 1041c5d:	73 59 	jae	89 <_runtime.findfunc+0x148>
 1041c5f:	48 8d 0c 13 	lea	rcx, [rbx + rdx]
 1041c63:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1041c68:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1041c6d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1041c72:	48 83 c4 18 	add	rsp, 24
 1041c76:	c3 	ret
 1041c77:	0f 57 c0 	xorps	xmm0, xmm0
 1041c7a:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1041c7f:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1041c84:	48 83 c4 18 	add	rsp, 24
 1041c88:	c3 	ret
 1041c89:	44 89 c2 	mov	edx, r8d
 1041c8c:	8d 7a 01 	lea	edi, [rdx + 1]
 1041c8f:	48 39 cf 	cmp	rdi, rcx
 1041c92:	73 34 	jae	52 <_runtime.findfunc+0x158>
 1041c94:	41 89 f8 	mov	r8d, edi
 1041c97:	48 c1 e7 04 	shl	rdi, 4
 1041c9b:	48 8b 3c 1f 	mov	rdi, qword ptr [rdi + rbx]
 1041c9f:	48 39 f7 	cmp	rdi, rsi
 1041ca2:	76 e5 	jbe	-27 <_runtime.findfunc+0x119>
 1041ca4:	eb 97 	jmp	-105 <_runtime.findfunc+0xcd>
 1041ca6:	0f 57 c0 	xorps	xmm0, xmm0
 1041ca9:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1041cae:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1041cb3:	48 83 c4 18 	add	rsp, 24
 1041cb7:	c3 	ret
 1041cb8:	48 89 d0 	mov	rax, rdx
 1041cbb:	e8 a0 16 01 00 	call	71328 <_runtime.panicIndexU>
 1041cc0:	48 89 d0 	mov	rax, rdx
 1041cc3:	e8 88 16 01 00 	call	71304 <_runtime.panicIndex>
 1041cc8:	89 f8 	mov	eax, edi
 1041cca:	e8 81 16 01 00 	call	71297 <_runtime.panicIndex>
 1041ccf:	48 8d 05 b3 44 03 00 	lea	rax, [rip + 214195]
 1041cd6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041cda:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 1041ce3:	e8 78 70 fe ff 	call	-102280 <_runtime.throw>
 1041ce8:	48 89 f8 	mov	rax, rdi
 1041ceb:	e8 60 16 01 00 	call	71264 <_runtime.panicIndex>
 1041cf0:	48 89 f8 	mov	rax, rdi
 1041cf3:	e8 58 16 01 00 	call	71256 <_runtime.panicIndex>
 1041cf8:	48 89 d0 	mov	rax, rdx
 1041cfb:	b9 10 00 00 00 	mov	ecx, 16
 1041d00:	e8 5b 16 01 00 	call	71259 <_runtime.panicIndexU>
 1041d05:	90 	nop
 1041d06:	e8 c5 ee 00 00 	call	61125 <_runtime.morestack_noctxt>
 1041d0b:	e9 60 fe ff ff 	jmp	-416 <_runtime.findfunc>

_runtime.pcvalue:
 1041d10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1041d19:	48 8d 44 24 e0 	lea	rax, [rsp - 32]
 1041d1e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1041d22:	0f 86 8a 05 00 00 	jbe	1418 <_runtime.pcvalue+0x5a2>
 1041d28:	48 81 ec a0 00 00 00 	sub	rsp, 160
 1041d2f:	48 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], rbp
 1041d37:	48 8d ac 24 98 00 00 00 	lea	rbp, [rsp + 152]
 1041d3f:	8b 94 24 b8 00 00 00 	mov	edx, dword ptr [rsp + 184]
 1041d46:	85 d2 	test	edx, edx
 1041d48:	0f 84 c8 04 00 00 	je	1224 <_runtime.pcvalue+0x506>
 1041d4e:	48 8b 9c 24 c8 00 00 00 	mov	rbx, qword ptr [rsp + 200]
 1041d56:	48 85 db 	test	rbx, rbx
 1041d59:	0f 84 aa 04 00 00 	je	1194 <_runtime.pcvalue+0x4f9>
 1041d5f:	90 	nop
 1041d60:	48 8b b4 24 c0 00 00 00 	mov	rsi, qword ptr [rsp + 192]
 1041d68:	48 89 f7 	mov	rdi, rsi
 1041d6b:	48 c1 ee 03 	shr	rsi, 3
 1041d6f:	48 83 e6 01 	and	rsi, 1
 1041d73:	31 c0 	xor	eax, eax
 1041d75:	eb 07 	jmp	7 <_runtime.pcvalue+0x6e>
 1041d77:	49 8d 41 01 	lea	rax, [r9 + 1]
 1041d7b:	4c 89 c6 	mov	rsi, r8
 1041d7e:	48 83 f8 08 	cmp	rax, 8
 1041d82:	7d 3f 	jge	63 <_runtime.pcvalue+0xb3>
 1041d84:	49 89 f0 	mov	r8, rsi
 1041d87:	48 c1 e6 07 	shl	rsi, 7
 1041d8b:	48 01 de 	add	rsi, rbx
 1041d8e:	49 89 c1 	mov	r9, rax
 1041d91:	48 c1 e0 04 	shl	rax, 4
 1041d95:	44 8b 54 06 08 	mov	r10d, dword ptr [rsi + rax + 8]
 1041d9a:	44 39 d2 	cmp	edx, r10d
 1041d9d:	75 d8 	jne	-40 <_runtime.pcvalue+0x67>
 1041d9f:	4c 8b 14 06 	mov	r10, qword ptr [rsi + rax]
 1041da3:	4c 39 d7 	cmp	rdi, r10
 1041da6:	75 cf 	jne	-49 <_runtime.pcvalue+0x67>
 1041da8:	8b 44 06 0c 	mov	eax, dword ptr [rsi + rax + 12]
 1041dac:	89 84 24 d8 00 00 00 	mov	dword ptr [rsp + 216], eax
 1041db3:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 1041dbb:	48 81 c4 a0 00 00 00 	add	rsp, 160
 1041dc2:	c3 	ret
 1041dc3:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1041dcb:	48 85 f6 	test	rsi, rsi
 1041dce:	0f 84 05 04 00 00 	je	1029 <_runtime.pcvalue+0x4c9>
 1041dd4:	4c 8b 84 24 b0 00 00 00 	mov	r8, qword ptr [rsp + 176]
 1041ddc:	4d 8b 48 10 	mov	r9, qword ptr [r8 + 16]
 1041de0:	49 8b 48 08 	mov	rcx, qword ptr [r8 + 8]
 1041de4:	4d 8b 10 	mov	r10, qword ptr [r8]
 1041de7:	48 63 c2 	movsxd	rax, edx
 1041dea:	48 39 c8 	cmp	rax, rcx
 1041ded:	0f 87 62 04 00 00 	ja	1122 <_runtime.pcvalue+0x545>
 1041df3:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 1041dfb:	4c 8b 1e 	mov	r11, qword ptr [rsi]
 1041dfe:	4c 89 5c 24 58 	mov	qword ptr [rsp + 88], r11
 1041e03:	c7 44 24 54 ff ff ff ff 	mov	dword ptr [rsp + 84], 4294967295
 1041e0b:	48 29 c1 	sub	rcx, rax
 1041e0e:	49 29 c1 	sub	r9, rax
 1041e11:	4d 89 cb 	mov	r11, r9
 1041e14:	49 f7 d9 	neg	r9
 1041e17:	49 c1 f9 3f 	sar	r9, 63
 1041e1b:	49 21 c1 	and	r9, rax
 1041e1e:	4d 01 d1 	add	r9, r10
 1041e21:	eb 0e 	jmp	14 <_runtime.pcvalue+0x121>
 1041e23:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 1041e2b:	49 89 d3 	mov	r11, rdx
 1041e2e:	49 89 c1 	mov	r9, rax
 1041e31:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1041e36:	48 39 06 	cmp	qword ptr [rsi], rax
 1041e39:	4c 89 0c 24 	mov	qword ptr [rsp], r9
 1041e3d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1041e42:	4c 89 5c 24 10 	mov	qword ptr [rsp + 16], r11
 1041e47:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 1041e4c:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1041e51:	48 8d 4c 24 54 	lea	rcx, [rsp + 84]
 1041e56:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1041e5b:	0f 94 44 24 28 	sete	byte ptr [rsp + 40]
 1041e60:	e8 fb 0b 00 00 	call	3067 <_runtime.step>
 1041e65:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1041e6a:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1041e6f:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1041e74:	80 7c 24 48 00 	cmp	byte ptr [rsp + 72], 0
 1041e79:	0f 84 c5 00 00 00 	je	197 <_runtime.pcvalue+0x234>
 1041e7f:	48 8b 9c 24 c0 00 00 00 	mov	rbx, qword ptr [rsp + 192]
 1041e87:	48 39 5c 24 58 	cmp	qword ptr [rsp + 88], rbx
 1041e8c:	76 95 	jbe	-107 <_runtime.pcvalue+0x113>
 1041e8e:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1041e96:	48 85 c0 	test	rax, rax
 1041e99:	0f 84 8a 00 00 00 	je	138 <_runtime.pcvalue+0x219>
 1041e9f:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1041ea8:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1041eac:	90 	nop
 1041ead:	8b 91 20 01 00 00 	mov	edx, dword ptr [rcx + 288]
 1041eb3:	8b b1 24 01 00 00 	mov	esi, dword ptr [rcx + 292]
 1041eb9:	89 b1 20 01 00 00 	mov	dword ptr [rcx + 288], esi
 1041ebf:	89 d7 	mov	edi, edx
 1041ec1:	c1 e2 11 	shl	edx, 17
 1041ec4:	31 d7 	xor	edi, edx
 1041ec6:	89 f2 	mov	edx, esi
 1041ec8:	31 fe 	xor	esi, edi
 1041eca:	c1 ef 07 	shr	edi, 7
 1041ecd:	31 f7 	xor	edi, esi
 1041ecf:	89 d6 	mov	esi, edx
 1041ed1:	c1 ea 10 	shr	edx, 16
 1041ed4:	31 fa 	xor	edx, edi
 1041ed6:	89 91 24 01 00 00 	mov	dword ptr [rcx + 292], edx
 1041edc:	48 89 d9 	mov	rcx, rbx
 1041edf:	48 c1 eb 03 	shr	rbx, 3
 1041ee3:	48 83 e3 01 	and	rbx, 1
 1041ee7:	48 c1 e3 07 	shl	rbx, 7
 1041eeb:	48 8d 3c 18 	lea	rdi, [rax + rbx]
 1041eef:	01 f2 	add	edx, esi
 1041ef1:	83 e2 07 	and	edx, 7
 1041ef4:	48 c1 e2 04 	shl	rdx, 4
 1041ef8:	8b 74 18 08 	mov	esi, dword ptr [rax + rbx + 8]
 1041efc:	44 8b 44 18 0c 	mov	r8d, dword ptr [rax + rbx + 12]
 1041f01:	4c 8b 0c 18 	mov	r9, qword ptr [rax + rbx]
 1041f05:	4c 89 0c 17 	mov	qword ptr [rdi + rdx], r9
 1041f09:	89 74 17 08 	mov	dword ptr [rdi + rdx + 8], esi
 1041f0d:	44 89 44 17 0c 	mov	dword ptr [rdi + rdx + 12], r8d
 1041f12:	8b 54 24 54 	mov	edx, dword ptr [rsp + 84]
 1041f16:	48 89 0c 18 	mov	qword ptr [rax + rbx], rcx
 1041f1a:	8b 8c 24 b8 00 00 00 	mov	ecx, dword ptr [rsp + 184]
 1041f21:	89 4c 18 08 	mov	dword ptr [rax + rbx + 8], ecx
 1041f25:	89 54 18 0c 	mov	dword ptr [rax + rbx + 12], edx
 1041f29:	8b 44 24 54 	mov	eax, dword ptr [rsp + 84]
 1041f2d:	89 84 24 d8 00 00 00 	mov	dword ptr [rsp + 216], eax
 1041f34:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 1041f3c:	48 81 c4 a0 00 00 00 	add	rsp, 160
 1041f43:	c3 	ret
 1041f44:	83 3d 6d 58 0b 00 00 	cmp	dword ptr [rip + 743533], 0
 1041f4b:	0f 85 6d 02 00 00 	jne	621 <_runtime.pcvalue+0x4ae>
 1041f51:	0f b6 9c 24 d0 00 00 00 	movzx	ebx, byte ptr [rsp + 208]
 1041f59:	84 db 	test	bl, bl
 1041f5b:	0f 84 5d 02 00 00 	je	605 <_runtime.pcvalue+0x4ae>
 1041f61:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1041f69:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1041f6e:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 1041f73:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1041f7b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041f7f:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 1041f87:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1041f8c:	e8 2f 03 00 00 	call	815 <_runtime.funcname>
 1041f91:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1041f96:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1041f9b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1041fa0:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 1041fa8:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1041fad:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 1041fb2:	e8 e9 84 fe ff 	call	-97047 <_runtime.printlock>
 1041fb7:	48 8d 05 50 43 03 00 	lea	rax, [rip + 213840]
 1041fbe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041fc2:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 1041fcb:	e8 10 8e fe ff 	call	-94704 <_runtime.printstring>
 1041fd0:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1041fd8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041fdc:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1041fe1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1041fe6:	e8 f5 8d fe ff 	call	-94731 <_runtime.printstring>
 1041feb:	48 8d 05 f5 0c 03 00 	lea	rax, [rip + 199925]
 1041ff2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1041ff6:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1041fff:	e8 dc 8d fe ff 	call	-94756 <_runtime.printstring>
 1042004:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1042009:	48 89 04 24 	mov	qword ptr [rsp], rax
 104200d:	e8 7e 8c fe ff 	call	-95106 <_runtime.printhex>
 1042012:	48 8d 05 12 12 03 00 	lea	rax, [rip + 201234]
 1042019:	48 89 04 24 	mov	qword ptr [rsp], rax
 104201d:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1042026:	e8 b5 8d fe ff 	call	-94795 <_runtime.printstring>
 104202b:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1042033:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042037:	e8 54 8c fe ff 	call	-95148 <_runtime.printhex>
 104203c:	48 8d 05 62 0d 03 00 	lea	rax, [rip + 200034]
 1042043:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042047:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1042050:	e8 8b 8d fe ff 	call	-94837 <_runtime.printstring>
 1042055:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 104205d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042061:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1042066:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104206b:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1042070:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1042075:	e8 f6 8d fe ff 	call	-94730 <_runtime.printslice>
 104207a:	e8 b1 86 fe ff 	call	-96591 <_runtime.printnl>
 104207f:	e8 9c 84 fe ff 	call	-97124 <_runtime.printunlock>
 1042084:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 104208c:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1042090:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1042094:	48 8b 00 	mov	rax, qword ptr [rax]
 1042097:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 104209f:	48 39 d3 	cmp	rbx, rdx
 10420a2:	0f 87 a2 01 00 00 	ja	418 <_runtime.pcvalue+0x53a>
 10420a8:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 10420b0:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 10420b3:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 10420b8:	c7 44 24 54 ff ff ff ff 	mov	dword ptr [rsp + 84], 4294967295
 10420c0:	48 29 da 	sub	rdx, rbx
 10420c3:	48 29 d9 	sub	rcx, rbx
 10420c6:	48 89 cf 	mov	rdi, rcx
 10420c9:	48 f7 d9 	neg	rcx
 10420cc:	48 c1 f9 3f 	sar	rcx, 63
 10420d0:	48 21 d9 	and	rcx, rbx
 10420d3:	48 01 c8 	add	rax, rcx
 10420d6:	e9 93 00 00 00 	jmp	147 <_runtime.pcvalue+0x45e>
 10420db:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 10420e0:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 10420e8:	48 89 54 24 60 	mov	qword ptr [rsp + 96], rdx
 10420ed:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10420f2:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 10420f7:	e8 a4 83 fe ff 	call	-97372 <_runtime.printlock>
 10420fc:	48 8d 05 e9 0d 03 00 	lea	rax, [rip + 200169]
 1042103:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042107:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 1042110:	e8 cb 8c fe ff 	call	-95029 <_runtime.printstring>
 1042115:	48 63 44 24 54 	movsxd	rax, dword ptr [rsp + 84]
 104211a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104211e:	e8 fd 8a fe ff 	call	-95491 <_runtime.printint>
 1042123:	48 8d 05 15 11 03 00 	lea	rax, [rip + 200981]
 104212a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104212e:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1042137:	e8 a4 8c fe ff 	call	-95068 <_runtime.printstring>
 104213c:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1042141:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042145:	e8 46 8b fe ff 	call	-95418 <_runtime.printhex>
 104214a:	e8 e1 85 fe ff 	call	-96799 <_runtime.printnl>
 104214f:	e8 cc 83 fe ff 	call	-97332 <_runtime.printunlock>
 1042154:	48 8b b4 24 a8 00 00 00 	mov	rsi, qword ptr [rsp + 168]
 104215c:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1042161:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1042166:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 104216e:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1042173:	48 39 0e 	cmp	qword ptr [rsi], rcx
 1042176:	48 89 04 24 	mov	qword ptr [rsp], rax
 104217a:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104217f:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 1042184:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 1042189:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104218e:	48 8d 4c 24 54 	lea	rcx, [rsp + 84]
 1042193:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1042198:	0f 94 44 24 28 	sete	byte ptr [rsp + 40]
 104219d:	e8 be 08 00 00 	call	2238 <_runtime.step>
 10421a2:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10421a7:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10421ac:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10421b1:	80 7c 24 48 00 	cmp	byte ptr [rsp + 72], 0
 10421b6:	0f 85 1f ff ff ff 	jne	-225 <_runtime.pcvalue+0x3cb>
 10421bc:	eb 73 	jmp	115 <_runtime.pcvalue+0x521>
 10421be:	c7 84 24 d8 00 00 00 ff ff ff ff 	mov	dword ptr [rsp + 216], 4294967295
 10421c9:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 10421d1:	48 81 c4 a0 00 00 00 	add	rsp, 160
 10421d8:	c3 	ret
 10421d9:	0f b6 84 24 d0 00 00 00 	movzx	eax, byte ptr [rsp + 208]
 10421e1:	84 c0 	test	al, al
 10421e3:	74 09 	je	9 <_runtime.pcvalue+0x4de>
 10421e5:	83 3d cc 55 0b 00 00 	cmp	dword ptr [rip + 742860], 0
 10421ec:	74 6c 	je	108 <_runtime.pcvalue+0x54a>
 10421ee:	c7 84 24 d8 00 00 00 ff ff ff ff 	mov	dword ptr [rsp + 216], 4294967295
 10421f9:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 1042201:	48 81 c4 a0 00 00 00 	add	rsp, 160
 1042208:	c3 	ret
 1042209:	48 8b bc 24 c0 00 00 00 	mov	rdi, qword ptr [rsp + 192]
 1042211:	e9 ad fb ff ff 	jmp	-1107 <_runtime.pcvalue+0xb3>
 1042216:	c7 84 24 d8 00 00 00 ff ff ff ff 	mov	dword ptr [rsp + 216], 4294967295
 1042221:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 1042229:	48 81 c4 a0 00 00 00 	add	rsp, 160
 1042230:	c3 	ret
 1042231:	48 8d 05 e9 30 03 00 	lea	rax, [rip + 209129]
 1042238:	48 89 04 24 	mov	qword ptr [rsp], rax
 104223c:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1042245:	e8 16 6b fe ff 	call	-103658 <_runtime.throw>
 104224a:	48 89 d8 	mov	rax, rbx
 104224d:	48 89 d1 	mov	rcx, rdx
 1042250:	e8 5b 11 01 00 	call	69979 <_runtime.panicSliceB>
 1042255:	e8 56 11 01 00 	call	69974 <_runtime.panicSliceB>
 104225a:	48 8b 06 	mov	rax, qword ptr [rsi]
 104225d:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1042262:	e8 39 82 fe ff 	call	-97735 <_runtime.printlock>
 1042267:	48 8d 05 e7 31 03 00 	lea	rax, [rip + 209383]
 104226e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042272:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 104227b:	e8 60 8b fe ff 	call	-95392 <_runtime.printstring>
 1042280:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1042285:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042289:	e8 02 8a fe ff 	call	-95742 <_runtime.printhex>
 104228e:	e8 9d 84 fe ff 	call	-97123 <_runtime.printnl>
 1042293:	e8 88 82 fe ff 	call	-97656 <_runtime.printunlock>
 1042298:	48 8d 05 07 16 03 00 	lea	rax, [rip + 202247]
 104229f:	48 89 04 24 	mov	qword ptr [rsp], rax
 10422a3:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 10422ac:	e8 af 6a fe ff 	call	-103761 <_runtime.throw>
 10422b1:	90 	nop
 10422b2:	e8 19 e9 00 00 	call	59673 <_runtime.morestack_noctxt>
 10422b7:	e9 54 fa ff ff 	jmp	-1452 <_runtime.pcvalue>
 10422bc:	cc 	int3
 10422bd:	cc 	int3
 10422be:	cc 	int3
 10422bf:	cc 	int3

_runtime.funcname:
 10422c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10422c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10422cd:	0f 86 83 00 00 00 	jbe	131 <_runtime.funcname+0x96>
 10422d3:	48 83 ec 30 	sub	rsp, 48
 10422d7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10422dc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10422e1:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10422e6:	48 85 d2 	test	rdx, rdx
 10422e9:	74 07 	je	7 <_runtime.funcname+0x32>
 10422eb:	8b 52 08 	mov	edx, dword ptr [rdx + 8]
 10422ee:	85 d2 	test	edx, edx
 10422f0:	75 45 	jne	69 <_runtime.funcname+0x77>
 10422f2:	31 c0 	xor	eax, eax
 10422f4:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10422f9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10422fd:	e8 2e ed ff ff 	call	-4818 <_runtime.findnull>
 1042302:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1042307:	0f 57 c0 	xorps	xmm0, xmm0
 104230a:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 104230f:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1042314:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1042319:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104231e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1042323:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1042328:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 104232d:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1042332:	48 83 c4 30 	add	rsp, 48
 1042336:	c3 	ret
 1042337:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 104233c:	48 8b 4b 08 	mov	rcx, qword ptr [rbx + 8]
 1042340:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 1042343:	48 63 c2 	movsxd	rax, edx
 1042346:	48 39 c8 	cmp	rax, rcx
 1042349:	73 05 	jae	5 <_runtime.funcname+0x90>
 104234b:	48 01 d8 	add	rax, rbx
 104234e:	eb a4 	jmp	-92 <_runtime.funcname+0x34>
 1042350:	e8 fb 0f 01 00 	call	69627 <_runtime.panicIndex>
 1042355:	90 	nop
 1042356:	e8 75 e8 00 00 	call	59509 <_runtime.morestack_noctxt>
 104235b:	e9 60 ff ff ff 	jmp	-160 <_runtime.funcname>

_runtime.funcnameFromNameoff:
 1042360:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1042369:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104236d:	0f 86 80 00 00 00 	jbe	128 <_runtime.funcnameFromNameoff+0x93>
 1042373:	48 83 ec 30 	sub	rsp, 48
 1042377:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104237c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1042381:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1042386:	48 85 d2 	test	rdx, rdx
 1042389:	74 5e 	je	94 <_runtime.funcnameFromNameoff+0x89>
 104238b:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1042390:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1042393:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 1042397:	8b 54 24 48 	mov	edx, dword ptr [rsp + 72]
 104239b:	48 63 c2 	movsxd	rax, edx
 104239e:	48 39 c8 	cmp	rax, rcx
 10423a1:	73 4a 	jae	74 <_runtime.funcnameFromNameoff+0x8d>
 10423a3:	48 01 d8 	add	rax, rbx
 10423a6:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10423ab:	48 89 04 24 	mov	qword ptr [rsp], rax
 10423af:	e8 7c ec ff ff 	call	-4996 <_runtime.findnull>
 10423b4:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10423b9:	0f 57 c0 	xorps	xmm0, xmm0
 10423bc:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10423c1:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10423c6:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10423cb:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10423d0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10423d5:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 10423da:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 10423df:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10423e4:	48 83 c4 30 	add	rsp, 48
 10423e8:	c3 	ret
 10423e9:	31 c0 	xor	eax, eax
 10423eb:	eb b9 	jmp	-71 <_runtime.funcnameFromNameoff+0x46>
 10423ed:	e8 5e 0f 01 00 	call	69470 <_runtime.panicIndex>
 10423f2:	90 	nop
 10423f3:	e8 d8 e7 00 00 	call	59352 <_runtime.morestack_noctxt>
 10423f8:	e9 63 ff ff ff 	jmp	-157 <_runtime.funcnameFromNameoff>
 10423fd:	cc 	int3
 10423fe:	cc 	int3
 10423ff:	cc 	int3

_runtime.funcline1:
 1042400:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1042409:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104240d:	0f 86 b4 01 00 00 	jbe	436 <_runtime.funcline1+0x1c7>
 1042413:	48 83 ec 68 	sub	rsp, 104
 1042417:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 104241c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1042421:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1042426:	48 85 c0 	test	rax, rax
 1042429:	0f 84 52 01 00 00 	je	338 <_runtime.funcline1+0x181>
 104242f:	8b 48 18 	mov	ecx, dword ptr [rax + 24]
 1042432:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042436:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 104243b:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1042440:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1042444:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 104244c:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1042451:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 104245a:	0f b6 9c 24 88 00 00 00 	movzx	ebx, byte ptr [rsp + 136]
 1042462:	88 5c 24 28 	mov	byte ptr [rsp + 40], bl
 1042466:	e8 a5 f8 ff ff 	call	-1883 <_runtime.pcvalue>
 104246b:	48 63 44 24 30 	movsxd	rax, dword ptr [rsp + 48]
 1042470:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1042475:	48 8b 4c 24 70 	mov	rcx, qword ptr [rsp + 112]
 104247a:	8b 51 1c 	mov	edx, dword ptr [rcx + 28]
 104247d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1042481:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1042486:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104248b:	89 54 24 10 	mov	dword ptr [rsp + 16], edx
 104248f:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1042497:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 104249c:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 10424a5:	0f b6 94 24 88 00 00 00 	movzx	edx, byte ptr [rsp + 136]
 10424ad:	88 54 24 28 	mov	byte ptr [rsp + 40], dl
 10424b1:	e8 5a f8 ff ff 	call	-1958 <_runtime.pcvalue>
 10424b6:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 10424ba:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10424bf:	48 83 f9 ff 	cmp	rcx, -1
 10424c3:	75 30 	jne	48 <_runtime.funcline1+0xf5>
 10424c5:	48 8d 05 97 07 03 00 	lea	rax, [rip + 198551]
 10424cc:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 10424d4:	48 c7 84 24 98 00 00 00 01 00 00 00 	mov	qword ptr [rsp + 152], 1
 10424e0:	c7 84 24 a0 00 00 00 00 00 00 00 	mov	dword ptr [rsp + 160], 0
 10424eb:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10424f0:	48 83 c4 68 	add	rsp, 104
 10424f4:	c3 	ret
 10424f5:	83 f8 ff 	cmp	eax, -1
 10424f8:	74 cb 	je	-53 <_runtime.funcline1+0xc5>
 10424fa:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 10424ff:	48 8b 5a 38 	mov	rbx, qword ptr [rdx + 56]
 1042503:	48 8b 72 30 	mov	rsi, qword ptr [rdx + 48]
 1042507:	48 39 d9 	cmp	rcx, rbx
 104250a:	7d b9 	jge	-71 <_runtime.funcline1+0xc5>
 104250c:	48 8b 3a 	mov	rdi, qword ptr [rdx]
 104250f:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 1042513:	0f 83 a2 00 00 00 	jae	162 <_runtime.funcline1+0x1bb>
 1042519:	8b 1c 8e 	mov	ebx, dword ptr [rsi + 4*rcx]
 104251c:	48 39 d3 	cmp	rbx, rdx
 104251f:	0f 83 8c 00 00 00 	jae	140 <_runtime.funcline1+0x1b1>
 1042525:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 1042529:	48 8d 04 1f 	lea	rax, [rdi + rbx]
 104252d:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1042532:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042536:	e8 f5 ea ff ff 	call	-5387 <_runtime.findnull>
 104253b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1042540:	0f 57 c0 	xorps	xmm0, xmm0
 1042543:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1042548:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 104254d:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1042552:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1042557:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104255c:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 1042564:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 104256c:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 1042570:	89 84 24 a0 00 00 00 	mov	dword ptr [rsp + 160], eax
 1042577:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 104257c:	48 83 c4 68 	add	rsp, 104
 1042580:	c3 	ret
 1042581:	48 8d 05 db 06 03 00 	lea	rax, [rip + 198363]
 1042588:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 1042590:	48 c7 84 24 98 00 00 00 01 00 00 00 	mov	qword ptr [rsp + 152], 1
 104259c:	c7 84 24 a0 00 00 00 00 00 00 00 	mov	dword ptr [rsp + 160], 0
 10425a7:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10425ac:	48 83 c4 68 	add	rsp, 104
 10425b0:	c3 	ret
 10425b1:	89 d8 	mov	eax, ebx
 10425b3:	48 89 d1 	mov	rcx, rdx
 10425b6:	e8 95 0d 01 00 	call	69013 <_runtime.panicIndex>
 10425bb:	48 89 c8 	mov	rax, rcx
 10425be:	48 89 d9 	mov	rcx, rbx
 10425c1:	e8 8a 0d 01 00 	call	69002 <_runtime.panicIndex>
 10425c6:	90 	nop
 10425c7:	e8 04 e6 00 00 	call	58884 <_runtime.morestack_noctxt>
 10425cc:	e9 2f fe ff ff 	jmp	-465 <_runtime.funcline1>
 10425d1:	cc 	int3
 10425d2:	cc 	int3
 10425d3:	cc 	int3
 10425d4:	cc 	int3
 10425d5:	cc 	int3
 10425d6:	cc 	int3
 10425d7:	cc 	int3
 10425d8:	cc 	int3
 10425d9:	cc 	int3
 10425da:	cc 	int3
 10425db:	cc 	int3
 10425dc:	cc 	int3
 10425dd:	cc 	int3
 10425de:	cc 	int3
 10425df:	cc 	int3

_runtime.funcline:
 10425e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10425e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10425ed:	76 5b 	jbe	91 <_runtime.funcline+0x6a>
 10425ef:	48 83 ec 40 	sub	rsp, 64
 10425f3:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 10425f8:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10425fd:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1042602:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042606:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104260b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042610:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1042615:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104261a:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 104261f:	e8 dc fd ff ff 	call	-548 <_runtime.funcline1>
 1042624:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1042629:	8b 4c 24 30 	mov	ecx, dword ptr [rsp + 48]
 104262d:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1042632:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1042637:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 104263c:	89 4c 24 70 	mov	dword ptr [rsp + 112], ecx
 1042640:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1042645:	48 83 c4 40 	add	rsp, 64
 1042649:	c3 	ret
 104264a:	e8 81 e5 00 00 	call	58753 <_runtime.morestack_noctxt>
 104264f:	eb 8f 	jmp	-113 <_runtime.funcline>
 1042651:	cc 	int3
 1042652:	cc 	int3
 1042653:	cc 	int3
 1042654:	cc 	int3
 1042655:	cc 	int3
 1042656:	cc 	int3
 1042657:	cc 	int3
 1042658:	cc 	int3
 1042659:	cc 	int3
 104265a:	cc 	int3
 104265b:	cc 	int3
 104265c:	cc 	int3
 104265d:	cc 	int3
 104265e:	cc 	int3
 104265f:	cc 	int3

_runtime.funcspdelta:
 1042660:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1042669:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104266d:	0f 86 48 01 00 00 	jbe	328 <_runtime.funcspdelta+0x15b>
 1042673:	48 83 ec 68 	sub	rsp, 104
 1042677:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 104267c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1042681:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1042686:	8b 48 14 	mov	ecx, dword ptr [rax + 20]
 1042689:	48 89 04 24 	mov	qword ptr [rsp], rax
 104268d:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1042692:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1042697:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 104269b:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 10426a3:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10426a8:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 10426b0:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 10426b5:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 10426ba:	e8 51 f6 ff ff 	call	-2479 <_runtime.pcvalue>
 10426bf:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 10426c3:	a9 07 00 00 00 	test	eax, 7
 10426c8:	75 11 	jne	17 <_runtime.funcspdelta+0x7b>
 10426ca:	89 84 24 90 00 00 00 	mov	dword ptr [rsp + 144], eax
 10426d1:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10426d6:	48 83 c4 68 	add	rsp, 104
 10426da:	c3 	ret
 10426db:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 10426df:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 10426e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10426e8:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 10426ed:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10426f2:	e8 c9 fb ff ff 	call	-1079 <_runtime.funcname>
 10426f7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10426fc:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1042701:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1042706:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 104270b:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1042710:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1042713:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 1042718:	48 63 52 14 	movsxd	rdx, dword ptr [rdx + 20]
 104271c:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1042721:	e8 7a 7d fe ff 	call	-98950 <_runtime.printlock>
 1042726:	48 8d 05 35 14 03 00 	lea	rax, [rip + 201781]
 104272d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042731:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104273a:	e8 a1 86 fe ff 	call	-96607 <_runtime.printstring>
 104273f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1042744:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042748:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104274d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042752:	e8 89 86 fe ff 	call	-96631 <_runtime.printstring>
 1042757:	e8 84 7f fe ff 	call	-98428 <_runtime.printsp>
 104275c:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1042761:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042765:	e8 26 85 fe ff 	call	-96986 <_runtime.printhex>
 104276a:	e8 71 7f fe ff 	call	-98447 <_runtime.printsp>
 104276f:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1042777:	48 89 04 24 	mov	qword ptr [rsp], rax
 104277b:	e8 10 85 fe ff 	call	-97008 <_runtime.printhex>
 1042780:	e8 5b 7f fe ff 	call	-98469 <_runtime.printsp>
 1042785:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104278a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104278e:	e8 fd 84 fe ff 	call	-97027 <_runtime.printhex>
 1042793:	e8 48 7f fe ff 	call	-98488 <_runtime.printsp>
 1042798:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 104279c:	48 63 c8 	movsxd	rcx, eax
 104279f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10427a3:	e8 78 84 fe ff 	call	-97160 <_runtime.printint>
 10427a8:	e8 83 7f fe ff 	call	-98429 <_runtime.printnl>
 10427ad:	e8 6e 7d fe ff 	call	-98962 <_runtime.printunlock>
 10427b2:	8b 44 24 3c 	mov	eax, dword ptr [rsp + 60]
 10427b6:	e9 0f ff ff ff 	jmp	-241 <_runtime.funcspdelta+0x6a>
 10427bb:	e8 10 e4 00 00 	call	58384 <_runtime.morestack_noctxt>
 10427c0:	e9 9b fe ff ff 	jmp	-357 <_runtime.funcspdelta>
 10427c5:	cc 	int3
 10427c6:	cc 	int3
 10427c7:	cc 	int3
 10427c8:	cc 	int3
 10427c9:	cc 	int3
 10427ca:	cc 	int3
 10427cb:	cc 	int3
 10427cc:	cc 	int3
 10427cd:	cc 	int3
 10427ce:	cc 	int3
 10427cf:	cc 	int3

_runtime.funcMaxSPDelta:
 10427d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10427d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10427dd:	0f 86 e1 00 00 00 	jbe	225 <_runtime.funcMaxSPDelta+0xf4>
 10427e3:	48 83 ec 68 	sub	rsp, 104
 10427e7:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 10427ec:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 10427f1:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 10427f6:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 10427fa:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 10427fe:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1042801:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 1042806:	48 63 46 14 	movsxd	rax, dword ptr [rsi + 20]
 104280a:	48 39 c8 	cmp	rax, rcx
 104280d:	0f 87 ab 00 00 00 	ja	171 <_runtime.funcMaxSPDelta+0xee>
 1042813:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 1042816:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 104281b:	c7 44 24 50 ff ff ff ff 	mov	dword ptr [rsp + 80], 4294967295
 1042823:	48 29 c1 	sub	rcx, rax
 1042826:	48 29 c3 	sub	rbx, rax
 1042829:	48 89 df 	mov	rdi, rbx
 104282c:	48 f7 db 	neg	rbx
 104282f:	48 c1 fb 3f 	sar	rbx, 63
 1042833:	48 21 d8 	and	rax, rbx
 1042836:	48 01 d0 	add	rax, rdx
 1042839:	31 d2 	xor	edx, edx
 104283b:	eb 1e 	jmp	30 <_runtime.funcMaxSPDelta+0x8b>
 104283d:	8b 5c 24 50 	mov	ebx, dword ptr [rsp + 80]
 1042841:	44 8b 44 24 54 	mov	r8d, dword ptr [rsp + 84]
 1042846:	44 39 c3 	cmp	ebx, r8d
 1042849:	44 0f 4f c3 	cmovg	r8d, ebx
 104284d:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 1042852:	48 89 cf 	mov	rdi, rcx
 1042855:	48 89 d1 	mov	rcx, rdx
 1042858:	44 89 c2 	mov	edx, r8d
 104285b:	89 54 24 54 	mov	dword ptr [rsp + 84], edx
 104285f:	48 8b 1e 	mov	rbx, qword ptr [rsi]
 1042862:	48 39 5c 24 58 	cmp	qword ptr [rsp + 88], rbx
 1042867:	48 89 04 24 	mov	qword ptr [rsp], rax
 104286b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1042870:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 1042875:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 104287a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104287f:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1042884:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1042889:	0f 94 44 24 28 	sete	byte ptr [rsp + 40]
 104288e:	e8 cd 01 00 00 	call	461 <_runtime.step>
 1042893:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1042898:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104289d:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10428a2:	80 7c 24 48 00 	cmp	byte ptr [rsp + 72], 0
 10428a7:	75 94 	jne	-108 <_runtime.funcMaxSPDelta+0x6d>
 10428a9:	8b 44 24 54 	mov	eax, dword ptr [rsp + 84]
 10428ad:	89 84 24 80 00 00 00 	mov	dword ptr [rsp + 128], eax
 10428b4:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10428b9:	48 83 c4 68 	add	rsp, 104
 10428bd:	c3 	ret
 10428be:	e8 ed 0a 01 00 	call	68333 <_runtime.panicSliceB>
 10428c3:	90 	nop
 10428c4:	e8 07 e3 00 00 	call	58119 <_runtime.morestack_noctxt>
 10428c9:	e9 02 ff ff ff 	jmp	-254 <_runtime.funcMaxSPDelta>
 10428ce:	cc 	int3
 10428cf:	cc 	int3

_runtime.pcdatavalue:
 10428d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10428d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10428dd:	0f 86 85 00 00 00 	jbe	133 <_runtime.pcdatavalue+0x98>
 10428e3:	48 83 ec 40 	sub	rsp, 64
 10428e7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 10428ec:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 10428f1:	8b 44 24 58 	mov	eax, dword ptr [rsp + 88]
 10428f5:	85 c0 	test	eax, eax
 10428f7:	7d 12 	jge	18 <_runtime.pcdatavalue+0x3b>
 10428f9:	c7 44 24 70 ff ff ff ff 	mov	dword ptr [rsp + 112], 4294967295
 1042901:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1042906:	48 83 c4 40 	add	rsp, 64
 104290a:	c3 	ret
 104290b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1042910:	39 41 20 	cmp	dword ptr [rcx + 32], eax
 1042913:	7e e4 	jle	-28 <_runtime.pcdatavalue+0x29>
 1042915:	48 8d 51 27 	lea	rdx, [rcx + 39]
 1042919:	48 63 c0 	movsxd	rax, eax
 104291c:	48 8d 04 82 	lea	rax, [rdx + 4*rax]
 1042920:	48 8d 40 01 	lea	rax, [rax + 1]
 1042924:	8b 00 	mov	eax, dword ptr [rax]
 1042926:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104292a:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104292f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1042934:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 1042938:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 104293d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1042942:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1042947:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104294c:	c6 44 24 28 01 	mov	byte ptr [rsp + 40], 1
 1042951:	e8 ba f3 ff ff 	call	-3142 <_runtime.pcvalue>
 1042956:	8b 44 24 30 	mov	eax, dword ptr [rsp + 48]
 104295a:	89 44 24 70 	mov	dword ptr [rsp + 112], eax
 104295e:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1042963:	48 83 c4 40 	add	rsp, 64
 1042967:	c3 	ret
 1042968:	e8 63 e2 00 00 	call	57955 <_runtime.morestack_noctxt>
 104296d:	e9 5e ff ff ff 	jmp	-162 <_runtime.pcdatavalue>
 1042972:	cc 	int3
 1042973:	cc 	int3
 1042974:	cc 	int3
 1042975:	cc 	int3
 1042976:	cc 	int3
 1042977:	cc 	int3
 1042978:	cc 	int3
 1042979:	cc 	int3
 104297a:	cc 	int3
 104297b:	cc 	int3
 104297c:	cc 	int3
 104297d:	cc 	int3
 104297e:	cc 	int3
 104297f:	cc 	int3

_runtime.funcdata:
 1042980:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1042989:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104298d:	0f 86 b7 00 00 00 	jbe	183 <_runtime.funcdata+0xca>
 1042993:	48 83 ec 20 	sub	rsp, 32
 1042997:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104299c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10429a1:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 10429a6:	84 c0 	test	al, al
 10429a8:	73 13 	jae	19 <_runtime.funcdata+0x3d>
 10429aa:	48 c7 44 24 40 00 00 00 00 	mov	qword ptr [rsp + 64], 0
 10429b3:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10429b8:	48 83 c4 20 	add	rsp, 32
 10429bc:	c3 	ret
 10429bd:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10429c2:	38 41 27 	cmp	byte ptr [rcx + 39], al
 10429c5:	76 e3 	jbe	-29 <_runtime.funcdata+0x2a>
 10429c7:	48 8d 51 27 	lea	rdx, [rcx + 39]
 10429cb:	48 63 59 20 	movsxd	rbx, dword ptr [rcx + 32]
 10429cf:	48 8d 14 9a 	lea	rdx, [rdx + 4*rbx]
 10429d3:	48 8d 52 01 	lea	rdx, [rdx + 1]
 10429d7:	48 89 d3 	mov	rbx, rdx
 10429da:	0f ba e3 02 	bt	ebx, 2
 10429de:	73 65 	jae	101 <_runtime.funcdata+0xc5>
 10429e0:	0f ba e1 02 	bt	ecx, 2
 10429e4:	72 18 	jb	24 <_runtime.funcdata+0x7e>
 10429e6:	90 	nop
 10429e7:	48 8d 4a 04 	lea	rcx, [rdx + 4]
 10429eb:	48 8b 04 c1 	mov	rax, qword ptr [rcx + 8*rax]
 10429ef:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10429f4:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10429f9:	48 83 c4 20 	add	rsp, 32
 10429fd:	c3 	ret
 10429fe:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1042a03:	e8 98 7a fe ff 	call	-99688 <_runtime.printlock>
 1042a08:	48 8d 05 eb 22 03 00 	lea	rax, [rip + 205547]
 1042a0f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042a13:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 1042a1c:	e8 bf 83 fe ff 	call	-97345 <_runtime.printstring>
 1042a21:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1042a26:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042a2a:	e8 71 83 fe ff 	call	-97423 <_runtime.printpointer>
 1042a2f:	e8 fc 7c fe ff 	call	-99076 <_runtime.printnl>
 1042a34:	e8 e7 7a fe ff 	call	-99609 <_runtime.printunlock>
 1042a39:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 1042a3e:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 1042a43:	eb a1 	jmp	-95 <_runtime.funcdata+0x66>
 1042a45:	48 89 d1 	mov	rcx, rdx
 1042a48:	eb a1 	jmp	-95 <_runtime.funcdata+0x6b>
 1042a4a:	e8 81 e1 00 00 	call	57729 <_runtime.morestack_noctxt>
 1042a4f:	e9 2c ff ff ff 	jmp	-212 <_runtime.funcdata>
 1042a54:	cc 	int3
 1042a55:	cc 	int3
 1042a56:	cc 	int3
 1042a57:	cc 	int3
 1042a58:	cc 	int3
 1042a59:	cc 	int3
 1042a5a:	cc 	int3
 1042a5b:	cc 	int3
 1042a5c:	cc 	int3
 1042a5d:	cc 	int3
 1042a5e:	cc 	int3
 1042a5f:	cc 	int3

_runtime.step:
 1042a60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1042a69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1042a6d:	0f 86 85 01 00 00 	jbe	389 <_runtime.step+0x198>
 1042a73:	48 83 ec 30 	sub	rsp, 48
 1042a77:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1042a7c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1042a81:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1042a86:	48 85 c9 	test	rcx, rcx
 1042a89:	0f 86 61 01 00 00 	jbe	353 <_runtime.step+0x190>
 1042a8f:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1042a94:	0f b6 1a 	movzx	ebx, byte ptr [rdx]
 1042a97:	85 db 	test	ebx, ebx
 1042a99:	75 0e 	jne	14 <_runtime.step+0x49>
 1042a9b:	0f b6 74 24 60 	movzx	esi, byte ptr [rsp + 96]
 1042aa0:	40 84 f6 	test	sil, sil
 1042aa3:	0f 84 13 01 00 00 	je	275 <_runtime.step+0x15c>
 1042aa9:	0f ba e3 07 	bt	ebx, 7
 1042aad:	0f 82 da 00 00 00 	jb	218 <_runtime.step+0x12d>
 1042ab3:	b8 01 00 00 00 	mov	eax, 1
 1042ab8:	89 de 	mov	esi, ebx
 1042aba:	83 e3 01 	and	ebx, 1
 1042abd:	f7 db 	neg	ebx
 1042abf:	d1 ee 	shr	esi
 1042ac1:	31 f3 	xor	ebx, esi
 1042ac3:	48 8b 74 24 58 	mov	rsi, qword ptr [rsp + 88]
 1042ac8:	01 1e 	add	dword ptr [rsi], ebx
 1042aca:	48 39 c8 	cmp	rax, rcx
 1042acd:	0f 87 18 01 00 00 	ja	280 <_runtime.step+0x18b>
 1042ad3:	48 29 c1 	sub	rcx, rax
 1042ad6:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1042adb:	48 29 c3 	sub	rbx, rax
 1042ade:	48 89 de 	mov	rsi, rbx
 1042ae1:	48 f7 db 	neg	rbx
 1042ae4:	48 c1 fb 3f 	sar	rbx, 63
 1042ae8:	48 21 d8 	and	rax, rbx
 1042aeb:	48 8d 1c 02 	lea	rbx, [rdx + rax]
 1042aef:	48 85 c9 	test	rcx, rcx
 1042af2:	0f 86 ec 00 00 00 	jbe	236 <_runtime.step+0x184>
 1042af8:	0f b6 14 02 	movzx	edx, byte ptr [rdx + rax]
 1042afc:	0f ba e2 07 	bt	edx, 7
 1042b00:	72 4d 	jb	77 <_runtime.step+0xef>
 1042b02:	b8 01 00 00 00 	mov	eax, 1
 1042b07:	48 39 c8 	cmp	rax, rcx
 1042b0a:	0f 87 cf 00 00 00 	ja	207 <_runtime.step+0x17f>
 1042b10:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 1042b15:	48 01 17 	add	qword ptr [rdi], rdx
 1042b18:	48 29 c6 	sub	rsi, rax
 1042b1b:	48 89 f2 	mov	rdx, rsi
 1042b1e:	48 f7 de 	neg	rsi
 1042b21:	48 c1 fe 3f 	sar	rsi, 63
 1042b25:	48 21 c6 	and	rsi, rax
 1042b28:	48 01 f3 	add	rbx, rsi
 1042b2b:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 1042b30:	48 29 c1 	sub	rcx, rax
 1042b33:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 1042b38:	48 89 54 24 78 	mov	qword ptr [rsp + 120], rdx
 1042b3d:	c6 84 24 80 00 00 00 01 	mov	byte ptr [rsp + 128], 1
 1042b45:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1042b4a:	48 83 c4 30 	add	rsp, 48
 1042b4e:	c3 	ret
 1042b4f:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1042b54:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 1042b59:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 1042b5e:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1042b62:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1042b67:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1042b6c:	e8 9f 00 00 00 	call	159 <_runtime.readvarint>
 1042b71:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1042b75:	8b 54 24 1c 	mov	edx, dword ptr [rsp + 28]
 1042b79:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1042b7e:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1042b83:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 1042b88:	e9 7a ff ff ff 	jmp	-134 <_runtime.step+0xa7>
 1042b8d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1042b91:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1042b96:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1042b9b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1042ba0:	e8 6b 00 00 00 	call	107 <_runtime.readvarint>
 1042ba5:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1042ba9:	8b 5c 24 1c 	mov	ebx, dword ptr [rsp + 28]
 1042bad:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1042bb2:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1042bb7:	e9 fc fe ff ff 	jmp	-260 <_runtime.step+0x58>
 1042bbc:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 1042bc5:	0f 57 c0 	xorps	xmm0, xmm0
 1042bc8:	0f 11 44 24 70 	movups	xmmword ptr [rsp + 112], xmm0
 1042bcd:	c6 84 24 80 00 00 00 00 	mov	byte ptr [rsp + 128], 0
 1042bd5:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1042bda:	48 83 c4 30 	add	rsp, 48
 1042bde:	c3 	ret
 1042bdf:	e8 cc 07 01 00 	call	67532 <_runtime.panicSliceB>
 1042be4:	31 c0 	xor	eax, eax
 1042be6:	e8 65 07 01 00 	call	67429 <_runtime.panicIndex>
 1042beb:	e8 c0 07 01 00 	call	67520 <_runtime.panicSliceB>
 1042bf0:	31 c0 	xor	eax, eax
 1042bf2:	e8 59 07 01 00 	call	67417 <_runtime.panicIndex>
 1042bf7:	90 	nop
 1042bf8:	e8 d3 df 00 00 	call	57299 <_runtime.morestack_noctxt>
 1042bfd:	e9 5e fe ff ff 	jmp	-418 <_runtime.step>
 1042c02:	cc 	int3
 1042c03:	cc 	int3
 1042c04:	cc 	int3
 1042c05:	cc 	int3
 1042c06:	cc 	int3
 1042c07:	cc 	int3
 1042c08:	cc 	int3
 1042c09:	cc 	int3
 1042c0a:	cc 	int3
 1042c0b:	cc 	int3
 1042c0c:	cc 	int3
 1042c0d:	cc 	int3
 1042c0e:	cc 	int3
 1042c0f:	cc 	int3

_runtime.readvarint:
 1042c10:	48 83 ec 18 	sub	rsp, 24
 1042c14:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1042c19:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1042c1e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1042c23:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1042c28:	31 c0 	xor	eax, eax
 1042c2a:	31 c9 	xor	ecx, ecx
 1042c2c:	31 f6 	xor	esi, esi
 1042c2e:	eb 08 	jmp	8 <_runtime.readvarint+0x28>
 1042c30:	8d 71 07 	lea	esi, [rcx + 7]
 1042c33:	89 c1 	mov	ecx, eax
 1042c35:	44 89 c0 	mov	eax, r8d
 1042c38:	48 39 d8 	cmp	rax, rbx
 1042c3b:	73 2f 	jae	47 <_runtime.readvarint+0x5c>
 1042c3d:	0f b6 3c 02 	movzx	edi, byte ptr [rdx + rax]
 1042c41:	44 8d 40 01 	lea	r8d, [rax + 1]
 1042c45:	41 89 f9 	mov	r9d, edi
 1042c48:	83 e7 7f 	and	edi, 127
 1042c4b:	89 c8 	mov	eax, ecx
 1042c4d:	89 f1 	mov	ecx, esi
 1042c4f:	d3 e7 	shl	edi, cl
 1042c51:	09 f8 	or	eax, edi
 1042c53:	41 f6 c1 80 	test	r9b, -128
 1042c57:	75 d7 	jne	-41 <_runtime.readvarint+0x20>
 1042c59:	44 89 44 24 38 	mov	dword ptr [rsp + 56], r8d
 1042c5e:	89 44 24 3c 	mov	dword ptr [rsp + 60], eax
 1042c62:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1042c67:	48 83 c4 18 	add	rsp, 24
 1042c6b:	c3 	ret
 1042c6c:	48 89 d9 	mov	rcx, rbx
 1042c6f:	e8 dc 06 01 00 	call	67292 <_runtime.panicIndex>
 1042c74:	90 	nop
 1042c75:	cc 	int3
 1042c76:	cc 	int3
 1042c77:	cc 	int3
 1042c78:	cc 	int3
 1042c79:	cc 	int3
 1042c7a:	cc 	int3
 1042c7b:	cc 	int3
 1042c7c:	cc 	int3
 1042c7d:	cc 	int3
 1042c7e:	cc 	int3
 1042c7f:	cc 	int3

_runtime.libcCall:
 1042c80:	48 83 ec 28 	sub	rsp, 40
 1042c84:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1042c89:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1042c8e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1042c97:	48 85 c0 	test	rax, rax
 1042c9a:	74 7b 	je	123 <_runtime.libcCall+0x97>
 1042c9c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1042ca0:	48 85 c9 	test	rcx, rcx
 1042ca3:	74 6e 	je	110 <_runtime.libcCall+0x93>
 1042ca5:	48 83 b9 e8 02 00 00 00 	cmp	qword ptr [rcx + 744], 0
 1042cad:	75 64 	jne	100 <_runtime.libcCall+0x93>
 1042caf:	90 	nop
 1042cb0:	48 89 81 f0 02 00 00 	mov	qword ptr [rcx + 752], rax
 1042cb7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1042cbc:	48 89 81 e0 02 00 00 	mov	qword ptr [rcx + 736], rax
 1042cc3:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 1042cc8:	48 89 81 e8 02 00 00 	mov	qword ptr [rcx + 744], rax
 1042ccf:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1042cd4:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1042cd9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042cdd:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1042ce2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042ce7:	e8 64 f5 00 00 	call	62820 <_runtime.asmcgocall>
 1042cec:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1042cf0:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1042cf5:	48 85 c9 	test	rcx, rcx
 1042cf8:	74 0b 	je	11 <_runtime.libcCall+0x85>
 1042cfa:	48 c7 81 e8 02 00 00 00 00 00 00 	mov	qword ptr [rcx + 744], 0
 1042d05:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 1042d09:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1042d0e:	48 83 c4 28 	add	rsp, 40
 1042d12:	c3 	ret
 1042d13:	31 c9 	xor	ecx, ecx
 1042d15:	eb b8 	jmp	-72 <_runtime.libcCall+0x4f>
 1042d17:	31 c9 	xor	ecx, ecx
 1042d19:	eb 85 	jmp	-123 <_runtime.libcCall+0x20>
 1042d1b:	cc 	int3
 1042d1c:	cc 	int3
 1042d1d:	cc 	int3
 1042d1e:	cc 	int3
 1042d1f:	cc 	int3

_runtime.pthread_attr_init:
 1042d20:	48 83 ec 20 	sub	rsp, 32
 1042d24:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042d29:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042d2e:	c7 44 24 30 00 00 00 00 	mov	dword ptr [rsp + 48], 0
 1042d36:	48 8d 05 53 4c 03 00 	lea	rax, [rip + 216147]
 1042d3d:	84 00 	test	byte ptr [rax], al
 1042d3f:	48 8b 05 4a 4c 03 00 	mov	rax, qword ptr [rip + 216138]
 1042d46:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042d4a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042d4f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042d54:	e8 27 ff ff ff 	call	-217 <_runtime.libcCall>
 1042d59:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1042d5d:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 1042d61:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042d66:	48 83 c4 20 	add	rsp, 32
 1042d6a:	c3 	ret
 1042d6b:	cc 	int3
 1042d6c:	cc 	int3
 1042d6d:	cc 	int3
 1042d6e:	cc 	int3
 1042d6f:	cc 	int3

_runtime.pthread_attr_getstacksize:
 1042d70:	48 83 ec 20 	sub	rsp, 32
 1042d74:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042d79:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042d7e:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1042d86:	48 8d 05 fb 4b 03 00 	lea	rax, [rip + 216059]
 1042d8d:	84 00 	test	byte ptr [rax], al
 1042d8f:	48 8b 05 f2 4b 03 00 	mov	rax, qword ptr [rip + 216050]
 1042d96:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042d9a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042d9f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042da4:	e8 d7 fe ff ff 	call	-297 <_runtime.libcCall>
 1042da9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1042dad:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 1042db1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042db6:	48 83 c4 20 	add	rsp, 32
 1042dba:	c3 	ret
 1042dbb:	cc 	int3
 1042dbc:	cc 	int3
 1042dbd:	cc 	int3
 1042dbe:	cc 	int3
 1042dbf:	cc 	int3

_runtime.pthread_attr_setdetachstate:
 1042dc0:	48 83 ec 20 	sub	rsp, 32
 1042dc4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042dc9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042dce:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1042dd6:	48 8d 05 bb 4b 03 00 	lea	rax, [rip + 215995]
 1042ddd:	84 00 	test	byte ptr [rax], al
 1042ddf:	48 8b 05 b2 4b 03 00 	mov	rax, qword ptr [rip + 215986]
 1042de6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042dea:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042def:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042df4:	e8 87 fe ff ff 	call	-377 <_runtime.libcCall>
 1042df9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1042dfd:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 1042e01:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042e06:	48 83 c4 20 	add	rsp, 32
 1042e0a:	c3 	ret
 1042e0b:	cc 	int3
 1042e0c:	cc 	int3
 1042e0d:	cc 	int3
 1042e0e:	cc 	int3
 1042e0f:	cc 	int3

_runtime.pthread_create:
 1042e10:	48 83 ec 20 	sub	rsp, 32
 1042e14:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042e19:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042e1e:	c7 44 24 40 00 00 00 00 	mov	dword ptr [rsp + 64], 0
 1042e26:	48 8d 05 93 4b 03 00 	lea	rax, [rip + 215955]
 1042e2d:	84 00 	test	byte ptr [rax], al
 1042e2f:	48 8b 05 8a 4b 03 00 	mov	rax, qword ptr [rip + 215946]
 1042e36:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042e3a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042e3f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042e44:	e8 37 fe ff ff 	call	-457 <_runtime.libcCall>
 1042e49:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 1042e4d:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 1042e51:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042e56:	48 83 c4 20 	add	rsp, 32
 1042e5a:	c3 	ret
 1042e5b:	cc 	int3
 1042e5c:	cc 	int3
 1042e5d:	cc 	int3
 1042e5e:	cc 	int3
 1042e5f:	cc 	int3

_runtime.raise:
 1042e60:	48 83 ec 20 	sub	rsp, 32
 1042e64:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042e69:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042e6e:	48 8d 05 7b 4b 03 00 	lea	rax, [rip + 215931]
 1042e75:	84 00 	test	byte ptr [rax], al
 1042e77:	48 8b 05 72 4b 03 00 	mov	rax, qword ptr [rip + 215922]
 1042e7e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042e82:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042e87:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042e8c:	e8 ef fd ff ff 	call	-529 <_runtime.libcCall>
 1042e91:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042e96:	48 83 c4 20 	add	rsp, 32
 1042e9a:	c3 	ret
 1042e9b:	cc 	int3
 1042e9c:	cc 	int3
 1042e9d:	cc 	int3
 1042e9e:	cc 	int3
 1042e9f:	cc 	int3

_runtime.pthread_self:
 1042ea0:	48 83 ec 20 	sub	rsp, 32
 1042ea4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042ea9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042eae:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1042eb7:	48 8d 05 2a 4b 03 00 	lea	rax, [rip + 215850]
 1042ebe:	84 00 	test	byte ptr [rax], al
 1042ec0:	48 8b 05 21 4b 03 00 	mov	rax, qword ptr [rip + 215841]
 1042ec7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042ecb:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042ed0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042ed5:	e8 a6 fd ff ff 	call	-602 <_runtime.libcCall>
 1042eda:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042edf:	48 83 c4 20 	add	rsp, 32
 1042ee3:	c3 	ret
 1042ee4:	cc 	int3
 1042ee5:	cc 	int3
 1042ee6:	cc 	int3
 1042ee7:	cc 	int3
 1042ee8:	cc 	int3
 1042ee9:	cc 	int3
 1042eea:	cc 	int3
 1042eeb:	cc 	int3
 1042eec:	cc 	int3
 1042eed:	cc 	int3
 1042eee:	cc 	int3
 1042eef:	cc 	int3

_runtime.pthread_kill:
 1042ef0:	48 83 ec 20 	sub	rsp, 32
 1042ef4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1042ef9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1042efe:	48 8d 05 c3 4a 03 00 	lea	rax, [rip + 215747]
 1042f05:	84 00 	test	byte ptr [rax], al
 1042f07:	48 8b 05 ba 4a 03 00 	mov	rax, qword ptr [rip + 215738]
 1042f0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042f12:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1042f17:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042f1c:	e8 5f fd ff ff 	call	-673 <_runtime.libcCall>
 1042f21:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1042f26:	48 83 c4 20 	add	rsp, 32
 1042f2a:	c3 	ret
 1042f2b:	cc 	int3
 1042f2c:	cc 	int3
 1042f2d:	cc 	int3
 1042f2e:	cc 	int3
 1042f2f:	cc 	int3

_runtime.mmap:
 1042f30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1042f39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1042f3d:	0f 86 b3 00 00 00 	jbe	179 <_runtime.mmap+0xc6>
 1042f43:	48 83 ec 50 	sub	rsp, 80
 1042f47:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 1042f4c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1042f51:	0f 10 05 e8 1c 04 00 	movups	xmm0, xmmword ptr [rip + 269544]
 1042f58:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1042f5d:	0f 10 05 ec 1c 04 00 	movups	xmm0, xmmword ptr [rip + 269548]
 1042f64:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1042f69:	0f 10 05 f0 1c 04 00 	movups	xmm0, xmmword ptr [rip + 269552]
 1042f70:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1042f75:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1042f7a:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1042f7f:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1042f84:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1042f89:	8b 44 24 68 	mov	eax, dword ptr [rsp + 104]
 1042f8d:	89 44 24 28 	mov	dword ptr [rsp + 40], eax
 1042f91:	8b 44 24 6c 	mov	eax, dword ptr [rsp + 108]
 1042f95:	89 44 24 2c 	mov	dword ptr [rsp + 44], eax
 1042f99:	8b 44 24 70 	mov	eax, dword ptr [rsp + 112]
 1042f9d:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 1042fa1:	8b 44 24 74 	mov	eax, dword ptr [rsp + 116]
 1042fa5:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 1042fa9:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 1042fb2:	48 8d 05 4f 49 03 00 	lea	rax, [rip + 215375]
 1042fb9:	84 00 	test	byte ptr [rax], al
 1042fbb:	48 8b 05 46 49 03 00 	mov	rax, qword ptr [rip + 215366]
 1042fc2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1042fc6:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 1042fcb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1042fd0:	e8 ab fc ff ff 	call	-853 <_runtime.libcCall>
 1042fd5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1042fda:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1042fdf:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1042fe4:	48 89 8c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rcx
 1042fec:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1042ff1:	48 83 c4 50 	add	rsp, 80
 1042ff5:	c3 	ret
 1042ff6:	e8 d5 db 00 00 	call	56277 <_runtime.morestack_noctxt>
 1042ffb:	e9 30 ff ff ff 	jmp	-208 <_runtime.mmap>

_runtime.munmap:
 1043000:	48 83 ec 20 	sub	rsp, 32
 1043004:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043009:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104300e:	48 8d 05 13 49 03 00 	lea	rax, [rip + 215315]
 1043015:	84 00 	test	byte ptr [rax], al
 1043017:	48 8b 05 0a 49 03 00 	mov	rax, qword ptr [rip + 215306]
 104301e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043022:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1043027:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104302c:	e8 4f fc ff ff 	call	-945 <_runtime.libcCall>
 1043031:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043036:	48 83 c4 20 	add	rsp, 32
 104303a:	c3 	ret
 104303b:	cc 	int3
 104303c:	cc 	int3
 104303d:	cc 	int3
 104303e:	cc 	int3
 104303f:	cc 	int3

_runtime.madvise:
 1043040:	48 83 ec 20 	sub	rsp, 32
 1043044:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043049:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104304e:	48 8d 05 43 48 03 00 	lea	rax, [rip + 215107]
 1043055:	84 00 	test	byte ptr [rax], al
 1043057:	48 8b 05 3a 48 03 00 	mov	rax, qword ptr [rip + 215098]
 104305e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043062:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1043067:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104306c:	e8 0f fc ff ff 	call	-1009 <_runtime.libcCall>
 1043071:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043076:	48 83 c4 20 	add	rsp, 32
 104307a:	c3 	ret
 104307b:	cc 	int3
 104307c:	cc 	int3
 104307d:	cc 	int3
 104307e:	cc 	int3
 104307f:	cc 	int3

_runtime.read:
 1043080:	48 83 ec 20 	sub	rsp, 32
 1043084:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043089:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104308e:	c7 44 24 40 00 00 00 00 	mov	dword ptr [rsp + 64], 0
 1043096:	48 8d 05 63 49 03 00 	lea	rax, [rip + 215395]
 104309d:	84 00 	test	byte ptr [rax], al
 104309f:	48 8b 05 5a 49 03 00 	mov	rax, qword ptr [rip + 215386]
 10430a6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10430aa:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10430af:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10430b4:	e8 c7 fb ff ff 	call	-1081 <_runtime.libcCall>
 10430b9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10430bd:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 10430c1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10430c6:	48 83 c4 20 	add	rsp, 32
 10430ca:	c3 	ret
 10430cb:	cc 	int3
 10430cc:	cc 	int3
 10430cd:	cc 	int3
 10430ce:	cc 	int3
 10430cf:	cc 	int3

_runtime.pipe:
 10430d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10430d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10430dd:	76 5c 	jbe	92 <_runtime.pipe+0x6b>
 10430df:	48 83 ec 28 	sub	rsp, 40
 10430e3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10430e8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10430ed:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 10430f6:	48 8d 05 63 48 03 00 	lea	rax, [rip + 215139]
 10430fd:	84 00 	test	byte ptr [rax], al
 10430ff:	48 8b 05 5a 48 03 00 	mov	rax, qword ptr [rip + 215130]
 1043106:	48 89 04 24 	mov	qword ptr [rsp], rax
 104310a:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 104310f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043114:	e8 67 fb ff ff 	call	-1177 <_runtime.libcCall>
 1043119:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104311d:	8b 4c 24 18 	mov	ecx, dword ptr [rsp + 24]
 1043121:	8b 54 24 1c 	mov	edx, dword ptr [rsp + 28]
 1043125:	89 4c 24 30 	mov	dword ptr [rsp + 48], ecx
 1043129:	89 54 24 34 	mov	dword ptr [rsp + 52], edx
 104312d:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 1043131:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1043136:	48 83 c4 28 	add	rsp, 40
 104313a:	c3 	ret
 104313b:	e8 90 da 00 00 	call	55952 <_runtime.morestack_noctxt>
 1043140:	eb 8e 	jmp	-114 <_runtime.pipe>
 1043142:	cc 	int3
 1043143:	cc 	int3
 1043144:	cc 	int3
 1043145:	cc 	int3
 1043146:	cc 	int3
 1043147:	cc 	int3
 1043148:	cc 	int3
 1043149:	cc 	int3
 104314a:	cc 	int3
 104314b:	cc 	int3
 104314c:	cc 	int3
 104314d:	cc 	int3
 104314e:	cc 	int3
 104314f:	cc 	int3

_runtime.closefd:
 1043150:	48 83 ec 20 	sub	rsp, 32
 1043154:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043159:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104315e:	c7 44 24 30 00 00 00 00 	mov	dword ptr [rsp + 48], 0
 1043166:	48 8d 05 23 46 03 00 	lea	rax, [rip + 214563]
 104316d:	84 00 	test	byte ptr [rax], al
 104316f:	48 8b 05 1a 46 03 00 	mov	rax, qword ptr [rip + 214554]
 1043176:	48 89 04 24 	mov	qword ptr [rsp], rax
 104317a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104317f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043184:	e8 f7 fa ff ff 	call	-1289 <_runtime.libcCall>
 1043189:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104318d:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 1043191:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043196:	48 83 c4 20 	add	rsp, 32
 104319a:	c3 	ret
 104319b:	cc 	int3
 104319c:	cc 	int3
 104319d:	cc 	int3
 104319e:	cc 	int3
 104319f:	cc 	int3

_runtime.exit:
 10431a0:	48 83 ec 20 	sub	rsp, 32
 10431a4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10431a9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10431ae:	48 8d 05 03 46 03 00 	lea	rax, [rip + 214531]
 10431b5:	84 00 	test	byte ptr [rax], al
 10431b7:	48 8b 05 fa 45 03 00 	mov	rax, qword ptr [rip + 214522]
 10431be:	48 89 04 24 	mov	qword ptr [rsp], rax
 10431c2:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10431c7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10431cc:	e8 af fa ff ff 	call	-1361 <_runtime.libcCall>
 10431d1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10431d6:	48 83 c4 20 	add	rsp, 32
 10431da:	c3 	ret
 10431db:	cc 	int3
 10431dc:	cc 	int3
 10431dd:	cc 	int3
 10431de:	cc 	int3
 10431df:	cc 	int3

_runtime.usleep:
 10431e0:	48 83 ec 20 	sub	rsp, 32
 10431e4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10431e9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10431ee:	48 8d 05 ab 48 03 00 	lea	rax, [rip + 215211]
 10431f5:	84 00 	test	byte ptr [rax], al
 10431f7:	48 8b 05 a2 48 03 00 	mov	rax, qword ptr [rip + 215202]
 10431fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043202:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1043207:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104320c:	e8 6f fa ff ff 	call	-1425 <_runtime.libcCall>
 1043211:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043216:	48 83 c4 20 	add	rsp, 32
 104321a:	c3 	ret
 104321b:	cc 	int3
 104321c:	cc 	int3
 104321d:	cc 	int3
 104321e:	cc 	int3
 104321f:	cc 	int3

_runtime.write1:
 1043220:	48 83 ec 20 	sub	rsp, 32
 1043224:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043229:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104322e:	c7 44 24 40 00 00 00 00 	mov	dword ptr [rsp + 64], 0
 1043236:	48 8d 05 7b 48 03 00 	lea	rax, [rip + 215163]
 104323d:	84 00 	test	byte ptr [rax], al
 104323f:	48 8b 05 72 48 03 00 	mov	rax, qword ptr [rip + 215154]
 1043246:	48 89 04 24 	mov	qword ptr [rsp], rax
 104324a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104324f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043254:	e8 27 fa ff ff 	call	-1497 <_runtime.libcCall>
 1043259:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104325d:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 1043261:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043266:	48 83 c4 20 	add	rsp, 32
 104326a:	c3 	ret
 104326b:	cc 	int3
 104326c:	cc 	int3
 104326d:	cc 	int3
 104326e:	cc 	int3
 104326f:	cc 	int3

_runtime.open:
 1043270:	48 83 ec 20 	sub	rsp, 32
 1043274:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043279:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104327e:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1043286:	48 8d 05 b3 46 03 00 	lea	rax, [rip + 214707]
 104328d:	84 00 	test	byte ptr [rax], al
 104328f:	48 8b 05 aa 46 03 00 	mov	rax, qword ptr [rip + 214698]
 1043296:	48 89 04 24 	mov	qword ptr [rsp], rax
 104329a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104329f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10432a4:	e8 d7 f9 ff ff 	call	-1577 <_runtime.libcCall>
 10432a9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10432ad:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 10432b1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10432b6:	48 83 c4 20 	add	rsp, 32
 10432ba:	c3 	ret
 10432bb:	cc 	int3
 10432bc:	cc 	int3
 10432bd:	cc 	int3
 10432be:	cc 	int3
 10432bf:	cc 	int3

_runtime.nanotime1:
 10432c0:	48 83 ec 30 	sub	rsp, 48
 10432c4:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10432c9:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10432ce:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 10432d7:	0f 57 c0 	xorps	xmm0, xmm0
 10432da:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10432df:	48 8d 05 4a 46 03 00 	lea	rax, [rip + 214602]
 10432e6:	84 00 	test	byte ptr [rax], al
 10432e8:	48 8b 05 41 46 03 00 	mov	rax, qword ptr [rip + 214593]
 10432ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 10432f3:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 10432f8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10432fd:	e8 7e f9 ff ff 	call	-1666 <_runtime.libcCall>
 1043302:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1043307:	8b 4c 24 20 	mov	ecx, dword ptr [rsp + 32]
 104330b:	48 89 c2 	mov	rdx, rax
 104330e:	48 0f af c1 	imul	rax, rcx
 1043312:	83 f9 01 	cmp	ecx, 1
 1043315:	48 0f 45 d0 	cmovne	rdx, rax
 1043319:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 104331d:	83 f8 01 	cmp	eax, 1
 1043320:	74 2b 	je	43 <_runtime.nanotime1+0x8d>
 1043322:	48 85 c0 	test	rax, rax
 1043325:	74 2b 	je	43 <_runtime.nanotime1+0x92>
 1043327:	89 c1 	mov	ecx, eax
 1043329:	48 89 d0 	mov	rax, rdx
 104332c:	48 83 f9 ff 	cmp	rcx, -1
 1043330:	74 07 	je	7 <_runtime.nanotime1+0x79>
 1043332:	48 99 	cqo
 1043334:	48 f7 f9 	idiv	rcx
 1043337:	eb 05 	jmp	5 <_runtime.nanotime1+0x7e>
 1043339:	48 f7 d8 	neg	rax
 104333c:	31 d2 	xor	edx, edx
 104333e:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1043343:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1043348:	48 83 c4 30 	add	rsp, 48
 104334c:	c3 	ret
 104334d:	48 89 d0 	mov	rax, rdx
 1043350:	eb ec 	jmp	-20 <_runtime.nanotime1+0x7e>
 1043352:	e8 e9 3f fe ff 	call	-114711 <_runtime.panicdivide>
 1043357:	90 	nop
 1043358:	cc 	int3
 1043359:	cc 	int3
 104335a:	cc 	int3
 104335b:	cc 	int3
 104335c:	cc 	int3
 104335d:	cc 	int3
 104335e:	cc 	int3
 104335f:	cc 	int3

_runtime.walltime1:
 1043360:	48 83 ec 30 	sub	rsp, 48
 1043364:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1043369:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104336e:	48 c7 44 24 38 00 00 00 00 	mov	qword ptr [rsp + 56], 0
 1043377:	c7 44 24 40 00 00 00 00 	mov	dword ptr [rsp + 64], 0
 104337f:	0f 57 c0 	xorps	xmm0, xmm0
 1043382:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1043387:	48 8d 05 22 47 03 00 	lea	rax, [rip + 214818]
 104338e:	84 00 	test	byte ptr [rax], al
 1043390:	48 8b 05 19 47 03 00 	mov	rax, qword ptr [rip + 214809]
 1043397:	48 89 04 24 	mov	qword ptr [rsp], rax
 104339b:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 10433a0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10433a5:	e8 d6 f8 ff ff 	call	-1834 <_runtime.libcCall>
 10433aa:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10433af:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10433b4:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 10433b8:	69 c0 e8 03 00 00 	imul	eax, eax, 1000
 10433be:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 10433c2:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10433c7:	48 83 c4 30 	add	rsp, 48
 10433cb:	c3 	ret
 10433cc:	cc 	int3
 10433cd:	cc 	int3
 10433ce:	cc 	int3
 10433cf:	cc 	int3

_runtime.sigaction:
 10433d0:	48 83 ec 20 	sub	rsp, 32
 10433d4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10433d9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10433de:	48 8d 05 43 46 03 00 	lea	rax, [rip + 214595]
 10433e5:	84 00 	test	byte ptr [rax], al
 10433e7:	48 8b 05 3a 46 03 00 	mov	rax, qword ptr [rip + 214586]
 10433ee:	48 89 04 24 	mov	qword ptr [rsp], rax
 10433f2:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10433f7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10433fc:	e8 7f f8 ff ff 	call	-1921 <_runtime.libcCall>
 1043401:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043406:	48 83 c4 20 	add	rsp, 32
 104340a:	c3 	ret
 104340b:	cc 	int3
 104340c:	cc 	int3
 104340d:	cc 	int3
 104340e:	cc 	int3
 104340f:	cc 	int3

_runtime.sigprocmask:
 1043410:	48 83 ec 20 	sub	rsp, 32
 1043414:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043419:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104341e:	48 8d 05 23 46 03 00 	lea	rax, [rip + 214563]
 1043425:	84 00 	test	byte ptr [rax], al
 1043427:	48 8b 05 1a 46 03 00 	mov	rax, qword ptr [rip + 214554]
 104342e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043432:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1043437:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104343c:	e8 3f f8 ff ff 	call	-1985 <_runtime.libcCall>
 1043441:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043446:	48 83 c4 20 	add	rsp, 32
 104344a:	c3 	ret
 104344b:	cc 	int3
 104344c:	cc 	int3
 104344d:	cc 	int3
 104344e:	cc 	int3
 104344f:	cc 	int3

_runtime.sigaltstack:
 1043450:	48 83 ec 20 	sub	rsp, 32
 1043454:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043459:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104345e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1043463:	48 85 c0 	test	rax, rax
 1043466:	74 18 	je	24 <_runtime.sigaltstack+0x30>
 1043468:	8b 48 10 	mov	ecx, dword ptr [rax + 16]
 104346b:	0f ba e1 02 	bt	ecx, 2
 104346f:	73 0f 	jae	15 <_runtime.sigaltstack+0x30>
 1043471:	48 83 78 08 00 	cmp	qword ptr [rax + 8], 0
 1043476:	75 08 	jne	8 <_runtime.sigaltstack+0x30>
 1043478:	48 c7 40 08 00 80 00 00 	mov	qword ptr [rax + 8], 32768
 1043480:	48 8d 05 a9 45 03 00 	lea	rax, [rip + 214441]
 1043487:	84 00 	test	byte ptr [rax], al
 1043489:	48 8b 05 a0 45 03 00 	mov	rax, qword ptr [rip + 214432]
 1043490:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043494:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1043499:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104349e:	e8 dd f7 ff ff 	call	-2083 <_runtime.libcCall>
 10434a3:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10434a8:	48 83 c4 20 	add	rsp, 32
 10434ac:	c3 	ret
 10434ad:	cc 	int3
 10434ae:	cc 	int3
 10434af:	cc 	int3

_runtime.raiseproc:
 10434b0:	48 83 ec 20 	sub	rsp, 32
 10434b4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10434b9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10434be:	48 8d 05 33 45 03 00 	lea	rax, [rip + 214323]
 10434c5:	84 00 	test	byte ptr [rax], al
 10434c7:	48 8b 05 2a 45 03 00 	mov	rax, qword ptr [rip + 214314]
 10434ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 10434d2:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10434d7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10434dc:	e8 9f f7 ff ff 	call	-2145 <_runtime.libcCall>
 10434e1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10434e6:	48 83 c4 20 	add	rsp, 32
 10434ea:	c3 	ret
 10434eb:	cc 	int3
 10434ec:	cc 	int3
 10434ed:	cc 	int3
 10434ee:	cc 	int3
 10434ef:	cc 	int3

_runtime.setitimer:
 10434f0:	48 83 ec 20 	sub	rsp, 32
 10434f4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10434f9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10434fe:	48 8d 05 1b 45 03 00 	lea	rax, [rip + 214299]
 1043505:	84 00 	test	byte ptr [rax], al
 1043507:	48 8b 05 12 45 03 00 	mov	rax, qword ptr [rip + 214290]
 104350e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043512:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1043517:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104351c:	e8 5f f7 ff ff 	call	-2209 <_runtime.libcCall>
 1043521:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043526:	48 83 c4 20 	add	rsp, 32
 104352a:	c3 	ret
 104352b:	cc 	int3
 104352c:	cc 	int3
 104352d:	cc 	int3
 104352e:	cc 	int3
 104352f:	cc 	int3

_runtime.sysctl:
 1043530:	48 83 ec 20 	sub	rsp, 32
 1043534:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043539:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104353e:	c7 44 24 58 00 00 00 00 	mov	dword ptr [rsp + 88], 0
 1043546:	48 8d 05 2b 45 03 00 	lea	rax, [rip + 214315]
 104354d:	84 00 	test	byte ptr [rax], al
 104354f:	48 8b 05 22 45 03 00 	mov	rax, qword ptr [rip + 214306]
 1043556:	48 89 04 24 	mov	qword ptr [rsp], rax
 104355a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104355f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043564:	e8 17 f7 ff ff 	call	-2281 <_runtime.libcCall>
 1043569:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104356d:	89 44 24 58 	mov	dword ptr [rsp + 88], eax
 1043571:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043576:	48 83 c4 20 	add	rsp, 32
 104357a:	c3 	ret
 104357b:	cc 	int3
 104357c:	cc 	int3
 104357d:	cc 	int3
 104357e:	cc 	int3
 104357f:	cc 	int3

_runtime.fcntl:
 1043580:	48 83 ec 20 	sub	rsp, 32
 1043584:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043589:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104358e:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1043596:	48 8d 05 43 42 03 00 	lea	rax, [rip + 213571]
 104359d:	84 00 	test	byte ptr [rax], al
 104359f:	48 8b 05 3a 42 03 00 	mov	rax, qword ptr [rip + 213562]
 10435a6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10435aa:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10435af:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10435b4:	e8 c7 f6 ff ff 	call	-2361 <_runtime.libcCall>
 10435b9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10435bd:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 10435c1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10435c6:	48 83 c4 20 	add	rsp, 32
 10435ca:	c3 	ret
 10435cb:	cc 	int3
 10435cc:	cc 	int3
 10435cd:	cc 	int3
 10435ce:	cc 	int3
 10435cf:	cc 	int3

_runtime.kqueue:
 10435d0:	48 83 ec 20 	sub	rsp, 32
 10435d4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10435d9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10435de:	c7 44 24 28 00 00 00 00 	mov	dword ptr [rsp + 40], 0
 10435e6:	48 8d 05 a3 42 03 00 	lea	rax, [rip + 213667]
 10435ed:	84 00 	test	byte ptr [rax], al
 10435ef:	48 8b 05 9a 42 03 00 	mov	rax, qword ptr [rip + 213658]
 10435f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10435fa:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1043603:	e8 78 f6 ff ff 	call	-2440 <_runtime.libcCall>
 1043608:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104360c:	89 44 24 28 	mov	dword ptr [rsp + 40], eax
 1043610:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043615:	48 83 c4 20 	add	rsp, 32
 1043619:	c3 	ret
 104361a:	cc 	int3
 104361b:	cc 	int3
 104361c:	cc 	int3
 104361d:	cc 	int3
 104361e:	cc 	int3
 104361f:	cc 	int3

_runtime.kevent:
 1043620:	48 83 ec 20 	sub	rsp, 32
 1043624:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043629:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104362e:	c7 44 24 58 00 00 00 00 	mov	dword ptr [rsp + 88], 0
 1043636:	48 8d 05 4b 42 03 00 	lea	rax, [rip + 213579]
 104363d:	84 00 	test	byte ptr [rax], al
 104363f:	48 8b 05 42 42 03 00 	mov	rax, qword ptr [rip + 213570]
 1043646:	48 89 04 24 	mov	qword ptr [rsp], rax
 104364a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104364f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043654:	e8 27 f6 ff ff 	call	-2521 <_runtime.libcCall>
 1043659:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104365d:	89 44 24 58 	mov	dword ptr [rsp + 88], eax
 1043661:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043666:	48 83 c4 20 	add	rsp, 32
 104366a:	c3 	ret
 104366b:	cc 	int3
 104366c:	cc 	int3
 104366d:	cc 	int3
 104366e:	cc 	int3
 104366f:	cc 	int3

_runtime.pthread_mutex_init:
 1043670:	48 83 ec 20 	sub	rsp, 32
 1043674:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043679:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104367e:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1043686:	48 8d 05 43 43 03 00 	lea	rax, [rip + 213827]
 104368d:	84 00 	test	byte ptr [rax], al
 104368f:	48 8b 05 3a 43 03 00 	mov	rax, qword ptr [rip + 213818]
 1043696:	48 89 04 24 	mov	qword ptr [rsp], rax
 104369a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104369f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10436a4:	e8 d7 f5 ff ff 	call	-2601 <_runtime.libcCall>
 10436a9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10436ad:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 10436b1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10436b6:	48 83 c4 20 	add	rsp, 32
 10436ba:	c3 	ret
 10436bb:	cc 	int3
 10436bc:	cc 	int3
 10436bd:	cc 	int3
 10436be:	cc 	int3
 10436bf:	cc 	int3

_runtime.pthread_mutex_lock:
 10436c0:	48 83 ec 20 	sub	rsp, 32
 10436c4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10436c9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10436ce:	c7 44 24 30 00 00 00 00 	mov	dword ptr [rsp + 48], 0
 10436d6:	48 8d 05 fb 42 03 00 	lea	rax, [rip + 213755]
 10436dd:	84 00 	test	byte ptr [rax], al
 10436df:	48 8b 05 f2 42 03 00 	mov	rax, qword ptr [rip + 213746]
 10436e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10436ea:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10436ef:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10436f4:	e8 87 f5 ff ff 	call	-2681 <_runtime.libcCall>
 10436f9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10436fd:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 1043701:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043706:	48 83 c4 20 	add	rsp, 32
 104370a:	c3 	ret
 104370b:	cc 	int3
 104370c:	cc 	int3
 104370d:	cc 	int3
 104370e:	cc 	int3
 104370f:	cc 	int3

_runtime.pthread_mutex_unlock:
 1043710:	48 83 ec 20 	sub	rsp, 32
 1043714:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043719:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104371e:	c7 44 24 30 00 00 00 00 	mov	dword ptr [rsp + 48], 0
 1043726:	48 8d 05 b3 42 03 00 	lea	rax, [rip + 213683]
 104372d:	84 00 	test	byte ptr [rax], al
 104372f:	48 8b 05 aa 42 03 00 	mov	rax, qword ptr [rip + 213674]
 1043736:	48 89 04 24 	mov	qword ptr [rsp], rax
 104373a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104373f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043744:	e8 37 f5 ff ff 	call	-2761 <_runtime.libcCall>
 1043749:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104374d:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 1043751:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043756:	48 83 c4 20 	add	rsp, 32
 104375a:	c3 	ret
 104375b:	cc 	int3
 104375c:	cc 	int3
 104375d:	cc 	int3
 104375e:	cc 	int3
 104375f:	cc 	int3

_runtime.pthread_cond_init:
 1043760:	48 83 ec 20 	sub	rsp, 32
 1043764:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043769:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104376e:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 1043776:	48 8d 05 23 42 03 00 	lea	rax, [rip + 213539]
 104377d:	84 00 	test	byte ptr [rax], al
 104377f:	48 8b 05 1a 42 03 00 	mov	rax, qword ptr [rip + 213530]
 1043786:	48 89 04 24 	mov	qword ptr [rsp], rax
 104378a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104378f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043794:	e8 e7 f4 ff ff 	call	-2841 <_runtime.libcCall>
 1043799:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104379d:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 10437a1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10437a6:	48 83 c4 20 	add	rsp, 32
 10437aa:	c3 	ret
 10437ab:	cc 	int3
 10437ac:	cc 	int3
 10437ad:	cc 	int3
 10437ae:	cc 	int3
 10437af:	cc 	int3

_runtime.pthread_cond_wait:
 10437b0:	48 83 ec 20 	sub	rsp, 32
 10437b4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10437b9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10437be:	c7 44 24 38 00 00 00 00 	mov	dword ptr [rsp + 56], 0
 10437c6:	48 8d 05 eb 41 03 00 	lea	rax, [rip + 213483]
 10437cd:	84 00 	test	byte ptr [rax], al
 10437cf:	48 8b 05 e2 41 03 00 	mov	rax, qword ptr [rip + 213474]
 10437d6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10437da:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10437df:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10437e4:	e8 97 f4 ff ff 	call	-2921 <_runtime.libcCall>
 10437e9:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10437ed:	89 44 24 38 	mov	dword ptr [rsp + 56], eax
 10437f1:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10437f6:	48 83 c4 20 	add	rsp, 32
 10437fa:	c3 	ret
 10437fb:	cc 	int3
 10437fc:	cc 	int3
 10437fd:	cc 	int3
 10437fe:	cc 	int3
 10437ff:	cc 	int3

_runtime.pthread_cond_timedwait_relative_np:
 1043800:	48 83 ec 20 	sub	rsp, 32
 1043804:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043809:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104380e:	c7 44 24 40 00 00 00 00 	mov	dword ptr [rsp + 64], 0
 1043816:	48 8d 05 93 41 03 00 	lea	rax, [rip + 213395]
 104381d:	84 00 	test	byte ptr [rax], al
 104381f:	48 8b 05 8a 41 03 00 	mov	rax, qword ptr [rip + 213386]
 1043826:	48 89 04 24 	mov	qword ptr [rsp], rax
 104382a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104382f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043834:	e8 47 f4 ff ff 	call	-3001 <_runtime.libcCall>
 1043839:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104383d:	89 44 24 40 	mov	dword ptr [rsp + 64], eax
 1043841:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043846:	48 83 c4 20 	add	rsp, 32
 104384a:	c3 	ret
 104384b:	cc 	int3
 104384c:	cc 	int3
 104384d:	cc 	int3
 104384e:	cc 	int3
 104384f:	cc 	int3

_runtime.pthread_cond_signal:
 1043850:	48 83 ec 20 	sub	rsp, 32
 1043854:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1043859:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104385e:	c7 44 24 30 00 00 00 00 	mov	dword ptr [rsp + 48], 0
 1043866:	48 8d 05 3b 41 03 00 	lea	rax, [rip + 213307]
 104386d:	84 00 	test	byte ptr [rax], al
 104386f:	48 8b 05 32 41 03 00 	mov	rax, qword ptr [rip + 213298]
 1043876:	48 89 04 24 	mov	qword ptr [rsp], rax
 104387a:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104387f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1043884:	e8 f7 f3 ff ff 	call	-3081 <_runtime.libcCall>
 1043889:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 104388d:	89 44 24 30 	mov	dword ptr [rsp + 48], eax
 1043891:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1043896:	48 83 c4 20 	add	rsp, 32
 104389a:	c3 	ret
 104389b:	cc 	int3
 104389c:	cc 	int3
 104389d:	cc 	int3
 104389e:	cc 	int3
 104389f:	cc 	int3

_runtime.setNonblock:
 10438a0:	48 83 ec 20 	sub	rsp, 32
 10438a4:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10438a9:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10438ae:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 10438b2:	89 04 24 	mov	dword ptr [rsp], eax
 10438b5:	48 c7 44 24 04 03 00 00 00 	mov	qword ptr [rsp + 4], 3
 10438be:	e8 bd fc ff ff 	call	-835 <_runtime.fcntl>
 10438c3:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 10438c7:	8b 4c 24 28 	mov	ecx, dword ptr [rsp + 40]
 10438cb:	89 0c 24 	mov	dword ptr [rsp], ecx
 10438ce:	c7 44 24 04 04 00 00 00 	mov	dword ptr [rsp + 4], 4
 10438d6:	83 c8 04 	or	eax, 4
 10438d9:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 10438dd:	e8 9e fc ff ff 	call	-866 <_runtime.fcntl>
 10438e2:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10438e7:	48 83 c4 20 	add	rsp, 32
 10438eb:	c3 	ret
 10438ec:	cc 	int3
 10438ed:	cc 	int3
 10438ee:	cc 	int3
 10438ef:	cc 	int3

_runtime.doaddtimer:
 10438f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10438f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10438fd:	0f 86 9a 01 00 00 	jbe	410 <_runtime.doaddtimer+0x1ad>
 1043903:	48 83 ec 50 	sub	rsp, 80
 1043907:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 104390c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1043911:	83 3d 94 3e 0b 00 00 	cmp	dword ptr [rip + 736916], 0
 1043918:	0f 84 54 01 00 00 	je	340 <_runtime.doaddtimer+0x182>
 104391e:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1043923:	48 83 38 00 	cmp	qword ptr [rax], 0
 1043927:	0f 85 56 01 00 00 	jne	342 <_runtime.doaddtimer+0x193>
 104392d:	90 	nop
 104392e:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1043933:	48 89 ca 	mov	rdx, rcx
 1043936:	48 89 08 	mov	qword ptr [rax], rcx
 1043939:	84 02 	test	byte ptr [rdx], al
 104393b:	48 8b 8a 80 27 00 00 	mov	rcx, qword ptr [rdx + 10112]
 1043942:	48 8b 9a 78 27 00 00 	mov	rbx, qword ptr [rdx + 10104]
 1043949:	48 8b b2 70 27 00 00 	mov	rsi, qword ptr [rdx + 10096]
 1043950:	4c 8d 43 01 	lea	r8, [rbx + 1]
 1043954:	49 39 c8 	cmp	r8, rcx
 1043957:	0f 87 9b 00 00 00 	ja	155 <_runtime.doaddtimer+0x108>
 104395d:	48 89 d9 	mov	rcx, rbx
 1043960:	4c 8d 43 01 	lea	r8, [rbx + 1]
 1043964:	4c 89 82 78 27 00 00 	mov	qword ptr [rdx + 10104], r8
 104396b:	48 8d 3c de 	lea	rdi, [rsi + 8*rbx]
 104396f:	83 3d 8a 3f 0b 00 00 	cmp	dword ptr [rip + 737162], 0
 1043976:	75 79 	jne	121 <_runtime.doaddtimer+0x101>
 1043978:	48 89 04 de 	mov	qword ptr [rsi + 8*rbx], rax
 104397c:	48 8b 82 80 27 00 00 	mov	rax, qword ptr [rdx + 10112]
 1043983:	48 8b 9a 78 27 00 00 	mov	rbx, qword ptr [rdx + 10104]
 104398a:	48 8b b2 70 27 00 00 	mov	rsi, qword ptr [rdx + 10096]
 1043991:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1043995:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104399a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104399f:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 10439a4:	e8 07 1c 00 00 	call	7175 <_runtime.siftupTimer>
 10439a9:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10439ae:	48 8b 88 78 27 00 00 	mov	rcx, qword ptr [rax + 10104]
 10439b5:	48 8b 90 70 27 00 00 	mov	rdx, qword ptr [rax + 10096]
 10439bc:	48 85 c9 	test	rcx, rcx
 10439bf:	0f 86 b7 00 00 00 	jbe	183 <_runtime.doaddtimer+0x18c>
 10439c5:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10439ca:	48 39 0a 	cmp	qword ptr [rdx], rcx
 10439cd:	75 0b 	jne	11 <_runtime.doaddtimer+0xea>
 10439cf:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 10439d3:	48 87 88 68 16 00 00 	xchg	qword ptr [rax + 5736], rcx
 10439da:	b9 01 00 00 00 	mov	ecx, 1
 10439df:	f0 	lock
 10439e0:	0f c1 88 88 27 00 00 	xadd	dword ptr [rax + 10120], ecx
 10439e7:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 10439ec:	48 83 c4 50 	add	rsp, 80
 10439f0:	c3 	ret
 10439f1:	e8 ea ef 00 00 	call	61418 <_runtime.gcWriteBarrier>
 10439f6:	eb 84 	jmp	-124 <_runtime.doaddtimer+0x8c>
 10439f8:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 10439fd:	48 8d 05 3c a4 01 00 	lea	rax, [rip + 107580]
 1043a04:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043a08:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1043a0d:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1043a12:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1043a17:	4c 89 44 24 20 	mov	qword ptr [rsp + 32], r8
 1043a1c:	e8 ff 91 ff ff 	call	-28161 <_runtime.growslice>
 1043a21:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1043a26:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1043a2b:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1043a30:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1043a35:	48 89 93 80 27 00 00 	mov	qword ptr [rbx + 10112], rdx
 1043a3c:	83 3d bd 3e 0b 00 00 	cmp	dword ptr [rip + 736957], 0
 1043a43:	75 1f 	jne	31 <_runtime.doaddtimer+0x174>
 1043a45:	48 89 83 70 27 00 00 	mov	qword ptr [rbx + 10096], rax
 1043a4c:	48 89 da 	mov	rdx, rbx
 1043a4f:	48 89 cb 	mov	rbx, rcx
 1043a52:	48 89 c6 	mov	rsi, rax
 1043a55:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1043a5a:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1043a5f:	e9 fc fe ff ff 	jmp	-260 <_runtime.doaddtimer+0x70>
 1043a64:	48 8d bb 70 27 00 00 	lea	rdi, [rbx + 10096]
 1043a6b:	e8 70 ef 00 00 	call	61296 <_runtime.gcWriteBarrier>
 1043a70:	eb da 	jmp	-38 <_runtime.doaddtimer+0x15c>
 1043a72:	e8 19 1d fe ff 	call	-123623 <_runtime.netpollGenericInit>
 1043a77:	e9 a2 fe ff ff 	jmp	-350 <_runtime.doaddtimer+0x2e>
 1043a7c:	31 c0 	xor	eax, eax
 1043a7e:	e8 cd f8 00 00 	call	63693 <_runtime.panicIndex>
 1043a83:	48 8d 05 ab 25 03 00 	lea	rax, [rip + 206251]
 1043a8a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043a8e:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 1043a97:	e8 c4 52 fe ff 	call	-109884 <_runtime.throw>
 1043a9c:	90 	nop
 1043a9d:	e8 2e d1 00 00 	call	53550 <_runtime.morestack_noctxt>
 1043aa2:	e9 49 fe ff ff 	jmp	-439 <_runtime.doaddtimer>
 1043aa7:	cc 	int3
 1043aa8:	cc 	int3
 1043aa9:	cc 	int3
 1043aaa:	cc 	int3
 1043aab:	cc 	int3
 1043aac:	cc 	int3
 1043aad:	cc 	int3
 1043aae:	cc 	int3
 1043aaf:	cc 	int3

_runtime.deltimer:
 1043ab0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1043ab9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1043abd:	0f 86 9e 02 00 00 	jbe	670 <_runtime.deltimer+0x2b1>
 1043ac3:	48 83 ec 28 	sub	rsp, 40
 1043ac7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1043acc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1043ad1:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1043ad6:	8b 51 40 	mov	edx, dword ptr [rcx + 64]
 1043ad9:	83 fa 05 	cmp	edx, 5
 1043adc:	0f 87 47 01 00 00 	ja	327 <_runtime.deltimer+0x179>
 1043ae2:	83 fa 01 	cmp	edx, 1
 1043ae5:	0f 87 f3 00 00 00 	ja	243 <_runtime.deltimer+0x12e>
 1043aeb:	85 d2 	test	edx, edx
 1043aed:	0f 84 dc 00 00 00 	je	220 <_runtime.deltimer+0x11f>
 1043af3:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1043afc:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 1043b00:	90 	nop
 1043b01:	ff 86 08 01 00 00 	inc	dword ptr [rsi + 264]
 1043b07:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1043b0b:	89 d0 	mov	eax, edx
 1043b0d:	be 06 00 00 00 	mov	esi, 6
 1043b12:	f0 	lock
 1043b13:	0f b1 71 40 	cmpxchg	dword ptr [rcx + 64], esi
 1043b17:	0f 94 c2 	sete	dl
 1043b1a:	84 d2 	test	dl, dl
 1043b1c:	75 33 	jne	51 <_runtime.deltimer+0xa1>
 1043b1e:	90 	nop
 1043b1f:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1043b28:	8b bb 08 01 00 00 	mov	edi, dword ptr [rbx + 264]
 1043b2e:	44 8d 47 ff 	lea	r8d, [rdi - 1]
 1043b32:	44 89 83 08 01 00 00 	mov	dword ptr [rbx + 264], r8d
 1043b39:	83 ff 01 	cmp	edi, 1
 1043b3c:	75 98 	jne	-104 <_runtime.deltimer+0x26>
 1043b3e:	80 ba b1 00 00 00 00 	cmp	byte ptr [rdx + 177], 0
 1043b45:	74 8f 	je	-113 <_runtime.deltimer+0x26>
 1043b47:	48 c7 42 10 de fa ff ff 	mov	qword ptr [rdx + 16], -1314
 1043b4f:	eb 85 	jmp	-123 <_runtime.deltimer+0x26>
 1043b51:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1043b54:	89 f0 	mov	eax, esi
 1043b56:	bf 03 00 00 00 	mov	edi, 3
 1043b5b:	f0 	lock
 1043b5c:	0f b1 79 40 	cmpxchg	dword ptr [rcx + 64], edi
 1043b60:	0f 94 c1 	sete	cl
 1043b63:	84 c9 	test	cl, cl
 1043b65:	74 4d 	je	77 <_runtime.deltimer+0x104>
 1043b67:	90 	nop
 1043b68:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1043b71:	8b 8b 08 01 00 00 	mov	ecx, dword ptr [rbx + 264]
 1043b77:	8d 71 ff 	lea	esi, [rcx - 1]
 1043b7a:	89 b3 08 01 00 00 	mov	dword ptr [rbx + 264], esi
 1043b80:	83 f9 01 	cmp	ecx, 1
 1043b83:	75 11 	jne	17 <_runtime.deltimer+0xe6>
 1043b85:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1043b8c:	74 08 	je	8 <_runtime.deltimer+0xe6>
 1043b8e:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1043b96:	84 02 	test	byte ptr [rdx], al
 1043b98:	b8 01 00 00 00 	mov	eax, 1
 1043b9d:	f0 	lock
 1043b9e:	0f c1 82 90 27 00 00 	xadd	dword ptr [rdx + 10128], eax
 1043ba5:	c6 44 24 38 01 	mov	byte ptr [rsp + 56], 1
 1043baa:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1043baf:	48 83 c4 28 	add	rsp, 40
 1043bb3:	c3 	ret
 1043bb4:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1043bb9:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1043bbe:	e8 cd 1c 00 00 	call	7373 <_runtime.badTimer>
 1043bc3:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1043bc8:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 1043bcd:	eb 98 	jmp	-104 <_runtime.deltimer+0xb7>
 1043bcf:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1043bd4:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1043bd9:	48 83 c4 28 	add	rsp, 40
 1043bdd:	c3 	ret
 1043bde:	83 fa 02 	cmp	edx, 2
 1043be1:	75 1b 	jne	27 <_runtime.deltimer+0x14e>
 1043be3:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1043bea:	e8 f1 f5 ff ff 	call	-2575 <_runtime.usleep>
 1043bef:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1043bf4:	be 06 00 00 00 	mov	esi, 6
 1043bf9:	e9 d8 fe ff ff 	jmp	-296 <_runtime.deltimer+0x26>
 1043bfe:	8d 42 fd 	lea	eax, [rdx - 3]
 1043c01:	83 f8 02 	cmp	eax, 2
 1043c04:	76 14 	jbe	20 <_runtime.deltimer+0x16a>
 1043c06:	e8 85 1c 00 00 	call	7301 <_runtime.badTimer>
 1043c0b:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1043c10:	be 06 00 00 00 	mov	esi, 6
 1043c15:	e9 bc fe ff ff 	jmp	-324 <_runtime.deltimer+0x26>
 1043c1a:	c6 44 24 38 00 	mov	byte ptr [rsp + 56], 0
 1043c1f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1043c24:	48 83 c4 28 	add	rsp, 40
 1043c28:	c3 	ret
 1043c29:	83 fa 07 	cmp	edx, 7
 1043c2c:	0f 87 18 01 00 00 	ja	280 <_runtime.deltimer+0x29a>
 1043c32:	83 fa 06 	cmp	edx, 6
 1043c35:	0f 84 f4 00 00 00 	je	244 <_runtime.deltimer+0x27f>
 1043c3b:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1043c44:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 1043c48:	90 	nop
 1043c49:	ff 86 08 01 00 00 	inc	dword ptr [rsi + 264]
 1043c4f:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1043c53:	89 d0 	mov	eax, edx
 1043c55:	be 06 00 00 00 	mov	esi, 6
 1043c5a:	f0 	lock
 1043c5b:	0f b1 71 40 	cmpxchg	dword ptr [rcx + 64], esi
 1043c5f:	0f 94 c2 	sete	dl
 1043c62:	84 d2 	test	dl, dl
 1043c64:	75 3e 	jne	62 <_runtime.deltimer+0x1f4>
 1043c66:	90 	nop
 1043c67:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1043c70:	8b bb 08 01 00 00 	mov	edi, dword ptr [rbx + 264]
 1043c76:	44 8d 47 ff 	lea	r8d, [rdi - 1]
 1043c7a:	44 89 83 08 01 00 00 	mov	dword ptr [rbx + 264], r8d
 1043c81:	83 ff 01 	cmp	edi, 1
 1043c84:	0f 85 4c fe ff ff 	jne	-436 <_runtime.deltimer+0x26>
 1043c8a:	80 ba b1 00 00 00 00 	cmp	byte ptr [rdx + 177], 0
 1043c91:	0f 84 3f fe ff ff 	je	-449 <_runtime.deltimer+0x26>
 1043c97:	48 c7 42 10 de fa ff ff 	mov	qword ptr [rdx + 16], -1314
 1043c9f:	e9 32 fe ff ff 	jmp	-462 <_runtime.deltimer+0x26>
 1043ca4:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1043ca7:	84 02 	test	byte ptr [rdx], al
 1043ca9:	bf ff ff ff ff 	mov	edi, 4294967295
 1043cae:	f0 	lock
 1043caf:	0f c1 ba 8c 27 00 00 	xadd	dword ptr [rdx + 10124], edi
 1043cb6:	89 f0 	mov	eax, esi
 1043cb8:	bf 03 00 00 00 	mov	edi, 3
 1043cbd:	f0 	lock
 1043cbe:	0f b1 79 40 	cmpxchg	dword ptr [rcx + 64], edi
 1043cc2:	0f 94 c1 	sete	cl
 1043cc5:	84 c9 	test	cl, cl
 1043cc7:	74 4b 	je	75 <_runtime.deltimer+0x264>
 1043cc9:	90 	nop
 1043cca:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1043cd3:	8b 8b 08 01 00 00 	mov	ecx, dword ptr [rbx + 264]
 1043cd9:	8d 71 ff 	lea	esi, [rcx - 1]
 1043cdc:	89 b3 08 01 00 00 	mov	dword ptr [rbx + 264], esi
 1043ce2:	83 f9 01 	cmp	ecx, 1
 1043ce5:	75 11 	jne	17 <_runtime.deltimer+0x248>
 1043ce7:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1043cee:	74 08 	je	8 <_runtime.deltimer+0x248>
 1043cf0:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 1043cf8:	b8 01 00 00 00 	mov	eax, 1
 1043cfd:	f0 	lock
 1043cfe:	0f c1 82 90 27 00 00 	xadd	dword ptr [rdx + 10128], eax
 1043d05:	c6 44 24 38 01 	mov	byte ptr [rsp + 56], 1
 1043d0a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1043d0f:	48 83 c4 28 	add	rsp, 40
 1043d13:	c3 	ret
 1043d14:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1043d19:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1043d1e:	e8 6d 1b 00 00 	call	7021 <_runtime.badTimer>
 1043d23:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1043d28:	48 8b 5c 24 08 	mov	rbx, qword ptr [rsp + 8]
 1043d2d:	eb 9a 	jmp	-102 <_runtime.deltimer+0x219>
 1043d2f:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1043d36:	e8 a5 f4 ff ff 	call	-2907 <_runtime.usleep>
 1043d3b:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1043d40:	be 06 00 00 00 	mov	esi, 6
 1043d45:	e9 8c fd ff ff 	jmp	-628 <_runtime.deltimer+0x26>
 1043d4a:	83 fa 08 	cmp	edx, 8
 1043d4d:	0f 84 a0 fd ff ff 	je	-608 <_runtime.deltimer+0x43>
 1043d53:	83 fa 09 	cmp	edx, 9
 1043d56:	0f 84 87 fe ff ff 	je	-377 <_runtime.deltimer+0x133>
 1043d5c:	e9 a5 fe ff ff 	jmp	-347 <_runtime.deltimer+0x156>
 1043d61:	e8 6a ce 00 00 	call	52842 <_runtime.morestack_noctxt>
 1043d66:	e9 45 fd ff ff 	jmp	-699 <_runtime.deltimer>
 1043d6b:	cc 	int3
 1043d6c:	cc 	int3
 1043d6d:	cc 	int3
 1043d6e:	cc 	int3
 1043d6f:	cc 	int3

_runtime.dodeltimer:
 1043d70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1043d79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1043d7d:	0f 86 f3 01 00 00 	jbe	499 <_runtime.dodeltimer+0x206>
 1043d83:	48 83 ec 28 	sub	rsp, 40
 1043d87:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1043d8c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1043d91:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1043d96:	84 03 	test	byte ptr [rbx], al
 1043d98:	48 8b b3 70 27 00 00 	mov	rsi, qword ptr [rbx + 10096]
 1043d9f:	48 8b 8b 78 27 00 00 	mov	rcx, qword ptr [rbx + 10104]
 1043da6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1043dab:	48 39 c8 	cmp	rax, rcx
 1043dae:	0f 83 bc 01 00 00 	jae	444 <_runtime.dodeltimer+0x200>
 1043db4:	48 8b 34 c6 	mov	rsi, qword ptr [rsi + 8*rax]
 1043db8:	4c 8b 06 	mov	r8, qword ptr [rsi]
 1043dbb:	49 39 d8 	cmp	r8, rbx
 1043dbe:	0f 85 93 01 00 00 	jne	403 <_runtime.dodeltimer+0x1e7>
 1043dc4:	48 c7 06 00 00 00 00 	mov	qword ptr [rsi], 0
 1043dcb:	48 8b 8b 78 27 00 00 	mov	rcx, qword ptr [rbx + 10104]
 1043dd2:	48 8b b3 70 27 00 00 	mov	rsi, qword ptr [rbx + 10096]
 1043dd9:	4c 8d 41 ff 	lea	r8, [rcx - 1]
 1043ddd:	49 39 c0 	cmp	r8, rax
 1043de0:	74 2c 	je	44 <_runtime.dodeltimer+0x9e>
 1043de2:	49 39 c8 	cmp	r8, rcx
 1043de5:	0f 83 64 01 00 00 	jae	356 <_runtime.dodeltimer+0x1df>
 1043deb:	4c 8b 4c ce f8 	mov	r9, qword ptr [rsi + 8*rcx - 8]
 1043df0:	48 39 c8 	cmp	rax, rcx
 1043df3:	0f 83 51 01 00 00 	jae	337 <_runtime.dodeltimer+0x1da>
 1043df9:	48 8d 3c c6 	lea	rdi, [rsi + 8*rax]
 1043dfd:	83 3d fc 3a 0b 00 00 	cmp	dword ptr [rip + 735996], 0
 1043e04:	0f 85 1a 01 00 00 	jne	282 <_runtime.dodeltimer+0x1b4>
 1043e0a:	4c 89 0c c6 	mov	qword ptr [rsi + 8*rax], r9
 1043e0e:	48 8b b3 78 27 00 00 	mov	rsi, qword ptr [rbx + 10104]
 1043e15:	4c 8b 8b 70 27 00 00 	mov	r9, qword ptr [rbx + 10096]
 1043e1c:	49 39 f0 	cmp	r8, rsi
 1043e1f:	0f 83 1a 01 00 00 	jae	282 <_runtime.dodeltimer+0x1cf>
 1043e25:	49 8d 3c c9 	lea	rdi, [r9 + 8*rcx]
 1043e29:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 1043e2d:	83 3d cc 3a 0b 00 00 	cmp	dword ptr [rip + 735948], 0
 1043e34:	0f 85 d8 00 00 00 	jne	216 <_runtime.dodeltimer+0x1a2>
 1043e3a:	49 c7 44 c9 f8 00 00 00 00 	mov	qword ptr [r9 + 8*rcx - 8], 0
 1043e43:	48 8b 93 80 27 00 00 	mov	rdx, qword ptr [rbx + 10112]
 1043e4a:	49 39 d0 	cmp	r8, rdx
 1043e4d:	0f 87 e4 00 00 00 	ja	228 <_runtime.dodeltimer+0x1c7>
 1043e53:	4c 89 83 78 27 00 00 	mov	qword ptr [rbx + 10104], r8
 1043e5a:	49 39 c0 	cmp	r8, rax
 1043e5d:	75 47 	jne	71 <_runtime.dodeltimer+0x136>
 1043e5f:	48 85 c0 	test	rax, rax
 1043e62:	75 1b 	jne	27 <_runtime.dodeltimer+0x10f>
 1043e64:	90 	nop
 1043e65:	48 8b 83 70 27 00 00 	mov	rax, qword ptr [rbx + 10096]
 1043e6c:	48 83 bb 78 27 00 00 00 	cmp	qword ptr [rbx + 10104], 0
 1043e74:	75 20 	jne	32 <_runtime.dodeltimer+0x126>
 1043e76:	31 c0 	xor	eax, eax
 1043e78:	48 87 83 68 16 00 00 	xchg	qword ptr [rbx + 5736], rax
 1043e7f:	b8 ff ff ff ff 	mov	eax, 4294967295
 1043e84:	f0 	lock
 1043e85:	0f c1 83 88 27 00 00 	xadd	dword ptr [rbx + 10120], eax
 1043e8c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1043e91:	48 83 c4 28 	add	rsp, 40
 1043e95:	c3 	ret
 1043e96:	48 8b 00 	mov	rax, qword ptr [rax]
 1043e99:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1043e9d:	48 87 83 68 16 00 00 	xchg	qword ptr [rbx + 5736], rax
 1043ea4:	eb d9 	jmp	-39 <_runtime.dodeltimer+0x10f>
 1043ea6:	48 8b 8b 80 27 00 00 	mov	rcx, qword ptr [rbx + 10112]
 1043ead:	48 8b 93 70 27 00 00 	mov	rdx, qword ptr [rbx + 10096]
 1043eb4:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1043eb8:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1043ebd:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1043ec2:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1043ec7:	e8 e4 16 00 00 	call	5860 <_runtime.siftupTimer>
 1043ecc:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1043ed1:	48 8b 88 70 27 00 00 	mov	rcx, qword ptr [rax + 10096]
 1043ed8:	48 8b 90 78 27 00 00 	mov	rdx, qword ptr [rax + 10104]
 1043edf:	48 8b 98 80 27 00 00 	mov	rbx, qword ptr [rax + 10112]
 1043ee6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1043eea:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1043eef:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1043ef4:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1043ef9:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1043efe:	e8 bd 17 00 00 	call	6077 <_runtime.siftdownTimer>
 1043f03:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1043f08:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1043f0d:	e9 4d ff ff ff 	jmp	-179 <_runtime.dodeltimer+0xef>
 1043f12:	48 89 c1 	mov	rcx, rax
 1043f15:	31 c0 	xor	eax, eax
 1043f17:	e8 c4 ea 00 00 	call	60100 <_runtime.gcWriteBarrier>
 1043f1c:	48 89 c8 	mov	rax, rcx
 1043f1f:	e9 1f ff ff ff 	jmp	-225 <_runtime.dodeltimer+0xd3>
 1043f24:	48 89 c2 	mov	rdx, rax
 1043f27:	4c 89 c8 	mov	rax, r9
 1043f2a:	e8 b1 ea 00 00 	call	60081 <_runtime.gcWriteBarrier>
 1043f2f:	48 89 d0 	mov	rax, rdx
 1043f32:	e9 d7 fe ff ff 	jmp	-297 <_runtime.dodeltimer+0x9e>
 1043f37:	4c 89 c1 	mov	rcx, r8
 1043f3a:	e8 51 f4 00 00 	call	62545 <_runtime.panicSliceAcap>
 1043f3f:	4c 89 c0 	mov	rax, r8
 1043f42:	48 89 f1 	mov	rcx, rsi
 1043f45:	e8 06 f4 00 00 	call	62470 <_runtime.panicIndex>
 1043f4a:	e8 01 f4 00 00 	call	62465 <_runtime.panicIndex>
 1043f4f:	4c 89 c0 	mov	rax, r8
 1043f52:	e8 f9 f3 00 00 	call	62457 <_runtime.panicIndex>
 1043f57:	48 8d 05 41 00 03 00 	lea	rax, [rip + 196673]
 1043f5e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1043f62:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1043f6b:	e8 f0 4d fe ff 	call	-111120 <_runtime.throw>
 1043f70:	e8 db f3 00 00 	call	62427 <_runtime.panicIndex>
 1043f75:	90 	nop
 1043f76:	e8 55 cc 00 00 	call	52309 <_runtime.morestack_noctxt>
 1043f7b:	e9 f0 fd ff ff 	jmp	-528 <_runtime.dodeltimer>

_runtime.dodeltimer0:
 1043f80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1043f89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1043f8d:	0f 86 85 01 00 00 	jbe	389 <_runtime.dodeltimer0+0x198>
 1043f93:	48 83 ec 28 	sub	rsp, 40
 1043f97:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1043f9c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1043fa1:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1043fa6:	84 03 	test	byte ptr [rbx], al
 1043fa8:	48 8b 8b 78 27 00 00 	mov	rcx, qword ptr [rbx + 10104]
 1043faf:	48 8b b3 70 27 00 00 	mov	rsi, qword ptr [rbx + 10096]
 1043fb6:	48 85 c9 	test	rcx, rcx
 1043fb9:	0f 86 51 01 00 00 	jbe	337 <_runtime.dodeltimer0+0x190>
 1043fbf:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1043fc2:	4c 8b 06 	mov	r8, qword ptr [rsi]
 1043fc5:	49 39 d8 	cmp	r8, rbx
 1043fc8:	0f 85 29 01 00 00 	jne	297 <_runtime.dodeltimer0+0x177>
 1043fce:	48 c7 06 00 00 00 00 	mov	qword ptr [rsi], 0
 1043fd5:	48 8b bb 70 27 00 00 	mov	rdi, qword ptr [rbx + 10096]
 1043fdc:	48 8b b3 78 27 00 00 	mov	rsi, qword ptr [rbx + 10104]
 1043fe3:	48 8d 46 ff 	lea	rax, [rsi - 1]
 1043fe7:	48 85 c0 	test	rax, rax
 1043fea:	7e 15 	jle	21 <_runtime.dodeltimer0+0x81>
 1043fec:	4c 8b 44 f7 f8 	mov	r8, qword ptr [rdi + 8*rsi - 8]
 1043ff1:	83 3d 08 39 0b 00 00 	cmp	dword ptr [rip + 735496], 0
 1043ff8:	0f 85 d9 00 00 00 	jne	217 <_runtime.dodeltimer0+0x157>
 1043ffe:	4c 89 07 	mov	qword ptr [rdi], r8
 1044001:	48 8b 8b 78 27 00 00 	mov	rcx, qword ptr [rbx + 10104]
 1044008:	4c 8b 83 70 27 00 00 	mov	r8, qword ptr [rbx + 10096]
 104400f:	48 39 c8 	cmp	rax, rcx
 1044012:	0f 83 da 00 00 00 	jae	218 <_runtime.dodeltimer0+0x172>
 1044018:	49 8d 3c f0 	lea	rdi, [r8 + 8*rsi]
 104401c:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 1044020:	83 3d d9 38 0b 00 00 	cmp	dword ptr [rip + 735449], 0
 1044027:	0f 85 98 00 00 00 	jne	152 <_runtime.dodeltimer0+0x145>
 104402d:	49 c7 44 f0 f8 00 00 00 00 	mov	qword ptr [r8 + 8*rsi - 8], 0
 1044036:	48 8b 93 80 27 00 00 	mov	rdx, qword ptr [rbx + 10112]
 104403d:	48 39 d0 	cmp	rax, rdx
 1044040:	0f 87 a4 00 00 00 	ja	164 <_runtime.dodeltimer0+0x16a>
 1044046:	48 89 83 78 27 00 00 	mov	qword ptr [rbx + 10104], rax
 104404d:	48 85 c0 	test	rax, rax
 1044050:	7f 42 	jg	66 <_runtime.dodeltimer0+0x114>
 1044052:	90 	nop
 1044053:	48 8b 83 70 27 00 00 	mov	rax, qword ptr [rbx + 10096]
 104405a:	48 83 bb 78 27 00 00 00 	cmp	qword ptr [rbx + 10104], 0
 1044062:	75 20 	jne	32 <_runtime.dodeltimer0+0x104>
 1044064:	31 c0 	xor	eax, eax
 1044066:	48 87 83 68 16 00 00 	xchg	qword ptr [rbx + 5736], rax
 104406d:	b8 ff ff ff ff 	mov	eax, 4294967295
 1044072:	f0 	lock
 1044073:	0f c1 83 88 27 00 00 	xadd	dword ptr [rbx + 10120], eax
 104407a:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104407f:	48 83 c4 28 	add	rsp, 40
 1044083:	c3 	ret
 1044084:	48 8b 00 	mov	rax, qword ptr [rax]
 1044087:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 104408b:	48 87 83 68 16 00 00 	xchg	qword ptr [rbx + 5736], rax
 1044092:	eb d9 	jmp	-39 <_runtime.dodeltimer0+0xed>
 1044094:	48 8b 8b 70 27 00 00 	mov	rcx, qword ptr [rbx + 10096]
 104409b:	48 8b 93 80 27 00 00 	mov	rdx, qword ptr [rbx + 10112]
 10440a2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10440a6:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10440ab:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10440b0:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 10440b9:	e8 02 16 00 00 	call	5634 <_runtime.siftdownTimer>
 10440be:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10440c3:	eb 8d 	jmp	-115 <_runtime.dodeltimer0+0xd2>
 10440c5:	48 89 c1 	mov	rcx, rax
 10440c8:	31 c0 	xor	eax, eax
 10440ca:	e8 11 e9 00 00 	call	59665 <_runtime.gcWriteBarrier>
 10440cf:	48 89 c8 	mov	rax, rcx
 10440d2:	e9 5f ff ff ff 	jmp	-161 <_runtime.dodeltimer0+0xb6>
 10440d7:	48 89 c1 	mov	rcx, rax
 10440da:	4c 89 c0 	mov	rax, r8
 10440dd:	e8 fe e8 00 00 	call	59646 <_runtime.gcWriteBarrier>
 10440e2:	48 89 c8 	mov	rax, rcx
 10440e5:	e9 17 ff ff ff 	jmp	-233 <_runtime.dodeltimer0+0x81>
 10440ea:	48 89 c1 	mov	rcx, rax
 10440ed:	e8 9e f2 00 00 	call	62110 <_runtime.panicSliceAcap>
 10440f2:	e8 59 f2 00 00 	call	62041 <_runtime.panicIndex>
 10440f7:	48 8d 05 d2 00 03 00 	lea	rax, [rip + 196818]
 10440fe:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044102:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 104410b:	e8 50 4c fe ff 	call	-111536 <_runtime.throw>
 1044110:	31 c0 	xor	eax, eax
 1044112:	e8 39 f2 00 00 	call	62009 <_runtime.panicIndex>
 1044117:	90 	nop
 1044118:	e8 b3 ca 00 00 	call	51891 <_runtime.morestack_noctxt>
 104411d:	e9 5e fe ff ff 	jmp	-418 <_runtime.dodeltimer0>
 1044122:	cc 	int3
 1044123:	cc 	int3
 1044124:	cc 	int3
 1044125:	cc 	int3
 1044126:	cc 	int3
 1044127:	cc 	int3
 1044128:	cc 	int3
 1044129:	cc 	int3
 104412a:	cc 	int3
 104412b:	cc 	int3
 104412c:	cc 	int3
 104412d:	cc 	int3
 104412e:	cc 	int3
 104412f:	cc 	int3

_runtime.modtimer:
 1044130:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1044139:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104413d:	0f 86 50 04 00 00 	jbe	1104 <_runtime.modtimer+0x463>
 1044143:	48 83 ec 38 	sub	rsp, 56
 1044147:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 104414c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1044151:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1044156:	48 85 c9 	test	rcx, rcx
 1044159:	48 ba ff ff ff ff ff ff ff 7f 	movabs	rdx, 9223372036854775807
 1044163:	48 0f 4c ca 	cmovl	rcx, rdx
 1044167:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 104416c:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1044171:	8b 5a 40 	mov	ebx, dword ptr [rdx + 64]
 1044174:	83 fb 03 	cmp	ebx, 3
 1044177:	0f 87 b5 03 00 00 	ja	949 <_runtime.modtimer+0x402>
 104417d:	83 fb 01 	cmp	ebx, 1
 1044180:	0f 87 f6 02 00 00 	ja	758 <_runtime.modtimer+0x34c>
 1044186:	85 db 	test	ebx, ebx
 1044188:	0f 85 77 02 00 00 	jne	631 <_runtime.modtimer+0x2d5>
 104418e:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 1044197:	4c 8b 46 30 	mov	r8, qword ptr [rsi + 48]
 104419b:	90 	nop
 104419c:	41 ff 80 08 01 00 00 	inc	dword ptr [r8 + 264]
 10441a3:	48 8b 76 30 	mov	rsi, qword ptr [rsi + 48]
 10441a7:	89 d8 	mov	eax, ebx
 10441a9:	41 b8 06 00 00 00 	mov	r8d, 6
 10441af:	f0 	lock
 10441b0:	44 0f b1 42 40 	cmpxchg	dword ptr [rdx + 64], r8d
 10441b5:	41 0f 94 c1 	sete	r9b
 10441b9:	45 84 c9 	test	r9b, r9b
 10441bc:	75 38 	jne	56 <_runtime.modtimer+0xc6>
 10441be:	90 	nop
 10441bf:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 10441c8:	44 8b 8e 08 01 00 00 	mov	r9d, dword ptr [rsi + 264]
 10441cf:	45 8d 51 ff 	lea	r10d, [r9 - 1]
 10441d3:	44 89 96 08 01 00 00 	mov	dword ptr [rsi + 264], r10d
 10441da:	41 83 f9 01 	cmp	r9d, 1
 10441de:	75 91 	jne	-111 <_runtime.modtimer+0x41>
 10441e0:	80 bb b1 00 00 00 00 	cmp	byte ptr [rbx + 177], 0
 10441e7:	74 88 	je	-120 <_runtime.modtimer+0x41>
 10441e9:	48 c7 43 10 de fa ff ff 	mov	qword ptr [rbx + 16], -1314
 10441f1:	e9 7b ff ff ff 	jmp	-133 <_runtime.modtimer+0x41>
 10441f6:	b8 01 00 00 00 	mov	eax, 1
 10441fb:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 1044200:	4c 89 4a 10 	mov	qword ptr [rdx + 16], r9
 1044204:	83 3d f5 36 0b 00 00 	cmp	dword ptr [rip + 734965], 0
 104420b:	0f 85 db 01 00 00 	jne	475 <_runtime.modtimer+0x2bc>
 1044211:	4c 8b 4c 24 58 	mov	r9, qword ptr [rsp + 88]
 1044216:	4c 89 4a 18 	mov	qword ptr [rdx + 24], r9
 104421a:	4c 8b 4c 24 60 	mov	r9, qword ptr [rsp + 96]
 104421f:	4c 89 4a 20 	mov	qword ptr [rdx + 32], r9
 1044223:	83 3d d6 36 0b 00 00 	cmp	dword ptr [rip + 734934], 0
 104422a:	0f 85 a3 01 00 00 	jne	419 <_runtime.modtimer+0x2a3>
 1044230:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1044235:	48 89 7a 28 	mov	qword ptr [rdx + 40], rdi
 1044239:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 104423e:	48 8b 7c 24 70 	mov	rdi, qword ptr [rsp + 112]
 1044243:	48 89 7a 30 	mov	qword ptr [rdx + 48], rdi
 1044247:	84 c0 	test	al, al
 1044249:	0f 85 c1 00 00 00 	jne	193 <_runtime.modtimer+0x1e0>
 104424f:	48 89 4a 38 	mov	qword ptr [rdx + 56], rcx
 1044253:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 1044257:	bf 08 00 00 00 	mov	edi, 8
 104425c:	41 b9 07 00 00 00 	mov	r9d, 7
 1044262:	41 0f 4f f9 	cmovg	edi, r9d
 1044266:	83 fb 07 	cmp	ebx, 7
 1044269:	bb 00 00 00 00 	mov	ebx, 0
 104426e:	41 b9 ff ff ff ff 	mov	r9d, 4294967295
 1044274:	41 0f 44 d9 	cmove	ebx, r9d
 1044278:	44 8d 4b 01 	lea	r9d, [rbx + 1]
 104427c:	83 ff 07 	cmp	edi, 7
 104427f:	41 0f 44 d9 	cmove	ebx, r9d
 1044283:	85 db 	test	ebx, ebx
 1044285:	74 0f 	je	15 <_runtime.modtimer+0x166>
 1044287:	4c 8b 0a 	mov	r9, qword ptr [rdx]
 104428a:	41 84 01 	test	byte ptr [r9], al
 104428d:	f0 	lock
 104428e:	41 0f c1 99 8c 27 00 00 	xadd	dword ptr [r9 + 10124], ebx
 1044296:	44 89 c0 	mov	eax, r8d
 1044299:	f0 	lock
 104429a:	0f b1 7a 40 	cmpxchg	dword ptr [rdx + 64], edi
 104429e:	0f 94 c2 	sete	dl
 10442a1:	84 d2 	test	dl, dl
 10442a3:	74 52 	je	82 <_runtime.modtimer+0x1c7>
 10442a5:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10442ae:	8b 96 08 01 00 00 	mov	edx, dword ptr [rsi + 264]
 10442b4:	8d 5a ff 	lea	ebx, [rdx - 1]
 10442b7:	89 9e 08 01 00 00 	mov	dword ptr [rsi + 264], ebx
 10442bd:	83 fa 01 	cmp	edx, 1
 10442c0:	75 30 	jne	48 <_runtime.modtimer+0x1c2>
 10442c2:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 10442c9:	74 22 	je	34 <_runtime.modtimer+0x1bd>
 10442cb:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 10442d3:	83 ff 07 	cmp	edi, 7
 10442d6:	74 0a 	je	10 <_runtime.modtimer+0x1b2>
 10442d8:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10442dd:	48 83 c4 38 	add	rsp, 56
 10442e1:	c3 	ret
 10442e2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10442e6:	e8 85 c8 fe ff 	call	-79739 <_runtime.wakeNetPoller>
 10442eb:	eb eb 	jmp	-21 <_runtime.modtimer+0x1a8>
 10442ed:	83 ff 07 	cmp	edi, 7
 10442f0:	eb e4 	jmp	-28 <_runtime.modtimer+0x1a6>
 10442f2:	83 ff 07 	cmp	edi, 7
 10442f5:	eb df 	jmp	-33 <_runtime.modtimer+0x1a6>
 10442f7:	89 7c 24 14 	mov	dword ptr [rsp + 20], edi
 10442fb:	e8 90 15 00 00 	call	5520 <_runtime.badTimer>
 1044300:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1044305:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 104430a:	8b 7c 24 14 	mov	edi, dword ptr [rsp + 20]
 104430e:	eb 95 	jmp	-107 <_runtime.modtimer+0x175>
 1044310:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 1044314:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104431d:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1044321:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1044328:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104432d:	84 00 	test	byte ptr [rax], al
 104432f:	48 8d 98 68 27 00 00 	lea	rbx, [rax + 10088]
 1044336:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 104433b:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104433f:	e8 ec 3d fc ff 	call	-246292 <_runtime.lock>
 1044344:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1044349:	48 89 04 24 	mov	qword ptr [rsp], rax
 104434d:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1044352:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1044357:	e8 94 f5 ff ff 	call	-2668 <_runtime.doaddtimer>
 104435c:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1044361:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044365:	e8 a6 3f fc ff 	call	-245850 <_runtime.unlock>
 104436a:	b8 06 00 00 00 	mov	eax, 6
 104436f:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1044374:	ba 01 00 00 00 	mov	edx, 1
 1044379:	f0 	lock
 104437a:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 104437e:	0f 94 c0 	sete	al
 1044381:	84 c0 	test	al, al
 1044383:	74 47 	je	71 <_runtime.modtimer+0x29c>
 1044385:	90 	nop
 1044386:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104438f:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1044394:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 104439a:	8d 5a ff 	lea	ebx, [rdx - 1]
 104439d:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 10443a3:	83 fa 01 	cmp	edx, 1
 10443a6:	75 11 	jne	17 <_runtime.modtimer+0x289>
 10443a8:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 10443af:	74 08 	je	8 <_runtime.modtimer+0x289>
 10443b1:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 10443b9:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10443be:	48 89 04 24 	mov	qword ptr [rsp], rax
 10443c2:	e8 a9 c7 fe ff 	call	-79959 <_runtime.wakeNetPoller>
 10443c7:	e9 0c ff ff ff 	jmp	-244 <_runtime.modtimer+0x1a8>
 10443cc:	e8 bf 14 00 00 	call	5311 <_runtime.badTimer>
 10443d1:	eb b2 	jmp	-78 <_runtime.modtimer+0x255>
 10443d3:	48 8d 7a 28 	lea	rdi, [rdx + 40]
 10443d7:	41 89 c1 	mov	r9d, eax
 10443da:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 10443df:	e8 fc e5 00 00 	call	58876 <_runtime.gcWriteBarrier>
 10443e4:	44 89 c8 	mov	eax, r9d
 10443e7:	e9 4d fe ff ff 	jmp	-435 <_runtime.modtimer+0x109>
 10443ec:	48 8d 7a 18 	lea	rdi, [rdx + 24]
 10443f0:	41 89 c1 	mov	r9d, eax
 10443f3:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10443f8:	e8 e3 e5 00 00 	call	58851 <_runtime.gcWriteBarrier>
 10443fd:	44 89 c8 	mov	eax, r9d
 1044400:	e9 15 fe ff ff 	jmp	-491 <_runtime.modtimer+0xea>
 1044405:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 104440e:	4c 8b 46 30 	mov	r8, qword ptr [rsi + 48]
 1044412:	90 	nop
 1044413:	41 ff 80 08 01 00 00 	inc	dword ptr [r8 + 264]
 104441a:	48 8b 76 30 	mov	rsi, qword ptr [rsi + 48]
 104441e:	89 d8 	mov	eax, ebx
 1044420:	41 b8 06 00 00 00 	mov	r8d, 6
 1044426:	f0 	lock
 1044427:	44 0f b1 42 40 	cmpxchg	dword ptr [rdx + 64], r8d
 104442c:	41 0f 94 c1 	sete	r9b
 1044430:	45 84 c9 	test	r9b, r9b
 1044433:	75 40 	jne	64 <_runtime.modtimer+0x345>
 1044435:	90 	nop
 1044436:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 104443f:	44 8b 8e 08 01 00 00 	mov	r9d, dword ptr [rsi + 264]
 1044446:	45 8d 51 ff 	lea	r10d, [r9 - 1]
 104444a:	44 89 96 08 01 00 00 	mov	dword ptr [rsi + 264], r10d
 1044451:	41 83 f9 01 	cmp	r9d, 1
 1044455:	0f 85 16 fd ff ff 	jne	-746 <_runtime.modtimer+0x41>
 104445b:	80 bb b1 00 00 00 00 	cmp	byte ptr [rbx + 177], 0
 1044462:	0f 84 09 fd ff ff 	je	-759 <_runtime.modtimer+0x41>
 1044468:	48 c7 43 10 de fa ff ff 	mov	qword ptr [rbx + 16], -1314
 1044470:	e9 fc fc ff ff 	jmp	-772 <_runtime.modtimer+0x41>
 1044475:	31 c0 	xor	eax, eax
 1044477:	e9 7f fd ff ff 	jmp	-641 <_runtime.modtimer+0xcb>
 104447c:	83 fb 02 	cmp	ebx, 2
 104447f:	0f 84 8c 00 00 00 	je	140 <_runtime.modtimer+0x3e1>
 1044485:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 104448e:	4c 8b 46 30 	mov	r8, qword ptr [rsi + 48]
 1044492:	90 	nop
 1044493:	41 ff 80 08 01 00 00 	inc	dword ptr [r8 + 264]
 104449a:	48 8b 76 30 	mov	rsi, qword ptr [rsi + 48]
 104449e:	89 d8 	mov	eax, ebx
 10444a0:	41 b8 06 00 00 00 	mov	r8d, 6
 10444a6:	f0 	lock
 10444a7:	44 0f b1 42 40 	cmpxchg	dword ptr [rdx + 64], r8d
 10444ac:	41 0f 94 c1 	sete	r9b
 10444b0:	45 84 c9 	test	r9b, r9b
 10444b3:	75 40 	jne	64 <_runtime.modtimer+0x3c5>
 10444b5:	90 	nop
 10444b6:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 10444bf:	44 8b 8e 08 01 00 00 	mov	r9d, dword ptr [rsi + 264]
 10444c6:	45 8d 51 ff 	lea	r10d, [r9 - 1]
 10444ca:	44 89 96 08 01 00 00 	mov	dword ptr [rsi + 264], r10d
 10444d1:	41 83 f9 01 	cmp	r9d, 1
 10444d5:	0f 85 96 fc ff ff 	jne	-874 <_runtime.modtimer+0x41>
 10444db:	80 bb b1 00 00 00 00 	cmp	byte ptr [rbx + 177], 0
 10444e2:	0f 84 89 fc ff ff 	je	-887 <_runtime.modtimer+0x41>
 10444e8:	48 c7 43 10 de fa ff ff 	mov	qword ptr [rbx + 16], -1314
 10444f0:	e9 7c fc ff ff 	jmp	-900 <_runtime.modtimer+0x41>
 10444f5:	4c 8b 0a 	mov	r9, qword ptr [rdx]
 10444f8:	41 84 01 	test	byte ptr [r9], al
 10444fb:	41 ba ff ff ff ff 	mov	r10d, 4294967295
 1044501:	f0 	lock
 1044502:	45 0f c1 91 90 27 00 00 	xadd	dword ptr [r9 + 10128], r10d
 104450a:	31 c0 	xor	eax, eax
 104450c:	e9 ea fc ff ff 	jmp	-790 <_runtime.modtimer+0xcb>
 1044511:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1044518:	e8 c3 ec ff ff 	call	-4925 <_runtime.usleep>
 104451d:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1044522:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1044527:	41 b8 06 00 00 00 	mov	r8d, 6
 104452d:	e9 3f fc ff ff 	jmp	-961 <_runtime.modtimer+0x41>
 1044532:	83 fb 05 	cmp	ebx, 5
 1044535:	77 0b 	ja	11 <_runtime.modtimer+0x412>
 1044537:	83 fb 04 	cmp	ebx, 4
 104453a:	0f 85 4e fc ff ff 	jne	-946 <_runtime.modtimer+0x5e>
 1044540:	eb cf 	jmp	-49 <_runtime.modtimer+0x3e1>
 1044542:	83 fb 06 	cmp	ebx, 6
 1044545:	74 2b 	je	43 <_runtime.modtimer+0x442>
 1044547:	8d 73 f9 	lea	esi, [rbx - 7]
 104454a:	83 fe 01 	cmp	esi, 1
 104454d:	0f 86 b2 fe ff ff 	jbe	-334 <_runtime.modtimer+0x2d5>
 1044553:	83 fb 09 	cmp	ebx, 9
 1044556:	74 b9 	je	-71 <_runtime.modtimer+0x3e1>
 1044558:	e8 33 13 00 00 	call	4915 <_runtime.badTimer>
 104455d:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1044562:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1044567:	41 b8 06 00 00 00 	mov	r8d, 6
 104456d:	e9 ff fb ff ff 	jmp	-1025 <_runtime.modtimer+0x41>
 1044572:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1044579:	e8 62 ec ff ff 	call	-5022 <_runtime.usleep>
 104457e:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1044583:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1044588:	41 b8 06 00 00 00 	mov	r8d, 6
 104458e:	e9 de fb ff ff 	jmp	-1058 <_runtime.modtimer+0x41>
 1044593:	e8 38 c6 00 00 	call	50744 <_runtime.morestack_noctxt>
 1044598:	e9 93 fb ff ff 	jmp	-1133 <_runtime.modtimer>
 104459d:	cc 	int3
 104459e:	cc 	int3
 104459f:	cc 	int3

_runtime.moveTimers:
 10445a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10445a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10445ad:	0f 86 b2 01 00 00 	jbe	434 <_runtime.moveTimers+0x1c5>
 10445b3:	48 83 ec 28 	sub	rsp, 40
 10445b7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10445bc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10445c1:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10445c6:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10445cb:	31 c0 	xor	eax, eax
 10445cd:	eb 3e 	jmp	62 <_runtime.moveTimers+0x6d>
 10445cf:	48 89 f8 	mov	rax, rdi
 10445d2:	8b 73 40 	mov	esi, dword ptr [rbx + 64]
 10445d5:	83 fe 03 	cmp	esi, 3
 10445d8:	0f 87 a5 00 00 00 	ja	165 <_runtime.moveTimers+0xe3>
 10445de:	83 fe 01 	cmp	esi, 1
 10445e1:	76 64 	jbe	100 <_runtime.moveTimers+0xa7>
 10445e3:	83 fe 02 	cmp	esi, 2
 10445e6:	74 3e 	je	62 <_runtime.moveTimers+0x86>
 10445e8:	48 89 c7 	mov	rdi, rax
 10445eb:	89 f0 	mov	eax, esi
 10445ed:	41 b8 05 00 00 00 	mov	r8d, 5
 10445f3:	f0 	lock
 10445f4:	44 0f b1 43 40 	cmpxchg	dword ptr [rbx + 64], r8d
 10445f9:	40 0f 94 c6 	sete	sil
 10445fd:	40 84 f6 	test	sil, sil
 1044600:	74 cd 	je	-51 <_runtime.moveTimers+0x2f>
 1044602:	48 c7 03 00 00 00 00 	mov	qword ptr [rbx], 0
 1044609:	48 8d 47 01 	lea	rax, [rdi + 1]
 104460d:	48 39 c8 	cmp	rax, rcx
 1044610:	0f 8d 45 01 00 00 	jge	325 <_runtime.moveTimers+0x1bb>
 1044616:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104461b:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 104461f:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1044624:	eb ac 	jmp	-84 <_runtime.moveTimers+0x32>
 1044626:	e8 65 12 00 00 	call	4709 <_runtime.badTimer>
 104462b:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1044630:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1044635:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 104463a:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 104463f:	41 b8 05 00 00 00 	mov	r8d, 5
 1044645:	eb 88 	jmp	-120 <_runtime.moveTimers+0x2f>
 1044647:	85 f6 	test	esi, esi
 1044649:	75 07 	jne	7 <_runtime.moveTimers+0xb2>
 104464b:	e8 40 12 00 00 	call	4672 <_runtime.badTimer>
 1044650:	eb d9 	jmp	-39 <_runtime.moveTimers+0x8b>
 1044652:	48 c7 03 00 00 00 00 	mov	qword ptr [rbx], 0
 1044659:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104465e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044662:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1044667:	e8 84 f2 ff ff 	call	-3452 <_runtime.doaddtimer>
 104466c:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1044671:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1044676:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 104467b:	41 b8 05 00 00 00 	mov	r8d, 5
 1044681:	eb 86 	jmp	-122 <_runtime.moveTimers+0x69>
 1044683:	83 fe 05 	cmp	esi, 5
 1044686:	0f 86 c1 00 00 00 	jbe	193 <_runtime.moveTimers+0x1ad>
 104468c:	83 fe 06 	cmp	esi, 6
 104468f:	0f 84 a7 00 00 00 	je	167 <_runtime.moveTimers+0x19c>
 1044695:	8d 7e f9 	lea	edi, [rsi - 7]
 1044698:	83 ff 01 	cmp	edi, 1
 104469b:	0f 87 88 00 00 00 	ja	136 <_runtime.moveTimers+0x189>
 10446a1:	48 89 c7 	mov	rdi, rax
 10446a4:	89 f0 	mov	eax, esi
 10446a6:	41 b8 09 00 00 00 	mov	r8d, 9
 10446ac:	f0 	lock
 10446ad:	44 0f b1 43 40 	cmpxchg	dword ptr [rbx + 64], r8d
 10446b2:	40 0f 94 c6 	sete	sil
 10446b6:	40 84 f6 	test	sil, sil
 10446b9:	75 0b 	jne	11 <_runtime.moveTimers+0x126>
 10446bb:	41 b8 05 00 00 00 	mov	r8d, 5
 10446c1:	e9 09 ff ff ff 	jmp	-247 <_runtime.moveTimers+0x2f>
 10446c6:	48 8b 43 38 	mov	rax, qword ptr [rbx + 56]
 10446ca:	48 89 43 08 	mov	qword ptr [rbx + 8], rax
 10446ce:	48 c7 03 00 00 00 00 	mov	qword ptr [rbx], 0
 10446d5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10446da:	48 89 04 24 	mov	qword ptr [rsp], rax
 10446de:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10446e3:	e8 08 f2 ff ff 	call	-3576 <_runtime.doaddtimer>
 10446e8:	b8 09 00 00 00 	mov	eax, 9
 10446ed:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10446f2:	ba 01 00 00 00 	mov	edx, 1
 10446f7:	f0 	lock
 10446f8:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 10446fc:	0f 94 c0 	sete	al
 10446ff:	84 c0 	test	al, al
 1044701:	74 1a 	je	26 <_runtime.moveTimers+0x17d>
 1044703:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1044708:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104470d:	48 8b 7c 24 10 	mov	rdi, qword ptr [rsp + 16]
 1044712:	41 b8 05 00 00 00 	mov	r8d, 5
 1044718:	e9 ec fe ff ff 	jmp	-276 <_runtime.moveTimers+0x69>
 104471d:	e8 6e 11 00 00 	call	4462 <_runtime.badTimer>
 1044722:	ba 01 00 00 00 	mov	edx, 1
 1044727:	eb da 	jmp	-38 <_runtime.moveTimers+0x163>
 1044729:	83 fe 09 	cmp	esi, 9
 104472c:	0f 84 f4 fe ff ff 	je	-268 <_runtime.moveTimers+0x86>
 1044732:	e8 59 11 00 00 	call	4441 <_runtime.badTimer>
 1044737:	e9 ef fe ff ff 	jmp	-273 <_runtime.moveTimers+0x8b>
 104473c:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1044743:	e8 98 ea ff ff 	call	-5480 <_runtime.usleep>
 1044748:	e9 de fe ff ff 	jmp	-290 <_runtime.moveTimers+0x8b>
 104474d:	83 fe 04 	cmp	esi, 4
 1044750:	0f 84 d0 fe ff ff 	je	-304 <_runtime.moveTimers+0x86>
 1044756:	e9 f0 fe ff ff 	jmp	-272 <_runtime.moveTimers+0xab>
 104475b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1044760:	48 83 c4 28 	add	rsp, 40
 1044764:	c3 	ret
 1044765:	e8 66 c4 00 00 	call	50278 <_runtime.morestack_noctxt>
 104476a:	e9 31 fe ff ff 	jmp	-463 <_runtime.moveTimers>
 104476f:	cc 	int3

_runtime.adjusttimers:
 1044770:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1044779:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104477d:	0f 86 63 03 00 00 	jbe	867 <_runtime.adjusttimers+0x376>
 1044783:	48 83 ec 78 	sub	rsp, 120
 1044787:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 104478c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 1044791:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1044799:	84 02 	test	byte ptr [rdx], al
 104479b:	48 83 ba 78 27 00 00 00 	cmp	qword ptr [rdx + 10104], 0
 10447a3:	0f 84 11 03 00 00 	je	785 <_runtime.adjusttimers+0x34a>
 10447a9:	8b 9a 8c 27 00 00 	mov	ebx, dword ptr [rdx + 10124]
 10447af:	85 db 	test	ebx, ebx
 10447b1:	0f 84 f9 02 00 00 	je	761 <_runtime.adjusttimers+0x340>
 10447b7:	31 c0 	xor	eax, eax
 10447b9:	31 c9 	xor	ecx, ecx
 10447bb:	31 db 	xor	ebx, ebx
 10447bd:	31 f6 	xor	esi, esi
 10447bf:	eb 03 	jmp	3 <_runtime.adjusttimers+0x54>
 10447c1:	48 ff c0 	inc	rax
 10447c4:	48 8b ba 78 27 00 00 	mov	rdi, qword ptr [rdx + 10104]
 10447cb:	4c 8b 82 70 27 00 00 	mov	r8, qword ptr [rdx + 10096]
 10447d2:	48 39 f8 	cmp	rax, rdi
 10447d5:	0f 8d c7 02 00 00 	jge	711 <_runtime.adjusttimers+0x332>
 10447db:	0f 83 fc 02 00 00 	jae	764 <_runtime.adjusttimers+0x36d>
 10447e1:	49 8b 3c c0 	mov	rdi, qword ptr [r8 + 8*rax]
 10447e5:	4c 8b 07 	mov	r8, qword ptr [rdi]
 10447e8:	49 39 d0 	cmp	r8, rdx
 10447eb:	0f 85 d3 02 00 00 	jne	723 <_runtime.adjusttimers+0x354>
 10447f1:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 10447f6:	48 89 7c 24 60 	mov	qword ptr [rsp + 96], rdi
 10447fb:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1044800:	48 89 5c 24 68 	mov	qword ptr [rsp + 104], rbx
 1044805:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 104480a:	44 8b 47 40 	mov	r8d, dword ptr [rdi + 64]
 104480e:	41 83 f8 03 	cmp	r8d, 3
 1044812:	0f 87 c8 00 00 00 	ja	200 <_runtime.adjusttimers+0x170>
 1044818:	41 83 f8 01 	cmp	r8d, 1
 104481c:	77 2b 	ja	43 <_runtime.adjusttimers+0xd9>
 104481e:	45 85 c0 	test	r8d, r8d
 1044821:	75 9e 	jne	-98 <_runtime.adjusttimers+0x51>
 1044823:	e8 68 10 00 00 	call	4200 <_runtime.badTimer>
 1044828:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1044830:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1044835:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 104483a:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104483f:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1044844:	e9 78 ff ff ff 	jmp	-136 <_runtime.adjusttimers+0x51>
 1044849:	41 83 f8 02 	cmp	r8d, 2
 104484d:	74 d4 	je	-44 <_runtime.adjusttimers+0xb3>
 104484f:	49 89 c1 	mov	r9, rax
 1044852:	44 89 c0 	mov	eax, r8d
 1044855:	41 ba 04 00 00 00 	mov	r10d, 4
 104485b:	f0 	lock
 104485c:	44 0f b1 57 40 	cmpxchg	dword ptr [rdi + 64], r10d
 1044861:	41 0f 94 c0 	sete	r8b
 1044865:	45 84 c0 	test	r8b, r8b
 1044868:	75 08 	jne	8 <_runtime.adjusttimers+0x102>
 104486a:	4c 89 c8 	mov	rax, r9
 104486d:	e9 4f ff ff ff 	jmp	-177 <_runtime.adjusttimers+0x51>
 1044872:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1044876:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 104487b:	e8 f0 f4 ff ff 	call	-2832 <_runtime.dodeltimer>
 1044880:	b8 04 00 00 00 	mov	eax, 4
 1044885:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 104488a:	ba 05 00 00 00 	mov	edx, 5
 104488f:	f0 	lock
 1044890:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 1044894:	0f 94 c0 	sete	al
 1044897:	84 c0 	test	al, al
 1044899:	74 39 	je	57 <_runtime.adjusttimers+0x164>
 104489b:	bf ff ff ff ff 	mov	edi, 4294967295
 10448a0:	4c 8b 84 24 80 00 00 00 	mov	r8, qword ptr [rsp + 128]
 10448a8:	f0 	lock
 10448a9:	41 0f c1 b8 90 27 00 00 	xadd	dword ptr [r8 + 10128], edi
 10448b1:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 10448b6:	4c 8d 4f ff 	lea	r9, [rdi - 1]
 10448ba:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10448bf:	4c 89 c2 	mov	rdx, r8
 10448c2:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 10448c7:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 10448cc:	41 ba 04 00 00 00 	mov	r10d, 4
 10448d2:	eb 96 	jmp	-106 <_runtime.adjusttimers+0xfa>
 10448d4:	e8 b7 0f 00 00 	call	4023 <_runtime.badTimer>
 10448d9:	ba 05 00 00 00 	mov	edx, 5
 10448de:	eb bb 	jmp	-69 <_runtime.adjusttimers+0x12b>
 10448e0:	41 83 f8 06 	cmp	r8d, 6
 10448e4:	0f 86 74 01 00 00 	jbe	372 <_runtime.adjusttimers+0x2ee>
 10448ea:	45 8d 48 f9 	lea	r9d, [r8 - 7]
 10448ee:	41 83 f9 01 	cmp	r9d, 1
 10448f2:	0f 87 36 01 00 00 	ja	310 <_runtime.adjusttimers+0x2be>
 10448f8:	49 89 c1 	mov	r9, rax
 10448fb:	44 89 c0 	mov	eax, r8d
 10448fe:	41 ba 09 00 00 00 	mov	r10d, 9
 1044904:	f0 	lock
 1044905:	44 0f b1 57 40 	cmpxchg	dword ptr [rdi + 64], r10d
 104490a:	41 0f 94 c3 	sete	r11b
 104490e:	45 84 db 	test	r11b, r11b
 1044911:	75 08 	jne	8 <_runtime.adjusttimers+0x1ab>
 1044913:	4c 89 c8 	mov	rax, r9
 1044916:	e9 a6 fe ff ff 	jmp	-346 <_runtime.adjusttimers+0x51>
 104491b:	44 89 44 24 44 	mov	dword ptr [rsp + 68], r8d
 1044920:	48 8b 47 38 	mov	rax, qword ptr [rdi + 56]
 1044924:	48 89 47 08 	mov	qword ptr [rdi + 8], rax
 1044928:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104492c:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 1044931:	e8 3a f4 ff ff 	call	-3014 <_runtime.dodeltimer>
 1044936:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104493b:	48 8d 48 01 	lea	rcx, [rax + 1]
 104493f:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1044944:	48 39 d1 	cmp	rcx, rdx
 1044947:	0f 87 9b 00 00 00 	ja	155 <_runtime.adjusttimers+0x278>
 104494d:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1044952:	48 8d 3c c3 	lea	rdi, [rbx + 8*rax]
 1044956:	83 3d a3 2f 0b 00 00 	cmp	dword ptr [rip + 733091], 0
 104495d:	75 7d 	jne	125 <_runtime.adjusttimers+0x26c>
 104495f:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 1044964:	48 89 34 c3 	mov	qword ptr [rbx + 8*rax], rsi
 1044968:	8b 74 24 44 	mov	esi, dword ptr [rsp + 68]
 104496c:	83 fe 07 	cmp	esi, 7
 104496f:	75 61 	jne	97 <_runtime.adjusttimers+0x262>
 1044971:	be ff ff ff ff 	mov	esi, 4294967295
 1044976:	48 8b bc 24 80 00 00 00 	mov	rdi, qword ptr [rsp + 128]
 104497e:	f0 	lock
 104497f:	0f c1 b7 8c 27 00 00 	xadd	dword ptr [rdi + 10124], esi
 1044986:	ff ce 	dec	esi
 1044988:	85 f6 	test	esi, esi
 104498a:	7e 1d 	jle	29 <_runtime.adjusttimers+0x239>
 104498c:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 1044991:	4d 8d 48 ff 	lea	r9, [r8 - 1]
 1044995:	41 ba 09 00 00 00 	mov	r10d, 9
 104499b:	48 89 ce 	mov	rsi, rcx
 104499e:	48 89 d1 	mov	rcx, rdx
 10449a1:	48 89 fa 	mov	rdx, rdi
 10449a4:	e9 6a ff ff ff 	jmp	-150 <_runtime.adjusttimers+0x1a3>
 10449a9:	48 85 c9 	test	rcx, rcx
 10449ac:	7f 0a 	jg	10 <_runtime.adjusttimers+0x248>
 10449ae:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 10449b3:	48 83 c4 78 	add	rsp, 120
 10449b7:	c3 	ret
 10449b8:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 10449bc:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10449c1:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10449c6:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10449cb:	e8 20 01 00 00 	call	288 <_runtime.addAdjustedTimers>
 10449d0:	eb dc 	jmp	-36 <_runtime.adjusttimers+0x23e>
 10449d2:	48 8b bc 24 80 00 00 00 	mov	rdi, qword ptr [rsp + 128]
 10449da:	eb b0 	jmp	-80 <_runtime.adjusttimers+0x21c>
 10449dc:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 10449e1:	e8 fa df 00 00 	call	57338 <_runtime.gcWriteBarrier>
 10449e6:	eb 80 	jmp	-128 <_runtime.adjusttimers+0x1f8>
 10449e8:	48 8d 1d 51 94 01 00 	lea	rbx, [rip + 103505]
 10449ef:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10449f3:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 10449f8:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 10449fd:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1044a02:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1044a07:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1044a0c:	e8 0f 82 ff ff 	call	-32241 <_runtime.growslice>
 1044a11:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1044a16:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1044a1b:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1044a20:	48 8d 48 01 	lea	rcx, [rax + 1]
 1044a24:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1044a29:	e9 24 ff ff ff 	jmp	-220 <_runtime.adjusttimers+0x1e2>
 1044a2e:	41 83 f8 09 	cmp	r8d, 9
 1044a32:	0f 84 eb fd ff ff 	je	-533 <_runtime.adjusttimers+0xb3>
 1044a38:	e8 53 0e 00 00 	call	3667 <_runtime.badTimer>
 1044a3d:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1044a45:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1044a4a:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1044a4f:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1044a54:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1044a59:	e9 63 fd ff ff 	jmp	-669 <_runtime.adjusttimers+0x51>
 1044a5e:	41 8d 78 fc 	lea	edi, [r8 - 4]
 1044a62:	83 ff 01 	cmp	edi, 1
 1044a65:	0f 86 b8 fd ff ff 	jbe	-584 <_runtime.adjusttimers+0xb3>
 1044a6b:	41 83 f8 06 	cmp	r8d, 6
 1044a6f:	75 c7 	jne	-57 <_runtime.adjusttimers+0x2c8>
 1044a71:	90 	nop
 1044a72:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1044a79:	e8 62 e7 ff ff 	call	-6302 <_runtime.usleep>
 1044a7e:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1044a83:	48 ff c8 	dec	rax
 1044a86:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1044a8e:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1044a93:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1044a98:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1044a9d:	e9 1f fd ff ff 	jmp	-737 <_runtime.adjusttimers+0x51>
 1044aa2:	48 89 d7 	mov	rdi, rdx
 1044aa5:	48 89 ca 	mov	rdx, rcx
 1044aa8:	48 89 f1 	mov	rcx, rsi
 1044aab:	e9 f9 fe ff ff 	jmp	-263 <_runtime.adjusttimers+0x239>
 1044ab0:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1044ab5:	48 83 c4 78 	add	rsp, 120
 1044ab9:	c3 	ret
 1044aba:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1044abf:	48 83 c4 78 	add	rsp, 120
 1044ac3:	c3 	ret
 1044ac4:	48 8d 05 9b f4 02 00 	lea	rax, [rip + 193691]
 1044acb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044acf:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 1044ad8:	e8 83 42 fe ff 	call	-114045 <_runtime.throw>
 1044add:	48 89 f9 	mov	rcx, rdi
 1044ae0:	e8 6b e8 00 00 	call	59499 <_runtime.panicIndex>
 1044ae5:	90 	nop
 1044ae6:	e8 e5 c0 00 00 	call	49381 <_runtime.morestack_noctxt>
 1044aeb:	e9 80 fc ff ff 	jmp	-896 <_runtime.adjusttimers>

_runtime.addAdjustedTimers:
 1044af0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1044af9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1044afd:	76 7c 	jbe	124 <_runtime.addAdjustedTimers+0x8b>
 1044aff:	48 83 ec 28 	sub	rsp, 40
 1044b03:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1044b08:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1044b0d:	31 c0 	xor	eax, eax
 1044b0f:	eb 09 	jmp	9 <_runtime.addAdjustedTimers+0x2a>
 1044b11:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1044b16:	48 8d 41 01 	lea	rax, [rcx + 1]
 1044b1a:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1044b1f:	48 39 c8 	cmp	rax, rcx
 1044b22:	7d 4d 	jge	77 <_runtime.addAdjustedTimers+0x81>
 1044b24:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1044b29:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1044b2e:	48 8b 14 c1 	mov	rdx, qword ptr [rcx + 8*rax]
 1044b32:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1044b37:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1044b3c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1044b40:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1044b45:	e8 a6 ed ff ff 	call	-4698 <_runtime.doaddtimer>
 1044b4a:	b8 09 00 00 00 	mov	eax, 9
 1044b4f:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1044b54:	ba 01 00 00 00 	mov	edx, 1
 1044b59:	f0 	lock
 1044b5a:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 1044b5e:	0f 94 c0 	sete	al
 1044b61:	84 c0 	test	al, al
 1044b63:	75 ac 	jne	-84 <_runtime.addAdjustedTimers+0x21>
 1044b65:	e8 26 0d 00 00 	call	3366 <_runtime.badTimer>
 1044b6a:	ba 01 00 00 00 	mov	edx, 1
 1044b6f:	eb a0 	jmp	-96 <_runtime.addAdjustedTimers+0x21>
 1044b71:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1044b76:	48 83 c4 28 	add	rsp, 40
 1044b7a:	c3 	ret
 1044b7b:	e8 50 c0 00 00 	call	49232 <_runtime.morestack_noctxt>
 1044b80:	e9 6b ff ff ff 	jmp	-149 <_runtime.addAdjustedTimers>
 1044b85:	cc 	int3
 1044b86:	cc 	int3
 1044b87:	cc 	int3
 1044b88:	cc 	int3
 1044b89:	cc 	int3
 1044b8a:	cc 	int3
 1044b8b:	cc 	int3
 1044b8c:	cc 	int3
 1044b8d:	cc 	int3
 1044b8e:	cc 	int3
 1044b8f:	cc 	int3

_runtime.runtimer:
 1044b90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1044b99:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 1044b9d:	0f 86 74 02 00 00 	jbe	628 <_runtime.runtimer+0x287>
 1044ba3:	48 83 ec 30 	sub	rsp, 48
 1044ba7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1044bac:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1044bb1:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1044bb6:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1044bbb:	84 03 	test	byte ptr [rbx], al
 1044bbd:	48 8b b3 70 27 00 00 	mov	rsi, qword ptr [rbx + 10096]
 1044bc4:	48 8b 8b 78 27 00 00 	mov	rcx, qword ptr [rbx + 10104]
 1044bcb:	48 85 c9 	test	rcx, rcx
 1044bce:	0f 86 3b 02 00 00 	jbe	571 <_runtime.runtimer+0x27f>
 1044bd4:	48 8b 36 	mov	rsi, qword ptr [rsi]
 1044bd7:	48 8b 3e 	mov	rdi, qword ptr [rsi]
 1044bda:	48 39 df 	cmp	rdi, rbx
 1044bdd:	0f 85 13 02 00 00 	jne	531 <_runtime.runtimer+0x266>
 1044be3:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 1044be8:	8b 7e 40 	mov	edi, dword ptr [rsi + 64]
 1044beb:	83 ff 03 	cmp	edi, 3
 1044bee:	0f 87 0c 01 00 00 	ja	268 <_runtime.runtimer+0x170>
 1044bf4:	83 ff 01 	cmp	edi, 1
 1044bf7:	77 73 	ja	115 <_runtime.runtimer+0xdc>
 1044bf9:	85 ff 	test	edi, edi
 1044bfb:	74 55 	je	85 <_runtime.runtimer+0xc2>
 1044bfd:	4c 8b 46 08 	mov	r8, qword ptr [rsi + 8]
 1044c01:	49 39 d0 	cmp	r8, rdx
 1044c04:	7f 3d 	jg	61 <_runtime.runtimer+0xb3>
 1044c06:	89 f8 	mov	eax, edi
 1044c08:	41 b8 02 00 00 00 	mov	r8d, 2
 1044c0e:	f0 	lock
 1044c0f:	44 0f b1 46 40 	cmpxchg	dword ptr [rsi + 64], r8d
 1044c14:	40 0f 94 c7 	sete	dil
 1044c18:	40 84 ff 	test	dil, dil
 1044c1b:	74 9e 	je	-98 <_runtime.runtimer+0x2b>
 1044c1d:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1044c21:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1044c26:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1044c2b:	e8 00 02 00 00 	call	512 <_runtime.runOneTimer>
 1044c30:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 1044c39:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1044c3e:	48 83 c4 30 	add	rsp, 48
 1044c42:	c3 	ret
 1044c43:	4c 89 44 24 48 	mov	qword ptr [rsp + 72], r8
 1044c48:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1044c4d:	48 83 c4 30 	add	rsp, 48
 1044c51:	c3 	ret
 1044c52:	e8 39 0c 00 00 	call	3129 <_runtime.badTimer>
 1044c57:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 1044c5c:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1044c61:	41 b8 02 00 00 00 	mov	r8d, 2
 1044c67:	e9 4f ff ff ff 	jmp	-177 <_runtime.runtimer+0x2b>
 1044c6c:	83 ff 02 	cmp	edi, 2
 1044c6f:	0f 84 81 00 00 00 	je	129 <_runtime.runtimer+0x166>
 1044c75:	89 f8 	mov	eax, edi
 1044c77:	41 b8 04 00 00 00 	mov	r8d, 4
 1044c7d:	f0 	lock
 1044c7e:	44 0f b1 46 40 	cmpxchg	dword ptr [rsi + 64], r8d
 1044c83:	40 0f 94 c7 	sete	dil
 1044c87:	40 84 ff 	test	dil, dil
 1044c8a:	75 0b 	jne	11 <_runtime.runtimer+0x107>
 1044c8c:	41 b8 02 00 00 00 	mov	r8d, 2
 1044c92:	e9 24 ff ff ff 	jmp	-220 <_runtime.runtimer+0x2b>
 1044c97:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1044c9b:	e8 e0 f2 ff ff 	call	-3360 <_runtime.dodeltimer0>
 1044ca0:	b8 04 00 00 00 	mov	eax, 4
 1044ca5:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1044caa:	ba 05 00 00 00 	mov	edx, 5
 1044caf:	f0 	lock
 1044cb0:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 1044cb4:	0f 94 c0 	sete	al
 1044cb7:	84 c0 	test	al, al
 1044cb9:	74 2f 	je	47 <_runtime.runtimer+0x15a>
 1044cbb:	bb ff ff ff ff 	mov	ebx, 4294967295
 1044cc0:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 1044cc5:	f0 	lock
 1044cc6:	0f c1 9e 90 27 00 00 	xadd	dword ptr [rsi + 10128], ebx
 1044ccd:	48 83 be 78 27 00 00 00 	cmp	qword ptr [rsi + 10104], 0
 1044cd5:	75 80 	jne	-128 <_runtime.runtimer+0xc7>
 1044cd7:	48 c7 44 24 48 ff ff ff ff 	mov	qword ptr [rsp + 72], -1
 1044ce0:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1044ce5:	48 83 c4 30 	add	rsp, 48
 1044ce9:	c3 	ret
 1044cea:	e8 a1 0b 00 00 	call	2977 <_runtime.badTimer>
 1044cef:	ba 05 00 00 00 	mov	edx, 5
 1044cf4:	eb c5 	jmp	-59 <_runtime.runtimer+0x12b>
 1044cf6:	e8 95 0b 00 00 	call	2965 <_runtime.badTimer>
 1044cfb:	e9 57 ff ff ff 	jmp	-169 <_runtime.runtimer+0xc7>
 1044d00:	83 ff 05 	cmp	edi, 5
 1044d03:	0f 86 df 00 00 00 	jbe	223 <_runtime.runtimer+0x258>
 1044d09:	83 ff 06 	cmp	edi, 6
 1044d0c:	0f 84 c5 00 00 00 	je	197 <_runtime.runtimer+0x247>
 1044d12:	44 8d 47 f9 	lea	r8d, [rdi - 7]
 1044d16:	41 83 f8 01 	cmp	r8d, 1
 1044d1a:	0f 87 a4 00 00 00 	ja	164 <_runtime.runtimer+0x234>
 1044d20:	89 f8 	mov	eax, edi
 1044d22:	41 b8 09 00 00 00 	mov	r8d, 9
 1044d28:	f0 	lock
 1044d29:	44 0f b1 46 40 	cmpxchg	dword ptr [rsi + 64], r8d
 1044d2e:	41 0f 94 c1 	sete	r9b
 1044d32:	45 84 c9 	test	r9b, r9b
 1044d35:	75 0b 	jne	11 <_runtime.runtimer+0x1b2>
 1044d37:	41 b8 02 00 00 00 	mov	r8d, 2
 1044d3d:	e9 79 fe ff ff 	jmp	-391 <_runtime.runtimer+0x2b>
 1044d42:	89 7c 24 1c 	mov	dword ptr [rsp + 28], edi
 1044d46:	48 8b 46 38 	mov	rax, qword ptr [rsi + 56]
 1044d4a:	48 89 46 08 	mov	qword ptr [rsi + 8], rax
 1044d4e:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1044d52:	e8 29 f2 ff ff 	call	-3543 <_runtime.dodeltimer0>
 1044d57:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1044d5c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044d60:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1044d65:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1044d6a:	e8 81 eb ff ff 	call	-5247 <_runtime.doaddtimer>
 1044d6f:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 1044d73:	83 f8 07 	cmp	eax, 7
 1044d76:	75 45 	jne	69 <_runtime.runtimer+0x22d>
 1044d78:	ba ff ff ff ff 	mov	edx, 4294967295
 1044d7d:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1044d82:	f0 	lock
 1044d83:	0f c1 93 8c 27 00 00 	xadd	dword ptr [rbx + 10124], edx
 1044d8a:	b8 09 00 00 00 	mov	eax, 9
 1044d8f:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1044d94:	be 01 00 00 00 	mov	esi, 1
 1044d99:	f0 	lock
 1044d9a:	0f b1 72 40 	cmpxchg	dword ptr [rdx + 64], esi
 1044d9e:	0f 94 c2 	sete	dl
 1044da1:	84 d2 	test	dl, dl
 1044da3:	0f 85 ae fe ff ff 	jne	-338 <_runtime.runtimer+0xc7>
 1044da9:	e8 e2 0a 00 00 	call	2786 <_runtime.badTimer>
 1044dae:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1044db3:	be 01 00 00 00 	mov	esi, 1
 1044db8:	e9 9a fe ff ff 	jmp	-358 <_runtime.runtimer+0xc7>
 1044dbd:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1044dc2:	eb c6 	jmp	-58 <_runtime.runtimer+0x1fa>
 1044dc4:	83 ff 09 	cmp	edi, 9
 1044dc7:	0f 84 29 ff ff ff 	je	-215 <_runtime.runtimer+0x166>
 1044dcd:	e8 be 0a 00 00 	call	2750 <_runtime.badTimer>
 1044dd2:	e9 80 fe ff ff 	jmp	-384 <_runtime.runtimer+0xc7>
 1044dd7:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 1044dde:	e8 fd e3 ff ff 	call	-7171 <_runtime.usleep>
 1044de3:	e9 6f fe ff ff 	jmp	-401 <_runtime.runtimer+0xc7>
 1044de8:	83 ff 04 	cmp	edi, 4
 1044deb:	0f 84 05 ff ff ff 	je	-251 <_runtime.runtimer+0x166>
 1044df1:	e9 5c fe ff ff 	jmp	-420 <_runtime.runtimer+0xc2>
 1044df6:	48 8d 05 f9 eb 02 00 	lea	rax, [rip + 191481]
 1044dfd:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044e01:	48 c7 44 24 08 0f 00 00 00 	mov	qword ptr [rsp + 8], 15
 1044e0a:	e8 51 3f fe ff 	call	-114863 <_runtime.throw>
 1044e0f:	31 c0 	xor	eax, eax
 1044e11:	e8 3a e5 00 00 	call	58682 <_runtime.panicIndex>
 1044e16:	90 	nop
 1044e17:	e8 e4 b8 ff ff 	call	-18204 <_runtime.morestackc>
 1044e1c:	e9 6f fd ff ff 	jmp	-657 <_runtime.runtimer>
 1044e21:	cc 	int3
 1044e22:	cc 	int3
 1044e23:	cc 	int3
 1044e24:	cc 	int3
 1044e25:	cc 	int3
 1044e26:	cc 	int3
 1044e27:	cc 	int3
 1044e28:	cc 	int3
 1044e29:	cc 	int3
 1044e2a:	cc 	int3
 1044e2b:	cc 	int3
 1044e2c:	cc 	int3
 1044e2d:	cc 	int3
 1044e2e:	cc 	int3
 1044e2f:	cc 	int3

_runtime.runOneTimer:
 1044e30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1044e39:	48 3b 61 18 	cmp	rsp, qword ptr [rcx + 24]
 1044e3d:	0f 86 85 01 00 00 	jbe	389 <_runtime.runOneTimer+0x198>
 1044e43:	48 83 ec 50 	sub	rsp, 80
 1044e47:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 1044e4c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1044e51:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1044e56:	48 8b 51 18 	mov	rdx, qword ptr [rcx + 24]
 1044e5a:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 1044e5f:	48 8b 59 28 	mov	rbx, qword ptr [rcx + 40]
 1044e63:	48 89 5c 24 38 	mov	qword ptr [rsp + 56], rbx
 1044e68:	48 8b 71 20 	mov	rsi, qword ptr [rcx + 32]
 1044e6c:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 1044e71:	48 8b 79 30 	mov	rdi, qword ptr [rcx + 48]
 1044e75:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 1044e7a:	4c 8b 41 10 	mov	r8, qword ptr [rcx + 16]
 1044e7e:	4d 85 c0 	test	r8, r8
 1044e81:	0f 8e 0a 01 00 00 	jle	266 <_runtime.runOneTimer+0x161>
 1044e87:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 1044e8b:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1044e90:	48 29 d0 	sub	rax, rdx
 1044e93:	48 89 d3 	mov	rbx, rdx
 1044e96:	48 99 	cqo
 1044e98:	49 f7 f8 	idiv	r8
 1044e9b:	48 8d 50 01 	lea	rdx, [rax + 1]
 1044e9f:	4c 0f af c2 	imul	r8, rdx
 1044ea3:	49 8d 14 18 	lea	rdx, [r8 + rbx]
 1044ea7:	48 89 51 08 	mov	qword ptr [rcx + 8], rdx
 1044eab:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1044eb0:	84 02 	test	byte ptr [rdx], al
 1044eb2:	48 8b 9a 80 27 00 00 	mov	rbx, qword ptr [rdx + 10112]
 1044eb9:	48 8b b2 78 27 00 00 	mov	rsi, qword ptr [rdx + 10104]
 1044ec0:	48 8b ba 70 27 00 00 	mov	rdi, qword ptr [rdx + 10096]
 1044ec7:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1044ecb:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1044ed0:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1044ed5:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1044ede:	e8 dd 07 00 00 	call	2013 <_runtime.siftdownTimer>
 1044ee3:	b8 02 00 00 00 	mov	eax, 2
 1044ee8:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1044eed:	ba 01 00 00 00 	mov	edx, 1
 1044ef2:	f0 	lock
 1044ef3:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 1044ef7:	0f 94 c1 	sete	cl
 1044efa:	84 c9 	test	cl, cl
 1044efc:	0f 84 85 00 00 00 	je	133 <_runtime.runOneTimer+0x157>
 1044f02:	90 	nop
 1044f03:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1044f08:	48 8b 88 70 27 00 00 	mov	rcx, qword ptr [rax + 10096]
 1044f0f:	48 83 b8 78 27 00 00 00 	cmp	qword ptr [rax + 10104], 0
 1044f17:	75 5e 	jne	94 <_runtime.runOneTimer+0x147>
 1044f19:	31 c9 	xor	ecx, ecx
 1044f1b:	48 87 88 68 16 00 00 	xchg	qword ptr [rax + 5736], rcx
 1044f22:	84 00 	test	byte ptr [rax], al
 1044f24:	48 05 68 27 00 00 	add	rax, 10088
 1044f2a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1044f2f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044f33:	e8 d8 33 fc ff 	call	-248872 <_runtime.unlock>
 1044f38:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1044f3d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044f41:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1044f46:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1044f4b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1044f50:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1044f55:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1044f5a:	48 8b 02 	mov	rax, qword ptr [rdx]
 1044f5d:	ff d0 	call	rax
 1044f5f:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1044f64:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044f68:	e8 c3 31 fc ff 	call	-249405 <_runtime.lock>
 1044f6d:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1044f72:	48 83 c4 50 	add	rsp, 80
 1044f76:	c3 	ret
 1044f77:	48 8b 09 	mov	rcx, qword ptr [rcx]
 1044f7a:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 1044f7e:	48 87 88 68 16 00 00 	xchg	qword ptr [rax + 5736], rcx
 1044f85:	eb 9b 	jmp	-101 <_runtime.runOneTimer+0xf2>
 1044f87:	e8 04 09 00 00 	call	2308 <_runtime.badTimer>
 1044f8c:	e9 71 ff ff ff 	jmp	-143 <_runtime.runOneTimer+0xd2>
 1044f91:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1044f96:	48 89 04 24 	mov	qword ptr [rsp], rax
 1044f9a:	e8 e1 ef ff ff 	call	-4127 <_runtime.dodeltimer0>
 1044f9f:	b8 02 00 00 00 	mov	eax, 2
 1044fa4:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1044fa9:	31 d2 	xor	edx, edx
 1044fab:	f0 	lock
 1044fac:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 1044fb0:	0f 94 c0 	sete	al
 1044fb3:	84 c0 	test	al, al
 1044fb5:	74 0a 	je	10 <_runtime.runOneTimer+0x191>
 1044fb7:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1044fbc:	e9 61 ff ff ff 	jmp	-159 <_runtime.runOneTimer+0xf2>
 1044fc1:	e8 ca 08 00 00 	call	2250 <_runtime.badTimer>
 1044fc6:	eb ef 	jmp	-17 <_runtime.runOneTimer+0x187>
 1044fc8:	e8 33 b7 ff ff 	call	-18637 <_runtime.morestackc>
 1044fcd:	e9 5e fe ff ff 	jmp	-418 <_runtime.runOneTimer>
 1044fd2:	cc 	int3
 1044fd3:	cc 	int3
 1044fd4:	cc 	int3
 1044fd5:	cc 	int3
 1044fd6:	cc 	int3
 1044fd7:	cc 	int3
 1044fd8:	cc 	int3
 1044fd9:	cc 	int3
 1044fda:	cc 	int3
 1044fdb:	cc 	int3
 1044fdc:	cc 	int3
 1044fdd:	cc 	int3
 1044fde:	cc 	int3
 1044fdf:	cc 	int3

_runtime.clearDeletedTimers:
 1044fe0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1044fe9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1044fed:	0f 86 fb 03 00 00 	jbe	1019 <_runtime.clearDeletedTimers+0x40e>
 1044ff3:	48 83 ec 68 	sub	rsp, 104
 1044ff7:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 1044ffc:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1045001:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1045006:	84 03 	test	byte ptr [rbx], al
 1045008:	48 8b 93 80 27 00 00 	mov	rdx, qword ptr [rbx + 10112]
 104500f:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1045014:	48 8b 8b 78 27 00 00 	mov	rcx, qword ptr [rbx + 10104]
 104501b:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1045020:	48 8b 83 70 27 00 00 	mov	rax, qword ptr [rbx + 10096]
 1045027:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 104502c:	31 f6 	xor	esi, esi
 104502e:	31 ff 	xor	edi, edi
 1045030:	45 31 c0 	xor	r8d, r8d
 1045033:	45 31 c9 	xor	r9d, r9d
 1045036:	45 31 d2 	xor	r10d, r10d
 1045039:	eb 64 	jmp	100 <_runtime.clearDeletedTimers+0xbf>
 104503b:	4c 8b 64 24 58 	mov	r12, qword ptr [rsp + 88]
 1045040:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1045045:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104504a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104504f:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1045054:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1045059:	0f b6 7c 24 23 	movzx	edi, byte ptr [rsp + 35]
 104505e:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 1045063:	44 8b 4c 24 2c 	mov	r9d, dword ptr [rsp + 44]
 1045068:	44 8b 54 24 28 	mov	r10d, dword ptr [rsp + 40]
 104506d:	4d 89 e3 	mov	r11, r12
 1045070:	45 8b 63 40 	mov	r12d, dword ptr [r11 + 64]
 1045074:	41 83 fc 03 	cmp	r12d, 3
 1045078:	0f 87 62 01 00 00 	ja	354 <_runtime.clearDeletedTimers+0x200>
 104507e:	41 83 fc 01 	cmp	r12d, 1
 1045082:	0f 87 bb 00 00 00 	ja	187 <_runtime.clearDeletedTimers+0x163>
 1045088:	45 85 e4 	test	r12d, r12d
 104508b:	75 07 	jne	7 <_runtime.clearDeletedTimers+0xb4>
 104508d:	e8 fe 07 00 00 	call	2046 <_runtime.badTimer>
 1045092:	eb a7 	jmp	-89 <_runtime.clearDeletedTimers+0x5b>
 1045094:	40 84 ff 	test	dil, dil
 1045097:	75 33 	jne	51 <_runtime.clearDeletedTimers+0xec>
 1045099:	49 ff c0 	inc	r8
 104509c:	48 ff c6 	inc	rsi
 104509f:	48 39 ce 	cmp	rsi, rcx
 10450a2:	0f 8d 6e 02 00 00 	jge	622 <_runtime.clearDeletedTimers+0x336>
 10450a8:	48 89 74 24 48 	mov	qword ptr [rsp + 72], rsi
 10450ad:	44 89 54 24 28 	mov	dword ptr [rsp + 40], r10d
 10450b2:	44 89 4c 24 2c 	mov	dword ptr [rsp + 44], r9d
 10450b7:	4c 89 44 24 40 	mov	qword ptr [rsp + 64], r8
 10450bc:	40 88 7c 24 23 	mov	byte ptr [rsp + 35], dil
 10450c1:	4c 8b 1c f0 	mov	r11, qword ptr [rax + 8*rsi]
 10450c5:	4c 89 5c 24 58 	mov	qword ptr [rsp + 88], r11
 10450ca:	eb a4 	jmp	-92 <_runtime.clearDeletedTimers+0x90>
 10450cc:	49 39 c8 	cmp	r8, rcx
 10450cf:	0f 83 10 03 00 00 	jae	784 <_runtime.clearDeletedTimers+0x405>
 10450d5:	4e 8d 24 c0 	lea	r12, [rax + 8*r8]
 10450d9:	83 3d 20 28 0b 00 00 	cmp	dword ptr [rip + 731168], 0
 10450e0:	75 4e 	jne	78 <_runtime.clearDeletedTimers+0x150>
 10450e2:	4e 89 1c c0 	mov	qword ptr [rax + 8*r8], r11
 10450e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10450ea:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10450ef:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10450f4:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 10450f9:	e8 b2 04 00 00 	call	1202 <_runtime.siftupTimer>
 10450fe:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1045103:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1045108:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104510d:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1045112:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 1045117:	0f b6 7c 24 23 	movzx	edi, byte ptr [rsp + 35]
 104511c:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 1045121:	44 8b 4c 24 2c 	mov	r9d, dword ptr [rsp + 44]
 1045126:	44 8b 54 24 28 	mov	r10d, dword ptr [rsp + 40]
 104512b:	e9 69 ff ff ff 	jmp	-151 <_runtime.clearDeletedTimers+0xb9>
 1045130:	4c 89 e7 	mov	rdi, r12
 1045133:	49 89 c6 	mov	r14, rax
 1045136:	4c 89 d8 	mov	rax, r11
 1045139:	e8 a2 d8 00 00 	call	55458 <_runtime.gcWriteBarrier>
 104513e:	4c 89 f0 	mov	rax, r14
 1045141:	eb a3 	jmp	-93 <_runtime.clearDeletedTimers+0x106>
 1045143:	41 83 fc 02 	cmp	r12d, 2
 1045147:	0f 84 89 00 00 00 	je	137 <_runtime.clearDeletedTimers+0x1f6>
 104514d:	49 89 c5 	mov	r13, rax
 1045150:	44 89 e0 	mov	eax, r12d
 1045153:	41 be 04 00 00 00 	mov	r14d, 4
 1045159:	f0 	lock
 104515a:	45 0f b1 73 40 	cmpxchg	dword ptr [r11 + 64], r14d
 104515f:	41 0f 94 c4 	sete	r12b
 1045163:	45 84 e4 	test	r12b, r12b
 1045166:	0f 84 cf fe ff ff 	je	-305 <_runtime.clearDeletedTimers+0x5b>
 104516c:	49 c7 03 00 00 00 00 	mov	qword ptr [r11], 0
 1045173:	44 89 f0 	mov	eax, r14d
 1045176:	41 bc 05 00 00 00 	mov	r12d, 5
 104517c:	f0 	lock
 104517d:	45 0f b1 63 40 	cmpxchg	dword ptr [r11 + 64], r12d
 1045182:	41 0f 94 c3 	sete	r11b
 1045186:	45 84 db 	test	r11b, r11b
 1045189:	74 10 	je	16 <_runtime.clearDeletedTimers+0x1bb>
 104518b:	41 ff c1 	inc	r9d
 104518e:	4c 89 e8 	mov	rax, r13
 1045191:	bf 01 00 00 00 	mov	edi, 1
 1045196:	e9 01 ff ff ff 	jmp	-255 <_runtime.clearDeletedTimers+0xbc>
 104519b:	e8 f0 06 00 00 	call	1776 <_runtime.badTimer>
 10451a0:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10451a5:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10451aa:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 10451af:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 10451b4:	4c 8b 44 24 40 	mov	r8, qword ptr [rsp + 64]
 10451b9:	44 8b 4c 24 2c 	mov	r9d, dword ptr [rsp + 44]
 10451be:	44 8b 54 24 28 	mov	r10d, dword ptr [rsp + 40]
 10451c3:	41 bc 05 00 00 00 	mov	r12d, 5
 10451c9:	4c 8b 6c 24 50 	mov	r13, qword ptr [rsp + 80]
 10451ce:	41 be 04 00 00 00 	mov	r14d, 4
 10451d4:	eb b5 	jmp	-75 <_runtime.clearDeletedTimers+0x1ab>
 10451d6:	e8 b5 06 00 00 	call	1717 <_runtime.badTimer>
 10451db:	e9 5b fe ff ff 	jmp	-421 <_runtime.clearDeletedTimers+0x5b>
 10451e0:	41 83 fc 05 	cmp	r12d, 5
 10451e4:	0f 86 1d 01 00 00 	jbe	285 <_runtime.clearDeletedTimers+0x327>
 10451ea:	41 83 fc 06 	cmp	r12d, 6
 10451ee:	0f 84 02 01 00 00 	je	258 <_runtime.clearDeletedTimers+0x316>
 10451f4:	45 8d 6c 24 f9 	lea	r13d, [r12 - 7]
 10451f9:	41 83 fd 01 	cmp	r13d, 1
 10451fd:	0f 87 df 00 00 00 	ja	223 <_runtime.clearDeletedTimers+0x302>
 1045203:	49 89 c5 	mov	r13, rax
 1045206:	44 89 e0 	mov	eax, r12d
 1045209:	41 be 09 00 00 00 	mov	r14d, 9
 104520f:	f0 	lock
 1045210:	45 0f b1 73 40 	cmpxchg	dword ptr [r11 + 64], r14d
 1045215:	41 0f 94 c7 	sete	r15b
 1045219:	45 84 ff 	test	r15b, r15b
 104521c:	0f 84 19 fe ff ff 	je	-487 <_runtime.clearDeletedTimers+0x5b>
 1045222:	4d 8b 7b 38 	mov	r15, qword ptr [r11 + 56]
 1045226:	4d 89 7b 08 	mov	qword ptr [r11 + 8], r15
 104522a:	49 39 c8 	cmp	r8, rcx
 104522d:	0f 83 aa 01 00 00 	jae	426 <_runtime.clearDeletedTimers+0x3fd>
 1045233:	44 89 64 24 24 	mov	dword ptr [rsp + 36], r12d
 1045238:	4b 8d 7c c5 00 	lea	rdi, [r13 + 8*r8]
 104523d:	83 3d bc 26 0b 00 00 	cmp	dword ptr [rip + 730812], 0
 1045244:	0f 85 8b 00 00 00 	jne	139 <_runtime.clearDeletedTimers+0x2f5>
 104524a:	4f 89 5c c5 00 	mov	qword ptr [r13 + 8*r8], r11
 104524f:	4c 89 2c 24 	mov	qword ptr [rsp], r13
 1045253:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1045258:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104525d:	4c 89 44 24 18 	mov	qword ptr [rsp + 24], r8
 1045262:	e8 49 03 00 00 	call	841 <_runtime.siftupTimer>
 1045267:	b8 09 00 00 00 	mov	eax, 9
 104526c:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045271:	ba 01 00 00 00 	mov	edx, 1
 1045276:	f0 	lock
 1045277:	0f b1 51 40 	cmpxchg	dword ptr [rcx + 64], edx
 104527b:	0f 94 c0 	sete	al
 104527e:	84 c0 	test	al, al
 1045280:	74 47 	je	71 <_runtime.clearDeletedTimers+0x2e9>
 1045282:	44 8b 54 24 28 	mov	r10d, dword ptr [rsp + 40]
 1045287:	45 8d 5a 01 	lea	r11d, [r10 + 1]
 104528b:	44 8b 64 24 24 	mov	r12d, dword ptr [rsp + 36]
 1045290:	41 83 fc 07 	cmp	r12d, 7
 1045294:	45 0f 44 d3 	cmove	r10d, r11d
 1045298:	4c 8b 5c 24 40 	mov	r11, qword ptr [rsp + 64]
 104529d:	4d 8d 43 01 	lea	r8, [r11 + 1]
 10452a1:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10452a6:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10452ab:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 10452b0:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 10452b5:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 10452ba:	bf 01 00 00 00 	mov	edi, 1
 10452bf:	44 8b 4c 24 2c 	mov	r9d, dword ptr [rsp + 44]
 10452c4:	e9 d3 fd ff ff 	jmp	-557 <_runtime.clearDeletedTimers+0xbc>
 10452c9:	e8 c2 05 00 00 	call	1474 <_runtime.badTimer>
 10452ce:	ba 01 00 00 00 	mov	edx, 1
 10452d3:	eb ad 	jmp	-83 <_runtime.clearDeletedTimers+0x2a2>
 10452d5:	4c 89 d8 	mov	rax, r11
 10452d8:	e8 03 d7 00 00 	call	55043 <_runtime.gcWriteBarrier>
 10452dd:	e9 6d ff ff ff 	jmp	-147 <_runtime.clearDeletedTimers+0x26f>
 10452e2:	41 83 fc 09 	cmp	r12d, 9
 10452e6:	0f 84 ea fe ff ff 	je	-278 <_runtime.clearDeletedTimers+0x1f6>
 10452ec:	e8 9f 05 00 00 	call	1439 <_runtime.badTimer>
 10452f1:	e9 45 fd ff ff 	jmp	-699 <_runtime.clearDeletedTimers+0x5b>
 10452f6:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 10452fd:	e8 de de ff ff 	call	-8482 <_runtime.usleep>
 1045302:	e9 34 fd ff ff 	jmp	-716 <_runtime.clearDeletedTimers+0x5b>
 1045307:	41 83 fc 04 	cmp	r12d, 4
 104530b:	0f 84 c5 fe ff ff 	je	-315 <_runtime.clearDeletedTimers+0x1f6>
 1045311:	e9 77 fd ff ff 	jmp	-649 <_runtime.clearDeletedTimers+0xad>
 1045316:	4c 89 c6 	mov	rsi, r8
 1045319:	eb 03 	jmp	3 <_runtime.clearDeletedTimers+0x33e>
 104531b:	49 ff c0 	inc	r8
 104531e:	49 39 c8 	cmp	r8, rcx
 1045321:	7d 2c 	jge	44 <_runtime.clearDeletedTimers+0x36f>
 1045323:	0f 83 ac 00 00 00 	jae	172 <_runtime.clearDeletedTimers+0x3f5>
 1045329:	4a 8d 3c c0 	lea	rdi, [rax + 8*r8]
 104532d:	83 3d cc 25 0b 00 00 	cmp	dword ptr [rip + 730572], 0
 1045334:	75 0a 	jne	10 <_runtime.clearDeletedTimers+0x360>
 1045336:	4a c7 04 c0 00 00 00 00 	mov	qword ptr [rax + 8*r8], 0
 104533e:	eb db 	jmp	-37 <_runtime.clearDeletedTimers+0x33b>
 1045340:	49 89 c3 	mov	r11, rax
 1045343:	31 c0 	xor	eax, eax
 1045345:	e8 96 d6 00 00 	call	54934 <_runtime.gcWriteBarrier>
 104534a:	4c 89 d8 	mov	rax, r11
 104534d:	eb cc 	jmp	-52 <_runtime.clearDeletedTimers+0x33b>
 104534f:	41 f7 d9 	neg	r9d
 1045352:	45 89 c8 	mov	r8d, r9d
 1045355:	f0 	lock
 1045356:	44 0f c1 8b 90 27 00 00 	xadd	dword ptr [rbx + 10128], r9d
 104535e:	f0 	lock
 104535f:	44 0f c1 83 88 27 00 00 	xadd	dword ptr [rbx + 10120], r8d
 1045367:	41 f7 da 	neg	r10d
 104536a:	f0 	lock
 104536b:	44 0f c1 93 8c 27 00 00 	xadd	dword ptr [rbx + 10124], r10d
 1045373:	48 39 d6 	cmp	rsi, rdx
 1045376:	77 55 	ja	85 <_runtime.clearDeletedTimers+0x3ed>
 1045378:	48 89 b3 78 27 00 00 	mov	qword ptr [rbx + 10104], rsi
 104537f:	48 89 93 80 27 00 00 	mov	qword ptr [rbx + 10112], rdx
 1045386:	83 3d 73 25 0b 00 00 	cmp	dword ptr [rip + 730483], 0
 104538d:	75 30 	jne	48 <_runtime.clearDeletedTimers+0x3df>
 104538f:	48 89 83 70 27 00 00 	mov	qword ptr [rbx + 10096], rax
 1045396:	90 	nop
 1045397:	48 85 f6 	test	rsi, rsi
 104539a:	75 13 	jne	19 <_runtime.clearDeletedTimers+0x3cf>
 104539c:	31 c0 	xor	eax, eax
 104539e:	48 87 83 68 16 00 00 	xchg	qword ptr [rbx + 5736], rax
 10453a5:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 10453aa:	48 83 c4 68 	add	rsp, 104
 10453ae:	c3 	ret
 10453af:	48 8b 00 	mov	rax, qword ptr [rax]
 10453b2:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 10453b6:	48 87 83 68 16 00 00 	xchg	qword ptr [rbx + 5736], rax
 10453bd:	eb e6 	jmp	-26 <_runtime.clearDeletedTimers+0x3c5>
 10453bf:	48 8d bb 70 27 00 00 	lea	rdi, [rbx + 10096]
 10453c6:	e8 15 d6 00 00 	call	54805 <_runtime.gcWriteBarrier>
 10453cb:	eb c9 	jmp	-55 <_runtime.clearDeletedTimers+0x3b6>
 10453cd:	48 89 f1 	mov	rcx, rsi
 10453d0:	e8 bb df 00 00 	call	57275 <_runtime.panicSliceAcap>
 10453d5:	4c 89 c0 	mov	rax, r8
 10453d8:	e8 73 df 00 00 	call	57203 <_runtime.panicIndex>
 10453dd:	4c 89 c0 	mov	rax, r8
 10453e0:	e8 6b df 00 00 	call	57195 <_runtime.panicIndex>
 10453e5:	4c 89 c0 	mov	rax, r8
 10453e8:	e8 63 df 00 00 	call	57187 <_runtime.panicIndex>
 10453ed:	90 	nop
 10453ee:	e8 dd b7 00 00 	call	47069 <_runtime.morestack_noctxt>
 10453f3:	e9 e8 fb ff ff 	jmp	-1048 <_runtime.clearDeletedTimers>
 10453f8:	cc 	int3
 10453f9:	cc 	int3
 10453fa:	cc 	int3
 10453fb:	cc 	int3
 10453fc:	cc 	int3
 10453fd:	cc 	int3
 10453fe:	cc 	int3
 10453ff:	cc 	int3

_runtime.timeSleepUntil:
 1045400:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045409:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104540d:	0f 86 88 01 00 00 	jbe	392 <_runtime.timeSleepUntil+0x19b>
 1045413:	48 83 ec 50 	sub	rsp, 80
 1045417:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 104541c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1045421:	48 8d 05 c8 23 0b 00 	lea	rax, [rip + 730056]
 1045428:	48 89 04 24 	mov	qword ptr [rsp], rax
 104542c:	e8 ff 2c fc ff 	call	-250625 <_runtime.lock>
 1045431:	48 8b 05 08 8f 08 00 	mov	rax, qword ptr [rip + 560904]
 1045438:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104543d:	48 8b 0d 04 8f 08 00 	mov	rcx, qword ptr [rip + 560900]
 1045444:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1045449:	31 d2 	xor	edx, edx
 104544b:	48 bb ff ff ff ff ff ff ff 7f 	movabs	rbx, 9223372036854775807
 1045455:	31 f6 	xor	esi, esi
 1045457:	eb 09 	jmp	9 <_runtime.timeSleepUntil+0x62>
 1045459:	48 ff c2 	inc	rdx
 104545c:	4c 89 c3 	mov	rbx, r8
 104545f:	48 89 fe 	mov	rsi, rdi
 1045462:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1045467:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 104546c:	48 39 ca 	cmp	rdx, rcx
 104546f:	0f 8d f8 00 00 00 	jge	248 <_runtime.timeSleepUntil+0x16d>
 1045475:	48 8b 3c d0 	mov	rdi, qword ptr [rax + 8*rdx]
 1045479:	48 85 ff 	test	rdi, rdi
 104547c:	0f 84 e0 00 00 00 	je	224 <_runtime.timeSleepUntil+0x162>
 1045482:	44 8b 87 8c 27 00 00 	mov	r8d, dword ptr [rdi + 10124]
 1045489:	45 85 c0 	test	r8d, r8d
 104548c:	75 19 	jne	25 <_runtime.timeSleepUntil+0xa7>
 104548e:	4c 8b 87 68 16 00 00 	mov	r8, qword ptr [rdi + 5736]
 1045495:	4d 85 c0 	test	r8, r8
 1045498:	74 05 	je	5 <_runtime.timeSleepUntil+0x9f>
 104549a:	49 39 d8 	cmp	r8, rbx
 104549d:	7c ba 	jl	-70 <_runtime.timeSleepUntil+0x59>
 104549f:	49 89 d8 	mov	r8, rbx
 10454a2:	48 89 f7 	mov	rdi, rsi
 10454a5:	eb b2 	jmp	-78 <_runtime.timeSleepUntil+0x59>
 10454a7:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10454ac:	48 89 7c 24 30 	mov	qword ptr [rsp + 48], rdi
 10454b1:	44 89 44 24 0c 	mov	dword ptr [rsp + 12], r8d
 10454b6:	48 8d 87 68 27 00 00 	lea	rax, [rdi + 10088]
 10454bd:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10454c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10454c6:	e8 65 2c fc ff 	call	-250779 <_runtime.lock>
 10454cb:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10454d0:	48 8b 88 78 27 00 00 	mov	rcx, qword ptr [rax + 10104]
 10454d7:	48 8b 80 70 27 00 00 	mov	rax, qword ptr [rax + 10096]
 10454de:	8b 54 24 0c 	mov	edx, dword ptr [rsp + 12]
 10454e2:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10454e7:	31 f6 	xor	esi, esi
 10454e9:	eb 03 	jmp	3 <_runtime.timeSleepUntil+0xee>
 10454eb:	48 ff c6 	inc	rsi
 10454ee:	48 39 ce 	cmp	rsi, rcx
 10454f1:	7d 1d 	jge	29 <_runtime.timeSleepUntil+0x110>
 10454f3:	48 8b 3c f0 	mov	rdi, qword ptr [rax + 8*rsi]
 10454f7:	44 8b 47 40 	mov	r8d, dword ptr [rdi + 64]
 10454fb:	41 83 f8 01 	cmp	r8d, 1
 10454ff:	75 40 	jne	64 <_runtime.timeSleepUntil+0x141>
 1045501:	48 8b 7f 08 	mov	rdi, qword ptr [rdi + 8]
 1045505:	48 39 df 	cmp	rdi, rbx
 1045508:	48 0f 4c df 	cmovl	rbx, rdi
 104550c:	85 d2 	test	edx, edx
 104550e:	7f db 	jg	-37 <_runtime.timeSleepUntil+0xeb>
 1045510:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1045515:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104551a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104551e:	e8 ed 2d fc ff 	call	-250387 <_runtime.unlock>
 1045523:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1045528:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104552d:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1045532:	4c 8b 44 24 10 	mov	r8, qword ptr [rsp + 16]
 1045537:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 104553c:	e9 18 ff ff ff 	jmp	-232 <_runtime.timeSleepUntil+0x59>
 1045541:	45 8d 48 f9 	lea	r9d, [r8 - 7]
 1045545:	41 83 f9 01 	cmp	r9d, 1
 1045549:	77 c1 	ja	-63 <_runtime.timeSleepUntil+0x10c>
 104554b:	48 8b 7f 38 	mov	rdi, qword ptr [rdi + 56]
 104554f:	48 39 df 	cmp	rdi, rbx
 1045552:	48 0f 4c df 	cmovl	rbx, rdi
 1045556:	8d 7a ff 	lea	edi, [rdx - 1]
 1045559:	41 83 f8 07 	cmp	r8d, 7
 104555d:	0f 44 d7 	cmove	edx, edi
 1045560:	eb aa 	jmp	-86 <_runtime.timeSleepUntil+0x10c>
 1045562:	49 89 d8 	mov	r8, rbx
 1045565:	48 89 f7 	mov	rdi, rsi
 1045568:	e9 ec fe ff ff 	jmp	-276 <_runtime.timeSleepUntil+0x59>
 104556d:	48 8d 05 7c 22 0b 00 	lea	rax, [rip + 729724]
 1045574:	48 89 04 24 	mov	qword ptr [rsp], rax
 1045578:	e8 93 2d fc ff 	call	-250477 <_runtime.unlock>
 104557d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1045582:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1045587:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104558c:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1045591:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1045596:	48 83 c4 50 	add	rsp, 80
 104559a:	c3 	ret
 104559b:	e8 30 b6 00 00 	call	46640 <_runtime.morestack_noctxt>
 10455a0:	e9 5b fe ff ff 	jmp	-421 <_runtime.timeSleepUntil>
 10455a5:	cc 	int3
 10455a6:	cc 	int3
 10455a7:	cc 	int3
 10455a8:	cc 	int3
 10455a9:	cc 	int3
 10455aa:	cc 	int3
 10455ab:	cc 	int3
 10455ac:	cc 	int3
 10455ad:	cc 	int3
 10455ae:	cc 	int3
 10455af:	cc 	int3

_runtime.siftupTimer:
 10455b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10455b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10455bd:	0f 86 ed 00 00 00 	jbe	237 <_runtime.siftupTimer+0x100>
 10455c3:	48 83 ec 18 	sub	rsp, 24
 10455c7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10455cc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10455d1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10455d6:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10455db:	48 39 c8 	cmp	rax, rcx
 10455de:	0f 8d 9d 00 00 00 	jge	157 <_runtime.siftupTimer+0xd1>
 10455e4:	0f 83 c0 00 00 00 	jae	192 <_runtime.siftupTimer+0xfa>
 10455ea:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10455ef:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 10455f3:	48 8b 73 08 	mov	rsi, qword ptr [rbx + 8]
 10455f7:	eb 03 	jmp	3 <_runtime.siftupTimer+0x4c>
 10455f9:	4c 89 c0 	mov	rax, r8
 10455fc:	48 85 c0 	test	rax, rax
 10455ff:	7e 4d 	jle	77 <_runtime.siftupTimer+0x9e>
 1045601:	4c 8d 40 ff 	lea	r8, [rax - 1]
 1045605:	49 c1 f8 3f 	sar	r8, 63
 1045609:	49 c1 e8 3e 	shr	r8, 62
 104560d:	4d 8d 04 00 	lea	r8, [r8 + rax]
 1045611:	4d 8d 40 ff 	lea	r8, [r8 - 1]
 1045615:	49 c1 f8 02 	sar	r8, 2
 1045619:	49 39 c8 	cmp	r8, rcx
 104561c:	0f 83 80 00 00 00 	jae	128 <_runtime.siftupTimer+0xf2>
 1045622:	4e 8b 0c c2 	mov	r9, qword ptr [rdx + 8*r8]
 1045626:	49 39 71 08 	cmp	qword ptr [r9 + 8], rsi
 104562a:	7e 22 	jle	34 <_runtime.siftupTimer+0x9e>
 104562c:	48 39 c8 	cmp	rax, rcx
 104562f:	73 6c 	jae	108 <_runtime.siftupTimer+0xed>
 1045631:	48 8d 3c c2 	lea	rdi, [rdx + 8*rax]
 1045635:	83 3d c4 22 0b 00 00 	cmp	dword ptr [rip + 729796], 0
 104563c:	75 06 	jne	6 <_runtime.siftupTimer+0x94>
 104563e:	4c 89 0c c2 	mov	qword ptr [rdx + 8*rax], r9
 1045642:	eb b5 	jmp	-75 <_runtime.siftupTimer+0x49>
 1045644:	4c 89 c8 	mov	rax, r9
 1045647:	e8 94 d3 00 00 	call	54164 <_runtime.gcWriteBarrier>
 104564c:	eb ab 	jmp	-85 <_runtime.siftupTimer+0x49>
 104564e:	48 39 c8 	cmp	rax, rcx
 1045651:	73 45 	jae	69 <_runtime.siftupTimer+0xe8>
 1045653:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 1045657:	48 8d 3c c2 	lea	rdi, [rdx + 8*rax]
 104565b:	48 39 cb 	cmp	rbx, rcx
 104565e:	74 0d 	je	13 <_runtime.siftupTimer+0xbd>
 1045660:	83 3d 99 22 0b 00 00 	cmp	dword ptr [rip + 729753], 0
 1045667:	75 0e 	jne	14 <_runtime.siftupTimer+0xc7>
 1045669:	48 89 1c c2 	mov	qword ptr [rdx + 8*rax], rbx
 104566d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1045672:	48 83 c4 18 	add	rsp, 24
 1045676:	c3 	ret
 1045677:	48 89 d8 	mov	rax, rbx
 104567a:	e8 61 d3 00 00 	call	54113 <_runtime.gcWriteBarrier>
 104567f:	eb ec 	jmp	-20 <_runtime.siftupTimer+0xbd>
 1045681:	e8 0a 02 00 00 	call	522 <_runtime.badTimer>
 1045686:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104568b:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1045690:	48 39 c8 	cmp	rax, rcx
 1045693:	e9 4c ff ff ff 	jmp	-180 <_runtime.siftupTimer+0x34>
 1045698:	e8 b3 dc 00 00 	call	56499 <_runtime.panicIndex>
 104569d:	e8 ae dc 00 00 	call	56494 <_runtime.panicIndex>
 10456a2:	4c 89 c0 	mov	rax, r8
 10456a5:	e8 a6 dc 00 00 	call	56486 <_runtime.panicIndex>
 10456aa:	e8 a1 dc 00 00 	call	56481 <_runtime.panicIndex>
 10456af:	90 	nop
 10456b0:	e8 1b b5 00 00 	call	46363 <_runtime.morestack_noctxt>
 10456b5:	e9 f6 fe ff ff 	jmp	-266 <_runtime.siftupTimer>
 10456ba:	cc 	int3
 10456bb:	cc 	int3
 10456bc:	cc 	int3
 10456bd:	cc 	int3
 10456be:	cc 	int3
 10456bf:	cc 	int3

_runtime.siftdownTimer:
 10456c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10456c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10456cd:	0f 86 b0 01 00 00 	jbe	432 <_runtime.siftdownTimer+0x1c3>
 10456d3:	48 83 ec 18 	sub	rsp, 24
 10456d7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10456dc:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10456e1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10456e6:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10456eb:	48 39 c8 	cmp	rax, rcx
 10456ee:	0f 8d 3a 01 00 00 	jge	314 <_runtime.siftdownTimer+0x16e>
 10456f4:	0f 83 83 01 00 00 	jae	387 <_runtime.siftdownTimer+0x1bd>
 10456fa:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10456ff:	48 8b 1c c2 	mov	rbx, qword ptr [rdx + 8*rax]
 1045703:	48 8b 73 08 	mov	rsi, qword ptr [rbx + 8]
 1045707:	eb 03 	jmp	3 <_runtime.siftdownTimer+0x4c>
 1045709:	4c 89 e8 	mov	rax, r13
 104570c:	49 89 c0 	mov	r8, rax
 104570f:	48 c1 e0 02 	shl	rax, 2
 1045713:	4c 8d 48 01 	lea	r9, [rax + 1]
 1045717:	49 39 c9 	cmp	r9, rcx
 104571a:	0f 8d b2 00 00 00 	jge	178 <_runtime.siftdownTimer+0x112>
 1045720:	0f 83 4f 01 00 00 	jae	335 <_runtime.siftdownTimer+0x1b5>
 1045726:	4c 8b 54 c2 08 	mov	r10, qword ptr [rdx + 8*rax + 8]
 104572b:	4d 8b 52 08 	mov	r10, qword ptr [r10 + 8]
 104572f:	4c 8d 58 02 	lea	r11, [rax + 2]
 1045733:	49 39 cb 	cmp	r11, rcx
 1045736:	0f 8d e7 00 00 00 	jge	231 <_runtime.siftdownTimer+0x163>
 104573c:	0f 83 2b 01 00 00 	jae	299 <_runtime.siftdownTimer+0x1ad>
 1045742:	4c 8b 64 c2 10 	mov	r12, qword ptr [rdx + 8*rax + 16]
 1045747:	4d 8b 64 24 08 	mov	r12, qword ptr [r12 + 8]
 104574c:	4d 39 d4 	cmp	r12, r10
 104574f:	0f 8d ce 00 00 00 	jge	206 <_runtime.siftdownTimer+0x163>
 1045755:	4c 8d 48 03 	lea	r9, [rax + 3]
 1045759:	49 39 c9 	cmp	r9, rcx
 104575c:	0f 8d b6 00 00 00 	jge	182 <_runtime.siftdownTimer+0x158>
 1045762:	0f 83 fd 00 00 00 	jae	253 <_runtime.siftdownTimer+0x1a5>
 1045768:	4c 8b 54 c2 18 	mov	r10, qword ptr [rdx + 8*rax + 24]
 104576d:	4d 8b 52 08 	mov	r10, qword ptr [r10 + 8]
 1045771:	4c 8d 68 04 	lea	r13, [rax + 4]
 1045775:	49 39 cd 	cmp	r13, rcx
 1045778:	0f 8d 8f 00 00 00 	jge	143 <_runtime.siftdownTimer+0x14d>
 104577e:	0f 83 d9 00 00 00 	jae	217 <_runtime.siftdownTimer+0x19d>
 1045784:	4c 8b 74 c2 20 	mov	r14, qword ptr [rdx + 8*rax + 32]
 1045789:	4d 8b 76 08 	mov	r14, qword ptr [r14 + 8]
 104578d:	4d 39 d6 	cmp	r14, r10
 1045790:	7d 7b 	jge	123 <_runtime.siftdownTimer+0x14d>
 1045792:	4d 39 e6 	cmp	r14, r12
 1045795:	7d 6e 	jge	110 <_runtime.siftdownTimer+0x145>
 1045797:	49 39 f6 	cmp	r14, rsi
 104579a:	7d 36 	jge	54 <_runtime.siftdownTimer+0x112>
 104579c:	49 39 cd 	cmp	r13, rcx
 104579f:	0f 83 b0 00 00 00 	jae	176 <_runtime.siftdownTimer+0x195>
 10457a5:	4a 8b 04 ea 	mov	rax, qword ptr [rdx + 8*r13]
 10457a9:	49 39 c8 	cmp	r8, rcx
 10457ac:	0f 83 9b 00 00 00 	jae	155 <_runtime.siftdownTimer+0x18d>
 10457b2:	4a 8d 3c c2 	lea	rdi, [rdx + 8*r8]
 10457b6:	83 3d 43 21 0b 00 00 	cmp	dword ptr [rip + 729411], 0
 10457bd:	75 09 	jne	9 <_runtime.siftdownTimer+0x108>
 10457bf:	4a 89 04 c2 	mov	qword ptr [rdx + 8*r8], rax
 10457c3:	e9 41 ff ff ff 	jmp	-191 <_runtime.siftdownTimer+0x49>
 10457c8:	e8 13 d2 00 00 	call	53779 <_runtime.gcWriteBarrier>
 10457cd:	e9 37 ff ff ff 	jmp	-201 <_runtime.siftdownTimer+0x49>
 10457d2:	49 39 c8 	cmp	r8, rcx
 10457d5:	73 6e 	jae	110 <_runtime.siftdownTimer+0x185>
 10457d7:	4a 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*r8]
 10457db:	4a 8d 3c c2 	lea	rdi, [rdx + 8*r8]
 10457df:	48 39 cb 	cmp	rbx, rcx
 10457e2:	74 0d 	je	13 <_runtime.siftdownTimer+0x131>
 10457e4:	83 3d 15 21 0b 00 00 	cmp	dword ptr [rip + 729365], 0
 10457eb:	75 0e 	jne	14 <_runtime.siftdownTimer+0x13b>
 10457ed:	4a 89 1c c2 	mov	qword ptr [rdx + 8*r8], rbx
 10457f1:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10457f6:	48 83 c4 18 	add	rsp, 24
 10457fa:	c3 	ret
 10457fb:	48 89 d8 	mov	rax, rbx
 10457fe:	e8 dd d1 00 00 	call	53725 <_runtime.gcWriteBarrier>
 1045803:	eb ec 	jmp	-20 <_runtime.siftdownTimer+0x131>
 1045805:	4d 89 e6 	mov	r14, r12
 1045808:	4d 89 dd 	mov	r13, r11
 104580b:	eb 8a 	jmp	-118 <_runtime.siftdownTimer+0xd7>
 104580d:	4d 89 d6 	mov	r14, r10
 1045810:	4d 89 cd 	mov	r13, r9
 1045813:	e9 7a ff ff ff 	jmp	-134 <_runtime.siftdownTimer+0xd2>
 1045818:	4d 89 e6 	mov	r14, r12
 104581b:	4d 89 dd 	mov	r13, r11
 104581e:	e9 74 ff ff ff 	jmp	-140 <_runtime.siftdownTimer+0xd7>
 1045823:	4d 89 d4 	mov	r12, r10
 1045826:	4d 89 cb 	mov	r11, r9
 1045829:	e9 27 ff ff ff 	jmp	-217 <_runtime.siftdownTimer+0x95>
 104582e:	e8 5d 00 00 00 	call	93 <_runtime.badTimer>
 1045833:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1045838:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104583d:	48 39 c8 	cmp	rax, rcx
 1045840:	e9 af fe ff ff 	jmp	-337 <_runtime.siftdownTimer+0x34>
 1045845:	4c 89 c0 	mov	rax, r8
 1045848:	e8 03 db 00 00 	call	56067 <_runtime.panicIndex>
 104584d:	4c 89 c0 	mov	rax, r8
 1045850:	e8 fb da 00 00 	call	56059 <_runtime.panicIndex>
 1045855:	4c 89 e8 	mov	rax, r13
 1045858:	e8 f3 da 00 00 	call	56051 <_runtime.panicIndex>
 104585d:	4c 89 e8 	mov	rax, r13
 1045860:	e8 eb da 00 00 	call	56043 <_runtime.panicIndex>
 1045865:	4c 89 c8 	mov	rax, r9
 1045868:	e8 e3 da 00 00 	call	56035 <_runtime.panicIndex>
 104586d:	4c 89 d8 	mov	rax, r11
 1045870:	e8 db da 00 00 	call	56027 <_runtime.panicIndex>
 1045875:	4c 89 c8 	mov	rax, r9
 1045878:	e8 d3 da 00 00 	call	56019 <_runtime.panicIndex>
 104587d:	e8 ce da 00 00 	call	56014 <_runtime.panicIndex>
 1045882:	90 	nop
 1045883:	e8 48 b3 00 00 	call	45896 <_runtime.morestack_noctxt>
 1045888:	e9 33 fe ff ff 	jmp	-461 <_runtime.siftdownTimer>
 104588d:	cc 	int3
 104588e:	cc 	int3
 104588f:	cc 	int3

_runtime.badTimer:
 1045890:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045899:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104589d:	76 28 	jbe	40 <_runtime.badTimer+0x37>
 104589f:	48 83 ec 18 	sub	rsp, 24
 10458a3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10458a8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10458ad:	48 8d 05 25 ec 02 00 	lea	rax, [rip + 191525]
 10458b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10458b8:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 10458c1:	e8 9a 34 fe ff 	call	-117606 <_runtime.throw>
 10458c6:	90 	nop
 10458c7:	e8 04 b3 00 00 	call	45828 <_runtime.morestack_noctxt>
 10458cc:	eb c2 	jmp	-62 <_runtime.badTimer>
 10458ce:	cc 	int3
 10458cf:	cc 	int3

_time.now:
 10458d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10458d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10458dd:	76 4f 	jbe	79 <_time.now+0x5e>
 10458df:	48 83 ec 28 	sub	rsp, 40
 10458e3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10458e8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10458ed:	90 	nop
 10458ee:	e8 6d da ff ff 	call	-9619 <_runtime.walltime1>
 10458f3:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10458f7:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10458fc:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 1045900:	89 4c 24 14 	mov	dword ptr [rsp + 20], ecx
 1045904:	e8 b7 d9 ff ff 	call	-9801 <_runtime.nanotime1>
 1045909:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 104590d:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1045912:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1045917:	8b 4c 24 14 	mov	ecx, dword ptr [rsp + 20]
 104591b:	89 4c 24 38 	mov	dword ptr [rsp + 56], ecx
 104591f:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1045924:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1045929:	48 83 c4 28 	add	rsp, 40
 104592d:	c3 	ret
 104592e:	e8 9d b2 00 00 	call	45725 <_runtime.morestack_noctxt>
 1045933:	eb 9b 	jmp	-101 <_time.now>
 1045935:	cc 	int3
 1045936:	cc 	int3
 1045937:	cc 	int3
 1045938:	cc 	int3
 1045939:	cc 	int3
 104593a:	cc 	int3
 104593b:	cc 	int3
 104593c:	cc 	int3
 104593d:	cc 	int3
 104593e:	cc 	int3
 104593f:	cc 	int3

_runtime.traceReader:
 1045940:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045949:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104594d:	0f 86 c4 00 00 00 	jbe	196 <_runtime.traceReader+0xd7>
 1045953:	48 83 ec 18 	sub	rsp, 24
 1045957:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104595c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1045961:	48 83 3d 1f f6 08 00 00 	cmp	qword ptr [rip + 587295], 0
 1045969:	75 13 	jne	19 <_runtime.traceReader+0x3e>
 104596b:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1045974:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1045979:	48 83 c4 18 	add	rsp, 24
 104597d:	c3 	ret
 104597e:	48 83 3d f2 f5 08 00 00 	cmp	qword ptr [rip + 587250], 0
 1045986:	75 09 	jne	9 <_runtime.traceReader+0x51>
 1045988:	80 3d a2 f5 08 00 00 	cmp	byte ptr [rip + 587170], 0
 104598f:	74 da 	je	-38 <_runtime.traceReader+0x2b>
 1045991:	48 8d 05 88 f5 08 00 	lea	rax, [rip + 587144]
 1045998:	48 89 04 24 	mov	qword ptr [rsp], rax
 104599c:	e8 8f 27 fc ff 	call	-252017 <_runtime.lock>
 10459a1:	48 8b 05 e0 f5 08 00 	mov	rax, qword ptr [rip + 587232]
 10459a8:	48 85 c0 	test	rax, rax
 10459ab:	75 23 	jne	35 <_runtime.traceReader+0x90>
 10459ad:	48 8d 05 6c f5 08 00 	lea	rax, [rip + 587116]
 10459b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10459b8:	e8 53 29 fc ff 	call	-251565 <_runtime.unlock>
 10459bd:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 10459c6:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10459cb:	48 83 c4 18 	add	rsp, 24
 10459cf:	c3 	ret
 10459d0:	48 83 3d a0 f5 08 00 00 	cmp	qword ptr [rip + 587168], 0
 10459d8:	75 09 	jne	9 <_runtime.traceReader+0xa3>
 10459da:	80 3d 50 f5 08 00 00 	cmp	byte ptr [rip + 587088], 0
 10459e1:	74 ca 	je	-54 <_runtime.traceReader+0x6d>
 10459e3:	90 	nop
 10459e4:	90 	nop
 10459e5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10459ea:	31 c9 	xor	ecx, ecx
 10459ec:	48 89 0d 95 f5 08 00 	mov	qword ptr [rip + 587157], rcx
 10459f3:	48 8d 0d 26 f5 08 00 	lea	rcx, [rip + 587046]
 10459fa:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10459fe:	e8 0d 29 fc ff 	call	-251635 <_runtime.unlock>
 1045a03:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1045a08:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1045a0d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1045a12:	48 83 c4 18 	add	rsp, 24
 1045a16:	c3 	ret
 1045a17:	e8 b4 b1 00 00 	call	45492 <_runtime.morestack_noctxt>
 1045a1c:	e9 1f ff ff ff 	jmp	-225 <_runtime.traceReader>
 1045a21:	cc 	int3
 1045a22:	cc 	int3
 1045a23:	cc 	int3
 1045a24:	cc 	int3
 1045a25:	cc 	int3
 1045a26:	cc 	int3
 1045a27:	cc 	int3
 1045a28:	cc 	int3
 1045a29:	cc 	int3
 1045a2a:	cc 	int3
 1045a2b:	cc 	int3
 1045a2c:	cc 	int3
 1045a2d:	cc 	int3
 1045a2e:	cc 	int3
 1045a2f:	cc 	int3

_runtime.traceProcFree:
 1045a30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045a39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1045a3d:	0f 86 99 00 00 00 	jbe	153 <_runtime.traceProcFree+0xac>
 1045a43:	48 83 ec 18 	sub	rsp, 24
 1045a47:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1045a4c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1045a51:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1045a56:	84 00 	test	byte ptr [rax], al
 1045a58:	48 8b 88 30 16 00 00 	mov	rcx, qword ptr [rax + 5680]
 1045a5f:	48 c7 80 30 16 00 00 00 00 00 00 	mov	qword ptr [rax + 5680], 0
 1045a6a:	48 85 c9 	test	rcx, rcx
 1045a6d:	74 63 	je	99 <_runtime.traceProcFree+0xa2>
 1045a6f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1045a74:	48 8d 05 a5 f4 08 00 	lea	rax, [rip + 586917]
 1045a7b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1045a7f:	e8 ac 26 fc ff 	call	-252244 <_runtime.lock>
 1045a84:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1045a89:	48 89 c1 	mov	rcx, rax
 1045a8c:	90 	nop
 1045a8d:	48 c7 00 00 00 00 00 	mov	qword ptr [rax], 0
 1045a94:	48 83 3d dc f4 08 00 00 	cmp	qword ptr [rip + 586972], 0
 1045a9c:	75 28 	jne	40 <_runtime.traceProcFree+0x96>
 1045a9e:	48 89 0d d3 f4 08 00 	mov	qword ptr [rip + 586963], rcx
 1045aa5:	48 89 0d d4 f4 08 00 	mov	qword ptr [rip + 586964], rcx
 1045aac:	48 8d 05 6d f4 08 00 	lea	rax, [rip + 586861]
 1045ab3:	48 89 04 24 	mov	qword ptr [rsp], rax
 1045ab7:	e8 54 28 fc ff 	call	-251820 <_runtime.unlock>
 1045abc:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1045ac1:	48 83 c4 18 	add	rsp, 24
 1045ac5:	c3 	ret
 1045ac6:	48 8b 05 b3 f4 08 00 	mov	rax, qword ptr [rip + 586931]
 1045acd:	48 89 08 	mov	qword ptr [rax], rcx
 1045ad0:	eb d3 	jmp	-45 <_runtime.traceProcFree+0x75>
 1045ad2:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1045ad7:	48 83 c4 18 	add	rsp, 24
 1045adb:	c3 	ret
 1045adc:	e8 ef b0 00 00 	call	45295 <_runtime.morestack_noctxt>
 1045ae1:	e9 4a ff ff ff 	jmp	-182 <_runtime.traceProcFree>
 1045ae6:	cc 	int3
 1045ae7:	cc 	int3
 1045ae8:	cc 	int3
 1045ae9:	cc 	int3
 1045aea:	cc 	int3
 1045aeb:	cc 	int3
 1045aec:	cc 	int3
 1045aed:	cc 	int3
 1045aee:	cc 	int3
 1045aef:	cc 	int3

_runtime.traceEvent:
 1045af0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045af9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1045afd:	0f 86 d2 00 00 00 	jbe	210 <_runtime.traceEvent+0xe5>
 1045b03:	48 83 ec 58 	sub	rsp, 88
 1045b07:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 1045b0c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 1045b11:	e8 ba 04 00 00 	call	1210 <_runtime.traceAcquireBuffer>
 1045b16:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1045b1a:	8b 4c 24 08 	mov	ecx, dword ptr [rsp + 8]
 1045b1e:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 1045b23:	80 3d 06 f4 08 00 00 	cmp	byte ptr [rip + 586758], 0
 1045b2a:	0f 84 86 00 00 00 	je	134 <_runtime.traceEvent+0xc6>
 1045b30:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1045b35:	48 85 db 	test	rbx, rbx
 1045b38:	7e 18 	jle	24 <_runtime.traceEvent+0x62>
 1045b3a:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 1045b43:	48 8d 7b 01 	lea	rdi, [rbx + 1]
 1045b47:	48 39 b0 c0 00 00 00 	cmp	qword ptr [rax + 192], rsi
 1045b4e:	48 0f 44 df 	cmove	rbx, rdi
 1045b52:	89 4c 24 4c 	mov	dword ptr [rsp + 76], ecx
 1045b56:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1045b5e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1045b63:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1045b67:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1045b6c:	0f b6 44 24 60 	movzx	eax, byte ptr [rsp + 96]
 1045b71:	88 44 24 20 	mov	byte ptr [rsp + 32], al
 1045b75:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 1045b7a:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1045b7f:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1045b84:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1045b89:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1045b8e:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1045b96:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1045b9b:	e8 40 00 00 00 	call	64 <_runtime.traceEventLocked>
 1045ba0:	8b 44 24 4c 	mov	eax, dword ptr [rsp + 76]
 1045ba4:	89 04 24 	mov	dword ptr [rsp], eax
 1045ba7:	e8 d4 04 00 00 	call	1236 <_runtime.traceReleaseBuffer>
 1045bac:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1045bb1:	48 83 c4 58 	add	rsp, 88
 1045bb5:	c3 	ret
 1045bb6:	80 b8 a0 02 00 00 00 	cmp	byte ptr [rax + 672], 0
 1045bbd:	0f 85 6d ff ff ff 	jne	-147 <_runtime.traceEvent+0x40>
 1045bc3:	89 0c 24 	mov	dword ptr [rsp], ecx
 1045bc6:	e8 b5 04 00 00 	call	1205 <_runtime.traceReleaseBuffer>
 1045bcb:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 1045bd0:	48 83 c4 58 	add	rsp, 88
 1045bd4:	c3 	ret
 1045bd5:	e8 f6 af 00 00 	call	45046 <_runtime.morestack_noctxt>
 1045bda:	e9 11 ff ff ff 	jmp	-239 <_runtime.traceEvent>
 1045bdf:	cc 	int3

_runtime.traceEventLocked:
 1045be0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045be9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1045bed:	0f 86 92 02 00 00 	jbe	658 <_runtime.traceEventLocked+0x2a5>
 1045bf3:	48 83 ec 68 	sub	rsp, 104
 1045bf7:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 1045bfc:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1045c01:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1045c09:	48 8b 08 	mov	rcx, qword ptr [rax]
 1045c0c:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 1045c11:	48 83 c2 34 	add	rdx, 52
 1045c15:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 1045c1a:	48 89 cb 	mov	rbx, rcx
 1045c1d:	48 85 c9 	test	rcx, rcx
 1045c20:	74 17 	je	23 <_runtime.traceEventLocked+0x59>
 1045c22:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1045c26:	48 81 c6 18 04 ff ff 	add	rsi, -64488
 1045c2d:	48 f7 de 	neg	rsi
 1045c30:	48 39 d6 	cmp	rsi, rdx
 1045c33:	0f 8d 10 02 00 00 	jge	528 <_runtime.traceEventLocked+0x269>
 1045c39:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1045c3d:	8b 84 24 80 00 00 00 	mov	eax, dword ptr [rsp + 128]
 1045c44:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 1045c48:	e8 b3 04 00 00 	call	1203 <_runtime.traceFlush>
 1045c4d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1045c52:	90 	nop
 1045c53:	48 89 c1 	mov	rcx, rax
 1045c56:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1045c5e:	48 89 0a 	mov	qword ptr [rdx], rcx
 1045c61:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1045c66:	e8 d5 c6 00 00 	call	50901 <_runtime.cputicks>
 1045c6b:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1045c6f:	48 c1 e8 06 	shr	rax, 6
 1045c73:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045c78:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 1045c7c:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 1045c80:	48 29 d0 	sub	rax, rdx
 1045c83:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1045c8b:	48 85 d2 	test	rdx, rdx
 1045c8e:	0f 8c a5 01 00 00 	jl	421 <_runtime.traceEventLocked+0x259>
 1045c94:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 1045c9c:	8d 73 01 	lea	esi, [rbx + 1]
 1045c9f:	40 80 fe 03 	cmp	sil, 3
 1045ca3:	76 05 	jbe	5 <_runtime.traceEventLocked+0xca>
 1045ca5:	be 03 00 00 00 	mov	esi, 3
 1045caa:	48 8b 79 10 	mov	rdi, qword ptr [rcx + 16]
 1045cae:	41 89 f0 	mov	r8d, esi
 1045cb1:	c1 e6 06 	shl	esi, 6
 1045cb4:	44 0f b6 8c 24 90 00 00 00 	movzx	r9d, byte ptr [rsp + 144]
 1045cbd:	41 09 f1 	or	r9d, esi
 1045cc0:	48 81 ff e8 fb 00 00 	cmp	rdi, 64488
 1045cc7:	0f 83 aa 01 00 00 	jae	426 <_runtime.traceEventLocked+0x297>
 1045ccd:	48 89 7c 24 38 	mov	qword ptr [rsp + 56], rdi
 1045cd2:	44 88 8c 39 18 04 00 00 	mov	byte ptr [rcx + rdi + 1048], r9b
 1045cda:	48 ff 41 10 	inc	qword ptr [rcx + 16]
 1045cde:	41 80 f8 03 	cmp	r8b, 3
 1045ce2:	0f 84 0a 01 00 00 	je	266 <_runtime.traceEventLocked+0x212>
 1045ce8:	31 f6 	xor	esi, esi
 1045cea:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 1045cef:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1045cf3:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1045cf8:	e8 e3 05 00 00 	call	1507 <_runtime.(*traceBuf).varint>
 1045cfd:	31 c0 	xor	eax, eax
 1045cff:	eb 2c 	jmp	44 <_runtime.traceEventLocked+0x14d>
 1045d01:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1045d06:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 1045d0e:	48 8b 14 c1 	mov	rdx, qword ptr [rcx + 8*rax]
 1045d12:	48 8b 5c 24 58 	mov	rbx, qword ptr [rsp + 88]
 1045d17:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1045d1b:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1045d20:	e8 bb 05 00 00 	call	1467 <_runtime.(*traceBuf).varint>
 1045d25:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1045d2a:	48 ff c0 	inc	rax
 1045d2d:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 1045d35:	48 39 c8 	cmp	rax, rcx
 1045d38:	7c c7 	jl	-57 <_runtime.traceEventLocked+0x121>
 1045d3a:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1045d42:	48 85 c0 	test	rax, rax
 1045d45:	0f 84 8b 00 00 00 	je	139 <_runtime.traceEventLocked+0x1f6>
 1045d4b:	7f 39 	jg	57 <_runtime.traceEventLocked+0x1a6>
 1045d4d:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1045d52:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 1045d56:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1045d5b:	48 29 c8 	sub	rax, rcx
 1045d5e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1045d63:	48 39 c8 	cmp	rax, rcx
 1045d66:	0f 8f e5 00 00 00 	jg	229 <_runtime.traceEventLocked+0x271>
 1045d6c:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1045d71:	48 85 c9 	test	rcx, rcx
 1045d74:	74 06 	je	6 <_runtime.traceEventLocked+0x19c>
 1045d76:	48 83 c0 fe 	add	rax, -2
 1045d7a:	88 01 	mov	byte ptr [rcx], al
 1045d7c:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1045d81:	48 83 c4 68 	add	rsp, 104
 1045d85:	c3 	ret
 1045d86:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1045d8b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1045d8f:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045d94:	48 8d 51 18 	lea	rdx, [rcx + 24]
 1045d98:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1045d9d:	48 c7 44 24 10 80 00 00 00 	mov	qword ptr [rsp + 16], 128
 1045da6:	48 c7 44 24 18 80 00 00 00 	mov	qword ptr [rsp + 24], 128
 1045daf:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1045db4:	e8 d7 00 00 00 	call	215 <_runtime.traceStackID>
 1045db9:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1045dbe:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045dc3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1045dc7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1045dcc:	e8 0f 05 00 00 	call	1295 <_runtime.(*traceBuf).varint>
 1045dd1:	e9 77 ff ff ff 	jmp	-137 <_runtime.traceEventLocked+0x16d>
 1045dd6:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1045ddb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1045ddf:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1045de8:	e8 f3 04 00 00 	call	1267 <_runtime.(*traceBuf).varint>
 1045ded:	e9 5b ff ff ff 	jmp	-165 <_runtime.traceEventLocked+0x16d>
 1045df2:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1045df7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1045dfb:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1045e04:	e8 d7 04 00 00 	call	1239 <_runtime.(*traceBuf).varint>
 1045e09:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1045e0e:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 1045e12:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 1045e16:	48 81 fa e8 fb 00 00 	cmp	rdx, 64488
 1045e1d:	73 4b 	jae	75 <_runtime.traceEventLocked+0x28a>
 1045e1f:	48 8d 34 01 	lea	rsi, [rcx + rax]
 1045e23:	48 8d b6 17 04 00 00 	lea	rsi, [rsi + 1047]
 1045e2a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1045e2f:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045e34:	e9 b1 fe ff ff 	jmp	-335 <_runtime.traceEventLocked+0x10a>
 1045e39:	48 8b 9c 24 a8 00 00 00 	mov	rbx, qword ptr [rsp + 168]
 1045e41:	48 89 de 	mov	rsi, rbx
 1045e44:	e9 56 fe ff ff 	jmp	-426 <_runtime.traceEventLocked+0xbf>
 1045e49:	48 89 c8 	mov	rax, rcx
 1045e4c:	e9 10 fe ff ff 	jmp	-496 <_runtime.traceEventLocked+0x81>
 1045e51:	48 8d 05 c6 f6 02 00 	lea	rax, [rip + 194246]
 1045e58:	48 89 04 24 	mov	qword ptr [rsp], rax
 1045e5c:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1045e65:	e8 f6 2e fe ff 	call	-119050 <_runtime.throw>
 1045e6a:	48 89 d0 	mov	rax, rdx
 1045e6d:	b9 e8 fb 00 00 	mov	ecx, 64488
 1045e72:	e8 d9 d4 00 00 	call	54489 <_runtime.panicIndex>
 1045e77:	48 89 f8 	mov	rax, rdi
 1045e7a:	b9 e8 fb 00 00 	mov	ecx, 64488
 1045e7f:	e8 cc d4 00 00 	call	54476 <_runtime.panicIndex>
 1045e84:	90 	nop
 1045e85:	e8 46 ad 00 00 	call	44358 <_runtime.morestack_noctxt>
 1045e8a:	e9 51 fd ff ff 	jmp	-687 <_runtime.traceEventLocked>
 1045e8f:	cc 	int3

_runtime.traceStackID:
 1045e90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045e99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1045e9d:	0f 86 21 01 00 00 	jbe	289 <_runtime.traceStackID+0x134>
 1045ea3:	48 83 ec 40 	sub	rsp, 64
 1045ea7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1045eac:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1045eb1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1045eba:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1045ebf:	48 8b 9b c0 00 00 00 	mov	rbx, qword ptr [rbx + 192]
 1045ec6:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1045ecb:	48 39 c3 	cmp	rbx, rax
 1045ece:	0f 84 a9 00 00 00 	je	169 <_runtime.traceStackID+0xed>
 1045ed4:	48 85 db 	test	rbx, rbx
 1045ed7:	75 64 	jne	100 <_runtime.traceStackID+0xad>
 1045ed9:	31 c0 	xor	eax, eax
 1045edb:	48 8d 70 ff 	lea	rsi, [rax - 1]
 1045edf:	48 85 c0 	test	rax, rax
 1045ee2:	48 0f 4f c6 	cmovg	rax, rsi
 1045ee6:	48 85 c0 	test	rax, rax
 1045ee9:	7e 0d 	jle	13 <_runtime.traceStackID+0x68>
 1045eeb:	48 83 bb 98 00 00 00 01 	cmp	qword ptr [rbx + 152], 1
 1045ef3:	75 03 	jne	3 <_runtime.traceStackID+0x68>
 1045ef5:	48 ff c8 	dec	rax
 1045ef8:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1045efd:	48 39 d0 	cmp	rax, rdx
 1045f00:	0f 87 b5 00 00 00 	ja	181 <_runtime.traceStackID+0x12b>
 1045f06:	48 8d 0d 83 f0 08 00 	lea	rcx, [rip + 585859]
 1045f0d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1045f11:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1045f16:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1045f1b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1045f20:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1045f25:	e8 46 04 00 00 	call	1094 <_runtime.(*traceStackTable).put>
 1045f2a:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 1045f2e:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 1045f33:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1045f38:	48 83 c4 40 	add	rsp, 64
 1045f3c:	c3 	ret
 1045f3d:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1045f41:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1045f46:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1045f4b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1045f50:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1045f55:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045f5a:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1045f5f:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1045f64:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1045f69:	e8 a2 40 00 00 	call	16546 <_runtime.gcallers>
 1045f6e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1045f73:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1045f78:	e9 5e ff ff ff 	jmp	-162 <_runtime.traceStackID+0x4b>
 1045f7d:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1045f82:	48 ff c0 	inc	rax
 1045f85:	48 89 04 24 	mov	qword ptr [rsp], rax
 1045f89:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1045f8e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1045f93:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1045f98:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1045f9d:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1045fa2:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1045fa7:	e8 84 3f 00 00 	call	16260 <_runtime.callers>
 1045fac:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1045fb1:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1045fb6:	e9 20 ff ff ff 	jmp	-224 <_runtime.traceStackID+0x4b>
 1045fbb:	48 89 c1 	mov	rcx, rax
 1045fbe:	e8 cd d3 00 00 	call	54221 <_runtime.panicSliceAcap>
 1045fc3:	90 	nop
 1045fc4:	e8 07 ac 00 00 	call	44039 <_runtime.morestack_noctxt>
 1045fc9:	e9 c2 fe ff ff 	jmp	-318 <_runtime.traceStackID>
 1045fce:	cc 	int3
 1045fcf:	cc 	int3

_runtime.traceAcquireBuffer:
 1045fd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1045fd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1045fdd:	0f 86 91 00 00 00 	jbe	145 <_runtime.traceAcquireBuffer+0xa4>
 1045fe3:	48 83 ec 18 	sub	rsp, 24
 1045fe7:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1045fec:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1045ff1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1045ffa:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1045ffe:	90 	nop
 1045fff:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1046005:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1046009:	84 00 	test	byte ptr [rax], al
 104600b:	48 8b 81 d0 00 00 00 	mov	rax, qword ptr [rcx + 208]
 1046012:	48 85 c0 	test	rax, rax
 1046015:	74 20 	je	32 <_runtime.traceAcquireBuffer+0x67>
 1046017:	8b 10 	mov	edx, dword ptr [rax]
 1046019:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 104601e:	89 54 24 28 	mov	dword ptr [rsp + 40], edx
 1046022:	48 05 30 16 00 00 	add	rax, 5680
 1046028:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104602d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1046032:	48 83 c4 18 	add	rsp, 24
 1046036:	c3 	ret
 1046037:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104603c:	48 8d 05 9d ef 09 00 	lea	rax, [rip + 651165]
 1046043:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046047:	e8 e4 20 fc ff 	call	-253724 <_runtime.lock>
 104604c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1046051:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1046056:	c7 44 24 28 ff ff ff ff 	mov	dword ptr [rsp + 40], 4294967295
 104605e:	48 8d 05 83 ef 09 00 	lea	rax, [rip + 651139]
 1046065:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104606a:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104606f:	48 83 c4 18 	add	rsp, 24
 1046073:	c3 	ret
 1046074:	e8 57 ab 00 00 	call	43863 <_runtime.morestack_noctxt>
 1046079:	e9 52 ff ff ff 	jmp	-174 <_runtime.traceAcquireBuffer>
 104607e:	cc 	int3
 104607f:	cc 	int3

_runtime.traceReleaseBuffer:
 1046080:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046089:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104608d:	76 65 	jbe	101 <_runtime.traceReleaseBuffer+0x74>
 104608f:	48 83 ec 10 	sub	rsp, 16
 1046093:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1046098:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104609d:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 10460a1:	83 f8 ff 	cmp	eax, -1
 10460a4:	74 3c 	je	60 <_runtime.traceReleaseBuffer+0x62>
 10460a6:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10460af:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10460b3:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 10460b9:	8d 5a ff 	lea	ebx, [rdx - 1]
 10460bc:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 10460c2:	83 fa 01 	cmp	edx, 1
 10460c5:	75 11 	jne	17 <_runtime.traceReleaseBuffer+0x58>
 10460c7:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 10460ce:	74 08 	je	8 <_runtime.traceReleaseBuffer+0x58>
 10460d0:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 10460d8:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10460dd:	48 83 c4 10 	add	rsp, 16
 10460e1:	c3 	ret
 10460e2:	48 8d 05 f7 ee 09 00 	lea	rax, [rip + 650999]
 10460e9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10460ed:	e8 1e 22 fc ff 	call	-253410 <_runtime.unlock>
 10460f2:	eb b2 	jmp	-78 <_runtime.traceReleaseBuffer+0x26>
 10460f4:	e8 d7 aa 00 00 	call	43735 <_runtime.morestack_noctxt>
 10460f9:	eb 85 	jmp	-123 <_runtime.traceReleaseBuffer>
 10460fb:	cc 	int3
 10460fc:	cc 	int3
 10460fd:	cc 	int3
 10460fe:	cc 	int3
 10460ff:	cc 	int3

_runtime.traceFlush:
 1046100:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046109:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104610d:	0f 86 c0 01 00 00 	jbe	448 <_runtime.traceFlush+0x1d3>
 1046113:	48 83 ec 40 	sub	rsp, 64
 1046117:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104611c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1046121:	48 8b 05 00 ee 08 00 	mov	rax, qword ptr [rip + 585216]
 1046128:	48 85 c0 	test	rax, rax
 104612b:	0f 84 71 01 00 00 	je	369 <_runtime.traceFlush+0x1a2>
 1046131:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104613a:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 104613e:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 1046145:	0f 95 c0 	setne	al
 1046148:	88 44 24 1f 	mov	byte ptr [rsp + 31], al
 104614c:	84 c0 	test	al, al
 104614e:	0f 85 34 01 00 00 	jne	308 <_runtime.traceFlush+0x188>
 1046154:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1046159:	48 85 c9 	test	rcx, rcx
 104615c:	74 27 	je	39 <_runtime.traceFlush+0x85>
 104615e:	48 89 ca 	mov	rdx, rcx
 1046161:	90 	nop
 1046162:	48 c7 01 00 00 00 00 	mov	qword ptr [rcx], 0
 1046169:	48 83 3d 07 ee 08 00 00 	cmp	qword ptr [rip + 585223], 0
 1046171:	0f 85 02 01 00 00 	jne	258 <_runtime.traceFlush+0x179>
 1046177:	48 89 15 fa ed 08 00 	mov	qword ptr [rip + 585210], rdx
 104617e:	48 89 15 fb ed 08 00 	mov	qword ptr [rip + 585211], rdx
 1046185:	48 8b 0d e4 ed 08 00 	mov	rcx, qword ptr [rip + 585188]
 104618c:	48 85 c9 	test	rcx, rcx
 104618f:	0f 84 b9 00 00 00 	je	185 <_runtime.traceFlush+0x14e>
 1046195:	48 89 ca 	mov	rdx, rcx
 1046198:	48 8b 09 	mov	rcx, qword ptr [rcx]
 104619b:	48 89 0d ce ed 08 00 	mov	qword ptr [rip + 585166], rcx
 10461a2:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 10461a7:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 10461ac:	31 c9 	xor	ecx, ecx
 10461ae:	48 89 0a 	mov	qword ptr [rdx], rcx
 10461b1:	48 c7 42 10 00 00 00 00 	mov	qword ptr [rdx + 16], 0
 10461b9:	e8 82 c1 00 00 	call	49538 <_runtime.cputicks>
 10461be:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10461c2:	48 c1 e8 06 	shr	rax, 6
 10461c6:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10461cb:	48 89 41 08 	mov	qword ptr [rcx + 8], rax
 10461cf:	90 	nop
 10461d0:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 10461d4:	48 81 fa e8 fb 00 00 	cmp	rdx, 64488
 10461db:	0f 83 cb 00 00 00 	jae	203 <_runtime.traceFlush+0x1ac>
 10461e1:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10461e6:	c6 84 11 18 04 00 00 41 	mov	byte ptr [rcx + rdx + 1048], 65
 10461ee:	48 ff 41 10 	inc	qword ptr [rcx + 16]
 10461f2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10461f6:	8b 44 24 50 	mov	eax, dword ptr [rsp + 80]
 10461fa:	48 63 c0 	movsxd	rax, eax
 10461fd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1046202:	e8 d9 00 00 00 	call	217 <_runtime.(*traceBuf).varint>
 1046207:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104620c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046210:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1046215:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104621a:	e8 c1 00 00 00 	call	193 <_runtime.(*traceBuf).varint>
 104621f:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 1046224:	84 c0 	test	al, al
 1046226:	75 14 	jne	20 <_runtime.traceFlush+0x13c>
 1046228:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104622d:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1046232:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1046237:	48 83 c4 40 	add	rsp, 64
 104623b:	c3 	ret
 104623c:	48 8d 05 dd ec 08 00 	lea	rax, [rip + 584925]
 1046243:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046247:	e8 c4 20 fc ff 	call	-253756 <_runtime.unlock>
 104624c:	eb da 	jmp	-38 <_runtime.traceFlush+0x128>
 104624e:	48 c7 04 24 00 00 01 00 	mov	qword ptr [rsp], 65536
 1046256:	48 8d 05 63 24 0b 00 	lea	rax, [rip + 730211]
 104625d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1046262:	e8 59 ac fc ff 	call	-218023 <_runtime.sysAlloc>
 1046267:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104626c:	48 85 c0 	test	rax, rax
 104626f:	74 48 	je	72 <_runtime.traceFlush+0x1b9>
 1046271:	48 89 c2 	mov	rdx, rax
 1046274:	e9 29 ff ff ff 	jmp	-215 <_runtime.traceFlush+0xa2>
 1046279:	48 8b 0d 00 ed 08 00 	mov	rcx, qword ptr [rip + 584960]
 1046280:	48 89 11 	mov	qword ptr [rcx], rdx
 1046283:	e9 f6 fe ff ff 	jmp	-266 <_runtime.traceFlush+0x7e>
 1046288:	48 8d 05 91 ec 08 00 	lea	rax, [rip + 584849]
 104628f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046293:	e8 98 1e fc ff 	call	-254312 <_runtime.lock>
 1046298:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 104629d:	e9 b2 fe ff ff 	jmp	-334 <_runtime.traceFlush+0x54>
 10462a2:	b8 01 00 00 00 	mov	eax, 1
 10462a7:	e9 9c fe ff ff 	jmp	-356 <_runtime.traceFlush+0x48>
 10462ac:	48 89 d0 	mov	rax, rdx
 10462af:	b9 e8 fb 00 00 	mov	ecx, 64488
 10462b4:	e8 97 d0 00 00 	call	53399 <_runtime.panicIndex>
 10462b9:	48 8d 05 64 e0 02 00 	lea	rax, [rip + 188516]
 10462c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10462c4:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 10462cd:	e8 8e 2a fe ff 	call	-120178 <_runtime.throw>
 10462d2:	90 	nop
 10462d3:	e8 f8 a8 00 00 	call	43256 <_runtime.morestack_noctxt>
 10462d8:	e9 23 fe ff ff 	jmp	-477 <_runtime.traceFlush>
 10462dd:	cc 	int3
 10462de:	cc 	int3
 10462df:	cc 	int3

_runtime.(*traceBuf).varint:
 10462e0:	48 83 ec 18 	sub	rsp, 24
 10462e4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10462e9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10462ee:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10462f3:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 10462f7:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 10462fc:	eb 18 	jmp	24 <_runtime.(*traceBuf).varint+0x36>
 10462fe:	48 89 f7 	mov	rdi, rsi
 1046301:	83 ce 80 	or	esi, -128
 1046304:	40 88 b4 1a 18 04 00 00 	mov	byte ptr [rdx + rbx + 1048], sil
 104630c:	48 c1 ef 07 	shr	rdi, 7
 1046310:	48 ff c3 	inc	rbx
 1046313:	48 89 fe 	mov	rsi, rdi
 1046316:	48 81 fe 80 00 00 00 	cmp	rsi, 128
 104631d:	72 0b 	jb	11 <_runtime.(*traceBuf).varint+0x4a>
 104631f:	48 81 fb e8 fb 00 00 	cmp	rbx, 64488
 1046326:	72 d6 	jb	-42 <_runtime.(*traceBuf).varint+0x1e>
 1046328:	eb 30 	jmp	48 <_runtime.(*traceBuf).varint+0x7a>
 104632a:	48 81 fb e8 fb 00 00 	cmp	rbx, 64488
 1046331:	73 1a 	jae	26 <_runtime.(*traceBuf).varint+0x6d>
 1046333:	40 88 b4 1a 18 04 00 00 	mov	byte ptr [rdx + rbx + 1048], sil
 104633b:	48 8d 43 01 	lea	rax, [rbx + 1]
 104633f:	48 89 42 10 	mov	qword ptr [rdx + 16], rax
 1046343:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1046348:	48 83 c4 18 	add	rsp, 24
 104634c:	c3 	ret
 104634d:	48 89 d8 	mov	rax, rbx
 1046350:	b9 e8 fb 00 00 	mov	ecx, 64488
 1046355:	e8 f6 cf 00 00 	call	53238 <_runtime.panicIndex>
 104635a:	48 89 d8 	mov	rax, rbx
 104635d:	b9 e8 fb 00 00 	mov	ecx, 64488
 1046362:	e8 e9 cf 00 00 	call	53225 <_runtime.panicIndex>
 1046367:	90 	nop
 1046368:	cc 	int3
 1046369:	cc 	int3
 104636a:	cc 	int3
 104636b:	cc 	int3
 104636c:	cc 	int3
 104636d:	cc 	int3
 104636e:	cc 	int3
 104636f:	cc 	int3

_runtime.(*traceStackTable).put:
 1046370:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046379:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104637d:	0f 86 da 01 00 00 	jbe	474 <_runtime.(*traceStackTable).put+0x1ed>
 1046383:	48 83 ec 50 	sub	rsp, 80
 1046387:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 104638c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 1046391:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1046396:	48 85 c0 	test	rax, rax
 1046399:	0f 84 9e 01 00 00 	je	414 <_runtime.(*traceStackTable).put+0x1cd>
 104639f:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10463a4:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10463a8:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 10463b1:	48 c1 e0 03 	shl	rax, 3
 10463b5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10463ba:	e8 a1 bf 00 00 	call	49057 <_runtime.memhash>
 10463bf:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10463c4:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10463c9:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10463ce:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10463d2:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 10463d7:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10463dc:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 10463e1:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 10463e6:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 10463eb:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 10463f0:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10463f5:	e8 76 01 00 00 	call	374 <_runtime.(*traceStackTable).find>
 10463fa:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 10463fe:	85 c0 	test	eax, eax
 1046400:	0f 85 29 01 00 00 	jne	297 <_runtime.(*traceStackTable).put+0x1bf>
 1046406:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104640b:	84 00 	test	byte ptr [rax], al
 104640d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046411:	e8 1a 1d fc ff 	call	-254694 <_runtime.lock>
 1046416:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104641b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104641f:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1046424:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1046429:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 104642e:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1046433:	48 8b 5c 24 70 	mov	rbx, qword ptr [rsp + 112]
 1046438:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 104643d:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1046442:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1046447:	e8 24 01 00 00 	call	292 <_runtime.(*traceStackTable).find>
 104644c:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1046450:	85 c0 	test	eax, eax
 1046452:	0f 85 b3 00 00 00 	jne	179 <_runtime.(*traceStackTable).put+0x19b>
 1046458:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104645d:	ff 40 08 	inc	dword ptr [rax + 8]
 1046460:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046464:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1046469:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104646e:	e8 9d 01 00 00 	call	413 <_runtime.(*traceStackTable).newStack>
 1046473:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1046478:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 104647d:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 1046481:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1046486:	8b 5a 08 	mov	ebx, dword ptr [rdx + 8]
 1046489:	89 58 10 	mov	dword ptr [rax + 16], ebx
 104648c:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1046491:	48 89 58 18 	mov	qword ptr [rax + 24], rbx
 1046495:	90 	nop
 1046496:	48 81 fb 80 00 00 00 	cmp	rbx, 128
 104649d:	0f 87 ac 00 00 00 	ja	172 <_runtime.(*traceStackTable).put+0x1df>
 10464a3:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 10464a8:	31 ff 	xor	edi, edi
 10464aa:	eb 0c 	jmp	12 <_runtime.(*traceStackTable).put+0x148>
 10464ac:	4c 8b 04 fe 	mov	r8, qword ptr [rsi + 8*rdi]
 10464b0:	4c 89 44 f8 20 	mov	qword ptr [rax + 8*rdi + 32], r8
 10464b5:	48 ff c7 	inc	rdi
 10464b8:	48 39 df 	cmp	rdi, rbx
 10464bb:	7c ef 	jl	-17 <_runtime.(*traceStackTable).put+0x13c>
 10464bd:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 10464c2:	48 81 e1 ff 1f 00 00 	and	rcx, 8191
 10464c9:	48 8b 5c ca 20 	mov	rbx, qword ptr [rdx + 8*rcx + 32]
 10464ce:	48 89 18 	mov	qword ptr [rax], rbx
 10464d1:	48 8d 0c ca 	lea	rcx, [rdx + 8*rcx]
 10464d5:	48 8d 49 20 	lea	rcx, [rcx + 32]
 10464d9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10464dd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10464e2:	e8 19 c6 fb ff 	call	-276967 <_runtime.atomicstorep>
 10464e7:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10464ec:	48 89 04 24 	mov	qword ptr [rsp], rax
 10464f0:	e8 1b 1e fc ff 	call	-254437 <_runtime.unlock>
 10464f5:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10464fa:	8b 40 10 	mov	eax, dword ptr [rax + 16]
 10464fd:	89 44 24 78 	mov	dword ptr [rsp + 120], eax
 1046501:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1046506:	48 83 c4 50 	add	rsp, 80
 104650a:	c3 	ret
 104650b:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 104650f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1046514:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046518:	e8 f3 1d fc ff 	call	-254477 <_runtime.unlock>
 104651d:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 1046521:	89 44 24 78 	mov	dword ptr [rsp + 120], eax
 1046525:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 104652a:	48 83 c4 50 	add	rsp, 80
 104652e:	c3 	ret
 104652f:	89 44 24 78 	mov	dword ptr [rsp + 120], eax
 1046533:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 1046538:	48 83 c4 50 	add	rsp, 80
 104653c:	c3 	ret
 104653d:	c7 44 24 78 00 00 00 00 	mov	dword ptr [rsp + 120], 0
 1046545:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 104654a:	48 83 c4 50 	add	rsp, 80
 104654e:	c3 	ret
 104654f:	48 89 d9 	mov	rcx, rbx
 1046552:	ba 80 00 00 00 	mov	edx, 128
 1046557:	e8 14 ce 00 00 	call	52756 <_runtime.panicSliceAlen>
 104655c:	90 	nop
 104655d:	e8 6e a6 00 00 	call	42606 <_runtime.morestack_noctxt>
 1046562:	e9 09 fe ff ff 	jmp	-503 <_runtime.(*traceStackTable).put>
 1046567:	cc 	int3
 1046568:	cc 	int3
 1046569:	cc 	int3
 104656a:	cc 	int3
 104656b:	cc 	int3
 104656c:	cc 	int3
 104656d:	cc 	int3
 104656e:	cc 	int3
 104656f:	cc 	int3

_runtime.(*traceStackTable).find:
 1046570:	48 83 ec 18 	sub	rsp, 24
 1046574:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1046579:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104657e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1046583:	84 00 	test	byte ptr [rax], al
 1046585:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 104658a:	48 89 de 	mov	rsi, rbx
 104658d:	48 81 e3 ff 1f 00 00 	and	rbx, 8191
 1046594:	48 8b 44 d8 20 	mov	rax, qword ptr [rax + 8*rbx + 32]
 1046599:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 104659e:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 10465a3:	eb 19 	jmp	25 <_runtime.(*traceStackTable).find+0x4e>
 10465a5:	48 ff c2 	inc	rdx
 10465a8:	48 39 ca 	cmp	rdx, rcx
 10465ab:	7d 32 	jge	50 <_runtime.(*traceStackTable).find+0x6f>
 10465ad:	4c 8b 44 d0 20 	mov	r8, qword ptr [rax + 8*rdx + 32]
 10465b2:	4c 8b 0c d7 	mov	r9, qword ptr [rdi + 8*rdx]
 10465b6:	4d 39 c8 	cmp	r8, r9
 10465b9:	74 ea 	je	-22 <_runtime.(*traceStackTable).find+0x35>
 10465bb:	48 8b 00 	mov	rax, qword ptr [rax]
 10465be:	48 85 c0 	test	rax, rax
 10465c1:	74 2d 	je	45 <_runtime.(*traceStackTable).find+0x80>
 10465c3:	48 39 70 08 	cmp	qword ptr [rax + 8], rsi
 10465c7:	75 f2 	jne	-14 <_runtime.(*traceStackTable).find+0x4b>
 10465c9:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 10465cd:	48 39 d9 	cmp	rcx, rbx
 10465d0:	75 e9 	jne	-23 <_runtime.(*traceStackTable).find+0x4b>
 10465d2:	48 81 f9 80 00 00 00 	cmp	rcx, 128
 10465d9:	77 27 	ja	39 <_runtime.(*traceStackTable).find+0x92>
 10465db:	31 d2 	xor	edx, edx
 10465dd:	eb c9 	jmp	-55 <_runtime.(*traceStackTable).find+0x38>
 10465df:	8b 40 10 	mov	eax, dword ptr [rax + 16]
 10465e2:	89 44 24 48 	mov	dword ptr [rsp + 72], eax
 10465e6:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10465eb:	48 83 c4 18 	add	rsp, 24
 10465ef:	c3 	ret
 10465f0:	c7 44 24 48 00 00 00 00 	mov	dword ptr [rsp + 72], 0
 10465f8:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 10465fd:	48 83 c4 18 	add	rsp, 24
 1046601:	c3 	ret
 1046602:	ba 80 00 00 00 	mov	edx, 128
 1046607:	e8 64 cd 00 00 	call	52580 <_runtime.panicSliceAlen>
 104660c:	90 	nop
 104660d:	cc 	int3
 104660e:	cc 	int3
 104660f:	cc 	int3

_runtime.(*traceStackTable).newStack:
 1046610:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046619:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104661d:	76 48 	jbe	72 <_runtime.(*traceStackTable).newStack+0x57>
 104661f:	48 83 ec 20 	sub	rsp, 32
 1046623:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 1046628:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104662d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1046632:	84 00 	test	byte ptr [rax], al
 1046634:	48 83 c0 10 	add	rax, 16
 1046638:	48 89 04 24 	mov	qword ptr [rsp], rax
 104663c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1046641:	48 c1 e0 03 	shl	rax, 3
 1046645:	48 83 c0 28 	add	rax, 40
 1046649:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104664e:	e8 1d 00 00 00 	call	29 <_runtime.(*traceAlloc).alloc>
 1046653:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1046658:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104665d:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1046662:	48 83 c4 20 	add	rsp, 32
 1046666:	c3 	ret
 1046667:	e8 64 a5 00 00 	call	42340 <_runtime.morestack_noctxt>
 104666c:	eb a2 	jmp	-94 <_runtime.(*traceStackTable).newStack>
 104666e:	cc 	int3
 104666f:	cc 	int3

_runtime.(*traceAlloc).alloc:
 1046670:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046679:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104667d:	0f 86 fc 00 00 00 	jbe	252 <_runtime.(*traceAlloc).alloc+0x10f>
 1046683:	48 83 ec 28 	sub	rsp, 40
 1046687:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104668c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1046691:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1046696:	48 83 c2 07 	add	rdx, 7
 104669a:	48 83 e2 f8 	and	rdx, -8
 104669e:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10466a3:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 10466a8:	48 83 3b 00 	cmp	qword ptr [rbx], 0
 10466ac:	75 7b 	jne	123 <_runtime.(*traceAlloc).alloc+0xb9>
 10466ae:	48 81 fa f8 ff 00 00 	cmp	rdx, 65528
 10466b5:	0f 87 aa 00 00 00 	ja	170 <_runtime.(*traceAlloc).alloc+0xf5>
 10466bb:	48 c7 04 24 00 00 01 00 	mov	qword ptr [rsp], 65536
 10466c3:	48 8d 05 f6 1f 0b 00 	lea	rax, [rip + 729078]
 10466ca:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10466cf:	e8 ec a7 fc ff 	call	-219156 <_runtime.sysAlloc>
 10466d4:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10466d9:	48 85 c0 	test	rax, rax
 10466dc:	74 6e 	je	110 <_runtime.(*traceAlloc).alloc+0xdc>
 10466de:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10466e3:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 10466e6:	48 89 18 	mov	qword ptr [rax], rbx
 10466e9:	90 	nop
 10466ea:	48 89 02 	mov	qword ptr [rdx], rax
 10466ed:	48 c7 42 08 00 00 00 00 	mov	qword ptr [rdx + 8], 0
 10466f5:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 10466f8:	84 03 	test	byte ptr [rbx], al
 10466fa:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 10466fe:	48 3d f8 ff 00 00 	cmp	rax, 65528
 1046704:	73 3c 	jae	60 <_runtime.(*traceAlloc).alloc+0xd2>
 1046706:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104670b:	48 01 c1 	add	rcx, rax
 104670e:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 1046712:	48 8d 04 03 	lea	rax, [rbx + rax]
 1046716:	48 8d 40 08 	lea	rax, [rax + 8]
 104671a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104671f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1046724:	48 83 c4 28 	add	rsp, 40
 1046728:	c3 	ret
 1046729:	48 8b 73 08 	mov	rsi, qword ptr [rbx + 8]
 104672d:	48 01 d6 	add	rsi, rdx
 1046730:	48 81 fe f8 ff 00 00 	cmp	rsi, 65528
 1046737:	0f 87 71 ff ff ff 	ja	-143 <_runtime.(*traceAlloc).alloc+0x3e>
 104673d:	48 89 da 	mov	rdx, rbx
 1046740:	eb b3 	jmp	-77 <_runtime.(*traceAlloc).alloc+0x85>
 1046742:	b9 f8 ff 00 00 	mov	ecx, 65528
 1046747:	e8 14 cc 00 00 	call	52244 <_runtime.panicIndexU>
 104674c:	48 8d 05 d1 db 02 00 	lea	rax, [rip + 187345]
 1046753:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046757:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1046760:	e8 fb 25 fe ff 	call	-121349 <_runtime.throw>
 1046765:	48 8d 05 d4 df 02 00 	lea	rax, [rip + 188372]
 104676c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046770:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 1046779:	e8 e2 25 fe ff 	call	-121374 <_runtime.throw>
 104677e:	90 	nop
 104677f:	e8 4c a4 00 00 	call	42060 <_runtime.morestack_noctxt>
 1046784:	e9 e7 fe ff ff 	jmp	-281 <_runtime.(*traceAlloc).alloc>
 1046789:	cc 	int3
 104678a:	cc 	int3
 104678b:	cc 	int3
 104678c:	cc 	int3
 104678d:	cc 	int3
 104678e:	cc 	int3
 104678f:	cc 	int3

_runtime.traceProcStart:
 1046790:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046799:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104679d:	76 68 	jbe	104 <_runtime.traceProcStart+0x77>
 104679f:	48 83 ec 38 	sub	rsp, 56
 10467a3:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 10467a8:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 10467ad:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 10467b6:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10467bf:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10467c3:	48 8b 80 e8 00 00 00 	mov	rax, qword ptr [rax + 232]
 10467ca:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10467cf:	c6 04 24 05 	mov	byte ptr [rsp], 5
 10467d3:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 10467dc:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10467e1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10467e6:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 10467ef:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 10467f8:	e8 f3 f2 ff ff 	call	-3341 <_runtime.traceEvent>
 10467fd:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1046802:	48 83 c4 38 	add	rsp, 56
 1046806:	c3 	ret
 1046807:	e8 c4 a3 00 00 	call	41924 <_runtime.morestack_noctxt>
 104680c:	eb 82 	jmp	-126 <_runtime.traceProcStart>
 104680e:	cc 	int3
 104680f:	cc 	int3

_runtime.traceProcStop:
 1046810:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046819:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104681d:	0f 86 b3 00 00 00 	jbe	179 <_runtime.traceProcStop+0xc6>
 1046823:	48 83 ec 40 	sub	rsp, 64
 1046827:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104682c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1046831:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104683a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104683e:	90 	nop
 104683f:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1046845:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1046849:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104684e:	84 00 	test	byte ptr [rax], al
 1046850:	48 8b 81 d0 00 00 00 	mov	rax, qword ptr [rcx + 208]
 1046857:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104685c:	90 	nop
 104685d:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1046862:	48 89 91 d0 00 00 00 	mov	qword ptr [rcx + 208], rdx
 1046869:	c6 04 24 06 	mov	byte ptr [rsp], 6
 104686d:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1046876:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104687f:	0f 57 c0 	xorps	xmm0, xmm0
 1046882:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1046887:	e8 64 f2 ff ff 	call	-3484 <_runtime.traceEvent>
 104688c:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1046891:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1046896:	48 89 81 d0 00 00 00 	mov	qword ptr [rcx + 208], rax
 104689d:	90 	nop
 104689e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10468a7:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 10468ad:	8d 5a ff 	lea	ebx, [rdx - 1]
 10468b0:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 10468b6:	83 fa 01 	cmp	edx, 1
 10468b9:	75 11 	jne	17 <_runtime.traceProcStop+0xbc>
 10468bb:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 10468c2:	74 08 	je	8 <_runtime.traceProcStop+0xbc>
 10468c4:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 10468cc:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 10468d1:	48 83 c4 40 	add	rsp, 64
 10468d5:	c3 	ret
 10468d6:	e8 f5 a2 00 00 	call	41717 <_runtime.morestack_noctxt>
 10468db:	e9 30 ff ff ff 	jmp	-208 <_runtime.traceProcStop>

_runtime.traceGCSweepStart:
 10468e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10468e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10468ed:	76 62 	jbe	98 <_runtime.traceGCSweepStart+0x71>
 10468ef:	48 83 ec 18 	sub	rsp, 24
 10468f3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10468f8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10468fd:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1046906:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104690a:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1046911:	84 00 	test	byte ptr [rax], al
 1046913:	80 b8 38 16 00 00 00 	cmp	byte ptr [rax + 5688], 0
 104691a:	75 1b 	jne	27 <_runtime.traceGCSweepStart+0x57>
 104691c:	c6 80 38 16 00 00 01 	mov	byte ptr [rax + 5688], 1
 1046923:	0f 57 c0 	xorps	xmm0, xmm0
 1046926:	0f 11 80 40 16 00 00 	movups	xmmword ptr [rax + 5696], xmm0
 104692d:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1046932:	48 83 c4 18 	add	rsp, 24
 1046936:	c3 	ret
 1046937:	48 8d 05 87 e1 02 00 	lea	rax, [rip + 188807]
 104693e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046942:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 104694b:	e8 10 24 fe ff 	call	-121840 <_runtime.throw>
 1046950:	90 	nop
 1046951:	e8 7a a2 00 00 	call	41594 <_runtime.morestack_noctxt>
 1046956:	eb 88 	jmp	-120 <_runtime.traceGCSweepStart>
 1046958:	cc 	int3
 1046959:	cc 	int3
 104695a:	cc 	int3
 104695b:	cc 	int3
 104695c:	cc 	int3
 104695d:	cc 	int3
 104695e:	cc 	int3
 104695f:	cc 	int3

_runtime.traceGCSweepSpan:
 1046960:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046969:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104696d:	76 7c 	jbe	124 <_runtime.traceGCSweepSpan+0x8b>
 104696f:	48 83 ec 38 	sub	rsp, 56
 1046973:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1046978:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 104697d:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1046986:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104698a:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1046991:	84 00 	test	byte ptr [rax], al
 1046993:	80 b8 38 16 00 00 00 	cmp	byte ptr [rax + 5688], 0
 104699a:	74 16 	je	22 <_runtime.traceGCSweepSpan+0x52>
 104699c:	48 83 b8 40 16 00 00 00 	cmp	qword ptr [rax + 5696], 0
 10469a4:	74 16 	je	22 <_runtime.traceGCSweepSpan+0x5c>
 10469a6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10469ab:	48 01 88 40 16 00 00 	add	qword ptr [rax + 5696], rcx
 10469b2:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10469b7:	48 83 c4 38 	add	rsp, 56
 10469bb:	c3 	ret
 10469bc:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 10469c1:	c6 04 24 0b 	mov	byte ptr [rsp], 11
 10469c5:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10469ce:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10469d7:	0f 57 c0 	xorps	xmm0, xmm0
 10469da:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10469df:	e8 0c f1 ff ff 	call	-3828 <_runtime.traceEvent>
 10469e4:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10469e9:	eb bb 	jmp	-69 <_runtime.traceGCSweepSpan+0x46>
 10469eb:	e8 e0 a1 00 00 	call	41440 <_runtime.morestack_noctxt>
 10469f0:	e9 6b ff ff ff 	jmp	-149 <_runtime.traceGCSweepSpan>
 10469f5:	cc 	int3
 10469f6:	cc 	int3
 10469f7:	cc 	int3
 10469f8:	cc 	int3
 10469f9:	cc 	int3
 10469fa:	cc 	int3
 10469fb:	cc 	int3
 10469fc:	cc 	int3
 10469fd:	cc 	int3
 10469fe:	cc 	int3
 10469ff:	cc 	int3

_runtime.traceGCSweepDone:
 1046a00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046a09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046a0d:	0f 86 bc 00 00 00 	jbe	188 <_runtime.traceGCSweepDone+0xcf>
 1046a13:	48 83 ec 48 	sub	rsp, 72
 1046a17:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1046a1c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1046a21:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1046a2a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1046a2e:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1046a35:	84 00 	test	byte ptr [rax], al
 1046a37:	80 b8 38 16 00 00 00 	cmp	byte ptr [rax + 5688], 0
 1046a3e:	74 75 	je	117 <_runtime.traceGCSweepDone+0xb5>
 1046a40:	48 83 b8 40 16 00 00 00 	cmp	qword ptr [rax + 5696], 0
 1046a48:	75 11 	jne	17 <_runtime.traceGCSweepDone+0x5b>
 1046a4a:	c6 80 38 16 00 00 00 	mov	byte ptr [rax + 5688], 0
 1046a51:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1046a56:	48 83 c4 48 	add	rsp, 72
 1046a5a:	c3 	ret
 1046a5b:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1046a60:	0f 57 c0 	xorps	xmm0, xmm0
 1046a63:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1046a68:	48 8b 88 40 16 00 00 	mov	rcx, qword ptr [rax + 5696]
 1046a6f:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1046a74:	48 8b 88 48 16 00 00 	mov	rcx, qword ptr [rax + 5704]
 1046a7b:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1046a80:	c6 04 24 0c 	mov	byte ptr [rsp], 12
 1046a84:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1046a8d:	48 8d 4c 24 28 	lea	rcx, [rsp + 40]
 1046a92:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1046a97:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1046aa0:	48 c7 44 24 20 02 00 00 00 	mov	qword ptr [rsp + 32], 2
 1046aa9:	e8 42 f0 ff ff 	call	-4030 <_runtime.traceEvent>
 1046aae:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1046ab3:	eb 95 	jmp	-107 <_runtime.traceGCSweepDone+0x4a>
 1046ab5:	48 8d 05 f3 e1 02 00 	lea	rax, [rip + 188915]
 1046abc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1046ac0:	48 c7 44 24 08 19 00 00 00 	mov	qword ptr [rsp + 8], 25
 1046ac9:	e8 92 22 fe ff 	call	-122222 <_runtime.throw>
 1046ace:	90 	nop
 1046acf:	e8 fc a0 00 00 	call	41212 <_runtime.morestack_noctxt>
 1046ad4:	e9 27 ff ff ff 	jmp	-217 <_runtime.traceGCSweepDone>
 1046ad9:	cc 	int3
 1046ada:	cc 	int3
 1046adb:	cc 	int3
 1046adc:	cc 	int3
 1046add:	cc 	int3
 1046ade:	cc 	int3
 1046adf:	cc 	int3

_runtime.traceGoCreate:
 1046ae0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046ae9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046aed:	0f 86 da 00 00 00 	jbe	218 <_runtime.traceGoCreate+0xed>
 1046af3:	48 83 ec 40 	sub	rsp, 64
 1046af7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1046afc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1046b01:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1046b06:	48 c7 80 c8 00 00 00 00 00 00 00 	mov	qword ptr [rax + 200], 0
 1046b11:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046b1a:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1046b1e:	48 8b 89 d0 00 00 00 	mov	rcx, qword ptr [rcx + 208]
 1046b25:	48 89 88 d0 00 00 00 	mov	qword ptr [rax + 208], rcx
 1046b2c:	48 8d 0d 6d 9d 01 00 	lea	rcx, [rip + 105837]
 1046b33:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1046b37:	e8 c4 38 fc ff 	call	-247612 <_runtime.newobject>
 1046b3c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1046b41:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1046b46:	48 ff c1 	inc	rcx
 1046b49:	48 89 08 	mov	qword ptr [rax], rcx
 1046b4c:	48 8d 0d 3d e4 08 00 	lea	rcx, [rip + 582717]
 1046b53:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1046b57:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1046b5c:	48 c7 44 24 10 01 00 00 00 	mov	qword ptr [rsp + 16], 1
 1046b65:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1046b6e:	e8 fd f7 ff ff 	call	-2051 <_runtime.(*traceStackTable).put>
 1046b73:	8b 44 24 20 	mov	eax, dword ptr [rsp + 32]
 1046b77:	0f 57 c0 	xorps	xmm0, xmm0
 1046b7a:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1046b7f:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1046b84:	48 8b 89 98 00 00 00 	mov	rcx, qword ptr [rcx + 152]
 1046b8b:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1046b90:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1046b95:	c6 04 24 0d 	mov	byte ptr [rsp], 13
 1046b99:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1046ba2:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1046ba7:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1046bac:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1046bb5:	48 c7 44 24 20 02 00 00 00 	mov	qword ptr [rsp + 32], 2
 1046bbe:	e8 2d ef ff ff 	call	-4307 <_runtime.traceEvent>
 1046bc3:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1046bc8:	48 83 c4 40 	add	rsp, 64
 1046bcc:	c3 	ret
 1046bcd:	e8 fe 9f 00 00 	call	40958 <_runtime.morestack_noctxt>
 1046bd2:	e9 09 ff ff ff 	jmp	-247 <_runtime.traceGoCreate>
 1046bd7:	cc 	int3
 1046bd8:	cc 	int3
 1046bd9:	cc 	int3
 1046bda:	cc 	int3
 1046bdb:	cc 	int3
 1046bdc:	cc 	int3
 1046bdd:	cc 	int3
 1046bde:	cc 	int3
 1046bdf:	cc 	int3

_runtime.traceGoStart:
 1046be0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046be9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046bed:	0f 86 7e 01 00 00 	jbe	382 <_runtime.traceGoStart+0x191>
 1046bf3:	48 83 ec 60 	sub	rsp, 96
 1046bf7:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 1046bfc:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1046c01:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 1046c0a:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 1046c0e:	48 8b 92 c0 00 00 00 	mov	rdx, qword ptr [rdx + 192]
 1046c15:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 1046c19:	48 8b 9b d0 00 00 00 	mov	rbx, qword ptr [rbx + 208]
 1046c20:	48 ff 82 c8 00 00 00 	inc	qword ptr [rdx + 200]
 1046c27:	48 89 de 	mov	rsi, rbx
 1046c2a:	84 03 	test	byte ptr [rbx], al
 1046c2c:	48 8b bb 80 16 00 00 	mov	rdi, qword ptr [rbx + 5760]
 1046c33:	48 39 fa 	cmp	rdx, rdi
 1046c36:	0f 85 82 00 00 00 	jne	130 <_runtime.traceGoStart+0xde>
 1046c3c:	48 c7 44 24 40 00 00 00 00 	mov	qword ptr [rsp + 64], 0
 1046c45:	0f 57 c0 	xorps	xmm0, xmm0
 1046c48:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 1046c4d:	48 8b b2 98 00 00 00 	mov	rsi, qword ptr [rdx + 152]
 1046c54:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 1046c59:	48 8b 92 c8 00 00 00 	mov	rdx, qword ptr [rdx + 200]
 1046c60:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 1046c65:	48 8b 83 88 16 00 00 	mov	rax, qword ptr [rbx + 5768]
 1046c6c:	48 83 f8 03 	cmp	rax, 3
 1046c70:	0f 83 f0 00 00 00 	jae	240 <_runtime.traceGoStart+0x186>
 1046c76:	48 8d 0d 4b e3 09 00 	lea	rcx, [rip + 648011]
 1046c7d:	48 8b 04 c1 	mov	rax, qword ptr [rcx + 8*rax]
 1046c81:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1046c86:	c6 04 24 29 	mov	byte ptr [rsp], 41
 1046c8a:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1046c93:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 1046c98:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1046c9d:	48 c7 44 24 18 03 00 00 00 	mov	qword ptr [rsp + 24], 3
 1046ca6:	48 c7 44 24 20 03 00 00 00 	mov	qword ptr [rsp + 32], 3
 1046caf:	e8 3c ee ff ff 	call	-4548 <_runtime.traceEvent>
 1046cb4:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1046cb9:	48 83 c4 60 	add	rsp, 96
 1046cbd:	c3 	ret
 1046cbe:	48 39 b2 d0 00 00 00 	cmp	qword ptr [rdx + 208], rsi
 1046cc5:	75 45 	jne	69 <_runtime.traceGoStart+0x12c>
 1046cc7:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1046cd0:	48 8b 82 98 00 00 00 	mov	rax, qword ptr [rdx + 152]
 1046cd7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1046cdc:	c6 04 24 26 	mov	byte ptr [rsp], 38
 1046ce0:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1046ce9:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1046cee:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1046cf3:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1046cfc:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1046d05:	e8 e6 ed ff ff 	call	-4634 <_runtime.traceEvent>
 1046d0a:	eb a8 	jmp	-88 <_runtime.traceGoStart+0xd4>
 1046d0c:	48 89 b2 d0 00 00 00 	mov	qword ptr [rdx + 208], rsi
 1046d13:	0f 57 c0 	xorps	xmm0, xmm0
 1046d16:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 1046d1b:	48 8b 82 98 00 00 00 	mov	rax, qword ptr [rdx + 152]
 1046d22:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1046d27:	48 8b 82 c8 00 00 00 	mov	rax, qword ptr [rdx + 200]
 1046d2e:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1046d33:	c6 04 24 0e 	mov	byte ptr [rsp], 14
 1046d37:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1046d40:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 1046d45:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1046d4a:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1046d53:	48 c7 44 24 20 02 00 00 00 	mov	qword ptr [rsp + 32], 2
 1046d5c:	e8 8f ed ff ff 	call	-4721 <_runtime.traceEvent>
 1046d61:	e9 4e ff ff ff 	jmp	-178 <_runtime.traceGoStart+0xd4>
 1046d66:	b9 03 00 00 00 	mov	ecx, 3
 1046d6b:	e8 e0 c5 00 00 	call	50656 <_runtime.panicIndex>
 1046d70:	90 	nop
 1046d71:	e8 5a 9e 00 00 	call	40538 <_runtime.morestack_noctxt>
 1046d76:	e9 65 fe ff ff 	jmp	-411 <_runtime.traceGoStart>
 1046d7b:	cc 	int3
 1046d7c:	cc 	int3
 1046d7d:	cc 	int3
 1046d7e:	cc 	int3
 1046d7f:	cc 	int3

_runtime.traceGoPark:
 1046d80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046d89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046d8d:	76 72 	jbe	114 <_runtime.traceGoPark+0x81>
 1046d8f:	48 83 ec 30 	sub	rsp, 48
 1046d93:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1046d98:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1046d9d:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 1046da2:	f6 c0 80 	test	al, -128
 1046da5:	75 30 	jne	48 <_runtime.traceGoPark+0x57>
 1046da7:	83 e0 7f 	and	eax, 127
 1046daa:	88 04 24 	mov	byte ptr [rsp], al
 1046dad:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1046db2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1046db7:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1046dc0:	0f 57 c0 	xorps	xmm0, xmm0
 1046dc3:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1046dc8:	e8 23 ed ff ff 	call	-4829 <_runtime.traceEvent>
 1046dcd:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1046dd2:	48 83 c4 30 	add	rsp, 48
 1046dd6:	c3 	ret
 1046dd7:	c6 04 24 24 	mov	byte ptr [rsp], 36
 1046ddb:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1046de4:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1046ded:	0f 57 c0 	xorps	xmm0, xmm0
 1046df0:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1046df5:	e8 f6 ec ff ff 	call	-4874 <_runtime.traceEvent>
 1046dfa:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 1046dff:	eb a6 	jmp	-90 <_runtime.traceGoPark+0x27>
 1046e01:	e8 ca 9d 00 00 	call	40394 <_runtime.morestack_noctxt>
 1046e06:	e9 75 ff ff ff 	jmp	-139 <_runtime.traceGoPark>
 1046e0b:	cc 	int3
 1046e0c:	cc 	int3
 1046e0d:	cc 	int3
 1046e0e:	cc 	int3
 1046e0f:	cc 	int3

_runtime.traceGoUnpark:
 1046e10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046e19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046e1d:	0f 86 dd 00 00 00 	jbe	221 <_runtime.traceGoUnpark+0xf0>
 1046e23:	48 83 ec 48 	sub	rsp, 72
 1046e27:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1046e2c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1046e31:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1046e3a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1046e3e:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 1046e45:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1046e4a:	48 ff 81 c8 00 00 00 	inc	qword ptr [rcx + 200]
 1046e51:	48 39 81 d0 00 00 00 	cmp	qword ptr [rcx + 208], rax
 1046e58:	75 4e 	jne	78 <_runtime.traceGoUnpark+0x98>
 1046e5a:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1046e63:	48 8b 81 98 00 00 00 	mov	rax, qword ptr [rcx + 152]
 1046e6a:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1046e6f:	c6 04 24 27 	mov	byte ptr [rsp], 39
 1046e73:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1046e78:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1046e7d:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1046e82:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1046e87:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1046e90:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1046e99:	e8 52 ec ff ff 	call	-5038 <_runtime.traceEvent>
 1046e9e:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1046ea3:	48 83 c4 48 	add	rsp, 72
 1046ea7:	c3 	ret
 1046ea8:	48 89 81 d0 00 00 00 	mov	qword ptr [rcx + 208], rax
 1046eaf:	0f 57 c0 	xorps	xmm0, xmm0
 1046eb2:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 1046eb7:	48 8b 81 98 00 00 00 	mov	rax, qword ptr [rcx + 152]
 1046ebe:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1046ec3:	48 8b 81 c8 00 00 00 	mov	rax, qword ptr [rcx + 200]
 1046eca:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1046ecf:	c6 04 24 15 	mov	byte ptr [rsp], 21
 1046ed3:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1046ed8:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1046edd:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 1046ee2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1046ee7:	48 c7 44 24 18 02 00 00 00 	mov	qword ptr [rsp + 24], 2
 1046ef0:	48 c7 44 24 20 02 00 00 00 	mov	qword ptr [rsp + 32], 2
 1046ef9:	e8 f2 eb ff ff 	call	-5134 <_runtime.traceEvent>
 1046efe:	eb 9e 	jmp	-98 <_runtime.traceGoUnpark+0x8e>
 1046f00:	e8 cb 9c 00 00 	call	40139 <_runtime.morestack_noctxt>
 1046f05:	e9 06 ff ff ff 	jmp	-250 <_runtime.traceGoUnpark>
 1046f0a:	cc 	int3
 1046f0b:	cc 	int3
 1046f0c:	cc 	int3
 1046f0d:	cc 	int3
 1046f0e:	cc 	int3
 1046f0f:	cc 	int3

_runtime.traceGoSysCall:
 1046f10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046f19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046f1d:	76 3b 	jbe	59 <_runtime.traceGoSysCall+0x4a>
 1046f1f:	48 83 ec 30 	sub	rsp, 48
 1046f23:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1046f28:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1046f2d:	c6 04 24 1c 	mov	byte ptr [rsp], 28
 1046f31:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1046f3a:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1046f43:	0f 57 c0 	xorps	xmm0, xmm0
 1046f46:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1046f4b:	e8 a0 eb ff ff 	call	-5216 <_runtime.traceEvent>
 1046f50:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1046f55:	48 83 c4 30 	add	rsp, 48
 1046f59:	c3 	ret
 1046f5a:	e8 71 9c 00 00 	call	40049 <_runtime.morestack_noctxt>
 1046f5f:	eb af 	jmp	-81 <_runtime.traceGoSysCall>
 1046f61:	cc 	int3
 1046f62:	cc 	int3
 1046f63:	cc 	int3
 1046f64:	cc 	int3
 1046f65:	cc 	int3
 1046f66:	cc 	int3
 1046f67:	cc 	int3
 1046f68:	cc 	int3
 1046f69:	cc 	int3
 1046f6a:	cc 	int3
 1046f6b:	cc 	int3
 1046f6c:	cc 	int3
 1046f6d:	cc 	int3
 1046f6e:	cc 	int3
 1046f6f:	cc 	int3

_runtime.traceGoSysExit:
 1046f70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046f79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1046f7d:	0f 86 ba 00 00 00 	jbe	186 <_runtime.traceGoSysExit+0xcd>
 1046f83:	48 83 ec 48 	sub	rsp, 72
 1046f87:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1046f8c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1046f91:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1046f96:	48 85 c0 	test	rax, rax
 1046f99:	74 0b 	je	11 <_runtime.traceGoSysExit+0x36>
 1046f9b:	48 39 05 9e df 08 00 	cmp	qword ptr [rip + 581534], rax
 1046fa2:	7e 02 	jle	2 <_runtime.traceGoSysExit+0x36>
 1046fa4:	31 c0 	xor	eax, eax
 1046fa6:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1046faf:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1046fb3:	48 8b 89 c0 00 00 00 	mov	rcx, qword ptr [rcx + 192]
 1046fba:	48 ff 81 c8 00 00 00 	inc	qword ptr [rcx + 200]
 1046fc1:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 1046fc5:	48 8b 92 d0 00 00 00 	mov	rdx, qword ptr [rdx + 208]
 1046fcc:	48 89 91 d0 00 00 00 	mov	qword ptr [rcx + 208], rdx
 1046fd3:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1046fdc:	0f 57 c0 	xorps	xmm0, xmm0
 1046fdf:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 1046fe4:	48 8b 91 98 00 00 00 	mov	rdx, qword ptr [rcx + 152]
 1046feb:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1046ff0:	48 8b 89 c8 00 00 00 	mov	rcx, qword ptr [rcx + 200]
 1046ff7:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1046ffc:	48 c1 e8 06 	shr	rax, 6
 1047000:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1047005:	c6 04 24 1d 	mov	byte ptr [rsp], 29
 1047009:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1047012:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1047017:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104701c:	48 c7 44 24 18 03 00 00 00 	mov	qword ptr [rsp + 24], 3
 1047025:	48 c7 44 24 20 03 00 00 00 	mov	qword ptr [rsp + 32], 3
 104702e:	e8 bd ea ff ff 	call	-5443 <_runtime.traceEvent>
 1047033:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1047038:	48 83 c4 48 	add	rsp, 72
 104703c:	c3 	ret
 104703d:	e8 8e 9b 00 00 	call	39822 <_runtime.morestack_noctxt>
 1047042:	e9 29 ff ff ff 	jmp	-215 <_runtime.traceGoSysExit>
 1047047:	cc 	int3
 1047048:	cc 	int3
 1047049:	cc 	int3
 104704a:	cc 	int3
 104704b:	cc 	int3
 104704c:	cc 	int3
 104704d:	cc 	int3
 104704e:	cc 	int3
 104704f:	cc 	int3

_runtime.traceGoSysBlock:
 1047050:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1047059:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104705d:	0f 86 b3 00 00 00 	jbe	179 <_runtime.traceGoSysBlock+0xc6>
 1047063:	48 83 ec 40 	sub	rsp, 64
 1047067:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104706c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1047071:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104707a:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104707e:	90 	nop
 104707f:	ff 81 08 01 00 00 	inc	dword ptr [rcx + 264]
 1047085:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 1047089:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104708e:	84 00 	test	byte ptr [rax], al
 1047090:	48 8b 81 d0 00 00 00 	mov	rax, qword ptr [rcx + 208]
 1047097:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104709c:	90 	nop
 104709d:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 10470a2:	48 89 91 d0 00 00 00 	mov	qword ptr [rcx + 208], rdx
 10470a9:	c6 04 24 1e 	mov	byte ptr [rsp], 30
 10470ad:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 10470b6:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10470bf:	0f 57 c0 	xorps	xmm0, xmm0
 10470c2:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10470c7:	e8 24 ea ff ff 	call	-5596 <_runtime.traceEvent>
 10470cc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10470d1:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10470d6:	48 89 81 d0 00 00 00 	mov	qword ptr [rcx + 208], rax
 10470dd:	90 	nop
 10470de:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10470e7:	8b 91 08 01 00 00 	mov	edx, dword ptr [rcx + 264]
 10470ed:	8d 5a ff 	lea	ebx, [rdx - 1]
 10470f0:	89 99 08 01 00 00 	mov	dword ptr [rcx + 264], ebx
 10470f6:	83 fa 01 	cmp	edx, 1
 10470f9:	75 11 	jne	17 <_runtime.traceGoSysBlock+0xbc>
 10470fb:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 1047102:	74 08 	je	8 <_runtime.traceGoSysBlock+0xbc>
 1047104:	48 c7 40 10 de fa ff ff 	mov	qword ptr [rax + 16], -1314
 104710c:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1047111:	48 83 c4 40 	add	rsp, 64
 1047115:	c3 	ret
 1047116:	e8 b5 9a 00 00 	call	39605 <_runtime.morestack_noctxt>
 104711b:	e9 30 ff ff ff 	jmp	-208 <_runtime.traceGoSysBlock>

_runtime.traceHeapAlloc:
 1047120:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1047129:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104712d:	76 5b 	jbe	91 <_runtime.traceHeapAlloc+0x6a>
 104712f:	48 83 ec 38 	sub	rsp, 56
 1047133:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1047138:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 104713d:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 1047146:	48 8b 05 23 2c 0b 00 	mov	rax, qword ptr [rip + 732195]
 104714d:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1047152:	c6 04 24 21 	mov	byte ptr [rsp], 33
 1047156:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 104715f:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 1047164:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1047169:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 1047172:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 104717b:	e8 70 e9 ff ff 	call	-5776 <_runtime.traceEvent>
 1047180:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1047185:	48 83 c4 38 	add	rsp, 56
 1047189:	c3 	ret
 104718a:	e8 41 9a 00 00 	call	39489 <_runtime.morestack_noctxt>
 104718f:	eb 8f 	jmp	-113 <_runtime.traceHeapAlloc>
 1047191:	cc 	int3
 1047192:	cc 	int3
 1047193:	cc 	int3
 1047194:	cc 	int3
 1047195:	cc 	int3
 1047196:	cc 	int3
 1047197:	cc 	int3
 1047198:	cc 	int3
 1047199:	cc 	int3
 104719a:	cc 	int3
 104719b:	cc 	int3
 104719c:	cc 	int3
 104719d:	cc 	int3
 104719e:	cc 	int3
 104719f:	cc 	int3

_runtime.traceNextGC:
 10471a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10471a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10471ad:	0f 86 a7 00 00 00 	jbe	167 <_runtime.traceNextGC+0xba>
 10471b3:	48 83 ec 38 	sub	rsp, 56
 10471b7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 10471bc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 10471c1:	48 83 3d ff 14 0b 00 ff 	cmp	qword ptr [rip + 726271], -1
 10471c9:	75 4a 	jne	74 <_runtime.traceNextGC+0x75>
 10471cb:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 10471d4:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 10471dd:	c6 04 24 22 	mov	byte ptr [rsp], 34
 10471e1:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 10471ea:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 10471ef:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10471f4:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 10471fd:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1047206:	e8 e5 e8 ff ff 	call	-5915 <_runtime.traceEvent>
 104720b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1047210:	48 83 c4 38 	add	rsp, 56
 1047214:	c3 	ret
 1047215:	48 c7 44 24 28 00 00 00 00 	mov	qword ptr [rsp + 40], 0
 104721e:	48 8b 05 a3 14 0b 00 	mov	rax, qword ptr [rip + 726179]
 1047225:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104722a:	c6 04 24 22 	mov	byte ptr [rsp], 34
 104722e:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 1047237:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104723c:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1047241:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 104724a:	48 c7 44 24 20 01 00 00 00 	mov	qword ptr [rsp + 32], 1
 1047253:	e8 98 e8 ff ff 	call	-5992 <_runtime.traceEvent>
 1047258:	eb b1 	jmp	-79 <_runtime.traceNextGC+0x6b>
 104725a:	e8 71 99 00 00 	call	39281 <_runtime.morestack_noctxt>
 104725f:	e9 3c ff ff ff 	jmp	-196 <_runtime.traceNextGC>
 1047264:	cc 	int3
 1047265:	cc 	int3
 1047266:	cc 	int3
 1047267:	cc 	int3
 1047268:	cc 	int3
 1047269:	cc 	int3
 104726a:	cc 	int3
 104726b:	cc 	int3
 104726c:	cc 	int3
 104726d:	cc 	int3
 104726e:	cc 	int3
 104726f:	cc 	int3

_runtime.tracebackdefers:
 1047270:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1047279:	48 8d 44 24 d0 	lea	rax, [rsp - 48]
 104727e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1047282:	0f 86 ff 01 00 00 	jbe	511 <_runtime.tracebackdefers+0x217>
 1047288:	48 81 ec b0 00 00 00 	sub	rsp, 176
 104728f:	48 89 ac 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rbp
 1047297:	48 8d ac 24 a8 00 00 00 	lea	rbp, [rsp + 168]
 104729f:	48 c7 44 24 50 00 00 00 00 	mov	qword ptr [rsp + 80], 0
 10472a8:	48 8d 7c 24 58 	lea	rdi, [rsp + 88]
 10472ad:	0f 57 c0 	xorps	xmm0, xmm0
 10472b0:	48 8d 7f d0 	lea	rdi, [rdi - 48]
 10472b4:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 10472b9:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 10472be:	e8 42 c2 00 00 	call	49730 <_runtime.duffzero+0x115>
 10472c3:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 10472c7:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 10472cf:	48 8b 40 28 	mov	rax, qword ptr [rax + 40]
 10472d3:	eb 0c 	jmp	12 <_runtime.tracebackdefers+0x71>
 10472d5:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10472da:	48 8b 41 28 	mov	rax, qword ptr [rcx + 40]
 10472de:	0f 57 c0 	xorps	xmm0, xmm0
 10472e1:	48 85 c0 	test	rax, rax
 10472e4:	0f 84 33 01 00 00 	je	307 <_runtime.tracebackdefers+0x1ad>
 10472ea:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 10472ef:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 10472f3:	48 85 c9 	test	rcx, rcx
 10472f6:	75 66 	jne	102 <_runtime.tracebackdefers+0xee>
 10472f8:	48 c7 44 24 60 00 00 00 00 	mov	qword ptr [rsp + 96], 0
 1047301:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 1047306:	0f 11 84 24 90 00 00 00 	movups	xmmword ptr [rsp + 144], xmm0
 104730e:	48 c7 84 24 a0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 160], 0
 104731a:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 104731f:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1047324:	48 8d 44 24 50 	lea	rax, [rsp + 80]
 1047329:	48 89 04 24 	mov	qword ptr [rsp], rax
 104732d:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1047335:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104733a:	48 8b 94 24 c0 00 00 00 	mov	rdx, qword ptr [rsp + 192]
 1047342:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 1047345:	ff d1 	call	rcx
 1047347:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 104734c:	75 87 	jne	-121 <_runtime.tracebackdefers+0x65>
 104734e:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 1047356:	48 81 c4 b0 00 00 00 	add	rsp, 176
 104735d:	c3 	ret
 104735e:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1047363:	48 8b 01 	mov	rax, qword ptr [rcx]
 1047366:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 104736b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104736f:	e8 fc a7 ff ff 	call	-22532 <_runtime.findfunc>
 1047374:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1047379:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104737e:	48 85 c9 	test	rcx, rcx
 1047381:	0f 84 a6 00 00 00 	je	166 <_runtime.tracebackdefers+0x1bd>
 1047387:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 104738c:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1047391:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1047396:	83 3b 00 	cmp	dword ptr [rbx], 0
 1047399:	75 7b 	jne	123 <_runtime.tracebackdefers+0x1a6>
 104739b:	31 d2 	xor	edx, edx
 104739d:	48 89 94 24 90 00 00 00 	mov	qword ptr [rsp + 144], rdx
 10473a5:	8b 71 0c 	mov	esi, dword ptr [rcx + 12]
 10473a8:	48 63 fe 	movsxd	rdi, esi
 10473ab:	48 89 bc 24 98 00 00 00 	mov	qword ptr [rsp + 152], rdi
 10473b3:	48 c7 84 24 a0 00 00 00 00 00 00 00 	mov	qword ptr [rsp + 160], 0
 10473bf:	81 fe 00 00 00 80 	cmp	esi, 2147483648
 10473c5:	0f 85 4f ff ff ff 	jne	-177 <_runtime.tracebackdefers+0xaa>
 10473cb:	48 8d 54 24 50 	lea	rdx, [rsp + 80]
 10473d0:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10473d4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10473d9:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10473de:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 10473e3:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10473e8:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 10473ed:	e8 0e 1b 00 00 	call	6926 <_runtime.getArgInfo>
 10473f2:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10473f7:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10473fc:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 1047404:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 104740c:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1047411:	e9 04 ff ff ff 	jmp	-252 <_runtime.tracebackdefers+0xaa>
 1047416:	90 	nop
 1047417:	48 8d 53 48 	lea	rdx, [rbx + 72]
 104741b:	eb 80 	jmp	-128 <_runtime.tracebackdefers+0x12d>
 104741d:	48 8b ac 24 a8 00 00 00 	mov	rbp, qword ptr [rsp + 168]
 1047425:	48 81 c4 b0 00 00 00 	add	rsp, 176
 104742c:	c3 	ret
 104742d:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 1047432:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1047437:	e8 64 30 fe ff 	call	-118684 <_runtime.printlock>
 104743c:	48 8d 05 fd e1 02 00 	lea	rax, [rip + 188925]
 1047443:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047447:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 1047450:	e8 8b 39 fe ff 	call	-116341 <_runtime.printstring>
 1047455:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104745a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104745e:	e8 2d 38 fe ff 	call	-116691 <_runtime.printhex>
 1047463:	e8 c8 32 fe ff 	call	-118072 <_runtime.printnl>
 1047468:	e8 b3 30 fe ff 	call	-118605 <_runtime.printunlock>
 104746d:	48 8d 05 61 be 02 00 	lea	rax, [rip + 179809]
 1047474:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047478:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1047481:	e8 da 18 fe ff 	call	-124710 <_runtime.throw>
 1047486:	90 	nop
 1047487:	e8 44 97 00 00 	call	38724 <_runtime.morestack_noctxt>
 104748c:	e9 df fd ff ff 	jmp	-545 <_runtime.tracebackdefers>
 1047491:	cc 	int3
 1047492:	cc 	int3
 1047493:	cc 	int3
 1047494:	cc 	int3
 1047495:	cc 	int3
 1047496:	cc 	int3
 1047497:	cc 	int3
 1047498:	cc 	int3
 1047499:	cc 	int3
 104749a:	cc 	int3
 104749b:	cc 	int3
 104749c:	cc 	int3
 104749d:	cc 	int3
 104749e:	cc 	int3
 104749f:	cc 	int3

_runtime.gentraceback:
 10474a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10474a9:	48 8d 84 24 b0 fd ff ff 	lea	rax, [rsp - 592]
 10474b1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10474b5:	0f 86 2c 1a 00 00 	jbe	6700 <_runtime.gentraceback+0x1a47>
 10474bb:	48 81 ec d0 02 00 00 	sub	rsp, 720
 10474c2:	48 89 ac 24 c8 02 00 00 	mov	qword ptr [rsp + 712], rbp
 10474ca:	48 8d ac 24 c8 02 00 00 	lea	rbp, [rsp + 712]
 10474d2:	48 8b 84 24 f8 02 00 00 	mov	rax, qword ptr [rsp + 760]
 10474da:	48 85 c0 	test	rax, rax
 10474dd:	0f 8e b0 17 00 00 	jle	6064 <_runtime.gentraceback+0x17f3>
 10474e3:	48 8b 8c 24 10 03 00 00 	mov	rcx, qword ptr [rsp + 784]
 10474eb:	48 85 c9 	test	rcx, rcx
 10474ee:	0f 85 d9 19 00 00 	jne	6617 <_runtime.gentraceback+0x1a2d>
 10474f4:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 10474fd:	48 8b 9c 24 f0 02 00 00 	mov	rbx, qword ptr [rsp + 752]
 1047505:	48 39 d3 	cmp	rbx, rdx
 1047508:	75 11 	jne	17 <_runtime.gentraceback+0x7b>
 104750a:	48 8b 72 30 	mov	rsi, qword ptr [rdx + 48]
 104750e:	48 39 96 c0 00 00 00 	cmp	qword ptr [rsi + 192], rdx
 1047515:	0f 84 99 19 00 00 	je	6553 <_runtime.gentraceback+0x1a14>
 104751b:	8b 35 4b 3c 08 00 	mov	esi, dword ptr [rip + 539723]
 1047521:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 1047525:	0f b6 92 29 01 00 00 	movzx	edx, byte ptr [rdx + 297]
 104752c:	c1 ee 02 	shr	esi, 2
 104752f:	84 d2 	test	dl, dl
 1047531:	0f 45 f2 	cmovne	esi, edx
 1047534:	48 8b 94 24 d8 02 00 00 	mov	rdx, qword ptr [rsp + 728]
 104753c:	48 83 fa ff 	cmp	rdx, -1
 1047540:	0f 85 43 17 00 00 	jne	5955 <_runtime.gentraceback+0x17e9>
 1047546:	4c 8b 84 24 e0 02 00 00 	mov	r8, qword ptr [rsp + 736]
 104754e:	49 83 f8 ff 	cmp	r8, -1
 1047552:	0f 85 1f 17 00 00 	jne	5919 <_runtime.gentraceback+0x17d7>
 1047558:	48 8b 53 70 	mov	rdx, qword ptr [rbx + 112]
 104755c:	48 85 d2 	test	rdx, rdx
 104755f:	0f 84 01 17 00 00 	je	5889 <_runtime.gentraceback+0x17c6>
 1047565:	4c 8b 43 78 	mov	r8, qword ptr [rbx + 120]
 1047569:	31 ff 	xor	edi, edi
 104756b:	48 c7 84 24 70 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 624], 0
 1047577:	49 89 f9 	mov	r9, rdi
 104757a:	48 8d bc 24 78 02 00 00 	lea	rdi, [rsp + 632]
 1047582:	0f 57 c0 	xorps	xmm0, xmm0
 1047585:	48 8d 7f d0 	lea	rdi, [rdi - 48]
 1047589:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 104758e:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1047593:	e8 6d bf 00 00 	call	49005 <_runtime.duffzero+0x115>
 1047598:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 104759c:	4c 89 84 24 80 02 00 00 	mov	qword ptr [rsp + 640], r8
 10475a4:	48 89 94 24 98 02 00 00 	mov	qword ptr [rsp + 664], rdx
 10475ac:	4c 8b 93 48 01 00 00 	mov	r10, qword ptr [rbx + 328]
 10475b3:	4c 8b 9b 40 01 00 00 	mov	r11, qword ptr [rbx + 320]
 10475ba:	4c 8b a4 24 00 03 00 00 	mov	r12, qword ptr [rsp + 768]
 10475c2:	4d 85 e4 	test	r12, r12
 10475c5:	0f 84 8f 16 00 00 	je	5775 <_runtime.gentraceback+0x17ba>
 10475cb:	31 ff 	xor	edi, edi
 10475cd:	40 88 7c 24 3d 	mov	byte ptr [rsp + 61], dil
 10475d2:	4c 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], r10
 10475da:	4c 89 9c 24 48 02 00 00 	mov	qword ptr [rsp + 584], r11
 10475e2:	4c 89 8c 24 68 02 00 00 	mov	qword ptr [rsp + 616], r9
 10475ea:	89 74 24 40 	mov	dword ptr [rsp + 64], esi
 10475ee:	4d 85 c0 	test	r8, r8
 10475f1:	75 1a 	jne	26 <_runtime.gentraceback+0x16d>
 10475f3:	49 89 d0 	mov	r8, rdx
 10475f6:	48 8b 12 	mov	rdx, qword ptr [rdx]
 10475f9:	48 89 94 24 80 02 00 00 	mov	qword ptr [rsp + 640], rdx
 1047601:	49 8d 50 08 	lea	rdx, [r8 + 8]
 1047605:	48 89 94 24 98 02 00 00 	mov	qword ptr [rsp + 664], rdx
 104760d:	48 8b 84 24 80 02 00 00 	mov	rax, qword ptr [rsp + 640]
 1047615:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047619:	e8 52 a5 ff ff 	call	-23214 <_runtime.findfunc>
 104761e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1047623:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1047628:	48 85 c9 	test	rcx, rcx
 104762b:	0f 84 5d 15 00 00 	je	5469 <_runtime.gentraceback+0x16ee>
 1047631:	48 89 8c 24 70 02 00 00 	mov	qword ptr [rsp + 624], rcx
 1047639:	48 89 84 24 78 02 00 00 	mov	qword ptr [rsp + 632], rax
 1047641:	48 8d bc 24 e0 00 00 00 	lea	rdi, [rsp + 224]
 1047649:	0f 57 c0 	xorps	xmm0, xmm0
 104764c:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1047651:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1047656:	e8 79 be 00 00 	call	48761 <_runtime.duffzero+0xe4>
 104765b:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 104765f:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 1047667:	48 8b 8c 24 f0 02 00 00 	mov	rcx, qword ptr [rsp + 752]
 104766f:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 1047677:	48 8b b4 24 48 02 00 00 	mov	rsi, qword ptr [rsp + 584]
 104767f:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 1047687:	4c 8b 8c 24 68 02 00 00 	mov	r9, qword ptr [rsp + 616]
 104768f:	31 d2 	xor	edx, edx
 1047691:	31 ff 	xor	edi, edi
 1047693:	45 31 d2 	xor	r10d, r10d
 1047696:	45 31 db 	xor	r11d, r11d
 1047699:	e9 83 00 00 00 	jmp	131 <_runtime.gentraceback+0x281>
 104769e:	4c 89 b4 24 70 02 00 00 	mov	qword ptr [rsp + 624], r14
 10476a6:	4c 8b ac 24 20 02 00 00 	mov	r13, qword ptr [rsp + 544]
 10476ae:	4c 89 ac 24 78 02 00 00 	mov	qword ptr [rsp + 632], r13
 10476b6:	4c 8b ac 24 90 02 00 00 	mov	r13, qword ptr [rsp + 656]
 10476be:	4c 89 ac 24 80 02 00 00 	mov	qword ptr [rsp + 640], r13
 10476c6:	48 c7 84 24 90 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 656], 0
 10476d2:	4c 8b ac 24 a0 02 00 00 	mov	r13, qword ptr [rsp + 672]
 10476da:	4c 89 ac 24 98 02 00 00 	mov	qword ptr [rsp + 664], r13
 10476e2:	48 c7 84 24 a0 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 672], 0
 10476ee:	48 c7 84 24 c0 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 704], 0
 10476fa:	41 80 fc 09 	cmp	r12b, 9
 10476fe:	41 0f 94 c4 	sete	r12b
 1047702:	4c 8b ac 24 08 03 00 00 	mov	r13, qword ptr [rsp + 776]
 104770a:	4c 8b b4 24 f0 02 00 00 	mov	r14, qword ptr [rsp + 752]
 1047712:	4c 89 e8 	mov	rax, r13
 1047715:	4c 89 f1 	mov	rcx, r14
 1047718:	48 89 fa 	mov	rdx, rdi
 104771b:	45 31 c9 	xor	r9d, r9d
 104771e:	44 89 e7 	mov	edi, r12d
 1047721:	48 39 c2 	cmp	rdx, rax
 1047724:	0f 8d 4e 14 00 00 	jge	5198 <_runtime.gentraceback+0x16d8>
 104772a:	4c 8b a4 24 70 02 00 00 	mov	r12, qword ptr [rsp + 624]
 1047732:	4c 8b ac 24 78 02 00 00 	mov	r13, qword ptr [rsp + 632]
 104773a:	41 83 7c 24 14 00 	cmp	dword ptr [r12 + 20], 0
 1047740:	0f 84 1c 14 00 00 	je	5148 <_runtime.gentraceback+0x16c2>
 1047746:	48 89 54 24 78 	mov	qword ptr [rsp + 120], rdx
 104774b:	4c 89 5c 24 60 	mov	qword ptr [rsp + 96], r11
 1047750:	48 89 9c 24 f8 02 00 00 	mov	qword ptr [rsp + 760], rbx
 1047758:	44 88 54 24 3b 	mov	byte ptr [rsp + 59], r10b
 104775d:	4c 89 8c 24 40 02 00 00 	mov	qword ptr [rsp + 576], r9
 1047765:	40 88 7c 24 3a 	mov	byte ptr [rsp + 58], dil
 104776a:	48 83 bc 24 a0 02 00 00 00 	cmp	qword ptr [rsp + 672], 0
 1047773:	0f 84 2e 12 00 00 	je	4654 <_runtime.gentraceback+0x1507>
 1047779:	4c 8b 71 30 	mov	r14, qword ptr [rcx + 48]
 104777d:	4d 85 f6 	test	r14, r14
 1047780:	0f 84 19 12 00 00 	je	4633 <_runtime.gentraceback+0x14ff>
 1047786:	49 39 0e 	cmp	qword ptr [r14], rcx
 1047789:	41 0f 94 c6 	sete	r14b
 104778d:	4c 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], r8
 1047795:	48 89 b4 24 60 02 00 00 	mov	qword ptr [rsp + 608], rsi
 104779d:	4c 89 ac 24 10 02 00 00 	mov	qword ptr [rsp + 528], r13
 10477a5:	4c 89 a4 24 38 02 00 00 	mov	qword ptr [rsp + 568], r12
 10477ad:	45 0f b6 7c 24 24 	movzx	r15d, byte ptr [r12 + 36]
 10477b3:	41 80 ff 02 	cmp	r15b, 2
 10477b7:	0f 85 40 0f 00 00 	jne	3904 <_runtime.gentraceback+0x125d>
 10477bd:	48 c7 84 24 90 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 656], 0
 10477c9:	45 31 f6 	xor	r14d, r14d
 10477cc:	45 31 ff 	xor	r15d, r15d
 10477cf:	48 8b 8c 24 a0 02 00 00 	mov	rcx, qword ptr [rsp + 672]
 10477d7:	48 89 8c 24 a8 02 00 00 	mov	qword ptr [rsp + 680], rcx
 10477df:	48 8d 41 f8 	lea	rax, [rcx - 8]
 10477e3:	48 89 84 24 a8 02 00 00 	mov	qword ptr [rsp + 680], rax
 10477eb:	48 39 84 24 98 02 00 00 	cmp	qword ptr [rsp + 664], rax
 10477f3:	73 15 	jae	21 <_runtime.gentraceback+0x36a>
 10477f5:	80 3d 44 4f 08 00 00 	cmp	byte ptr [rip + 544580], 0
 10477fc:	74 0c 	je	12 <_runtime.gentraceback+0x36a>
 10477fe:	48 8d 41 f0 	lea	rax, [rcx - 16]
 1047802:	48 89 84 24 a8 02 00 00 	mov	qword ptr [rsp + 680], rax
 104780a:	4c 89 b4 24 28 02 00 00 	mov	qword ptr [rsp + 552], r14
 1047812:	4c 89 bc 24 20 02 00 00 	mov	qword ptr [rsp + 544], r15
 104781a:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1047822:	48 85 c0 	test	rax, rax
 1047825:	0f 84 bd 0e 00 00 	je	3773 <_runtime.gentraceback+0x1248>
 104782b:	48 8b 8c 24 a0 02 00 00 	mov	rcx, qword ptr [rsp + 672]
 1047833:	48 89 8c 24 b0 02 00 00 	mov	qword ptr [rsp + 688], rcx
 104783b:	0f 84 a0 0e 00 00 	je	3744 <_runtime.gentraceback+0x1241>
 1047841:	41 81 7c 24 0c 00 00 00 80 	cmp	dword ptr [r12 + 12], 2147483648
 104784a:	0f 94 c1 	sete	cl
 104784d:	4d 63 7c 24 0c 	movsxd	r15, dword ptr [r12 + 12]
 1047852:	4c 89 bc 24 b8 02 00 00 	mov	qword ptr [rsp + 696], r15
 104785a:	48 c7 84 24 c0 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 704], 0
 1047866:	84 c9 	test	cl, cl
 1047868:	0f 85 dd 0d 00 00 	jne	3549 <_runtime.gentraceback+0x11ab>
 104786e:	48 8b 8c 24 80 02 00 00 	mov	rcx, qword ptr [rsp + 640]
 1047876:	48 89 8c 24 88 02 00 00 	mov	qword ptr [rsp + 648], rcx
 104787e:	40 84 ff 	test	dil, dil
 1047881:	0f 84 bc 0d 00 00 	je	3516 <_runtime.gentraceback+0x11a3>
 1047887:	48 8b 8c 24 70 02 00 00 	mov	rcx, qword ptr [rsp + 624]
 104788f:	44 8b 49 10 	mov	r9d, dword ptr [rcx + 16]
 1047893:	45 85 c9 	test	r9d, r9d
 1047896:	0f 84 93 0d 00 00 	je	3475 <_runtime.gentraceback+0x118f>
 104789c:	48 8b 09 	mov	rcx, qword ptr [rcx]
 104789f:	49 8d 0c 09 	lea	rcx, [r9 + rcx]
 10478a3:	48 8d 49 01 	lea	rcx, [rcx + 1]
 10478a7:	48 89 8c 24 88 02 00 00 	mov	qword ptr [rsp + 648], rcx
 10478af:	48 85 c0 	test	rax, rax
 10478b2:	0f 85 d5 0c 00 00 	jne	3285 <_runtime.gentraceback+0x10ed>
 10478b8:	48 8b 8c 24 00 03 00 00 	mov	rcx, qword ptr [rsp + 768]
 10478c0:	48 85 c9 	test	rcx, rcx
 10478c3:	0f 85 db 09 00 00 	jne	2523 <_runtime.gentraceback+0xe04>
 10478c9:	48 89 9c 24 f8 02 00 00 	mov	qword ptr [rsp + 760], rbx
 10478d1:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 10478d7:	45 84 c9 	test	r9b, r9b
 10478da:	0f 85 13 01 00 00 	jne	275 <_runtime.gentraceback+0x553>
 10478e0:	48 8d 7a 01 	lea	rdi, [rdx + 1]
 10478e4:	41 80 7c 24 24 0e 	cmp	byte ptr [r12 + 36], 14
 10478ea:	75 17 	jne	23 <_runtime.gentraceback+0x463>
 10478ec:	4d 85 c0 	test	r8, r8
 10478ef:	7e 12 	jle	18 <_runtime.gentraceback+0x463>
 10478f1:	4e 8b 6c c6 f8 	mov	r13, qword ptr [rsi + 8*r8 - 8]
 10478f6:	48 85 db 	test	rbx, rbx
 10478f9:	75 05 	jne	5 <_runtime.gentraceback+0x460>
 10478fb:	48 85 c0 	test	rax, rax
 10478fe:	74 6b 	je	107 <_runtime.gentraceback+0x4cb>
 1047900:	49 ff c8 	dec	r8
 1047903:	45 0f b6 64 24 24 	movzx	r12d, byte ptr [r12 + 36]
 1047909:	41 80 fc 09 	cmp	r12b, 9
 104790d:	4d 85 f6 	test	r14, r14
 1047910:	0f 85 88 fd ff ff 	jne	-632 <_runtime.gentraceback+0x1fe>
 1047916:	41 0f b6 c9 	movzx	ecx, r9b
 104791a:	48 85 c9 	test	rcx, rcx
 104791d:	49 0f 45 fb 	cmovne	rdi, r11
 1047921:	48 85 c0 	test	rax, rax
 1047924:	74 2d 	je	45 <_runtime.gentraceback+0x4b3>
 1047926:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 104792e:	48 39 c7 	cmp	rdi, rax
 1047931:	7d 20 	jge	32 <_runtime.gentraceback+0x4b3>
 1047933:	48 8b 8c 24 98 02 00 00 	mov	rcx, qword ptr [rsp + 664]
 104793b:	48 8b 94 24 f0 02 00 00 	mov	rdx, qword ptr [rsp + 752]
 1047943:	48 8b 9a 80 00 00 00 	mov	rbx, qword ptr [rdx + 128]
 104794a:	48 39 d9 	cmp	rcx, rbx
 104794d:	0f 85 4d 13 00 00 	jne	4941 <_runtime.gentraceback+0x1800>
 1047953:	48 89 bc 24 28 03 00 00 	mov	qword ptr [rsp + 808], rdi
 104795b:	48 8b ac 24 c8 02 00 00 	mov	rbp, qword ptr [rsp + 712]
 1047963:	48 81 c4 d0 02 00 00 	add	rsp, 720
 104796a:	c3 	ret
 104796b:	4c 89 9c 24 d8 00 00 00 	mov	qword ptr [rsp + 216], r11
 1047973:	44 88 54 24 3f 	mov	byte ptr [rsp + 63], r10b
 1047978:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104797c:	44 88 4c 24 08 	mov	byte ptr [rsp + 8], r9b
 1047981:	4c 89 6c 24 10 	mov	qword ptr [rsp + 16], r13
 1047986:	48 89 7c 24 18 	mov	qword ptr [rsp + 24], rdi
 104798b:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 1047993:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1047998:	e8 23 17 00 00 	call	5923 <_runtime.tracebackCgoContext>
 104799d:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 10479a2:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 10479aa:	48 8b 8c 24 00 03 00 00 	mov	rcx, qword ptr [rsp + 768]
 10479b2:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 10479ba:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 10479c2:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 10479ca:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 10479d0:	44 0f b6 54 24 3f 	movzx	r10d, byte ptr [rsp + 63]
 10479d6:	4c 8b 9c 24 d8 00 00 00 	mov	r11, qword ptr [rsp + 216]
 10479de:	4c 8b a4 24 38 02 00 00 	mov	r12, qword ptr [rsp + 568]
 10479e6:	4c 8b b4 24 28 02 00 00 	mov	r14, qword ptr [rsp + 552]
 10479ee:	e9 0d ff ff ff 	jmp	-243 <_runtime.gentraceback+0x460>
 10479f3:	44 88 54 24 3e 	mov	byte ptr [rsp + 62], r10b
 10479f8:	48 89 94 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rdx
 1047a00:	4c 8b bc 24 80 02 00 00 	mov	r15, qword ptr [rsp + 640]
 1047a08:	48 85 d2 	test	rdx, rdx
 1047a0b:	0f 8e 6e 08 00 00 	jle	2158 <_runtime.gentraceback+0xddf>
 1047a11:	4d 39 3c 24 	cmp	qword ptr [r12], r15
 1047a15:	73 09 	jae	9 <_runtime.gentraceback+0x580>
 1047a17:	40 84 ff 	test	dil, dil
 1047a1a:	0f 84 57 08 00 00 	je	2135 <_runtime.gentraceback+0xdd7>
 1047a20:	4c 89 7c 24 48 	mov	qword ptr [rsp + 72], r15
 1047a25:	4c 89 24 24 	mov	qword ptr [rsp], r12
 1047a29:	4c 89 6c 24 08 	mov	qword ptr [rsp + 8], r13
 1047a2e:	c6 44 24 10 04 	mov	byte ptr [rsp + 16], 4
 1047a33:	e8 48 af ff ff 	call	-20664 <_runtime.funcdata>
 1047a38:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1047a3d:	48 85 c0 	test	rax, rax
 1047a40:	0f 85 4b 05 00 00 	jne	1355 <_runtime.gentraceback+0xaf1>
 1047a46:	0f b6 44 24 3e 	movzx	eax, byte ptr [rsp + 62]
 1047a4b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1047a50:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 1047a55:	48 89 94 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rdx
 1047a5d:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1047a62:	48 8b 9c 24 20 03 00 00 	mov	rbx, qword ptr [rsp + 800]
 1047a6a:	0f ba e3 00 	bt	ebx, 0
 1047a6e:	0f 83 bf 04 00 00 	jae	1215 <_runtime.gentraceback+0xa93>
 1047a74:	b8 01 00 00 00 	mov	eax, 1
 1047a79:	84 c0 	test	al, al
 1047a7b:	75 54 	jne	84 <_runtime.gentraceback+0x631>
 1047a7d:	4c 8b a4 24 38 02 00 00 	mov	r12, qword ptr [rsp + 568]
 1047a85:	45 0f b6 54 24 24 	movzx	r10d, byte ptr [r12 + 36]
 1047a8b:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1047a93:	48 8b 8c 24 00 03 00 00 	mov	rcx, qword ptr [rsp + 768]
 1047a9b:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 1047aa3:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 1047aab:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 1047ab3:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 1047ab9:	4c 8b b4 24 28 02 00 00 	mov	r14, qword ptr [rsp + 552]
 1047ac1:	49 89 d3 	mov	r11, rdx
 1047ac4:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 1047acc:	e9 0f fe ff ff 	jmp	-497 <_runtime.gentraceback+0x440>
 1047ad1:	48 8b 84 24 38 02 00 00 	mov	rax, qword ptr [rsp + 568]
 1047ad9:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047add:	48 8b 8c 24 10 02 00 00 	mov	rcx, qword ptr [rsp + 528]
 1047ae5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1047aea:	e8 d1 a7 ff ff 	call	-22575 <_runtime.funcname>
 1047aef:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1047af4:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 1047af9:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1047afe:	48 89 8c 24 e0 01 00 00 	mov	qword ptr [rsp + 480], rcx
 1047b06:	48 8b 94 24 38 02 00 00 	mov	rdx, qword ptr [rsp + 568]
 1047b0e:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1047b12:	48 8b 9c 24 10 02 00 00 	mov	rbx, qword ptr [rsp + 528]
 1047b1a:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1047b1f:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 1047b24:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1047b29:	e8 b2 aa ff ff 	call	-21838 <_runtime.funcline>
 1047b2e:	48 63 44 24 28 	movsxd	rax, dword ptr [rsp + 40]
 1047b33:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 1047b3b:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1047b40:	48 89 8c 24 98 00 00 00 	mov	qword ptr [rsp + 152], rcx
 1047b48:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1047b4d:	48 89 94 24 00 02 00 00 	mov	qword ptr [rsp + 512], rdx
 1047b55:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 1047b5a:	48 83 fb 0f 	cmp	rbx, 15
 1047b5e:	0f 85 bd 03 00 00 	jne	957 <_runtime.gentraceback+0xa81>
 1047b64:	48 be 72 75 6e 74 69 6d 65 2e 	movabs	rsi, 3343198598084851058
 1047b6e:	48 8b bc 24 e0 01 00 00 	mov	rdi, qword ptr [rsp + 480]
 1047b76:	48 39 37 	cmp	qword ptr [rdi], rsi
 1047b79:	0f 85 95 03 00 00 	jne	917 <_runtime.gentraceback+0xa74>
 1047b7f:	81 7f 08 67 6f 70 61 	cmp	dword ptr [rdi + 8], 1634758503
 1047b86:	0f 85 7b 03 00 00 	jne	891 <_runtime.gentraceback+0xa67>
 1047b8c:	66 81 7f 0c 6e 69 	cmp	word ptr [rdi + 12], 26990
 1047b92:	0f 85 62 03 00 00 	jne	866 <_runtime.gentraceback+0xa5a>
 1047b98:	80 7f 0e 63 	cmp	byte ptr [rdi + 14], 99
 1047b9c:	0f 85 4b 03 00 00 	jne	843 <_runtime.gentraceback+0xa4d>
 1047ba2:	48 8d 1d 33 b2 02 00 	lea	rbx, [rip + 176691]
 1047ba9:	bf 05 00 00 00 	mov	edi, 5
 1047bae:	48 89 9c 24 e0 01 00 00 	mov	qword ptr [rsp + 480], rbx
 1047bb6:	48 89 7c 24 68 	mov	qword ptr [rsp + 104], rdi
 1047bbb:	e8 e0 28 fe ff 	call	-120608 <_runtime.printlock>
 1047bc0:	48 8b 84 24 e0 01 00 00 	mov	rax, qword ptr [rsp + 480]
 1047bc8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047bcc:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1047bd1:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1047bd6:	e8 05 32 fe ff 	call	-118267 <_runtime.printstring>
 1047bdb:	48 8d 05 77 b0 02 00 	lea	rax, [rip + 176247]
 1047be2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047be6:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1047bef:	e8 ec 31 fe ff 	call	-118292 <_runtime.printstring>
 1047bf4:	e8 27 29 fe ff 	call	-120537 <_runtime.printunlock>
 1047bf9:	48 8b 84 24 b0 02 00 00 	mov	rax, qword ptr [rsp + 688]
 1047c01:	48 89 84 24 58 02 00 00 	mov	qword ptr [rsp + 600], rax
 1047c09:	31 c9 	xor	ecx, ecx
 1047c0b:	eb 3d 	jmp	61 <_runtime.gentraceback+0x7aa>
 1047c0d:	84 00 	test	byte ptr [rax], al
 1047c0f:	48 8b 14 c8 	mov	rdx, qword ptr [rax + 8*rcx]
 1047c13:	48 89 94 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rdx
 1047c1b:	e8 80 28 fe ff 	call	-120704 <_runtime.printlock>
 1047c20:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1047c28:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047c2c:	e8 5f 30 fe ff 	call	-118689 <_runtime.printhex>
 1047c31:	e8 ea 28 fe ff 	call	-120598 <_runtime.printunlock>
 1047c36:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1047c3e:	48 8d 48 01 	lea	rcx, [rax + 1]
 1047c42:	48 8b 84 24 58 02 00 00 	mov	rax, qword ptr [rsp + 600]
 1047c4a:	48 8b 94 24 b8 02 00 00 	mov	rdx, qword ptr [rsp + 696]
 1047c52:	48 c1 ea 03 	shr	rdx, 3
 1047c56:	48 39 d1 	cmp	rcx, rdx
 1047c59:	73 6e 	jae	110 <_runtime.gentraceback+0x829>
 1047c5b:	48 83 f9 0a 	cmp	rcx, 10
 1047c5f:	73 45 	jae	69 <_runtime.gentraceback+0x806>
 1047c61:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 1047c69:	48 85 c9 	test	rcx, rcx
 1047c6c:	74 9f 	je	-97 <_runtime.gentraceback+0x76d>
 1047c6e:	e8 2d 28 fe ff 	call	-120787 <_runtime.printlock>
 1047c73:	48 8d 05 fa af 02 00 	lea	rax, [rip + 176122]
 1047c7a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047c7e:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1047c87:	e8 54 31 fe ff 	call	-118444 <_runtime.printstring>
 1047c8c:	e8 8f 28 fe ff 	call	-120689 <_runtime.printunlock>
 1047c91:	48 8b 84 24 58 02 00 00 	mov	rax, qword ptr [rsp + 600]
 1047c99:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1047ca1:	e9 67 ff ff ff 	jmp	-153 <_runtime.gentraceback+0x76d>
 1047ca6:	e8 f5 27 fe ff 	call	-120843 <_runtime.printlock>
 1047cab:	48 8d 05 07 b1 02 00 	lea	rax, [rip + 176391]
 1047cb2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047cb6:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1047cbf:	e8 1c 31 fe ff 	call	-118500 <_runtime.printstring>
 1047cc4:	e8 57 28 fe ff 	call	-120745 <_runtime.printunlock>
 1047cc9:	e8 d2 27 fe ff 	call	-120878 <_runtime.printlock>
 1047cce:	48 8d 05 9d af 02 00 	lea	rax, [rip + 176029]
 1047cd5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047cd9:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1047ce2:	e8 f9 30 fe ff 	call	-118535 <_runtime.printstring>
 1047ce7:	e8 34 28 fe ff 	call	-120780 <_runtime.printunlock>
 1047cec:	e8 af 27 fe ff 	call	-120913 <_runtime.printlock>
 1047cf1:	48 8d 05 6e af 02 00 	lea	rax, [rip + 175982]
 1047cf8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047cfc:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1047d05:	e8 d6 30 fe ff 	call	-118570 <_runtime.printstring>
 1047d0a:	48 8b 84 24 00 02 00 00 	mov	rax, qword ptr [rsp + 512]
 1047d12:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047d16:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 1047d1e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1047d23:	e8 b8 30 fe ff 	call	-118600 <_runtime.printstring>
 1047d28:	48 8d 05 31 af 02 00 	lea	rax, [rip + 175921]
 1047d2f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047d33:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1047d3c:	e8 9f 30 fe ff 	call	-118625 <_runtime.printstring>
 1047d41:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1047d49:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047d4d:	e8 ce 2e fe ff 	call	-119090 <_runtime.printint>
 1047d52:	e8 c9 27 fe ff 	call	-120887 <_runtime.printunlock>
 1047d57:	48 8b 84 24 80 02 00 00 	mov	rax, qword ptr [rsp + 640]
 1047d5f:	48 8b 8c 24 38 02 00 00 	mov	rcx, qword ptr [rsp + 568]
 1047d67:	48 8b 11 	mov	rdx, qword ptr [rcx]
 1047d6a:	48 39 d0 	cmp	rax, rdx
 1047d6d:	0f 87 1e 01 00 00 	ja	286 <_runtime.gentraceback+0x9f1>
 1047d73:	48 8b 84 24 f0 02 00 00 	mov	rax, qword ptr [rsp + 752]
 1047d7b:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 1047d7f:	48 85 d2 	test	rdx, rdx
 1047d82:	0f 84 fa 00 00 00 	je	250 <_runtime.gentraceback+0x9e2>
 1047d88:	83 ba f4 00 00 00 00 	cmp	dword ptr [rdx + 244], 0
 1047d8f:	0f 8e ed 00 00 00 	jle	237 <_runtime.gentraceback+0x9e2>
 1047d95:	48 39 82 c0 00 00 00 	cmp	qword ptr [rdx + 192], rax
 1047d9c:	0f 85 e0 00 00 00 	jne	224 <_runtime.gentraceback+0x9e2>
 1047da2:	48 8b 84 24 a0 02 00 00 	mov	rax, qword ptr [rsp + 672]
 1047daa:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1047db2:	48 8b 8c 24 98 02 00 00 	mov	rcx, qword ptr [rsp + 664]
 1047dba:	48 89 8c 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rcx
 1047dc2:	48 8b 94 24 80 02 00 00 	mov	rdx, qword ptr [rsp + 640]
 1047dca:	48 89 94 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdx
 1047dd2:	e8 c9 26 fe ff 	call	-121143 <_runtime.printlock>
 1047dd7:	48 8d 05 f9 ae 02 00 	lea	rax, [rip + 175865]
 1047dde:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047de2:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1047deb:	e8 f0 2f fe ff 	call	-118800 <_runtime.printstring>
 1047df0:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1047df8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047dfc:	e8 8f 2e fe ff 	call	-119153 <_runtime.printhex>
 1047e01:	48 8d 05 e7 ae 02 00 	lea	rax, [rip + 175847]
 1047e08:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047e0c:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1047e15:	e8 c6 2f fe ff 	call	-118842 <_runtime.printstring>
 1047e1a:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1047e22:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047e26:	e8 65 2e fe ff 	call	-119195 <_runtime.printhex>
 1047e2b:	48 8d 05 b5 ae 02 00 	lea	rax, [rip + 175797]
 1047e32:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047e36:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1047e3f:	e8 9c 2f fe ff 	call	-118884 <_runtime.printstring>
 1047e44:	48 8b 84 24 a8 00 00 00 	mov	rax, qword ptr [rsp + 168]
 1047e4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047e50:	e8 3b 2e fe ff 	call	-119237 <_runtime.printhex>
 1047e55:	e8 c6 26 fe ff 	call	-121146 <_runtime.printunlock>
 1047e5a:	e8 41 26 fe ff 	call	-121279 <_runtime.printlock>
 1047e5f:	e8 cc 28 fe ff 	call	-120628 <_runtime.printnl>
 1047e64:	e8 b7 26 fe ff 	call	-121161 <_runtime.printunlock>
 1047e69:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 1047e71:	48 8d 50 01 	lea	rdx, [rax + 1]
 1047e75:	48 8b 9c 24 20 03 00 00 	mov	rbx, qword ptr [rsp + 800]
 1047e7d:	e9 fb fb ff ff 	jmp	-1029 <_runtime.gentraceback+0x5dd>
 1047e82:	8b 54 24 40 	mov	edx, dword ptr [rsp + 64]
 1047e86:	83 fa 02 	cmp	edx, 2
 1047e89:	0f 8d 13 ff ff ff 	jge	-237 <_runtime.gentraceback+0x902>
 1047e8f:	eb c9 	jmp	-55 <_runtime.gentraceback+0x9ba>
 1047e91:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1047e99:	48 89 94 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rdx
 1047ea1:	e8 fa 25 fe ff 	call	-121350 <_runtime.printlock>
 1047ea6:	48 8d 05 bb ad 02 00 	lea	rax, [rip + 175547]
 1047ead:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047eb1:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1047eba:	e8 21 2f fe ff 	call	-119007 <_runtime.printstring>
 1047ebf:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1047ec7:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 1047ecf:	48 29 c8 	sub	rax, rcx
 1047ed2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047ed6:	e8 b5 2d fe ff 	call	-119371 <_runtime.printhex>
 1047edb:	e8 40 26 fe ff 	call	-121280 <_runtime.printunlock>
 1047ee0:	48 8b 8c 24 38 02 00 00 	mov	rcx, qword ptr [rsp + 568]
 1047ee8:	e9 86 fe ff ff 	jmp	-378 <_runtime.gentraceback+0x8d3>
 1047eed:	48 89 fb 	mov	rbx, rdi
 1047ef0:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1047ef5:	e9 b4 fc ff ff 	jmp	-844 <_runtime.gentraceback+0x70e>
 1047efa:	48 89 fb 	mov	rbx, rdi
 1047efd:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1047f02:	e9 a7 fc ff ff 	jmp	-857 <_runtime.gentraceback+0x70e>
 1047f07:	48 89 fb 	mov	rbx, rdi
 1047f0a:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1047f0f:	e9 9a fc ff ff 	jmp	-870 <_runtime.gentraceback+0x70e>
 1047f14:	48 89 fb 	mov	rbx, rdi
 1047f17:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1047f1c:	e9 8d fc ff ff 	jmp	-883 <_runtime.gentraceback+0x70e>
 1047f21:	48 8b 9c 24 e0 01 00 00 	mov	rbx, qword ptr [rsp + 480]
 1047f29:	48 8b 7c 24 68 	mov	rdi, qword ptr [rsp + 104]
 1047f2e:	e9 7b fc ff ff 	jmp	-901 <_runtime.gentraceback+0x70e>
 1047f33:	48 8b 8c 24 38 02 00 00 	mov	rcx, qword ptr [rsp + 568]
 1047f3b:	0f b6 59 24 	movzx	ebx, byte ptr [rcx + 36]
 1047f3f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1047f43:	48 8b b4 24 10 02 00 00 	mov	rsi, qword ptr [rsp + 528]
 1047f4b:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1047f50:	48 8b bc 24 f0 02 00 00 	mov	rdi, qword ptr [rsp + 752]
 1047f58:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 1047f5d:	48 85 d2 	test	rdx, rdx
 1047f60:	0f 94 44 24 18 	sete	byte ptr [rsp + 24]
 1047f65:	88 5c 24 19 	mov	byte ptr [rsp + 25], bl
 1047f69:	88 44 24 1a 	mov	byte ptr [rsp + 26], al
 1047f6d:	e8 4e 21 00 00 	call	8526 <_runtime.showframe>
 1047f72:	0f b6 44 24 20 	movzx	eax, byte ptr [rsp + 32]
 1047f77:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1047f7c:	48 8b 94 24 c8 00 00 00 	mov	rdx, qword ptr [rsp + 200]
 1047f84:	48 8b 9c 24 20 03 00 00 	mov	rbx, qword ptr [rsp + 800]
 1047f8c:	e9 e8 fa ff ff 	jmp	-1304 <_runtime.gentraceback+0x5d9>
 1047f91:	48 89 84 24 58 02 00 00 	mov	qword ptr [rsp + 600], rax
 1047f99:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 1047f9e:	0f b6 54 24 3e 	movzx	edx, byte ptr [rsp + 62]
 1047fa3:	48 8b 5c 24 60 	mov	rbx, qword ptr [rsp + 96]
 1047fa8:	eb 34 	jmp	52 <_runtime.gentraceback+0xb3e>
 1047faa:	48 8b b4 24 70 02 00 00 	mov	rsi, qword ptr [rsp + 624]
 1047fb2:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 1047fb6:	48 89 c7 	mov	rdi, rax
 1047fb9:	48 c1 e0 02 	shl	rax, 2
 1047fbd:	4c 8b 84 24 58 02 00 00 	mov	r8, qword ptr [rsp + 600]
 1047fc5:	42 0f b6 44 00 02 	movzx	eax, byte ptr [rax + r8 + 2]
 1047fcb:	41 8b 7c b8 10 	mov	edi, dword ptr [r8 + 4*rdi + 16]
 1047fd0:	48 63 ff 	movsxd	rdi, edi
 1047fd3:	48 03 3e 	add	rdi, qword ptr [rsi]
 1047fd6:	89 c2 	mov	edx, eax
 1047fd8:	48 89 cb 	mov	rbx, rcx
 1047fdb:	48 89 f9 	mov	rcx, rdi
 1047fde:	48 89 9c 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rbx
 1047fe6:	88 54 24 3b 	mov	byte ptr [rsp + 59], dl
 1047fea:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1047fef:	48 8b 84 24 38 02 00 00 	mov	rax, qword ptr [rsp + 568]
 1047ff7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1047ffb:	48 8b b4 24 10 02 00 00 	mov	rsi, qword ptr [rsp + 528]
 1048003:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1048008:	c7 44 24 10 02 00 00 00 	mov	dword ptr [rsp + 16], 2
 1048010:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1048015:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 104801e:	e8 ad a8 ff ff 	call	-22355 <_runtime.pcdatavalue>
 1048023:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1048027:	85 c0 	test	eax, eax
 1048029:	0f 8c 31 02 00 00 	jl	561 <_runtime.gentraceback+0xdc0>
 104802f:	89 44 24 44 	mov	dword ptr [rsp + 68], eax
 1048033:	48 8b 94 24 20 03 00 00 	mov	rdx, qword ptr [rsp + 800]
 104803b:	0f ba e2 00 	bt	edx, 0
 104803f:	0f 83 98 01 00 00 	jae	408 <_runtime.gentraceback+0xd3d>
 1048045:	b9 01 00 00 00 	mov	ecx, 1
 104804a:	84 c9 	test	cl, cl
 104804c:	75 1c 	jne	28 <_runtime.gentraceback+0xbca>
 104804e:	48 8b 8c 24 c8 00 00 00 	mov	rcx, qword ptr [rsp + 200]
 1048056:	48 63 c0 	movsxd	rax, eax
 1048059:	48 3d 00 00 10 00 	cmp	rax, 1048576
 104805f:	0f 82 45 ff ff ff 	jb	-187 <_runtime.gentraceback+0xb0a>
 1048065:	e9 d3 0d 00 00 	jmp	3539 <_runtime.gentraceback+0x199d>
 104806a:	48 63 d8 	movsxd	rbx, eax
 104806d:	48 81 fb 00 00 10 00 	cmp	rbx, 1048576
 1048074:	0f 83 cd 0d 00 00 	jae	3533 <_runtime.gentraceback+0x19a7>
 104807a:	48 8d 04 9b 	lea	rax, [rbx + 4*rbx]
 104807e:	48 8b 8c 24 58 02 00 00 	mov	rcx, qword ptr [rsp + 600]
 1048086:	8b 44 81 0c 	mov	eax, dword ptr [rcx + 4*rax + 12]
 104808a:	48 8b 94 24 38 02 00 00 	mov	rdx, qword ptr [rsp + 568]
 1048092:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1048096:	48 8b 9c 24 10 02 00 00 	mov	rbx, qword ptr [rsp + 528]
 104809e:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10480a3:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 10480a7:	e8 b4 a2 ff ff 	call	-23884 <_runtime.funcnameFromNameoff>
 10480ac:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10480b1:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 10480b6:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10480bb:	48 89 8c 24 e8 01 00 00 	mov	qword ptr [rsp + 488], rcx
 10480c3:	48 8b 94 24 38 02 00 00 	mov	rdx, qword ptr [rsp + 568]
 10480cb:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10480cf:	48 8b 9c 24 10 02 00 00 	mov	rbx, qword ptr [rsp + 528]
 10480d7:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10480dc:	48 8b 74 24 48 	mov	rsi, qword ptr [rsp + 72]
 10480e1:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10480e6:	e8 f5 a4 ff ff 	call	-23307 <_runtime.funcline>
 10480eb:	48 63 44 24 28 	movsxd	rax, dword ptr [rsp + 40]
 10480f0:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 10480f8:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 10480fd:	48 89 8c 24 90 00 00 00 	mov	qword ptr [rsp + 144], rcx
 1048105:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 104810a:	48 89 94 24 08 02 00 00 	mov	qword ptr [rsp + 520], rdx
 1048112:	e8 89 23 fe ff 	call	-121975 <_runtime.printlock>
 1048117:	48 8b 84 24 e8 01 00 00 	mov	rax, qword ptr [rsp + 488]
 104811f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048123:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1048128:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104812d:	e8 ae 2c fe ff 	call	-119634 <_runtime.printstring>
 1048132:	48 8d 05 1b ad 02 00 	lea	rax, [rip + 175387]
 1048139:	48 89 04 24 	mov	qword ptr [rsp], rax
 104813d:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1048146:	e8 95 2c fe ff 	call	-119659 <_runtime.printstring>
 104814b:	e8 d0 23 fe ff 	call	-121904 <_runtime.printunlock>
 1048150:	e8 4b 23 fe ff 	call	-122037 <_runtime.printlock>
 1048155:	48 8d 05 0a ab 02 00 	lea	rax, [rip + 174858]
 104815c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048160:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1048169:	e8 72 2c fe ff 	call	-119694 <_runtime.printstring>
 104816e:	48 8b 84 24 08 02 00 00 	mov	rax, qword ptr [rsp + 520]
 1048176:	48 89 04 24 	mov	qword ptr [rsp], rax
 104817a:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1048182:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1048187:	e8 54 2c fe ff 	call	-119724 <_runtime.printstring>
 104818c:	48 8d 05 cd aa 02 00 	lea	rax, [rip + 174797]
 1048193:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048197:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10481a0:	e8 3b 2c fe ff 	call	-119749 <_runtime.printstring>
 10481a5:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 10481ad:	48 89 04 24 	mov	qword ptr [rsp], rax
 10481b1:	e8 6a 2a fe ff 	call	-120214 <_runtime.printint>
 10481b6:	e8 75 25 fe ff 	call	-121483 <_runtime.printnl>
 10481bb:	e8 60 23 fe ff 	call	-122016 <_runtime.printunlock>
 10481c0:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 10481c8:	48 8d 48 01 	lea	rcx, [rax + 1]
 10481cc:	8b 44 24 44 	mov	eax, dword ptr [rsp + 68]
 10481d0:	48 8b 94 24 20 03 00 00 	mov	rdx, qword ptr [rsp + 800]
 10481d8:	e9 79 fe ff ff 	jmp	-391 <_runtime.gentraceback+0xbb6>
 10481dd:	48 63 d8 	movsxd	rbx, eax
 10481e0:	48 81 fb 00 00 10 00 	cmp	rbx, 1048576
 10481e7:	0f 83 67 0c 00 00 	jae	3175 <_runtime.gentraceback+0x19b4>
 10481ed:	48 8d 04 9b 	lea	rax, [rbx + 4*rbx]
 10481f1:	48 c1 e0 02 	shl	rax, 2
 10481f5:	48 8b 8c 24 58 02 00 00 	mov	rcx, qword ptr [rsp + 600]
 10481fd:	0f b6 44 08 02 	movzx	eax, byte ptr [rax + rcx + 2]
 1048202:	48 8b 94 24 38 02 00 00 	mov	rdx, qword ptr [rsp + 568]
 104820a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104820e:	48 8b 9c 24 10 02 00 00 	mov	rbx, qword ptr [rsp + 528]
 1048216:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104821b:	48 8b b4 24 f0 02 00 00 	mov	rsi, qword ptr [rsp + 752]
 1048223:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1048228:	48 8b bc 24 c8 00 00 00 	mov	rdi, qword ptr [rsp + 200]
 1048230:	48 85 ff 	test	rdi, rdi
 1048233:	0f 94 44 24 18 	sete	byte ptr [rsp + 24]
 1048238:	88 44 24 19 	mov	byte ptr [rsp + 25], al
 104823c:	0f b6 44 24 3b 	movzx	eax, byte ptr [rsp + 59]
 1048241:	88 44 24 1a 	mov	byte ptr [rsp + 26], al
 1048245:	e8 76 1e 00 00 	call	7798 <_runtime.showframe>
 104824a:	0f b6 4c 24 20 	movzx	ecx, byte ptr [rsp + 32]
 104824f:	8b 44 24 44 	mov	eax, dword ptr [rsp + 68]
 1048253:	48 8b 94 24 20 03 00 00 	mov	rdx, qword ptr [rsp + 800]
 104825b:	e9 ea fd ff ff 	jmp	-534 <_runtime.gentraceback+0xbaa>
 1048260:	0f b6 44 24 3b 	movzx	eax, byte ptr [rsp + 59]
 1048265:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 104826a:	48 8b 94 24 c8 00 00 00 	mov	rdx, qword ptr [rsp + 200]
 1048272:	e9 de f7 ff ff 	jmp	-2082 <_runtime.gentraceback+0x5b5>
 1048277:	49 ff cf 	dec	r15
 104827a:	e9 a1 f7 ff ff 	jmp	-2143 <_runtime.gentraceback+0x580>
 104827f:	4c 8b 8c 24 20 03 00 00 	mov	r9, qword ptr [rsp + 800]
 1048287:	41 0f ba e1 01 	bt	r9d, 1
 104828c:	72 0b 	jb	11 <_runtime.gentraceback+0xdf9>
 104828e:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 1048294:	e9 78 f7 ff ff 	jmp	-2184 <_runtime.gentraceback+0x571>
 1048299:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 104829f:	e9 7c f7 ff ff 	jmp	-2180 <_runtime.gentraceback+0x580>
 10482a4:	4c 8b 8c 24 80 02 00 00 	mov	r9, qword ptr [rsp + 640]
 10482ac:	48 85 d2 	test	rdx, rdx
 10482af:	0f 85 cb 02 00 00 	jne	715 <_runtime.gentraceback+0x10e0>
 10482b5:	4c 8b bc 24 20 03 00 00 	mov	r15, qword ptr [rsp + 800]
 10482bd:	41 0f ba e7 01 	bt	r15d, 1
 10482c2:	0f 83 96 02 00 00 	jae	662 <_runtime.gentraceback+0x10be>
 10482c8:	49 8d 79 01 	lea	rdi, [r9 + 1]
 10482cc:	48 89 7c 24 58 	mov	qword ptr [rsp + 88], rdi
 10482d1:	4c 89 4c 24 50 	mov	qword ptr [rsp + 80], r9
 10482d6:	4c 89 24 24 	mov	qword ptr [rsp], r12
 10482da:	4c 89 6c 24 08 	mov	qword ptr [rsp + 8], r13
 10482df:	c6 44 24 10 04 	mov	byte ptr [rsp + 16], 4
 10482e4:	e8 97 a6 ff ff 	call	-22889 <_runtime.funcdata>
 10482e9:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 10482ee:	48 85 c0 	test	rax, rax
 10482f1:	0f 85 dc 00 00 00 	jne	220 <_runtime.gentraceback+0xf33>
 10482f7:	0f b6 44 24 3b 	movzx	eax, byte ptr [rsp + 59]
 10482fc:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1048301:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1048306:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 104830e:	48 8b b4 24 38 02 00 00 	mov	rsi, qword ptr [rsp + 568]
 1048316:	80 7e 24 16 	cmp	byte ptr [rsi + 36], 22
 104831a:	75 08 	jne	8 <_runtime.gentraceback+0xe84>
 104831c:	3c 12 	cmp	al, 18
 104831e:	0f 85 97 00 00 00 	jne	151 <_runtime.gentraceback+0xf1b>
 1048324:	48 85 db 	test	rbx, rbx
 1048327:	7e 57 	jle	87 <_runtime.gentraceback+0xee0>
 1048329:	48 8d 43 ff 	lea	rax, [rbx - 1]
 104832d:	44 0f b6 56 24 	movzx	r10d, byte ptr [rsi + 36]
 1048332:	48 8d 51 ff 	lea	rdx, [rcx - 1]
 1048336:	48 8b 8c 24 00 03 00 00 	mov	rcx, qword ptr [rsp + 768]
 104833e:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 1048346:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 104834b:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 1048353:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1048358:	4c 8b a4 24 38 02 00 00 	mov	r12, qword ptr [rsp + 568]
 1048360:	4c 8b ac 24 10 02 00 00 	mov	r13, qword ptr [rsp + 528]
 1048368:	4c 8b b4 24 28 02 00 00 	mov	r14, qword ptr [rsp + 552]
 1048370:	48 89 c3 	mov	rbx, rax
 1048373:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 104837b:	e9 49 f5 ff ff 	jmp	-2743 <_runtime.gentraceback+0x429>
 1048380:	48 8b bc 24 08 03 00 00 	mov	rdi, qword ptr [rsp + 776]
 1048388:	48 39 f9 	cmp	rcx, rdi
 104838b:	7d 24 	jge	36 <_runtime.gentraceback+0xf11>
 104838d:	48 81 f9 00 00 10 00 	cmp	rcx, 1048576
 1048394:	0f 83 c7 0a 00 00 	jae	2759 <_runtime.gentraceback+0x19c1>
 104839a:	48 8b 84 24 00 03 00 00 	mov	rax, qword ptr [rsp + 768]
 10483a2:	48 89 14 c8 	mov	qword ptr [rax + 8*rcx], rdx
 10483a6:	48 ff c1 	inc	rcx
 10483a9:	48 89 d8 	mov	rax, rbx
 10483ac:	e9 7c ff ff ff 	jmp	-132 <_runtime.gentraceback+0xe8d>
 10483b1:	48 8b 84 24 00 03 00 00 	mov	rax, qword ptr [rsp + 768]
 10483b9:	eb ee 	jmp	-18 <_runtime.gentraceback+0xf09>
 10483bb:	3c 09 	cmp	al, 9
 10483bd:	0f 84 61 ff ff ff 	je	-159 <_runtime.gentraceback+0xe84>
 10483c3:	3c 13 	cmp	al, 19
 10483c5:	0f 84 59 ff ff ff 	je	-167 <_runtime.gentraceback+0xe84>
 10483cb:	48 89 d8 	mov	rax, rbx
 10483ce:	e9 5a ff ff ff 	jmp	-166 <_runtime.gentraceback+0xe8d>
 10483d3:	48 89 84 24 58 02 00 00 	mov	qword ptr [rsp + 600], rax
 10483db:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 10483e0:	0f b6 54 24 3b 	movzx	edx, byte ptr [rsp + 59]
 10483e5:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 10483ea:	48 8b 74 24 58 	mov	rsi, qword ptr [rsp + 88]
 10483ef:	48 8b bc 24 f8 02 00 00 	mov	rdi, qword ptr [rsp + 760]
 10483f7:	eb 28 	jmp	40 <_runtime.gentraceback+0xf81>
 10483f9:	4c 8b 84 24 70 02 00 00 	mov	r8, qword ptr [rsp + 624]
 1048401:	0f b6 54 32 02 	movzx	edx, byte ptr [rdx + rsi + 2]
 1048406:	44 8b 4c 9e 10 	mov	r9d, dword ptr [rsi + 4*rbx + 16]
 104840b:	4d 63 c9 	movsxd	r9, r9d
 104840e:	4d 03 08 	add	r9, qword ptr [r8]
 1048411:	4d 8d 41 01 	lea	r8, [r9 + 1]
 1048415:	48 89 cb 	mov	rbx, rcx
 1048418:	4c 89 c6 	mov	rsi, r8
 104841b:	48 89 c7 	mov	rdi, rax
 104841e:	4c 89 c9 	mov	rcx, r9
 1048421:	48 89 bc 24 f8 02 00 00 	mov	qword ptr [rsp + 760], rdi
 1048429:	48 89 74 24 58 	mov	qword ptr [rsp + 88], rsi
 104842e:	48 89 9c 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rbx
 1048436:	88 54 24 3c 	mov	byte ptr [rsp + 60], dl
 104843a:	48 8b 84 24 38 02 00 00 	mov	rax, qword ptr [rsp + 568]
 1048442:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048446:	4c 8b 84 24 10 02 00 00 	mov	r8, qword ptr [rsp + 528]
 104844e:	4c 89 44 24 08 	mov	qword ptr [rsp + 8], r8
 1048453:	c7 44 24 10 02 00 00 00 	mov	dword ptr [rsp + 16], 2
 104845b:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1048460:	48 8d 8c 24 e0 00 00 00 	lea	rcx, [rsp + 224]
 1048468:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 104846d:	e8 5e a4 ff ff 	call	-23458 <_runtime.pcdatavalue>
 1048472:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1048476:	85 c0 	test	eax, eax
 1048478:	0f 8c c1 00 00 00 	jl	193 <_runtime.gentraceback+0x109f>
 104847e:	48 63 c0 	movsxd	rax, eax
 1048481:	48 3d 00 00 10 00 	cmp	rax, 1048576
 1048487:	0f 83 eb 09 00 00 	jae	2539 <_runtime.gentraceback+0x19d8>
 104848d:	48 8d 14 80 	lea	rdx, [rax + 4*rax]
 1048491:	48 89 d3 	mov	rbx, rdx
 1048494:	48 c1 e2 02 	shl	rdx, 2
 1048498:	48 8b b4 24 58 02 00 00 	mov	rsi, qword ptr [rsp + 600]
 10484a0:	0f b6 7c 32 02 	movzx	edi, byte ptr [rdx + rsi + 2]
 10484a5:	40 80 ff 16 	cmp	dil, 22
 10484a9:	75 0b 	jne	11 <_runtime.gentraceback+0x1016>
 10484ab:	0f b6 7c 24 3c 	movzx	edi, byte ptr [rsp + 60]
 10484b0:	40 80 ff 12 	cmp	dil, 18
 10484b4:	75 68 	jne	104 <_runtime.gentraceback+0x107e>
 10484b6:	48 8b bc 24 f8 02 00 00 	mov	rdi, qword ptr [rsp + 760]
 10484be:	48 85 ff 	test	rdi, rdi
 10484c1:	7e 11 	jle	17 <_runtime.gentraceback+0x1034>
 10484c3:	48 8d 47 ff 	lea	rax, [rdi - 1]
 10484c7:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 10484cf:	e9 25 ff ff ff 	jmp	-219 <_runtime.gentraceback+0xf59>
 10484d4:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10484dc:	4c 8b 84 24 08 03 00 00 	mov	r8, qword ptr [rsp + 776]
 10484e4:	4c 39 c0 	cmp	rax, r8
 10484e7:	7d 2b 	jge	43 <_runtime.gentraceback+0x1074>
 10484e9:	48 3d 00 00 10 00 	cmp	rax, 1048576
 10484ef:	0f 83 79 09 00 00 	jae	2425 <_runtime.gentraceback+0x19ce>
 10484f5:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10484fa:	4c 8b 8c 24 00 03 00 00 	mov	r9, qword ptr [rsp + 768]
 1048502:	49 89 0c c1 	mov	qword ptr [r9 + 8*rax], rcx
 1048506:	48 ff c0 	inc	rax
 1048509:	48 89 c1 	mov	rcx, rax
 104850c:	48 89 f8 	mov	rax, rdi
 104850f:	e9 e5 fe ff ff 	jmp	-283 <_runtime.gentraceback+0xf59>
 1048514:	4c 8b 8c 24 00 03 00 00 	mov	r9, qword ptr [rsp + 768]
 104851c:	eb eb 	jmp	-21 <_runtime.gentraceback+0x1069>
 104851e:	40 80 ff 09 	cmp	dil, 9
 1048522:	74 92 	je	-110 <_runtime.gentraceback+0x1016>
 1048524:	40 80 ff 13 	cmp	dil, 19
 1048528:	74 8c 	je	-116 <_runtime.gentraceback+0x1016>
 104852a:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 1048532:	48 8b 84 24 f8 02 00 00 	mov	rax, qword ptr [rsp + 760]
 104853a:	e9 ba fe ff ff 	jmp	-326 <_runtime.gentraceback+0xf59>
 104853f:	0f b6 44 24 3c 	movzx	eax, byte ptr [rsp + 60]
 1048544:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 104854c:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1048551:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 1048559:	e9 b0 fd ff ff 	jmp	-592 <_runtime.gentraceback+0xe6e>
 104855e:	40 84 ff 	test	dil, dil
 1048561:	0f 85 61 fd ff ff 	jne	-671 <_runtime.gentraceback+0xe28>
 1048567:	4d 39 0c 24 	cmp	qword ptr [r12], r9
 104856b:	0f 84 57 fd ff ff 	je	-681 <_runtime.gentraceback+0xe28>
 1048571:	4d 8d 79 ff 	lea	r15, [r9 - 1]
 1048575:	4c 89 cf 	mov	rdi, r9
 1048578:	4d 89 f9 	mov	r9, r15
 104857b:	e9 4c fd ff ff 	jmp	-692 <_runtime.gentraceback+0xe2c>
 1048580:	40 84 ff 	test	dil, dil
 1048583:	4c 8b bc 24 20 03 00 00 	mov	r15, qword ptr [rsp + 800]
 104858b:	eb d4 	jmp	-44 <_runtime.gentraceback+0x10c1>
 104858d:	48 8d 8c 24 70 02 00 00 	lea	rcx, [rsp + 624]
 1048595:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1048599:	48 8b 8c 24 18 03 00 00 	mov	rcx, qword ptr [rsp + 792]
 10485a1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10485a6:	48 8b 18 	mov	rbx, qword ptr [rax]
 10485a9:	48 89 c2 	mov	rdx, rax
 10485ac:	ff d3 	call	rbx
 10485ae:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 10485b3:	74 5d 	je	93 <_runtime.gentraceback+0x1172>
 10485b5:	48 8b 8c 24 00 03 00 00 	mov	rcx, qword ptr [rsp + 768]
 10485bd:	48 85 c9 	test	rcx, rcx
 10485c0:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 10485c8:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 10485cd:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 10485d5:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 10485dd:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 10485e2:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 10485ea:	44 0f b6 54 24 3b 	movzx	r10d, byte ptr [rsp + 59]
 10485f0:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 10485f5:	4c 8b a4 24 38 02 00 00 	mov	r12, qword ptr [rsp + 568]
 10485fd:	4c 8b ac 24 10 02 00 00 	mov	r13, qword ptr [rsp + 528]
 1048605:	4c 8b b4 24 28 02 00 00 	mov	r14, qword ptr [rsp + 552]
 104860d:	e9 b1 f2 ff ff 	jmp	-3407 <_runtime.gentraceback+0x423>
 1048612:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1048617:	48 89 84 24 28 03 00 00 	mov	qword ptr [rsp + 808], rax
 104861f:	48 8b ac 24 c8 02 00 00 	mov	rbp, qword ptr [rsp + 712]
 1048627:	48 81 c4 d0 02 00 00 	add	rsp, 720
 104862e:	c3 	ret
 104862f:	48 c7 84 24 88 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 648], 0
 104863b:	48 85 c0 	test	rax, rax
 104863e:	e9 6f f2 ff ff 	jmp	-3473 <_runtime.gentraceback+0x412>
 1048643:	48 85 c0 	test	rax, rax
 1048646:	e9 67 f2 ff ff 	jmp	-3481 <_runtime.gentraceback+0x412>
 104864b:	48 8d 8c 24 70 02 00 00 	lea	rcx, [rsp + 624]
 1048653:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1048657:	4c 89 64 24 08 	mov	qword ptr [rsp + 8], r12
 104865c:	4c 89 6c 24 10 	mov	qword ptr [rsp + 16], r13
 1048661:	48 85 c0 	test	rax, rax
 1048664:	0f 95 c1 	setne	cl
 1048667:	88 4c 24 18 	mov	byte ptr [rsp + 24], cl
 104866b:	4c 89 4c 24 20 	mov	qword ptr [rsp + 32], r9
 1048670:	e8 8b 08 00 00 	call	2187 <_runtime.getArgInfo>
 1048675:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104867a:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104867f:	48 89 84 24 b8 02 00 00 	mov	qword ptr [rsp + 696], rax
 1048687:	48 89 8c 24 c0 02 00 00 	mov	qword ptr [rsp + 704], rcx
 104868f:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1048697:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 104869c:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 10486a4:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 10486ac:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 10486b1:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 10486b9:	44 0f b6 54 24 3b 	movzx	r10d, byte ptr [rsp + 59]
 10486bf:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 10486c4:	4c 8b a4 24 38 02 00 00 	mov	r12, qword ptr [rsp + 568]
 10486cc:	4c 8b ac 24 10 02 00 00 	mov	r13, qword ptr [rsp + 528]
 10486d4:	4c 8b b4 24 28 02 00 00 	mov	r14, qword ptr [rsp + 552]
 10486dc:	e9 8d f1 ff ff 	jmp	-3699 <_runtime.gentraceback+0x3ce>
 10486e1:	31 c9 	xor	ecx, ecx
 10486e3:	e9 65 f1 ff ff 	jmp	-3739 <_runtime.gentraceback+0x3ad>
 10486e8:	0f b6 4c 24 3d 	movzx	ecx, byte ptr [rsp + 61]
 10486ed:	84 c9 	test	cl, cl
 10486ef:	0f 84 79 f1 ff ff 	je	-3719 <_runtime.gentraceback+0x3ce>
 10486f5:	48 85 c0 	test	rax, rax
 10486f8:	e9 2e f1 ff ff 	jmp	-3794 <_runtime.gentraceback+0x38b>
 10486fd:	41 80 ff 06 	cmp	r15b, 6
 1048701:	0f 84 b6 f0 ff ff 	je	-3914 <_runtime.gentraceback+0x31d>
 1048707:	41 80 ff 04 	cmp	r15b, 4
 104870b:	0f 84 ac f0 ff ff 	je	-3924 <_runtime.gentraceback+0x31d>
 1048711:	41 80 ff 05 	cmp	r15b, 5
 1048715:	0f 84 a2 f0 ff ff 	je	-3934 <_runtime.gentraceback+0x31d>
 104871b:	41 80 ff 07 	cmp	r15b, 7
 104871f:	0f 84 98 f0 ff ff 	je	-3944 <_runtime.gentraceback+0x31d>
 1048725:	41 80 ff 10 	cmp	r15b, 16
 1048729:	0f 84 8e f0 ff ff 	je	-3954 <_runtime.gentraceback+0x31d>
 104872f:	45 84 f6 	test	r14b, r14b
 1048732:	74 0a 	je	10 <_runtime.gentraceback+0x129e>
 1048734:	41 80 ff 08 	cmp	r15b, 8
 1048738:	0f 84 7f f0 ff ff 	je	-3969 <_runtime.gentraceback+0x31d>
 104873e:	48 83 bc 24 90 02 00 00 00 	cmp	qword ptr [rsp + 656], 0
 1048747:	0f 85 4a 02 00 00 	jne	586 <_runtime.gentraceback+0x14f7>
 104874d:	4c 8b b4 24 a0 02 00 00 	mov	r14, qword ptr [rsp + 672]
 1048755:	49 83 c6 f8 	add	r14, -8
 1048759:	4d 89 f7 	mov	r15, r14
 104875c:	4d 8b 36 	mov	r14, qword ptr [r14]
 104875f:	4c 89 b4 24 90 02 00 00 	mov	qword ptr [rsp + 656], r14
 1048767:	4c 89 bc 24 80 00 00 00 	mov	qword ptr [rsp + 128], r15
 104876f:	48 8b 84 24 90 02 00 00 	mov	rax, qword ptr [rsp + 656]
 1048777:	48 89 04 24 	mov	qword ptr [rsp], rax
 104877b:	e8 f0 93 ff ff 	call	-27664 <_runtime.findfunc>
 1048780:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1048785:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104878a:	48 85 c9 	test	rcx, rcx
 104878d:	74 60 	je	96 <_runtime.gentraceback+0x134f>
 104878f:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1048794:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 104879c:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 10487a4:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 10487a9:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 10487b1:	4c 8b 8c 24 40 02 00 00 	mov	r9, qword ptr [rsp + 576]
 10487b9:	44 0f b6 54 24 3b 	movzx	r10d, byte ptr [rsp + 59]
 10487bf:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 10487c4:	4c 8b a4 24 38 02 00 00 	mov	r12, qword ptr [rsp + 568]
 10487cc:	4c 8b ac 24 10 02 00 00 	mov	r13, qword ptr [rsp + 528]
 10487d4:	49 89 ce 	mov	r14, rcx
 10487d7:	49 89 c7 	mov	r15, rax
 10487da:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 10487e2:	48 8b 8c 24 f0 02 00 00 	mov	rcx, qword ptr [rsp + 752]
 10487ea:	e9 e0 ef ff ff 	jmp	-4128 <_runtime.gentraceback+0x32f>
 10487ef:	0f b6 5c 24 3d 	movzx	ebx, byte ptr [rsp + 61]
 10487f4:	84 db 	test	bl, bl
 10487f6:	0f 84 89 01 00 00 	je	393 <_runtime.gentraceback+0x14e5>
 10487fc:	48 8b b4 24 f0 02 00 00 	mov	rsi, qword ptr [rsp + 752]
 1048804:	48 8b 7e 30 	mov	rdi, qword ptr [rsi + 48]
 1048808:	80 bf 18 01 00 00 00 	cmp	byte ptr [rdi + 280], 0
 104880f:	0f 84 66 01 00 00 	je	358 <_runtime.gentraceback+0x14db>
 1048815:	48 8b bc 24 38 02 00 00 	mov	rdi, qword ptr [rsp + 568]
 104881d:	80 7f 24 09 	cmp	byte ptr [rdi + 36], 9
 1048821:	0f 85 4d 01 00 00 	jne	333 <_runtime.gentraceback+0x14d4>
 1048827:	31 d2 	xor	edx, edx
 1048829:	48 89 84 24 f0 01 00 00 	mov	qword ptr [rsp + 496], rax
 1048831:	48 89 8c 24 f8 01 00 00 	mov	qword ptr [rsp + 504], rcx
 1048839:	4c 8b 84 24 10 03 00 00 	mov	r8, qword ptr [rsp + 784]
 1048841:	4d 85 c0 	test	r8, r8
 1048844:	75 12 	jne	18 <_runtime.gentraceback+0x13b8>
 1048846:	84 d2 	test	dl, dl
 1048848:	75 0e 	jne	14 <_runtime.gentraceback+0x13b8>
 104884a:	4d 85 c0 	test	r8, r8
 104884d:	0f 84 3c ff ff ff 	je	-196 <_runtime.gentraceback+0x12ef>
 1048853:	e9 2a 06 00 00 	jmp	1578 <_runtime.gentraceback+0x19e2>
 1048858:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 104885c:	48 8b 84 24 10 02 00 00 	mov	rax, qword ptr [rsp + 528]
 1048864:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1048869:	e8 52 9a ff ff 	call	-26030 <_runtime.funcname>
 104886e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1048873:	48 89 84 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rax
 104887b:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1048880:	48 89 8c 24 50 02 00 00 	mov	qword ptr [rsp + 592], rcx
 1048888:	48 8b 94 24 90 02 00 00 	mov	rdx, qword ptr [rsp + 656]
 1048890:	48 89 94 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rdx
 1048898:	e8 03 1c fe ff 	call	-123901 <_runtime.printlock>
 104889d:	48 8d 05 5d d8 02 00 	lea	rax, [rip + 186461]
 10488a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10488a8:	48 c7 44 24 08 22 00 00 00 	mov	qword ptr [rsp + 8], 34
 10488b1:	e8 2a 25 fe ff 	call	-121558 <_runtime.printstring>
 10488b6:	48 8b 84 24 50 02 00 00 	mov	rax, qword ptr [rsp + 592]
 10488be:	48 89 04 24 	mov	qword ptr [rsp], rax
 10488c2:	48 8b 84 24 d0 00 00 00 	mov	rax, qword ptr [rsp + 208]
 10488ca:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10488cf:	e8 0c 25 fe ff 	call	-121588 <_runtime.printstring>
 10488d4:	48 8d 05 66 ad 02 00 	lea	rax, [rip + 175462]
 10488db:	48 89 04 24 	mov	qword ptr [rsp], rax
 10488df:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 10488e8:	e8 f3 24 fe ff 	call	-121613 <_runtime.printstring>
 10488ed:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 10488f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10488f9:	e8 92 23 fe ff 	call	-121966 <_runtime.printhex>
 10488fe:	e8 2d 1e fe ff 	call	-123347 <_runtime.printnl>
 1048903:	e8 18 1c fe ff 	call	-123880 <_runtime.printunlock>
 1048908:	48 8b 84 24 f0 02 00 00 	mov	rax, qword ptr [rsp + 752]
 1048910:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1048914:	48 8b 10 	mov	rdx, qword ptr [rax]
 1048917:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104891b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1048920:	48 8d 8c 24 70 02 00 00 	lea	rcx, [rsp + 624]
 1048928:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104892d:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1048935:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104893a:	e8 91 1f 00 00 	call	8081 <_runtime.tracebackHexdump>
 104893f:	4c 8b 84 24 10 03 00 00 	mov	r8, qword ptr [rsp + 784]
 1048947:	4d 85 c0 	test	r8, r8
 104894a:	48 8b 84 24 f0 01 00 00 	mov	rax, qword ptr [rsp + 496]
 1048952:	48 8b 8c 24 f8 01 00 00 	mov	rcx, qword ptr [rsp + 504]
 104895a:	0f b6 5c 24 3d 	movzx	ebx, byte ptr [rsp + 61]
 104895f:	48 8b b4 24 f0 02 00 00 	mov	rsi, qword ptr [rsp + 752]
 1048967:	48 8b bc 24 38 02 00 00 	mov	rdi, qword ptr [rsp + 568]
 104896f:	e9 d9 fe ff ff 	jmp	-295 <_runtime.gentraceback+0x13ad>
 1048974:	89 da 	mov	edx, ebx
 1048976:	e9 ae fe ff ff 	jmp	-338 <_runtime.gentraceback+0x1389>
 104897b:	48 8b bc 24 38 02 00 00 	mov	rdi, qword ptr [rsp + 568]
 1048983:	eb ef 	jmp	-17 <_runtime.gentraceback+0x14d4>
 1048985:	48 8b b4 24 f0 02 00 00 	mov	rsi, qword ptr [rsp + 752]
 104898d:	48 8b bc 24 38 02 00 00 	mov	rdi, qword ptr [rsp + 568]
 1048995:	eb dd 	jmp	-35 <_runtime.gentraceback+0x14d4>
 1048997:	45 31 ff 	xor	r15d, r15d
 104899a:	e9 c8 fd ff ff 	jmp	-568 <_runtime.gentraceback+0x12c7>
 104899f:	45 31 f6 	xor	r14d, r14d
 10489a2:	e9 e6 ed ff ff 	jmp	-4634 <_runtime.gentraceback+0x2ed>
 10489a7:	4c 8b b4 24 20 03 00 00 	mov	r14, qword ptr [rsp + 800]
 10489af:	41 0f ba e6 02 	bt	r14d, 2
 10489b4:	73 50 	jae	80 <_runtime.gentraceback+0x1566>
 10489b6:	4c 8b 79 30 	mov	r15, qword ptr [rcx + 48]
 10489ba:	49 39 0f 	cmp	qword ptr [r15], rcx
 10489bd:	75 47 	jne	71 <_runtime.gentraceback+0x1566>
 10489bf:	4d 8b bf c0 00 00 00 	mov	r15, qword ptr [r15 + 192]
 10489c6:	4d 85 ff 	test	r15, r15
 10489c9:	74 3b 	je	59 <_runtime.gentraceback+0x1566>
 10489cb:	45 0f b6 74 24 24 	movzx	r14d, byte ptr [r12 + 36]
 10489d1:	41 80 fe 05 	cmp	r14b, 5
 10489d5:	0f 84 ee 00 00 00 	je	238 <_runtime.gentraceback+0x1629>
 10489db:	41 80 fe 0d 	cmp	r14b, 13
 10489df:	75 25 	jne	37 <_runtime.gentraceback+0x1566>
 10489e1:	49 8b 77 38 	mov	rsi, qword ptr [r15 + 56]
 10489e5:	48 89 b4 24 98 02 00 00 	mov	qword ptr [rsp + 664], rsi
 10489ed:	48 8b 71 30 	mov	rsi, qword ptr [rcx + 48]
 10489f1:	48 8b b6 c0 00 00 00 	mov	rsi, qword ptr [rsi + 192]
 10489f8:	4c 8b 86 48 01 00 00 	mov	r8, qword ptr [rsi + 328]
 10489ff:	48 8b b6 40 01 00 00 	mov	rsi, qword ptr [rsi + 320]
 1048a06:	4c 89 84 24 a0 00 00 00 	mov	qword ptr [rsp + 160], r8
 1048a0e:	48 89 b4 24 60 02 00 00 	mov	qword ptr [rsp + 608], rsi
 1048a16:	4c 89 ac 24 18 02 00 00 	mov	qword ptr [rsp + 536], r13
 1048a1e:	4c 89 a4 24 30 02 00 00 	mov	qword ptr [rsp + 560], r12
 1048a26:	4c 89 24 24 	mov	qword ptr [rsp], r12
 1048a2a:	4c 89 6c 24 08 	mov	qword ptr [rsp + 8], r13
 1048a2f:	48 8b 84 24 80 02 00 00 	mov	rax, qword ptr [rsp + 640]
 1048a37:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1048a3c:	48 8d 84 24 e0 00 00 00 	lea	rax, [rsp + 224]
 1048a44:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1048a49:	e8 12 9c ff ff 	call	-25582 <_runtime.funcspdelta>
 1048a4e:	48 63 44 24 20 	movsxd	rax, dword ptr [rsp + 32]
 1048a53:	48 03 84 24 98 02 00 00 	add	rax, qword ptr [rsp + 664]
 1048a5b:	48 89 84 24 a0 02 00 00 	mov	qword ptr [rsp + 672], rax
 1048a63:	48 83 c0 08 	add	rax, 8
 1048a67:	48 89 84 24 a0 02 00 00 	mov	qword ptr [rsp + 672], rax
 1048a6f:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 1048a77:	48 8b 8c 24 f0 02 00 00 	mov	rcx, qword ptr [rsp + 752]
 1048a7f:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1048a84:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 1048a8c:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 1048a91:	4c 8b 8c 24 40 02 00 00 	mov	r9, qword ptr [rsp + 576]
 1048a99:	44 0f b6 54 24 3b 	movzx	r10d, byte ptr [rsp + 59]
 1048a9f:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1048aa4:	4c 8b ac 24 18 02 00 00 	mov	r13, qword ptr [rsp + 536]
 1048aac:	4c 8b a4 24 30 02 00 00 	mov	r12, qword ptr [rsp + 560]
 1048ab4:	4c 8b 84 24 a0 00 00 00 	mov	r8, qword ptr [rsp + 160]
 1048abc:	48 8b b4 24 60 02 00 00 	mov	rsi, qword ptr [rsp + 608]
 1048ac4:	e9 b0 ec ff ff 	jmp	-4944 <_runtime.gentraceback+0x2d9>
 1048ac9:	49 8b 47 40 	mov	rax, qword ptr [r15 + 64]
 1048acd:	48 89 84 24 80 02 00 00 	mov	qword ptr [rsp + 640], rax
 1048ad5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048ad9:	e8 92 90 ff ff 	call	-28526 <_runtime.findfunc>
 1048ade:	4c 8b 64 24 08 	mov	r12, qword ptr [rsp + 8]
 1048ae3:	4c 8b 6c 24 10 	mov	r13, qword ptr [rsp + 16]
 1048ae8:	4c 89 a4 24 70 02 00 00 	mov	qword ptr [rsp + 624], r12
 1048af0:	4c 89 ac 24 78 02 00 00 	mov	qword ptr [rsp + 632], r13
 1048af8:	48 8b 8c 24 f0 02 00 00 	mov	rcx, qword ptr [rsp + 752]
 1048b00:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1048b04:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 1048b0b:	48 8b 40 38 	mov	rax, qword ptr [rax + 56]
 1048b0f:	48 89 84 24 98 02 00 00 	mov	qword ptr [rsp + 664], rax
 1048b17:	48 8b 41 30 	mov	rax, qword ptr [rcx + 48]
 1048b1b:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 1048b22:	4c 8b 80 48 01 00 00 	mov	r8, qword ptr [rax + 328]
 1048b29:	48 8b b0 40 01 00 00 	mov	rsi, qword ptr [rax + 320]
 1048b30:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 1048b38:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1048b3d:	48 8b 9c 24 f8 02 00 00 	mov	rbx, qword ptr [rsp + 760]
 1048b45:	0f b6 7c 24 3a 	movzx	edi, byte ptr [rsp + 58]
 1048b4a:	4c 8b 8c 24 40 02 00 00 	mov	r9, qword ptr [rsp + 576]
 1048b52:	44 0f b6 54 24 3b 	movzx	r10d, byte ptr [rsp + 59]
 1048b58:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 1048b5d:	e9 a4 fe ff ff 	jmp	-348 <_runtime.gentraceback+0x1566>
 1048b62:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1048b6a:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 1048b70:	48 89 d7 	mov	rdi, rdx
 1048b73:	e9 9e ed ff ff 	jmp	-4706 <_runtime.gentraceback+0x476>
 1048b78:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1048b80:	44 0f b6 4c 24 3d 	movzx	r9d, byte ptr [rsp + 61]
 1048b86:	48 89 d7 	mov	rdi, rdx
 1048b89:	e9 88 ed ff ff 	jmp	-4728 <_runtime.gentraceback+0x476>
 1048b8e:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1048b96:	48 85 c0 	test	rax, rax
 1048b99:	0f 84 a9 00 00 00 	je	169 <_runtime.gentraceback+0x17a8>
 1048b9f:	48 8b 84 24 80 02 00 00 	mov	rax, qword ptr [rsp + 640]
 1048ba7:	48 89 84 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rax
 1048baf:	e8 ec 18 fe ff 	call	-124692 <_runtime.printlock>
 1048bb4:	48 8d 05 41 b7 02 00 	lea	rax, [rip + 177985]
 1048bbb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048bbf:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1048bc8:	e8 13 22 fe ff 	call	-122349 <_runtime.printstring>
 1048bcd:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1048bd5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048bd9:	e8 b2 20 fe ff 	call	-122702 <_runtime.printhex>
 1048bde:	e8 4d 1b fe ff 	call	-124083 <_runtime.printnl>
 1048be3:	e8 38 19 fe ff 	call	-124616 <_runtime.printunlock>
 1048be8:	48 8b 84 24 f0 02 00 00 	mov	rax, qword ptr [rsp + 752]
 1048bf0:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1048bf4:	48 8b 00 	mov	rax, qword ptr [rax]
 1048bf7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048bfb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1048c00:	48 8d 84 24 70 02 00 00 	lea	rax, [rsp + 624]
 1048c08:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1048c0d:	48 c7 44 24 18 00 00 00 00 	mov	qword ptr [rsp + 24], 0
 1048c16:	e8 b5 1c 00 00 	call	7349 <_runtime.tracebackHexdump>
 1048c1b:	48 8b 84 24 10 03 00 00 	mov	rax, qword ptr [rsp + 784]
 1048c23:	48 85 c0 	test	rax, rax
 1048c26:	0f 85 6f 02 00 00 	jne	623 <_runtime.gentraceback+0x19fb>
 1048c2c:	48 c7 84 24 28 03 00 00 00 00 00 00 	mov	qword ptr [rsp + 808], 0
 1048c38:	48 8b ac 24 c8 02 00 00 	mov	rbp, qword ptr [rsp + 712]
 1048c40:	48 81 c4 d0 02 00 00 	add	rsp, 720
 1048c47:	c3 	ret
 1048c48:	0f b6 4c 24 3d 	movzx	ecx, byte ptr [rsp + 61]
 1048c4d:	84 c9 	test	cl, cl
 1048c4f:	0f 85 4a ff ff ff 	jne	-182 <_runtime.gentraceback+0x16ff>
 1048c55:	48 85 c0 	test	rax, rax
 1048c58:	eb cc 	jmp	-52 <_runtime.gentraceback+0x1786>
 1048c5a:	48 85 c9 	test	rcx, rcx
 1048c5d:	40 0f 94 c7 	sete	dil
 1048c61:	e9 67 e9 ff ff 	jmp	-5785 <_runtime.gentraceback+0x12d>
 1048c66:	4c 8b 43 40 	mov	r8, qword ptr [rbx + 64]
 1048c6a:	48 8b 53 38 	mov	rdx, qword ptr [rbx + 56]
 1048c6e:	48 8b 7b 50 	mov	rdi, qword ptr [rbx + 80]
 1048c72:	e9 f4 e8 ff ff 	jmp	-5900 <_runtime.gentraceback+0xcb>
 1048c77:	49 89 d0 	mov	r8, rdx
 1048c7a:	48 8b 94 24 e0 02 00 00 	mov	rdx, qword ptr [rsp + 736]
 1048c82:	31 ff 	xor	edi, edi
 1048c84:	e9 e2 e8 ff ff 	jmp	-5918 <_runtime.gentraceback+0xcb>
 1048c89:	4c 8b 84 24 e0 02 00 00 	mov	r8, qword ptr [rsp + 736]
 1048c91:	eb e4 	jmp	-28 <_runtime.gentraceback+0x17d7>
 1048c93:	48 8b 8c 24 10 03 00 00 	mov	rcx, qword ptr [rsp + 784]
 1048c9b:	e9 54 e8 ff ff 	jmp	-6060 <_runtime.gentraceback+0x54>
 1048ca0:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 1048ca8:	48 89 9c 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rbx
 1048cb0:	48 89 7c 24 78 	mov	qword ptr [rsp + 120], rdi
 1048cb5:	48 8b 82 98 00 00 00 	mov	rax, qword ptr [rdx + 152]
 1048cbc:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 1048cc4:	e8 d7 17 fe ff 	call	-124969 <_runtime.printlock>
 1048cc9:	48 8d 05 d3 a5 02 00 	lea	rax, [rip + 173523]
 1048cd0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048cd4:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1048cdd:	e8 fe 20 fe ff 	call	-122626 <_runtime.printstring>
 1048ce2:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 1048cea:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048cee:	e8 2d 1f fe ff 	call	-123091 <_runtime.printint>
 1048cf3:	48 8d 05 ab a6 02 00 	lea	rax, [rip + 173739]
 1048cfa:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048cfe:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1048d07:	e8 d4 20 fe ff 	call	-122668 <_runtime.printstring>
 1048d0c:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1048d14:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048d18:	e8 73 1f fe ff 	call	-123021 <_runtime.printhex>
 1048d1d:	48 8d 05 86 a0 02 00 	lea	rax, [rip + 172166]
 1048d24:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048d28:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1048d31:	e8 aa 20 fe ff 	call	-122710 <_runtime.printstring>
 1048d36:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1048d3e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048d42:	e8 49 1f fe ff 	call	-123063 <_runtime.printhex>
 1048d47:	e8 e4 19 fe ff 	call	-124444 <_runtime.printnl>
 1048d4c:	e8 cf 17 fe ff 	call	-124977 <_runtime.printunlock>
 1048d51:	48 8b 84 24 f0 02 00 00 	mov	rax, qword ptr [rsp + 752]
 1048d59:	48 8b 08 	mov	rcx, qword ptr [rax]
 1048d5c:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 1048d64:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1048d68:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 1048d70:	e8 2b 17 fe ff 	call	-125141 <_runtime.printlock>
 1048d75:	48 8d 05 b3 a2 02 00 	lea	rax, [rip + 172723]
 1048d7c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048d80:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 1048d89:	e8 52 20 fe ff 	call	-122798 <_runtime.printstring>
 1048d8e:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 1048d96:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048d9a:	e8 f1 1e fe ff 	call	-123151 <_runtime.printhex>
 1048d9f:	48 8d 05 b7 9e 02 00 	lea	rax, [rip + 171703]
 1048da6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048daa:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1048db3:	e8 28 20 fe ff 	call	-122840 <_runtime.printstring>
 1048db8:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 1048dc0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048dc4:	e8 c7 1e fe ff 	call	-123193 <_runtime.printhex>
 1048dc9:	48 8d 05 47 9f 02 00 	lea	rax, [rip + 171847]
 1048dd0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048dd4:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 1048ddd:	e8 fe 1f fe ff 	call	-122882 <_runtime.printstring>
 1048de2:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1048de7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048deb:	e8 30 1e fe ff 	call	-123344 <_runtime.printint>
 1048df0:	48 8d 05 9f 9f 02 00 	lea	rax, [rip + 171935]
 1048df7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048dfb:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 1048e04:	e8 d7 1f fe ff 	call	-122921 <_runtime.printstring>
 1048e09:	48 8b 84 24 08 03 00 00 	mov	rax, qword ptr [rsp + 776]
 1048e11:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048e15:	e8 06 1e fe ff 	call	-123386 <_runtime.printint>
 1048e1a:	e8 11 19 fe ff 	call	-124655 <_runtime.printnl>
 1048e1f:	e8 fc 16 fe ff 	call	-125188 <_runtime.printunlock>
 1048e24:	48 8d 05 30 d4 02 00 	lea	rax, [rip + 185392]
 1048e2b:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048e2f:	48 c7 44 24 08 23 00 00 00 	mov	qword ptr [rsp + 8], 35
 1048e38:	e8 23 ff fd ff 	call	-131293 <_runtime.throw>
 1048e3d:	b9 00 00 10 00 	mov	ecx, 1048576
 1048e42:	e8 09 a5 00 00 	call	42249 <_runtime.panicIndex>
 1048e47:	48 89 d8 	mov	rax, rbx
 1048e4a:	b9 00 00 10 00 	mov	ecx, 1048576
 1048e4f:	e8 fc a4 00 00 	call	42236 <_runtime.panicIndex>
 1048e54:	48 89 d8 	mov	rax, rbx
 1048e57:	b9 00 00 10 00 	mov	ecx, 1048576
 1048e5c:	e8 ef a4 00 00 	call	42223 <_runtime.panicIndex>
 1048e61:	48 89 c8 	mov	rax, rcx
 1048e64:	b9 00 00 10 00 	mov	ecx, 1048576
 1048e69:	e8 e2 a4 00 00 	call	42210 <_runtime.panicIndex>
 1048e6e:	b9 00 00 10 00 	mov	ecx, 1048576
 1048e73:	e8 d8 a4 00 00 	call	42200 <_runtime.panicIndex>
 1048e78:	b9 00 00 10 00 	mov	ecx, 1048576
 1048e7d:	e8 ce a4 00 00 	call	42190 <_runtime.panicIndex>
 1048e82:	48 8d 05 84 af 02 00 	lea	rax, [rip + 176004]
 1048e89:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048e8d:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 1048e96:	e8 c5 fe fd ff 	call	-131387 <_runtime.throw>
 1048e9b:	48 8d 05 33 a4 02 00 	lea	rax, [rip + 173107]
 1048ea2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048ea6:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 1048eaf:	e8 ac fe fd ff 	call	-131412 <_runtime.throw>
 1048eb4:	48 8d 05 a1 e5 02 00 	lea	rax, [rip + 189857]
 1048ebb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048ebf:	48 c7 44 24 08 39 00 00 00 	mov	qword ptr [rsp + 8], 57
 1048ec8:	e8 93 fe fd ff 	call	-131437 <_runtime.throw>
 1048ecd:	48 8d 05 e2 e4 02 00 	lea	rax, [rip + 189666]
 1048ed4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048ed8:	48 c7 44 24 08 37 00 00 00 	mov	qword ptr [rsp + 8], 55
 1048ee1:	e8 7a fe fd ff 	call	-131462 <_runtime.throw>
 1048ee6:	90 	nop
 1048ee7:	e8 e4 7c 00 00 	call	31972 <_runtime.morestack_noctxt>
 1048eec:	e9 af e5 ff ff 	jmp	-6737 <_runtime.gentraceback>
 1048ef1:	cc 	int3
 1048ef2:	cc 	int3
 1048ef3:	cc 	int3
 1048ef4:	cc 	int3
 1048ef5:	cc 	int3
 1048ef6:	cc 	int3
 1048ef7:	cc 	int3
 1048ef8:	cc 	int3
 1048ef9:	cc 	int3
 1048efa:	cc 	int3
 1048efb:	cc 	int3
 1048efc:	cc 	int3
 1048efd:	cc 	int3
 1048efe:	cc 	int3
 1048eff:	cc 	int3

_runtime.getArgInfo:
 1048f00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1048f09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1048f0d:	0f 86 99 01 00 00 	jbe	409 <_runtime.getArgInfo+0x1ac>
 1048f13:	48 83 ec 40 	sub	rsp, 64
 1048f17:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1048f1c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1048f21:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1048f26:	8b 48 0c 	mov	ecx, dword ptr [rax + 12]
 1048f29:	48 63 d1 	movsxd	rdx, ecx
 1048f2c:	0f b6 5c 24 60 	movzx	ebx, byte ptr [rsp + 96]
 1048f31:	84 db 	test	bl, bl
 1048f33:	74 08 	je	8 <_runtime.getArgInfo+0x3d>
 1048f35:	81 f9 00 00 00 80 	cmp	ecx, 2147483648
 1048f3b:	74 16 	je	22 <_runtime.getArgInfo+0x53>
 1048f3d:	31 c0 	xor	eax, eax
 1048f3f:	48 89 54 24 70 	mov	qword ptr [rsp + 112], rdx
 1048f44:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 1048f49:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1048f4e:	48 83 c4 40 	add	rsp, 64
 1048f52:	c3 	ret
 1048f53:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1048f58:	48 89 04 24 	mov	qword ptr [rsp], rax
 1048f5c:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 1048f61:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1048f66:	e8 55 93 ff ff 	call	-27819 <_runtime.funcname>
 1048f6b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1048f70:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1048f75:	48 83 f8 14 	cmp	rax, 20
 1048f79:	0f 84 86 00 00 00 	je	134 <_runtime.getArgInfo+0x105>
 1048f7f:	48 83 f8 17 	cmp	rax, 23
 1048f83:	74 0c 	je	12 <_runtime.getArgInfo+0x91>
 1048f85:	31 c0 	xor	eax, eax
 1048f87:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 1048f8c:	48 89 ca 	mov	rdx, rcx
 1048f8f:	eb ae 	jmp	-82 <_runtime.getArgInfo+0x3f>
 1048f91:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1048f95:	48 8d 0d 6e b9 02 00 	lea	rcx, [rip + 178542]
 1048f9c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1048fa1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1048fa6:	e8 45 91 fb ff 	call	-290491 <_runtime.memequal>
 1048fab:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1048fb0:	74 d3 	je	-45 <_runtime.getArgInfo+0x85>
 1048fb2:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1048fb7:	48 85 c0 	test	rax, rax
 1048fba:	74 31 	je	49 <_runtime.getArgInfo+0xed>
 1048fbc:	31 c9 	xor	ecx, ecx
 1048fbe:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1048fc3:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 1048fc6:	48 39 18 	cmp	qword ptr [rax], rbx
 1048fc9:	75 60 	jne	96 <_runtime.getArgInfo+0x12b>
 1048fcb:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 1048fcf:	8b 1a 	mov	ebx, dword ptr [rdx]
 1048fd1:	c1 e3 03 	shl	ebx, 3
 1048fd4:	48 63 db 	movsxd	rbx, ebx
 1048fd7:	84 c9 	test	cl, cl
 1048fd9:	74 08 	je	8 <_runtime.getArgInfo+0xe3>
 1048fdb:	48 89 d0 	mov	rax, rdx
 1048fde:	48 89 d9 	mov	rcx, rbx
 1048fe1:	eb a9 	jmp	-87 <_runtime.getArgInfo+0x8c>
 1048fe3:	48 8b 58 10 	mov	rbx, qword ptr [rax + 16]
 1048fe7:	48 83 e3 f8 	and	rbx, -8
 1048feb:	eb ee 	jmp	-18 <_runtime.getArgInfo+0xdb>
 1048fed:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 1048ff2:	48 8b 52 28 	mov	rdx, qword ptr [rdx + 40]
 1048ff6:	48 89 d3 	mov	rbx, rdx
 1048ff9:	48 83 c3 18 	add	rbx, 24
 1048ffd:	48 8b 02 	mov	rax, qword ptr [rdx]
 1049000:	0f b6 0b 	movzx	ecx, byte ptr [rbx]
 1049003:	eb b9 	jmp	-71 <_runtime.getArgInfo+0xbe>
 1049005:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049009:	48 8d 0d c4 b2 02 00 	lea	rcx, [rip + 176836]
 1049010:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1049015:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104901a:	e8 d1 90 fb ff 	call	-290607 <_runtime.memequal>
 104901f:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1049024:	75 8c 	jne	-116 <_runtime.getArgInfo+0xb2>
 1049026:	e9 5a ff ff ff 	jmp	-166 <_runtime.getArgInfo+0x85>
 104902b:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104902f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1049034:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049039:	e8 82 92 ff ff 	call	-28030 <_runtime.funcname>
 104903e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1049043:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1049048:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104904d:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1049052:	e8 49 14 fe ff 	call	-125879 <_runtime.printlock>
 1049057:	48 8d 05 e8 b3 02 00 	lea	rax, [rip + 177128]
 104905e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049062:	48 c7 44 24 08 15 00 00 00 	mov	qword ptr [rsp + 8], 21
 104906b:	e8 70 1d fe ff 	call	-123536 <_runtime.printstring>
 1049070:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1049075:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049079:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104907e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049083:	e8 58 1d fe ff 	call	-123560 <_runtime.printstring>
 1049088:	e8 a3 16 fe ff 	call	-125277 <_runtime.printnl>
 104908d:	e8 8e 14 fe ff 	call	-125810 <_runtime.printunlock>
 1049092:	48 8d 05 29 ab 02 00 	lea	rax, [rip + 174889]
 1049099:	48 89 04 24 	mov	qword ptr [rsp], rax
 104909d:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 10490a6:	e8 b5 fc fd ff 	call	-131915 <_runtime.throw>
 10490ab:	90 	nop
 10490ac:	e8 1f 7b 00 00 	call	31519 <_runtime.morestack_noctxt>
 10490b1:	e9 4a fe ff ff 	jmp	-438 <_runtime.getArgInfo>
 10490b6:	cc 	int3
 10490b7:	cc 	int3
 10490b8:	cc 	int3
 10490b9:	cc 	int3
 10490ba:	cc 	int3
 10490bb:	cc 	int3
 10490bc:	cc 	int3
 10490bd:	cc 	int3
 10490be:	cc 	int3
 10490bf:	cc 	int3

_runtime.tracebackCgoContext:
 10490c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10490c9:	48 8d 84 24 00 fe ff ff 	lea	rax, [rsp - 512]
 10490d1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10490d5:	0f 86 42 02 00 00 	jbe	578 <_runtime.tracebackCgoContext+0x25d>
 10490db:	48 81 ec 80 02 00 00 	sub	rsp, 640
 10490e2:	48 89 ac 24 78 02 00 00 	mov	qword ptr [rsp + 632], rbp
 10490ea:	48 8d ac 24 78 02 00 00 	lea	rbp, [rsp + 632]
 10490f2:	48 8d 7c 24 40 	lea	rdi, [rsp + 64]
 10490f7:	0f 57 c0 	xorps	xmm0, xmm0
 10490fa:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 10490ff:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1049104:	e8 cb a3 00 00 	call	41931 <_runtime.duffzero+0xe4>
 1049109:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 104910d:	48 8b 84 24 98 02 00 00 	mov	rax, qword ptr [rsp + 664]
 1049115:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049119:	48 8d 44 24 40 	lea	rax, [rsp + 64]
 104911e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049123:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 104912c:	48 c7 44 24 18 20 00 00 00 	mov	qword ptr [rsp + 24], 32
 1049135:	e8 86 1e 00 00 	call	7814 <_runtime.cgoContextPCs>
 104913a:	48 c7 84 24 40 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 576], 0
 1049146:	0f 57 c9 	xorps	xmm1, xmm1
 1049149:	0f 11 8c 24 48 02 00 00 	movups	xmmword ptr [rsp + 584], xmm1
 1049151:	0f 11 8c 24 58 02 00 00 	movups	xmmword ptr [rsp + 600], xmm1
 1049159:	0f 11 8c 24 68 02 00 00 	movups	xmmword ptr [rsp + 616], xmm1
 1049161:	48 8d bc 24 40 01 00 00 	lea	rdi, [rsp + 320]
 1049169:	48 8d 74 24 40 	lea	rsi, [rsp + 64]
 104916e:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 1049173:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 1049178:	e8 53 a6 00 00 	call	42579 <_runtime.duffcopy+0x2a0>
 104917d:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 1049181:	0f b6 84 24 90 02 00 00 	movzx	eax, byte ptr [rsp + 656]
 1049189:	48 8b 8c 24 88 02 00 00 	mov	rcx, qword ptr [rsp + 648]
 1049191:	48 8b 94 24 a8 02 00 00 	mov	rdx, qword ptr [rsp + 680]
 1049199:	48 8b 9c 24 a0 02 00 00 	mov	rbx, qword ptr [rsp + 672]
 10491a1:	31 f6 	xor	esi, esi
 10491a3:	31 ff 	xor	edi, edi
 10491a5:	eb 06 	jmp	6 <_runtime.tracebackCgoContext+0xed>
 10491a7:	48 ff c6 	inc	rsi
 10491aa:	48 ff c3 	inc	rbx
 10491ad:	48 89 9c 24 a0 02 00 00 	mov	qword ptr [rsp + 672], rbx
 10491b5:	48 83 fe 20 	cmp	rsi, 32
 10491b9:	0f 8d 0c 01 00 00 	jge	268 <_runtime.tracebackCgoContext+0x20b>
 10491bf:	4c 8b 84 f4 40 01 00 00 	mov	r8, qword ptr [rsp + 8*rsi + 320]
 10491c7:	4d 85 c0 	test	r8, r8
 10491ca:	0f 84 fb 00 00 00 	je	251 <_runtime.tracebackCgoContext+0x20b>
 10491d0:	48 39 d3 	cmp	rbx, rdx
 10491d3:	0f 8d f2 00 00 00 	jge	242 <_runtime.tracebackCgoContext+0x20b>
 10491d9:	48 85 c9 	test	rcx, rcx
 10491dc:	74 11 	je	17 <_runtime.tracebackCgoContext+0x12f>
 10491de:	48 81 fb 00 00 10 00 	cmp	rbx, 1048576
 10491e5:	0f 83 24 01 00 00 	jae	292 <_runtime.tracebackCgoContext+0x24f>
 10491eb:	4c 89 04 d9 	mov	qword ptr [rcx + 8*rbx], r8
 10491ef:	84 c0 	test	al, al
 10491f1:	74 b4 	je	-76 <_runtime.tracebackCgoContext+0xe7>
 10491f3:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 10491f8:	40 88 7c 24 27 	mov	byte ptr [rsp + 39], dil
 10491fd:	4c 8b 0d 1c 50 08 00 	mov	r9, qword ptr [rip + 544796]
 1049204:	4c 89 4c 24 30 	mov	qword ptr [rsp + 48], r9
 1049209:	49 83 f9 00 	cmp	r9, 0
 104920d:	74 6e 	je	110 <_runtime.tracebackCgoContext+0x1bd>
 104920f:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1049213:	48 29 da 	sub	rdx, rbx
 1049216:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104921b:	48 8d 8c 24 40 02 00 00 	lea	rcx, [rsp + 576]
 1049223:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1049228:	e8 d3 1a 00 00 	call	6867 <_runtime.printOneCgoTraceback>
 104922d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1049232:	48 8b 8c 24 a0 02 00 00 	mov	rcx, qword ptr [rsp + 672]
 104923a:	48 8d 04 08 	lea	rax, [rax + rcx]
 104923e:	48 8d 40 ff 	lea	rax, [rax - 1]
 1049242:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1049247:	48 83 f9 00 	cmp	rcx, 0
 104924b:	40 0f 95 c7 	setne	dil
 104924f:	44 0f b6 44 24 27 	movzx	r8d, byte ptr [rsp + 39]
 1049255:	44 09 c7 	or	edi, r8d
 1049258:	48 8b 8c 24 88 02 00 00 	mov	rcx, qword ptr [rsp + 648]
 1049260:	48 8b 94 24 a8 02 00 00 	mov	rdx, qword ptr [rsp + 680]
 1049268:	48 8b 74 24 38 	mov	rsi, qword ptr [rsp + 56]
 104926d:	48 89 c3 	mov	rbx, rax
 1049270:	0f b6 84 24 90 02 00 00 	movzx	eax, byte ptr [rsp + 656]
 1049278:	e9 2a ff ff ff 	jmp	-214 <_runtime.tracebackCgoContext+0xe7>
 104927d:	4c 89 44 24 28 	mov	qword ptr [rsp + 40], r8
 1049282:	e8 19 12 fe ff 	call	-126439 <_runtime.printlock>
 1049287:	48 8d 05 68 b3 02 00 	lea	rax, [rip + 177000]
 104928e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049292:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 104929b:	e8 40 1b fe ff 	call	-124096 <_runtime.printstring>
 10492a0:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10492a5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10492a9:	e8 e2 19 fe ff 	call	-124446 <_runtime.printhex>
 10492ae:	e8 7d 14 fe ff 	call	-125827 <_runtime.printnl>
 10492b3:	e8 68 12 fe ff 	call	-126360 <_runtime.printunlock>
 10492b8:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10492bd:	48 83 f8 00 	cmp	rax, 0
 10492c1:	48 8b 84 24 a0 02 00 00 	mov	rax, qword ptr [rsp + 672]
 10492c9:	eb 80 	jmp	-128 <_runtime.tracebackCgoContext+0x18b>
 10492cb:	40 84 ff 	test	dil, dil
 10492ce:	75 18 	jne	24 <_runtime.tracebackCgoContext+0x228>
 10492d0:	48 89 9c 24 b0 02 00 00 	mov	qword ptr [rsp + 688], rbx
 10492d8:	48 8b ac 24 78 02 00 00 	mov	rbp, qword ptr [rsp + 632]
 10492e0:	48 81 c4 80 02 00 00 	add	rsp, 640
 10492e7:	c3 	ret
 10492e8:	48 c7 84 24 40 02 00 00 00 00 00 00 	mov	qword ptr [rsp + 576], 0
 10492f4:	48 8d 84 24 40 02 00 00 	lea	rax, [rsp + 576]
 10492fc:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049300:	e8 3b 1c 00 00 	call	7227 <_runtime.callCgoSymbolizer>
 1049305:	48 8b 9c 24 a0 02 00 00 	mov	rbx, qword ptr [rsp + 672]
 104930d:	eb c1 	jmp	-63 <_runtime.tracebackCgoContext+0x210>
 104930f:	48 89 d8 	mov	rax, rbx
 1049312:	b9 00 00 10 00 	mov	ecx, 1048576
 1049317:	e8 34 a0 00 00 	call	41012 <_runtime.panicIndex>
 104931c:	90 	nop
 104931d:	e8 ae 78 00 00 	call	30894 <_runtime.morestack_noctxt>
 1049322:	e9 99 fd ff ff 	jmp	-615 <_runtime.tracebackCgoContext>
 1049327:	cc 	int3
 1049328:	cc 	int3
 1049329:	cc 	int3
 104932a:	cc 	int3
 104932b:	cc 	int3
 104932c:	cc 	int3
 104932d:	cc 	int3
 104932e:	cc 	int3
 104932f:	cc 	int3

_runtime.printcreatedby:
 1049330:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1049339:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104933d:	0f 86 af 00 00 00 	jbe	175 <_runtime.printcreatedby+0xc2>
 1049343:	48 83 ec 48 	sub	rsp, 72
 1049347:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 104934c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1049351:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1049356:	48 8b 88 18 01 00 00 	mov	rcx, qword ptr [rax + 280]
 104935d:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 1049362:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049366:	e8 05 88 ff ff 	call	-30715 <_runtime.findfunc>
 104936b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1049370:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1049375:	48 85 c0 	test	rax, rax
 1049378:	75 39 	jne	57 <_runtime.printcreatedby+0x83>
 104937a:	31 d2 	xor	edx, edx
 104937c:	84 d2 	test	dl, dl
 104937e:	74 0f 	je	15 <_runtime.printcreatedby+0x5f>
 1049380:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1049385:	48 83 ba 98 00 00 00 01 	cmp	qword ptr [rdx + 152], 1
 104938d:	75 0a 	jne	10 <_runtime.printcreatedby+0x69>
 104938f:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1049394:	48 83 c4 48 	add	rsp, 72
 1049398:	c3 	ret
 1049399:	48 89 04 24 	mov	qword ptr [rsp], rax
 104939d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10493a2:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10493a7:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10493ac:	e8 4f 00 00 00 	call	79 <_runtime.printcreatedby1>
 10493b1:	eb dc 	jmp	-36 <_runtime.printcreatedby+0x5f>
 10493b3:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 10493b8:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10493bd:	48 89 04 24 	mov	qword ptr [rsp], rax
 10493c1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10493c6:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 10493cb:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10493d0:	66 c7 44 24 18 00 00 	mov	word ptr [rsp + 24], 0
 10493d7:	c6 44 24 1a 00 	mov	byte ptr [rsp + 26], 0
 10493dc:	e8 df 0c 00 00 	call	3295 <_runtime.showframe>
 10493e1:	0f b6 54 24 20 	movzx	edx, byte ptr [rsp + 32]
 10493e6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10493eb:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10493f0:	eb 8a 	jmp	-118 <_runtime.printcreatedby+0x4c>
 10493f2:	e8 d9 77 00 00 	call	30681 <_runtime.morestack_noctxt>
 10493f7:	e9 34 ff ff ff 	jmp	-204 <_runtime.printcreatedby>
 10493fc:	cc 	int3
 10493fd:	cc 	int3
 10493fe:	cc 	int3
 10493ff:	cc 	int3

_runtime.printcreatedby1:
 1049400:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1049409:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104940d:	0f 86 a1 01 00 00 	jbe	417 <_runtime.printcreatedby1+0x1b4>
 1049413:	48 83 ec 68 	sub	rsp, 104
 1049417:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 104941c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1049421:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1049426:	48 89 04 24 	mov	qword ptr [rsp], rax
 104942a:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 104942f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1049434:	e8 87 8e ff ff 	call	-29049 <_runtime.funcname>
 1049439:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104943e:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 1049443:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1049448:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 104944d:	e8 4e 10 fe ff 	call	-126898 <_runtime.printlock>
 1049452:	48 8d 05 8e 9f 02 00 	lea	rax, [rip + 171918]
 1049459:	48 89 04 24 	mov	qword ptr [rsp], rax
 104945d:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 1049466:	e8 75 19 fe ff 	call	-124555 <_runtime.printstring>
 104946b:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1049470:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049474:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1049479:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104947e:	e8 5d 19 fe ff 	call	-124579 <_runtime.printstring>
 1049483:	e8 a8 12 fe ff 	call	-126296 <_runtime.printnl>
 1049488:	e8 93 10 fe ff 	call	-126829 <_runtime.printunlock>
 104948d:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1049492:	48 8b 08 	mov	rcx, qword ptr [rax]
 1049495:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 104949d:	48 39 d1 	cmp	rcx, rdx
 10494a0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10494a4:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 10494a9:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10494ae:	48 8d 5a ff 	lea	rbx, [rdx - 1]
 10494b2:	48 39 d1 	cmp	rcx, rdx
 10494b5:	48 0f 42 d3 	cmovb	rdx, rbx
 10494b9:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10494be:	e8 1d 91 ff ff 	call	-28387 <_runtime.funcline>
 10494c3:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 10494c8:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 10494cd:	48 63 4c 24 28 	movsxd	rcx, dword ptr [rsp + 40]
 10494d2:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 10494d7:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 10494dc:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 10494e1:	e8 ba 0f fe ff 	call	-127046 <_runtime.printlock>
 10494e6:	48 8d 05 79 97 02 00 	lea	rax, [rip + 169849]
 10494ed:	48 89 04 24 	mov	qword ptr [rsp], rax
 10494f1:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 10494fa:	e8 e1 18 fe ff 	call	-124703 <_runtime.printstring>
 10494ff:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1049504:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049508:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104950d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049512:	e8 c9 18 fe ff 	call	-124727 <_runtime.printstring>
 1049517:	48 8d 05 42 97 02 00 	lea	rax, [rip + 169794]
 104951e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049522:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104952b:	e8 b0 18 fe ff 	call	-124752 <_runtime.printstring>
 1049530:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1049535:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049539:	e8 e2 16 fe ff 	call	-125214 <_runtime.printint>
 104953e:	e8 dd 0f fe ff 	call	-127011 <_runtime.printunlock>
 1049543:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1049548:	48 8b 00 	mov	rax, qword ptr [rax]
 104954b:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1049553:	48 39 c1 	cmp	rcx, rax
 1049556:	77 19 	ja	25 <_runtime.printcreatedby1+0x171>
 1049558:	e8 43 0f fe ff 	call	-127165 <_runtime.printlock>
 104955d:	e8 ce 11 fe ff 	call	-126514 <_runtime.printnl>
 1049562:	e8 b9 0f fe ff 	call	-127047 <_runtime.printunlock>
 1049567:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 104956c:	48 83 c4 68 	add	rsp, 104
 1049570:	c3 	ret
 1049571:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1049576:	e8 25 0f fe ff 	call	-127195 <_runtime.printlock>
 104957b:	48 8d 05 e6 96 02 00 	lea	rax, [rip + 169702]
 1049582:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049586:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104958f:	e8 4c 18 fe ff 	call	-124852 <_runtime.printstring>
 1049594:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104959c:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10495a1:	48 29 c8 	sub	rax, rcx
 10495a4:	48 89 04 24 	mov	qword ptr [rsp], rax
 10495a8:	e8 e3 16 fe ff 	call	-125213 <_runtime.printhex>
 10495ad:	e8 6e 0f fe ff 	call	-127122 <_runtime.printunlock>
 10495b2:	eb a4 	jmp	-92 <_runtime.printcreatedby1+0x158>
 10495b4:	e8 17 76 00 00 	call	30231 <_runtime.morestack_noctxt>
 10495b9:	e9 42 fe ff ff 	jmp	-446 <_runtime.printcreatedby1>
 10495be:	cc 	int3
 10495bf:	cc 	int3

_runtime.traceback:
 10495c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10495c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10495cd:	76 4d 	jbe	77 <_runtime.traceback+0x5c>
 10495cf:	48 83 ec 30 	sub	rsp, 48
 10495d3:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10495d8:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10495dd:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10495e2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10495e6:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 10495eb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10495f0:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10495f5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 10495fa:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10495ff:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1049604:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 104960d:	e8 de 00 00 00 	call	222 <_runtime.traceback1>
 1049612:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1049617:	48 83 c4 30 	add	rsp, 48
 104961b:	c3 	ret
 104961c:	e8 af 75 00 00 	call	30127 <_runtime.morestack_noctxt>
 1049621:	eb 9d 	jmp	-99 <_runtime.traceback>
 1049623:	cc 	int3
 1049624:	cc 	int3
 1049625:	cc 	int3
 1049626:	cc 	int3
 1049627:	cc 	int3
 1049628:	cc 	int3
 1049629:	cc 	int3
 104962a:	cc 	int3
 104962b:	cc 	int3
 104962c:	cc 	int3
 104962d:	cc 	int3
 104962e:	cc 	int3
 104962f:	cc 	int3

_runtime.tracebacktrap:
 1049630:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1049639:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104963d:	0f 86 9a 00 00 00 	jbe	154 <_runtime.tracebacktrap+0xad>
 1049643:	48 83 ec 30 	sub	rsp, 48
 1049647:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104964c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1049651:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1049656:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104965a:	48 8b 91 e8 02 00 00 	mov	rdx, qword ptr [rcx + 744]
 1049661:	48 85 d2 	test	rdx, rdx
 1049664:	74 3d 	je	61 <_runtime.tracebacktrap+0x73>
 1049666:	48 8b 81 e0 02 00 00 	mov	rax, qword ptr [rcx + 736]
 104966d:	48 8b 89 f0 02 00 00 	mov	rcx, qword ptr [rcx + 752]
 1049674:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049678:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104967d:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1049686:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104968b:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1049694:	e8 57 00 00 00 	call	87 <_runtime.traceback1>
 1049699:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104969e:	48 83 c4 30 	add	rsp, 48
 10496a2:	c3 	ret
 10496a3:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10496a8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10496ac:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10496b1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10496b6:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 10496bb:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10496c0:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10496c5:	48 c7 44 24 20 02 00 00 00 	mov	qword ptr [rsp + 32], 2
 10496ce:	e8 1d 00 00 00 	call	29 <_runtime.traceback1>
 10496d3:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10496d8:	48 83 c4 30 	add	rsp, 48
 10496dc:	c3 	ret
 10496dd:	e8 ee 74 00 00 	call	29934 <_runtime.morestack_noctxt>
 10496e2:	e9 49 ff ff ff 	jmp	-183 <_runtime.tracebacktrap>
 10496e7:	cc 	int3
 10496e8:	cc 	int3
 10496e9:	cc 	int3
 10496ea:	cc 	int3
 10496eb:	cc 	int3
 10496ec:	cc 	int3
 10496ed:	cc 	int3
 10496ee:	cc 	int3
 10496ef:	cc 	int3

_runtime.traceback1:
 10496f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10496f9:	48 8d 84 24 e0 fe ff ff 	lea	rax, [rsp - 288]
 1049701:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1049705:	0f 86 f8 02 00 00 	jbe	760 <_runtime.traceback1+0x313>
 104970b:	48 81 ec a0 01 00 00 	sub	rsp, 416
 1049712:	48 89 ac 24 98 01 00 00 	mov	qword ptr [rsp + 408], rbp
 104971a:	48 8d ac 24 98 01 00 00 	lea	rbp, [rsp + 408]
 1049722:	80 3d 41 e0 0a 00 00 	cmp	byte ptr [rip + 712769], 0
 1049729:	0f 84 c7 02 00 00 	je	711 <_runtime.traceback1+0x306>
 104972f:	48 8b 84 24 c0 01 00 00 	mov	rax, qword ptr [rsp + 448]
 1049737:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104973b:	48 85 c9 	test	rcx, rcx
 104973e:	74 26 	je	38 <_runtime.traceback1+0x76>
 1049740:	83 b9 38 01 00 00 00 	cmp	dword ptr [rcx + 312], 0
 1049747:	7e 1d 	jle	29 <_runtime.traceback1+0x76>
 1049749:	48 83 78 70 00 	cmp	qword ptr [rax + 112], 0
 104974e:	74 16 	je	22 <_runtime.traceback1+0x76>
 1049750:	48 8b 91 40 01 00 00 	mov	rdx, qword ptr [rcx + 320]
 1049757:	48 85 d2 	test	rdx, rdx
 104975a:	74 0a 	je	10 <_runtime.traceback1+0x76>
 104975c:	48 83 3a 00 	cmp	qword ptr [rdx], 0
 1049760:	0f 85 27 02 00 00 	jne	551 <_runtime.traceback1+0x29d>
 1049766:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 104976c:	0f ba f1 0c 	btr	ecx, 12
 1049770:	83 f9 03 	cmp	ecx, 3
 1049773:	0f 85 f7 01 00 00 	jne	503 <_runtime.traceback1+0x280>
 1049779:	48 8b 48 78 	mov	rcx, qword ptr [rax + 120]
 104977d:	48 8b 50 70 	mov	rdx, qword ptr [rax + 112]
 1049781:	48 8b 9c 24 c8 01 00 00 	mov	rbx, qword ptr [rsp + 456]
 1049789:	48 83 e3 fd 	and	rbx, -3
 104978d:	48 89 8c 24 a8 01 00 00 	mov	qword ptr [rsp + 424], rcx
 1049795:	48 89 94 24 b0 01 00 00 	mov	qword ptr [rsp + 432], rdx
 104979d:	48 89 9c 24 c8 01 00 00 	mov	qword ptr [rsp + 456], rbx
 10497a5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10497a9:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10497ae:	48 8b b4 24 b8 01 00 00 	mov	rsi, qword ptr [rsp + 440]
 10497b6:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10497bb:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10497c0:	0f 57 c0 	xorps	xmm0, xmm0
 10497c3:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 10497c8:	48 c7 44 24 30 64 00 00 00 	mov	qword ptr [rsp + 48], 100
 10497d1:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 10497d6:	48 89 5c 24 48 	mov	qword ptr [rsp + 72], rbx
 10497db:	e8 c0 dc ff ff 	call	-9024 <_runtime.gentraceback>
 10497e0:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10497e5:	48 85 c0 	test	rax, rax
 10497e8:	75 12 	jne	18 <_runtime.traceback1+0x10c>
 10497ea:	48 8b 8c 24 c8 01 00 00 	mov	rcx, qword ptr [rsp + 456]
 10497f2:	0f ba e1 00 	bt	ecx, 0
 10497f6:	0f 83 13 01 00 00 	jae	275 <_runtime.traceback1+0x21f>
 10497fc:	48 83 f8 64 	cmp	rax, 100
 1049800:	0f 84 e1 00 00 00 	je	225 <_runtime.traceback1+0x1f7>
 1049806:	48 8b 84 24 c0 01 00 00 	mov	rax, qword ptr [rsp + 448]
 104980e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049812:	e8 19 fb ff ff 	call	-1255 <_runtime.printcreatedby>
 1049817:	48 8b 84 24 c0 01 00 00 	mov	rax, qword ptr [rsp + 448]
 104981f:	48 8b 80 20 01 00 00 	mov	rax, qword ptr [rax + 288]
 1049826:	48 85 c0 	test	rax, rax
 1049829:	0f 84 a8 00 00 00 	je	168 <_runtime.traceback1+0x1e7>
 104982f:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1049833:	48 8b 00 	mov	rax, qword ptr [rax]
 1049836:	48 85 c9 	test	rcx, rcx
 1049839:	0f 8e 88 00 00 00 	jle	136 <_runtime.traceback1+0x1d7>
 104983f:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 1049844:	31 d2 	xor	edx, edx
 1049846:	eb 12 	jmp	18 <_runtime.traceback1+0x16a>
 1049848:	48 8b 9c 24 68 01 00 00 	mov	rbx, qword ptr [rsp + 360]
 1049850:	48 83 c3 28 	add	rbx, 40
 1049854:	48 89 c2 	mov	rdx, rax
 1049857:	48 89 d8 	mov	rax, rbx
 104985a:	48 89 84 24 68 01 00 00 	mov	qword ptr [rsp + 360], rax
 1049862:	48 89 54 24 58 	mov	qword ptr [rsp + 88], rdx
 1049867:	48 8b 08 	mov	rcx, qword ptr [rax]
 104986a:	48 89 8c 24 70 01 00 00 	mov	qword ptr [rsp + 368], rcx
 1049872:	0f 10 40 08 	movups	xmm0, xmmword ptr [rax + 8]
 1049876:	0f 11 84 24 78 01 00 00 	movups	xmmword ptr [rsp + 376], xmm0
 104987e:	0f 10 40 18 	movups	xmm0, xmmword ptr [rax + 24]
 1049882:	0f 11 84 24 88 01 00 00 	movups	xmmword ptr [rsp + 392], xmm0
 104988a:	48 8b 8c 24 70 01 00 00 	mov	rcx, qword ptr [rsp + 368]
 1049892:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049896:	0f 10 84 24 78 01 00 00 	movups	xmm0, xmmword ptr [rsp + 376]
 104989e:	0f 11 44 24 08 	movups	xmmword ptr [rsp + 8], xmm0
 10498a3:	0f 10 84 24 88 01 00 00 	movups	xmm0, xmmword ptr [rsp + 392]
 10498ab:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 10498b0:	e8 5b 01 00 00 	call	347 <_runtime.printAncestorTraceback>
 10498b5:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 10498ba:	48 ff c0 	inc	rax
 10498bd:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 10498c2:	48 39 c8 	cmp	rax, rcx
 10498c5:	7c 81 	jl	-127 <_runtime.traceback1+0x158>
 10498c7:	48 8b ac 24 98 01 00 00 	mov	rbp, qword ptr [rsp + 408]
 10498cf:	48 81 c4 a0 01 00 00 	add	rsp, 416
 10498d6:	c3 	ret
 10498d7:	48 8b ac 24 98 01 00 00 	mov	rbp, qword ptr [rsp + 408]
 10498df:	48 81 c4 a0 01 00 00 	add	rsp, 416
 10498e6:	c3 	ret
 10498e7:	e8 b4 0b fe ff 	call	-128076 <_runtime.printlock>
 10498ec:	48 8d 05 1b c0 02 00 	lea	rax, [rip + 180251]
 10498f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 10498f7:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 1049900:	e8 db 14 fe ff 	call	-125733 <_runtime.printstring>
 1049905:	e8 16 0c fe ff 	call	-127978 <_runtime.printunlock>
 104990a:	e9 f7 fe ff ff 	jmp	-265 <_runtime.traceback1+0x116>
 104990f:	48 8b 84 24 a8 01 00 00 	mov	rax, qword ptr [rsp + 424]
 1049917:	48 89 04 24 	mov	qword ptr [rsp], rax
 104991b:	48 8b 84 24 b0 01 00 00 	mov	rax, qword ptr [rsp + 432]
 1049923:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049928:	48 8b 84 24 b8 01 00 00 	mov	rax, qword ptr [rsp + 440]
 1049930:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1049935:	48 8b 84 24 c0 01 00 00 	mov	rax, qword ptr [rsp + 448]
 104993d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1049942:	0f 57 c0 	xorps	xmm0, xmm0
 1049945:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 104994a:	48 c7 44 24 30 64 00 00 00 	mov	qword ptr [rsp + 48], 100
 1049953:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1049958:	48 83 c9 01 	or	rcx, 1
 104995c:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1049961:	e8 3a db ff ff 	call	-9414 <_runtime.gentraceback>
 1049966:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104996b:	e9 8c fe ff ff 	jmp	-372 <_runtime.traceback1+0x10c>
 1049970:	48 8b 8c 24 a8 01 00 00 	mov	rcx, qword ptr [rsp + 424]
 1049978:	48 8b 94 24 b0 01 00 00 	mov	rdx, qword ptr [rsp + 432]
 1049980:	48 8b 9c 24 c8 01 00 00 	mov	rbx, qword ptr [rsp + 456]
 1049988:	e9 00 fe ff ff 	jmp	-512 <_runtime.traceback1+0x9d>
 104998d:	ba 01 00 00 00 	mov	edx, 1
 1049992:	87 91 3c 01 00 00 	xchg	dword ptr [rcx + 316], edx
 1049998:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104999c:	48 8b b1 40 01 00 00 	mov	rsi, qword ptr [rcx + 320]
 10499a3:	84 01 	test	byte ptr [rcx], al
 10499a5:	48 8d 7c 24 68 	lea	rdi, [rsp + 104]
 10499aa:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 10499af:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 10499b4:	e8 17 9e 00 00 	call	40471 <_runtime.duffcopy+0x2a0>
 10499b9:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 10499bd:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10499c1:	48 8b 89 40 01 00 00 	mov	rcx, qword ptr [rcx + 320]
 10499c8:	48 c7 01 00 00 00 00 	mov	qword ptr [rcx], 0
 10499cf:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 10499d3:	31 d2 	xor	edx, edx
 10499d5:	87 91 3c 01 00 00 	xchg	dword ptr [rcx + 316], edx
 10499db:	48 8d 4c 24 68 	lea	rcx, [rsp + 104]
 10499e0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10499e4:	e8 e7 11 00 00 	call	4583 <_runtime.printCgoTraceback>
 10499e9:	48 8b 84 24 c0 01 00 00 	mov	rax, qword ptr [rsp + 448]
 10499f1:	e9 70 fd ff ff 	jmp	-656 <_runtime.traceback1+0x76>
 10499f6:	48 8b 84 24 c0 01 00 00 	mov	rax, qword ptr [rsp + 448]
 10499fe:	e9 63 fd ff ff 	jmp	-669 <_runtime.traceback1+0x76>
 1049a03:	e8 c8 71 00 00 	call	29128 <_runtime.morestack_noctxt>
 1049a08:	e9 e3 fc ff ff 	jmp	-797 <_runtime.traceback1>
 1049a0d:	cc 	int3
 1049a0e:	cc 	int3
 1049a0f:	cc 	int3

_runtime.printAncestorTraceback:
 1049a10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1049a19:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1049a1d:	0f 86 d1 01 00 00 	jbe	465 <_runtime.printAncestorTraceback+0x1e4>
 1049a23:	48 83 ec 60 	sub	rsp, 96
 1049a27:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 1049a2c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1049a31:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1049a39:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1049a3e:	e8 5d 0a fe ff 	call	-128419 <_runtime.printlock>
 1049a43:	48 8d 05 2f b8 02 00 	lea	rax, [rip + 178223]
 1049a4a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049a4e:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 1049a57:	e8 84 13 fe ff 	call	-126076 <_runtime.printstring>
 1049a5c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1049a61:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049a65:	e8 b6 11 fe ff 	call	-126538 <_runtime.printint>
 1049a6a:	48 8d 05 3d 92 02 00 	lea	rax, [rip + 168509]
 1049a71:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049a75:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 1049a7e:	e8 5d 13 fe ff 	call	-126115 <_runtime.printstring>
 1049a83:	e8 98 0a fe ff 	call	-128360 <_runtime.printunlock>
 1049a88:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1049a8d:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1049a92:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 1049a97:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1049a9c:	31 d2 	xor	edx, edx
 1049a9e:	eb 13 	jmp	19 <_runtime.printAncestorTraceback+0xa3>
 1049aa0:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1049aa5:	48 8d 53 01 	lea	rdx, [rbx + 1]
 1049aa9:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1049aae:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1049ab3:	48 39 c2 	cmp	rdx, rax
 1049ab6:	7d 7b 	jge	123 <_runtime.printAncestorTraceback+0x123>
 1049ab8:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 1049abd:	48 8b 04 d1 	mov	rax, qword ptr [rcx + 8*rdx]
 1049ac1:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 1049ac6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049aca:	e8 a1 80 ff ff 	call	-32607 <_runtime.findfunc>
 1049acf:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1049ad4:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1049ad9:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1049ade:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1049ae3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049ae7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049aec:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 1049af1:	48 85 d2 	test	rdx, rdx
 1049af4:	0f 94 44 24 10 	sete	byte ptr [rsp + 16]
 1049af9:	66 c7 44 24 11 00 00 	mov	word ptr [rsp + 17], 0
 1049b00:	e8 7b 06 00 00 	call	1659 <_runtime.showfuncinfo>
 1049b05:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1049b0a:	74 94 	je	-108 <_runtime.printAncestorTraceback+0x90>
 1049b0c:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 1049b11:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049b15:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1049b1a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049b1f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1049b24:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1049b29:	e8 d2 00 00 00 	call	210 <_runtime.printAncestorTracebackFuncInfo>
 1049b2e:	e9 6d ff ff ff 	jmp	-147 <_runtime.printAncestorTraceback+0x90>
 1049b33:	48 83 7c 24 70 64 	cmp	qword ptr [rsp + 112], 100
 1049b39:	0f 84 8d 00 00 00 	je	141 <_runtime.printAncestorTraceback+0x1bc>
 1049b3f:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1049b47:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049b4b:	e8 20 80 ff ff 	call	-32736 <_runtime.findfunc>
 1049b50:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1049b55:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1049b5a:	48 85 c9 	test	rcx, rcx
 1049b5d:	75 38 	jne	56 <_runtime.printAncestorTraceback+0x187>
 1049b5f:	31 d2 	xor	edx, edx
 1049b61:	84 d2 	test	dl, dl
 1049b63:	74 0b 	je	11 <_runtime.printAncestorTraceback+0x160>
 1049b65:	48 83 bc 24 80 00 00 00 01 	cmp	qword ptr [rsp + 128], 1
 1049b6e:	75 0a 	jne	10 <_runtime.printAncestorTraceback+0x16a>
 1049b70:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1049b75:	48 83 c4 60 	add	rsp, 96
 1049b79:	c3 	ret
 1049b7a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049b7e:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049b83:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1049b8b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1049b90:	e8 6b f8 ff ff 	call	-1941 <_runtime.printcreatedby1>
 1049b95:	eb d9 	jmp	-39 <_runtime.printAncestorTraceback+0x160>
 1049b97:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1049b9c:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 1049ba1:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049ba5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049baa:	66 c7 44 24 10 00 00 	mov	word ptr [rsp + 16], 0
 1049bb1:	c6 44 24 12 00 	mov	byte ptr [rsp + 18], 0
 1049bb6:	e8 c5 05 00 00 	call	1477 <_runtime.showfuncinfo>
 1049bbb:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 1049bc0:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1049bc5:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1049bca:	eb 95 	jmp	-107 <_runtime.printAncestorTraceback+0x151>
 1049bcc:	e8 cf 08 fe ff 	call	-128817 <_runtime.printlock>
 1049bd1:	48 8d 05 36 bd 02 00 	lea	rax, [rip + 179510]
 1049bd8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049bdc:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 1049be5:	e8 f6 11 fe ff 	call	-126474 <_runtime.printstring>
 1049bea:	e8 31 09 fe ff 	call	-128719 <_runtime.printunlock>
 1049bef:	e9 4b ff ff ff 	jmp	-181 <_runtime.printAncestorTraceback+0x12f>
 1049bf4:	e8 d7 6f 00 00 	call	28631 <_runtime.morestack_noctxt>
 1049bf9:	e9 12 fe ff ff 	jmp	-494 <_runtime.printAncestorTraceback>
 1049bfe:	cc 	int3
 1049bff:	cc 	int3

_runtime.printAncestorTracebackFuncInfo:
 1049c00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1049c09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1049c0d:	0f 86 09 03 00 00 	jbe	777 <_runtime.printAncestorTracebackFuncInfo+0x31c>
 1049c13:	48 83 ec 70 	sub	rsp, 112
 1049c17:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 1049c1c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 1049c21:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1049c26:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049c2a:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1049c32:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1049c37:	e8 84 86 ff ff 	call	-31100 <_runtime.funcname>
 1049c3c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1049c41:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1049c46:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 1049c4b:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 1049c50:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1049c55:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1049c59:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 1049c61:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1049c66:	c6 44 24 10 04 	mov	byte ptr [rsp + 16], 4
 1049c6b:	e8 10 8d ff ff 	call	-29424 <_runtime.funcdata>
 1049c70:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1049c75:	48 85 c0 	test	rax, rax
 1049c78:	0f 85 f2 01 00 00 	jne	498 <_runtime.printAncestorTracebackFuncInfo+0x270>
 1049c7e:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1049c83:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1049c88:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1049c8d:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 1049c92:	48 8b 54 24 78 	mov	rdx, qword ptr [rsp + 120]
 1049c97:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1049c9b:	48 8b 9c 24 80 00 00 00 	mov	rbx, qword ptr [rsp + 128]
 1049ca3:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 1049ca8:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 1049cb0:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1049cb5:	e8 26 89 ff ff 	call	-30426 <_runtime.funcline>
 1049cba:	48 63 44 24 28 	movsxd	rax, dword ptr [rsp + 40]
 1049cbf:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1049cc4:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1049cc9:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1049cce:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1049cd3:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 1049cd8:	48 8b 5c 24 30 	mov	rbx, qword ptr [rsp + 48]
 1049cdd:	48 83 fb 0f 	cmp	rbx, 15
 1049ce1:	0f 85 7f 01 00 00 	jne	383 <_runtime.printAncestorTracebackFuncInfo+0x266>
 1049ce7:	48 be 72 75 6e 74 69 6d 65 2e 	movabs	rsi, 3343198598084851058
 1049cf1:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 1049cf6:	48 39 37 	cmp	qword ptr [rdi], rsi
 1049cf9:	0f 85 5f 01 00 00 	jne	351 <_runtime.printAncestorTracebackFuncInfo+0x25e>
 1049cff:	81 7f 08 67 6f 70 61 	cmp	dword ptr [rdi + 8], 1634758503
 1049d06:	0f 85 4a 01 00 00 	jne	330 <_runtime.printAncestorTracebackFuncInfo+0x256>
 1049d0c:	66 81 7f 0c 6e 69 	cmp	word ptr [rdi + 12], 26990
 1049d12:	0f 85 36 01 00 00 	jne	310 <_runtime.printAncestorTracebackFuncInfo+0x24e>
 1049d18:	80 7f 0e 63 	cmp	byte ptr [rdi + 14], 99
 1049d1c:	0f 85 24 01 00 00 	jne	292 <_runtime.printAncestorTracebackFuncInfo+0x246>
 1049d22:	bb 05 00 00 00 	mov	ebx, 5
 1049d27:	48 8d 35 ae 90 02 00 	lea	rsi, [rip + 168110]
 1049d2e:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 1049d33:	48 89 74 24 50 	mov	qword ptr [rsp + 80], rsi
 1049d38:	e8 63 07 fe ff 	call	-129181 <_runtime.printlock>
 1049d3d:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 1049d42:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049d46:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1049d4b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049d50:	e8 8b 10 fe ff 	call	-126837 <_runtime.printstring>
 1049d55:	48 8d 05 f8 90 02 00 	lea	rax, [rip + 168184]
 1049d5c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049d60:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 1049d69:	e8 72 10 fe ff 	call	-126862 <_runtime.printstring>
 1049d6e:	e8 ad 07 fe ff 	call	-129107 <_runtime.printunlock>
 1049d73:	e8 28 07 fe ff 	call	-129240 <_runtime.printlock>
 1049d78:	48 8d 05 e7 8e 02 00 	lea	rax, [rip + 167655]
 1049d7f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049d83:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1049d8c:	e8 4f 10 fe ff 	call	-126897 <_runtime.printstring>
 1049d91:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 1049d96:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049d9a:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1049d9f:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1049da4:	e8 37 10 fe ff 	call	-126921 <_runtime.printstring>
 1049da9:	48 8d 05 b0 8e 02 00 	lea	rax, [rip + 167600]
 1049db0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049db4:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 1049dbd:	e8 1e 10 fe ff 	call	-126946 <_runtime.printstring>
 1049dc2:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1049dc7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049dcb:	e8 50 0e fe ff 	call	-127408 <_runtime.printint>
 1049dd0:	e8 4b 07 fe ff 	call	-129205 <_runtime.printunlock>
 1049dd5:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1049dda:	48 8b 00 	mov	rax, qword ptr [rax]
 1049ddd:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1049de5:	48 39 c1 	cmp	rcx, rax
 1049de8:	77 19 	ja	25 <_runtime.printAncestorTracebackFuncInfo+0x203>
 1049dea:	e8 b1 06 fe ff 	call	-129359 <_runtime.printlock>
 1049def:	e8 3c 09 fe ff 	call	-128708 <_runtime.printnl>
 1049df4:	e8 27 07 fe ff 	call	-129241 <_runtime.printunlock>
 1049df9:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 1049dfe:	48 83 c4 70 	add	rsp, 112
 1049e02:	c3 	ret
 1049e03:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1049e08:	e8 93 06 fe ff 	call	-129389 <_runtime.printlock>
 1049e0d:	48 8d 05 54 8e 02 00 	lea	rax, [rip + 167508]
 1049e14:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049e18:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1049e21:	e8 ba 0f fe ff 	call	-127046 <_runtime.printstring>
 1049e26:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 1049e2e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 1049e33:	48 29 c8 	sub	rax, rcx
 1049e36:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049e3a:	e8 51 0e fe ff 	call	-127407 <_runtime.printhex>
 1049e3f:	e8 dc 06 fe ff 	call	-129316 <_runtime.printunlock>
 1049e44:	eb a4 	jmp	-92 <_runtime.printAncestorTracebackFuncInfo+0x1ea>
 1049e46:	48 89 fe 	mov	rsi, rdi
 1049e49:	e9 e0 fe ff ff 	jmp	-288 <_runtime.printAncestorTracebackFuncInfo+0x12e>
 1049e4e:	48 89 fe 	mov	rsi, rdi
 1049e51:	e9 d8 fe ff ff 	jmp	-296 <_runtime.printAncestorTracebackFuncInfo+0x12e>
 1049e56:	48 89 fe 	mov	rsi, rdi
 1049e59:	e9 d0 fe ff ff 	jmp	-304 <_runtime.printAncestorTracebackFuncInfo+0x12e>
 1049e5e:	48 89 fe 	mov	rsi, rdi
 1049e61:	e9 c8 fe ff ff 	jmp	-312 <_runtime.printAncestorTracebackFuncInfo+0x12e>
 1049e66:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 1049e6b:	e9 be fe ff ff 	jmp	-322 <_runtime.printAncestorTracebackFuncInfo+0x12e>
 1049e70:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 1049e75:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1049e7a:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049e7e:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 1049e86:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1049e8b:	c7 44 24 10 02 00 00 00 	mov	dword ptr [rsp + 16], 2
 1049e93:	48 8b 94 24 88 00 00 00 	mov	rdx, qword ptr [rsp + 136]
 1049e9b:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1049ea0:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 1049ea9:	e8 22 8a ff ff 	call	-30174 <_runtime.pcdatavalue>
 1049eae:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 1049eb2:	85 c0 	test	eax, eax
 1049eb4:	7c 4f 	jl	79 <_runtime.printAncestorTracebackFuncInfo+0x305>
 1049eb6:	48 63 c0 	movsxd	rax, eax
 1049eb9:	48 3d 00 00 10 00 	cmp	rax, 1048576
 1049ebf:	73 50 	jae	80 <_runtime.printAncestorTracebackFuncInfo+0x311>
 1049ec1:	48 8d 04 80 	lea	rax, [rax + 4*rax]
 1049ec5:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1049eca:	8b 44 81 0c 	mov	eax, dword ptr [rcx + 4*rax + 12]
 1049ece:	48 8b 4c 24 78 	mov	rcx, qword ptr [rsp + 120]
 1049ed3:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1049ed7:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1049edf:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1049ee4:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 1049ee8:	e8 73 84 ff ff 	call	-31629 <_runtime.funcnameFromNameoff>
 1049eed:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1049ef2:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1049ef7:	48 89 c2 	mov	rdx, rax
 1049efa:	48 89 c8 	mov	rax, rcx
 1049efd:	48 89 d1 	mov	rcx, rdx
 1049f00:	e9 83 fd ff ff 	jmp	-637 <_runtime.printAncestorTracebackFuncInfo+0x88>
 1049f05:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 1049f0a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1049f0f:	eb e6 	jmp	-26 <_runtime.printAncestorTracebackFuncInfo+0x2f7>
 1049f11:	b9 00 00 10 00 	mov	ecx, 1048576
 1049f16:	e8 35 94 00 00 	call	37941 <_runtime.panicIndex>
 1049f1b:	90 	nop
 1049f1c:	e8 af 6c 00 00 	call	27823 <_runtime.morestack_noctxt>
 1049f21:	e9 da fc ff ff 	jmp	-806 <_runtime.printAncestorTracebackFuncInfo>
 1049f26:	cc 	int3
 1049f27:	cc 	int3
 1049f28:	cc 	int3
 1049f29:	cc 	int3
 1049f2a:	cc 	int3
 1049f2b:	cc 	int3
 1049f2c:	cc 	int3
 1049f2d:	cc 	int3
 1049f2e:	cc 	int3
 1049f2f:	cc 	int3

_runtime.callers:
 1049f30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1049f39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1049f3d:	0f 86 bf 00 00 00 	jbe	191 <_runtime.callers+0xd2>
 1049f43:	48 83 ec 60 	sub	rsp, 96
 1049f47:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 1049f4c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 1049f51:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1049f5a:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 1049f63:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 1049f6c:	0f 57 c0 	xorps	xmm0, xmm0
 1049f6f:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 1049f74:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 1049f79:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 1049f7e:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 1049f83:	48 8d 0d e6 64 00 00 	lea	rcx, [rip + 25830]
 1049f8a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1049f8f:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 1049f94:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1049f99:	48 8d 4c 24 68 	lea	rcx, [rsp + 104]
 1049f9e:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1049fa3:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 1049fa8:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 1049fad:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 1049fb2:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 1049fb7:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 1049fbc:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 1049fc1:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1049fc6:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 1049fce:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 1049fd3:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1049fd8:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1049fdd:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1049fe2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1049fe6:	e8 95 6a 00 00 	call	27285 <_runtime.systemstack>
 1049feb:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1049ff0:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 1049ff8:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 1049ffd:	48 83 c4 60 	add	rsp, 96
 104a001:	c3 	ret
 104a002:	e8 c9 6b 00 00 	call	27593 <_runtime.morestack_noctxt>
 104a007:	e9 24 ff ff ff 	jmp	-220 <_runtime.callers>
 104a00c:	cc 	int3
 104a00d:	cc 	int3
 104a00e:	cc 	int3
 104a00f:	cc 	int3

_runtime.gcallers:
 104a010:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104a019:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104a01d:	0f 86 8d 00 00 00 	jbe	141 <_runtime.gcallers+0xa0>
 104a023:	48 83 ec 60 	sub	rsp, 96
 104a027:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 104a02c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 104a031:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 104a039:	48 85 c9 	test	rcx, rcx
 104a03c:	76 6a 	jbe	106 <_runtime.gcallers+0x98>
 104a03e:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 104a046:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 104a04f:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104a058:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 104a05d:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104a062:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104a067:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104a06c:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104a071:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104a076:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104a07b:	0f 57 c0 	xorps	xmm0, xmm0
 104a07e:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 104a083:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 104a08c:	e8 0f d4 ff ff 	call	-11249 <_runtime.gentraceback>
 104a091:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104a096:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 104a09e:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 104a0a3:	48 83 c4 60 	add	rsp, 96
 104a0a7:	c3 	ret
 104a0a8:	31 c0 	xor	eax, eax
 104a0aa:	e8 a1 92 00 00 	call	37537 <_runtime.panicIndex>
 104a0af:	90 	nop
 104a0b0:	e8 1b 6b 00 00 	call	27419 <_runtime.morestack_noctxt>
 104a0b5:	e9 56 ff ff ff 	jmp	-170 <_runtime.gcallers>
 104a0ba:	cc 	int3
 104a0bb:	cc 	int3
 104a0bc:	cc 	int3
 104a0bd:	cc 	int3
 104a0be:	cc 	int3
 104a0bf:	cc 	int3

_runtime.showframe:
 104a0c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104a0c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104a0cd:	0f 86 98 00 00 00 	jbe	152 <_runtime.showframe+0xab>
 104a0d3:	48 83 ec 28 	sub	rsp, 40
 104a0d7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104a0dc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104a0e1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104a0ea:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104a0ee:	83 b8 f4 00 00 00 00 	cmp	dword ptr [rax + 244], 0
 104a0f5:	7e 2e 	jle	46 <_runtime.showframe+0x65>
 104a0f7:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104a0fc:	48 85 c9 	test	rcx, rcx
 104a0ff:	74 24 	je	36 <_runtime.showframe+0x65>
 104a101:	48 39 88 c0 00 00 00 	cmp	qword ptr [rax + 192], rcx
 104a108:	75 0f 	jne	15 <_runtime.showframe+0x59>
 104a10a:	c6 44 24 50 01 	mov	byte ptr [rsp + 80], 1
 104a10f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104a114:	48 83 c4 28 	add	rsp, 40
 104a118:	c3 	ret
 104a119:	48 8b 80 c8 00 00 00 	mov	rax, qword ptr [rax + 200]
 104a120:	48 39 c8 	cmp	rax, rcx
 104a123:	74 e5 	je	-27 <_runtime.showframe+0x4a>
 104a125:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104a12a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a12e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104a133:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104a138:	0f b6 44 24 48 	movzx	eax, byte ptr [rsp + 72]
 104a13d:	88 44 24 10 	mov	byte ptr [rsp + 16], al
 104a141:	0f b6 44 24 49 	movzx	eax, byte ptr [rsp + 73]
 104a146:	88 44 24 11 	mov	byte ptr [rsp + 17], al
 104a14a:	0f b6 44 24 4a 	movzx	eax, byte ptr [rsp + 74]
 104a14f:	88 44 24 12 	mov	byte ptr [rsp + 18], al
 104a153:	e8 28 00 00 00 	call	40 <_runtime.showfuncinfo>
 104a158:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104a15d:	88 44 24 50 	mov	byte ptr [rsp + 80], al
 104a161:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104a166:	48 83 c4 28 	add	rsp, 40
 104a16a:	c3 	ret
 104a16b:	e8 60 6a 00 00 	call	27232 <_runtime.morestack_noctxt>
 104a170:	e9 4b ff ff ff 	jmp	-181 <_runtime.showframe>
 104a175:	cc 	int3
 104a176:	cc 	int3
 104a177:	cc 	int3
 104a178:	cc 	int3
 104a179:	cc 	int3
 104a17a:	cc 	int3
 104a17b:	cc 	int3
 104a17c:	cc 	int3
 104a17d:	cc 	int3
 104a17e:	cc 	int3
 104a17f:	cc 	int3

_runtime.showfuncinfo:
 104a180:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104a189:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104a18d:	0f 86 c0 01 00 00 	jbe	448 <_runtime.showfuncinfo+0x1d3>
 104a193:	48 83 ec 40 	sub	rsp, 64
 104a197:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104a19c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104a1a1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104a1aa:	8b 0d bc 0f 08 00 	mov	ecx, dword ptr [rip + 528316]
 104a1b0:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104a1b4:	0f b6 80 29 01 00 00 	movzx	eax, byte ptr [rax + 297]
 104a1bb:	c1 e9 02 	shr	ecx, 2
 104a1be:	84 c0 	test	al, al
 104a1c0:	0f 45 c8 	cmovne	ecx, eax
 104a1c3:	83 f9 01 	cmp	ecx, 1
 104a1c6:	0f 8f 78 01 00 00 	jg	376 <_runtime.showfuncinfo+0x1c4>
 104a1cc:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104a1d1:	48 85 c0 	test	rax, rax
 104a1d4:	0f 84 5b 01 00 00 	je	347 <_runtime.showfuncinfo+0x1b5>
 104a1da:	0f b6 4c 24 59 	movzx	ecx, byte ptr [rsp + 89]
 104a1df:	80 f9 16 	cmp	cl, 22
 104a1e2:	75 0e 	jne	14 <_runtime.showfuncinfo+0x72>
 104a1e4:	0f b6 4c 24 5a 	movzx	ecx, byte ptr [rsp + 90]
 104a1e9:	80 f9 12 	cmp	cl, 18
 104a1ec:	0f 85 22 01 00 00 	jne	290 <_runtime.showfuncinfo+0x194>
 104a1f2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a1f6:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104a1fb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104a200:	e8 bb 80 ff ff 	call	-32581 <_runtime.funcname>
 104a205:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104a20a:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104a20f:	48 83 f8 0f 	cmp	rax, 15
 104a213:	75 33 	jne	51 <_runtime.showfuncinfo+0xc8>
 104a215:	48 ba 72 75 6e 74 69 6d 65 2e 	movabs	rdx, 3343198598084851058
 104a21f:	48 39 11 	cmp	qword ptr [rcx], rdx
 104a222:	75 24 	jne	36 <_runtime.showfuncinfo+0xc8>
 104a224:	81 79 08 67 6f 70 61 	cmp	dword ptr [rcx + 8], 1634758503
 104a22b:	75 1b 	jne	27 <_runtime.showfuncinfo+0xc8>
 104a22d:	66 81 79 0c 6e 69 	cmp	word ptr [rcx + 12], 26990
 104a233:	75 13 	jne	19 <_runtime.showfuncinfo+0xc8>
 104a235:	80 79 0e 63 	cmp	byte ptr [rcx + 14], 99
 104a239:	75 0d 	jne	13 <_runtime.showfuncinfo+0xc8>
 104a23b:	0f b6 5c 24 58 	movzx	ebx, byte ptr [rsp + 88]
 104a240:	84 db 	test	bl, bl
 104a242:	0f 84 bd 00 00 00 	je	189 <_runtime.showfuncinfo+0x185>
 104a248:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104a24d:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104a252:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104a256:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104a25b:	48 8d 15 fc 89 02 00 	lea	rdx, [rip + 166396]
 104a262:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104a267:	48 c7 44 24 18 01 00 00 00 	mov	qword ptr [rsp + 24], 1
 104a270:	e8 8b 6b ff ff 	call	-38005 <_runtime.index>
 104a275:	48 83 7c 24 20 00 	cmp	qword ptr [rsp + 32], 0
 104a27b:	0f 8c 80 00 00 00 	jl	128 <_runtime.showfuncinfo+0x181>
 104a281:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104a286:	48 83 f8 08 	cmp	rax, 8
 104a28a:	7d 46 	jge	70 <_runtime.showfuncinfo+0x152>
 104a28c:	31 c9 	xor	ecx, ecx
 104a28e:	84 c9 	test	cl, cl
 104a290:	74 39 	je	57 <_runtime.showfuncinfo+0x14b>
 104a292:	48 83 f8 08 	cmp	rax, 8
 104a296:	7e 2f 	jle	47 <_runtime.showfuncinfo+0x147>
 104a298:	48 b8 72 75 6e 74 69 6d 65 2e 	movabs	rax, 3343198598084851058
 104a2a2:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104a2a7:	48 39 01 	cmp	qword ptr [rcx], rax
 104a2aa:	75 1b 	jne	27 <_runtime.showfuncinfo+0x147>
 104a2ac:	0f b6 41 08 	movzx	eax, byte ptr [rcx + 8]
 104a2b0:	3c 41 	cmp	al, 65
 104a2b2:	72 13 	jb	19 <_runtime.showfuncinfo+0x147>
 104a2b4:	3c 5a 	cmp	al, 90
 104a2b6:	0f 96 c0 	setbe	al
 104a2b9:	88 44 24 60 	mov	byte ptr [rsp + 96], al
 104a2bd:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104a2c2:	48 83 c4 40 	add	rsp, 64
 104a2c6:	c3 	ret
 104a2c7:	31 c0 	xor	eax, eax
 104a2c9:	eb ee 	jmp	-18 <_runtime.showfuncinfo+0x139>
 104a2cb:	b8 01 00 00 00 	mov	eax, 1
 104a2d0:	eb e7 	jmp	-25 <_runtime.showfuncinfo+0x139>
 104a2d2:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104a2d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a2db:	48 8d 0d 75 8d 02 00 	lea	rcx, [rip + 167285]
 104a2e2:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104a2e7:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 104a2f0:	e8 fb 7d fb ff 	call	-295429 <_runtime.memequal>
 104a2f5:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 104a2fa:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104a2ff:	eb 8d 	jmp	-115 <_runtime.showfuncinfo+0x10e>
 104a301:	31 c0 	xor	eax, eax
 104a303:	eb b4 	jmp	-76 <_runtime.showfuncinfo+0x139>
 104a305:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 104a30a:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104a30f:	48 83 c4 40 	add	rsp, 64
 104a313:	c3 	ret
 104a314:	80 f9 09 	cmp	cl, 9
 104a317:	0f 84 d5 fe ff ff 	je	-299 <_runtime.showfuncinfo+0x72>
 104a31d:	80 f9 13 	cmp	cl, 19
 104a320:	0f 84 cc fe ff ff 	je	-308 <_runtime.showfuncinfo+0x72>
 104a326:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 104a32b:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104a330:	48 83 c4 40 	add	rsp, 64
 104a334:	c3 	ret
 104a335:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 104a33a:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104a33f:	48 83 c4 40 	add	rsp, 64
 104a343:	c3 	ret
 104a344:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 104a349:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104a34e:	48 83 c4 40 	add	rsp, 64
 104a352:	c3 	ret
 104a353:	e8 78 68 00 00 	call	26744 <_runtime.morestack_noctxt>
 104a358:	e9 23 fe ff ff 	jmp	-477 <_runtime.showfuncinfo>
 104a35d:	cc 	int3
 104a35e:	cc 	int3
 104a35f:	cc 	int3

_runtime.goroutineheader:
 104a360:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104a369:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104a36d:	0f 86 97 02 00 00 	jbe	663 <_runtime.goroutineheader+0x2aa>
 104a373:	48 83 ec 40 	sub	rsp, 64
 104a377:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104a37c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104a381:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104a386:	8b 88 90 00 00 00 	mov	ecx, dword ptr [rax + 144]
 104a38c:	89 ca 	mov	edx, ecx
 104a38e:	0f ba f1 0c 	btr	ecx, 12
 104a392:	85 c9 	test	ecx, ecx
 104a394:	0f 82 5f 02 00 00 	jb	607 <_runtime.goroutineheader+0x299>
 104a39a:	83 f9 0a 	cmp	ecx, 10
 104a39d:	0f 83 56 02 00 00 	jae	598 <_runtime.goroutineheader+0x299>
 104a3a3:	89 cb 	mov	ebx, ecx
 104a3a5:	48 c1 e3 04 	shl	rbx, 4
 104a3a9:	48 8d 35 f0 26 08 00 	lea	rsi, [rip + 534256]
 104a3b0:	48 8b 3c 33 	mov	rdi, qword ptr [rbx + rsi]
 104a3b4:	48 8b 5c 33 08 	mov	rbx, qword ptr [rbx + rsi + 8]
 104a3b9:	83 f9 04 	cmp	ecx, 4
 104a3bc:	0f 85 2c 02 00 00 	jne	556 <_runtime.goroutineheader+0x28e>
 104a3c2:	0f b6 b0 b0 00 00 00 	movzx	esi, byte ptr [rax + 176]
 104a3c9:	40 84 f6 	test	sil, sil
 104a3cc:	0f 84 19 02 00 00 	je	537 <_runtime.goroutineheader+0x28b>
 104a3d2:	40 84 f6 	test	sil, sil
 104a3d5:	0f 83 e3 01 00 00 	jae	483 <_runtime.goroutineheader+0x25e>
 104a3db:	83 f9 04 	cmp	ecx, 4
 104a3de:	48 8d 1d 10 9d 02 00 	lea	rbx, [rip + 171280]
 104a3e5:	be 13 00 00 00 	mov	esi, 19
 104a3ea:	89 54 24 14 	mov	dword ptr [rsp + 20], edx
 104a3ee:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 104a3f3:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 104a3f8:	0f 85 b2 01 00 00 	jne	434 <_runtime.goroutineheader+0x250>
 104a3fe:	48 83 b8 a8 00 00 00 00 	cmp	qword ptr [rax + 168], 0
 104a406:	0f 85 66 01 00 00 	jne	358 <_runtime.goroutineheader+0x212>
 104a40c:	31 c9 	xor	ecx, ecx
 104a40e:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104a413:	48 8b 90 98 00 00 00 	mov	rdx, qword ptr [rax + 152]
 104a41a:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 104a41f:	e8 7c 00 fe ff 	call	-130948 <_runtime.printlock>
 104a424:	48 8d 05 5a 8e 02 00 	lea	rax, [rip + 167514]
 104a42b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a42f:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 104a438:	e8 a3 09 fe ff 	call	-128605 <_runtime.printstring>
 104a43d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104a442:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a446:	e8 d5 07 fe ff 	call	-129067 <_runtime.printint>
 104a44b:	48 8d 05 1c 88 02 00 	lea	rax, [rip + 165916]
 104a452:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a456:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104a45f:	e8 7c 09 fe ff 	call	-128644 <_runtime.printstring>
 104a464:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104a469:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a46d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104a472:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104a477:	e8 64 09 fe ff 	call	-128668 <_runtime.printstring>
 104a47c:	e8 9f 00 fe ff 	call	-130913 <_runtime.printunlock>
 104a481:	8b 44 24 14 	mov	eax, dword ptr [rsp + 20]
 104a485:	0f ba e0 0c 	bt	eax, 12
 104a489:	0f 82 bb 00 00 00 	jb	187 <_runtime.goroutineheader+0x1ea>
 104a48f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104a494:	48 83 f8 01 	cmp	rax, 1
 104a498:	7d 61 	jge	97 <_runtime.goroutineheader+0x19b>
 104a49a:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104a49f:	48 83 b8 d8 00 00 00 00 	cmp	qword ptr [rax + 216], 0
 104a4a7:	75 2d 	jne	45 <_runtime.goroutineheader+0x176>
 104a4a9:	e8 f2 ff fd ff 	call	-131086 <_runtime.printlock>
 104a4ae:	48 8d 05 f9 87 02 00 	lea	rax, [rip + 165881]
 104a4b5:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a4b9:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 104a4c2:	e8 19 09 fe ff 	call	-128743 <_runtime.printstring>
 104a4c7:	e8 54 00 fe ff 	call	-130988 <_runtime.printunlock>
 104a4cc:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104a4d1:	48 83 c4 40 	add	rsp, 64
 104a4d5:	c3 	ret
 104a4d6:	e8 c5 ff fd ff 	call	-131131 <_runtime.printlock>
 104a4db:	48 8d 05 71 99 02 00 	lea	rax, [rip + 170353]
 104a4e2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a4e6:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 104a4ef:	e8 ec 08 fe ff 	call	-128788 <_runtime.printstring>
 104a4f4:	e8 27 00 fe ff 	call	-131033 <_runtime.printunlock>
 104a4f9:	eb ae 	jmp	-82 <_runtime.goroutineheader+0x149>
 104a4fb:	e8 a0 ff fd ff 	call	-131168 <_runtime.printlock>
 104a500:	48 8d 05 6d 87 02 00 	lea	rax, [rip + 165741]
 104a507:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a50b:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104a514:	e8 c7 08 fe ff 	call	-128825 <_runtime.printstring>
 104a519:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104a51e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a522:	e8 f9 06 fe ff 	call	-129287 <_runtime.printint>
 104a527:	48 8d 05 a9 8a 02 00 	lea	rax, [rip + 166569]
 104a52e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a532:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 104a53b:	e8 a0 08 fe ff 	call	-128864 <_runtime.printstring>
 104a540:	e8 db ff fd ff 	call	-131109 <_runtime.printunlock>
 104a545:	e9 50 ff ff ff 	jmp	-176 <_runtime.goroutineheader+0x13a>
 104a54a:	e8 51 ff fd ff 	call	-131247 <_runtime.printlock>
 104a54f:	48 8d 05 3b 89 02 00 	lea	rax, [rip + 166203]
 104a556:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a55a:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 104a563:	e8 78 08 fe ff 	call	-128904 <_runtime.printstring>
 104a568:	e8 b3 ff fd ff 	call	-131149 <_runtime.printunlock>
 104a56d:	e9 1d ff ff ff 	jmp	-227 <_runtime.goroutineheader+0x12f>
 104a572:	e8 49 8d ff ff 	call	-29367 <_runtime.nanotime1>
 104a577:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 104a57b:	48 8b 4c 24 48 	mov	rcx, qword ptr [rsp + 72]
 104a580:	48 2b 81 a8 00 00 00 	sub	rax, qword ptr [rcx + 168]
 104a587:	48 89 c2 	mov	rdx, rax
 104a58a:	48 b8 40 47 4f 3f 9a ff 4c 49 	movabs	rax, 5281877500950955840
 104a594:	48 89 d3 	mov	rbx, rdx
 104a597:	48 f7 ea 	imul	rdx
 104a59a:	48 c1 fb 3f 	sar	rbx, 63
 104a59e:	48 c1 fa 22 	sar	rdx, 34
 104a5a2:	48 29 da 	sub	rdx, rbx
 104a5a5:	48 89 c8 	mov	rax, rcx
 104a5a8:	48 89 d1 	mov	rcx, rdx
 104a5ab:	e9 5e fe ff ff 	jmp	-418 <_runtime.goroutineheader+0xae>
 104a5b0:	83 f9 03 	cmp	ecx, 3
 104a5b3:	0f 84 45 fe ff ff 	je	-443 <_runtime.goroutineheader+0x9e>
 104a5b9:	e9 4e fe ff ff 	jmp	-434 <_runtime.goroutineheader+0xac>
 104a5be:	40 80 fe 1a 	cmp	sil, 26
 104a5c2:	72 08 	jb	8 <_runtime.goroutineheader+0x26c>
 104a5c4:	83 f9 04 	cmp	ecx, 4
 104a5c7:	e9 12 fe ff ff 	jmp	-494 <_runtime.goroutineheader+0x7e>
 104a5cc:	48 c1 e6 04 	shl	rsi, 4
 104a5d0:	48 8d 3d 69 25 08 00 	lea	rdi, [rip + 533865]
 104a5d7:	4c 8b 44 3e 08 	mov	r8, qword ptr [rsi + rdi + 8]
 104a5dc:	48 8b 1c 3e 	mov	rbx, qword ptr [rsi + rdi]
 104a5e0:	83 f9 04 	cmp	ecx, 4
 104a5e3:	4c 89 c6 	mov	rsi, r8
 104a5e6:	e9 ff fd ff ff 	jmp	-513 <_runtime.goroutineheader+0x8a>
 104a5eb:	83 f9 04 	cmp	ecx, 4
 104a5ee:	48 89 de 	mov	rsi, rbx
 104a5f1:	48 89 fb 	mov	rbx, rdi
 104a5f4:	e9 f1 fd ff ff 	jmp	-527 <_runtime.goroutineheader+0x8a>
 104a5f9:	bb 03 00 00 00 	mov	ebx, 3
 104a5fe:	48 8d 3d a0 86 02 00 	lea	rdi, [rip + 165536]
 104a605:	e9 af fd ff ff 	jmp	-593 <_runtime.goroutineheader+0x59>
 104a60a:	e8 c1 65 00 00 	call	26049 <_runtime.morestack_noctxt>
 104a60f:	e9 4c fd ff ff 	jmp	-692 <_runtime.goroutineheader>
 104a614:	cc 	int3
 104a615:	cc 	int3
 104a616:	cc 	int3
 104a617:	cc 	int3
 104a618:	cc 	int3
 104a619:	cc 	int3
 104a61a:	cc 	int3
 104a61b:	cc 	int3
 104a61c:	cc 	int3
 104a61d:	cc 	int3
 104a61e:	cc 	int3
 104a61f:	cc 	int3

_runtime.tracebackothers:
 104a620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104a629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104a62d:	0f 86 86 02 00 00 	jbe	646 <_runtime.tracebackothers+0x299>
 104a633:	48 83 ec 60 	sub	rsp, 96
 104a637:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 104a63c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 104a641:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104a64a:	8b 0d 1c 0b 08 00 	mov	ecx, dword ptr [rip + 527132]
 104a650:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 104a659:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 104a65e:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 104a662:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104a666:	0f b6 80 29 01 00 00 	movzx	eax, byte ptr [rax + 297]
 104a66d:	c1 e9 02 	shr	ecx, 2
 104a670:	84 c0 	test	al, al
 104a672:	0f 45 c8 	cmovne	ecx, eax
 104a675:	89 4c 24 24 	mov	dword ptr [rsp + 36], ecx
 104a679:	48 8b 83 c0 00 00 00 	mov	rax, qword ptr [rbx + 192]
 104a680:	48 85 c0 	test	rax, rax
 104a683:	0f 84 26 02 00 00 	je	550 <_runtime.tracebackothers+0x28f>
 104a689:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 104a68e:	48 39 c3 	cmp	rbx, rax
 104a691:	0f 85 c8 01 00 00 	jne	456 <_runtime.tracebackothers+0x23f>
 104a697:	48 8d 05 4a d1 0a 00 	lea	rax, [rip + 708938]
 104a69e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a6a2:	e8 89 da fb ff 	call	-271735 <_runtime.lock>
 104a6a7:	48 8b 05 7a 3c 08 00 	mov	rax, qword ptr [rip + 539770]
 104a6ae:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104a6b3:	48 8b 0d 66 3c 08 00 	mov	rcx, qword ptr [rip + 539750]
 104a6ba:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 104a6bf:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 104a6c4:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 104a6c9:	31 f6 	xor	esi, esi
 104a6cb:	eb 03 	jmp	3 <_runtime.tracebackothers+0xb0>
 104a6cd:	48 ff c6 	inc	rsi
 104a6d0:	48 39 c6 	cmp	rsi, rax
 104a6d3:	0f 8d 6c 01 00 00 	jge	364 <_runtime.tracebackothers+0x225>
 104a6d9:	48 8b 3c f1 	mov	rdi, qword ptr [rcx + 8*rsi]
 104a6dd:	48 39 fa 	cmp	rdx, rdi
 104a6e0:	0f 85 33 01 00 00 	jne	307 <_runtime.tracebackothers+0x1f9>
 104a6e6:	41 b8 01 00 00 00 	mov	r8d, 1
 104a6ec:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 104a6f1:	48 89 7c 24 40 	mov	qword ptr [rsp + 64], rdi
 104a6f6:	45 84 c0 	test	r8b, r8b
 104a6f9:	0f 84 cd 00 00 00 	je	205 <_runtime.tracebackothers+0x1ac>
 104a6ff:	41 b8 01 00 00 00 	mov	r8d, 1
 104a705:	45 84 c0 	test	r8b, r8b
 104a708:	75 c3 	jne	-61 <_runtime.tracebackothers+0xad>
 104a70a:	e8 91 fd fd ff 	call	-131695 <_runtime.printlock>
 104a70f:	e8 1c 00 fe ff 	call	-131044 <_runtime.printnl>
 104a714:	e8 07 fe fd ff 	call	-131577 <_runtime.printunlock>
 104a719:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104a71e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a722:	e8 39 fc ff ff 	call	-967 <_runtime.goroutineheader>
 104a727:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104a72c:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104a730:	48 8b 54 24 40 	mov	rdx, qword ptr [rsp + 64]
 104a735:	48 39 4a 30 	cmp	qword ptr [rdx + 48], rcx
 104a739:	0f 84 89 00 00 00 	je	137 <_runtime.tracebackothers+0x1a8>
 104a73f:	8b 8a 90 00 00 00 	mov	ecx, dword ptr [rdx + 144]
 104a745:	0f ba f1 0c 	btr	ecx, 12
 104a749:	83 f9 02 	cmp	ecx, 2
 104a74c:	0f 94 c1 	sete	cl
 104a74f:	84 c9 	test	cl, cl
 104a751:	74 4f 	je	79 <_runtime.tracebackothers+0x182>
 104a753:	e8 48 fd fd ff 	call	-131768 <_runtime.printlock>
 104a758:	48 8d 05 7e cb 02 00 	lea	rax, [rip + 183166]
 104a75f:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a763:	48 c7 44 24 08 36 00 00 00 	mov	qword ptr [rsp + 8], 54
 104a76c:	e8 6f 06 fe ff 	call	-129425 <_runtime.printstring>
 104a771:	e8 aa fd fd ff 	call	-131670 <_runtime.printunlock>
 104a776:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104a77b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a77f:	e8 ac eb ff ff 	call	-5204 <_runtime.printcreatedby>
 104a784:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104a789:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104a78e:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 104a793:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 104a798:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 104a79d:	e9 2b ff ff ff 	jmp	-213 <_runtime.tracebackothers+0xad>
 104a7a2:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 104a7aa:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 104a7b3:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104a7bc:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 104a7c1:	e8 fa ed ff ff 	call	-4614 <_runtime.traceback>
 104a7c6:	eb bc 	jmp	-68 <_runtime.tracebackothers+0x164>
 104a7c8:	31 c9 	xor	ecx, ecx
 104a7ca:	eb 83 	jmp	-125 <_runtime.tracebackothers+0x12f>
 104a7cc:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 104a7d0:	c6 44 24 08 00 	mov	byte ptr [rsp + 8], 0
 104a7d5:	e8 e6 02 00 00 	call	742 <_runtime.isSystemGoroutine>
 104a7da:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 104a7df:	74 30 	je	48 <_runtime.tracebackothers+0x1f1>
 104a7e1:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 104a7e5:	83 f8 02 	cmp	eax, 2
 104a7e8:	0f 9c c1 	setl	cl
 104a7eb:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104a7f0:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 104a7f5:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 104a7fa:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 104a7ff:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 104a804:	41 89 c8 	mov	r8d, ecx
 104a807:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104a80c:	e9 f4 fe ff ff 	jmp	-268 <_runtime.tracebackothers+0xe5>
 104a811:	8b 44 24 24 	mov	eax, dword ptr [rsp + 36]
 104a815:	31 c9 	xor	ecx, ecx
 104a817:	eb d2 	jmp	-46 <_runtime.tracebackothers+0x1cb>
 104a819:	4c 8b 43 30 	mov	r8, qword ptr [rbx + 48]
 104a81d:	49 39 b8 c0 00 00 00 	cmp	qword ptr [r8 + 192], rdi
 104a824:	75 0b 	jne	11 <_runtime.tracebackothers+0x211>
 104a826:	41 b8 01 00 00 00 	mov	r8d, 1
 104a82c:	e9 bb fe ff ff 	jmp	-325 <_runtime.tracebackothers+0xcc>
 104a831:	44 8b 8f 90 00 00 00 	mov	r9d, dword ptr [rdi + 144]
 104a838:	41 83 f9 06 	cmp	r9d, 6
 104a83c:	41 0f 94 c0 	sete	r8b
 104a840:	e9 a7 fe ff ff 	jmp	-345 <_runtime.tracebackothers+0xcc>
 104a845:	48 8d 05 9c cf 0a 00 	lea	rax, [rip + 708508]
 104a84c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a850:	e8 bb da fb ff 	call	-271685 <_runtime.unlock>
 104a855:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 104a85a:	48 83 c4 60 	add	rsp, 96
 104a85e:	c3 	ret
 104a85f:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104a864:	e8 37 fc fd ff 	call	-132041 <_runtime.printlock>
 104a869:	e8 c2 fe fd ff 	call	-131390 <_runtime.printnl>
 104a86e:	e8 ad fc fd ff 	call	-131923 <_runtime.printunlock>
 104a873:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104a878:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a87c:	e8 df fa ff ff 	call	-1313 <_runtime.goroutineheader>
 104a881:	48 c7 04 24 ff ff ff ff 	mov	qword ptr [rsp], -1
 104a889:	48 c7 44 24 08 ff ff ff ff 	mov	qword ptr [rsp + 8], -1
 104a892:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104a89b:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104a8a0:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104a8a5:	e8 16 ed ff ff 	call	-4842 <_runtime.traceback>
 104a8aa:	e9 e8 fd ff ff 	jmp	-536 <_runtime.tracebackothers+0x77>
 104a8af:	48 8b 5c 24 68 	mov	rbx, qword ptr [rsp + 104]
 104a8b4:	e9 de fd ff ff 	jmp	-546 <_runtime.tracebackothers+0x77>
 104a8b9:	e8 12 63 00 00 	call	25362 <_runtime.morestack_noctxt>
 104a8be:	e9 5d fd ff ff 	jmp	-675 <_runtime.tracebackothers>
 104a8c3:	cc 	int3
 104a8c4:	cc 	int3
 104a8c5:	cc 	int3
 104a8c6:	cc 	int3
 104a8c7:	cc 	int3
 104a8c8:	cc 	int3
 104a8c9:	cc 	int3
 104a8ca:	cc 	int3
 104a8cb:	cc 	int3
 104a8cc:	cc 	int3
 104a8cd:	cc 	int3
 104a8ce:	cc 	int3
 104a8cf:	cc 	int3

_runtime.tracebackHexdump:
 104a8d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104a8d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104a8dd:	0f 86 cd 01 00 00 	jbe	461 <_runtime.tracebackHexdump+0x1e0>
 104a8e3:	48 83 ec 58 	sub	rsp, 88
 104a8e7:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 104a8ec:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 104a8f1:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104a8f6:	48 8b 48 28 	mov	rcx, qword ptr [rax + 40]
 104a8fa:	48 8b 50 30 	mov	rdx, qword ptr [rax + 48]
 104a8fe:	48 85 d2 	test	rdx, rdx
 104a901:	0f 84 9e 01 00 00 	je	414 <_runtime.tracebackHexdump+0x1d5>
 104a907:	48 39 ca 	cmp	rdx, rcx
 104a90a:	0f 83 92 01 00 00 	jae	402 <_runtime.tracebackHexdump+0x1d2>
 104a910:	48 85 d2 	test	rdx, rdx
 104a913:	48 89 d3 	mov	rbx, rdx
 104a916:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 104a91b:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 104a920:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 104a925:	0f 84 6f 01 00 00 	je	367 <_runtime.tracebackHexdump+0x1ca>
 104a92b:	48 39 cb 	cmp	rbx, rcx
 104a92e:	0f 86 66 01 00 00 	jbe	358 <_runtime.tracebackHexdump+0x1ca>
 104a934:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 104a939:	e8 62 fb fd ff 	call	-132254 <_runtime.printlock>
 104a93e:	48 8d 05 a6 94 02 00 	lea	rax, [rip + 169126]
 104a945:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a949:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104a952:	e8 89 04 fe ff 	call	-129911 <_runtime.printstring>
 104a957:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104a95c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a960:	e8 2b 03 fe ff 	call	-130261 <_runtime.printhex>
 104a965:	48 8d 05 52 84 02 00 	lea	rax, [rip + 164946]
 104a96c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a970:	48 c7 44 24 08 05 00 00 00 	mov	qword ptr [rsp + 8], 5
 104a979:	e8 62 04 fe ff 	call	-129950 <_runtime.printstring>
 104a97e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104a983:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a987:	e8 04 03 fe ff 	call	-130300 <_runtime.printhex>
 104a98c:	48 8d 05 17 88 02 00 	lea	rax, [rip + 165911]
 104a993:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a997:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 104a9a0:	e8 3b 04 fe ff 	call	-129989 <_runtime.printstring>
 104a9a5:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 104a9aa:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a9ae:	e8 dd 02 fe ff 	call	-130339 <_runtime.printhex>
 104a9b3:	48 8d 05 a2 82 02 00 	lea	rax, [rip + 164514]
 104a9ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a9be:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104a9c7:	e8 14 04 fe ff 	call	-130028 <_runtime.printstring>
 104a9cc:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 104a9d1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a9d5:	e8 b6 02 fe ff 	call	-130378 <_runtime.printhex>
 104a9da:	48 8d 05 91 82 02 00 	lea	rax, [rip + 164497]
 104a9e1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104a9e5:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104a9ee:	e8 ed 03 fe ff 	call	-130067 <_runtime.printstring>
 104a9f3:	e8 28 fb fd ff 	call	-132312 <_runtime.printunlock>
 104a9f8:	0f 57 c0 	xorps	xmm0, xmm0
 104a9fb:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 104aa00:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 104aa09:	48 8d 05 10 5b 00 00 	lea	rax, [rip + 23312]
 104aa10:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104aa15:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104aa1a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104aa1f:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104aa24:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 104aa29:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104aa2e:	48 05 00 ff ff ff 	add	rax, -256
 104aa34:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104aa39:	48 8d 91 00 f8 ff ff 	lea	rdx, [rcx - 2048]
 104aa40:	48 39 d0 	cmp	rax, rdx
 104aa43:	48 0f 42 c2 	cmovb	rax, rdx
 104aa47:	48 8b 54 24 60 	mov	rdx, qword ptr [rsp + 96]
 104aa4c:	48 39 d0 	cmp	rax, rdx
 104aa4f:	48 0f 42 c2 	cmovb	rax, rdx
 104aa53:	48 89 04 24 	mov	qword ptr [rsp], rax
 104aa57:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104aa5c:	48 05 00 01 00 00 	add	rax, 256
 104aa62:	48 81 c1 00 08 00 00 	add	rcx, 2048
 104aa69:	48 39 c8 	cmp	rax, rcx
 104aa6c:	48 0f 47 c1 	cmova	rax, rcx
 104aa70:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 104aa75:	48 39 c8 	cmp	rax, rcx
 104aa78:	48 0f 47 c1 	cmova	rax, rcx
 104aa7c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104aa81:	48 8d 44 24 38 	lea	rax, [rsp + 56]
 104aa86:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104aa8b:	e8 60 05 fe ff 	call	-129696 <_runtime.hexdumpWords>
 104aa90:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 104aa95:	48 83 c4 58 	add	rsp, 88
 104aa99:	c3 	ret
 104aa9a:	48 89 cb 	mov	rbx, rcx
 104aa9d:	e9 92 fe ff ff 	jmp	-366 <_runtime.tracebackHexdump+0x64>
 104aaa2:	48 85 d2 	test	rdx, rdx
 104aaa5:	48 89 d3 	mov	rbx, rdx
 104aaa8:	48 89 ca 	mov	rdx, rcx
 104aaab:	e9 66 fe ff ff 	jmp	-410 <_runtime.tracebackHexdump+0x46>
 104aab0:	e8 1b 61 00 00 	call	24859 <_runtime.morestack_noctxt>
 104aab5:	e9 16 fe ff ff 	jmp	-490 <_runtime.tracebackHexdump>
 104aaba:	cc 	int3
 104aabb:	cc 	int3
 104aabc:	cc 	int3
 104aabd:	cc 	int3
 104aabe:	cc 	int3
 104aabf:	cc 	int3

_runtime.isSystemGoroutine:
 104aac0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104aac9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104aacd:	0f 86 e7 00 00 00 	jbe	231 <_runtime.isSystemGoroutine+0xfa>
 104aad3:	48 83 ec 28 	sub	rsp, 40
 104aad7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104aadc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104aae1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104aae6:	48 8b 80 28 01 00 00 	mov	rax, qword ptr [rax + 296]
 104aaed:	48 89 04 24 	mov	qword ptr [rsp], rax
 104aaf1:	e8 7a 70 ff ff 	call	-36742 <_runtime.findfunc>
 104aaf6:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104aafb:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104ab00:	48 85 c0 	test	rax, rax
 104ab03:	0f 84 a2 00 00 00 	je	162 <_runtime.isSystemGoroutine+0xeb>
 104ab09:	0f b6 50 24 	movzx	edx, byte ptr [rax + 36]
 104ab0d:	80 fa 01 	cmp	dl, 1
 104ab10:	75 0f 	jne	15 <_runtime.isSystemGoroutine+0x61>
 104ab12:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 104ab17:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104ab1c:	48 83 c4 28 	add	rsp, 40
 104ab20:	c3 	ret
 104ab21:	80 fa 14 	cmp	dl, 20
 104ab24:	74 ec 	je	-20 <_runtime.isSystemGoroutine+0x52>
 104ab26:	80 fa 0a 	cmp	dl, 10
 104ab29:	75 30 	jne	48 <_runtime.isSystemGoroutine+0x9b>
 104ab2b:	0f b6 44 24 38 	movzx	eax, byte ptr [rsp + 56]
 104ab30:	84 c0 	test	al, al
 104ab32:	74 0f 	je	15 <_runtime.isSystemGoroutine+0x83>
 104ab34:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 104ab39:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104ab3e:	48 83 c4 28 	add	rsp, 40
 104ab42:	c3 	ret
 104ab43:	0f b6 05 1b cc 0a 00 	movzx	eax, byte ptr [rip + 707611]
 104ab4a:	83 f0 01 	xor	eax, 1
 104ab4d:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 104ab51:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104ab56:	48 83 c4 28 	add	rsp, 40
 104ab5a:	c3 	ret
 104ab5b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ab5f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104ab64:	e8 57 77 ff ff 	call	-34985 <_runtime.funcname>
 104ab69:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104ab6e:	48 83 7c 24 18 08 	cmp	qword ptr [rsp + 24], 8
 104ab74:	7d 10 	jge	16 <_runtime.isSystemGoroutine+0xc6>
 104ab76:	31 c0 	xor	eax, eax
 104ab78:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 104ab7c:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104ab81:	48 83 c4 28 	add	rsp, 40
 104ab85:	c3 	ret
 104ab86:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ab8a:	48 8d 05 c6 84 02 00 	lea	rax, [rip + 165062]
 104ab91:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104ab96:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 104ab9f:	e8 4c 75 fb ff 	call	-297652 <_runtime.memequal>
 104aba4:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104aba9:	eb cd 	jmp	-51 <_runtime.isSystemGoroutine+0xb8>
 104abab:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 104abb0:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104abb5:	48 83 c4 28 	add	rsp, 40
 104abb9:	c3 	ret
 104abba:	e8 11 60 00 00 	call	24593 <_runtime.morestack_noctxt>
 104abbf:	e9 fc fe ff ff 	jmp	-260 <_runtime.isSystemGoroutine>
 104abc4:	cc 	int3
 104abc5:	cc 	int3
 104abc6:	cc 	int3
 104abc7:	cc 	int3
 104abc8:	cc 	int3
 104abc9:	cc 	int3
 104abca:	cc 	int3
 104abcb:	cc 	int3
 104abcc:	cc 	int3
 104abcd:	cc 	int3
 104abce:	cc 	int3
 104abcf:	cc 	int3

_runtime.printCgoTraceback:
 104abd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104abd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104abdd:	0f 86 13 01 00 00 	jbe	275 <_runtime.printCgoTraceback+0x126>
 104abe3:	48 83 ec 70 	sub	rsp, 112
 104abe7:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 104abec:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 104abf1:	48 83 3d 27 36 08 00 00 	cmp	qword ptr [rip + 538151], 0
 104abf9:	0f 84 85 00 00 00 	je	133 <_runtime.printCgoTraceback+0xb4>
 104abff:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 104ac08:	0f 57 c0 	xorps	xmm0, xmm0
 104ac0b:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 104ac10:	0f 11 44 24 48 	movups	xmmword ptr [rsp + 72], xmm0
 104ac15:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 104ac1a:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104ac1f:	31 c9 	xor	ecx, ecx
 104ac21:	eb 2f 	jmp	47 <_runtime.printCgoTraceback+0x82>
 104ac23:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104ac28:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104ac2c:	48 c7 44 24 08 ff ff ff 7f 	mov	qword ptr [rsp + 8], 2147483647
 104ac35:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 104ac3a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104ac3f:	e8 bc 00 00 00 	call	188 <_runtime.printOneCgoTraceback>
 104ac44:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104ac49:	48 8d 48 01 	lea	rcx, [rax + 1]
 104ac4d:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104ac52:	48 83 f9 20 	cmp	rcx, 32
 104ac56:	7d 0b 	jge	11 <_runtime.printCgoTraceback+0x93>
 104ac58:	84 00 	test	byte ptr [rax], al
 104ac5a:	48 8b 14 c8 	mov	rdx, qword ptr [rax + 8*rcx]
 104ac5e:	48 85 d2 	test	rdx, rdx
 104ac61:	75 c0 	jne	-64 <_runtime.printCgoTraceback+0x53>
 104ac63:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 104ac6c:	48 8d 44 24 30 	lea	rax, [rsp + 48]
 104ac71:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ac75:	e8 c6 02 00 00 	call	710 <_runtime.callCgoSymbolizer>
 104ac7a:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104ac7f:	48 83 c4 70 	add	rsp, 112
 104ac83:	c3 	ret
 104ac84:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104ac89:	31 c9 	xor	ecx, ecx
 104ac8b:	eb 4e 	jmp	78 <_runtime.printCgoTraceback+0x10b>
 104ac8d:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104ac92:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104ac97:	e8 04 f8 fd ff 	call	-133116 <_runtime.printlock>
 104ac9c:	48 8d 05 53 99 02 00 	lea	rax, [rip + 170323]
 104aca3:	48 89 04 24 	mov	qword ptr [rsp], rax
 104aca7:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 104acb0:	e8 2b 01 fe ff 	call	-130773 <_runtime.printstring>
 104acb5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104acba:	48 89 04 24 	mov	qword ptr [rsp], rax
 104acbe:	e8 cd ff fd ff 	call	-131123 <_runtime.printhex>
 104acc3:	e8 68 fa fd ff 	call	-132504 <_runtime.printnl>
 104acc8:	e8 53 f8 fd ff 	call	-133037 <_runtime.printunlock>
 104accd:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104acd2:	48 8d 48 01 	lea	rcx, [rax + 1]
 104acd6:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104acdb:	48 83 f9 20 	cmp	rcx, 32
 104acdf:	7d 0b 	jge	11 <_runtime.printCgoTraceback+0x11c>
 104ace1:	84 00 	test	byte ptr [rax], al
 104ace3:	48 8b 14 c8 	mov	rdx, qword ptr [rax + 8*rcx]
 104ace7:	48 85 d2 	test	rdx, rdx
 104acea:	75 a1 	jne	-95 <_runtime.printCgoTraceback+0xbd>
 104acec:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104acf1:	48 83 c4 70 	add	rsp, 112
 104acf5:	c3 	ret
 104acf6:	e8 d5 5e 00 00 	call	24277 <_runtime.morestack_noctxt>
 104acfb:	e9 d0 fe ff ff 	jmp	-304 <_runtime.printCgoTraceback>

_runtime.printOneCgoTraceback:
 104ad00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104ad09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104ad0d:	0f 86 1f 02 00 00 	jbe	543 <_runtime.printOneCgoTraceback+0x232>
 104ad13:	48 83 ec 68 	sub	rsp, 104
 104ad17:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 104ad1c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 104ad21:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104ad26:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 104ad2e:	48 89 01 	mov	qword ptr [rcx], rax
 104ad31:	31 d2 	xor	edx, edx
 104ad33:	eb 08 	jmp	8 <_runtime.printOneCgoTraceback+0x3d>
 104ad35:	48 89 c2 	mov	rdx, rax
 104ad38:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104ad3d:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 104ad42:	48 39 da 	cmp	rdx, rbx
 104ad45:	0f 8f df 01 00 00 	jg	479 <_runtime.printOneCgoTraceback+0x22a>
 104ad4b:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104ad50:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ad54:	e8 e7 01 00 00 	call	487 <_runtime.callCgoSymbolizer>
 104ad59:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104ad61:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 104ad65:	48 85 c9 	test	rcx, rcx
 104ad68:	0f 84 94 01 00 00 	je	404 <_runtime.printOneCgoTraceback+0x202>
 104ad6e:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104ad73:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ad77:	e8 b4 62 ff ff 	call	-40268 <_runtime.findnull>
 104ad7c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104ad81:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104ad86:	0f 57 c0 	xorps	xmm0, xmm0
 104ad89:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 104ad8e:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 104ad93:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 104ad98:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 104ad9d:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104ada2:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104ada7:	e8 f4 f6 fd ff 	call	-133388 <_runtime.printlock>
 104adac:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104adb1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104adb5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104adba:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104adbf:	e8 1c 00 fe ff 	call	-131044 <_runtime.printstring>
 104adc4:	e8 67 f9 fd ff 	call	-132761 <_runtime.printnl>
 104adc9:	e8 52 f7 fd ff 	call	-133294 <_runtime.printunlock>
 104adce:	e8 cd f6 fd ff 	call	-133427 <_runtime.printlock>
 104add3:	48 8d 05 8c 7e 02 00 	lea	rax, [rip + 163468]
 104adda:	48 89 04 24 	mov	qword ptr [rsp], rax
 104adde:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104ade7:	e8 f4 ff fd ff 	call	-131084 <_runtime.printstring>
 104adec:	e8 2f f7 fd ff 	call	-133329 <_runtime.printunlock>
 104adf1:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104adf9:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 104adfd:	48 85 c9 	test	rcx, rcx
 104ae00:	75 63 	jne	99 <_runtime.printOneCgoTraceback+0x165>
 104ae02:	e8 99 f6 fd ff 	call	-133479 <_runtime.printlock>
 104ae07:	48 8d 05 be 7e 02 00 	lea	rax, [rip + 163518]
 104ae0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ae12:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 104ae1b:	e8 c0 ff fd ff 	call	-131136 <_runtime.printstring>
 104ae20:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104ae25:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ae29:	e8 62 fe fd ff 	call	-131486 <_runtime.printhex>
 104ae2e:	e8 fd f8 fd ff 	call	-132867 <_runtime.printnl>
 104ae33:	e8 e8 f6 fd ff 	call	-133400 <_runtime.printunlock>
 104ae38:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104ae3d:	48 ff c0 	inc	rax
 104ae40:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 104ae48:	48 83 79 28 00 	cmp	qword ptr [rcx + 40], 0
 104ae4d:	0f 85 e2 fe ff ff 	jne	-286 <_runtime.printOneCgoTraceback+0x35>
 104ae53:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 104ae5b:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 104ae60:	48 83 c4 68 	add	rsp, 104
 104ae64:	c3 	ret
 104ae65:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104ae6a:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ae6e:	e8 bd 61 ff ff 	call	-40515 <_runtime.findnull>
 104ae73:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104ae78:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104ae7d:	0f 57 c0 	xorps	xmm0, xmm0
 104ae80:	0f 11 44 24 50 	movups	xmmword ptr [rsp + 80], xmm0
 104ae85:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 104ae8a:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 104ae8f:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 104ae94:	48 8b 8c 24 80 00 00 00 	mov	rcx, qword ptr [rsp + 128]
 104ae9c:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 104aea0:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 104aea5:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 104aeaa:	48 89 5c 24 30 	mov	qword ptr [rsp + 48], rbx
 104aeaf:	e8 ec f5 fd ff 	call	-133652 <_runtime.printlock>
 104aeb4:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104aeb9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104aebd:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104aec2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104aec7:	e8 14 ff fd ff 	call	-131308 <_runtime.printstring>
 104aecc:	48 8d 05 8d 7d 02 00 	lea	rax, [rip + 163213]
 104aed3:	48 89 04 24 	mov	qword ptr [rsp], rax
 104aed7:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104aee0:	e8 fb fe fd ff 	call	-131333 <_runtime.printstring>
 104aee5:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104aeea:	48 89 04 24 	mov	qword ptr [rsp], rax
 104aeee:	e8 2d fc fd ff 	call	-132051 <_runtime.printuint>
 104aef3:	e8 e8 f7 fd ff 	call	-133144 <_runtime.printsp>
 104aef8:	e8 23 f6 fd ff 	call	-133597 <_runtime.printunlock>
 104aefd:	e9 00 ff ff ff 	jmp	-256 <_runtime.printOneCgoTraceback+0x102>
 104af02:	e8 99 f5 fd ff 	call	-133735 <_runtime.printlock>
 104af07:	48 8d 05 94 8c 02 00 	lea	rax, [rip + 167060]
 104af0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104af12:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104af1b:	e8 c0 fe fd ff 	call	-131392 <_runtime.printstring>
 104af20:	e8 fb f5 fd ff 	call	-133637 <_runtime.printunlock>
 104af25:	e9 a4 fe ff ff 	jmp	-348 <_runtime.printOneCgoTraceback+0xce>
 104af2a:	48 89 d0 	mov	rax, rdx
 104af2d:	e9 21 ff ff ff 	jmp	-223 <_runtime.printOneCgoTraceback+0x153>
 104af32:	e8 99 5c 00 00 	call	23705 <_runtime.morestack_noctxt>
 104af37:	e9 c4 fd ff ff 	jmp	-572 <_runtime.printOneCgoTraceback>
 104af3c:	cc 	int3
 104af3d:	cc 	int3
 104af3e:	cc 	int3
 104af3f:	cc 	int3

_runtime.callCgoSymbolizer:
 104af40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104af49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104af4d:	76 64 	jbe	100 <_runtime.callCgoSymbolizer+0x73>
 104af4f:	48 83 ec 20 	sub	rsp, 32
 104af53:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104af58:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104af5d:	83 3d 54 c8 0a 00 00 	cmp	dword ptr [rip + 706644], 0
 104af64:	76 2e 	jbe	46 <_runtime.callCgoSymbolizer+0x54>
 104af66:	48 8d 05 b3 c7 02 00 	lea	rax, [rip + 182195]
 104af6d:	48 8b 0d ac 32 08 00 	mov	rcx, qword ptr [rip + 537260]
 104af74:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104af78:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104af7d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104af82:	48 8b 08 	mov	rcx, qword ptr [rax]
 104af85:	48 89 c2 	mov	rdx, rax
 104af88:	ff d1 	call	rcx
 104af8a:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104af8f:	48 83 c4 20 	add	rsp, 32
 104af93:	c3 	ret
 104af94:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104af9d:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104afa1:	48 39 81 c0 00 00 00 	cmp	qword ptr [rcx + 192], rax
 104afa8:	75 bc 	jne	-68 <_runtime.callCgoSymbolizer+0x26>
 104afaa:	48 8d 05 bf c7 02 00 	lea	rax, [rip + 182207]
 104afb1:	eb ba 	jmp	-70 <_runtime.callCgoSymbolizer+0x2d>
 104afb3:	e8 18 5c 00 00 	call	23576 <_runtime.morestack_noctxt>
 104afb8:	eb 86 	jmp	-122 <_runtime.callCgoSymbolizer>
 104afba:	cc 	int3
 104afbb:	cc 	int3
 104afbc:	cc 	int3
 104afbd:	cc 	int3
 104afbe:	cc 	int3
 104afbf:	cc 	int3

_runtime.cgoContextPCs:
 104afc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104afc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104afcd:	0f 86 b4 00 00 00 	jbe	180 <_runtime.cgoContextPCs+0xc7>
 104afd3:	48 83 ec 40 	sub	rsp, 64
 104afd7:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104afdc:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104afe1:	48 83 3d 3f 32 08 00 00 	cmp	qword ptr [rip + 537151], 0
 104afe9:	0f 84 86 00 00 00 	je	134 <_runtime.cgoContextPCs+0xb5>
 104afef:	83 3d c2 c7 0a 00 00 	cmp	dword ptr [rip + 706498], 0
 104aff6:	76 5e 	jbe	94 <_runtime.cgoContextPCs+0x96>
 104aff8:	48 8d 05 21 c7 02 00 	lea	rax, [rip + 182049]
 104afff:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 104b004:	48 85 c9 	test	rcx, rcx
 104b007:	76 76 	jbe	118 <_runtime.cgoContextPCs+0xbf>
 104b009:	0f 57 c0 	xorps	xmm0, xmm0
 104b00c:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 104b011:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 104b016:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 104b01b:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 104b020:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 104b025:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 104b02a:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b02f:	48 8b 0d f2 31 08 00 	mov	rcx, qword ptr [rip + 537074]
 104b036:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104b03a:	48 8d 4c 24 18 	lea	rcx, [rsp + 24]
 104b03f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104b044:	48 8b 08 	mov	rcx, qword ptr [rax]
 104b047:	48 89 c2 	mov	rdx, rax
 104b04a:	ff d1 	call	rcx
 104b04c:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104b051:	48 83 c4 40 	add	rsp, 64
 104b055:	c3 	ret
 104b056:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 104b05f:	48 8b 73 30 	mov	rsi, qword ptr [rbx + 48]
 104b063:	48 39 9e c0 00 00 00 	cmp	qword ptr [rsi + 192], rbx
 104b06a:	75 8c 	jne	-116 <_runtime.cgoContextPCs+0x38>
 104b06c:	48 8d 05 fd c6 02 00 	lea	rax, [rip + 182013]
 104b073:	eb 8a 	jmp	-118 <_runtime.cgoContextPCs+0x3f>
 104b075:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104b07a:	48 83 c4 40 	add	rsp, 64
 104b07e:	c3 	ret
 104b07f:	31 c0 	xor	eax, eax
 104b081:	e8 ca 82 00 00 	call	33482 <_runtime.panicIndex>
 104b086:	90 	nop
 104b087:	e8 44 5b 00 00 	call	23364 <_runtime.morestack_noctxt>
 104b08c:	e9 2f ff ff ff 	jmp	-209 <_runtime.cgoContextPCs>
 104b091:	cc 	int3
 104b092:	cc 	int3
 104b093:	cc 	int3
 104b094:	cc 	int3
 104b095:	cc 	int3
 104b096:	cc 	int3
 104b097:	cc 	int3
 104b098:	cc 	int3
 104b099:	cc 	int3
 104b09a:	cc 	int3
 104b09b:	cc 	int3
 104b09c:	cc 	int3
 104b09d:	cc 	int3
 104b09e:	cc 	int3
 104b09f:	cc 	int3

_runtime.(*_type).string:
 104b0a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104b0a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104b0ad:	0f 86 96 00 00 00 	jbe	150 <_runtime.(*_type).string+0xa9>
 104b0b3:	48 83 ec 20 	sub	rsp, 32
 104b0b7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104b0bc:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104b0c1:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104b0c6:	8b 48 28 	mov	ecx, dword ptr [rax + 40]
 104b0c9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b0cd:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 104b0d1:	e8 4a 02 00 00 	call	586 <_runtime.resolveNameOff>
 104b0d6:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104b0db:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b0df:	e8 0c 0c 00 00 	call	3084 <_runtime.name.name>
 104b0e4:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104b0e9:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104b0ee:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 104b0f3:	0f b6 52 14 	movzx	edx, byte ptr [rdx + 20]
 104b0f7:	f6 c2 02 	test	dl, 2
 104b0fa:	74 2e 	je	46 <_runtime.(*_type).string+0x8a>
 104b0fc:	48 83 f9 01 	cmp	rcx, 1
 104b100:	72 3c 	jb	60 <_runtime.(*_type).string+0x9e>
 104b102:	48 ff c9 	dec	rcx
 104b105:	48 89 ca 	mov	rdx, rcx
 104b108:	48 f7 d9 	neg	rcx
 104b10b:	48 c1 f9 3f 	sar	rcx, 63
 104b10f:	48 83 e1 01 	and	rcx, 1
 104b113:	48 01 c8 	add	rax, rcx
 104b116:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104b11b:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 104b120:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104b125:	48 83 c4 20 	add	rsp, 32
 104b129:	c3 	ret
 104b12a:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104b12f:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104b134:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104b139:	48 83 c4 20 	add	rsp, 32
 104b13d:	c3 	ret
 104b13e:	b8 01 00 00 00 	mov	eax, 1
 104b143:	e8 68 82 00 00 	call	33384 <_runtime.panicSliceB>
 104b148:	90 	nop
 104b149:	e8 82 5a 00 00 	call	23170 <_runtime.morestack_noctxt>
 104b14e:	e9 4d ff ff ff 	jmp	-179 <_runtime.(*_type).string>
 104b153:	cc 	int3
 104b154:	cc 	int3
 104b155:	cc 	int3
 104b156:	cc 	int3
 104b157:	cc 	int3
 104b158:	cc 	int3
 104b159:	cc 	int3
 104b15a:	cc 	int3
 104b15b:	cc 	int3
 104b15c:	cc 	int3
 104b15d:	cc 	int3
 104b15e:	cc 	int3
 104b15f:	cc 	int3

_runtime.(*_type).uncommon:
 104b160:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104b165:	0f b6 48 14 	movzx	ecx, byte ptr [rax + 20]
 104b169:	f6 c1 01 	test	cl, 1
 104b16c:	0f 84 8e 00 00 00 	je	142 <_runtime.(*_type).uncommon+0xa0>
 104b172:	0f b6 48 17 	movzx	ecx, byte ptr [rax + 23]
 104b176:	83 e1 1f 	and	ecx, 31
 104b179:	80 f9 14 	cmp	cl, 20
 104b17c:	77 46 	ja	70 <_runtime.(*_type).uncommon+0x64>
 104b17e:	80 f9 12 	cmp	cl, 18
 104b181:	77 28 	ja	40 <_runtime.(*_type).uncommon+0x4b>
 104b183:	80 f9 11 	cmp	cl, 17
 104b186:	74 19 	je	25 <_runtime.(*_type).uncommon+0x41>
 104b188:	80 f9 12 	cmp	cl, 18
 104b18b:	74 0a 	je	10 <_runtime.(*_type).uncommon+0x37>
 104b18d:	48 83 c0 30 	add	rax, 48
 104b191:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b196:	c3 	ret
 104b197:	48 83 c0 40 	add	rax, 64
 104b19b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1a0:	c3 	ret
 104b1a1:	48 83 c0 48 	add	rax, 72
 104b1a5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1aa:	c3 	ret
 104b1ab:	80 f9 13 	cmp	cl, 19
 104b1ae:	75 0a 	jne	10 <_runtime.(*_type).uncommon+0x5a>
 104b1b0:	48 83 c0 38 	add	rax, 56
 104b1b4:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1b9:	c3 	ret
 104b1ba:	48 83 c0 50 	add	rax, 80
 104b1be:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1c3:	c3 	ret
 104b1c4:	80 f9 16 	cmp	cl, 22
 104b1c7:	77 19 	ja	25 <_runtime.(*_type).uncommon+0x82>
 104b1c9:	80 f9 15 	cmp	cl, 21
 104b1cc:	75 0a 	jne	10 <_runtime.(*_type).uncommon+0x78>
 104b1ce:	48 83 c0 58 	add	rax, 88
 104b1d2:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1d7:	c3 	ret
 104b1d8:	48 83 c0 38 	add	rax, 56
 104b1dc:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1e1:	c3 	ret
 104b1e2:	80 f9 17 	cmp	cl, 23
 104b1e5:	74 0f 	je	15 <_runtime.(*_type).uncommon+0x96>
 104b1e7:	80 f9 19 	cmp	cl, 25
 104b1ea:	75 a1 	jne	-95 <_runtime.(*_type).uncommon+0x2d>
 104b1ec:	48 83 c0 50 	add	rax, 80
 104b1f0:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1f5:	c3 	ret
 104b1f6:	48 83 c0 38 	add	rax, 56
 104b1fa:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104b1ff:	c3 	ret
 104b200:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104b209:	c3 	ret
 104b20a:	cc 	int3
 104b20b:	cc 	int3
 104b20c:	cc 	int3
 104b20d:	cc 	int3
 104b20e:	cc 	int3
 104b20f:	cc 	int3

_runtime.(*_type).pkgpath:
 104b210:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104b219:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104b21d:	0f 86 e4 00 00 00 	jbe	228 <_runtime.(*_type).pkgpath+0xf7>
 104b223:	48 83 ec 20 	sub	rsp, 32
 104b227:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104b22c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104b231:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104b236:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b23a:	e8 21 ff ff ff 	call	-223 <_runtime.(*_type).uncommon>
 104b23f:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104b244:	48 85 c0 	test	rax, rax
 104b247:	75 7e 	jne	126 <_runtime.(*_type).pkgpath+0xb7>
 104b249:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104b24e:	0f b6 48 17 	movzx	ecx, byte ptr [rax + 23]
 104b252:	83 e1 1f 	and	ecx, 31
 104b255:	80 f9 14 	cmp	cl, 20
 104b258:	74 42 	je	66 <_runtime.(*_type).pkgpath+0x8c>
 104b25a:	80 f9 19 	cmp	cl, 25
 104b25d:	75 2b 	jne	43 <_runtime.(*_type).pkgpath+0x7a>
 104b25f:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104b263:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b267:	e8 84 0a 00 00 	call	2692 <_runtime.name.name>
 104b26c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104b271:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104b276:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b27b:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104b280:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104b285:	48 83 c4 20 	add	rsp, 32
 104b289:	c3 	ret
 104b28a:	0f 57 c0 	xorps	xmm0, xmm0
 104b28d:	0f 11 44 24 30 	movups	xmmword ptr [rsp + 48], xmm0
 104b292:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104b297:	48 83 c4 20 	add	rsp, 32
 104b29b:	c3 	ret
 104b29c:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104b2a0:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b2a4:	e8 47 0a 00 00 	call	2631 <_runtime.name.name>
 104b2a9:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104b2ae:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104b2b3:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b2b8:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104b2bd:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104b2c2:	48 83 c4 20 	add	rsp, 32
 104b2c6:	c3 	ret
 104b2c7:	8b 00 	mov	eax, dword ptr [rax]
 104b2c9:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104b2ce:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104b2d2:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 104b2d6:	e8 45 00 00 00 	call	69 <_runtime.resolveNameOff>
 104b2db:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104b2e0:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b2e4:	e8 07 0a 00 00 	call	2567 <_runtime.name.name>
 104b2e9:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104b2ee:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104b2f3:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b2f8:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104b2fd:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104b302:	48 83 c4 20 	add	rsp, 32
 104b306:	c3 	ret
 104b307:	e8 c4 58 00 00 	call	22724 <_runtime.morestack_noctxt>
 104b30c:	e9 ff fe ff ff 	jmp	-257 <_runtime.(*_type).pkgpath>
 104b311:	cc 	int3
 104b312:	cc 	int3
 104b313:	cc 	int3
 104b314:	cc 	int3
 104b315:	cc 	int3
 104b316:	cc 	int3
 104b317:	cc 	int3
 104b318:	cc 	int3
 104b319:	cc 	int3
 104b31a:	cc 	int3
 104b31b:	cc 	int3
 104b31c:	cc 	int3
 104b31d:	cc 	int3
 104b31e:	cc 	int3
 104b31f:	cc 	int3

_runtime.resolveNameOff:
 104b320:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104b329:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104b32d:	0f 86 d5 02 00 00 	jbe	725 <_runtime.resolveNameOff+0x2e8>
 104b333:	48 83 ec 60 	sub	rsp, 96
 104b337:	48 89 6c 24 58 	mov	qword ptr [rsp + 88], rbp
 104b33c:	48 8d 6c 24 58 	lea	rbp, [rsp + 88]
 104b341:	8b 44 24 70 	mov	eax, dword ptr [rsp + 112]
 104b345:	85 c0 	test	eax, eax
 104b347:	0f 84 e5 01 00 00 	je	485 <_runtime.resolveNameOff+0x212>
 104b34d:	48 8b 4c 24 68 	mov	rcx, qword ptr [rsp + 104]
 104b352:	48 8d 15 07 0a 08 00 	lea	rdx, [rip + 526855]
 104b359:	eb 07 	jmp	7 <_runtime.resolveNameOff+0x42>
 104b35b:	48 8b 92 c0 01 00 00 	mov	rdx, qword ptr [rdx + 448]
 104b362:	48 85 d2 	test	rdx, rdx
 104b365:	74 36 	je	54 <_runtime.resolveNameOff+0x7d>
 104b367:	48 8b 9a c8 00 00 00 	mov	rbx, qword ptr [rdx + 200]
 104b36e:	48 39 d9 	cmp	rcx, rbx
 104b371:	72 e8 	jb	-24 <_runtime.resolveNameOff+0x3b>
 104b373:	48 8b b2 d0 00 00 00 	mov	rsi, qword ptr [rdx + 208]
 104b37a:	48 39 f1 	cmp	rcx, rsi
 104b37d:	73 dc 	jae	-36 <_runtime.resolveNameOff+0x3b>
 104b37f:	48 63 c8 	movsxd	rcx, eax
 104b382:	48 01 d9 	add	rcx, rbx
 104b385:	48 39 f1 	cmp	rcx, rsi
 104b388:	0f 87 d0 01 00 00 	ja	464 <_runtime.resolveNameOff+0x23e>
 104b38e:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 104b393:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 104b398:	48 83 c4 60 	add	rsp, 96
 104b39c:	c3 	ret
 104b39d:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b3a2:	90 	nop
 104b3a3:	48 8d 05 56 30 08 00 	lea	rax, [rip + 536662]
 104b3aa:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b3ae:	e8 7d cd fb ff 	call	-275075 <_runtime.lock>
 104b3b3:	48 8d 05 86 7d 01 00 	lea	rax, [rip + 97670]
 104b3ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b3be:	48 8b 05 4b 30 08 00 	mov	rax, qword ptr [rip + 536651]
 104b3c5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104b3ca:	8b 44 24 70 	mov	eax, dword ptr [rsp + 112]
 104b3ce:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 104b3d2:	e8 59 13 fc ff 	call	-257191 <_runtime.mapaccess2_fast32>
 104b3d7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104b3dc:	48 8b 00 	mov	rax, qword ptr [rax]
 104b3df:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 104b3e4:	90 	nop
 104b3e5:	0f b6 4c 24 20 	movzx	ecx, byte ptr [rsp + 32]
 104b3ea:	88 4c 24 2f 	mov	byte ptr [rsp + 47], cl
 104b3ee:	80 f9 00 	cmp	cl, 0
 104b3f1:	48 8d 15 08 30 08 00 	lea	rdx, [rip + 536584]
 104b3f8:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104b3fc:	e8 0f cf fb ff 	call	-274673 <_runtime.unlock>
 104b401:	0f b6 44 24 2f 	movzx	eax, byte ptr [rsp + 47]
 104b406:	3c 00 	cmp	al, 0
 104b408:	0f 85 10 01 00 00 	jne	272 <_runtime.resolveNameOff+0x1fe>
 104b40e:	e8 8d f0 fd ff 	call	-135027 <_runtime.printlock>
 104b413:	48 8d 05 49 89 02 00 	lea	rax, [rip + 166217]
 104b41a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b41e:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104b427:	e8 b4 f9 fd ff 	call	-132684 <_runtime.printstring>
 104b42c:	8b 44 24 70 	mov	eax, dword ptr [rsp + 112]
 104b430:	48 63 c0 	movsxd	rax, eax
 104b433:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b437:	e8 54 f8 fd ff 	call	-133036 <_runtime.printhex>
 104b43c:	48 8d 05 bd 79 02 00 	lea	rax, [rip + 162237]
 104b443:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b447:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 104b450:	e8 8b f9 fd ff 	call	-132725 <_runtime.printstring>
 104b455:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104b45a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b45e:	e8 2d f8 fd ff 	call	-133075 <_runtime.printhex>
 104b463:	48 8d 05 d8 85 02 00 	lea	rax, [rip + 165336]
 104b46a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b46e:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104b477:	e8 64 f9 fd ff 	call	-132764 <_runtime.printstring>
 104b47c:	e8 9f f0 fd ff 	call	-135009 <_runtime.printunlock>
 104b481:	48 8d 05 d8 08 08 00 	lea	rax, [rip + 526552]
 104b488:	e9 86 00 00 00 	jmp	134 <_runtime.resolveNameOff+0x1f3>
 104b48d:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 104b492:	48 8b 88 c8 00 00 00 	mov	rcx, qword ptr [rax + 200]
 104b499:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 104b49e:	48 8b 90 d0 00 00 00 	mov	rdx, qword ptr [rax + 208]
 104b4a5:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 104b4aa:	e8 f1 ef fd ff 	call	-135183 <_runtime.printlock>
 104b4af:	48 8d 05 2f 7a 02 00 	lea	rax, [rip + 162351]
 104b4b6:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b4ba:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 104b4c3:	e8 18 f9 fd ff 	call	-132840 <_runtime.printstring>
 104b4c8:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104b4cd:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b4d1:	e8 ba f7 fd ff 	call	-133190 <_runtime.printhex>
 104b4d6:	48 8d 05 da 7a 02 00 	lea	rax, [rip + 162522]
 104b4dd:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b4e1:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 104b4ea:	e8 f1 f8 fd ff 	call	-132879 <_runtime.printstring>
 104b4ef:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104b4f4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b4f8:	e8 93 f7 fd ff 	call	-133229 <_runtime.printhex>
 104b4fd:	e8 2e f2 fd ff 	call	-134610 <_runtime.printnl>
 104b502:	e8 19 f0 fd ff 	call	-135143 <_runtime.printunlock>
 104b507:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104b50c:	48 8b 80 c0 01 00 00 	mov	rax, qword ptr [rax + 448]
 104b513:	48 85 c0 	test	rax, rax
 104b516:	0f 85 71 ff ff ff 	jne	-143 <_runtime.resolveNameOff+0x16d>
 104b51c:	eb 27 	jmp	39 <_runtime.resolveNameOff+0x225>
 104b51e:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104b523:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 104b528:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 104b52d:	48 83 c4 60 	add	rsp, 96
 104b531:	c3 	ret
 104b532:	48 c7 44 24 78 00 00 00 00 	mov	qword ptr [rsp + 120], 0
 104b53b:	48 8b 6c 24 58 	mov	rbp, qword ptr [rsp + 88]
 104b540:	48 83 c4 60 	add	rsp, 96
 104b544:	c3 	ret
 104b545:	48 8d 05 a0 b8 02 00 	lea	rax, [rip + 178336]
 104b54c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b550:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 104b559:	e8 02 d8 fd ff 	call	-141310 <_runtime.throw>
 104b55e:	48 89 5c 24 40 	mov	qword ptr [rsp + 64], rbx
 104b563:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 104b568:	e8 33 ef fd ff 	call	-135373 <_runtime.printlock>
 104b56d:	48 8d 05 ef 87 02 00 	lea	rax, [rip + 165871]
 104b574:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b578:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104b581:	e8 5a f8 fd ff 	call	-133030 <_runtime.printstring>
 104b586:	8b 44 24 70 	mov	eax, dword ptr [rsp + 112]
 104b58a:	48 63 c0 	movsxd	rax, eax
 104b58d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b591:	e8 fa f6 fd ff 	call	-133382 <_runtime.printhex>
 104b596:	48 8d 05 53 82 02 00 	lea	rax, [rip + 164435]
 104b59d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b5a1:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 104b5aa:	e8 31 f8 fd ff 	call	-133071 <_runtime.printstring>
 104b5af:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104b5b4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b5b8:	e8 d3 f6 fd ff 	call	-133421 <_runtime.printhex>
 104b5bd:	48 8d 05 d2 76 02 00 	lea	rax, [rip + 161490]
 104b5c4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b5c8:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 104b5d1:	e8 0a f8 fd ff 	call	-133110 <_runtime.printstring>
 104b5d6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104b5db:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b5df:	e8 ac f6 fd ff 	call	-133460 <_runtime.printhex>
 104b5e4:	e8 47 f1 fd ff 	call	-134841 <_runtime.printnl>
 104b5e9:	e8 32 ef fd ff 	call	-135374 <_runtime.printunlock>
 104b5ee:	48 8d 05 58 a9 02 00 	lea	rax, [rip + 174424]
 104b5f5:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b5f9:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 104b602:	e8 59 d7 fd ff 	call	-141479 <_runtime.throw>
 104b607:	90 	nop
 104b608:	e8 c3 55 00 00 	call	21955 <_runtime.morestack_noctxt>
 104b60d:	e9 0e fd ff ff 	jmp	-754 <_runtime.resolveNameOff>
 104b612:	cc 	int3
 104b613:	cc 	int3
 104b614:	cc 	int3
 104b615:	cc 	int3
 104b616:	cc 	int3
 104b617:	cc 	int3
 104b618:	cc 	int3
 104b619:	cc 	int3
 104b61a:	cc 	int3
 104b61b:	cc 	int3
 104b61c:	cc 	int3
 104b61d:	cc 	int3
 104b61e:	cc 	int3
 104b61f:	cc 	int3

_runtime.resolveTypeOff:
 104b620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104b629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104b62d:	0f 86 2a 03 00 00 	jbe	810 <_runtime.resolveTypeOff+0x33d>
 104b633:	48 83 ec 58 	sub	rsp, 88
 104b637:	48 89 6c 24 50 	mov	qword ptr [rsp + 80], rbp
 104b63c:	48 8d 6c 24 50 	lea	rbp, [rsp + 80]
 104b641:	8b 44 24 68 	mov	eax, dword ptr [rsp + 104]
 104b645:	85 c0 	test	eax, eax
 104b647:	0f 84 3a 02 00 00 	je	570 <_runtime.resolveTypeOff+0x267>
 104b64d:	48 8b 4c 24 60 	mov	rcx, qword ptr [rsp + 96]
 104b652:	48 8d 15 07 07 08 00 	lea	rdx, [rip + 526087]
 104b659:	eb 07 	jmp	7 <_runtime.resolveTypeOff+0x42>
 104b65b:	48 8b 92 c0 01 00 00 	mov	rdx, qword ptr [rdx + 448]
 104b662:	48 85 d2 	test	rdx, rdx
 104b665:	0f 84 15 02 00 00 	je	533 <_runtime.resolveTypeOff+0x260>
 104b66b:	48 39 8a c8 00 00 00 	cmp	qword ptr [rdx + 200], rcx
 104b672:	77 e7 	ja	-25 <_runtime.resolveTypeOff+0x3b>
 104b674:	48 39 8a d0 00 00 00 	cmp	qword ptr [rdx + 208], rcx
 104b67b:	76 de 	jbe	-34 <_runtime.resolveTypeOff+0x3b>
 104b67d:	48 85 d2 	test	rdx, rdx
 104b680:	74 76 	je	118 <_runtime.resolveTypeOff+0xd8>
 104b682:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 104b687:	48 8b 8a b0 01 00 00 	mov	rcx, qword ptr [rdx + 432]
 104b68e:	48 8d 1d 6b 7b 01 00 	lea	rbx, [rip + 97131]
 104b695:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104b699:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104b69e:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 104b6a2:	e8 e9 0e fc ff 	call	-258327 <_runtime.mapaccess1_fast32>
 104b6a7:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104b6ac:	48 8b 00 	mov	rax, qword ptr [rax]
 104b6af:	48 85 c0 	test	rax, rax
 104b6b2:	75 35 	jne	53 <_runtime.resolveTypeOff+0xc9>
 104b6b4:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 104b6b9:	48 8b 88 c8 00 00 00 	mov	rcx, qword ptr [rax + 200]
 104b6c0:	8b 54 24 68 	mov	edx, dword ptr [rsp + 104]
 104b6c4:	48 63 da 	movsxd	rbx, edx
 104b6c7:	48 01 cb 	add	rbx, rcx
 104b6ca:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 104b6d1:	48 39 c3 	cmp	rbx, rax
 104b6d4:	0f 87 c0 01 00 00 	ja	448 <_runtime.resolveTypeOff+0x27a>
 104b6da:	48 89 5c 24 70 	mov	qword ptr [rsp + 112], rbx
 104b6df:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 104b6e4:	48 83 c4 58 	add	rsp, 88
 104b6e8:	c3 	ret
 104b6e9:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 104b6ee:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 104b6f3:	48 83 c4 58 	add	rsp, 88
 104b6f7:	c3 	ret
 104b6f8:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 104b6fd:	90 	nop
 104b6fe:	48 8d 05 fb 2c 08 00 	lea	rax, [rip + 535803]
 104b705:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b709:	e8 22 ca fb ff 	call	-275934 <_runtime.lock>
 104b70e:	48 8d 05 2b 7a 01 00 	lea	rax, [rip + 96811]
 104b715:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b719:	48 8b 05 f0 2c 08 00 	mov	rax, qword ptr [rip + 535792]
 104b720:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104b725:	8b 44 24 68 	mov	eax, dword ptr [rsp + 104]
 104b729:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 104b72d:	e8 5e 0e fc ff 	call	-258466 <_runtime.mapaccess1_fast32>
 104b732:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104b737:	48 8b 00 	mov	rax, qword ptr [rax]
 104b73a:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104b73f:	90 	nop
 104b740:	48 8d 0d b9 2c 08 00 	lea	rcx, [rip + 535737]
 104b747:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104b74b:	e8 c0 cb fb ff 	call	-275520 <_runtime.unlock>
 104b750:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104b755:	48 85 c0 	test	rax, rax
 104b758:	0f 85 13 01 00 00 	jne	275 <_runtime.resolveTypeOff+0x251>
 104b75e:	e8 3d ed fd ff 	call	-135875 <_runtime.printlock>
 104b763:	48 8d 05 4e 86 02 00 	lea	rax, [rip + 165454]
 104b76a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b76e:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104b777:	e8 64 f6 fd ff 	call	-133532 <_runtime.printstring>
 104b77c:	8b 44 24 68 	mov	eax, dword ptr [rsp + 104]
 104b780:	48 63 c0 	movsxd	rax, eax
 104b783:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b787:	e8 04 f5 fd ff 	call	-133884 <_runtime.printhex>
 104b78c:	48 8d 05 6d 76 02 00 	lea	rax, [rip + 161389]
 104b793:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b797:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 104b7a0:	e8 3b f6 fd ff 	call	-133573 <_runtime.printstring>
 104b7a5:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104b7aa:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b7ae:	e8 dd f4 fd ff 	call	-133923 <_runtime.printhex>
 104b7b3:	48 8d 05 88 82 02 00 	lea	rax, [rip + 164488]
 104b7ba:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b7be:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104b7c7:	e8 14 f6 fd ff 	call	-133612 <_runtime.printstring>
 104b7cc:	e8 4f ed fd ff 	call	-135857 <_runtime.printunlock>
 104b7d1:	48 8d 05 88 05 08 00 	lea	rax, [rip + 525704]
 104b7d8:	e9 86 00 00 00 	jmp	134 <_runtime.resolveTypeOff+0x243>
 104b7dd:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104b7e2:	48 8b 88 c8 00 00 00 	mov	rcx, qword ptr [rax + 200]
 104b7e9:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b7ee:	48 8b 90 d0 00 00 00 	mov	rdx, qword ptr [rax + 208]
 104b7f5:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 104b7fa:	e8 a1 ec fd ff 	call	-136031 <_runtime.printlock>
 104b7ff:	48 8d 05 df 76 02 00 	lea	rax, [rip + 161503]
 104b806:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b80a:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 104b813:	e8 c8 f5 fd ff 	call	-133688 <_runtime.printstring>
 104b818:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104b81d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b821:	e8 6a f4 fd ff 	call	-134038 <_runtime.printhex>
 104b826:	48 8d 05 8a 77 02 00 	lea	rax, [rip + 161674]
 104b82d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b831:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 104b83a:	e8 a1 f5 fd ff 	call	-133727 <_runtime.printstring>
 104b83f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104b844:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b848:	e8 43 f4 fd ff 	call	-134077 <_runtime.printhex>
 104b84d:	e8 de ee fd ff 	call	-135458 <_runtime.printnl>
 104b852:	e8 c9 ec fd ff 	call	-135991 <_runtime.printunlock>
 104b857:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104b85c:	48 8b 80 c0 01 00 00 	mov	rax, qword ptr [rax + 448]
 104b863:	48 85 c0 	test	rax, rax
 104b866:	0f 85 71 ff ff ff 	jne	-143 <_runtime.resolveTypeOff+0x1bd>
 104b86c:	e9 d2 00 00 00 	jmp	210 <_runtime.resolveTypeOff+0x323>
 104b871:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 104b876:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 104b87b:	48 83 c4 58 	add	rsp, 88
 104b87f:	c3 	ret
 104b880:	31 d2 	xor	edx, edx
 104b882:	e9 f6 fd ff ff 	jmp	-522 <_runtime.resolveTypeOff+0x5d>
 104b887:	48 c7 44 24 70 00 00 00 00 	mov	qword ptr [rsp + 112], 0
 104b890:	48 8b 6c 24 50 	mov	rbp, qword ptr [rsp + 80]
 104b895:	48 83 c4 58 	add	rsp, 88
 104b899:	c3 	ret
 104b89a:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104b89f:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104b8a4:	e8 f7 eb fd ff 	call	-136201 <_runtime.printlock>
 104b8a9:	48 8d 05 08 85 02 00 	lea	rax, [rip + 165128]
 104b8b0:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b8b4:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104b8bd:	e8 1e f5 fd ff 	call	-133858 <_runtime.printstring>
 104b8c2:	8b 44 24 68 	mov	eax, dword ptr [rsp + 104]
 104b8c6:	48 63 c0 	movsxd	rax, eax
 104b8c9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b8cd:	e8 be f3 fd ff 	call	-134210 <_runtime.printhex>
 104b8d2:	48 8d 05 17 7f 02 00 	lea	rax, [rip + 163607]
 104b8d9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b8dd:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 104b8e6:	e8 f5 f4 fd ff 	call	-133899 <_runtime.printstring>
 104b8eb:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104b8f0:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b8f4:	e8 97 f3 fd ff 	call	-134249 <_runtime.printhex>
 104b8f9:	48 8d 05 96 73 02 00 	lea	rax, [rip + 160662]
 104b900:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b904:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 104b90d:	e8 ce f4 fd ff 	call	-133938 <_runtime.printstring>
 104b912:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104b917:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b91b:	e8 70 f3 fd ff 	call	-134288 <_runtime.printhex>
 104b920:	e8 0b ee fd ff 	call	-135669 <_runtime.printnl>
 104b925:	e8 f6 eb fd ff 	call	-136202 <_runtime.printunlock>
 104b92a:	48 8d 05 5e a6 02 00 	lea	rax, [rip + 173662]
 104b931:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b935:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 104b93e:	e8 1d d4 fd ff 	call	-142307 <_runtime.throw>
 104b943:	48 8d 05 2c b5 02 00 	lea	rax, [rip + 177452]
 104b94a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104b94e:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 104b957:	e8 04 d4 fd ff 	call	-142332 <_runtime.throw>
 104b95c:	90 	nop
 104b95d:	e8 6e 52 00 00 	call	21102 <_runtime.morestack_noctxt>
 104b962:	e9 b9 fc ff ff 	jmp	-839 <_runtime.resolveTypeOff>
 104b967:	cc 	int3
 104b968:	cc 	int3
 104b969:	cc 	int3
 104b96a:	cc 	int3
 104b96b:	cc 	int3
 104b96c:	cc 	int3
 104b96d:	cc 	int3
 104b96e:	cc 	int3
 104b96f:	cc 	int3

_runtime.(*_type).textOff:
 104b970:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104b979:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104b97d:	0f 86 12 03 00 00 	jbe	786 <_runtime.(*_type).textOff+0x325>
 104b983:	48 83 ec 50 	sub	rsp, 80
 104b987:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 104b98c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 104b991:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104b996:	48 8d 0d c3 03 08 00 	lea	rcx, [rip + 525251]
 104b99d:	eb 07 	jmp	7 <_runtime.(*_type).textOff+0x36>
 104b99f:	48 8b 89 c0 01 00 00 	mov	rcx, qword ptr [rcx + 448]
 104b9a6:	48 85 c9 	test	rcx, rcx
 104b9a9:	0f 84 18 02 00 00 	je	536 <_runtime.(*_type).textOff+0x257>
 104b9af:	48 39 81 c8 00 00 00 	cmp	qword ptr [rcx + 200], rax
 104b9b6:	77 e7 	ja	-25 <_runtime.(*_type).textOff+0x2f>
 104b9b8:	48 39 81 d0 00 00 00 	cmp	qword ptr [rcx + 208], rax
 104b9bf:	76 de 	jbe	-34 <_runtime.(*_type).textOff+0x2f>
 104b9c1:	48 85 c9 	test	rcx, rcx
 104b9c4:	74 79 	je	121 <_runtime.(*_type).textOff+0xcf>
 104b9c6:	48 8b 81 e0 00 00 00 	mov	rax, qword ptr [rcx + 224]
 104b9cd:	48 8b 91 d8 00 00 00 	mov	rdx, qword ptr [rcx + 216]
 104b9d4:	48 83 f8 01 	cmp	rax, 1
 104b9d8:	7e 58 	jle	88 <_runtime.(*_type).textOff+0xc2>
 104b9da:	8b 5c 24 60 	mov	ebx, dword ptr [rsp + 96]
 104b9de:	31 f6 	xor	esi, esi
 104b9e0:	eb 03 	jmp	3 <_runtime.(*_type).textOff+0x75>
 104b9e2:	48 ff c6 	inc	rsi
 104b9e5:	48 39 c6 	cmp	rsi, rax
 104b9e8:	7d 44 	jge	68 <_runtime.(*_type).textOff+0xbe>
 104b9ea:	48 8d 3c 76 	lea	rdi, [rsi + 2*rsi]
 104b9ee:	4c 8b 04 fa 	mov	r8, qword ptr [rdx + 8*rdi]
 104b9f2:	4c 8b 4c fa 08 	mov	r9, qword ptr [rdx + 8*rdi + 8]
 104b9f7:	4c 63 d3 	movsxd	r10, ebx
 104b9fa:	4d 39 c2 	cmp	r10, r8
 104b9fd:	72 e3 	jb	-29 <_runtime.(*_type).textOff+0x72>
 104b9ff:	4d 01 c1 	add	r9, r8
 104ba02:	4d 39 ca 	cmp	r10, r9
 104ba05:	73 db 	jae	-37 <_runtime.(*_type).textOff+0x72>
 104ba07:	48 8b 44 fa 10 	mov	rax, qword ptr [rdx + 8*rdi + 16]
 104ba0c:	4c 01 d0 	add	rax, r10
 104ba0f:	4c 29 c0 	sub	rax, r8
 104ba12:	48 8b 51 68 	mov	rdx, qword ptr [rcx + 104]
 104ba16:	48 39 d0 	cmp	rax, rdx
 104ba19:	0f 87 af 01 00 00 	ja	431 <_runtime.(*_type).textOff+0x25e>
 104ba1f:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 104ba24:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 104ba29:	48 83 c4 50 	add	rsp, 80
 104ba2d:	c3 	ret
 104ba2e:	31 c0 	xor	eax, eax
 104ba30:	eb e0 	jmp	-32 <_runtime.(*_type).textOff+0xa2>
 104ba32:	8b 5c 24 60 	mov	ebx, dword ptr [rsp + 96]
 104ba36:	48 63 c3 	movsxd	rax, ebx
 104ba39:	48 03 41 60 	add	rax, qword ptr [rcx + 96]
 104ba3d:	eb d3 	jmp	-45 <_runtime.(*_type).textOff+0xa2>
 104ba3f:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104ba44:	90 	nop
 104ba45:	48 8d 05 b4 29 08 00 	lea	rax, [rip + 534964]
 104ba4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ba50:	e8 db c6 fb ff 	call	-276773 <_runtime.lock>
 104ba55:	48 8d 05 e4 76 01 00 	lea	rax, [rip + 95972]
 104ba5c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ba60:	48 8b 05 a9 29 08 00 	mov	rax, qword ptr [rip + 534953]
 104ba67:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104ba6c:	8b 44 24 60 	mov	eax, dword ptr [rsp + 96]
 104ba70:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 104ba74:	e8 17 0b fc ff 	call	-259305 <_runtime.mapaccess1_fast32>
 104ba79:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104ba7e:	48 8b 00 	mov	rax, qword ptr [rax]
 104ba81:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104ba86:	90 	nop
 104ba87:	48 8d 0d 72 29 08 00 	lea	rcx, [rip + 534898]
 104ba8e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ba92:	e8 79 c8 fb ff 	call	-276359 <_runtime.unlock>
 104ba97:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104ba9c:	48 85 c0 	test	rax, rax
 104ba9f:	0f 85 13 01 00 00 	jne	275 <_runtime.(*_type).textOff+0x248>
 104baa5:	e8 f6 e9 fd ff 	call	-136714 <_runtime.printlock>
 104baaa:	48 8d 05 f6 82 02 00 	lea	rax, [rip + 164598]
 104bab1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bab5:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104babe:	e8 1d f3 fd ff 	call	-134371 <_runtime.printstring>
 104bac3:	8b 44 24 60 	mov	eax, dword ptr [rsp + 96]
 104bac7:	48 63 c0 	movsxd	rax, eax
 104baca:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bace:	e8 bd f1 fd ff 	call	-134723 <_runtime.printhex>
 104bad3:	48 8d 05 26 73 02 00 	lea	rax, [rip + 160550]
 104bada:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bade:	48 c7 44 24 08 06 00 00 00 	mov	qword ptr [rsp + 8], 6
 104bae7:	e8 f4 f2 fd ff 	call	-134412 <_runtime.printstring>
 104baec:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104baf1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104baf5:	e8 96 f1 fd ff 	call	-134762 <_runtime.printhex>
 104bafa:	48 8d 05 41 7f 02 00 	lea	rax, [rip + 163649]
 104bb01:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bb05:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104bb0e:	e8 cd f2 fd ff 	call	-134451 <_runtime.printstring>
 104bb13:	e8 08 ea fd ff 	call	-136696 <_runtime.printunlock>
 104bb18:	48 8d 05 41 02 08 00 	lea	rax, [rip + 524865]
 104bb1f:	e9 86 00 00 00 	jmp	134 <_runtime.(*_type).textOff+0x23a>
 104bb24:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104bb29:	48 8b 88 c8 00 00 00 	mov	rcx, qword ptr [rax + 200]
 104bb30:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104bb35:	48 8b 90 d0 00 00 00 	mov	rdx, qword ptr [rax + 208]
 104bb3c:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 104bb41:	e8 5a e9 fd ff 	call	-136870 <_runtime.printlock>
 104bb46:	48 8d 05 98 73 02 00 	lea	rax, [rip + 160664]
 104bb4d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bb51:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 104bb5a:	e8 81 f2 fd ff 	call	-134527 <_runtime.printstring>
 104bb5f:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104bb64:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bb68:	e8 23 f1 fd ff 	call	-134877 <_runtime.printhex>
 104bb6d:	48 8d 05 43 74 02 00 	lea	rax, [rip + 160835]
 104bb74:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bb78:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 104bb81:	e8 5a f2 fd ff 	call	-134566 <_runtime.printstring>
 104bb86:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104bb8b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bb8f:	e8 fc f0 fd ff 	call	-134916 <_runtime.printhex>
 104bb94:	e8 97 eb fd ff 	call	-136297 <_runtime.printnl>
 104bb99:	e8 82 e9 fd ff 	call	-136830 <_runtime.printunlock>
 104bb9e:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104bba3:	48 8b 80 c0 01 00 00 	mov	rax, qword ptr [rax + 448]
 104bbaa:	48 85 c0 	test	rax, rax
 104bbad:	0f 85 71 ff ff ff 	jne	-143 <_runtime.(*_type).textOff+0x1b4>
 104bbb3:	e9 c3 00 00 00 	jmp	195 <_runtime.(*_type).textOff+0x30b>
 104bbb8:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 104bbbd:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 104bbc2:	48 83 c4 50 	add	rsp, 80
 104bbc6:	c3 	ret
 104bbc7:	31 c9 	xor	ecx, ecx
 104bbc9:	e9 f3 fd ff ff 	jmp	-525 <_runtime.(*_type).textOff+0x51>
 104bbce:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 104bbd3:	48 8b 41 60 	mov	rax, qword ptr [rcx + 96]
 104bbd7:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104bbdc:	e8 bf e8 fd ff 	call	-137025 <_runtime.printlock>
 104bbe1:	48 8d 05 bf 81 02 00 	lea	rax, [rip + 164287]
 104bbe8:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bbec:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104bbf5:	e8 e6 f1 fd ff 	call	-134682 <_runtime.printstring>
 104bbfa:	8b 44 24 60 	mov	eax, dword ptr [rsp + 96]
 104bbfe:	48 63 c0 	movsxd	rax, eax
 104bc01:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc05:	e8 86 f0 fd ff 	call	-135034 <_runtime.printhex>
 104bc0a:	48 8d 05 df 7b 02 00 	lea	rax, [rip + 162783]
 104bc11:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc15:	48 c7 44 24 08 0e 00 00 00 	mov	qword ptr [rsp + 8], 14
 104bc1e:	e8 bd f1 fd ff 	call	-134723 <_runtime.printstring>
 104bc23:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104bc28:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc2c:	e8 5f f0 fd ff 	call	-135073 <_runtime.printhex>
 104bc31:	48 8d 05 5e 70 02 00 	lea	rax, [rip + 159838]
 104bc38:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc3c:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 104bc45:	e8 96 f1 fd ff 	call	-134762 <_runtime.printstring>
 104bc4a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104bc4f:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc53:	e8 38 f0 fd ff 	call	-135112 <_runtime.printhex>
 104bc58:	e8 d3 ea fd ff 	call	-136493 <_runtime.printnl>
 104bc5d:	e8 be e8 fd ff 	call	-137026 <_runtime.printunlock>
 104bc62:	48 8d 05 05 a3 02 00 	lea	rax, [rip + 172805]
 104bc69:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc6d:	48 c7 44 24 08 21 00 00 00 	mov	qword ptr [rsp + 8], 33
 104bc76:	e8 e5 d0 fd ff 	call	-143131 <_runtime.throw>
 104bc7b:	48 8d 05 c6 b1 02 00 	lea	rax, [rip + 176582]
 104bc82:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bc86:	48 c7 44 24 08 2e 00 00 00 	mov	qword ptr [rsp + 8], 46
 104bc8f:	e8 cc d0 fd ff 	call	-143156 <_runtime.throw>
 104bc94:	90 	nop
 104bc95:	e8 36 4f 00 00 	call	20278 <_runtime.morestack_noctxt>
 104bc9a:	e9 d1 fc ff ff 	jmp	-815 <_runtime.(*_type).textOff>
 104bc9f:	cc 	int3

_runtime.name.tagLen:
 104bca0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104bca5:	0f b6 08 	movzx	ecx, byte ptr [rax]
 104bca8:	f6 c1 02 	test	cl, 2
 104bcab:	75 0a 	jne	10 <_runtime.name.tagLen+0x17>
 104bcad:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104bcb6:	c3 	ret
 104bcb7:	0f b7 48 01 	movzx	ecx, word ptr [rax + 1]
 104bcbb:	66 c1 c1 08 	rol	cx, 8
 104bcbf:	0f b7 c9 	movzx	ecx, cx
 104bcc2:	48 8d 14 01 	lea	rdx, [rcx + rax]
 104bcc6:	48 8d 52 03 	lea	rdx, [rdx + 3]
 104bcca:	48 8d 04 01 	lea	rax, [rcx + rax]
 104bcce:	48 8d 40 04 	lea	rax, [rax + 4]
 104bcd2:	90 	nop
 104bcd3:	0f b6 0a 	movzx	ecx, byte ptr [rdx]
 104bcd6:	0f b6 00 	movzx	eax, byte ptr [rax]
 104bcd9:	90 	nop
 104bcda:	90 	nop
 104bcdb:	c1 e1 08 	shl	ecx, 8
 104bcde:	09 c8 	or	eax, ecx
 104bce0:	0f b7 c0 	movzx	eax, ax
 104bce3:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104bce8:	c3 	ret
 104bce9:	cc 	int3
 104bcea:	cc 	int3
 104bceb:	cc 	int3
 104bcec:	cc 	int3
 104bced:	cc 	int3
 104bcee:	cc 	int3
 104bcef:	cc 	int3

_runtime.name.name:
 104bcf0:	0f 57 c0 	xorps	xmm0, xmm0
 104bcf3:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 104bcf8:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104bcfd:	48 85 c0 	test	rax, rax
 104bd00:	74 27 	je	39 <_runtime.name.name+0x39>
 104bd02:	90 	nop
 104bd03:	0f b7 48 01 	movzx	ecx, word ptr [rax + 1]
 104bd07:	66 c1 c1 08 	rol	cx, 8
 104bd0b:	0f b7 c9 	movzx	ecx, cx
 104bd0e:	48 85 c9 	test	rcx, rcx
 104bd11:	75 06 	jne	6 <_runtime.name.name+0x29>
 104bd13:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 104bd18:	c3 	ret
 104bd19:	90 	nop
 104bd1a:	48 83 c0 03 	add	rax, 3
 104bd1e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104bd23:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104bd28:	c3 	ret
 104bd29:	0f 11 44 24 10 	movups	xmmword ptr [rsp + 16], xmm0
 104bd2e:	c3 	ret
 104bd2f:	cc 	int3

_runtime.name.tag:
 104bd30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104bd39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104bd3d:	76 6e 	jbe	110 <_runtime.name.tag+0x7d>
 104bd3f:	48 83 ec 18 	sub	rsp, 24
 104bd43:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104bd48:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104bd4d:	0f 57 c0 	xorps	xmm0, xmm0
 104bd50:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 104bd55:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104bd5a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104bd5e:	e8 3d ff ff ff 	call	-195 <_runtime.name.tagLen>
 104bd63:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104bd68:	48 85 c0 	test	rax, rax
 104bd6b:	75 12 	jne	18 <_runtime.name.tag+0x4f>
 104bd6d:	0f 57 c0 	xorps	xmm0, xmm0
 104bd70:	0f 11 44 24 28 	movups	xmmword ptr [rsp + 40], xmm0
 104bd75:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104bd7a:	48 83 c4 18 	add	rsp, 24
 104bd7e:	c3 	ret
 104bd7f:	90 	nop
 104bd80:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104bd85:	0f b7 51 01 	movzx	edx, word ptr [rcx + 1]
 104bd89:	66 c1 c2 08 	rol	dx, 8
 104bd8d:	0f b7 d2 	movzx	edx, dx
 104bd90:	90 	nop
 104bd91:	48 8d 0c 0a 	lea	rcx, [rdx + rcx]
 104bd95:	48 8d 49 05 	lea	rcx, [rcx + 5]
 104bd99:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104bd9e:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104bda3:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104bda8:	48 83 c4 18 	add	rsp, 24
 104bdac:	c3 	ret
 104bdad:	e8 1e 4e 00 00 	call	19998 <_runtime.morestack_noctxt>
 104bdb2:	e9 79 ff ff ff 	jmp	-135 <_runtime.name.tag>
 104bdb7:	cc 	int3
 104bdb8:	cc 	int3
 104bdb9:	cc 	int3
 104bdba:	cc 	int3
 104bdbb:	cc 	int3
 104bdbc:	cc 	int3
 104bdbd:	cc 	int3
 104bdbe:	cc 	int3
 104bdbf:	cc 	int3

_runtime.name.pkgPath:
 104bdc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104bdc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104bdcd:	0f 86 cb 00 00 00 	jbe	203 <_runtime.name.pkgPath+0xde>
 104bdd3:	48 83 ec 28 	sub	rsp, 40
 104bdd7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104bddc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104bde1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104bde6:	48 85 c0 	test	rax, rax
 104bde9:	74 08 	je	8 <_runtime.name.pkgPath+0x33>
 104bdeb:	0f b6 08 	movzx	ecx, byte ptr [rax]
 104bdee:	f6 c1 04 	test	cl, 4
 104bdf1:	75 12 	jne	18 <_runtime.name.pkgPath+0x45>
 104bdf3:	0f 57 c0 	xorps	xmm0, xmm0
 104bdf6:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 104bdfb:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104be00:	48 83 c4 28 	add	rsp, 40
 104be04:	c3 	ret
 104be05:	0f b7 48 01 	movzx	ecx, word ptr [rax + 1]
 104be09:	66 89 4c 24 1a 	mov	word ptr [rsp + 26], cx
 104be0e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104be12:	e8 89 fe ff ff 	call	-375 <_runtime.name.tagLen>
 104be17:	0f b7 44 24 1a 	movzx	eax, word ptr [rsp + 26]
 104be1c:	66 c1 c0 08 	rol	ax, 8
 104be20:	0f b7 c0 	movzx	eax, ax
 104be23:	48 8d 48 03 	lea	rcx, [rax + 3]
 104be27:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 104be2c:	48 85 d2 	test	rdx, rdx
 104be2f:	7e 68 	jle	104 <_runtime.name.pkgPath+0xd9>
 104be31:	48 8d 04 02 	lea	rax, [rdx + rax]
 104be35:	48 8d 40 05 	lea	rax, [rax + 5]
 104be39:	c7 44 24 1c 00 00 00 00 	mov	dword ptr [rsp + 28], 0
 104be41:	90 	nop
 104be42:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104be47:	48 8d 14 08 	lea	rdx, [rax + rcx]
 104be4b:	48 8d 5c 24 1c 	lea	rbx, [rsp + 28]
 104be50:	48 39 d3 	cmp	rbx, rdx
 104be53:	74 07 	je	7 <_runtime.name.pkgPath+0x9c>
 104be55:	8b 04 08 	mov	eax, dword ptr [rax + rcx]
 104be58:	89 44 24 1c 	mov	dword ptr [rsp + 28], eax
 104be5c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104be60:	8b 44 24 1c 	mov	eax, dword ptr [rsp + 28]
 104be64:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 104be68:	e8 b3 f4 ff ff 	call	-2893 <_runtime.resolveNameOff>
 104be6d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104be72:	48 89 04 24 	mov	qword ptr [rsp], rax
 104be76:	e8 75 fe ff ff 	call	-395 <_runtime.name.name>
 104be7b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104be80:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104be85:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104be8a:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104be8f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104be94:	48 83 c4 28 	add	rsp, 40
 104be98:	c3 	ret
 104be99:	48 89 c8 	mov	rax, rcx
 104be9c:	eb 9b 	jmp	-101 <_runtime.name.pkgPath+0x79>
 104be9e:	e8 2d 4d 00 00 	call	19757 <_runtime.morestack_noctxt>
 104bea3:	e9 18 ff ff ff 	jmp	-232 <_runtime.name.pkgPath>
 104bea8:	cc 	int3
 104bea9:	cc 	int3
 104beaa:	cc 	int3
 104beab:	cc 	int3
 104beac:	cc 	int3
 104bead:	cc 	int3
 104beae:	cc 	int3
 104beaf:	cc 	int3

_runtime.typelinksinit:
 104beb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104beb9:	48 8d 84 24 c0 fd ff ff 	lea	rax, [rsp - 576]
 104bec1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 104bec5:	0f 86 73 06 00 00 	jbe	1651 <_runtime.typelinksinit+0x68e>
 104becb:	48 81 ec c0 02 00 00 	sub	rsp, 704
 104bed2:	48 89 ac 24 b8 02 00 00 	mov	qword ptr [rsp + 696], rbp
 104beda:	48 8d ac 24 b8 02 00 00 	lea	rbp, [rsp + 696]
 104bee2:	48 83 3d 36 00 08 00 00 	cmp	qword ptr [rip + 524342], 0
 104beea:	0f 84 33 06 00 00 	je	1587 <_runtime.typelinksinit+0x673>
 104bef0:	48 8b 05 61 ff 07 00 	mov	rax, qword ptr [rip + 524129]
 104bef7:	0f 57 c0 	xorps	xmm0, xmm0
 104befa:	0f 11 84 24 08 01 00 00 	movups	xmmword ptr [rsp + 264], xmm0
 104bf02:	0f 11 84 24 18 01 00 00 	movups	xmmword ptr [rsp + 280], xmm0
 104bf0a:	0f 11 84 24 28 01 00 00 	movups	xmmword ptr [rsp + 296], xmm0
 104bf12:	48 8d bc 24 c8 01 00 00 	lea	rdi, [rsp + 456]
 104bf1a:	48 8d 7f f0 	lea	rdi, [rdi - 16]
 104bf1e:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 104bf23:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 104bf28:	e8 aa 75 00 00 	call	30122 <_runtime.duffzero+0xe7>
 104bf2d:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 104bf31:	48 8d 8c 24 c8 01 00 00 	lea	rcx, [rsp + 456]
 104bf39:	48 89 8c 24 18 01 00 00 	mov	qword ptr [rsp + 280], rcx
 104bf41:	48 8d 0d 78 73 01 00 	lea	rcx, [rip + 95096]
 104bf48:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104bf4c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104bf51:	48 8d 84 24 08 01 00 00 	lea	rax, [rsp + 264]
 104bf59:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104bf5e:	e8 1d f0 fb ff 	call	-266211 <_runtime.makemap>
 104bf63:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104bf68:	48 8b 0d f1 22 08 00 	mov	rcx, qword ptr [rip + 533233]
 104bf6f:	48 85 c9 	test	rcx, rcx
 104bf72:	0f 84 a0 05 00 00 	je	1440 <_runtime.typelinksinit+0x668>
 104bf78:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 104bf7c:	48 8b 59 08 	mov	rbx, qword ptr [rcx + 8]
 104bf80:	48 8b 31 	mov	rsi, qword ptr [rcx]
 104bf83:	48 85 db 	test	rbx, rbx
 104bf86:	0f 86 a7 05 00 00 	jbe	1447 <_runtime.typelinksinit+0x683>
 104bf8c:	48 89 84 24 80 00 00 00 	mov	qword ptr [rsp + 128], rax
 104bf94:	48 8b 0e 	mov	rcx, qword ptr [rsi]
 104bf97:	48 ff ca 	dec	rdx
 104bf9a:	48 f7 da 	neg	rdx
 104bf9d:	48 c1 fa 3f 	sar	rdx, 63
 104bfa1:	48 83 e2 08 	and	rdx, 8
 104bfa5:	48 01 f2 	add	rdx, rsi
 104bfa8:	48 89 94 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rdx
 104bfb0:	48 ff cb 	dec	rbx
 104bfb3:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 104bfb8:	31 f6 	xor	esi, esi
 104bfba:	e9 f5 01 00 00 	jmp	501 <_runtime.typelinksinit+0x304>
 104bfbf:	48 ff c6 	inc	rsi
 104bfc2:	48 39 d6 	cmp	rsi, rdx
 104bfc5:	0f 8d b9 00 00 00 	jge	185 <_runtime.typelinksinit+0x1d4>
 104bfcb:	4c 8b 04 f0 	mov	r8, qword ptr [rax + 8*rsi]
 104bfcf:	49 39 d8 	cmp	r8, rbx
 104bfd2:	75 eb 	jne	-21 <_runtime.typelinksinit+0x10f>
 104bfd4:	4c 8b 5c 24 60 	mov	r11, qword ptr [rsp + 96]
 104bfd9:	4d 8d 53 01 	lea	r10, [r11 + 1]
 104bfdd:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104bfe5:	48 8b 8c 24 a0 00 00 00 	mov	rcx, qword ptr [rsp + 160]
 104bfed:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 104bff5:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 104bffa:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 104bfff:	48 8b bc 24 a8 00 00 00 	mov	rdi, qword ptr [rsp + 168]
 104c007:	4c 8b 44 24 68 	mov	r8, qword ptr [rsp + 104]
 104c00c:	4c 8b 8c 24 c8 00 00 00 	mov	r9, qword ptr [rsp + 200]
 104c014:	4d 39 c2 	cmp	r10, r8
 104c017:	0f 8d 87 01 00 00 	jge	391 <_runtime.typelinksinit+0x2f4>
 104c01d:	4c 89 54 24 60 	mov	qword ptr [rsp + 96], r10
 104c022:	47 8b 1c 91 	mov	r11d, dword ptr [r9 + 4*r10]
 104c026:	4c 8b a1 b0 01 00 00 	mov	r12, qword ptr [rcx + 432]
 104c02d:	4d 85 e4 	test	r12, r12
 104c030:	0f 85 3f 01 00 00 	jne	319 <_runtime.typelinksinit+0x2c5>
 104c036:	4d 63 db 	movsxd	r11, r11d
 104c039:	4c 03 99 c8 00 00 00 	add	r11, qword ptr [rcx + 200]
 104c040:	4c 89 9c 24 90 00 00 00 	mov	qword ptr [rsp + 144], r11
 104c048:	41 8b 4b 10 	mov	ecx, dword ptr [r11 + 16]
 104c04c:	48 8d 15 6d 72 01 00 	lea	rdx, [rip + 94829]
 104c053:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104c057:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104c05c:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 104c060:	e8 2b 05 fc ff 	call	-260821 <_runtime.mapaccess1_fast32>
 104c065:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104c06a:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 104c06e:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 104c072:	48 8b 00 	mov	rax, qword ptr [rax]
 104c075:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 104c07d:	31 f6 	xor	esi, esi
 104c07f:	e9 3e ff ff ff 	jmp	-194 <_runtime.typelinksinit+0x112>
 104c084:	48 8d 72 01 	lea	rsi, [rdx + 1]
 104c088:	48 39 ce 	cmp	rsi, rcx
 104c08b:	0f 87 93 00 00 00 	ja	147 <_runtime.typelinksinit+0x274>
 104c091:	48 89 84 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rax
 104c099:	48 89 74 24 58 	mov	qword ptr [rsp + 88], rsi
 104c09e:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 104c0a3:	48 8d 3c d0 	lea	rdi, [rax + 8*rdx]
 104c0a7:	83 3d 52 b8 0a 00 00 	cmp	dword ptr [rip + 702546], 0
 104c0ae:	75 6a 	jne	106 <_runtime.typelinksinit+0x26a>
 104c0b0:	48 89 1c d0 	mov	qword ptr [rax + 8*rdx], rbx
 104c0b4:	8b 43 10 	mov	eax, dword ptr [rbx + 16]
 104c0b7:	48 8d 0d 02 72 01 00 	lea	rcx, [rip + 94722]
 104c0be:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104c0c2:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 104c0ca:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104c0cf:	89 44 24 10 	mov	dword ptr [rsp + 16], eax
 104c0d3:	e8 08 08 fc ff 	call	-260088 <_runtime.mapassign_fast32>
 104c0d8:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 104c0dd:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104c0e2:	48 89 47 08 	mov	qword ptr [rdi + 8], rax
 104c0e6:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104c0eb:	48 89 47 10 	mov	qword ptr [rdi + 16], rax
 104c0ef:	83 3d 0a b8 0a 00 00 	cmp	dword ptr [rip + 702474], 0
 104c0f6:	75 10 	jne	16 <_runtime.typelinksinit+0x258>
 104c0f8:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 104c100:	48 89 07 	mov	qword ptr [rdi], rax
 104c103:	e9 cc fe ff ff 	jmp	-308 <_runtime.typelinksinit+0x124>
 104c108:	48 8b 84 24 c0 00 00 00 	mov	rax, qword ptr [rsp + 192]
 104c110:	e8 cb 68 00 00 	call	26827 <_runtime.gcWriteBarrier>
 104c115:	e9 ba fe ff ff 	jmp	-326 <_runtime.typelinksinit+0x124>
 104c11a:	48 89 d8 	mov	rax, rbx
 104c11d:	e8 be 68 00 00 	call	26814 <_runtime.gcWriteBarrier>
 104c122:	eb 90 	jmp	-112 <_runtime.typelinksinit+0x204>
 104c124:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 104c129:	48 8d 1d d0 e3 01 00 	lea	rbx, [rip + 123856]
 104c130:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104c134:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104c139:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104c13e:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104c143:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 104c148:	e8 d3 0a ff ff 	call	-62765 <_runtime.growslice>
 104c14d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104c152:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104c157:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104c15c:	48 8d 71 01 	lea	rsi, [rcx + 1]
 104c160:	48 8b 9c 24 90 00 00 00 	mov	rbx, qword ptr [rsp + 144]
 104c168:	48 89 d1 	mov	rcx, rdx
 104c16b:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 104c170:	e9 1c ff ff ff 	jmp	-228 <_runtime.typelinksinit+0x1e1>
 104c175:	48 8d 05 84 70 01 00 	lea	rax, [rip + 94340]
 104c17c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104c180:	4c 89 64 24 08 	mov	qword ptr [rsp + 8], r12
 104c185:	44 89 5c 24 10 	mov	dword ptr [rsp + 16], r11d
 104c18a:	e8 01 04 fc ff 	call	-261119 <_runtime.mapaccess1_fast32>
 104c18f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104c194:	4c 8b 18 	mov	r11, qword ptr [rax]
 104c197:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104c19f:	e9 9c fe ff ff 	jmp	-356 <_runtime.typelinksinit+0x190>
 104c1a4:	48 83 bf b0 01 00 00 00 	cmp	qword ptr [rdi + 432], 0
 104c1ac:	74 4b 	je	75 <_runtime.typelinksinit+0x349>
 104c1ae:	48 ff c6 	inc	rsi
 104c1b1:	48 89 f9 	mov	rcx, rdi
 104c1b4:	48 39 de 	cmp	rsi, rbx
 104c1b7:	0f 8d 4b 03 00 00 	jge	843 <_runtime.typelinksinit+0x658>
 104c1bd:	48 89 74 24 70 	mov	qword ptr [rsp + 112], rsi
 104c1c2:	48 89 8c 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rcx
 104c1ca:	48 8b 3c f2 	mov	rdi, qword ptr [rdx + 8*rsi]
 104c1ce:	48 89 bc 24 a8 00 00 00 	mov	qword ptr [rsp + 168], rdi
 104c1d6:	4c 8b 81 f8 00 00 00 	mov	r8, qword ptr [rcx + 248]
 104c1dd:	4c 89 44 24 68 	mov	qword ptr [rsp + 104], r8
 104c1e2:	4c 8b 89 f0 00 00 00 	mov	r9, qword ptr [rcx + 240]
 104c1e9:	4c 89 8c 24 c8 00 00 00 	mov	qword ptr [rsp + 200], r9
 104c1f1:	45 31 d2 	xor	r10d, r10d
 104c1f4:	e9 1b fe ff ff 	jmp	-485 <_runtime.typelinksinit+0x164>
 104c1f9:	48 8b 87 f8 00 00 00 	mov	rax, qword ptr [rdi + 248]
 104c200:	48 8d 0d f9 6f 01 00 	lea	rcx, [rip + 94201]
 104c207:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104c20b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104c210:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104c219:	e8 62 ed fb ff 	call	-266910 <_runtime.makemap>
 104c21e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104c223:	48 8b 0d be 21 08 00 	mov	rcx, qword ptr [rip + 532926]
 104c22a:	48 8d 51 01 	lea	rdx, [rcx + 1]
 104c22e:	48 8b 1d ab 21 08 00 	mov	rbx, qword ptr [rip + 532907]
 104c235:	48 8b 35 b4 21 08 00 	mov	rsi, qword ptr [rip + 532916]
 104c23c:	48 39 f2 	cmp	rdx, rsi
 104c23f:	0f 87 53 02 00 00 	ja	595 <_runtime.typelinksinit+0x5e8>
 104c245:	48 8d 51 01 	lea	rdx, [rcx + 1]
 104c249:	48 89 15 98 21 08 00 	mov	qword ptr [rip + 532888], rdx
 104c250:	48 8d 3c cb 	lea	rdi, [rbx + 8*rcx]
 104c254:	83 3d a5 b6 0a 00 00 	cmp	dword ptr [rip + 702117], 0
 104c25b:	0f 85 19 02 00 00 	jne	537 <_runtime.typelinksinit+0x5ca>
 104c261:	48 89 04 cb 	mov	qword ptr [rbx + 8*rcx], rax
 104c265:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 104c26d:	48 89 81 b0 01 00 00 	mov	qword ptr [rcx + 432], rax
 104c274:	48 8b 81 f0 00 00 00 	mov	rax, qword ptr [rcx + 240]
 104c27b:	48 89 84 24 c8 00 00 00 	mov	qword ptr [rsp + 200], rax
 104c283:	48 8b 91 f8 00 00 00 	mov	rdx, qword ptr [rcx + 248]
 104c28a:	48 89 54 24 68 	mov	qword ptr [rsp + 104], rdx
 104c28f:	31 db 	xor	ebx, ebx
 104c291:	e9 38 01 00 00 	jmp	312 <_runtime.typelinksinit+0x51e>
 104c296:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 104c29b:	48 8d 53 01 	lea	rdx, [rbx + 1]
 104c29f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104c2a4:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 104c2ac:	48 39 c2 	cmp	rdx, rax
 104c2af:	0f 8d 96 01 00 00 	jge	406 <_runtime.typelinksinit+0x59b>
 104c2b5:	48 89 54 24 50 	mov	qword ptr [rsp + 80], rdx
 104c2ba:	48 8b 04 d1 	mov	rax, qword ptr [rcx + 8*rdx]
 104c2be:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 104c2c6:	0f 57 c0 	xorps	xmm0, xmm0
 104c2c9:	0f 11 84 24 d8 00 00 00 	movups	xmmword ptr [rsp + 216], xmm0
 104c2d1:	0f 11 84 24 e8 00 00 00 	movups	xmmword ptr [rsp + 232], xmm0
 104c2d9:	0f 11 84 24 f8 00 00 00 	movups	xmmword ptr [rsp + 248], xmm0
 104c2e1:	48 8d bc 24 38 01 00 00 	lea	rdi, [rsp + 312]
 104c2e9:	48 8d 7f d0 	lea	rdi, [rdi - 48]
 104c2ed:	48 89 6c 24 f0 	mov	qword ptr [rsp - 16], rbp
 104c2f2:	48 8d 6c 24 f0 	lea	rbp, [rsp - 16]
 104c2f7:	e8 f6 71 00 00 	call	29174 <_runtime.duffzero+0x102>
 104c2fc:	48 8b 6d 00 	mov	rbp, qword ptr [rbp]
 104c300:	48 8d 9c 24 38 01 00 00 	lea	rbx, [rsp + 312]
 104c308:	48 89 9c 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rbx
 104c310:	e8 1b 4e ff ff 	call	-45541 <_runtime.fastrand>
 104c315:	8b 04 24 	mov	eax, dword ptr [rsp]
 104c318:	89 84 24 e4 00 00 00 	mov	dword ptr [rsp + 228], eax
 104c31f:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 104c327:	48 89 04 24 	mov	qword ptr [rsp], rax
 104c32b:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 104c333:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104c338:	48 8d 94 24 d8 00 00 00 	lea	rdx, [rsp + 216]
 104c340:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104c345:	e8 06 02 00 00 	call	518 <_runtime.typesEqual>
 104c34a:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104c34f:	0f 84 41 ff ff ff 	je	-191 <_runtime.typelinksinit+0x3e6>
 104c355:	48 8b 84 24 b0 00 00 00 	mov	rax, qword ptr [rsp + 176]
 104c35d:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 104c365:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 104c36d:	48 8b 91 b0 01 00 00 	mov	rdx, qword ptr [rcx + 432]
 104c374:	48 8d 1d 85 6e 01 00 	lea	rbx, [rip + 93829]
 104c37b:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104c37f:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104c384:	8b 54 24 44 	mov	edx, dword ptr [rsp + 68]
 104c388:	89 54 24 10 	mov	dword ptr [rsp + 16], edx
 104c38c:	e8 4f 05 fc ff 	call	-260785 <_runtime.mapassign_fast32>
 104c391:	48 8b 7c 24 18 	mov	rdi, qword ptr [rsp + 24]
 104c396:	84 07 	test	byte ptr [rdi], al
 104c398:	83 3d 61 b5 0a 00 00 	cmp	dword ptr [rip + 701793], 0
 104c39f:	0f 85 94 00 00 00 	jne	148 <_runtime.typelinksinit+0x589>
 104c3a5:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 104c3ad:	48 89 07 	mov	qword ptr [rdi], rax
 104c3b0:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 104c3b5:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 104c3b9:	48 8b 84 24 c8 00 00 00 	mov	rax, qword ptr [rsp + 200]
 104c3c1:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 104c3c9:	48 8b 54 24 68 	mov	rdx, qword ptr [rsp + 104]
 104c3ce:	48 39 d3 	cmp	rbx, rdx
 104c3d1:	0f 8d 81 00 00 00 	jge	129 <_runtime.typelinksinit+0x5a8>
 104c3d7:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 104c3dc:	8b 14 98 	mov	edx, dword ptr [rax + 4*rbx]
 104c3df:	89 54 24 44 	mov	dword ptr [rsp + 68], edx
 104c3e3:	48 63 f2 	movsxd	rsi, edx
 104c3e6:	48 03 b1 c8 00 00 00 	add	rsi, qword ptr [rcx + 200]
 104c3ed:	48 89 b4 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rsi
 104c3f5:	8b 7e 10 	mov	edi, dword ptr [rsi + 16]
 104c3f8:	4c 8d 05 c1 6e 01 00 	lea	r8, [rip + 93889]
 104c3ff:	4c 89 04 24 	mov	qword ptr [rsp], r8
 104c403:	4c 8b 8c 24 80 00 00 00 	mov	r9, qword ptr [rsp + 128]
 104c40b:	4c 89 4c 24 08 	mov	qword ptr [rsp + 8], r9
 104c410:	89 7c 24 10 	mov	dword ptr [rsp + 16], edi
 104c414:	e8 77 01 fc ff 	call	-261769 <_runtime.mapaccess1_fast32>
 104c419:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104c41e:	48 8b 08 	mov	rcx, qword ptr [rax]
 104c421:	48 89 8c 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rcx
 104c429:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 104c42d:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 104c432:	31 d2 	xor	edx, edx
 104c434:	e9 73 fe ff ff 	jmp	-397 <_runtime.typelinksinit+0x3fc>
 104c439:	48 8b 84 24 98 00 00 00 	mov	rax, qword ptr [rsp + 152]
 104c441:	e8 9a 65 00 00 	call	26010 <_runtime.gcWriteBarrier>
 104c446:	e9 65 ff ff ff 	jmp	-155 <_runtime.typelinksinit+0x500>
 104c44b:	48 8b 84 24 b8 00 00 00 	mov	rax, qword ptr [rsp + 184]
 104c453:	e9 05 ff ff ff 	jmp	-251 <_runtime.typelinksinit+0x4ad>
 104c458:	48 8b 84 24 80 00 00 00 	mov	rax, qword ptr [rsp + 128]
 104c460:	48 8b 94 24 d0 00 00 00 	mov	rdx, qword ptr [rsp + 208]
 104c468:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 104c46d:	48 8b 74 24 70 	mov	rsi, qword ptr [rsp + 112]
 104c472:	48 89 cf 	mov	rdi, rcx
 104c475:	e9 34 fd ff ff 	jmp	-716 <_runtime.typelinksinit+0x2fe>
 104c47a:	e8 61 65 00 00 	call	25953 <_runtime.gcWriteBarrier>
 104c47f:	48 8b 8c 24 a8 00 00 00 	mov	rcx, qword ptr [rsp + 168]
 104c487:	48 8d b9 b0 01 00 00 	lea	rdi, [rcx + 432]
 104c48e:	e8 4d 65 00 00 	call	25933 <_runtime.gcWriteBarrier>
 104c493:	e9 dc fd ff ff 	jmp	-548 <_runtime.typelinksinit+0x3c4>
 104c498:	48 89 84 24 88 00 00 00 	mov	qword ptr [rsp + 136], rax
 104c4a0:	48 8d 05 59 6d 01 00 	lea	rax, [rip + 93529]
 104c4a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 104c4ab:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104c4b0:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104c4b5:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 104c4ba:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104c4bf:	e8 5c 07 ff ff 	call	-63652 <_runtime.growslice>
 104c4c4:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104c4c9:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104c4ce:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104c4d3:	48 89 15 16 1f 08 00 	mov	qword ptr [rip + 532246], rdx
 104c4da:	83 3d 1f b4 0a 00 00 	cmp	dword ptr [rip + 701471], 0
 104c4e1:	75 17 	jne	23 <_runtime.typelinksinit+0x64a>
 104c4e3:	48 89 05 f6 1e 08 00 	mov	qword ptr [rip + 532214], rax
 104c4ea:	48 89 c3 	mov	rbx, rax
 104c4ed:	48 8b 84 24 88 00 00 00 	mov	rax, qword ptr [rsp + 136]
 104c4f5:	e9 4b fd ff ff 	jmp	-693 <_runtime.typelinksinit+0x395>
 104c4fa:	48 8d 3d df 1e 08 00 	lea	rdi, [rip + 532191]
 104c501:	e8 da 64 00 00 	call	25818 <_runtime.gcWriteBarrier>
 104c506:	eb e2 	jmp	-30 <_runtime.typelinksinit+0x63a>
 104c508:	48 8b ac 24 b8 02 00 00 	mov	rbp, qword ptr [rsp + 696]
 104c510:	48 81 c4 c0 02 00 00 	add	rsp, 704
 104c517:	c3 	ret
 104c518:	31 d2 	xor	edx, edx
 104c51a:	31 f6 	xor	esi, esi
 104c51c:	31 db 	xor	ebx, ebx
 104c51e:	e9 60 fa ff ff 	jmp	-1440 <_runtime.typelinksinit+0xd3>
 104c523:	48 8b ac 24 b8 02 00 00 	mov	rbp, qword ptr [rsp + 696]
 104c52b:	48 81 c4 c0 02 00 00 	add	rsp, 704
 104c532:	c3 	ret
 104c533:	31 c0 	xor	eax, eax
 104c535:	48 89 d9 	mov	rcx, rbx
 104c538:	e8 13 6e 00 00 	call	28179 <_runtime.panicIndex>
 104c53d:	90 	nop
 104c53e:	e8 8d 46 00 00 	call	18061 <_runtime.morestack_noctxt>
 104c543:	e9 68 f9 ff ff 	jmp	-1688 <_runtime.typelinksinit>
 104c548:	cc 	int3
 104c549:	cc 	int3
 104c54a:	cc 	int3
 104c54b:	cc 	int3
 104c54c:	cc 	int3
 104c54d:	cc 	int3
 104c54e:	cc 	int3
 104c54f:	cc 	int3

_runtime.typesEqual:
 104c550:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104c559:	48 8d 84 24 58 ff ff ff 	lea	rax, [rsp - 168]
 104c561:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 104c565:	0f 86 0e 0f 00 00 	jbe	3854 <_runtime.typesEqual+0xf29>
 104c56b:	48 81 ec 28 01 00 00 	sub	rsp, 296
 104c572:	48 89 ac 24 20 01 00 00 	mov	qword ptr [rsp + 288], rbp
 104c57a:	48 8d ac 24 20 01 00 00 	lea	rbp, [rsp + 288]
 104c582:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104c58a:	48 89 84 24 10 01 00 00 	mov	qword ptr [rsp + 272], rax
 104c592:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104c59a:	48 89 8c 24 18 01 00 00 	mov	qword ptr [rsp + 280], rcx
 104c5a2:	48 8d 15 f7 6b 01 00 	lea	rdx, [rip + 93175]
 104c5a9:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104c5ad:	48 8b 9c 24 40 01 00 00 	mov	rbx, qword ptr [rsp + 320]
 104c5b5:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104c5ba:	48 8d b4 24 10 01 00 00 	lea	rsi, [rsp + 272]
 104c5c2:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 104c5c7:	e8 c4 ed fb ff 	call	-266812 <_runtime.mapaccess2>
 104c5cc:	80 7c 24 20 00 	cmp	byte ptr [rsp + 32], 0
 104c5d1:	0f 85 f9 0d 00 00 	jne	3577 <_runtime.typesEqual+0xe80>
 104c5d7:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104c5df:	48 89 84 24 10 01 00 00 	mov	qword ptr [rsp + 272], rax
 104c5e7:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104c5ef:	48 89 8c 24 18 01 00 00 	mov	qword ptr [rsp + 280], rcx
 104c5f7:	48 8d 15 a2 6b 01 00 	lea	rdx, [rip + 93090]
 104c5fe:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104c602:	48 8b 94 24 40 01 00 00 	mov	rdx, qword ptr [rsp + 320]
 104c60a:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104c60f:	48 8d 9c 24 10 01 00 00 	lea	rbx, [rsp + 272]
 104c617:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 104c61c:	e8 df ef fb ff 	call	-266273 <_runtime.mapassign>
 104c621:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104c626:	84 00 	test	byte ptr [rax], al
 104c628:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104c630:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104c638:	48 39 c8 	cmp	rax, rcx
 104c63b:	0f 84 77 0d 00 00 	je	3447 <_runtime.typesEqual+0xe68>
 104c641:	0f b6 50 17 	movzx	edx, byte ptr [rax + 23]
 104c645:	89 d3 	mov	ebx, edx
 104c647:	83 e2 1f 	and	edx, 31
 104c64a:	0f b6 71 17 	movzx	esi, byte ptr [rcx + 23]
 104c64e:	83 e6 1f 	and	esi, 31
 104c651:	40 38 f2 	cmp	dl, sil
 104c654:	0f 85 46 0d 00 00 	jne	3398 <_runtime.typesEqual+0xe50>
 104c65a:	88 5c 24 2b 	mov	byte ptr [rsp + 43], bl
 104c65e:	88 54 24 2a 	mov	byte ptr [rsp + 42], dl
 104c662:	48 89 04 24 	mov	qword ptr [rsp], rax
 104c666:	e8 35 ea ff ff 	call	-5579 <_runtime.(*_type).string>
 104c66b:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104c670:	48 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], rax
 104c678:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104c67d:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 104c682:	48 8b 94 24 38 01 00 00 	mov	rdx, qword ptr [rsp + 312]
 104c68a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104c68e:	e8 0d ea ff ff 	call	-5619 <_runtime.(*_type).string>
 104c693:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104c698:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104c69d:	74 18 	je	24 <_runtime.typesEqual+0x167>
 104c69f:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104c6a7:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104c6af:	48 81 c4 28 01 00 00 	add	rsp, 296
 104c6b6:	c3 	ret
 104c6b7:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104c6bf:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104c6c3:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104c6c8:	e8 23 5a fb ff 	call	-304605 <_runtime.memequal>
 104c6cd:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104c6d2:	74 cb 	je	-53 <_runtime.typesEqual+0x14f>
 104c6d4:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104c6dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 104c6e0:	e8 7b ea ff ff 	call	-5509 <_runtime.(*_type).uncommon>
 104c6e5:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104c6ea:	48 89 84 24 98 00 00 00 	mov	qword ptr [rsp + 152], rax
 104c6f2:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104c6fa:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104c6fe:	e8 5d ea ff ff 	call	-5539 <_runtime.(*_type).uncommon>
 104c703:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104c708:	48 8b 8c 24 98 00 00 00 	mov	rcx, qword ptr [rsp + 152]
 104c710:	48 85 c9 	test	rcx, rcx
 104c713:	0f 85 b2 0b 00 00 	jne	2994 <_runtime.typesEqual+0xd7b>
 104c719:	48 85 c0 	test	rax, rax
 104c71c:	0f 85 a6 0b 00 00 	jne	2982 <_runtime.typesEqual+0xd78>
 104c722:	0f b6 5c 24 2a 	movzx	ebx, byte ptr [rsp + 42]
 104c727:	80 fb 01 	cmp	bl, 1
 104c72a:	72 09 	jb	9 <_runtime.typesEqual+0x1e5>
 104c72c:	80 fb 10 	cmp	bl, 16
 104c72f:	0f 86 7b 0b 00 00 	jbe	2939 <_runtime.typesEqual+0xd60>
 104c735:	80 fb 15 	cmp	bl, 21
 104c738:	0f 87 8d 07 00 00 	ja	1933 <_runtime.typesEqual+0x97b>
 104c73e:	80 fb 12 	cmp	bl, 18
 104c741:	0f 86 a9 06 00 00 	jbe	1705 <_runtime.typesEqual+0x8a0>
 104c747:	80 fb 13 	cmp	bl, 19
 104c74a:	0f 85 c3 02 00 00 	jne	707 <_runtime.typesEqual+0x4c3>
 104c750:	48 8b 9c 24 38 01 00 00 	mov	rbx, qword ptr [rsp + 312]
 104c758:	0f b7 73 32 	movzx	esi, word ptr [rbx + 50]
 104c75c:	48 8b bc 24 30 01 00 00 	mov	rdi, qword ptr [rsp + 304]
 104c764:	66 39 77 32 	cmp	word ptr [rdi + 50], si
 104c768:	0f 85 8d 02 00 00 	jne	653 <_runtime.typesEqual+0x4ab>
 104c76e:	0f b7 4f 30 	movzx	ecx, word ptr [rdi + 48]
 104c772:	0f b7 73 30 	movzx	esi, word ptr [rbx + 48]
 104c776:	66 39 ce 	cmp	si, cx
 104c779:	0f 85 7c 02 00 00 	jne	636 <_runtime.typesEqual+0x4ab>
 104c77f:	90 	nop
 104c780:	44 0f b6 47 14 	movzx	r8d, byte ptr [rdi + 20]
 104c785:	41 f6 c0 01 	test	r8b, 1
 104c789:	0f 84 62 02 00 00 	je	610 <_runtime.typesEqual+0x4a1>
 104c78f:	b8 48 00 00 00 	mov	eax, 72
 104c794:	4c 8d 04 38 	lea	r8, [rax + rdi]
 104c798:	48 81 f9 00 00 10 00 	cmp	rcx, 1048576
 104c79f:	0f 87 77 0c 00 00 	ja	3191 <_runtime.typesEqual+0xecc>
 104c7a5:	90 	nop
 104c7a6:	0f b6 53 14 	movzx	edx, byte ptr [rbx + 20]
 104c7aa:	f6 c2 01 	test	dl, 1
 104c7ad:	0f 84 34 02 00 00 	je	564 <_runtime.typesEqual+0x497>
 104c7b3:	b8 48 00 00 00 	mov	eax, 72
 104c7b8:	66 89 4c 24 2e 	mov	word ptr [rsp + 46], cx
 104c7bd:	66 89 74 24 2c 	mov	word ptr [rsp + 44], si
 104c7c2:	4c 89 84 24 00 01 00 00 	mov	qword ptr [rsp + 256], r8
 104c7ca:	90 	nop
 104c7cb:	48 8d 14 18 	lea	rdx, [rax + rbx]
 104c7cf:	48 89 94 24 f8 00 00 00 	mov	qword ptr [rsp + 248], rdx
 104c7d7:	4c 8b 8c 24 40 01 00 00 	mov	r9, qword ptr [rsp + 320]
 104c7df:	31 c0 	xor	eax, eax
 104c7e1:	eb 4c 	jmp	76 <_runtime.typesEqual+0x2df>
 104c7e3:	4c 8b 54 24 60 	mov	r10, qword ptr [rsp + 96]
 104c7e8:	49 8d 42 01 	lea	rax, [r10 + 1]
 104c7ec:	44 0f b7 54 24 2e 	movzx	r10d, word ptr [rsp + 46]
 104c7f2:	4c 8b 9c 24 40 01 00 00 	mov	r11, qword ptr [rsp + 320]
 104c7fa:	44 0f b7 64 24 2c 	movzx	r12d, word ptr [rsp + 44]
 104c800:	4c 8b ac 24 f8 00 00 00 	mov	r13, qword ptr [rsp + 248]
 104c808:	4c 8b b4 24 00 01 00 00 	mov	r14, qword ptr [rsp + 256]
 104c810:	44 89 d1 	mov	ecx, r10d
 104c813:	4c 89 ea 	mov	rdx, r13
 104c816:	48 8b 9c 24 38 01 00 00 	mov	rbx, qword ptr [rsp + 312]
 104c81e:	44 89 e6 	mov	esi, r12d
 104c821:	48 8b bc 24 30 01 00 00 	mov	rdi, qword ptr [rsp + 304]
 104c829:	4d 89 f0 	mov	r8, r14
 104c82c:	4d 89 d9 	mov	r9, r11
 104c82f:	48 39 c8 	cmp	rax, rcx
 104c832:	7d 4c 	jge	76 <_runtime.typesEqual+0x330>
 104c834:	4d 8b 14 c0 	mov	r10, qword ptr [r8 + 8*rax]
 104c838:	48 39 f0 	cmp	rax, rsi
 104c83b:	0f 83 d4 0b 00 00 	jae	3028 <_runtime.typesEqual+0xec5>
 104c841:	48 89 44 24 60 	mov	qword ptr [rsp + 96], rax
 104c846:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 104c84a:	4c 89 14 24 	mov	qword ptr [rsp], r10
 104c84e:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104c853:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 104c858:	e8 f3 fc ff ff 	call	-781 <_runtime.typesEqual>
 104c85d:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104c862:	0f 85 7b ff ff ff 	jne	-133 <_runtime.typesEqual+0x293>
 104c868:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104c870:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104c878:	48 81 c4 28 01 00 00 	add	rsp, 296
 104c87f:	c3 	ret
 104c880:	90 	nop
 104c881:	0f b6 57 14 	movzx	edx, byte ptr [rdi + 20]
 104c885:	f6 c2 01 	test	dl, 1
 104c888:	0f 84 4f 01 00 00 	je	335 <_runtime.typesEqual+0x48d>
 104c88e:	b8 48 00 00 00 	mov	eax, 72
 104c893:	0f b7 57 32 	movzx	edx, word ptr [rdi + 50]
 104c897:	81 e2 ff 7f 00 00 	and	edx, 32767
 104c89d:	0f b7 77 30 	movzx	esi, word ptr [rdi + 48]
 104c8a1:	01 f2 	add	edx, esi
 104c8a3:	48 01 c7 	add	rdi, rax
 104c8a6:	0f b7 ca 	movzx	ecx, dx
 104c8a9:	48 39 ce 	cmp	rsi, rcx
 104c8ac:	0f 87 5c 0b 00 00 	ja	2908 <_runtime.typesEqual+0xebe>
 104c8b2:	90 	nop
 104c8b3:	48 29 f1 	sub	rcx, rsi
 104c8b6:	48 8d 96 00 00 f0 ff 	lea	rdx, [rsi - 1048576]
 104c8bd:	48 c1 fa 3f 	sar	rdx, 63
 104c8c1:	48 c1 e6 03 	shl	rsi, 3
 104c8c5:	48 21 d6 	and	rsi, rdx
 104c8c8:	48 8d 14 37 	lea	rdx, [rdi + rsi]
 104c8cc:	0f b6 73 14 	movzx	esi, byte ptr [rbx + 20]
 104c8d0:	40 f6 c6 01 	test	sil, 1
 104c8d4:	0f 84 f9 00 00 00 	je	249 <_runtime.typesEqual+0x483>
 104c8da:	b8 48 00 00 00 	mov	eax, 72
 104c8df:	0f b7 73 32 	movzx	esi, word ptr [rbx + 50]
 104c8e3:	81 e6 ff 7f 00 00 	and	esi, 32767
 104c8e9:	0f b7 7b 30 	movzx	edi, word ptr [rbx + 48]
 104c8ed:	01 fe 	add	esi, edi
 104c8ef:	48 01 c3 	add	rbx, rax
 104c8f2:	0f b7 f6 	movzx	esi, si
 104c8f5:	48 39 f7 	cmp	rdi, rsi
 104c8f8:	0f 87 06 0b 00 00 	ja	2822 <_runtime.typesEqual+0xeb4>
 104c8fe:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104c903:	48 89 94 24 a0 00 00 00 	mov	qword ptr [rsp + 160], rdx
 104c90b:	48 29 fe 	sub	rsi, rdi
 104c90e:	48 89 74 24 30 	mov	qword ptr [rsp + 48], rsi
 104c913:	4c 8d 87 00 00 f0 ff 	lea	r8, [rdi - 1048576]
 104c91a:	49 c1 f8 3f 	sar	r8, 63
 104c91e:	48 c1 e7 03 	shl	rdi, 3
 104c922:	4c 21 c7 	and	rdi, r8
 104c925:	48 01 fb 	add	rbx, rdi
 104c928:	48 89 9c 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbx
 104c930:	31 c0 	xor	eax, eax
 104c932:	eb 3a 	jmp	58 <_runtime.typesEqual+0x41e>
 104c934:	48 8b 7c 24 50 	mov	rdi, qword ptr [rsp + 80]
 104c939:	48 8d 47 01 	lea	rax, [rdi + 1]
 104c93d:	48 8b 7c 24 38 	mov	rdi, qword ptr [rsp + 56]
 104c942:	4c 8b 84 24 40 01 00 00 	mov	r8, qword ptr [rsp + 320]
 104c94a:	4c 8b 54 24 30 	mov	r10, qword ptr [rsp + 48]
 104c94f:	4c 8b 9c 24 80 00 00 00 	mov	r11, qword ptr [rsp + 128]
 104c957:	4c 8b a4 24 a0 00 00 00 	mov	r12, qword ptr [rsp + 160]
 104c95f:	48 89 f9 	mov	rcx, rdi
 104c962:	4c 89 e2 	mov	rdx, r12
 104c965:	4c 89 db 	mov	rbx, r11
 104c968:	4c 89 d6 	mov	rsi, r10
 104c96b:	4d 89 c1 	mov	r9, r8
 104c96e:	48 39 c8 	cmp	rax, rcx
 104c971:	7d 48 	jge	72 <_runtime.typesEqual+0x46b>
 104c973:	48 8b 3c c2 	mov	rdi, qword ptr [rdx + 8*rax]
 104c977:	48 39 f0 	cmp	rax, rsi
 104c97a:	0f 83 7c 0a 00 00 	jae	2684 <_runtime.typesEqual+0xeac>
 104c980:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 104c985:	48 8b 0c c3 	mov	rcx, qword ptr [rbx + 8*rax]
 104c989:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 104c98d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104c992:	4c 89 4c 24 10 	mov	qword ptr [rsp + 16], r9
 104c997:	e8 b4 fb ff ff 	call	-1100 <_runtime.typesEqual>
 104c99c:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104c9a1:	75 91 	jne	-111 <_runtime.typesEqual+0x3e4>
 104c9a3:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104c9ab:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104c9b3:	48 81 c4 28 01 00 00 	add	rsp, 296
 104c9ba:	c3 	ret
 104c9bb:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104c9c3:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104c9cb:	48 81 c4 28 01 00 00 	add	rsp, 296
 104c9d2:	c3 	ret
 104c9d3:	b8 38 00 00 00 	mov	eax, 56
 104c9d8:	e9 02 ff ff ff 	jmp	-254 <_runtime.typesEqual+0x38f>
 104c9dd:	b8 38 00 00 00 	mov	eax, 56
 104c9e2:	e9 ac fe ff ff 	jmp	-340 <_runtime.typesEqual+0x343>
 104c9e7:	b8 38 00 00 00 	mov	eax, 56
 104c9ec:	e9 c7 fd ff ff 	jmp	-569 <_runtime.typesEqual+0x268>
 104c9f1:	b8 38 00 00 00 	mov	eax, 56
 104c9f6:	e9 99 fd ff ff 	jmp	-615 <_runtime.typesEqual+0x244>
 104c9fb:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104ca03:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104ca0b:	48 81 c4 28 01 00 00 	add	rsp, 296
 104ca12:	c3 	ret
 104ca13:	80 fb 14 	cmp	bl, 20
 104ca16:	0f 85 47 03 00 00 	jne	839 <_runtime.typesEqual+0x813>
 104ca1c:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104ca24:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104ca28:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ca2c:	e8 bf f2 ff ff 	call	-3393 <_runtime.name.name>
 104ca31:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104ca36:	48 89 44 24 78 	mov	qword ptr [rsp + 120], rax
 104ca3b:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104ca40:	48 89 8c 24 08 01 00 00 	mov	qword ptr [rsp + 264], rcx
 104ca48:	48 8b 94 24 38 01 00 00 	mov	rdx, qword ptr [rsp + 312]
 104ca50:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 104ca54:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104ca58:	e8 93 f2 ff ff 	call	-3437 <_runtime.name.name>
 104ca5d:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104ca62:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104ca67:	74 18 	je	24 <_runtime.typesEqual+0x531>
 104ca69:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104ca71:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104ca79:	48 81 c4 28 01 00 00 	add	rsp, 296
 104ca80:	c3 	ret
 104ca81:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104ca89:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ca8d:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104ca92:	e8 59 56 fb ff 	call	-305575 <_runtime.memequal>
 104ca97:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104ca9c:	74 cb 	je	-53 <_runtime.typesEqual+0x519>
 104ca9e:	48 8b 94 24 30 01 00 00 	mov	rdx, qword ptr [rsp + 304]
 104caa6:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 104caaa:	48 8b b4 24 38 01 00 00 	mov	rsi, qword ptr [rsp + 312]
 104cab2:	48 39 5e 40 	cmp	qword ptr [rsi + 64], rbx
 104cab6:	0f 85 8f 02 00 00 	jne	655 <_runtime.typesEqual+0x7fb>
 104cabc:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 104cac1:	31 c0 	xor	eax, eax
 104cac3:	eb 27 	jmp	39 <_runtime.typesEqual+0x59c>
 104cac5:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 104caca:	48 8d 47 01 	lea	rax, [rdi + 1]
 104cace:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 104cad3:	4c 8b 84 24 38 01 00 00 	mov	r8, qword ptr [rsp + 312]
 104cadb:	4c 8b 8c 24 30 01 00 00 	mov	r9, qword ptr [rsp + 304]
 104cae3:	4c 89 ca 	mov	rdx, r9
 104cae6:	48 89 fb 	mov	rbx, rdi
 104cae9:	4c 89 c6 	mov	rsi, r8
 104caec:	48 39 d8 	cmp	rax, rbx
 104caef:	0f 8d 3e 02 00 00 	jge	574 <_runtime.typesEqual+0x7e3>
 104caf5:	48 8b 4a 40 	mov	rcx, qword ptr [rdx + 64]
 104caf9:	48 8b 7a 38 	mov	rdi, qword ptr [rdx + 56]
 104cafd:	48 39 c8 	cmp	rax, rcx
 104cb00:	0f 83 f1 08 00 00 	jae	2289 <_runtime.typesEqual+0xea7>
 104cb06:	4c 8d 04 c7 	lea	r8, [rdi + 8*rax]
 104cb0a:	48 8b 4e 40 	mov	rcx, qword ptr [rsi + 64]
 104cb0e:	4c 8b 4e 38 	mov	r9, qword ptr [rsi + 56]
 104cb12:	48 39 c8 	cmp	rax, rcx
 104cb15:	0f 83 d7 08 00 00 	jae	2263 <_runtime.typesEqual+0xea2>
 104cb1b:	4c 89 8c 24 f0 00 00 00 	mov	qword ptr [rsp + 240], r9
 104cb23:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 104cb28:	4c 89 84 24 a8 00 00 00 	mov	qword ptr [rsp + 168], r8
 104cb30:	48 89 bc 24 e8 00 00 00 	mov	qword ptr [rsp + 232], rdi
 104cb38:	8b 0c c7 	mov	ecx, dword ptr [rdi + 8*rax]
 104cb3b:	4c 89 04 24 	mov	qword ptr [rsp], r8
 104cb3f:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 104cb43:	e8 d8 e7 ff ff 	call	-6184 <_runtime.resolveNameOff>
 104cb48:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104cb4d:	48 8b 8c 24 f0 00 00 00 	mov	rcx, qword ptr [rsp + 240]
 104cb55:	48 8d 14 c1 	lea	rdx, [rcx + 8*rax]
 104cb59:	48 89 94 24 88 00 00 00 	mov	qword ptr [rsp + 136], rdx
 104cb61:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 104cb66:	48 89 9c 24 e0 00 00 00 	mov	qword ptr [rsp + 224], rbx
 104cb6e:	8b 34 c1 	mov	esi, dword ptr [rcx + 8*rax]
 104cb71:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104cb75:	89 74 24 08 	mov	dword ptr [rsp + 8], esi
 104cb79:	e8 a2 e7 ff ff 	call	-6238 <_runtime.resolveNameOff>
 104cb7e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104cb83:	48 89 84 24 d8 00 00 00 	mov	qword ptr [rsp + 216], rax
 104cb8b:	48 8b 8c 24 e0 00 00 00 	mov	rcx, qword ptr [rsp + 224]
 104cb93:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104cb97:	e8 54 f1 ff ff 	call	-3756 <_runtime.name.name>
 104cb9c:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104cba1:	48 89 44 24 70 	mov	qword ptr [rsp + 112], rax
 104cba6:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104cbab:	48 89 8c 24 d0 00 00 00 	mov	qword ptr [rsp + 208], rcx
 104cbb3:	48 8b 94 24 d8 00 00 00 	mov	rdx, qword ptr [rsp + 216]
 104cbbb:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104cbbf:	e8 2c f1 ff ff 	call	-3796 <_runtime.name.name>
 104cbc4:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104cbc9:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104cbce:	0f 85 47 01 00 00 	jne	327 <_runtime.typesEqual+0x7cb>
 104cbd4:	48 8b 8c 24 d0 00 00 00 	mov	rcx, qword ptr [rsp + 208]
 104cbdc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104cbe0:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104cbe5:	e8 06 55 fb ff 	call	-305914 <_runtime.memequal>
 104cbea:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104cbef:	0f 84 26 01 00 00 	je	294 <_runtime.typesEqual+0x7cb>
 104cbf5:	48 8b 84 24 e0 00 00 00 	mov	rax, qword ptr [rsp + 224]
 104cbfd:	48 89 04 24 	mov	qword ptr [rsp], rax
 104cc01:	e8 ba f1 ff ff 	call	-3654 <_runtime.name.pkgPath>
 104cc06:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104cc0b:	48 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], rax
 104cc13:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104cc18:	48 89 4c 24 70 	mov	qword ptr [rsp + 112], rcx
 104cc1d:	48 8b 94 24 d8 00 00 00 	mov	rdx, qword ptr [rsp + 216]
 104cc25:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104cc29:	e8 92 f1 ff ff 	call	-3694 <_runtime.name.pkgPath>
 104cc2e:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104cc33:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104cc38:	0f 85 c5 00 00 00 	jne	197 <_runtime.typesEqual+0x7b3>
 104cc3e:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104cc46:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104cc4a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104cc4f:	e8 9c 54 fb ff 	call	-306020 <_runtime.memequal>
 104cc54:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104cc59:	0f 84 a4 00 00 00 	je	164 <_runtime.typesEqual+0x7b3>
 104cc5f:	48 8b 44 24 58 	mov	rax, qword ptr [rsp + 88]
 104cc64:	48 8b 8c 24 e8 00 00 00 	mov	rcx, qword ptr [rsp + 232]
 104cc6c:	8b 4c c1 04 	mov	ecx, dword ptr [rcx + 8*rax + 4]
 104cc70:	48 8b 94 24 a8 00 00 00 	mov	rdx, qword ptr [rsp + 168]
 104cc78:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104cc7c:	89 4c 24 08 	mov	dword ptr [rsp + 8], ecx
 104cc80:	e8 9b e9 ff ff 	call	-5733 <_runtime.resolveTypeOff>
 104cc85:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104cc8a:	48 89 84 24 b0 00 00 00 	mov	qword ptr [rsp + 176], rax
 104cc92:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 104cc97:	48 8b 94 24 f0 00 00 00 	mov	rdx, qword ptr [rsp + 240]
 104cc9f:	8b 54 ca 04 	mov	edx, dword ptr [rdx + 8*rcx + 4]
 104cca3:	48 8b 9c 24 88 00 00 00 	mov	rbx, qword ptr [rsp + 136]
 104ccab:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104ccaf:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 104ccb3:	e8 68 e9 ff ff 	call	-5784 <_runtime.resolveTypeOff>
 104ccb8:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104ccbd:	48 8b 8c 24 b0 00 00 00 	mov	rcx, qword ptr [rsp + 176]
 104ccc5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ccc9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104ccce:	48 8b 84 24 40 01 00 00 	mov	rax, qword ptr [rsp + 320]
 104ccd6:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104ccdb:	e8 70 f8 ff ff 	call	-1936 <_runtime.typesEqual>
 104cce0:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104cce5:	0f 85 da fd ff ff 	jne	-550 <_runtime.typesEqual+0x575>
 104cceb:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104ccf3:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104ccfb:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cd02:	c3 	ret
 104cd03:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104cd0b:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cd13:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cd1a:	c3 	ret
 104cd1b:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104cd23:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cd2b:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cd32:	c3 	ret
 104cd33:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104cd3b:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cd43:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cd4a:	c3 	ret
 104cd4b:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104cd53:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cd5b:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cd62:	c3 	ret
 104cd63:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104cd6b:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104cd6f:	48 8b 94 24 38 01 00 00 	mov	rdx, qword ptr [rsp + 312]
 104cd77:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 104cd7b:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104cd7f:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104cd84:	48 8b 8c 24 40 01 00 00 	mov	rcx, qword ptr [rsp + 320]
 104cd8c:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104cd91:	e8 ba f7 ff ff 	call	-2118 <_runtime.typesEqual>
 104cd96:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104cd9b:	75 19 	jne	25 <_runtime.typesEqual+0x866>
 104cd9d:	31 c0 	xor	eax, eax
 104cd9f:	88 84 24 48 01 00 00 	mov	byte ptr [rsp + 328], al
 104cda6:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cdae:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cdb5:	c3 	ret
 104cdb6:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104cdbe:	48 8b 40 38 	mov	rax, qword ptr [rax + 56]
 104cdc2:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104cdca:	48 8b 49 38 	mov	rcx, qword ptr [rcx + 56]
 104cdce:	48 89 04 24 	mov	qword ptr [rsp], rax
 104cdd2:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104cdd7:	48 8b 84 24 40 01 00 00 	mov	rax, qword ptr [rsp + 320]
 104cddf:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104cde4:	e8 67 f7 ff ff 	call	-2201 <_runtime.typesEqual>
 104cde9:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104cdee:	eb af 	jmp	-81 <_runtime.typesEqual+0x84f>
 104cdf0:	80 fb 11 	cmp	bl, 17
 104cdf3:	74 66 	je	102 <_runtime.typesEqual+0x90b>
 104cdf5:	80 fb 12 	cmp	bl, 18
 104cdf8:	0f 85 28 06 00 00 	jne	1576 <_runtime.typesEqual+0xed6>
 104cdfe:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 104ce06:	48 8b 48 38 	mov	rcx, qword ptr [rax + 56]
 104ce0a:	48 8b 94 24 30 01 00 00 	mov	rdx, qword ptr [rsp + 304]
 104ce12:	48 39 4a 38 	cmp	qword ptr [rdx + 56], rcx
 104ce16:	74 19 	je	25 <_runtime.typesEqual+0x8e1>
 104ce18:	31 c0 	xor	eax, eax
 104ce1a:	88 84 24 48 01 00 00 	mov	byte ptr [rsp + 328], al
 104ce21:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104ce29:	48 81 c4 28 01 00 00 	add	rsp, 296
 104ce30:	c3 	ret
 104ce31:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 104ce35:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104ce39:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ce3d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104ce42:	48 8b 84 24 40 01 00 00 	mov	rax, qword ptr [rsp + 320]
 104ce4a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104ce4f:	e8 fc f6 ff ff 	call	-2308 <_runtime.typesEqual>
 104ce54:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104ce59:	eb bf 	jmp	-65 <_runtime.typesEqual+0x8ca>
 104ce5b:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104ce63:	48 8b 48 30 	mov	rcx, qword ptr [rax + 48]
 104ce67:	48 8b 94 24 38 01 00 00 	mov	rdx, qword ptr [rsp + 312]
 104ce6f:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 104ce73:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ce77:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104ce7c:	48 8b 8c 24 40 01 00 00 	mov	rcx, qword ptr [rsp + 320]
 104ce84:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104ce89:	e8 c2 f6 ff ff 	call	-2366 <_runtime.typesEqual>
 104ce8e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104ce93:	74 32 	je	50 <_runtime.typesEqual+0x977>
 104ce95:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 104ce9d:	48 8b 40 40 	mov	rax, qword ptr [rax + 64]
 104cea1:	48 8b 8c 24 30 01 00 00 	mov	rcx, qword ptr [rsp + 304]
 104cea9:	48 39 41 40 	cmp	qword ptr [rcx + 64], rax
 104cead:	0f 94 c0 	sete	al
 104ceb0:	88 84 24 48 01 00 00 	mov	byte ptr [rsp + 328], al
 104ceb7:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cebf:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cec6:	c3 	ret
 104cec7:	31 c0 	xor	eax, eax
 104cec9:	eb e5 	jmp	-27 <_runtime.typesEqual+0x960>
 104cecb:	80 fb 17 	cmp	bl, 23
 104cece:	0f 87 a3 00 00 00 	ja	163 <_runtime.typesEqual+0xa27>
 104ced4:	80 fb 16 	cmp	bl, 22
 104ced7:	75 4f 	jne	79 <_runtime.typesEqual+0x9d8>
 104ced9:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104cee1:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104cee5:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104ceed:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 104cef1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104cef5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104cefa:	48 8b 84 24 40 01 00 00 	mov	rax, qword ptr [rsp + 320]
 104cf02:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104cf07:	e8 44 f6 ff ff 	call	-2492 <_runtime.typesEqual>
 104cf0c:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104cf11:	88 84 24 48 01 00 00 	mov	byte ptr [rsp + 328], al
 104cf18:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cf20:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cf27:	c3 	ret
 104cf28:	48 8b 84 24 30 01 00 00 	mov	rax, qword ptr [rsp + 304]
 104cf30:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104cf34:	48 8b 8c 24 38 01 00 00 	mov	rcx, qword ptr [rsp + 312]
 104cf3c:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 104cf40:	48 89 04 24 	mov	qword ptr [rsp], rax
 104cf44:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104cf49:	48 8b 84 24 40 01 00 00 	mov	rax, qword ptr [rsp + 320]
 104cf51:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104cf56:	e8 f5 f5 ff ff 	call	-2571 <_runtime.typesEqual>
 104cf5b:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104cf60:	88 84 24 48 01 00 00 	mov	byte ptr [rsp + 328], al
 104cf67:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cf6f:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cf76:	c3 	ret
 104cf77:	80 fb 18 	cmp	bl, 24
 104cf7a:	75 18 	jne	24 <_runtime.typesEqual+0xa44>
 104cf7c:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104cf84:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104cf8c:	48 81 c4 28 01 00 00 	add	rsp, 296
 104cf93:	c3 	ret
 104cf94:	80 fb 19 	cmp	bl, 25
 104cf97:	0f 85 05 03 00 00 	jne	773 <_runtime.typesEqual+0xd52>
 104cf9d:	48 8b 84 24 38 01 00 00 	mov	rax, qword ptr [rsp + 312]
 104cfa5:	48 8b 48 40 	mov	rcx, qword ptr [rax + 64]
 104cfa9:	48 8b 94 24 30 01 00 00 	mov	rdx, qword ptr [rsp + 304]
 104cfb1:	48 39 4a 40 	cmp	qword ptr [rdx + 64], rcx
 104cfb5:	0f 85 cf 02 00 00 	jne	719 <_runtime.typesEqual+0xd3a>
 104cfbb:	48 8b 42 30 	mov	rax, qword ptr [rdx + 48]
 104cfbf:	48 89 04 24 	mov	qword ptr [rsp], rax
 104cfc3:	e8 28 ed ff ff 	call	-4824 <_runtime.name.name>
 104cfc8:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104cfcd:	48 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], rax
 104cfd5:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104cfda:	48 89 4c 24 78 	mov	qword ptr [rsp + 120], rcx
 104cfdf:	48 8b 94 24 38 01 00 00 	mov	rdx, qword ptr [rsp + 312]
 104cfe7:	48 8b 5a 30 	mov	rbx, qword ptr [rdx + 48]
 104cfeb:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104cfef:	e8 fc ec ff ff 	call	-4868 <_runtime.name.name>
 104cff4:	48 8b 44 24 78 	mov	rax, qword ptr [rsp + 120]
 104cff9:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104cffe:	74 18 	je	24 <_runtime.typesEqual+0xac8>
 104d000:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d008:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d010:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d017:	c3 	ret
 104d018:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104d020:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104d024:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104d029:	e8 c2 50 fb ff 	call	-307006 <_runtime.memequal>
 104d02e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104d033:	74 cb 	je	-53 <_runtime.typesEqual+0xab0>
 104d035:	48 8b 94 24 30 01 00 00 	mov	rdx, qword ptr [rsp + 304]
 104d03d:	48 8b 5a 40 	mov	rbx, qword ptr [rdx + 64]
 104d041:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 104d046:	48 8b b4 24 38 01 00 00 	mov	rsi, qword ptr [rsp + 312]
 104d04e:	31 c0 	xor	eax, eax
 104d050:	eb 27 	jmp	39 <_runtime.typesEqual+0xb29>
 104d052:	48 8b 7c 24 48 	mov	rdi, qword ptr [rsp + 72]
 104d057:	48 8d 47 01 	lea	rax, [rdi + 1]
 104d05b:	48 8b 7c 24 78 	mov	rdi, qword ptr [rsp + 120]
 104d060:	4c 8b 84 24 38 01 00 00 	mov	r8, qword ptr [rsp + 312]
 104d068:	4c 8b 8c 24 30 01 00 00 	mov	r9, qword ptr [rsp + 304]
 104d070:	4c 89 ca 	mov	rdx, r9
 104d073:	48 89 fb 	mov	rbx, rdi
 104d076:	4c 89 c6 	mov	rsi, r8
 104d079:	48 39 d8 	cmp	rax, rbx
 104d07c:	0f 8d f0 01 00 00 	jge	496 <_runtime.typesEqual+0xd22>
 104d082:	48 8b 4a 40 	mov	rcx, qword ptr [rdx + 64]
 104d086:	48 8b 7a 38 	mov	rdi, qword ptr [rdx + 56]
 104d08a:	48 39 c8 	cmp	rax, rcx
 104d08d:	0f 83 5a 03 00 00 	jae	858 <_runtime.typesEqual+0xe9d>
 104d093:	4c 8d 04 40 	lea	r8, [rax + 2*rax]
 104d097:	4c 8b 4e 38 	mov	r9, qword ptr [rsi + 56]
 104d09b:	48 8b 4e 40 	mov	rcx, qword ptr [rsi + 64]
 104d09f:	48 39 c8 	cmp	rax, rcx
 104d0a2:	0f 83 40 03 00 00 	jae	832 <_runtime.typesEqual+0xe98>
 104d0a8:	4c 89 8c 24 c8 00 00 00 	mov	qword ptr [rsp + 200], r9
 104d0b0:	48 89 bc 24 c0 00 00 00 	mov	qword ptr [rsp + 192], rdi
 104d0b8:	48 89 44 24 48 	mov	qword ptr [rsp + 72], rax
 104d0bd:	4c 89 44 24 70 	mov	qword ptr [rsp + 112], r8
 104d0c2:	4a 8b 04 c7 	mov	rax, qword ptr [rdi + 8*r8]
 104d0c6:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d0ca:	e8 21 ec ff ff 	call	-5087 <_runtime.name.name>
 104d0cf:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d0d4:	48 89 44 24 68 	mov	qword ptr [rsp + 104], rax
 104d0d9:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104d0de:	48 89 8c 24 08 01 00 00 	mov	qword ptr [rsp + 264], rcx
 104d0e6:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 104d0eb:	48 8b 9c 24 c8 00 00 00 	mov	rbx, qword ptr [rsp + 200]
 104d0f3:	48 8b 34 d3 	mov	rsi, qword ptr [rbx + 8*rdx]
 104d0f7:	48 89 34 24 	mov	qword ptr [rsp], rsi
 104d0fb:	e8 f0 eb ff ff 	call	-5136 <_runtime.name.name>
 104d100:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 104d105:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104d10a:	0f 85 4a 01 00 00 	jne	330 <_runtime.typesEqual+0xd0a>
 104d110:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104d118:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104d11c:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104d121:	e8 ca 4f fb ff 	call	-307254 <_runtime.memequal>
 104d126:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104d12b:	0f 84 29 01 00 00 	je	297 <_runtime.typesEqual+0xd0a>
 104d131:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104d136:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 104d13e:	48 8b 54 c1 08 	mov	rdx, qword ptr [rcx + 8*rax + 8]
 104d143:	48 8b 9c 24 c8 00 00 00 	mov	rbx, qword ptr [rsp + 200]
 104d14b:	48 8b 74 c3 08 	mov	rsi, qword ptr [rbx + 8*rax + 8]
 104d150:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104d154:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 104d159:	48 8b 94 24 40 01 00 00 	mov	rdx, qword ptr [rsp + 320]
 104d161:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104d166:	e8 e5 f3 ff ff 	call	-3099 <_runtime.typesEqual>
 104d16b:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104d170:	0f 84 cc 00 00 00 	je	204 <_runtime.typesEqual+0xcf2>
 104d176:	48 8b 44 24 70 	mov	rax, qword ptr [rsp + 112]
 104d17b:	48 8b 8c 24 c0 00 00 00 	mov	rcx, qword ptr [rsp + 192]
 104d183:	48 8b 14 c1 	mov	rdx, qword ptr [rcx + 8*rax]
 104d187:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104d18b:	e8 a0 eb ff ff 	call	-5216 <_runtime.name.tag>
 104d190:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104d195:	48 89 84 24 08 01 00 00 	mov	qword ptr [rsp + 264], rax
 104d19d:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104d1a2:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 104d1a7:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 104d1ac:	48 8b 9c 24 c8 00 00 00 	mov	rbx, qword ptr [rsp + 200]
 104d1b4:	48 8b 34 d3 	mov	rsi, qword ptr [rbx + 8*rdx]
 104d1b8:	48 89 34 24 	mov	qword ptr [rsp], rsi
 104d1bc:	e8 6f eb ff ff 	call	-5265 <_runtime.name.tag>
 104d1c1:	48 8b 44 24 68 	mov	rax, qword ptr [rsp + 104]
 104d1c6:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104d1cb:	75 5d 	jne	93 <_runtime.typesEqual+0xcda>
 104d1cd:	48 8b 8c 24 08 01 00 00 	mov	rcx, qword ptr [rsp + 264]
 104d1d5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104d1d9:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104d1de:	e8 0d 4f fb ff 	call	-307443 <_runtime.memequal>
 104d1e3:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104d1e8:	74 40 	je	64 <_runtime.typesEqual+0xcda>
 104d1ea:	48 8b 54 24 70 	mov	rdx, qword ptr [rsp + 112]
 104d1ef:	48 8b 9c 24 c0 00 00 00 	mov	rbx, qword ptr [rsp + 192]
 104d1f7:	48 8b 5c d3 10 	mov	rbx, qword ptr [rbx + 8*rdx + 16]
 104d1fc:	48 8b b4 24 c8 00 00 00 	mov	rsi, qword ptr [rsp + 200]
 104d204:	48 8b 54 d6 10 	mov	rdx, qword ptr [rsi + 8*rdx + 16]
 104d209:	48 39 d3 	cmp	rbx, rdx
 104d20c:	0f 84 40 fe ff ff 	je	-448 <_runtime.typesEqual+0xb02>
 104d212:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d21a:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d222:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d229:	c3 	ret
 104d22a:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d232:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d23a:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d241:	c3 	ret
 104d242:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d24a:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d252:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d259:	c3 	ret
 104d25a:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d262:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d26a:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d271:	c3 	ret
 104d272:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104d27a:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d282:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d289:	c3 	ret
 104d28a:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d292:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d29a:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d2a1:	c3 	ret
 104d2a2:	80 fb 1a 	cmp	bl, 26
 104d2a5:	0f 84 d1 fc ff ff 	je	-815 <_runtime.typesEqual+0xa2c>
 104d2ab:	e9 76 01 00 00 	jmp	374 <_runtime.typesEqual+0xed6>
 104d2b0:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104d2b8:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d2c0:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d2c7:	c3 	ret
 104d2c8:	48 85 c9 	test	rcx, rcx
 104d2cb:	74 05 	je	5 <_runtime.typesEqual+0xd82>
 104d2cd:	48 85 c0 	test	rax, rax
 104d2d0:	75 18 	jne	24 <_runtime.typesEqual+0xd9a>
 104d2d2:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d2da:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d2e2:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d2e9:	c3 	ret
 104d2ea:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 104d2f2:	8b 01 	mov	eax, dword ptr [rcx]
 104d2f4:	48 8b 8c 24 30 01 00 00 	mov	rcx, qword ptr [rsp + 304]
 104d2fc:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104d300:	89 44 24 08 	mov	dword ptr [rsp + 8], eax
 104d304:	e8 17 e0 ff ff 	call	-8169 <_runtime.resolveNameOff>
 104d309:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d30e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d312:	e8 d9 e9 ff ff 	call	-5671 <_runtime.name.name>
 104d317:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d31c:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104d321:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104d326:	48 89 8c 24 b8 00 00 00 	mov	qword ptr [rsp + 184], rcx
 104d32e:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 104d336:	8b 12 	mov	edx, dword ptr [rdx]
 104d338:	48 8b 9c 24 38 01 00 00 	mov	rbx, qword ptr [rsp + 312]
 104d340:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104d344:	89 54 24 08 	mov	dword ptr [rsp + 8], edx
 104d348:	e8 d3 df ff ff 	call	-8237 <_runtime.resolveNameOff>
 104d34d:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d352:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d356:	e8 95 e9 ff ff 	call	-5739 <_runtime.name.name>
 104d35b:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104d360:	48 39 44 24 10 	cmp	qword ptr [rsp + 16], rax
 104d365:	75 21 	jne	33 <_runtime.typesEqual+0xe38>
 104d367:	48 8b 8c 24 b8 00 00 00 	mov	rcx, qword ptr [rsp + 184]
 104d36f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104d373:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104d378:	e8 73 4d fb ff 	call	-307853 <_runtime.memequal>
 104d37d:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104d382:	0f 85 9a f3 ff ff 	jne	-3174 <_runtime.typesEqual+0x1d2>
 104d388:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d390:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d398:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d39f:	c3 	ret
 104d3a0:	c6 84 24 48 01 00 00 00 	mov	byte ptr [rsp + 328], 0
 104d3a8:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d3b0:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d3b7:	c3 	ret
 104d3b8:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104d3c0:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d3c8:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d3cf:	c3 	ret
 104d3d0:	c6 84 24 48 01 00 00 01 	mov	byte ptr [rsp + 328], 1
 104d3d8:	48 8b ac 24 20 01 00 00 	mov	rbp, qword ptr [rsp + 288]
 104d3e0:	48 81 c4 28 01 00 00 	add	rsp, 296
 104d3e7:	c3 	ret
 104d3e8:	e8 63 5f 00 00 	call	24419 <_runtime.panicIndex>
 104d3ed:	e8 5e 5f 00 00 	call	24414 <_runtime.panicIndex>
 104d3f2:	e8 59 5f 00 00 	call	24409 <_runtime.panicIndex>
 104d3f7:	e8 54 5f 00 00 	call	24404 <_runtime.panicIndex>
 104d3fc:	48 89 f1 	mov	rcx, rsi
 104d3ff:	e8 4c 5f 00 00 	call	24396 <_runtime.panicIndex>
 104d404:	89 f8 	mov	eax, edi
 104d406:	48 89 f1 	mov	rcx, rsi
 104d409:	e8 a2 5f 00 00 	call	24482 <_runtime.panicSliceB>
 104d40e:	89 f0 	mov	eax, esi
 104d410:	e8 9b 5f 00 00 	call	24475 <_runtime.panicSliceB>
 104d415:	89 f1 	mov	ecx, esi
 104d417:	e8 34 5f 00 00 	call	24372 <_runtime.panicIndex>
 104d41c:	ba 00 00 10 00 	mov	edx, 1048576
 104d421:	e8 4a 5f 00 00 	call	24394 <_runtime.panicSliceAlen>
 104d426:	e8 75 d0 fd ff 	call	-143243 <_runtime.printlock>
 104d42b:	48 8d 05 9f 84 02 00 	lea	rax, [rip + 165023]
 104d432:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d436:	48 c7 44 24 08 1e 00 00 00 	mov	qword ptr [rsp + 8], 30
 104d43f:	e8 9c d9 fd ff 	call	-140900 <_runtime.printstring>
 104d444:	0f b6 44 24 2b 	movzx	eax, byte ptr [rsp + 43]
 104d449:	83 e0 1f 	and	eax, 31
 104d44c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d450:	e8 cb d6 fd ff 	call	-141621 <_runtime.printuint>
 104d455:	e8 d6 d2 fd ff 	call	-142634 <_runtime.printnl>
 104d45a:	e8 c1 d0 fd ff 	call	-143167 <_runtime.printunlock>
 104d45f:	48 8d 05 f2 80 02 00 	lea	rax, [rip + 164082]
 104d466:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d46a:	48 c7 44 24 08 1d 00 00 00 	mov	qword ptr [rsp + 8], 29
 104d473:	e8 e8 b8 fd ff 	call	-149272 <_runtime.throw>
 104d478:	90 	nop
 104d479:	e8 52 37 00 00 	call	14162 <_runtime.morestack_noctxt>
 104d47e:	e9 cd f0 ff ff 	jmp	-3891 <_runtime.typesEqual>
 104d483:	cc 	int3
 104d484:	cc 	int3
 104d485:	cc 	int3
 104d486:	cc 	int3
 104d487:	cc 	int3
 104d488:	cc 	int3
 104d489:	cc 	int3
 104d48a:	cc 	int3
 104d48b:	cc 	int3
 104d48c:	cc 	int3
 104d48d:	cc 	int3
 104d48e:	cc 	int3
 104d48f:	cc 	int3

_runtime.cgoCheckWriteBarrier.func1:
 104d490:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104d499:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104d49d:	0f 86 97 00 00 00 	jbe	151 <_runtime.cgoCheckWriteBarrier.func1+0xaa>
 104d4a3:	48 83 ec 28 	sub	rsp, 40
 104d4a7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104d4ac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104d4b1:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104d4b5:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104d4b9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104d4be:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104d4c3:	e8 d8 cf fd ff 	call	-143400 <_runtime.printlock>
 104d4c8:	48 8d 05 91 6e 02 00 	lea	rax, [rip + 159377]
 104d4cf:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d4d3:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 104d4dc:	e8 ff d8 fd ff 	call	-141057 <_runtime.printstring>
 104d4e1:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d4e6:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d4ea:	e8 a1 d7 fd ff 	call	-141407 <_runtime.printhex>
 104d4ef:	48 8d 05 4b 69 02 00 	lea	rax, [rip + 158027]
 104d4f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d4fa:	48 c7 44 24 08 12 00 00 00 	mov	qword ptr [rsp + 8], 18
 104d503:	e8 d8 d8 fd ff 	call	-141096 <_runtime.printstring>
 104d508:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104d50d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d511:	e8 7a d7 fd ff 	call	-141446 <_runtime.printhex>
 104d516:	e8 15 d2 fd ff 	call	-142827 <_runtime.printnl>
 104d51b:	e8 00 d0 fd ff 	call	-143360 <_runtime.printunlock>
 104d520:	48 8d 05 7b 8d 02 00 	lea	rax, [rip + 167291]
 104d527:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d52b:	48 c7 44 24 08 24 00 00 00 	mov	qword ptr [rsp + 8], 36
 104d534:	e8 27 b8 fd ff 	call	-149465 <_runtime.throw>
 104d539:	90 	nop
 104d53a:	e8 f1 35 00 00 	call	13809 <_runtime.morestack>
 104d53f:	e9 4c ff ff ff 	jmp	-180 <_runtime.cgoCheckWriteBarrier.func1>
 104d544:	cc 	int3
 104d545:	cc 	int3
 104d546:	cc 	int3
 104d547:	cc 	int3
 104d548:	cc 	int3
 104d549:	cc 	int3
 104d54a:	cc 	int3
 104d54b:	cc 	int3
 104d54c:	cc 	int3
 104d54d:	cc 	int3
 104d54e:	cc 	int3
 104d54f:	cc 	int3

_runtime.cgoCheckTypedBlock.func1:
 104d550:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104d559:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104d55d:	76 40 	jbe	64 <_runtime.cgoCheckTypedBlock.func1+0x4f>
 104d55f:	48 83 ec 28 	sub	rsp, 40
 104d563:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104d568:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104d56d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104d571:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104d575:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 104d579:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104d57d:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104d581:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104d586:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104d58b:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 104d590:	e8 6b 5e fb ff 	call	-303509 <_runtime.cgoCheckUsingType>
 104d595:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104d59a:	48 83 c4 28 	add	rsp, 40
 104d59e:	c3 	ret
 104d59f:	e8 8c 35 00 00 	call	13708 <_runtime.morestack>
 104d5a4:	eb aa 	jmp	-86 <_runtime.cgoCheckTypedBlock.func1>
 104d5a6:	cc 	int3
 104d5a7:	cc 	int3
 104d5a8:	cc 	int3
 104d5a9:	cc 	int3
 104d5aa:	cc 	int3
 104d5ab:	cc 	int3
 104d5ac:	cc 	int3
 104d5ad:	cc 	int3
 104d5ae:	cc 	int3
 104d5af:	cc 	int3

_runtime.chansend.func1:
 104d5b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104d5b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104d5bd:	76 2b 	jbe	43 <_runtime.chansend.func1+0x3a>
 104d5bf:	48 83 ec 10 	sub	rsp, 16
 104d5c3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104d5c8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104d5cd:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104d5d1:	84 00 	test	byte ptr [rax], al
 104d5d3:	48 83 c0 58 	add	rax, 88
 104d5d7:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d5db:	e8 30 ad fb ff 	call	-283344 <_runtime.unlock>
 104d5e0:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104d5e5:	48 83 c4 10 	add	rsp, 16
 104d5e9:	c3 	ret
 104d5ea:	e8 41 35 00 00 	call	13633 <_runtime.morestack>
 104d5ef:	eb bf 	jmp	-65 <_runtime.chansend.func1>
 104d5f1:	cc 	int3
 104d5f2:	cc 	int3
 104d5f3:	cc 	int3
 104d5f4:	cc 	int3
 104d5f5:	cc 	int3
 104d5f6:	cc 	int3
 104d5f7:	cc 	int3
 104d5f8:	cc 	int3
 104d5f9:	cc 	int3
 104d5fa:	cc 	int3
 104d5fb:	cc 	int3
 104d5fc:	cc 	int3
 104d5fd:	cc 	int3
 104d5fe:	cc 	int3
 104d5ff:	cc 	int3

_runtime.chanrecv.func1:
 104d600:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104d609:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104d60d:	76 2b 	jbe	43 <_runtime.chanrecv.func1+0x3a>
 104d60f:	48 83 ec 10 	sub	rsp, 16
 104d613:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104d618:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104d61d:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104d621:	84 00 	test	byte ptr [rax], al
 104d623:	48 83 c0 58 	add	rax, 88
 104d627:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d62b:	e8 e0 ac fb ff 	call	-283424 <_runtime.unlock>
 104d630:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104d635:	48 83 c4 10 	add	rsp, 16
 104d639:	c3 	ret
 104d63a:	e8 f1 34 00 00 	call	13553 <_runtime.morestack>
 104d63f:	eb bf 	jmp	-65 <_runtime.chanrecv.func1>
 104d641:	cc 	int3
 104d642:	cc 	int3
 104d643:	cc 	int3
 104d644:	cc 	int3
 104d645:	cc 	int3
 104d646:	cc 	int3
 104d647:	cc 	int3
 104d648:	cc 	int3
 104d649:	cc 	int3
 104d64a:	cc 	int3
 104d64b:	cc 	int3
 104d64c:	cc 	int3
 104d64d:	cc 	int3
 104d64e:	cc 	int3
 104d64f:	cc 	int3

_runtime.debugCallCheck.func1:
 104d650:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104d659:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104d65d:	0f 86 e5 03 00 00 	jbe	997 <_runtime.debugCallCheck.func1+0x3f8>
 104d663:	48 83 ec 70 	sub	rsp, 112
 104d667:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 104d66c:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 104d671:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104d675:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 104d67a:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104d67e:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 104d683:	48 8b 11 	mov	rdx, qword ptr [rcx]
 104d686:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104d68a:	e8 e1 44 ff ff 	call	-47903 <_runtime.findfunc>
 104d68f:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d694:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104d699:	48 85 c9 	test	rcx, rcx
 104d69c:	75 38 	jne	56 <_runtime.debugCallCheck.func1+0x86>
 104d69e:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 104d6a3:	48 c7 47 08 1a 00 00 00 	mov	qword ptr [rdi + 8], 26
 104d6ab:	83 3d 4e a2 0a 00 00 	cmp	dword ptr [rip + 696910], 0
 104d6b2:	75 14 	jne	20 <_runtime.debugCallCheck.func1+0x78>
 104d6b4:	48 8d 05 08 77 02 00 	lea	rax, [rip + 161544]
 104d6bb:	48 89 07 	mov	qword ptr [rdi], rax
 104d6be:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104d6c3:	48 83 c4 70 	add	rsp, 112
 104d6c7:	c3 	ret
 104d6c8:	48 8d 05 f4 76 02 00 	lea	rax, [rip + 161524]
 104d6cf:	e8 0c 53 00 00 	call	21260 <_runtime.gcWriteBarrier>
 104d6d4:	eb e8 	jmp	-24 <_runtime.debugCallCheck.func1+0x6e>
 104d6d6:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 104d6db:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 104d6e0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104d6e4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104d6e9:	e8 d2 4b ff ff 	call	-46126 <_runtime.funcname>
 104d6ee:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104d6f3:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104d6f8:	48 83 f9 0c 	cmp	rcx, 12
 104d6fc:	0f 8f f2 01 00 00 	jg	498 <_runtime.debugCallCheck.func1+0x2a4>
 104d702:	48 83 f9 0b 	cmp	rcx, 11
 104d706:	0f 85 92 01 00 00 	jne	402 <_runtime.debugCallCheck.func1+0x24e>
 104d70c:	48 8b 10 	mov	rdx, qword ptr [rax]
 104d70f:	48 bb 64 65 62 75 67 43 61 6c 	movabs	rbx, 7809597340467225956
 104d719:	48 39 da 	cmp	rdx, rbx
 104d71c:	75 1f 	jne	31 <_runtime.debugCallCheck.func1+0xed>
 104d71e:	66 81 78 08 6c 33 	cmp	word ptr [rax + 8], 13164
 104d724:	0f 85 6c 01 00 00 	jne	364 <_runtime.debugCallCheck.func1+0x246>
 104d72a:	80 78 0a 32 	cmp	byte ptr [rax + 10], 50
 104d72e:	75 0a 	jne	10 <_runtime.debugCallCheck.func1+0xea>
 104d730:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104d735:	48 83 c4 70 	add	rsp, 112
 104d739:	c3 	ret
 104d73a:	48 39 da 	cmp	rdx, rbx
 104d73d:	75 0e 	jne	14 <_runtime.debugCallCheck.func1+0xfd>
 104d73f:	66 81 78 08 6c 36 	cmp	word ptr [rax + 8], 13932
 104d745:	75 06 	jne	6 <_runtime.debugCallCheck.func1+0xfd>
 104d747:	80 78 0a 34 	cmp	byte ptr [rax + 10], 52
 104d74b:	74 e3 	je	-29 <_runtime.debugCallCheck.func1+0xe0>
 104d74d:	48 83 f9 08 	cmp	rcx, 8
 104d751:	0f 8f 17 01 00 00 	jg	279 <_runtime.debugCallCheck.func1+0x21e>
 104d757:	31 c0 	xor	eax, eax
 104d759:	84 c0 	test	al, al
 104d75b:	74 38 	je	56 <_runtime.debugCallCheck.func1+0x145>
 104d75d:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 104d762:	48 c7 47 08 1f 00 00 00 	mov	qword ptr [rdi + 8], 31
 104d76a:	83 3d 8f a1 0a 00 00 	cmp	dword ptr [rip + 696719], 0
 104d771:	75 14 	jne	20 <_runtime.debugCallCheck.func1+0x137>
 104d773:	48 8d 05 f1 81 02 00 	lea	rax, [rip + 164337]
 104d77a:	48 89 07 	mov	qword ptr [rdi], rax
 104d77d:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104d782:	48 83 c4 70 	add	rsp, 112
 104d786:	c3 	ret
 104d787:	48 8d 05 dd 81 02 00 	lea	rax, [rip + 164317]
 104d78e:	e8 4d 52 00 00 	call	21069 <_runtime.gcWriteBarrier>
 104d793:	eb e8 	jmp	-24 <_runtime.debugCallCheck.func1+0x12d>
 104d795:	48 8b 44 24 60 	mov	rax, qword ptr [rsp + 96]
 104d79a:	48 8b 08 	mov	rcx, qword ptr [rax]
 104d79d:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 104d7a2:	48 39 0a 	cmp	qword ptr [rdx], rcx
 104d7a5:	0f 85 86 00 00 00 	jne	134 <_runtime.debugCallCheck.func1+0x1e1>
 104d7ab:	b8 ff ff ff ff 	mov	eax, 4294967295
 104d7b0:	89 44 24 34 	mov	dword ptr [rsp + 52], eax
 104d7b4:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104d7b8:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104d7bd:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104d7c2:	c6 44 24 10 02 	mov	byte ptr [rsp + 16], 2
 104d7c7:	e8 b4 51 ff ff 	call	-44620 <_runtime.funcdata>
 104d7cc:	8b 44 24 34 	mov	eax, dword ptr [rsp + 52]
 104d7d0:	83 f8 ff 	cmp	eax, -1
 104d7d3:	b9 00 00 00 00 	mov	ecx, 0
 104d7d8:	0f 44 c1 	cmove	eax, ecx
 104d7db:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104d7e0:	48 83 f9 00 	cmp	rcx, 0
 104d7e4:	83 f8 fe 	cmp	eax, -2
 104d7e7:	75 38 	jne	56 <_runtime.debugCallCheck.func1+0x1d1>
 104d7e9:	48 8b 7c 24 58 	mov	rdi, qword ptr [rsp + 88]
 104d7ee:	48 c7 47 08 16 00 00 00 	mov	qword ptr [rdi + 8], 22
 104d7f6:	83 3d 03 a1 0a 00 00 	cmp	dword ptr [rip + 696579], 0
 104d7fd:	75 14 	jne	20 <_runtime.debugCallCheck.func1+0x1c3>
 104d7ff:	48 8d 05 56 6d 02 00 	lea	rax, [rip + 159062]
 104d806:	48 89 07 	mov	qword ptr [rdi], rax
 104d809:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104d80e:	48 83 c4 70 	add	rsp, 112
 104d812:	c3 	ret
 104d813:	48 8d 05 42 6d 02 00 	lea	rax, [rip + 159042]
 104d81a:	e8 c1 51 00 00 	call	20929 <_runtime.gcWriteBarrier>
 104d81f:	eb e8 	jmp	-24 <_runtime.debugCallCheck.func1+0x1b9>
 104d821:	48 83 f9 00 	cmp	rcx, 0
 104d825:	74 c2 	je	-62 <_runtime.debugCallCheck.func1+0x199>
 104d827:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104d82c:	48 83 c4 70 	add	rsp, 112
 104d830:	c3 	ret
 104d831:	48 ff c9 	dec	rcx
 104d834:	48 89 08 	mov	qword ptr [rax], rcx
 104d837:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104d83b:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104d840:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104d845:	c7 44 24 10 00 00 00 00 	mov	dword ptr [rsp + 16], 0
 104d84d:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104d852:	48 c7 44 24 20 00 00 00 00 	mov	qword ptr [rsp + 32], 0
 104d85b:	e8 70 50 ff ff 	call	-44944 <_runtime.pcdatavalue>
 104d860:	8b 44 24 28 	mov	eax, dword ptr [rsp + 40]
 104d864:	48 8b 54 24 48 	mov	rdx, qword ptr [rsp + 72]
 104d869:	e9 42 ff ff ff 	jmp	-190 <_runtime.debugCallCheck.func1+0x160>
 104d86e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d872:	48 8d 05 de 57 02 00 	lea	rax, [rip + 153566]
 104d879:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104d87e:	48 c7 44 24 10 08 00 00 00 	mov	qword ptr [rsp + 16], 8
 104d887:	e8 64 48 fb ff 	call	-309148 <_runtime.memequal>
 104d88c:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104d891:	e9 c3 fe ff ff 	jmp	-317 <_runtime.debugCallCheck.func1+0x109>
 104d896:	48 39 da 	cmp	rdx, rbx
 104d899:	e9 9f fe ff ff 	jmp	-353 <_runtime.debugCallCheck.func1+0xed>
 104d89e:	48 83 f9 0c 	cmp	rcx, 12
 104d8a2:	0f 85 a5 fe ff ff 	jne	-347 <_runtime.debugCallCheck.func1+0xfd>
 104d8a8:	48 8b 10 	mov	rdx, qword ptr [rax]
 104d8ab:	48 bb 64 65 62 75 67 43 61 6c 	movabs	rbx, 7809597340467225956
 104d8b5:	48 39 da 	cmp	rdx, rbx
 104d8b8:	75 10 	jne	16 <_runtime.debugCallCheck.func1+0x27a>
 104d8ba:	81 78 08 6c 31 32 38 	cmp	dword ptr [rax + 8], 942813548
 104d8c1:	0f 84 69 fe ff ff 	je	-407 <_runtime.debugCallCheck.func1+0xe0>
 104d8c7:	48 39 da 	cmp	rdx, rbx
 104d8ca:	75 10 	jne	16 <_runtime.debugCallCheck.func1+0x28c>
 104d8cc:	81 78 08 6c 32 35 36 	cmp	dword ptr [rax + 8], 909455980
 104d8d3:	0f 84 57 fe ff ff 	je	-425 <_runtime.debugCallCheck.func1+0xe0>
 104d8d9:	48 39 da 	cmp	rdx, rbx
 104d8dc:	0f 85 6b fe ff ff 	jne	-405 <_runtime.debugCallCheck.func1+0xfd>
 104d8e2:	81 78 08 6c 35 31 32 	cmp	dword ptr [rax + 8], 842085740
 104d8e9:	0f 84 41 fe ff ff 	je	-447 <_runtime.debugCallCheck.func1+0xe0>
 104d8ef:	e9 59 fe ff ff 	jmp	-423 <_runtime.debugCallCheck.func1+0xfd>
 104d8f4:	48 83 f9 0d 	cmp	rcx, 13
 104d8f8:	74 7c 	je	124 <_runtime.debugCallCheck.func1+0x326>
 104d8fa:	48 83 f9 0e 	cmp	rcx, 14
 104d8fe:	0f 85 49 fe ff ff 	jne	-439 <_runtime.debugCallCheck.func1+0xfd>
 104d904:	48 8b 10 	mov	rdx, qword ptr [rax]
 104d907:	48 bb 64 65 62 75 67 43 61 6c 	movabs	rbx, 7809597340467225956
 104d911:	48 39 da 	cmp	rdx, rbx
 104d914:	75 18 	jne	24 <_runtime.debugCallCheck.func1+0x2de>
 104d916:	81 78 08 6c 31 36 33 	cmp	dword ptr [rax + 8], 859189612
 104d91d:	75 52 	jne	82 <_runtime.debugCallCheck.func1+0x321>
 104d91f:	66 81 78 0c 38 34 	cmp	word ptr [rax + 12], 13368
 104d925:	0f 84 05 fe ff ff 	je	-507 <_runtime.debugCallCheck.func1+0xe0>
 104d92b:	48 39 da 	cmp	rdx, rbx
 104d92e:	75 18 	jne	24 <_runtime.debugCallCheck.func1+0x2f8>
 104d930:	81 78 08 6c 33 32 37 	cmp	dword ptr [rax + 8], 926036844
 104d937:	75 33 	jne	51 <_runtime.debugCallCheck.func1+0x31c>
 104d939:	66 81 78 0c 36 38 	cmp	word ptr [rax + 12], 14390
 104d93f:	0f 84 eb fd ff ff 	je	-533 <_runtime.debugCallCheck.func1+0xe0>
 104d945:	48 39 da 	cmp	rdx, rbx
 104d948:	0f 85 ff fd ff ff 	jne	-513 <_runtime.debugCallCheck.func1+0xfd>
 104d94e:	81 78 08 6c 36 35 35 	cmp	dword ptr [rax + 8], 892679788
 104d955:	0f 85 f2 fd ff ff 	jne	-526 <_runtime.debugCallCheck.func1+0xfd>
 104d95b:	66 81 78 0c 33 36 	cmp	word ptr [rax + 12], 13875
 104d961:	0f 84 c9 fd ff ff 	je	-567 <_runtime.debugCallCheck.func1+0xe0>
 104d967:	e9 e1 fd ff ff 	jmp	-543 <_runtime.debugCallCheck.func1+0xfd>
 104d96c:	48 39 da 	cmp	rdx, rbx
 104d96f:	eb d7 	jmp	-41 <_runtime.debugCallCheck.func1+0x2f8>
 104d971:	48 39 da 	cmp	rdx, rbx
 104d974:	eb b8 	jmp	-72 <_runtime.debugCallCheck.func1+0x2de>
 104d976:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104d97b:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104d980:	48 89 04 24 	mov	qword ptr [rsp], rax
 104d984:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104d989:	48 8d 15 b5 5d 02 00 	lea	rdx, [rip + 155061]
 104d990:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 104d995:	48 c7 44 24 18 0d 00 00 00 	mov	qword ptr [rsp + 24], 13
 104d99e:	e8 ed 44 fb ff 	call	-310035 <_runtime.cmpstring>
 104d9a3:	48 83 7c 24 20 00 	cmp	qword ptr [rsp + 32], 0
 104d9a9:	7f 54 	jg	84 <_runtime.debugCallCheck.func1+0x3af>
 104d9ab:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104d9b0:	48 8b 11 	mov	rdx, qword ptr [rcx]
 104d9b3:	48 bb 64 65 62 75 67 43 61 6c 	movabs	rbx, 7809597340467225956
 104d9bd:	48 39 da 	cmp	rdx, rbx
 104d9c0:	75 16 	jne	22 <_runtime.debugCallCheck.func1+0x388>
 104d9c2:	81 79 08 6c 31 30 32 	cmp	dword ptr [rcx + 8], 842019180
 104d9c9:	75 2f 	jne	47 <_runtime.debugCallCheck.func1+0x3aa>
 104d9cb:	80 79 0c 34 	cmp	byte ptr [rcx + 12], 52
 104d9cf:	0f 84 5b fd ff ff 	je	-677 <_runtime.debugCallCheck.func1+0xe0>
 104d9d5:	48 39 da 	cmp	rdx, rbx
 104d9d8:	75 13 	jne	19 <_runtime.debugCallCheck.func1+0x39d>
 104d9da:	81 79 08 6c 32 30 34 	cmp	dword ptr [rcx + 8], 875573868
 104d9e1:	75 0a 	jne	10 <_runtime.debugCallCheck.func1+0x39d>
 104d9e3:	80 79 0c 38 	cmp	byte ptr [rcx + 12], 56
 104d9e7:	0f 84 43 fd ff ff 	je	-701 <_runtime.debugCallCheck.func1+0xe0>
 104d9ed:	48 89 c8 	mov	rax, rcx
 104d9f0:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 104d9f5:	e9 53 fd ff ff 	jmp	-685 <_runtime.debugCallCheck.func1+0xfd>
 104d9fa:	48 39 da 	cmp	rdx, rbx
 104d9fd:	eb d9 	jmp	-39 <_runtime.debugCallCheck.func1+0x388>
 104d9ff:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104da04:	48 8b 11 	mov	rdx, qword ptr [rcx]
 104da07:	48 bb 64 65 62 75 67 43 61 6c 	movabs	rbx, 7809597340467225956
 104da11:	48 39 da 	cmp	rdx, rbx
 104da14:	75 16 	jne	22 <_runtime.debugCallCheck.func1+0x3dc>
 104da16:	81 79 08 6c 34 30 39 	cmp	dword ptr [rcx + 8], 959460460
 104da1d:	75 24 	jne	36 <_runtime.debugCallCheck.func1+0x3f3>
 104da1f:	80 79 0c 36 	cmp	byte ptr [rcx + 12], 54
 104da23:	0f 84 07 fd ff ff 	je	-761 <_runtime.debugCallCheck.func1+0xe0>
 104da29:	48 39 da 	cmp	rdx, rbx
 104da2c:	75 bf 	jne	-65 <_runtime.debugCallCheck.func1+0x39d>
 104da2e:	81 79 08 6c 38 31 39 	cmp	dword ptr [rcx + 8], 959527020
 104da35:	75 b6 	jne	-74 <_runtime.debugCallCheck.func1+0x39d>
 104da37:	80 79 0c 32 	cmp	byte ptr [rcx + 12], 50
 104da3b:	0f 84 ef fc ff ff 	je	-785 <_runtime.debugCallCheck.func1+0xe0>
 104da41:	eb aa 	jmp	-86 <_runtime.debugCallCheck.func1+0x39d>
 104da43:	48 39 da 	cmp	rdx, rbx
 104da46:	eb e4 	jmp	-28 <_runtime.debugCallCheck.func1+0x3dc>
 104da48:	e8 e3 30 00 00 	call	12515 <_runtime.morestack>
 104da4d:	e9 fe fb ff ff 	jmp	-1026 <_runtime.debugCallCheck.func1>
 104da52:	cc 	int3
 104da53:	cc 	int3
 104da54:	cc 	int3
 104da55:	cc 	int3
 104da56:	cc 	int3
 104da57:	cc 	int3
 104da58:	cc 	int3
 104da59:	cc 	int3
 104da5a:	cc 	int3
 104da5b:	cc 	int3
 104da5c:	cc 	int3
 104da5d:	cc 	int3
 104da5e:	cc 	int3
 104da5f:	cc 	int3

_runtime.debugCallWrap.func1:
 104da60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104da69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104da6d:	76 4a 	jbe	74 <_runtime.debugCallWrap.func1+0x59>
 104da6f:	48 83 ec 20 	sub	rsp, 32
 104da73:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104da78:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104da7d:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104da82:	80 38 00 	cmp	byte ptr [rax], 0
 104da85:	74 0a 	je	10 <_runtime.debugCallWrap.func1+0x31>
 104da87:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104da8c:	48 83 c4 20 	add	rsp, 32
 104da90:	c3 	ret
 104da91:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104da96:	48 89 04 24 	mov	qword ptr [rsp], rax
 104da9a:	e8 71 b2 fd ff 	call	-150927 <_runtime.gorecover>
 104da9f:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104daa4:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104daa9:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104daad:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104dab2:	e8 59 58 00 00 	call	22617 <_runtime.debugCallPanicked>
 104dab7:	eb ce 	jmp	-50 <_runtime.debugCallWrap.func1+0x27>
 104dab9:	e8 12 31 00 00 	call	12562 <_runtime.morestack_noctxt>
 104dabe:	eb a0 	jmp	-96 <_runtime.debugCallWrap.func1>

_runtime.mallocgc.func1:
 104dac0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104dac9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104dacd:	76 4e 	jbe	78 <_runtime.mallocgc.func1+0x5d>
 104dacf:	48 83 ec 28 	sub	rsp, 40
 104dad3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104dad8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104dadd:	0f b6 42 10 	movzx	eax, byte ptr [rdx + 16]
 104dae1:	0f b6 4a 11 	movzx	ecx, byte ptr [rdx + 17]
 104dae5:	48 8b 5a 18 	mov	rbx, qword ptr [rdx + 24]
 104dae9:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 104daee:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104daf2:	48 8b 12 	mov	rdx, qword ptr [rdx]
 104daf5:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104daf9:	88 44 24 08 	mov	byte ptr [rsp + 8], al
 104dafd:	88 4c 24 09 	mov	byte ptr [rsp + 9], cl
 104db01:	e8 6a c7 fb ff 	call	-276630 <_runtime.largeAlloc>
 104db06:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104db0b:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104db10:	48 89 01 	mov	qword ptr [rcx], rax
 104db13:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104db18:	48 83 c4 28 	add	rsp, 40
 104db1c:	c3 	ret
 104db1d:	e8 0e 30 00 00 	call	12302 <_runtime.morestack>
 104db22:	eb 9c 	jmp	-100 <_runtime.mallocgc.func1>
 104db24:	cc 	int3
 104db25:	cc 	int3
 104db26:	cc 	int3
 104db27:	cc 	int3
 104db28:	cc 	int3
 104db29:	cc 	int3
 104db2a:	cc 	int3
 104db2b:	cc 	int3
 104db2c:	cc 	int3
 104db2d:	cc 	int3
 104db2e:	cc 	int3
 104db2f:	cc 	int3

_runtime.persistentalloc.func1:
 104db30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104db39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104db3d:	76 4d 	jbe	77 <_runtime.persistentalloc.func1+0x5c>
 104db3f:	48 83 ec 30 	sub	rsp, 48
 104db43:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104db48:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104db4d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104db51:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104db55:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 104db59:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 104db5e:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104db62:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104db66:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104db6b:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104db70:	e8 3b cc fb ff 	call	-275397 <_runtime.persistentalloc1>
 104db75:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104db7a:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104db7f:	48 89 01 	mov	qword ptr [rcx], rax
 104db82:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104db87:	48 83 c4 30 	add	rsp, 48
 104db8b:	c3 	ret
 104db8c:	e8 9f 2f 00 00 	call	12191 <_runtime.morestack>
 104db91:	eb 9d 	jmp	-99 <_runtime.persistentalloc.func1>
 104db93:	cc 	int3
 104db94:	cc 	int3
 104db95:	cc 	int3
 104db96:	cc 	int3
 104db97:	cc 	int3
 104db98:	cc 	int3
 104db99:	cc 	int3
 104db9a:	cc 	int3
 104db9b:	cc 	int3
 104db9c:	cc 	int3
 104db9d:	cc 	int3
 104db9e:	cc 	int3
 104db9f:	cc 	int3

_runtime.allocmcache.func1:
 104dba0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104dba9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104dbad:	76 6a 	jbe	106 <_runtime.allocmcache.func1+0x79>
 104dbaf:	48 83 ec 20 	sub	rsp, 32
 104dbb3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104dbb8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104dbbd:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104dbc1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104dbc6:	48 8d 0d 33 74 09 00 	lea	rcx, [rip + 619571]
 104dbcd:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104dbd1:	e8 5a a5 fb ff 	call	-285350 <_runtime.lock>
 104dbd6:	48 8d 05 43 9a 0a 00 	lea	rax, [rip + 694851]
 104dbdd:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dbe1:	e8 6a 37 fc ff 	call	-247958 <_runtime.(*fixalloc).alloc>
 104dbe6:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104dbeb:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104dbf0:	48 89 01 	mov	qword ptr [rcx], rax
 104dbf3:	8b 0d e7 74 0a 00 	mov	ecx, dword ptr [rip + 685287]
 104dbf9:	89 88 c0 06 00 00 	mov	dword ptr [rax + 1728], ecx
 104dbff:	48 8d 05 fa 73 09 00 	lea	rax, [rip + 619514]
 104dc06:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dc0a:	e8 01 a7 fb ff 	call	-284927 <_runtime.unlock>
 104dc0f:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104dc14:	48 83 c4 20 	add	rsp, 32
 104dc18:	c3 	ret
 104dc19:	e8 12 2f 00 00 	call	12050 <_runtime.morestack>
 104dc1e:	eb 80 	jmp	-128 <_runtime.allocmcache.func1>

_runtime.freemcache.func1:
 104dc20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104dc29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104dc2d:	0f 86 92 00 00 00 	jbe	146 <_runtime.freemcache.func1+0xa5>
 104dc33:	48 83 ec 18 	sub	rsp, 24
 104dc37:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104dc3c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104dc41:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104dc45:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104dc4a:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dc4e:	e8 2d 28 fc ff 	call	-251859 <_runtime.(*mcache).releaseAll>
 104dc53:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104dc58:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dc5c:	e8 9f fc fe ff 	call	-66401 <_runtime.stackcache_clear>
 104dc61:	48 8d 05 98 73 09 00 	lea	rax, [rip + 619416]
 104dc68:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dc6c:	e8 bf a4 fb ff 	call	-285505 <_runtime.lock>
 104dc71:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104dc76:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dc7a:	e8 41 74 fd ff 	call	-166847 <_runtime.purgecachedstats>
 104dc7f:	90 	nop
 104dc80:	48 8b 05 c9 99 0a 00 	mov	rax, qword ptr [rip + 694729]
 104dc87:	48 2b 05 92 99 0a 00 	sub	rax, qword ptr [rip + 694674]
 104dc8e:	48 89 05 bb 99 0a 00 	mov	qword ptr [rip + 694715], rax
 104dc95:	48 8b 05 9c 99 0a 00 	mov	rax, qword ptr [rip + 694684]
 104dc9c:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104dca1:	48 89 01 	mov	qword ptr [rcx], rax
 104dca4:	48 89 0d 8d 99 0a 00 	mov	qword ptr [rip + 694669], rcx
 104dcab:	48 8d 05 4e 73 09 00 	lea	rax, [rip + 619342]
 104dcb2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dcb6:	e8 55 a6 fb ff 	call	-285099 <_runtime.unlock>
 104dcbb:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104dcc0:	48 83 c4 18 	add	rsp, 24
 104dcc4:	c3 	ret
 104dcc5:	e8 66 2e 00 00 	call	11878 <_runtime.morestack>
 104dcca:	e9 51 ff ff ff 	jmp	-175 <_runtime.freemcache.func1>
 104dccf:	cc 	int3

_runtime.setGCPercent.func1:
 104dcd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104dcd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104dcdd:	0f 86 a3 00 00 00 	jbe	163 <_runtime.setGCPercent.func1+0xb6>
 104dce3:	48 83 ec 20 	sub	rsp, 32
 104dce7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104dcec:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104dcf1:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104dcf5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104dcfa:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104dcfe:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104dd03:	48 8d 15 f6 72 09 00 	lea	rdx, [rip + 619254]
 104dd0a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104dd0e:	e8 1d a4 fb ff 	call	-285667 <_runtime.lock>
 104dd13:	8b 05 7f 9a 0a 00 	mov	eax, dword ptr [rip + 694911]
 104dd19:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104dd1e:	89 01 	mov	dword ptr [rcx], eax
 104dd20:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104dd25:	83 38 00 	cmp	dword ptr [rax], 0
 104dd28:	7d 06 	jge	6 <_runtime.setGCPercent.func1+0x60>
 104dd2a:	c7 00 ff ff ff ff 	mov	dword ptr [rax], 4294967295
 104dd30:	8b 08 	mov	ecx, dword ptr [rax]
 104dd32:	89 0d 60 9a 0a 00 	mov	dword ptr [rip + 694880], ecx
 104dd38:	48 63 c9 	movsxd	rcx, ecx
 104dd3b:	48 c1 e1 16 	shl	rcx, 22
 104dd3f:	48 d1 e9 	shr	rcx
 104dd42:	48 b8 0b d7 a3 70 3d 0a d7 a3 	movabs	rax, -6640827866535438581
 104dd4c:	48 f7 e1 	mul	rcx
 104dd4f:	48 c1 ea 05 	shr	rdx, 5
 104dd53:	48 89 15 46 d4 07 00 	mov	qword ptr [rip + 513094], rdx
 104dd5a:	f2 0f 10 05 fe bf 0a 00 	movsd	xmm0, qword ptr [rip + 704510]
 104dd62:	f2 0f 11 04 24 	movsd	qword ptr [rsp], xmm0
 104dd67:	e8 c4 47 fc ff 	call	-243772 <_runtime.gcSetTriggerRatio>
 104dd6c:	48 8d 0d 8d 72 09 00 	lea	rcx, [rip + 619149]
 104dd73:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104dd77:	e8 94 a5 fb ff 	call	-285292 <_runtime.unlock>
 104dd7c:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104dd81:	48 83 c4 20 	add	rsp, 32
 104dd85:	c3 	ret
 104dd86:	e8 a5 2d 00 00 	call	11685 <_runtime.morestack>
 104dd8b:	e9 40 ff ff ff 	jmp	-192 <_runtime.setGCPercent.func1>

_runtime.gcStart.func1:
 104dd90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104dd99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104dd9d:	76 1a 	jbe	26 <_runtime.gcStart.func1+0x29>
 104dd9f:	48 83 ec 08 	sub	rsp, 8
 104dda3:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 104dda7:	48 8d 2c 24 	lea	rbp, [rsp]
 104ddab:	e8 e0 cb fc ff 	call	-209952 <_runtime.finishsweep_m>
 104ddb0:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 104ddb4:	48 83 c4 08 	add	rsp, 8
 104ddb8:	c3 	ret
 104ddb9:	e8 12 2e 00 00 	call	11794 <_runtime.morestack_noctxt>
 104ddbe:	eb d0 	jmp	-48 <_runtime.gcStart.func1>

_runtime.gcStart.func2:
 104ddc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104ddc9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104ddcd:	76 58 	jbe	88 <_runtime.gcStart.func2+0x67>
 104ddcf:	48 83 ec 20 	sub	rsp, 32
 104ddd3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104ddd8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104dddd:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104dde1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104dde6:	0f b6 0d 43 71 08 00 	movzx	ecx, byte ptr [rip + 553283]
 104dded:	88 0c 24 	mov	byte ptr [rsp], cl
 104ddf0:	e8 5b fa fd ff 	call	-132517 <_runtime.startTheWorldWithSema>
 104ddf5:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104ddfa:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104ddff:	48 89 01 	mov	qword ptr [rcx], rax
 104de02:	48 8b 15 9f 0c 08 00 	mov	rdx, qword ptr [rip + 527519]
 104de09:	48 29 d0 	sub	rax, rdx
 104de0c:	48 01 05 8d 0c 08 00 	add	qword ptr [rip + 527501], rax
 104de13:	48 8b 01 	mov	rax, qword ptr [rcx]
 104de16:	48 89 05 6b 0c 08 00 	mov	qword ptr [rip + 527467], rax
 104de1d:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104de22:	48 83 c4 20 	add	rsp, 32
 104de26:	c3 	ret
 104de27:	e8 04 2d 00 00 	call	11524 <_runtime.morestack>
 104de2c:	eb 92 	jmp	-110 <_runtime.gcStart.func2>
 104de2e:	cc 	int3
 104de2f:	cc 	int3

_runtime.gcMarkDone.func1.1:
 104de30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104de39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104de3d:	76 62 	jbe	98 <_runtime.gcMarkDone.func1.1+0x71>
 104de3f:	48 83 ec 10 	sub	rsp, 16
 104de43:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104de48:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104de4d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104de52:	48 89 04 24 	mov	qword ptr [rsp], rax
 104de56:	e8 05 76 fd ff 	call	-166395 <_runtime.wbBufFlush1>
 104de5b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104de60:	84 00 	test	byte ptr [rax], al
 104de62:	48 8d 88 98 16 00 00 	lea	rcx, [rax + 5784]
 104de69:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104de6d:	e8 ae e3 fc ff 	call	-203858 <_runtime.(*gcWork).dispose>
 104de72:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104de77:	80 b8 b8 16 00 00 00 	cmp	byte ptr [rax + 5816], 0
 104de7e:	74 17 	je	23 <_runtime.gcMarkDone.func1.1+0x67>
 104de80:	b9 01 00 00 00 	mov	ecx, 1
 104de85:	48 8d 15 08 99 0a 00 	lea	rdx, [rip + 694536]
 104de8c:	f0 	lock
 104de8d:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 104de90:	c6 80 b8 16 00 00 00 	mov	byte ptr [rax + 5816], 0
 104de97:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104de9c:	48 83 c4 10 	add	rsp, 16
 104dea0:	c3 	ret
 104dea1:	e8 2a 2d 00 00 	call	11562 <_runtime.morestack_noctxt>
 104dea6:	eb 88 	jmp	-120 <_runtime.gcMarkDone.func1.1>
 104dea8:	cc 	int3
 104dea9:	cc 	int3
 104deaa:	cc 	int3
 104deab:	cc 	int3
 104deac:	cc 	int3
 104dead:	cc 	int3
 104deae:	cc 	int3
 104deaf:	cc 	int3

_runtime.gcMarkDone.func1:
 104deb0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104deb9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104debd:	76 76 	jbe	118 <_runtime.gcMarkDone.func1+0x85>
 104debf:	48 83 ec 20 	sub	rsp, 32
 104dec3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104dec8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104decd:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104ded6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104deda:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 104dee1:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104dee6:	48 89 04 24 	mov	qword ptr [rsp], rax
 104deea:	48 b9 02 00 00 00 04 00 00 00 	movabs	rcx, 17179869186
 104def4:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104def9:	e8 12 f4 fd ff 	call	-134126 <_runtime.casgstatus>
 104defe:	48 8d 05 03 99 02 00 	lea	rax, [rip + 170243]
 104df05:	48 89 04 24 	mov	qword ptr [rsp], rax
 104df09:	e8 32 00 fe ff 	call	-131022 <_runtime.forEachP>
 104df0e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104df13:	48 89 04 24 	mov	qword ptr [rsp], rax
 104df17:	48 b8 04 00 00 00 02 00 00 00 	movabs	rax, 8589934596
 104df21:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104df26:	e8 e5 f3 fd ff 	call	-134171 <_runtime.casgstatus>
 104df2b:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104df30:	48 83 c4 20 	add	rsp, 32
 104df34:	c3 	ret
 104df35:	e8 96 2c 00 00 	call	11414 <_runtime.morestack_noctxt>
 104df3a:	e9 71 ff ff ff 	jmp	-143 <_runtime.gcMarkDone.func1>
 104df3f:	cc 	int3

_runtime.gcMarkDone.func2:
 104df40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104df49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104df4d:	0f 86 a1 00 00 00 	jbe	161 <_runtime.gcMarkDone.func2+0xb4>
 104df53:	48 83 ec 38 	sub	rsp, 56
 104df57:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 104df5c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 104df61:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104df65:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104df6a:	48 8b 0d d7 03 08 00 	mov	rcx, qword ptr [rip + 525271]
 104df71:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104df76:	48 8b 15 c3 03 08 00 	mov	rdx, qword ptr [rip + 525251]
 104df7d:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104df82:	31 db 	xor	ebx, ebx
 104df84:	eb 18 	jmp	24 <_runtime.gcMarkDone.func2+0x5e>
 104df86:	48 8b 74 24 08 	mov	rsi, qword ptr [rsp + 8]
 104df8b:	48 8d 5e 01 	lea	rbx, [rsi + 1]
 104df8f:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104df94:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104df99:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 104df9e:	48 39 cb 	cmp	rbx, rcx
 104dfa1:	7d 47 	jge	71 <_runtime.gcMarkDone.func2+0xaa>
 104dfa3:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104dfa8:	48 8b 04 da 	mov	rax, qword ptr [rdx + 8*rbx]
 104dfac:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104dfb1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104dfb5:	e8 a6 74 fd ff 	call	-166746 <_runtime.wbBufFlush1>
 104dfba:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104dfbf:	84 00 	test	byte ptr [rax], al
 104dfc1:	48 8b 88 98 16 00 00 	mov	rcx, qword ptr [rax + 5784]
 104dfc8:	48 85 c9 	test	rcx, rcx
 104dfcb:	74 b9 	je	-71 <_runtime.gcMarkDone.func2+0x46>
 104dfcd:	48 83 79 10 00 	cmp	qword ptr [rcx + 16], 0
 104dfd2:	75 0e 	jne	14 <_runtime.gcMarkDone.func2+0xa2>
 104dfd4:	48 8b 80 a0 16 00 00 	mov	rax, qword ptr [rax + 5792]
 104dfdb:	48 83 78 10 00 	cmp	qword ptr [rax + 16], 0
 104dfe0:	74 a4 	je	-92 <_runtime.gcMarkDone.func2+0x46>
 104dfe2:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104dfe7:	c6 00 01 	mov	byte ptr [rax], 1
 104dfea:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 104dfef:	48 83 c4 38 	add	rsp, 56
 104dff3:	c3 	ret
 104dff4:	e8 37 2b 00 00 	call	11063 <_runtime.morestack>
 104dff9:	e9 42 ff ff ff 	jmp	-190 <_runtime.gcMarkDone.func2>
 104dffe:	cc 	int3
 104dfff:	cc 	int3

_runtime.gcMarkDone.func3:
 104e000:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e009:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e00d:	76 34 	jbe	52 <_runtime.gcMarkDone.func3+0x43>
 104e00f:	48 83 ec 18 	sub	rsp, 24
 104e013:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104e018:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104e01d:	c6 04 24 01 	mov	byte ptr [rsp], 1
 104e021:	e8 2a f8 fd ff 	call	-133078 <_runtime.startTheWorldWithSema>
 104e026:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104e02b:	48 2b 05 76 0a 08 00 	sub	rax, qword ptr [rip + 526966]
 104e032:	48 01 05 67 0a 08 00 	add	qword ptr [rip + 526951], rax
 104e039:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104e03e:	48 83 c4 18 	add	rsp, 24
 104e042:	c3 	ret
 104e043:	e8 88 2b 00 00 	call	11144 <_runtime.morestack_noctxt>
 104e048:	eb b6 	jmp	-74 <_runtime.gcMarkDone.func3>
 104e04a:	cc 	int3
 104e04b:	cc 	int3
 104e04c:	cc 	int3
 104e04d:	cc 	int3
 104e04e:	cc 	int3
 104e04f:	cc 	int3

_runtime.gcMarkTermination.func1:
 104e050:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e059:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e05d:	76 25 	jbe	37 <_runtime.gcMarkTermination.func1+0x34>
 104e05f:	48 83 ec 10 	sub	rsp, 16
 104e063:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104e068:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104e06d:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104e071:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e075:	e8 96 63 fc ff 	call	-236650 <_runtime.gcMark>
 104e07a:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104e07f:	48 83 c4 10 	add	rsp, 16
 104e083:	c3 	ret
 104e084:	e8 a7 2a 00 00 	call	10919 <_runtime.morestack>
 104e089:	eb c5 	jmp	-59 <_runtime.gcMarkTermination.func1>
 104e08b:	cc 	int3
 104e08c:	cc 	int3
 104e08d:	cc 	int3
 104e08e:	cc 	int3
 104e08f:	cc 	int3

_runtime.gcMarkTermination.func2:
 104e090:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e099:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e09d:	0f 86 f3 00 00 00 	jbe	243 <_runtime.gcMarkTermination.func2+0x106>
 104e0a3:	48 83 ec 20 	sub	rsp, 32
 104e0a7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104e0ac:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104e0b1:	48 8b 05 08 09 08 00 	mov	rax, qword ptr [rip + 526600]
 104e0b8:	48 89 05 01 0a 08 00 	mov	qword ptr [rip + 526849], rax
 104e0bf:	83 3d 8a 99 0a 00 00 	cmp	dword ptr [rip + 694666], 0
 104e0c6:	7f 5c 	jg	92 <_runtime.gcMarkTermination.func2+0x94>
 104e0c8:	90 	nop
 104e0c9:	31 c0 	xor	eax, eax
 104e0cb:	48 8d 0d ca 96 0a 00 	lea	rcx, [rip + 693962]
 104e0d2:	87 01 	xchg	dword ptr [rcx], eax
 104e0d4:	8b 05 c2 96 0a 00 	mov	eax, dword ptr [rip + 693954]
 104e0da:	83 f8 01 	cmp	eax, 1
 104e0dd:	75 3d 	jne	61 <_runtime.gcMarkTermination.func2+0x8c>
 104e0df:	b8 01 00 00 00 	mov	eax, 1
 104e0e4:	88 05 1a 98 0a 00 	mov	byte ptr [rip + 694298], al
 104e0ea:	84 c0 	test	al, al
 104e0ec:	74 25 	je	37 <_runtime.gcMarkTermination.func2+0x83>
 104e0ee:	b8 01 00 00 00 	mov	eax, 1
 104e0f3:	88 05 07 98 0a 00 	mov	byte ptr [rip + 694279], al
 104e0f9:	48 8b 05 28 09 08 00 	mov	rax, qword ptr [rip + 526632]
 104e100:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e104:	e8 f7 67 fc ff 	call	-235529 <_runtime.gcSweep>
 104e109:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104e10e:	48 83 c4 20 	add	rsp, 32
 104e112:	c3 	ret
 104e113:	0f b6 05 eb 97 0a 00 	movzx	eax, byte ptr [rip + 694251]
 104e11a:	eb d7 	jmp	-41 <_runtime.gcMarkTermination.func2+0x63>
 104e11c:	83 f8 02 	cmp	eax, 2
 104e11f:	0f 94 c0 	sete	al
 104e122:	eb c0 	jmp	-64 <_runtime.gcMarkTermination.func2+0x54>
 104e124:	e8 c7 69 fc ff 	call	-235065 <_runtime.gcResetMarkState>
 104e129:	e8 f2 a7 fc ff 	call	-219150 <_runtime.initCheckmarks>
 104e12e:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104e137:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104e13b:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 104e142:	84 00 	test	byte ptr [rax], al
 104e144:	48 05 98 16 00 00 	add	rax, 5784
 104e14a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104e14f:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e153:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 104e15c:	e8 bf 8d fc ff 	call	-225857 <_runtime.gcDrain>
 104e161:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104e16a:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104e16e:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 104e175:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e179:	e8 e2 72 fd ff 	call	-167198 <_runtime.wbBufFlush1>
 104e17e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104e183:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e187:	e8 94 e0 fc ff 	call	-204652 <_runtime.(*gcWork).dispose>
 104e18c:	e8 ef a8 fc ff 	call	-218897 <_runtime.clearCheckmarks>
 104e191:	e9 32 ff ff ff 	jmp	-206 <_runtime.gcMarkTermination.func2+0x38>
 104e196:	e8 35 2a 00 00 	call	10805 <_runtime.morestack_noctxt>
 104e19b:	e9 f0 fe ff ff 	jmp	-272 <_runtime.gcMarkTermination.func2>

_runtime.gcMarkTermination.func3:
 104e1a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e1a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e1ad:	76 21 	jbe	33 <_runtime.gcMarkTermination.func3+0x30>
 104e1af:	48 83 ec 18 	sub	rsp, 24
 104e1b3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104e1b8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104e1bd:	c6 04 24 01 	mov	byte ptr [rsp], 1
 104e1c1:	e8 8a f6 fd ff 	call	-133494 <_runtime.startTheWorldWithSema>
 104e1c6:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104e1cb:	48 83 c4 18 	add	rsp, 24
 104e1cf:	c3 	ret
 104e1d0:	e8 fb 29 00 00 	call	10747 <_runtime.morestack_noctxt>
 104e1d5:	eb c9 	jmp	-55 <_runtime.gcMarkTermination.func3>
 104e1d7:	cc 	int3
 104e1d8:	cc 	int3
 104e1d9:	cc 	int3
 104e1da:	cc 	int3
 104e1db:	cc 	int3
 104e1dc:	cc 	int3
 104e1dd:	cc 	int3
 104e1de:	cc 	int3
 104e1df:	cc 	int3

_runtime.gcMarkTermination.func4.1:
 104e1e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e1e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e1ed:	76 2a 	jbe	42 <_runtime.gcMarkTermination.func4.1+0x39>
 104e1ef:	48 83 ec 10 	sub	rsp, 16
 104e1f3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104e1f8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104e1fd:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104e202:	48 8b 40 40 	mov	rax, qword ptr [rax + 64]
 104e206:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e20a:	e8 11 23 fc ff 	call	-253167 <_runtime.(*mcache).prepareForSweep>
 104e20f:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104e214:	48 83 c4 10 	add	rsp, 16
 104e218:	c3 	ret
 104e219:	e8 b2 29 00 00 	call	10674 <_runtime.morestack_noctxt>
 104e21e:	eb c0 	jmp	-64 <_runtime.gcMarkTermination.func4.1>

_runtime.gcMarkTermination.func4:
 104e220:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e229:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e22d:	76 28 	jbe	40 <_runtime.gcMarkTermination.func4+0x37>
 104e22f:	48 83 ec 10 	sub	rsp, 16
 104e233:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104e238:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104e23d:	48 8d 05 ec 95 02 00 	lea	rax, [rip + 169452]
 104e244:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e248:	e8 f3 fc fd ff 	call	-131853 <_runtime.forEachP>
 104e24d:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104e252:	48 83 c4 10 	add	rsp, 16
 104e256:	c3 	ret
 104e257:	e8 74 29 00 00 	call	10612 <_runtime.morestack_noctxt>
 104e25c:	eb c2 	jmp	-62 <_runtime.gcMarkTermination.func4>
 104e25e:	cc 	int3
 104e25f:	cc 	int3

_runtime.gcBgMarkWorker.func1:
 104e260:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104e265:	48 8b 11 	mov	rdx, qword ptr [rcx]
 104e268:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 104e271:	8b b2 08 01 00 00 	mov	esi, dword ptr [rdx + 264]
 104e277:	8d 7e ff 	lea	edi, [rsi - 1]
 104e27a:	89 ba 08 01 00 00 	mov	dword ptr [rdx + 264], edi
 104e280:	83 fe 01 	cmp	esi, 1
 104e283:	75 11 	jne	17 <_runtime.gcBgMarkWorker.func1+0x36>
 104e285:	80 bb b1 00 00 00 00 	cmp	byte ptr [rbx + 177], 0
 104e28c:	74 08 	je	8 <_runtime.gcBgMarkWorker.func1+0x36>
 104e28e:	48 c7 43 10 de fa ff ff 	mov	qword ptr [rbx + 16], -1314
 104e296:	48 8b 51 08 	mov	rdx, qword ptr [rcx + 8]
 104e29a:	48 85 d2 	test	rdx, rdx
 104e29d:	74 21 	je	33 <_runtime.gcBgMarkWorker.func1+0x60>
 104e29f:	90 	nop
 104e2a0:	90 	nop
 104e2a1:	31 db 	xor	ebx, ebx
 104e2a3:	48 89 59 08 	mov	qword ptr [rcx + 8], rbx
 104e2a7:	84 02 	test	byte ptr [rdx], al
 104e2a9:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 104e2ae:	31 c0 	xor	eax, eax
 104e2b0:	f0 	lock
 104e2b1:	48 0f b1 8a 80 16 00 00 	cmpxchg	qword ptr [rdx + 5760], rcx
 104e2b9:	0f 94 c1 	sete	cl
 104e2bc:	84 c9 	test	cl, cl
 104e2be:	74 06 	je	6 <_runtime.gcBgMarkWorker.func1+0x66>
 104e2c0:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 104e2c5:	c3 	ret
 104e2c6:	c6 44 24 18 00 	mov	byte ptr [rsp + 24], 0
 104e2cb:	c3 	ret
 104e2cc:	cc 	int3
 104e2cd:	cc 	int3
 104e2ce:	cc 	int3
 104e2cf:	cc 	int3

_runtime.gcBgMarkWorker.func2:
 104e2d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e2d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e2dd:	0f 86 8c 01 00 00 	jbe	396 <_runtime.gcBgMarkWorker.func2+0x19f>
 104e2e3:	48 83 ec 38 	sub	rsp, 56
 104e2e7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 104e2ec:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 104e2f1:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104e2f5:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104e2fa:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104e2fe:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104e303:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104e307:	48 ba 02 00 00 00 04 00 00 00 	movabs	rdx, 17179869186
 104e311:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 104e316:	e8 f5 ef fd ff 	call	-135179 <_runtime.casgstatus>
 104e31b:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104e320:	84 00 	test	byte ptr [rax], al
 104e322:	48 8b 88 88 16 00 00 	mov	rcx, qword ptr [rax + 5768]
 104e329:	48 85 c9 	test	rcx, rcx
 104e32c:	0f 85 e3 00 00 00 	jne	227 <_runtime.gcBgMarkWorker.func2+0x145>
 104e332:	48 8d 88 98 16 00 00 	lea	rcx, [rax + 5784]
 104e339:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104e33e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104e342:	48 c7 44 24 08 03 00 00 00 	mov	qword ptr [rsp + 8], 3
 104e34b:	e8 d0 8b fc ff 	call	-226352 <_runtime.gcDrain>
 104e350:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104e355:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 104e35c:	74 79 	je	121 <_runtime.gcBgMarkWorker.func2+0x107>
 104e35e:	48 8d 05 13 03 08 00 	lea	rax, [rip + 525075]
 104e365:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e369:	e8 c2 9d fb ff 	call	-287294 <_runtime.lock>
 104e36e:	eb 0e 	jmp	14 <_runtime.gcBgMarkWorker.func2+0xae>
 104e370:	90 	nop
 104e371:	48 89 15 50 03 08 00 	mov	qword ptr [rip + 525136], rdx
 104e378:	ff 05 52 03 08 00 	inc	dword ptr [rip + 525138]
 104e37e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104e383:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e387:	e8 84 90 fe ff 	call	-94076 <_runtime.runqget>
 104e38c:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104e391:	48 85 c0 	test	rax, rax
 104e394:	74 31 	je	49 <_runtime.gcBgMarkWorker.func2+0xf7>
 104e396:	90 	nop
 104e397:	90 	nop
 104e398:	48 c7 80 a0 00 00 00 00 00 00 00 	mov	qword ptr [rax + 160], 0
 104e3a3:	48 8b 0d 1e 03 08 00 	mov	rcx, qword ptr [rip + 525086]
 104e3aa:	48 85 c9 	test	rcx, rcx
 104e3ad:	74 0c 	je	12 <_runtime.gcBgMarkWorker.func2+0xeb>
 104e3af:	48 89 c2 	mov	rdx, rax
 104e3b2:	48 89 81 a0 00 00 00 	mov	qword ptr [rcx + 160], rax
 104e3b9:	eb b5 	jmp	-75 <_runtime.gcBgMarkWorker.func2+0xa0>
 104e3bb:	48 89 c2 	mov	rdx, rax
 104e3be:	48 89 05 fb 02 08 00 	mov	qword ptr [rip + 525051], rax
 104e3c5:	eb a9 	jmp	-87 <_runtime.gcBgMarkWorker.func2+0xa0>
 104e3c7:	48 8d 05 aa 02 08 00 	lea	rax, [rip + 524970]
 104e3ce:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e3d2:	e8 39 9f fb ff 	call	-286919 <_runtime.unlock>
 104e3d7:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104e3dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e3e0:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104e3e9:	e8 32 8b fc ff 	call	-226510 <_runtime.gcDrain>
 104e3ee:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104e3f3:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e3f7:	48 b8 04 00 00 00 02 00 00 00 	movabs	rax, 8589934596
 104e401:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104e406:	e8 05 ef fd ff 	call	-135419 <_runtime.casgstatus>
 104e40b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 104e410:	48 83 c4 38 	add	rsp, 56
 104e414:	c3 	ret
 104e415:	48 83 f9 01 	cmp	rcx, 1
 104e419:	74 20 	je	32 <_runtime.gcBgMarkWorker.func2+0x16b>
 104e41b:	48 83 f9 02 	cmp	rcx, 2
 104e41f:	75 34 	jne	52 <_runtime.gcBgMarkWorker.func2+0x185>
 104e421:	48 05 98 16 00 00 	add	rax, 5784
 104e427:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e42b:	48 c7 44 24 08 07 00 00 00 	mov	qword ptr [rsp + 8], 7
 104e434:	e8 e7 8a fc ff 	call	-226585 <_runtime.gcDrain>
 104e439:	eb b3 	jmp	-77 <_runtime.gcBgMarkWorker.func2+0x11e>
 104e43b:	48 05 98 16 00 00 	add	rax, 5784
 104e441:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e445:	48 c7 44 24 08 0b 00 00 00 	mov	qword ptr [rsp + 8], 11
 104e44e:	e8 cd 8a fc ff 	call	-226611 <_runtime.gcDrain>
 104e453:	eb 99 	jmp	-103 <_runtime.gcBgMarkWorker.func2+0x11e>
 104e455:	48 8d 05 4a 86 02 00 	lea	rax, [rip + 165450]
 104e45c:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e460:	48 c7 44 24 08 2b 00 00 00 	mov	qword ptr [rsp + 8], 43
 104e469:	e8 f2 a8 fd ff 	call	-153358 <_runtime.throw>
 104e46e:	90 	nop
 104e46f:	e8 bc 26 00 00 	call	9916 <_runtime.morestack>
 104e474:	e9 57 fe ff ff 	jmp	-425 <_runtime.gcBgMarkWorker.func2>
 104e479:	cc 	int3
 104e47a:	cc 	int3
 104e47b:	cc 	int3
 104e47c:	cc 	int3
 104e47d:	cc 	int3
 104e47e:	cc 	int3
 104e47f:	cc 	int3

_runtime.markroot.func1:
 104e480:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e489:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e48d:	0f 86 6f 01 00 00 	jbe	367 <_runtime.markroot.func1+0x182>
 104e493:	48 83 ec 48 	sub	rsp, 72
 104e497:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 104e49c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 104e4a1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104e4aa:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104e4ae:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 104e4b2:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104e4b6:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 104e4bd:	48 39 c2 	cmp	rdx, rax
 104e4c0:	0f 85 1b 01 00 00 	jne	283 <_runtime.markroot.func1+0x161>
 104e4c6:	8b 98 90 00 00 00 	mov	ebx, dword ptr [rax + 144]
 104e4cc:	83 fb 02 	cmp	ebx, 2
 104e4cf:	0f 94 c3 	sete	bl
 104e4d2:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104e4d7:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104e4dc:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104e4e1:	88 5c 24 1d 	mov	byte ptr [rsp + 29], bl
 104e4e5:	84 db 	test	bl, bl
 104e4e7:	0f 85 c6 00 00 00 	jne	198 <_runtime.markroot.func1+0x133>
 104e4ed:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104e4f1:	e8 4a b1 fd ff 	call	-151222 <_runtime.suspendG>
 104e4f6:	0f b6 44 24 11 	movzx	eax, byte ptr [rsp + 17]
 104e4fb:	0f b6 4c 24 10 	movzx	ecx, byte ptr [rsp + 16]
 104e500:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 104e505:	84 c9 	test	cl, cl
 104e507:	0f 85 90 00 00 00 	jne	144 <_runtime.markroot.func1+0x11d>
 104e50d:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 104e512:	80 bb b6 00 00 00 00 	cmp	byte ptr [rbx + 182], 0
 104e519:	0f 85 c9 00 00 00 	jne	201 <_runtime.markroot.func1+0x168>
 104e51f:	88 44 24 1f 	mov	byte ptr [rsp + 31], al
 104e523:	88 4c 24 1e 	mov	byte ptr [rsp + 30], cl
 104e527:	48 89 54 24 38 	mov	qword ptr [rsp + 56], rdx
 104e52c:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104e530:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104e535:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104e53a:	e8 31 7f fc ff 	call	-229583 <_runtime.scanstack>
 104e53f:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104e544:	c6 80 b6 00 00 00 01 	mov	byte ptr [rax + 182], 1
 104e54b:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104e550:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e554:	0f b6 44 24 1e 	movzx	eax, byte ptr [rsp + 30]
 104e559:	88 44 24 08 	mov	byte ptr [rsp + 8], al
 104e55d:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 104e562:	88 44 24 09 	mov	byte ptr [rsp + 9], al
 104e566:	e8 c5 b6 fd ff 	call	-149819 <_runtime.resumeG>
 104e56b:	0f b6 44 24 1d 	movzx	eax, byte ptr [rsp + 29]
 104e570:	84 c0 	test	al, al
 104e572:	75 0a 	jne	10 <_runtime.markroot.func1+0xfe>
 104e574:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 104e579:	48 83 c4 48 	add	rsp, 72
 104e57d:	c3 	ret
 104e57e:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104e583:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e587:	48 b8 04 00 00 00 02 00 00 00 	movabs	rax, 8589934596
 104e591:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104e596:	e8 75 ed fd ff 	call	-135819 <_runtime.casgstatus>
 104e59b:	eb d7 	jmp	-41 <_runtime.markroot.func1+0xf4>
 104e59d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104e5a2:	c6 80 b6 00 00 00 01 	mov	byte ptr [rax + 182], 1
 104e5a9:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 104e5ae:	48 83 c4 48 	add	rsp, 72
 104e5b2:	c3 	ret
 104e5b3:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e5b7:	48 b9 02 00 00 00 04 00 00 00 	movabs	rcx, 17179869186
 104e5c1:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104e5c6:	e8 45 ed fd ff 	call	-135867 <_runtime.casgstatus>
 104e5cb:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104e5d0:	c6 80 b0 00 00 00 07 	mov	byte ptr [rax + 176], 7
 104e5d7:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 104e5dc:	e9 0c ff ff ff 	jmp	-244 <_runtime.markroot.func1+0x6d>
 104e5e1:	31 db 	xor	ebx, ebx
 104e5e3:	e9 ea fe ff ff 	jmp	-278 <_runtime.markroot.func1+0x52>
 104e5e8:	48 8d 05 ec 56 02 00 	lea	rax, [rip + 153324]
 104e5ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e5f3:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104e5fc:	e8 5f a7 fd ff 	call	-153761 <_runtime.throw>
 104e601:	90 	nop
 104e602:	e8 29 25 00 00 	call	9513 <_runtime.morestack>
 104e607:	e9 74 fe ff ff 	jmp	-396 <_runtime.markroot.func1>
 104e60c:	cc 	int3
 104e60d:	cc 	int3
 104e60e:	cc 	int3
 104e60f:	cc 	int3

_runtime.gcAssistAlloc.func1:
 104e610:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e619:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e61d:	76 2e 	jbe	46 <_runtime.gcAssistAlloc.func1+0x3d>
 104e61f:	48 83 ec 18 	sub	rsp, 24
 104e623:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104e628:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104e62d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104e631:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104e635:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104e639:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104e63e:	e8 ad 77 fc ff 	call	-231507 <_runtime.gcAssistAlloc1>
 104e643:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104e648:	48 83 c4 18 	add	rsp, 24
 104e64c:	c3 	ret
 104e64d:	e8 de 24 00 00 	call	9438 <_runtime.morestack>
 104e652:	eb bc 	jmp	-68 <_runtime.gcAssistAlloc.func1>
 104e654:	cc 	int3
 104e655:	cc 	int3
 104e656:	cc 	int3
 104e657:	cc 	int3
 104e658:	cc 	int3
 104e659:	cc 	int3
 104e65a:	cc 	int3
 104e65b:	cc 	int3
 104e65c:	cc 	int3
 104e65d:	cc 	int3
 104e65e:	cc 	int3
 104e65f:	cc 	int3

_runtime.scanstack.func1:
 104e660:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e669:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e66d:	76 3d 	jbe	61 <_runtime.scanstack.func1+0x4c>
 104e66f:	48 83 ec 20 	sub	rsp, 32
 104e673:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104e678:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104e67d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104e681:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104e685:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 104e68a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104e68e:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104e693:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104e698:	e8 b3 85 fc ff 	call	-227917 <_runtime.scanframeworker>
 104e69d:	c6 44 24 38 01 	mov	byte ptr [rsp + 56], 1
 104e6a2:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104e6a7:	48 83 c4 20 	add	rsp, 32
 104e6ab:	c3 	ret
 104e6ac:	e8 7f 24 00 00 	call	9343 <_runtime.morestack>
 104e6b1:	eb ad 	jmp	-83 <_runtime.scanstack.func1>
 104e6b3:	cc 	int3
 104e6b4:	cc 	int3
 104e6b5:	cc 	int3
 104e6b6:	cc 	int3
 104e6b7:	cc 	int3
 104e6b8:	cc 	int3
 104e6b9:	cc 	int3
 104e6ba:	cc 	int3
 104e6bb:	cc 	int3
 104e6bc:	cc 	int3
 104e6bd:	cc 	int3
 104e6be:	cc 	int3
 104e6bf:	cc 	int3

_runtime.wakeScavenger.func1:
 104e6c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e6c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e6cd:	76 36 	jbe	54 <_runtime.wakeScavenger.func1+0x45>
 104e6cf:	48 83 ec 20 	sub	rsp, 32
 104e6d3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104e6d8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104e6dd:	48 8b 05 44 fd 07 00 	mov	rax, qword ptr [rip + 523588]
 104e6e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e6e8:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 104e6f1:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 104e6f6:	e8 65 e3 fd ff 	call	-138395 <_runtime.ready>
 104e6fb:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104e700:	48 83 c4 20 	add	rsp, 32
 104e704:	c3 	ret
 104e705:	e8 c6 24 00 00 	call	9414 <_runtime.morestack_noctxt>
 104e70a:	eb b4 	jmp	-76 <_runtime.wakeScavenger.func1>
 104e70c:	cc 	int3
 104e70d:	cc 	int3
 104e70e:	cc 	int3
 104e70f:	cc 	int3

_runtime.bgscavenge.func1:
 104e710:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e719:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e71d:	76 1a 	jbe	26 <_runtime.bgscavenge.func1+0x29>
 104e71f:	48 83 ec 08 	sub	rsp, 8
 104e723:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 104e727:	48 8d 2c 24 	lea	rbp, [rsp]
 104e72b:	e8 60 a6 fc ff 	call	-219552 <_runtime.wakeScavenger>
 104e730:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 104e734:	48 83 c4 08 	add	rsp, 8
 104e738:	c3 	ret
 104e739:	e8 92 24 00 00 	call	9362 <_runtime.morestack_noctxt>
 104e73e:	eb d0 	jmp	-48 <_runtime.bgscavenge.func1>

_runtime.bgscavenge.func2:
 104e740:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e749:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e74d:	0f 86 ec 00 00 00 	jbe	236 <_runtime.bgscavenge.func2+0xff>
 104e753:	48 83 ec 40 	sub	rsp, 64
 104e757:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104e75c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104e761:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104e765:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104e76a:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104e76e:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104e773:	48 8d 15 86 68 09 00 	lea	rdx, [rip + 616582]
 104e77a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104e77e:	e8 ad 99 fb ff 	call	-288339 <_runtime.lock>
 104e783:	48 8b 05 ce 9e 0a 00 	mov	rax, qword ptr [rip + 696014]
 104e78a:	48 8b 0d df 9e 0a 00 	mov	rcx, qword ptr [rip + 696031]
 104e791:	48 8b 15 e8 69 0a 00 	mov	rdx, qword ptr [rip + 682472]
 104e798:	48 29 c8 	sub	rax, rcx
 104e79b:	48 39 d0 	cmp	rax, rdx
 104e79e:	77 1a 	ja	26 <_runtime.bgscavenge.func2+0x7a>
 104e7a0:	48 8d 05 59 68 09 00 	lea	rax, [rip + 616537]
 104e7a7:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e7ab:	e8 60 9b fb ff 	call	-287904 <_runtime.unlock>
 104e7b0:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104e7b5:	48 83 c4 40 	add	rsp, 64
 104e7b9:	c3 	ret
 104e7ba:	48 8d 05 3f 68 09 00 	lea	rax, [rip + 616511]
 104e7c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e7c5:	e8 46 9b fb ff 	call	-287930 <_runtime.unlock>
 104e7ca:	90 	nop
 104e7cb:	e8 f0 4a ff ff 	call	-46352 <_runtime.nanotime1>
 104e7d0:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 104e7d4:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104e7d9:	48 8d 0d 28 68 09 00 	lea	rcx, [rip + 616488]
 104e7e0:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104e7e4:	48 8b 0d ad 90 0a 00 	mov	rcx, qword ptr [rip + 692397]
 104e7eb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104e7f0:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 104e7f5:	e8 96 ac fc ff 	call	-217962 <_runtime.(*pageAlloc).scavengeOne>
 104e7fa:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104e7ff:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104e804:	48 89 01 	mov	qword ptr [rcx], rax
 104e807:	48 8d 0d 82 68 0a 00 	lea	rcx, [rip + 682114]
 104e80e:	f0 	lock
 104e80f:	48 0f c1 01 	xadd	qword ptr [rcx], rax
 104e813:	e8 a8 4a ff ff 	call	-46424 <_runtime.nanotime1>
 104e818:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 104e81c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104e821:	48 29 c8 	sub	rax, rcx
 104e824:	0f 57 c0 	xorps	xmm0, xmm0
 104e827:	f2 48 0f 2a c0 	cvtsi2sd	xmm0, rax
 104e82c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104e831:	f2 0f 11 00 	movsd	qword ptr [rax], xmm0
 104e835:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104e83a:	48 83 c4 40 	add	rsp, 64
 104e83e:	c3 	ret
 104e83f:	e8 ec 22 00 00 	call	8940 <_runtime.morestack>
 104e844:	e9 f7 fe ff ff 	jmp	-265 <_runtime.bgscavenge.func2>
 104e849:	cc 	int3
 104e84a:	cc 	int3
 104e84b:	cc 	int3
 104e84c:	cc 	int3
 104e84d:	cc 	int3
 104e84e:	cc 	int3
 104e84f:	cc 	int3

_runtime.(*pageAlloc).scavengeOne.func3:
 104e850:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e859:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e85d:	0f 86 a0 00 00 00 	jbe	160 <_runtime.(*pageAlloc).scavengeOne.func3+0xb3>
 104e863:	48 83 ec 28 	sub	rsp, 40
 104e867:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104e86c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104e871:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104e875:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104e87a:	84 00 	test	byte ptr [rax], al
 104e87c:	48 8d 88 a0 00 01 00 	lea	rcx, [rax + 65696]
 104e883:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104e887:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104e88c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104e891:	e8 5a 61 fd ff 	call	-171686 <_runtime.(*addrRanges).findSucc>
 104e896:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104e89b:	48 85 c0 	test	rax, rax
 104e89e:	74 4b 	je	75 <_runtime.(*pageAlloc).scavengeOne.func3+0x9b>
 104e8a0:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 104e8a5:	48 8b 8a a8 00 01 00 	mov	rcx, qword ptr [rdx + 65704]
 104e8ac:	48 8b 92 a0 00 01 00 	mov	rdx, qword ptr [rdx + 65696]
 104e8b3:	48 ff c8 	dec	rax
 104e8b6:	48 39 c8 	cmp	rax, rcx
 104e8b9:	73 42 	jae	66 <_runtime.(*pageAlloc).scavengeOne.func3+0xad>
 104e8bb:	48 c1 e0 04 	shl	rax, 4
 104e8bf:	48 8b 0c 02 	mov	rcx, qword ptr [rdx + rax]
 104e8c3:	48 8b 44 02 08 	mov	rax, qword ptr [rdx + rax + 8]
 104e8c8:	48 89 4c 24 38 	mov	qword ptr [rsp + 56], rcx
 104e8cd:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104e8d2:	48 ff c1 	inc	rcx
 104e8d5:	48 39 c8 	cmp	rax, rcx
 104e8d8:	48 0f 47 c1 	cmova	rax, rcx
 104e8dc:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104e8e1:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104e8e6:	48 83 c4 28 	add	rsp, 40
 104e8ea:	c3 	ret
 104e8eb:	0f 57 c0 	xorps	xmm0, xmm0
 104e8ee:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 104e8f3:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104e8f8:	48 83 c4 28 	add	rsp, 40
 104e8fc:	c3 	ret
 104e8fd:	e8 4e 4a 00 00 	call	19022 <_runtime.panicIndex>
 104e902:	90 	nop
 104e903:	e8 28 22 00 00 	call	8744 <_runtime.morestack>
 104e908:	e9 43 ff ff ff 	jmp	-189 <_runtime.(*pageAlloc).scavengeOne.func3>
 104e90d:	cc 	int3
 104e90e:	cc 	int3
 104e90f:	cc 	int3

_runtime.getempty.func1:
 104e910:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e919:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e91d:	76 53 	jbe	83 <_runtime.getempty.func1+0x62>
 104e91f:	48 83 ec 30 	sub	rsp, 48
 104e923:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104e928:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104e92d:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104e931:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104e936:	48 8d 0d c3 66 09 00 	lea	rcx, [rip + 616131]
 104e93d:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104e941:	48 c7 44 24 08 04 00 00 00 	mov	qword ptr [rsp + 8], 4
 104e94a:	48 8d 0d 67 9d 0a 00 	lea	rcx, [rip + 695655]
 104e951:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104e956:	e8 a5 ee fc ff 	call	-201051 <_runtime.(*mheap).allocManual>
 104e95b:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104e960:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104e965:	48 89 01 	mov	qword ptr [rcx], rax
 104e968:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104e96d:	48 83 c4 30 	add	rsp, 48
 104e971:	c3 	ret
 104e972:	e8 b9 21 00 00 	call	8633 <_runtime.morestack>
 104e977:	eb 97 	jmp	-105 <_runtime.getempty.func1>
 104e979:	cc 	int3
 104e97a:	cc 	int3
 104e97b:	cc 	int3
 104e97c:	cc 	int3
 104e97d:	cc 	int3
 104e97e:	cc 	int3
 104e97f:	cc 	int3

_runtime.freeSomeWbufs.func1:
 104e980:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104e989:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104e98d:	0f 86 c0 00 00 00 	jbe	192 <_runtime.freeSomeWbufs.func1+0xd3>
 104e993:	48 83 ec 40 	sub	rsp, 64
 104e997:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104e99c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104e9a1:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104e9aa:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104e9ae:	48 8b 80 c0 00 00 00 	mov	rax, qword ptr [rax + 192]
 104e9b5:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104e9ba:	0f b6 4a 08 	movzx	ecx, byte ptr [rdx + 8]
 104e9be:	88 4c 24 1f 	mov	byte ptr [rsp + 31], cl
 104e9c2:	80 f9 00 	cmp	cl, 0
 104e9c5:	31 d2 	xor	edx, edx
 104e9c7:	eb 60 	jmp	96 <_runtime.freeSomeWbufs.func1+0xa9>
 104e9c9:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104e9ce:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 104e9d3:	48 8d 05 be ff 07 00 	lea	rax, [rip + 524222]
 104e9da:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e9de:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104e9e3:	e8 68 01 fd ff 	call	-196248 <_runtime.(*mSpanList).remove>
 104e9e8:	48 8d 05 11 66 09 00 	lea	rax, [rip + 615953]
 104e9ef:	48 89 04 24 	mov	qword ptr [rsp], rax
 104e9f3:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104e9f8:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104e9fd:	48 8d 0d b4 9c 0a 00 	lea	rcx, [rip + 695476]
 104ea04:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104ea09:	e8 12 fd fc ff 	call	-197358 <_runtime.(*mheap).freeManual>
 104ea0e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104ea13:	48 8d 50 01 	lea	rdx, [rax + 1]
 104ea17:	0f b6 44 24 1f 	movzx	eax, byte ptr [rsp + 31]
 104ea1c:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104ea21:	48 89 c8 	mov	rax, rcx
 104ea24:	0f b6 4c 24 1f 	movzx	ecx, byte ptr [rsp + 31]
 104ea29:	48 83 fa 40 	cmp	rdx, 64
 104ea2d:	7d 1a 	jge	26 <_runtime.freeSomeWbufs.func1+0xc9>
 104ea2f:	80 f9 00 	cmp	cl, 0
 104ea32:	74 09 	je	9 <_runtime.freeSomeWbufs.func1+0xbd>
 104ea34:	80 b8 b1 00 00 00 00 	cmp	byte ptr [rax + 177], 0
 104ea3b:	75 0c 	jne	12 <_runtime.freeSomeWbufs.func1+0xc9>
 104ea3d:	48 8b 1d 54 ff 07 00 	mov	rbx, qword ptr [rip + 524116]
 104ea44:	48 85 db 	test	rbx, rbx
 104ea47:	75 80 	jne	-128 <_runtime.freeSomeWbufs.func1+0x49>
 104ea49:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104ea4e:	48 83 c4 40 	add	rsp, 64
 104ea52:	c3 	ret
 104ea53:	e8 d8 20 00 00 	call	8408 <_runtime.morestack>
 104ea58:	e9 23 ff ff ff 	jmp	-221 <_runtime.freeSomeWbufs.func1>
 104ea5d:	cc 	int3
 104ea5e:	cc 	int3
 104ea5f:	cc 	int3

_runtime.(*mheap).alloc.func1:
 104ea60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104ea69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104ea6d:	0f 86 95 00 00 00 	jbe	149 <_runtime.(*mheap).alloc.func1+0xa8>
 104ea73:	48 83 ec 50 	sub	rsp, 80
 104ea77:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 104ea7c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 104ea81:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104ea85:	84 00 	test	byte ptr [rax], al
 104ea87:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 104ea8b:	0f b6 5a 18 	movzx	ebx, byte ptr [rdx + 24]
 104ea8f:	48 8b 52 20 	mov	rdx, qword ptr [rdx + 32]
 104ea93:	48 89 54 24 40 	mov	qword ptr [rsp + 64], rdx
 104ea98:	83 b8 e4 00 01 00 00 	cmp	dword ptr [rax + 65764], 0
 104ea9f:	74 3a 	je	58 <_runtime.(*mheap).alloc.func1+0x7b>
 104eaa1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104eaa5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104eaaa:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 104eaaf:	88 5c 24 11 	mov	byte ptr [rsp + 17], bl
 104eab3:	48 8d 05 ae 9b 0a 00 	lea	rax, [rip + 695214]
 104eaba:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104eabf:	e8 dc f0 fc ff 	call	-200484 <_runtime.(*mheap).allocSpan>
 104eac4:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104eac9:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104eace:	48 89 01 	mov	qword ptr [rcx], rax
 104ead1:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 104ead6:	48 83 c4 50 	add	rsp, 80
 104eada:	c3 	ret
 104eadb:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104eae0:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 104eae5:	88 5c 24 2f 	mov	byte ptr [rsp + 47], bl
 104eae9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104eaed:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104eaf2:	e8 39 e6 fc ff 	call	-203207 <_runtime.(*mheap).reclaim>
 104eaf7:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104eafc:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104eb01:	0f b6 5c 24 2f 	movzx	ebx, byte ptr [rsp + 47]
 104eb06:	eb 99 	jmp	-103 <_runtime.(*mheap).alloc.func1+0x41>
 104eb08:	e8 23 20 00 00 	call	8227 <_runtime.morestack>
 104eb0d:	e9 4e ff ff ff 	jmp	-178 <_runtime.(*mheap).alloc.func1>
 104eb12:	cc 	int3
 104eb13:	cc 	int3
 104eb14:	cc 	int3
 104eb15:	cc 	int3
 104eb16:	cc 	int3
 104eb17:	cc 	int3
 104eb18:	cc 	int3
 104eb19:	cc 	int3
 104eb1a:	cc 	int3
 104eb1b:	cc 	int3
 104eb1c:	cc 	int3
 104eb1d:	cc 	int3
 104eb1e:	cc 	int3
 104eb1f:	cc 	int3

_runtime.(*mheap).freeSpan.func1:
 104eb20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104eb29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104eb2d:	0f 86 d6 00 00 00 	jbe	214 <_runtime.(*mheap).freeSpan.func1+0xe9>
 104eb33:	48 83 ec 38 	sub	rsp, 56
 104eb37:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 104eb3c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 104eb41:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104eb45:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104eb4a:	84 00 	test	byte ptr [rax], al
 104eb4c:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 104eb50:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104eb55:	65 48 8b 14 25 30 00 00 00 	mov	rdx, qword ptr gs:[48]
 104eb5e:	48 8b 52 30 	mov	rdx, qword ptr [rdx + 48]
 104eb62:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104eb67:	48 89 04 24 	mov	qword ptr [rsp], rax
 104eb6b:	e8 c0 95 fb ff 	call	-289344 <_runtime.lock>
 104eb70:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104eb75:	48 8b 88 60 01 00 00 	mov	rcx, qword ptr [rax + 352]
 104eb7c:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 104eb80:	48 01 0d f1 b1 0a 00 	add	qword ptr [rip + 700913], rcx
 104eb87:	48 8b 88 60 01 00 00 	mov	rcx, qword ptr [rax + 352]
 104eb8e:	48 c7 41 08 00 00 00 00 	mov	qword ptr [rcx + 8], 0
 104eb96:	48 8b 88 60 01 00 00 	mov	rcx, qword ptr [rax + 352]
 104eb9d:	48 8b 49 20 	mov	rcx, qword ptr [rcx + 32]
 104eba1:	48 01 0d a0 b1 0a 00 	add	qword ptr [rip + 700832], rcx
 104eba8:	48 8b 80 60 01 00 00 	mov	rax, qword ptr [rax + 352]
 104ebaf:	48 c7 40 20 00 00 00 00 	mov	qword ptr [rax + 32], 0
 104ebb7:	83 3d d2 8b 0a 00 00 	cmp	dword ptr [rip + 691154], 0
 104ebbe:	75 37 	jne	55 <_runtime.(*mheap).freeSpan.func1+0xd7>
 104ebc0:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104ebc5:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ebc9:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 104ebce:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 104ebd3:	66 c7 44 24 10 01 01 	mov	word ptr [rsp + 16], 257
 104ebda:	e8 01 fc fc ff 	call	-197631 <_runtime.(*mheap).freeSpanLocked>
 104ebdf:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104ebe4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ebe8:	e8 23 97 fb ff 	call	-288989 <_runtime.unlock>
 104ebed:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 104ebf2:	48 83 c4 38 	add	rsp, 56
 104ebf6:	c3 	ret
 104ebf7:	48 8d 05 82 91 0a 00 	lea	rax, [rip + 692610]
 104ebfe:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ec02:	e8 79 2e fc ff 	call	-250247 <_runtime.(*gcControllerState).revise>
 104ec07:	eb b7 	jmp	-73 <_runtime.(*mheap).freeSpan.func1+0xa0>
 104ec09:	e8 22 1f 00 00 	call	7970 <_runtime.morestack>
 104ec0e:	e9 0d ff ff ff 	jmp	-243 <_runtime.(*mheap).freeSpan.func1>
 104ec13:	cc 	int3
 104ec14:	cc 	int3
 104ec15:	cc 	int3
 104ec16:	cc 	int3
 104ec17:	cc 	int3
 104ec18:	cc 	int3
 104ec19:	cc 	int3
 104ec1a:	cc 	int3
 104ec1b:	cc 	int3
 104ec1c:	cc 	int3
 104ec1d:	cc 	int3
 104ec1e:	cc 	int3
 104ec1f:	cc 	int3

_runtime.(*pageAlloc).find.func1:
 104ec20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104ec29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104ec2d:	0f 86 4e 01 00 00 	jbe	334 <_runtime.(*pageAlloc).find.func1+0x161>
 104ec33:	48 83 ec 30 	sub	rsp, 48
 104ec37:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104ec3c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104ec41:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104ec45:	48 8b 08 	mov	rcx, qword ptr [rax]
 104ec48:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104ec4d:	48 39 d1 	cmp	rcx, rdx
 104ec50:	77 39 	ja	57 <_runtime.(*pageAlloc).find.func1+0x6b>
 104ec52:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 104ec57:	48 8d 34 13 	lea	rsi, [rbx + rdx]
 104ec5b:	48 8d 76 ff 	lea	rsi, [rsi - 1]
 104ec5f:	48 39 70 08 	cmp	qword ptr [rax + 8], rsi
 104ec63:	72 11 	jb	17 <_runtime.(*pageAlloc).find.func1+0x56>
 104ec65:	48 89 10 	mov	qword ptr [rax], rdx
 104ec68:	48 89 70 08 	mov	qword ptr [rax + 8], rsi
 104ec6c:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104ec71:	48 83 c4 30 	add	rsp, 48
 104ec75:	c3 	ret
 104ec76:	48 8d 34 13 	lea	rsi, [rbx + rdx]
 104ec7a:	48 8d 76 ff 	lea	rsi, [rsi - 1]
 104ec7e:	48 39 ce 	cmp	rsi, rcx
 104ec81:	72 e9 	jb	-23 <_runtime.(*pageAlloc).find.func1+0x4c>
 104ec83:	48 39 50 08 	cmp	qword ptr [rax + 8], rdx
 104ec87:	72 e3 	jb	-29 <_runtime.(*pageAlloc).find.func1+0x4c>
 104ec89:	eb 07 	jmp	7 <_runtime.(*pageAlloc).find.func1+0x72>
 104ec8b:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 104ec90:	eb e4 	jmp	-28 <_runtime.(*pageAlloc).find.func1+0x56>
 104ec92:	48 89 44 24 20 	mov	qword ptr [rsp + 32], rax
 104ec97:	e8 04 b8 fd ff 	call	-149500 <_runtime.printlock>
 104ec9c:	48 8d 05 3f 4f 02 00 	lea	rax, [rip + 151359]
 104eca3:	48 89 04 24 	mov	qword ptr [rsp], rax
 104eca7:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104ecb0:	e8 2b c1 fd ff 	call	-147157 <_runtime.printstring>
 104ecb5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104ecba:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ecbe:	e8 cd bf fd ff 	call	-147507 <_runtime.printhex>
 104ecc3:	48 8d 05 59 44 02 00 	lea	rax, [rip + 148569]
 104ecca:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ecce:	48 c7 44 24 08 09 00 00 00 	mov	qword ptr [rsp + 8], 9
 104ecd7:	e8 04 c1 fd ff 	call	-147196 <_runtime.printstring>
 104ecdc:	48 8b 44 24 40 	mov	rax, qword ptr [rsp + 64]
 104ece1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ece5:	e8 36 be fd ff 	call	-147914 <_runtime.printuint>
 104ecea:	e8 41 ba fd ff 	call	-148927 <_runtime.printnl>
 104ecef:	e8 2c b8 fd ff 	call	-149460 <_runtime.printunlock>
 104ecf4:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104ecf9:	48 8b 08 	mov	rcx, qword ptr [rax]
 104ecfc:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104ed01:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 104ed05:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104ed0a:	e8 91 b7 fd ff 	call	-149615 <_runtime.printlock>
 104ed0f:	48 8d 05 dc 4e 02 00 	lea	rax, [rip + 151260]
 104ed16:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ed1a:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104ed23:	e8 b8 c0 fd ff 	call	-147272 <_runtime.printstring>
 104ed28:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104ed2d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ed31:	e8 5a bf fd ff 	call	-147622 <_runtime.printhex>
 104ed36:	48 8d 05 0c 45 02 00 	lea	rax, [rip + 148748]
 104ed3d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ed41:	48 c7 44 24 08 0a 00 00 00 	mov	qword ptr [rsp + 8], 10
 104ed4a:	e8 91 c0 fd ff 	call	-147311 <_runtime.printstring>
 104ed4f:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104ed54:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ed58:	e8 33 bf fd ff 	call	-147661 <_runtime.printhex>
 104ed5d:	e8 ce b9 fd ff 	call	-149042 <_runtime.printnl>
 104ed62:	e8 b9 b7 fd ff 	call	-149575 <_runtime.printunlock>
 104ed67:	48 8d 05 b7 5d 02 00 	lea	rax, [rip + 155063]
 104ed6e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ed72:	48 c7 44 24 08 18 00 00 00 	mov	qword ptr [rsp + 8], 24
 104ed7b:	e8 e0 9f fd ff 	call	-155680 <_runtime.throw>
 104ed80:	90 	nop
 104ed81:	e8 aa 1d 00 00 	call	7594 <_runtime.morestack>
 104ed86:	e9 95 fe ff ff 	jmp	-363 <_runtime.(*pageAlloc).find.func1>
 104ed8b:	cc 	int3
 104ed8c:	cc 	int3
 104ed8d:	cc 	int3
 104ed8e:	cc 	int3
 104ed8f:	cc 	int3

_runtime.(*pageAlloc).sysGrow.func1:
 104ed90:	48 83 ec 18 	sub	rsp, 24
 104ed94:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104ed99:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104ed9e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104eda3:	48 83 f8 05 	cmp	rax, 5
 104eda7:	0f 83 8f 00 00 00 	jae	143 <_runtime.(*pageAlloc).sysGrow.func1+0xac>
 104edad:	48 8d 15 2c c5 07 00 	lea	rdx, [rip + 509228]
 104edb4:	48 8b 0c c2 	mov	rcx, qword ptr [rdx + 8*rax]
 104edb8:	48 8d 15 a1 c4 07 00 	lea	rdx, [rip + 509089]
 104edbf:	48 8b 04 c2 	mov	rax, qword ptr [rdx + 8*rax]
 104edc3:	90 	nop
 104edc4:	90 	nop
 104edc5:	48 83 f9 40 	cmp	rcx, 64
 104edc9:	48 19 d2 	sbb	rdx, rdx
 104edcc:	48 83 f8 40 	cmp	rax, 64
 104edd0:	48 19 db 	sbb	rbx, rbx
 104edd3:	48 be 00 00 00 00 00 80 00 00 	movabs	rsi, 140737488355328
 104eddd:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 104ede2:	48 01 fe 	add	rsi, rdi
 104ede5:	48 d3 ee 	shr	rsi, cl
 104ede8:	48 21 d6 	and	rsi, rdx
 104edeb:	48 89 cf 	mov	rdi, rcx
 104edee:	48 89 c1 	mov	rcx, rax
 104edf1:	41 b8 01 00 00 00 	mov	r8d, 1
 104edf7:	49 d3 e0 	shl	r8, cl
 104edfa:	49 21 d8 	and	r8, rbx
 104edfd:	4c 89 c0 	mov	rax, r8
 104ee00:	49 f7 d8 	neg	r8
 104ee03:	4c 21 c6 	and	rsi, r8
 104ee06:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 104ee0b:	48 bb ff ff ff ff ff 7f 00 00 	movabs	rbx, 140737488355327
 104ee15:	48 8b 74 24 30 	mov	rsi, qword ptr [rsp + 48]
 104ee1a:	48 01 f3 	add	rbx, rsi
 104ee1d:	48 89 f9 	mov	rcx, rdi
 104ee20:	48 d3 eb 	shr	rbx, cl
 104ee23:	48 21 d3 	and	rbx, rdx
 104ee26:	48 8d 04 03 	lea	rax, [rbx + rax]
 104ee2a:	4c 21 c0 	and	rax, r8
 104ee2d:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104ee32:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104ee37:	48 83 c4 18 	add	rsp, 24
 104ee3b:	c3 	ret
 104ee3c:	b9 05 00 00 00 	mov	ecx, 5
 104ee41:	e8 0a 45 00 00 	call	17674 <_runtime.panicIndex>
 104ee46:	90 	nop
 104ee47:	cc 	int3
 104ee48:	cc 	int3
 104ee49:	cc 	int3
 104ee4a:	cc 	int3
 104ee4b:	cc 	int3
 104ee4c:	cc 	int3
 104ee4d:	cc 	int3
 104ee4e:	cc 	int3
 104ee4f:	cc 	int3

_runtime.(*pageAlloc).sysGrow.func2:
 104ee50:	48 83 ec 18 	sub	rsp, 24
 104ee54:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104ee59:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104ee5e:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104ee62:	84 02 	test	byte ptr [rdx], al
 104ee64:	48 8b 1d 2d 8a 0a 00 	mov	rbx, qword ptr [rip + 690733]
 104ee6b:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 104ee70:	48 c1 e6 03 	shl	rsi, 3
 104ee74:	90 	nop
 104ee75:	48 89 df 	mov	rdi, rbx
 104ee78:	48 f7 db 	neg	rbx
 104ee7b:	48 21 de 	and	rsi, rbx
 104ee7e:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 104ee83:	4a 8d 3c c7 	lea	rdi, [rdi + 8*r8]
 104ee87:	48 8d 7f ff 	lea	rdi, [rdi - 1]
 104ee8b:	48 21 df 	and	rdi, rbx
 104ee8e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104ee93:	48 83 f8 05 	cmp	rax, 5
 104ee97:	73 37 	jae	55 <_runtime.(*pageAlloc).sysGrow.func2+0x80>
 104ee99:	48 8d 1c 40 	lea	rbx, [rax + 2*rax]
 104ee9d:	48 8b 4c da 08 	mov	rcx, qword ptr [rdx + 8*rbx + 8]
 104eea2:	48 8b 14 da 	mov	rdx, qword ptr [rdx + 8*rbx]
 104eea6:	48 85 c9 	test	rcx, rcx
 104eea9:	76 1e 	jbe	30 <_runtime.(*pageAlloc).sysGrow.func2+0x79>
 104eeab:	48 8d 04 32 	lea	rax, [rdx + rsi]
 104eeaf:	90 	nop
 104eeb0:	48 8d 0c 17 	lea	rcx, [rdi + rdx]
 104eeb4:	90 	nop
 104eeb5:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104eeba:	48 89 4c 24 40 	mov	qword ptr [rsp + 64], rcx
 104eebf:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104eec4:	48 83 c4 18 	add	rsp, 24
 104eec8:	c3 	ret
 104eec9:	31 c0 	xor	eax, eax
 104eecb:	e8 80 44 00 00 	call	17536 <_runtime.panicIndex>
 104eed0:	b9 05 00 00 00 	mov	ecx, 5
 104eed5:	e8 76 44 00 00 	call	17526 <_runtime.panicIndex>
 104eeda:	90 	nop
 104eedb:	cc 	int3
 104eedc:	cc 	int3
 104eedd:	cc 	int3
 104eede:	cc 	int3
 104eedf:	cc 	int3

_runtime.(*pageAlloc).sysGrow.func3:
 104eee0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104eee9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104eeed:	0f 86 82 00 00 00 	jbe	130 <_runtime.(*pageAlloc).sysGrow.func3+0x95>
 104eef3:	48 83 ec 38 	sub	rsp, 56
 104eef7:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 104eefc:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 104ef01:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104ef05:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104ef0a:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104ef0e:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104ef13:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104ef17:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 104ef1c:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104ef21:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 104ef26:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 104ef2b:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 104ef2e:	ff d3 	call	rbx
 104ef30:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104ef35:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104ef3a:	48 8b 5c 24 40 	mov	rbx, qword ptr [rsp + 64]
 104ef3f:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 104ef43:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104ef48:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104ef4d:	48 8b 54 24 28 	mov	rdx, qword ptr [rsp + 40]
 104ef52:	48 8b 02 	mov	rax, qword ptr [rdx]
 104ef55:	ff d0 	call	rax
 104ef57:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104ef5c:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104ef61:	48 89 44 24 58 	mov	qword ptr [rsp + 88], rax
 104ef66:	48 89 4c 24 60 	mov	qword ptr [rsp + 96], rcx
 104ef6b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 104ef70:	48 83 c4 38 	add	rsp, 56
 104ef74:	c3 	ret
 104ef75:	e8 b6 1b 00 00 	call	7094 <_runtime.morestack>
 104ef7a:	e9 61 ff ff ff 	jmp	-159 <_runtime.(*pageAlloc).sysGrow.func3>
 104ef7f:	cc 	int3

_runtime.mProf_Malloc.func1:
 104ef80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104ef89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104ef8d:	76 2e 	jbe	46 <_runtime.mProf_Malloc.func1+0x3d>
 104ef8f:	48 83 ec 18 	sub	rsp, 24
 104ef93:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104ef98:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104ef9d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104efa1:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104efa5:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104efa9:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104efae:	e8 7d 01 fd ff 	call	-196227 <_runtime.setprofilebucket>
 104efb3:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104efb8:	48 83 c4 18 	add	rsp, 24
 104efbc:	c3 	ret
 104efbd:	e8 6e 1b 00 00 	call	7022 <_runtime.morestack>
 104efc2:	eb bc 	jmp	-68 <_runtime.mProf_Malloc.func1>
 104efc4:	cc 	int3
 104efc5:	cc 	int3
 104efc6:	cc 	int3
 104efc7:	cc 	int3
 104efc8:	cc 	int3
 104efc9:	cc 	int3
 104efca:	cc 	int3
 104efcb:	cc 	int3
 104efcc:	cc 	int3
 104efcd:	cc 	int3
 104efce:	cc 	int3
 104efcf:	cc 	int3

_runtime.tracealloc.func1:
 104efd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104efd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104efdd:	76 40 	jbe	64 <_runtime.tracealloc.func1+0x4f>
 104efdf:	48 83 ec 28 	sub	rsp, 40
 104efe3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104efe8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104efed:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104eff1:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104eff5:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104eff9:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104effd:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f002:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104f00b:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104f010:	e8 ab a5 ff ff 	call	-23125 <_runtime.traceback>
 104f015:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104f01a:	48 83 c4 28 	add	rsp, 40
 104f01e:	c3 	ret
 104f01f:	e8 0c 1b 00 00 	call	6924 <_runtime.morestack>
 104f024:	eb aa 	jmp	-86 <_runtime.tracealloc.func1>
 104f026:	cc 	int3
 104f027:	cc 	int3
 104f028:	cc 	int3
 104f029:	cc 	int3
 104f02a:	cc 	int3
 104f02b:	cc 	int3
 104f02c:	cc 	int3
 104f02d:	cc 	int3
 104f02e:	cc 	int3
 104f02f:	cc 	int3

_runtime.tracefree.func1:
 104f030:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f039:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f03d:	76 40 	jbe	64 <_runtime.tracefree.func1+0x4f>
 104f03f:	48 83 ec 28 	sub	rsp, 40
 104f043:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104f048:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104f04d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104f051:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104f055:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104f059:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104f05d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f062:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104f06b:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104f070:	e8 4b a5 ff ff 	call	-23221 <_runtime.traceback>
 104f075:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104f07a:	48 83 c4 28 	add	rsp, 40
 104f07e:	c3 	ret
 104f07f:	e8 ac 1a 00 00 	call	6828 <_runtime.morestack>
 104f084:	eb aa 	jmp	-86 <_runtime.tracefree.func1>
 104f086:	cc 	int3
 104f087:	cc 	int3
 104f088:	cc 	int3
 104f089:	cc 	int3
 104f08a:	cc 	int3
 104f08b:	cc 	int3
 104f08c:	cc 	int3
 104f08d:	cc 	int3
 104f08e:	cc 	int3
 104f08f:	cc 	int3

_runtime.wbBufFlush.func1:
 104f090:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f099:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f09d:	76 35 	jbe	53 <_runtime.wbBufFlush.func1+0x44>
 104f09f:	48 83 ec 10 	sub	rsp, 16
 104f0a3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104f0a8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104f0ad:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 104f0b6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 104f0ba:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 104f0c1:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f0c5:	e8 96 63 fd ff 	call	-171114 <_runtime.wbBufFlush1>
 104f0ca:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104f0cf:	48 83 c4 10 	add	rsp, 16
 104f0d3:	c3 	ret
 104f0d4:	e8 57 1a 00 00 	call	6743 <_runtime.morestack>
 104f0d9:	eb b5 	jmp	-75 <_runtime.wbBufFlush.func1>
 104f0db:	cc 	int3
 104f0dc:	cc 	int3
 104f0dd:	cc 	int3
 104f0de:	cc 	int3
 104f0df:	cc 	int3

_runtime.newdefer.func1:
 104f0e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f0e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f0ed:	0f 86 af 01 00 00 	jbe	431 <_runtime.newdefer.func1+0x1c2>
 104f0f3:	48 83 ec 70 	sub	rsp, 112
 104f0f7:	48 89 6c 24 68 	mov	qword ptr [rsp + 104], rbp
 104f0fc:	48 8d 6c 24 68 	lea	rbp, [rsp + 104]
 104f101:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104f105:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 104f10a:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104f10e:	48 89 4c 24 50 	mov	qword ptr [rsp + 80], rcx
 104f113:	48 8d 15 0e f6 07 00 	lea	rdx, [rip + 521742]
 104f11a:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104f11e:	e8 0d 90 fb ff 	call	-290803 <_runtime.lock>
 104f123:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 104f128:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104f12d:	84 00 	test	byte ptr [rax], al
 104f12f:	48 83 f9 05 	cmp	rcx, 5
 104f133:	0f 83 5b 01 00 00 	jae	347 <_runtime.newdefer.func1+0x1b4>
 104f139:	48 8d 14 49 	lea	rdx, [rcx + 2*rcx]
 104f13d:	48 8b 5c d0 78 	mov	rbx, qword ptr [rax + 8*rdx + 120]
 104f142:	48 8d 34 d0 	lea	rsi, [rax + 8*rdx]
 104f146:	48 8d 76 68 	lea	rsi, [rsi + 104]
 104f14a:	48 d1 eb 	shr	rbx
 104f14d:	48 39 5e 08 	cmp	qword ptr [rsi + 8], rbx
 104f151:	0f 8d 23 01 00 00 	jge	291 <_runtime.newdefer.func1+0x19a>
 104f157:	48 8d 1d d2 f5 07 00 	lea	rbx, [rip + 521682]
 104f15e:	4c 8b 04 cb 	mov	r8, qword ptr [rbx + 8*rcx]
 104f162:	4d 85 c0 	test	r8, r8
 104f165:	0f 84 0f 01 00 00 	je	271 <_runtime.newdefer.func1+0x19a>
 104f16b:	4d 8b 48 28 	mov	r9, qword ptr [r8 + 40]
 104f16f:	83 3d 8a 87 0a 00 00 	cmp	dword ptr [rip + 690058], 0
 104f176:	0f 85 dc 00 00 00 	jne	220 <_runtime.newdefer.func1+0x178>
 104f17c:	4c 89 0c cb 	mov	qword ptr [rbx + 8*rcx], r9
 104f180:	49 c7 40 28 00 00 00 00 	mov	qword ptr [r8 + 40], 0
 104f188:	48 8b 5c d0 68 	mov	rbx, qword ptr [rax + 8*rdx + 104]
 104f18d:	4c 8b 4c d0 78 	mov	r9, qword ptr [rax + 8*rdx + 120]
 104f192:	4c 8b 54 d0 70 	mov	r10, qword ptr [rax + 8*rdx + 112]
 104f197:	4d 8d 5a 01 	lea	r11, [r10 + 1]
 104f19b:	4d 39 cb 	cmp	r11, r9
 104f19e:	77 32 	ja	50 <_runtime.newdefer.func1+0xf2>
 104f1a0:	49 8d 72 01 	lea	rsi, [r10 + 1]
 104f1a4:	48 89 74 d0 70 	mov	qword ptr [rax + 8*rdx + 112], rsi
 104f1a9:	4a 8d 3c d3 	lea	rdi, [rbx + 8*r10]
 104f1ad:	83 3d 4c 87 0a 00 00 	cmp	dword ptr [rip + 689996], 0
 104f1b4:	75 09 	jne	9 <_runtime.newdefer.func1+0xdf>
 104f1b6:	4e 89 04 d3 	mov	qword ptr [rbx + 8*r10], r8
 104f1ba:	e9 6e ff ff ff 	jmp	-146 <_runtime.newdefer.func1+0x4d>
 104f1bf:	48 89 c2 	mov	rdx, rax
 104f1c2:	4c 89 c0 	mov	rax, r8
 104f1c5:	e8 16 38 00 00 	call	14358 <_runtime.gcWriteBarrier>
 104f1ca:	48 89 d0 	mov	rax, rdx
 104f1cd:	e9 5b ff ff ff 	jmp	-165 <_runtime.newdefer.func1+0x4d>
 104f1d2:	48 89 74 24 60 	mov	qword ptr [rsp + 96], rsi
 104f1d7:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 104f1dc:	48 89 54 24 48 	mov	qword ptr [rsp + 72], rdx
 104f1e1:	48 8d 05 58 d8 00 00 	lea	rax, [rip + 55384]
 104f1e8:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f1ec:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 104f1f1:	4c 89 54 24 10 	mov	qword ptr [rsp + 16], r10
 104f1f6:	4c 89 4c 24 18 	mov	qword ptr [rsp + 24], r9
 104f1fb:	4c 89 5c 24 20 	mov	qword ptr [rsp + 32], r11
 104f200:	e8 1b da fe ff 	call	-75237 <_runtime.growslice>
 104f205:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104f20a:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 104f20f:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 104f214:	48 8b 5c 24 48 	mov	rbx, qword ptr [rsp + 72]
 104f219:	48 8b 74 24 50 	mov	rsi, qword ptr [rsp + 80]
 104f21e:	48 89 54 de 78 	mov	qword ptr [rsi + 8*rbx + 120], rdx
 104f223:	83 3d d6 86 0a 00 00 	cmp	dword ptr [rip + 689878], 0
 104f22a:	75 20 	jne	32 <_runtime.newdefer.func1+0x16c>
 104f22c:	48 89 44 de 68 	mov	qword ptr [rsi + 8*rbx + 104], rax
 104f231:	48 89 da 	mov	rdx, rbx
 104f234:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 104f239:	49 89 ca 	mov	r10, rcx
 104f23c:	48 89 c3 	mov	rbx, rax
 104f23f:	48 89 f0 	mov	rax, rsi
 104f242:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104f247:	e9 54 ff ff ff 	jmp	-172 <_runtime.newdefer.func1+0xc0>
 104f24c:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 104f251:	e8 8a 37 00 00 	call	14218 <_runtime.gcWriteBarrier>
 104f256:	eb d9 	jmp	-39 <_runtime.newdefer.func1+0x151>
 104f258:	48 8d 3c cb 	lea	rdi, [rbx + 8*rcx]
 104f25c:	48 89 c3 	mov	rbx, rax
 104f25f:	4c 89 c8 	mov	rax, r9
 104f262:	e8 79 37 00 00 	call	14201 <_runtime.gcWriteBarrier>
 104f267:	49 8d 78 28 	lea	rdi, [r8 + 40]
 104f26b:	31 c0 	xor	eax, eax
 104f26d:	e8 6e 37 00 00 	call	14190 <_runtime.gcWriteBarrier>
 104f272:	48 89 d8 	mov	rax, rbx
 104f275:	e9 0e ff ff ff 	jmp	-242 <_runtime.newdefer.func1+0xa8>
 104f27a:	48 8d 05 a7 f4 07 00 	lea	rax, [rip + 521383]
 104f281:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f285:	e8 86 90 fb ff 	call	-290682 <_runtime.unlock>
 104f28a:	48 8b 6c 24 68 	mov	rbp, qword ptr [rsp + 104]
 104f28f:	48 83 c4 70 	add	rsp, 112
 104f293:	c3 	ret
 104f294:	48 89 c8 	mov	rax, rcx
 104f297:	b9 05 00 00 00 	mov	ecx, 5
 104f29c:	e8 bf 40 00 00 	call	16575 <_runtime.panicIndexU>
 104f2a1:	90 	nop
 104f2a2:	e8 89 18 00 00 	call	6281 <_runtime.morestack>
 104f2a7:	e9 34 fe ff ff 	jmp	-460 <_runtime.newdefer.func1>
 104f2ac:	cc 	int3
 104f2ad:	cc 	int3
 104f2ae:	cc 	int3
 104f2af:	cc 	int3

_runtime.newdefer.func2:
 104f2b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f2b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f2bd:	0f 86 3c 01 00 00 	jbe	316 <_runtime.newdefer.func2+0x14f>
 104f2c3:	48 83 ec 30 	sub	rsp, 48
 104f2c7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104f2cc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104f2d1:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 104f2d5:	48 63 52 08 	movsxd	rdx, dword ptr [rdx + 8]
 104f2d9:	48 83 fa 08 	cmp	rdx, 8
 104f2dd:	0f 87 ea 00 00 00 	ja	234 <_runtime.newdefer.func2+0x11d>
 104f2e3:	b8 50 00 00 00 	mov	eax, 80
 104f2e8:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 104f2ed:	48 3d 00 80 00 00 	cmp	rax, 32768
 104f2f3:	0f 83 b2 00 00 00 	jae	178 <_runtime.newdefer.func2+0xfb>
 104f2f9:	48 3d f8 03 00 00 	cmp	rax, 1016
 104f2ff:	77 7a 	ja	122 <_runtime.newdefer.func2+0xcb>
 104f301:	48 83 c0 07 	add	rax, 7
 104f305:	48 c1 e8 03 	shr	rax, 3
 104f309:	48 3d 81 00 00 00 	cmp	rax, 129
 104f30f:	0f 83 df 00 00 00 	jae	223 <_runtime.newdefer.func2+0x144>
 104f315:	48 8d 15 44 c1 07 00 	lea	rdx, [rip + 508228]
 104f31c:	0f b6 04 10 	movzx	eax, byte ptr [rax + rdx]
 104f320:	48 83 f8 43 	cmp	rax, 67
 104f324:	0f 83 c0 00 00 00 	jae	192 <_runtime.newdefer.func2+0x13a>
 104f32a:	48 8d 0d cf c1 07 00 	lea	rcx, [rip + 508367]
 104f331:	0f b7 04 41 	movzx	eax, word ptr [rcx + 2*rax]
 104f335:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f339:	48 8b 05 f0 ee 07 00 	mov	rax, qword ptr [rip + 519920]
 104f340:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f345:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 104f34a:	e8 61 a5 fb ff 	call	-285343 <_runtime.mallocgc>
 104f34f:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104f354:	83 3d a5 85 0a 00 00 	cmp	dword ptr [rip + 689573], 0
 104f35b:	75 12 	jne	18 <_runtime.newdefer.func2+0xbf>
 104f35d:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104f362:	48 89 01 	mov	qword ptr [rcx], rax
 104f365:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104f36a:	48 83 c4 30 	add	rsp, 48
 104f36e:	c3 	ret
 104f36f:	48 8b 7c 24 20 	mov	rdi, qword ptr [rsp + 32]
 104f374:	e8 67 36 00 00 	call	13927 <_runtime.gcWriteBarrier>
 104f379:	eb ea 	jmp	-22 <_runtime.newdefer.func2+0xb5>
 104f37b:	48 05 7f fc ff ff 	add	rax, -897
 104f381:	48 c1 e8 07 	shr	rax, 7
 104f385:	48 3d f9 00 00 00 	cmp	rax, 249
 104f38b:	73 53 	jae	83 <_runtime.newdefer.func2+0x130>
 104f38d:	48 8d 15 0c c2 07 00 	lea	rdx, [rip + 508428]
 104f394:	0f b6 04 10 	movzx	eax, byte ptr [rax + rdx]
 104f398:	48 83 f8 43 	cmp	rax, 67
 104f39c:	73 38 	jae	56 <_runtime.newdefer.func2+0x126>
 104f39e:	48 8d 0d 5b c1 07 00 	lea	rcx, [rip + 508251]
 104f3a5:	0f b7 04 41 	movzx	eax, word ptr [rcx + 2*rax]
 104f3a9:	eb 8a 	jmp	-118 <_runtime.newdefer.func2+0x85>
 104f3ab:	48 8d 88 00 20 00 00 	lea	rcx, [rax + 8192]
 104f3b2:	48 39 c1 	cmp	rcx, rax
 104f3b5:	0f 82 7a ff ff ff 	jb	-134 <_runtime.newdefer.func2+0x85>
 104f3bb:	90 	nop
 104f3bc:	48 05 ff 1f 00 00 	add	rax, 8191
 104f3c2:	48 25 00 e0 ff ff 	and	rax, -8192
 104f3c8:	e9 68 ff ff ff 	jmp	-152 <_runtime.newdefer.func2+0x85>
 104f3cd:	48 8d 42 48 	lea	rax, [rdx + 72]
 104f3d1:	e9 12 ff ff ff 	jmp	-238 <_runtime.newdefer.func2+0x38>
 104f3d6:	b9 43 00 00 00 	mov	ecx, 67
 104f3db:	e8 70 3f 00 00 	call	16240 <_runtime.panicIndex>
 104f3e0:	b9 f9 00 00 00 	mov	ecx, 249
 104f3e5:	e8 76 3f 00 00 	call	16246 <_runtime.panicIndexU>
 104f3ea:	b9 43 00 00 00 	mov	ecx, 67
 104f3ef:	e8 5c 3f 00 00 	call	16220 <_runtime.panicIndex>
 104f3f4:	b9 81 00 00 00 	mov	ecx, 129
 104f3f9:	e8 62 3f 00 00 	call	16226 <_runtime.panicIndexU>
 104f3fe:	90 	nop
 104f3ff:	e8 2c 17 00 00 	call	5932 <_runtime.morestack>
 104f404:	e9 a7 fe ff ff 	jmp	-345 <_runtime.newdefer.func2>
 104f409:	cc 	int3
 104f40a:	cc 	int3
 104f40b:	cc 	int3
 104f40c:	cc 	int3
 104f40d:	cc 	int3
 104f40e:	cc 	int3
 104f40f:	cc 	int3

_runtime.freedefer.func1:
 104f410:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f419:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f41d:	0f 86 73 01 00 00 	jbe	371 <_runtime.freedefer.func1+0x186>
 104f423:	48 83 ec 30 	sub	rsp, 48
 104f427:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104f42c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104f431:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104f435:	48 8b 5a 08 	mov	rbx, qword ptr [rdx + 8]
 104f439:	31 c9 	xor	ecx, ecx
 104f43b:	31 d2 	xor	edx, edx
 104f43d:	eb 03 	jmp	3 <_runtime.freedefer.func1+0x32>
 104f43f:	4c 89 d9 	mov	rcx, r11
 104f442:	84 03 	test	byte ptr [rbx], al
 104f444:	48 83 f8 05 	cmp	rax, 5
 104f448:	0f 83 3d 01 00 00 	jae	317 <_runtime.freedefer.func1+0x17b>
 104f44e:	48 8d 34 40 	lea	rsi, [rax + 2*rax]
 104f452:	4c 8b 44 f3 78 	mov	r8, qword ptr [rbx + 8*rsi + 120]
 104f457:	4c 8b 4c f3 70 	mov	r9, qword ptr [rbx + 8*rsi + 112]
 104f45c:	4c 8b 54 f3 68 	mov	r10, qword ptr [rbx + 8*rsi + 104]
 104f461:	49 d1 e8 	shr	r8
 104f464:	4d 39 c1 	cmp	r9, r8
 104f467:	0f 8e 86 00 00 00 	jle	134 <_runtime.freedefer.func1+0xe3>
 104f46d:	4d 8d 41 ff 	lea	r8, [r9 - 1]
 104f471:	4d 39 c8 	cmp	r8, r9
 104f474:	0f 83 06 01 00 00 	jae	262 <_runtime.freedefer.func1+0x170>
 104f47a:	4f 8b 5c ca f8 	mov	r11, qword ptr [r10 + 8*r9 - 8]
 104f47f:	4b 8d 3c ca 	lea	rdi, [r10 + 8*r9]
 104f483:	48 8d 7f f8 	lea	rdi, [rdi - 8]
 104f487:	83 3d 72 84 0a 00 00 	cmp	dword ptr [rip + 689266], 0
 104f48e:	75 54 	jne	84 <_runtime.freedefer.func1+0xd4>
 104f490:	4b c7 44 ca f8 00 00 00 00 	mov	qword ptr [r10 + 8*r9 - 8], 0
 104f499:	4c 8b 4c f3 78 	mov	r9, qword ptr [rbx + 8*rsi + 120]
 104f49e:	4d 39 c8 	cmp	r8, r9
 104f4a1:	0f 87 ce 00 00 00 	ja	206 <_runtime.freedefer.func1+0x165>
 104f4a7:	4c 89 44 f3 70 	mov	qword ptr [rbx + 8*rsi + 112], r8
 104f4ac:	48 85 d2 	test	rdx, rdx
 104f4af:	74 2b 	je	43 <_runtime.freedefer.func1+0xcc>
 104f4b1:	84 01 	test	byte ptr [rcx], al
 104f4b3:	83 3d 46 84 0a 00 00 	cmp	dword ptr [rip + 689222], 0
 104f4ba:	75 09 	jne	9 <_runtime.freedefer.func1+0xb5>
 104f4bc:	4c 89 59 28 	mov	qword ptr [rcx + 40], r11
 104f4c0:	e9 7a ff ff ff 	jmp	-134 <_runtime.freedefer.func1+0x2f>
 104f4c5:	48 8d 79 28 	lea	rdi, [rcx + 40]
 104f4c9:	48 89 c1 	mov	rcx, rax
 104f4cc:	4c 89 d8 	mov	rax, r11
 104f4cf:	e8 0c 35 00 00 	call	13580 <_runtime.gcWriteBarrier>
 104f4d4:	48 89 c8 	mov	rax, rcx
 104f4d7:	e9 63 ff ff ff 	jmp	-157 <_runtime.freedefer.func1+0x2f>
 104f4dc:	4c 89 da 	mov	rdx, r11
 104f4df:	e9 5b ff ff ff 	jmp	-165 <_runtime.freedefer.func1+0x2f>
 104f4e4:	49 89 c1 	mov	r9, rax
 104f4e7:	31 c0 	xor	eax, eax
 104f4e9:	e8 f2 34 00 00 	call	13554 <_runtime.gcWriteBarrier>
 104f4ee:	4c 89 c8 	mov	rax, r9
 104f4f1:	eb a6 	jmp	-90 <_runtime.freedefer.func1+0x89>
 104f4f3:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104f4f8:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104f4fd:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104f502:	48 8d 05 1f f2 07 00 	lea	rax, [rip + 520735]
 104f509:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f50d:	e8 1e 8c fb ff 	call	-291810 <_runtime.lock>
 104f512:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104f517:	84 00 	test	byte ptr [rax], al
 104f519:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 104f51e:	48 8d 15 0b f2 07 00 	lea	rdx, [rip + 520715]
 104f525:	48 8b 1c ca 	mov	rbx, qword ptr [rdx + 8*rcx]
 104f529:	83 3d d0 83 0a 00 00 	cmp	dword ptr [rip + 689104], 0
 104f530:	75 27 	jne	39 <_runtime.freedefer.func1+0x149>
 104f532:	48 89 58 28 	mov	qword ptr [rax + 40], rbx
 104f536:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104f53b:	48 89 04 ca 	mov	qword ptr [rdx + 8*rcx], rax
 104f53f:	48 8d 05 e2 f1 07 00 	lea	rax, [rip + 520674]
 104f546:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f54a:	e8 c1 8d fb ff 	call	-291391 <_runtime.unlock>
 104f54f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104f554:	48 83 c4 30 	add	rsp, 48
 104f558:	c3 	ret
 104f559:	48 8d 78 28 	lea	rdi, [rax + 40]
 104f55d:	48 89 d8 	mov	rax, rbx
 104f560:	e8 7b 34 00 00 	call	13435 <_runtime.gcWriteBarrier>
 104f565:	48 8d 3c ca 	lea	rdi, [rdx + 8*rcx]
 104f569:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104f56e:	e8 6d 34 00 00 	call	13421 <_runtime.gcWriteBarrier>
 104f573:	eb ca 	jmp	-54 <_runtime.freedefer.func1+0x12f>
 104f575:	4c 89 c1 	mov	rcx, r8
 104f578:	4c 89 ca 	mov	rdx, r9
 104f57b:	e8 10 3e 00 00 	call	15888 <_runtime.panicSliceAcap>
 104f580:	4c 89 c0 	mov	rax, r8
 104f583:	4c 89 c9 	mov	rcx, r9
 104f586:	e8 c5 3d 00 00 	call	15813 <_runtime.panicIndex>
 104f58b:	b9 05 00 00 00 	mov	ecx, 5
 104f590:	e8 cb 3d 00 00 	call	15819 <_runtime.panicIndexU>
 104f595:	90 	nop
 104f596:	e8 95 15 00 00 	call	5525 <_runtime.morestack>
 104f59b:	e9 70 fe ff ff 	jmp	-400 <_runtime.freedefer.func1>

_runtime.preprintpanics.func1:
 104f5a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f5a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f5ad:	76 48 	jbe	72 <_runtime.preprintpanics.func1+0x57>
 104f5af:	48 83 ec 20 	sub	rsp, 32
 104f5b3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104f5b8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104f5bd:	48 8d 44 24 28 	lea	rax, [rsp + 40]
 104f5c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f5c6:	e8 45 97 fd ff 	call	-157883 <_runtime.gorecover>
 104f5cb:	48 83 7c 24 08 00 	cmp	qword ptr [rsp + 8], 0
 104f5d1:	75 0a 	jne	10 <_runtime.preprintpanics.func1+0x3d>
 104f5d3:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104f5d8:	48 83 c4 20 	add	rsp, 32
 104f5dc:	c3 	ret
 104f5dd:	48 8d 05 da 65 02 00 	lea	rax, [rip + 157146]
 104f5e4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f5e8:	48 c7 44 24 08 20 00 00 00 	mov	qword ptr [rsp + 8], 32
 104f5f1:	e8 6a 97 fd ff 	call	-157846 <_runtime.throw>
 104f5f6:	90 	nop
 104f5f7:	e8 d4 15 00 00 	call	5588 <_runtime.morestack_noctxt>
 104f5fc:	eb a2 	jmp	-94 <_runtime.preprintpanics.func1>
 104f5fe:	cc 	int3
 104f5ff:	cc 	int3

_runtime.addOneOpenDeferFrame.func1.1:
 104f600:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f609:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f60d:	0f 86 1e 02 00 00 	jbe	542 <_runtime.addOneOpenDeferFrame.func1.1+0x231>
 104f613:	48 83 ec 48 	sub	rsp, 72
 104f617:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 104f61c:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 104f621:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104f625:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104f62a:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104f62e:	48 85 c9 	test	rcx, rcx
 104f631:	0f 84 bd 01 00 00 	je	445 <_runtime.addOneOpenDeferFrame.func1.1+0x1f4>
 104f637:	48 8b 49 08 	mov	rcx, qword ptr [rcx + 8]
 104f63b:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 104f640:	48 39 4a 28 	cmp	qword ptr [rdx + 40], rcx
 104f644:	0f 84 9b 01 00 00 	je	411 <_runtime.addOneOpenDeferFrame.func1.1+0x1e5>
 104f64a:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104f64e:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 104f651:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104f655:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f65a:	c6 44 24 10 05 	mov	byte ptr [rsp + 16], 5
 104f65f:	e8 1c 33 ff ff 	call	-52452 <_runtime.funcdata>
 104f664:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104f669:	48 85 c0 	test	rax, rax
 104f66c:	0f 84 64 01 00 00 	je	356 <_runtime.addOneOpenDeferFrame.func1.1+0x1d6>
 104f672:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104f677:	48 8b 51 28 	mov	rdx, qword ptr [rcx + 40]
 104f67b:	48 8b 5c 24 50 	mov	rbx, qword ptr [rsp + 80]
 104f680:	31 f6 	xor	esi, esi
 104f682:	eb 0a 	jmp	10 <_runtime.addOneOpenDeferFrame.func1.1+0x8e>
 104f684:	48 8b 7a 28 	mov	rdi, qword ptr [rdx + 40]
 104f688:	48 89 d6 	mov	rsi, rdx
 104f68b:	48 89 fa 	mov	rdx, rdi
 104f68e:	48 85 d2 	test	rdx, rdx
 104f691:	74 2b 	je	43 <_runtime.addOneOpenDeferFrame.func1.1+0xbe>
 104f693:	48 8b 7a 08 	mov	rdi, qword ptr [rdx + 8]
 104f697:	4c 8b 43 28 	mov	r8, qword ptr [rbx + 40]
 104f69b:	49 39 f8 	cmp	r8, rdi
 104f69e:	72 1e 	jb	30 <_runtime.addOneOpenDeferFrame.func1.1+0xbe>
 104f6a0:	4c 39 c7 	cmp	rdi, r8
 104f6a3:	75 df 	jne	-33 <_runtime.addOneOpenDeferFrame.func1.1+0x84>
 104f6a5:	80 7a 06 00 	cmp	byte ptr [rdx + 6], 0
 104f6a9:	0f 84 68 01 00 00 	je	360 <_runtime.addOneOpenDeferFrame.func1.1+0x217>
 104f6af:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 104f6b4:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 104f6b9:	48 83 c4 48 	add	rsp, 72
 104f6bd:	c3 	ret
 104f6be:	48 8b 3b 	mov	rdi, qword ptr [rbx]
 104f6c1:	83 7f 10 00 	cmp	dword ptr [rdi + 16], 0
 104f6c5:	0f 84 33 01 00 00 	je	307 <_runtime.addOneOpenDeferFrame.func1.1+0x1fe>
 104f6cb:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104f6d0:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104f6d5:	48 89 74 24 38 	mov	qword ptr [rsp + 56], rsi
 104f6da:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f6de:	e8 7d 89 fd ff 	call	-161411 <_runtime.readvarintUnsafe>
 104f6e3:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 104f6e7:	89 04 24 	mov	dword ptr [rsp], eax
 104f6ea:	e8 a1 7f fd ff 	call	-163935 <_runtime.newdefer>
 104f6ef:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 104f6f4:	c6 40 06 01 	mov	byte ptr [rax + 6], 1
 104f6f8:	48 c7 40 20 00 00 00 00 	mov	qword ptr [rax + 32], 0
 104f700:	48 8b 4c 24 50 	mov	rcx, qword ptr [rsp + 80]
 104f705:	48 8b 11 	mov	rdx, qword ptr [rcx]
 104f708:	8b 5a 10 	mov	ebx, dword ptr [rdx + 16]
 104f70b:	48 03 1a 	add	rbx, qword ptr [rdx]
 104f70e:	48 89 58 10 	mov	qword ptr [rax + 16], rbx
 104f712:	48 8b 51 38 	mov	rdx, qword ptr [rcx + 56]
 104f716:	48 89 50 38 	mov	qword ptr [rax + 56], rdx
 104f71a:	83 3d df 81 0a 00 00 	cmp	dword ptr [rip + 688607], 0
 104f721:	0f 85 96 00 00 00 	jne	150 <_runtime.addOneOpenDeferFrame.func1.1+0x1bd>
 104f727:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 104f72c:	48 89 50 30 	mov	qword ptr [rax + 48], rdx
 104f730:	48 8b 51 10 	mov	rdx, qword ptr [rcx + 16]
 104f734:	48 89 50 40 	mov	qword ptr [rax + 64], rdx
 104f738:	48 8b 49 28 	mov	rcx, qword ptr [rcx + 40]
 104f73c:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 104f740:	83 3d b9 81 0a 00 00 	cmp	dword ptr [rip + 688569], 0
 104f747:	75 5e 	jne	94 <_runtime.addOneOpenDeferFrame.func1.1+0x1a7>
 104f749:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 104f74e:	48 89 48 28 	mov	qword ptr [rax + 40], rcx
 104f752:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 104f757:	48 85 c9 	test	rcx, rcx
 104f75a:	74 27 	je	39 <_runtime.addOneOpenDeferFrame.func1.1+0x183>
 104f75c:	83 3d 9d 81 0a 00 00 	cmp	dword ptr [rip + 688541], 0
 104f763:	75 13 	jne	19 <_runtime.addOneOpenDeferFrame.func1.1+0x178>
 104f765:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 104f769:	c6 44 24 60 00 	mov	byte ptr [rsp + 96], 0
 104f76e:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 104f773:	48 83 c4 48 	add	rsp, 72
 104f777:	c3 	ret
 104f778:	48 8d 79 28 	lea	rdi, [rcx + 40]
 104f77c:	e8 5f 32 00 00 	call	12895 <_runtime.gcWriteBarrier>
 104f781:	eb e6 	jmp	-26 <_runtime.addOneOpenDeferFrame.func1.1+0x169>
 104f783:	83 3d 76 81 0a 00 00 	cmp	dword ptr [rip + 688502], 0
 104f78a:	75 0b 	jne	11 <_runtime.addOneOpenDeferFrame.func1.1+0x197>
 104f78c:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104f791:	48 89 41 28 	mov	qword ptr [rcx + 40], rax
 104f795:	eb d2 	jmp	-46 <_runtime.addOneOpenDeferFrame.func1.1+0x169>
 104f797:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 104f79c:	48 8d 79 28 	lea	rdi, [rcx + 40]
 104f7a0:	e8 3b 32 00 00 	call	12859 <_runtime.gcWriteBarrier>
 104f7a5:	eb c2 	jmp	-62 <_runtime.addOneOpenDeferFrame.func1.1+0x169>
 104f7a7:	48 8d 78 28 	lea	rdi, [rax + 40]
 104f7ab:	48 89 c1 	mov	rcx, rax
 104f7ae:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104f7b3:	e8 28 32 00 00 	call	12840 <_runtime.gcWriteBarrier>
 104f7b8:	48 89 c8 	mov	rax, rcx
 104f7bb:	eb 95 	jmp	-107 <_runtime.addOneOpenDeferFrame.func1.1+0x152>
 104f7bd:	48 8d 78 30 	lea	rdi, [rax + 48]
 104f7c1:	48 89 c2 	mov	rdx, rax
 104f7c4:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104f7c9:	e8 12 32 00 00 	call	12818 <_runtime.gcWriteBarrier>
 104f7ce:	48 89 d0 	mov	rax, rdx
 104f7d1:	e9 5a ff ff ff 	jmp	-166 <_runtime.addOneOpenDeferFrame.func1.1+0x130>
 104f7d6:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 104f7db:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 104f7e0:	48 83 c4 48 	add	rsp, 72
 104f7e4:	c3 	ret
 104f7e5:	c6 44 24 60 01 	mov	byte ptr [rsp + 96], 1
 104f7ea:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 104f7ef:	48 83 c4 48 	add	rsp, 72
 104f7f3:	c3 	ret
 104f7f4:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 104f7f9:	e9 4c fe ff ff 	jmp	-436 <_runtime.addOneOpenDeferFrame.func1.1+0x4a>
 104f7fe:	48 8d 05 e6 47 02 00 	lea	rax, [rip + 149478]
 104f805:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f809:	48 c7 44 24 08 13 00 00 00 	mov	qword ptr [rsp + 8], 19
 104f812:	e8 49 95 fd ff 	call	-158391 <_runtime.throw>
 104f817:	48 8d 05 54 4d 02 00 	lea	rax, [rip + 150868]
 104f81e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f822:	48 c7 44 24 08 16 00 00 00 	mov	qword ptr [rsp + 8], 22
 104f82b:	e8 30 95 fd ff 	call	-158416 <_runtime.throw>
 104f830:	90 	nop
 104f831:	e8 fa 12 00 00 	call	4858 <_runtime.morestack>
 104f836:	e9 c5 fd ff ff 	jmp	-571 <_runtime.addOneOpenDeferFrame.func1.1>
 104f83b:	cc 	int3
 104f83c:	cc 	int3
 104f83d:	cc 	int3
 104f83e:	cc 	int3
 104f83f:	cc 	int3

_runtime.addOneOpenDeferFrame.func1:
 104f840:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f849:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f84d:	0f 86 88 00 00 00 	jbe	136 <_runtime.addOneOpenDeferFrame.func1+0x9b>
 104f853:	48 83 ec 78 	sub	rsp, 120
 104f857:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 104f85c:	48 8d 6c 24 70 	lea	rbp, [rsp + 112]
 104f861:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104f865:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104f869:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 104f86d:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104f871:	0f 57 c0 	xorps	xmm0, xmm0
 104f874:	0f 11 44 24 58 	movups	xmmword ptr [rsp + 88], xmm0
 104f879:	48 c7 44 24 68 00 00 00 00 	mov	qword ptr [rsp + 104], 0
 104f882:	48 8d 35 77 fd ff ff 	lea	rsi, [rip - 649]
 104f889:	48 89 74 24 58 	mov	qword ptr [rsp + 88], rsi
 104f88e:	48 89 5c 24 60 	mov	qword ptr [rsp + 96], rbx
 104f893:	48 89 4c 24 68 	mov	qword ptr [rsp + 104], rcx
 104f898:	48 89 14 24 	mov	qword ptr [rsp], rdx
 104f89c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f8a1:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 104f8aa:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104f8af:	0f 11 44 24 20 	movups	xmmword ptr [rsp + 32], xmm0
 104f8b4:	48 c7 44 24 30 ff ff ff 7f 	mov	qword ptr [rsp + 48], 2147483647
 104f8bd:	48 8d 44 24 58 	lea	rax, [rsp + 88]
 104f8c2:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104f8c7:	0f 11 44 24 40 	movups	xmmword ptr [rsp + 64], xmm0
 104f8cc:	e8 cf 7b ff ff 	call	-33841 <_runtime.gentraceback>
 104f8d1:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 104f8d6:	48 83 c4 78 	add	rsp, 120
 104f8da:	c3 	ret
 104f8db:	e8 50 12 00 00 	call	4688 <_runtime.morestack>
 104f8e0:	e9 5b ff ff ff 	jmp	-165 <_runtime.addOneOpenDeferFrame.func1>
 104f8e5:	cc 	int3
 104f8e6:	cc 	int3
 104f8e7:	cc 	int3
 104f8e8:	cc 	int3
 104f8e9:	cc 	int3
 104f8ea:	cc 	int3
 104f8eb:	cc 	int3
 104f8ec:	cc 	int3
 104f8ed:	cc 	int3
 104f8ee:	cc 	int3
 104f8ef:	cc 	int3

_runtime.throw.func1:
 104f8f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f8f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f8fd:	76 6a 	jbe	106 <_runtime.throw.func1+0x79>
 104f8ff:	48 83 ec 28 	sub	rsp, 40
 104f903:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104f908:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104f90d:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104f911:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104f916:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 104f91a:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104f91f:	e8 7c ab fd ff 	call	-152708 <_runtime.printlock>
 104f924:	48 8d 05 27 3e 02 00 	lea	rax, [rip + 146983]
 104f92b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f92f:	48 c7 44 24 08 0d 00 00 00 	mov	qword ptr [rsp + 8], 13
 104f938:	e8 a3 b4 fd ff 	call	-150365 <_runtime.printstring>
 104f93d:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104f942:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f946:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104f94b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f950:	e8 8b b4 fd ff 	call	-150389 <_runtime.printstring>
 104f955:	e8 d6 ad fd ff 	call	-152106 <_runtime.printnl>
 104f95a:	e8 c1 ab fd ff 	call	-152639 <_runtime.printunlock>
 104f95f:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 104f964:	48 83 c4 28 	add	rsp, 40
 104f968:	c3 	ret
 104f969:	e8 c2 11 00 00 	call	4546 <_runtime.morestack>
 104f96e:	eb 80 	jmp	-128 <_runtime.throw.func1>

_runtime.fatalthrow.func1:
 104f970:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104f979:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104f97d:	76 6d 	jbe	109 <_runtime.fatalthrow.func1+0x7c>
 104f97f:	48 83 ec 40 	sub	rsp, 64
 104f983:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104f988:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104f98d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104f991:	48 89 44 24 28 	mov	qword ptr [rsp + 40], rax
 104f996:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104f99a:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 104f99f:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104f9a3:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 104f9a8:	e8 a3 96 fd ff 	call	-158045 <_runtime.startpanic_m>
 104f9ad:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104f9b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104f9b6:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104f9bb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104f9c0:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104f9c5:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104f9ca:	e8 21 98 fd ff 	call	-157663 <_runtime.dopanic_m>
 104f9cf:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 104f9d4:	74 00 	je	0 <_runtime.fatalthrow.func1+0x66>
 104f9d6:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 104f9dd:	e8 be 37 ff ff 	call	-51266 <_runtime.exit>
 104f9e2:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 104f9e7:	48 83 c4 40 	add	rsp, 64
 104f9eb:	c3 	ret
 104f9ec:	e8 3f 11 00 00 	call	4415 <_runtime.morestack>
 104f9f1:	e9 7a ff ff ff 	jmp	-134 <_runtime.fatalthrow.func1>
 104f9f6:	cc 	int3
 104f9f7:	cc 	int3
 104f9f8:	cc 	int3
 104f9f9:	cc 	int3
 104f9fa:	cc 	int3
 104f9fb:	cc 	int3
 104f9fc:	cc 	int3
 104f9fd:	cc 	int3
 104f9fe:	cc 	int3
 104f9ff:	cc 	int3

_runtime.fatalpanic.func1:
 104fa00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fa09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fa0d:	0f 86 a3 00 00 00 	jbe	163 <_runtime.fatalpanic.func1+0xb6>
 104fa13:	48 83 ec 50 	sub	rsp, 80
 104fa17:	48 89 6c 24 48 	mov	qword ptr [rsp + 72], rbp
 104fa1c:	48 8d 6c 24 48 	lea	rbp, [rsp + 72]
 104fa21:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104fa25:	48 89 44 24 38 	mov	qword ptr [rsp + 56], rax
 104fa2a:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 104fa2e:	48 89 4c 24 28 	mov	qword ptr [rsp + 40], rcx
 104fa33:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 104fa37:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 104fa3c:	48 8b 72 28 	mov	rsi, qword ptr [rdx + 40]
 104fa40:	48 89 74 24 40 	mov	qword ptr [rsp + 64], rsi
 104fa45:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104fa49:	48 89 54 24 30 	mov	qword ptr [rsp + 48], rdx
 104fa4e:	e8 fd 95 fd ff 	call	-158211 <_runtime.startpanic_m>
 104fa53:	80 3c 24 00 	cmp	byte ptr [rsp], 0
 104fa57:	74 0a 	je	10 <_runtime.fatalpanic.func1+0x63>
 104fa59:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104fa5e:	48 85 c0 	test	rax, rax
 104fa61:	75 38 	jne	56 <_runtime.fatalpanic.func1+0x9b>
 104fa63:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104fa68:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fa6c:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104fa71:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104fa76:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104fa7b:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104fa80:	e8 6b 97 fd ff 	call	-157845 <_runtime.dopanic_m>
 104fa85:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 104fa8a:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 104fa8f:	88 01 	mov	byte ptr [rcx], al
 104fa91:	48 8b 6c 24 48 	mov	rbp, qword ptr [rsp + 72]
 104fa96:	48 83 c4 50 	add	rsp, 80
 104fa9a:	c3 	ret
 104fa9b:	b9 ff ff ff ff 	mov	ecx, 4294967295
 104faa0:	48 8d 15 19 7d 0a 00 	lea	rdx, [rip + 687385]
 104faa7:	f0 	lock
 104faa8:	0f c1 0a 	xadd	dword ptr [rdx], ecx
 104faab:	48 89 04 24 	mov	qword ptr [rsp], rax
 104faaf:	e8 cc 83 fd ff 	call	-162868 <_runtime.printpanics>
 104fab4:	eb ad 	jmp	-83 <_runtime.fatalpanic.func1+0x63>
 104fab6:	e8 75 10 00 00 	call	4213 <_runtime.morestack>
 104fabb:	e9 40 ff ff ff 	jmp	-192 <_runtime.fatalpanic.func1>

_runtime.fatalpanic.func2:
 104fac0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fac9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104facd:	76 24 	jbe	36 <_runtime.fatalpanic.func2+0x33>
 104facf:	48 83 ec 10 	sub	rsp, 16
 104fad3:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 104fad8:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 104fadd:	c7 04 24 02 00 00 00 	mov	dword ptr [rsp], 2
 104fae4:	e8 b7 36 ff ff 	call	-51529 <_runtime.exit>
 104fae9:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 104faee:	48 83 c4 10 	add	rsp, 16
 104faf2:	c3 	ret
 104faf3:	e8 d8 10 00 00 	call	4312 <_runtime.morestack_noctxt>
 104faf8:	eb c6 	jmp	-58 <_runtime.fatalpanic.func2>
 104fafa:	cc 	int3
 104fafb:	cc 	int3
 104fafc:	cc 	int3
 104fafd:	cc 	int3
 104fafe:	cc 	int3
 104faff:	cc 	int3

_runtime.hexdumpWords.func1:
 104fb00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fb09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fb0d:	76 7a 	jbe	122 <_runtime.hexdumpWords.func1+0x89>
 104fb0f:	48 83 ec 30 	sub	rsp, 48
 104fb13:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104fb18:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104fb1d:	0f 57 c0 	xorps	xmm0, xmm0
 104fb20:	0f 11 44 24 18 	movups	xmmword ptr [rsp + 24], xmm0
 104fb25:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 104fb2a:	b9 0f 00 00 00 	mov	ecx, 15
 104fb2f:	eb 0a 	jmp	10 <_runtime.hexdumpWords.func1+0x3b>
 104fb31:	48 ff c9 	dec	rcx
 104fb34:	48 c1 ea 04 	shr	rdx, 4
 104fb38:	48 89 d0 	mov	rax, rdx
 104fb3b:	48 85 c9 	test	rcx, rcx
 104fb3e:	7c 1f 	jl	31 <_runtime.hexdumpWords.func1+0x5f>
 104fb40:	48 89 c2 	mov	rdx, rax
 104fb43:	48 83 e0 0f 	and	rax, 15
 104fb47:	48 83 f8 0a 	cmp	rax, 10
 104fb4b:	73 09 	jae	9 <_runtime.hexdumpWords.func1+0x56>
 104fb4d:	83 c0 30 	add	eax, 48
 104fb50:	88 44 0c 18 	mov	byte ptr [rsp + rcx + 24], al
 104fb54:	eb db 	jmp	-37 <_runtime.hexdumpWords.func1+0x31>
 104fb56:	83 c0 57 	add	eax, 87
 104fb59:	88 44 0c 18 	mov	byte ptr [rsp + rcx + 24], al
 104fb5d:	eb d2 	jmp	-46 <_runtime.hexdumpWords.func1+0x31>
 104fb5f:	48 8d 44 24 18 	lea	rax, [rsp + 24]
 104fb64:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fb68:	48 c7 44 24 08 10 00 00 00 	mov	qword ptr [rsp + 8], 16
 104fb71:	48 c7 44 24 10 10 00 00 00 	mov	qword ptr [rsp + 16], 16
 104fb7a:	e8 11 aa fd ff 	call	-153071 <_runtime.gwrite>
 104fb7f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 104fb84:	48 83 c4 30 	add	rsp, 48
 104fb88:	c3 	ret
 104fb89:	e8 42 10 00 00 	call	4162 <_runtime.morestack_noctxt>
 104fb8e:	e9 6d ff ff ff 	jmp	-147 <_runtime.hexdumpWords.func1>
 104fb93:	cc 	int3
 104fb94:	cc 	int3
 104fb95:	cc 	int3
 104fb96:	cc 	int3
 104fb97:	cc 	int3
 104fb98:	cc 	int3
 104fb99:	cc 	int3
 104fb9a:	cc 	int3
 104fb9b:	cc 	int3
 104fb9c:	cc 	int3
 104fb9d:	cc 	int3
 104fb9e:	cc 	int3
 104fb9f:	cc 	int3

_runtime.main.func1:
 104fba0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fba9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fbad:	76 31 	jbe	49 <_runtime.main.func1+0x40>
 104fbaf:	48 83 ec 18 	sub	rsp, 24
 104fbb3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 104fbb8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 104fbbd:	48 8d 05 bc 7e 02 00 	lea	rax, [rip + 163516]
 104fbc4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fbc8:	48 c7 44 24 08 00 00 00 00 	mov	qword ptr [rsp + 8], 0
 104fbd1:	e8 da ef fd ff 	call	-135206 <_runtime.newm>
 104fbd6:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 104fbdb:	48 83 c4 18 	add	rsp, 24
 104fbdf:	c3 	ret
 104fbe0:	e8 eb 0f 00 00 	call	4075 <_runtime.morestack_noctxt>
 104fbe5:	eb b9 	jmp	-71 <_runtime.main.func1>
 104fbe7:	cc 	int3
 104fbe8:	cc 	int3
 104fbe9:	cc 	int3
 104fbea:	cc 	int3
 104fbeb:	cc 	int3
 104fbec:	cc 	int3
 104fbed:	cc 	int3
 104fbee:	cc 	int3
 104fbef:	cc 	int3

_runtime.main.func2:
 104fbf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fbf9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fbfd:	76 26 	jbe	38 <_runtime.main.func2+0x35>
 104fbff:	48 83 ec 08 	sub	rsp, 8
 104fc03:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 104fc07:	48 8d 2c 24 	lea	rbp, [rsp]
 104fc0b:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104fc10:	80 38 00 	cmp	byte ptr [rax], 0
 104fc13:	75 09 	jne	9 <_runtime.main.func2+0x2e>
 104fc15:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 104fc19:	48 83 c4 08 	add	rsp, 8
 104fc1d:	c3 	ret
 104fc1e:	e8 5d 40 fe ff 	call	-114595 <_runtime.unlockOSThread>
 104fc23:	eb f0 	jmp	-16 <_runtime.main.func2+0x25>
 104fc25:	e8 a6 0f 00 00 	call	4006 <_runtime.morestack_noctxt>
 104fc2a:	eb c4 	jmp	-60 <_runtime.main.func2>
 104fc2c:	cc 	int3
 104fc2d:	cc 	int3
 104fc2e:	cc 	int3
 104fc2f:	cc 	int3

_runtime.goready.func1:
 104fc30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fc39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fc3d:	76 33 	jbe	51 <_runtime.goready.func1+0x42>
 104fc3f:	48 83 ec 20 	sub	rsp, 32
 104fc43:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 104fc48:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 104fc4d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104fc51:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104fc55:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 104fc59:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 104fc5e:	c6 44 24 10 01 	mov	byte ptr [rsp + 16], 1
 104fc63:	e8 f8 cd fd ff 	call	-143880 <_runtime.ready>
 104fc68:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 104fc6d:	48 83 c4 20 	add	rsp, 32
 104fc71:	c3 	ret
 104fc72:	e8 b9 0e 00 00 	call	3769 <_runtime.morestack>
 104fc77:	eb b7 	jmp	-73 <_runtime.goready.func1>
 104fc79:	cc 	int3
 104fc7a:	cc 	int3
 104fc7b:	cc 	int3
 104fc7c:	cc 	int3
 104fc7d:	cc 	int3
 104fc7e:	cc 	int3
 104fc7f:	cc 	int3

_runtime.casgstatus.func1:
 104fc80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fc89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fc8d:	0f 86 95 00 00 00 	jbe	149 <_runtime.casgstatus.func1+0xa8>
 104fc93:	48 83 ec 28 	sub	rsp, 40
 104fc97:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 104fc9c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 104fca1:	8b 42 0c 	mov	eax, dword ptr [rdx + 12]
 104fca4:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 104fca9:	8b 4a 08 	mov	ecx, dword ptr [rdx + 8]
 104fcac:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104fcb1:	e8 ea a7 fd ff 	call	-153622 <_runtime.printlock>
 104fcb6:	48 8d 05 44 57 02 00 	lea	rax, [rip + 153412]
 104fcbd:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fcc1:	48 c7 44 24 08 1c 00 00 00 	mov	qword ptr [rsp + 8], 28
 104fcca:	e8 11 b1 fd ff 	call	-151279 <_runtime.printstring>
 104fccf:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104fcd4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fcd8:	e8 b3 af fd ff 	call	-151629 <_runtime.printhex>
 104fcdd:	48 8d 05 03 33 02 00 	lea	rax, [rip + 144131]
 104fce4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fce8:	48 c7 44 24 08 08 00 00 00 	mov	qword ptr [rsp + 8], 8
 104fcf1:	e8 ea b0 fd ff 	call	-151318 <_runtime.printstring>
 104fcf6:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104fcfb:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fcff:	e8 8c af fd ff 	call	-151668 <_runtime.printhex>
 104fd04:	e8 27 aa fd ff 	call	-153049 <_runtime.printnl>
 104fd09:	e8 12 a8 fd ff 	call	-153582 <_runtime.printunlock>
 104fd0e:	48 8d 05 75 5c 02 00 	lea	rax, [rip + 154741]
 104fd15:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fd19:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 104fd22:	e8 39 90 fd ff 	call	-159687 <_runtime.throw>
 104fd27:	90 	nop
 104fd28:	e8 03 0e 00 00 	call	3587 <_runtime.morestack>
 104fd2d:	e9 4e ff ff ff 	jmp	-178 <_runtime.casgstatus.func1>
 104fd32:	cc 	int3
 104fd33:	cc 	int3
 104fd34:	cc 	int3
 104fd35:	cc 	int3
 104fd36:	cc 	int3
 104fd37:	cc 	int3
 104fd38:	cc 	int3
 104fd39:	cc 	int3
 104fd3a:	cc 	int3
 104fd3b:	cc 	int3
 104fd3c:	cc 	int3
 104fd3d:	cc 	int3
 104fd3e:	cc 	int3
 104fd3f:	cc 	int3

_runtime.reentersyscall.func1:
 104fd40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fd49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fd4d:	0f 86 de 00 00 00 	jbe	222 <_runtime.reentersyscall.func1+0xf1>
 104fd53:	48 83 ec 30 	sub	rsp, 48
 104fd57:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 104fd5c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 104fd61:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 104fd65:	48 8b 48 70 	mov	rcx, qword ptr [rax + 112]
 104fd69:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 104fd6e:	48 8b 10 	mov	rdx, qword ptr [rax]
 104fd71:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 104fd76:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 104fd7a:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 104fd7f:	e8 1c a7 fd ff 	call	-153828 <_runtime.printlock>
 104fd84:	48 8d 05 6c 50 02 00 	lea	rax, [rip + 151660]
 104fd8b:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fd8f:	48 c7 44 24 08 1a 00 00 00 	mov	qword ptr [rsp + 8], 26
 104fd98:	e8 43 b0 fd ff 	call	-151485 <_runtime.printstring>
 104fd9d:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104fda2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fda6:	e8 e5 ae fd ff 	call	-151835 <_runtime.printhex>
 104fdab:	48 8d 05 bc 2e 02 00 	lea	rax, [rip + 143036]
 104fdb2:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fdb6:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104fdbf:	e8 1c b0 fd ff 	call	-151524 <_runtime.printstring>
 104fdc4:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104fdc9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fdcd:	e8 be ae fd ff 	call	-151874 <_runtime.printhex>
 104fdd2:	48 8d 05 83 2e 02 00 	lea	rax, [rip + 142979]
 104fdd9:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fddd:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104fde6:	e8 f5 af fd ff 	call	-151563 <_runtime.printstring>
 104fdeb:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104fdf0:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fdf4:	e8 97 ae fd ff 	call	-151913 <_runtime.printhex>
 104fdf9:	48 8d 05 82 2e 02 00 	lea	rax, [rip + 142978]
 104fe00:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fe04:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104fe0d:	e8 ce af fd ff 	call	-151602 <_runtime.printstring>
 104fe12:	e8 09 a7 fd ff 	call	-153847 <_runtime.printunlock>
 104fe17:	48 8d 05 a9 37 02 00 	lea	rax, [rip + 145321]
 104fe1e:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fe22:	48 c7 44 24 08 0c 00 00 00 	mov	qword ptr [rsp + 8], 12
 104fe2b:	e8 30 8f fd ff 	call	-159952 <_runtime.throw>
 104fe30:	90 	nop
 104fe31:	e8 fa 0c 00 00 	call	3322 <_runtime.morestack>
 104fe36:	e9 05 ff ff ff 	jmp	-251 <_runtime.reentersyscall.func1>
 104fe3b:	cc 	int3
 104fe3c:	cc 	int3
 104fe3d:	cc 	int3
 104fe3e:	cc 	int3
 104fe3f:	cc 	int3

_runtime.entersyscallblock.func1:
 104fe40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104fe49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104fe4d:	0f 86 16 01 00 00 	jbe	278 <_runtime.entersyscallblock.func1+0x129>
 104fe53:	48 83 ec 40 	sub	rsp, 64
 104fe57:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104fe5c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104fe61:	48 8b 42 20 	mov	rax, qword ptr [rdx + 32]
 104fe65:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 104fe69:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 104fe6e:	48 8b 5a 18 	mov	rbx, qword ptr [rdx + 24]
 104fe72:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 104fe77:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 104fe7b:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 104fe80:	48 8b 30 	mov	rsi, qword ptr [rax]
 104fe83:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 104fe88:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 104fe8c:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104fe91:	e8 0a a6 fd ff 	call	-154102 <_runtime.printlock>
 104fe96:	48 8d 05 2b 5b 02 00 	lea	rax, [rip + 154411]
 104fe9d:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fea1:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 104feaa:	e8 31 af fd ff 	call	-151759 <_runtime.printstring>
 104feaf:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 104feb4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104feb8:	e8 d3 ad fd ff 	call	-152109 <_runtime.printhex>
 104febd:	e8 1e a8 fd ff 	call	-153570 <_runtime.printsp>
 104fec2:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 104fec7:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fecb:	e8 c0 ad fd ff 	call	-152128 <_runtime.printhex>
 104fed0:	e8 0b a8 fd ff 	call	-153589 <_runtime.printsp>
 104fed5:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104feda:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fede:	e8 ad ad fd ff 	call	-152147 <_runtime.printhex>
 104fee3:	48 8d 05 84 2d 02 00 	lea	rax, [rip + 142724]
 104feea:	48 89 04 24 	mov	qword ptr [rsp], rax
 104feee:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104fef7:	e8 e4 ae fd ff 	call	-151836 <_runtime.printstring>
 104fefc:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 104ff01:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ff05:	e8 86 ad fd ff 	call	-152186 <_runtime.printhex>
 104ff0a:	48 8d 05 4b 2d 02 00 	lea	rax, [rip + 142667]
 104ff11:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ff15:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 104ff1e:	e8 bd ae fd ff 	call	-151875 <_runtime.printstring>
 104ff23:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 104ff28:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ff2c:	e8 5f ad fd ff 	call	-152225 <_runtime.printhex>
 104ff31:	48 8d 05 4a 2d 02 00 	lea	rax, [rip + 142666]
 104ff38:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ff3c:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 104ff45:	e8 96 ae fd ff 	call	-151914 <_runtime.printstring>
 104ff4a:	e8 d1 a5 fd ff 	call	-154159 <_runtime.printunlock>
 104ff4f:	48 8d 05 74 3d 02 00 	lea	rax, [rip + 146804]
 104ff56:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ff5a:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 104ff63:	e8 f8 8d fd ff 	call	-160264 <_runtime.throw>
 104ff68:	90 	nop
 104ff69:	e8 c2 0b 00 00 	call	3010 <_runtime.morestack>
 104ff6e:	e9 cd fe ff ff 	jmp	-307 <_runtime.entersyscallblock.func1>
 104ff73:	cc 	int3
 104ff74:	cc 	int3
 104ff75:	cc 	int3
 104ff76:	cc 	int3
 104ff77:	cc 	int3
 104ff78:	cc 	int3
 104ff79:	cc 	int3
 104ff7a:	cc 	int3
 104ff7b:	cc 	int3
 104ff7c:	cc 	int3
 104ff7d:	cc 	int3
 104ff7e:	cc 	int3
 104ff7f:	cc 	int3

_runtime.entersyscallblock.func2:
 104ff80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 104ff89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 104ff8d:	0f 86 16 01 00 00 	jbe	278 <_runtime.entersyscallblock.func2+0x129>
 104ff93:	48 83 ec 40 	sub	rsp, 64
 104ff97:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 104ff9c:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 104ffa1:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 104ffa5:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 104ffa9:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 104ffae:	48 8b 50 38 	mov	rdx, qword ptr [rax + 56]
 104ffb2:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 104ffb7:	48 8b 58 70 	mov	rbx, qword ptr [rax + 112]
 104ffbb:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 104ffc0:	48 8b 30 	mov	rsi, qword ptr [rax]
 104ffc3:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 104ffc8:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 104ffcc:	48 89 44 24 30 	mov	qword ptr [rsp + 48], rax
 104ffd1:	e8 ca a4 fd ff 	call	-154422 <_runtime.printlock>
 104ffd6:	48 8d 05 eb 59 02 00 	lea	rax, [rip + 154091]
 104ffdd:	48 89 04 24 	mov	qword ptr [rsp], rax
 104ffe1:	48 c7 44 24 08 1f 00 00 00 	mov	qword ptr [rsp + 8], 31
 104ffea:	e8 f1 ad fd ff 	call	-152079 <_runtime.printstring>
 104ffef:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 104fff4:	48 89 04 24 	mov	qword ptr [rsp], rax
 104fff8:	e8 93 ac fd ff 	call	-152429 <_runtime.printhex>
 104fffd:	e8 de a6 fd ff 	call	-153890 <_runtime.printsp>
 1050002:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1050007:	48 89 04 24 	mov	qword ptr [rsp], rax
 105000b:	e8 80 ac fd ff 	call	-152448 <_runtime.printhex>
 1050010:	e8 cb a6 fd ff 	call	-153909 <_runtime.printsp>
 1050015:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 105001a:	48 89 04 24 	mov	qword ptr [rsp], rax
 105001e:	e8 6d ac fd ff 	call	-152467 <_runtime.printhex>
 1050023:	48 8d 05 44 2c 02 00 	lea	rax, [rip + 142404]
 105002a:	48 89 04 24 	mov	qword ptr [rsp], rax
 105002e:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1050037:	e8 a4 ad fd ff 	call	-152156 <_runtime.printstring>
 105003c:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1050041:	48 89 04 24 	mov	qword ptr [rsp], rax
 1050045:	e8 46 ac fd ff 	call	-152506 <_runtime.printhex>
 105004a:	48 8d 05 0b 2c 02 00 	lea	rax, [rip + 142347]
 1050051:	48 89 04 24 	mov	qword ptr [rsp], rax
 1050055:	48 c7 44 24 08 01 00 00 00 	mov	qword ptr [rsp + 8], 1
 105005e:	e8 7d ad fd ff 	call	-152195 <_runtime.printstring>
 1050063:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1050068:	48 89 04 24 	mov	qword ptr [rsp], rax
 105006c:	e8 1f ac fd ff 	call	-152545 <_runtime.printhex>
 1050071:	48 8d 05 0a 2c 02 00 	lea	rax, [rip + 142346]
 1050078:	48 89 04 24 	mov	qword ptr [rsp], rax
 105007c:	48 c7 44 24 08 02 00 00 00 	mov	qword ptr [rsp + 8], 2
 1050085:	e8 56 ad fd ff 	call	-152234 <_runtime.printstring>
 105008a:	e8 91 a4 fd ff 	call	-154479 <_runtime.printunlock>
 105008f:	48 8d 05 34 3c 02 00 	lea	rax, [rip + 146484]
 1050096:	48 89 04 24 	mov	qword ptr [rsp], rax
 105009a:	48 c7 44 24 08 11 00 00 00 	mov	qword ptr [rsp + 8], 17
 10500a3:	e8 b8 8c fd ff 	call	-160584 <_runtime.throw>
 10500a8:	90 	nop
 10500a9:	e8 82 0a 00 00 	call	2690 <_runtime.morestack>
 10500ae:	e9 cd fe ff ff 	jmp	-307 <_runtime.entersyscallblock.func2>
 10500b3:	cc 	int3
 10500b4:	cc 	int3
 10500b5:	cc 	int3
 10500b6:	cc 	int3
 10500b7:	cc 	int3
 10500b8:	cc 	int3
 10500b9:	cc 	int3
 10500ba:	cc 	int3
 10500bb:	cc 	int3
 10500bc:	cc 	int3
 10500bd:	cc 	int3
 10500be:	cc 	int3
 10500bf:	cc 	int3

_runtime.exitsyscallfast.func1:
 10500c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10500c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10500cd:	0f 86 8f 00 00 00 	jbe	143 <_runtime.exitsyscallfast.func1+0xa2>
 10500d3:	48 83 ec 28 	sub	rsp, 40
 10500d7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10500dc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10500e1:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 10500e5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10500ea:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 10500ee:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10500f3:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 10500f7:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 10500fc:	e8 4f 2b fe ff 	call	-119985 <_runtime.exitsyscallfast_pidle>
 1050101:	0f b6 04 24 	movzx	eax, byte ptr [rsp]
 1050105:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 105010a:	88 01 	mov	byte ptr [rcx], al
 105010c:	84 c0 	test	al, al
 105010e:	74 48 	je	72 <_runtime.exitsyscallfast.func1+0x98>
 1050110:	80 3d 19 4e 08 00 00 	cmp	byte ptr [rip + 544281], 0
 1050117:	74 3f 	je	63 <_runtime.exitsyscallfast.func1+0x98>
 1050119:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105011e:	48 85 c0 	test	rax, rax
 1050121:	75 14 	jne	20 <_runtime.exitsyscallfast.func1+0x77>
 1050123:	eb 26 	jmp	38 <_runtime.exitsyscallfast.func1+0x8b>
 1050125:	90 	nop
 1050126:	c7 04 24 01 00 00 00 	mov	dword ptr [rsp], 1
 105012d:	e8 ae 30 ff ff 	call	-53074 <_runtime.usleep>
 1050132:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1050137:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 105013c:	48 8b 51 30 	mov	rdx, qword ptr [rcx + 48]
 1050140:	8b 92 a4 02 00 00 	mov	edx, dword ptr [rdx + 676]
 1050146:	39 50 14 	cmp	dword ptr [rax + 20], edx
 1050149:	74 da 	je	-38 <_runtime.exitsyscallfast.func1+0x65>
 105014b:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1050153:	e8 18 6e ff ff 	call	-37352 <_runtime.traceGoSysExit>
 1050158:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105015d:	48 83 c4 28 	add	rsp, 40
 1050161:	c3 	ret
 1050162:	e8 c9 09 00 00 	call	2505 <_runtime.morestack>
 1050167:	e9 54 ff ff ff 	jmp	-172 <_runtime.exitsyscallfast.func1>
 105016c:	cc 	int3
 105016d:	cc 	int3
 105016e:	cc 	int3
 105016f:	cc 	int3

_runtime.exitsyscallfast_reacquired.func1:
 1050170:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050179:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105017d:	76 3d 	jbe	61 <_runtime.exitsyscallfast_reacquired.func1+0x4c>
 105017f:	48 83 ec 10 	sub	rsp, 16
 1050183:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1050188:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 105018d:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 1050191:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 1050195:	48 8b 80 d0 00 00 00 	mov	rax, qword ptr [rax + 208]
 105019c:	48 89 04 24 	mov	qword ptr [rsp], rax
 10501a0:	e8 ab 6e ff ff 	call	-37205 <_runtime.traceGoSysBlock>
 10501a5:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 10501ad:	e8 be 6d ff ff 	call	-37442 <_runtime.traceGoSysExit>
 10501b2:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 10501b7:	48 83 c4 10 	add	rsp, 16
 10501bb:	c3 	ret
 10501bc:	e8 6f 09 00 00 	call	2415 <_runtime.morestack>
 10501c1:	eb ad 	jmp	-83 <_runtime.exitsyscallfast_reacquired.func1>
 10501c3:	cc 	int3
 10501c4:	cc 	int3
 10501c5:	cc 	int3
 10501c6:	cc 	int3
 10501c7:	cc 	int3
 10501c8:	cc 	int3
 10501c9:	cc 	int3
 10501ca:	cc 	int3
 10501cb:	cc 	int3
 10501cc:	cc 	int3
 10501cd:	cc 	int3
 10501ce:	cc 	int3
 10501cf:	cc 	int3

_runtime.malg.func1:
 10501d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10501d9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10501dd:	76 42 	jbe	66 <_runtime.malg.func1+0x51>
 10501df:	48 83 ec 28 	sub	rsp, 40
 10501e3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10501e8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10501ed:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 10501f1:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10501f6:	8b 4a 08 	mov	ecx, dword ptr [rdx + 8]
 10501f9:	89 0c 24 	mov	dword ptr [rsp], ecx
 10501fc:	e8 ef d7 fe ff 	call	-75793 <_runtime.stackalloc>
 1050201:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1050206:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 105020b:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 1050210:	48 89 02 	mov	qword ptr [rdx], rax
 1050213:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 1050217:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105021c:	48 83 c4 28 	add	rsp, 40
 1050220:	c3 	ret
 1050221:	e8 0a 09 00 00 	call	2314 <_runtime.morestack>
 1050226:	eb a8 	jmp	-88 <_runtime.malg.func1>
 1050228:	cc 	int3
 1050229:	cc 	int3
 105022a:	cc 	int3
 105022b:	cc 	int3
 105022c:	cc 	int3
 105022d:	cc 	int3
 105022e:	cc 	int3
 105022f:	cc 	int3

_runtime.newproc.func1:
 1050230:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050239:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105023d:	76 4a 	jbe	74 <_runtime.newproc.func1+0x59>
 105023f:	48 83 ec 30 	sub	rsp, 48
 1050243:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1050248:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 105024d:	48 8b 42 10 	mov	rax, qword ptr [rdx + 16]
 1050251:	8b 4a 18 	mov	ecx, dword ptr [rdx + 24]
 1050254:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 1050258:	48 8b 72 28 	mov	rsi, qword ptr [rdx + 40]
 105025c:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 1050260:	48 8b 12 	mov	rdx, qword ptr [rdx]
 1050263:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1050267:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 105026c:	89 4c 24 10 	mov	dword ptr [rsp + 16], ecx
 1050270:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1050275:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 105027a:	e8 f1 2d fe ff 	call	-119311 <_runtime.newproc1>
 105027f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1050284:	48 83 c4 30 	add	rsp, 48
 1050288:	c3 	ret
 1050289:	e8 a2 08 00 00 	call	2210 <_runtime.morestack>
 105028e:	eb a0 	jmp	-96 <_runtime.newproc.func1>

_runtime.gfget.func1:
 1050290:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050299:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105029d:	76 43 	jbe	67 <_runtime.gfget.func1+0x52>
 105029f:	48 83 ec 28 	sub	rsp, 40
 10502a3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10502a8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10502ad:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 10502b1:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10502b6:	c7 04 24 00 08 00 00 	mov	dword ptr [rsp], 2048
 10502bd:	e8 2e d7 fe ff 	call	-75986 <_runtime.stackalloc>
 10502c2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10502c7:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10502cc:	48 8b 54 24 18 	mov	rdx, qword ptr [rsp + 24]
 10502d1:	48 89 02 	mov	qword ptr [rdx], rax
 10502d4:	48 89 4a 08 	mov	qword ptr [rdx + 8], rcx
 10502d8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10502dd:	48 83 c4 28 	add	rsp, 40
 10502e1:	c3 	ret
 10502e2:	e8 49 08 00 00 	call	2121 <_runtime.morestack>
 10502e7:	eb a7 	jmp	-89 <_runtime.gfget.func1>
 10502e9:	cc 	int3
 10502ea:	cc 	int3
 10502eb:	cc 	int3
 10502ec:	cc 	int3
 10502ed:	cc 	int3
 10502ee:	cc 	int3
 10502ef:	cc 	int3

_runtime.(*p).destroy.func1:
 10502f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10502f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10502fd:	0f 86 95 00 00 00 	jbe	149 <_runtime.(*p).destroy.func1+0xa8>
 1050303:	48 83 ec 18 	sub	rsp, 24
 1050307:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 105030c:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1050311:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 1050315:	31 c0 	xor	eax, eax
 1050317:	eb 31 	jmp	49 <_runtime.(*p).destroy.func1+0x5a>
 1050319:	48 8b 9c c2 30 12 00 00 	mov	rbx, qword ptr [rdx + 8*rax + 4656]
 1050321:	48 8b 35 e0 72 0a 00 	mov	rsi, qword ptr [rip + 684768]
 1050328:	48 2b 35 a9 72 0a 00 	sub	rsi, qword ptr [rip + 684713]
 105032f:	48 89 35 d2 72 0a 00 	mov	qword ptr [rip + 684754], rsi
 1050336:	48 8b 35 b3 72 0a 00 	mov	rsi, qword ptr [rip + 684723]
 105033d:	48 89 33 	mov	qword ptr [rbx], rsi
 1050340:	48 89 1d a9 72 0a 00 	mov	qword ptr [rip + 684713], rbx
 1050347:	48 ff c0 	inc	rax
 105034a:	84 02 	test	byte ptr [rdx], al
 105034c:	48 39 82 28 12 00 00 	cmp	qword ptr [rdx + 4648], rax
 1050353:	7e 0a 	jle	10 <_runtime.(*p).destroy.func1+0x6f>
 1050355:	48 3d 80 00 00 00 	cmp	rax, 128
 105035b:	72 bc 	jb	-68 <_runtime.(*p).destroy.func1+0x29>
 105035d:	eb 2e 	jmp	46 <_runtime.(*p).destroy.func1+0x9d>
 105035f:	48 c7 82 28 12 00 00 00 00 00 00 	mov	qword ptr [rdx + 4648], 0
 105036a:	48 8d 42 48 	lea	rax, [rdx + 72]
 105036e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1050372:	48 8d 05 8f 4c 09 00 	lea	rax, [rip + 609423]
 1050379:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 105037e:	e8 9d 1f fd ff 	call	-188515 <_runtime.(*pageCache).flush>
 1050383:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1050388:	48 83 c4 18 	add	rsp, 24
 105038c:	c3 	ret
 105038d:	b9 80 00 00 00 	mov	ecx, 128
 1050392:	e8 b9 2f 00 00 	call	12217 <_runtime.panicIndex>
 1050397:	90 	nop
 1050398:	e8 93 07 00 00 	call	1939 <_runtime.morestack>
 105039d:	e9 4e ff ff ff 	jmp	-178 <_runtime.(*p).destroy.func1>
 10503a2:	cc 	int3
 10503a3:	cc 	int3
 10503a4:	cc 	int3
 10503a5:	cc 	int3
 10503a6:	cc 	int3
 10503a7:	cc 	int3
 10503a8:	cc 	int3
 10503a9:	cc 	int3
 10503aa:	cc 	int3
 10503ab:	cc 	int3
 10503ac:	cc 	int3
 10503ad:	cc 	int3
 10503ae:	cc 	int3
 10503af:	cc 	int3

_runtime.(*rwmutex).rlock.func1:
 10503b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10503b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10503bd:	0f 86 99 00 00 00 	jbe	153 <_runtime.(*rwmutex).rlock.func1+0xac>
 10503c3:	48 83 ec 20 	sub	rsp, 32
 10503c7:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10503cc:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10503d1:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 10503d5:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10503da:	84 00 	test	byte ptr [rax], al
 10503dc:	48 89 04 24 	mov	qword ptr [rsp], rax
 10503e0:	e8 4b 7d fb ff 	call	-295605 <_runtime.lock>
 10503e5:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10503ea:	8b 48 10 	mov	ecx, dword ptr [rax + 16]
 10503ed:	85 c9 	test	ecx, ecx
 10503ef:	76 18 	jbe	24 <_runtime.(*rwmutex).rlock.func1+0x59>
 10503f1:	ff c9 	dec	ecx
 10503f3:	89 48 10 	mov	dword ptr [rax + 16], ecx
 10503f6:	48 89 04 24 	mov	qword ptr [rsp], rax
 10503fa:	e8 11 7f fb ff 	call	-295151 <_runtime.unlock>
 10503ff:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 1050404:	48 83 c4 20 	add	rsp, 32
 1050408:	c3 	ret
 1050409:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050412:	48 8b 49 30 	mov	rcx, qword ptr [rcx + 48]
 1050416:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 105041b:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 105041f:	48 89 91 58 01 00 00 	mov	qword ptr [rcx + 344], rdx
 1050426:	90 	nop
 1050427:	48 89 48 08 	mov	qword ptr [rax + 8], rcx
 105042b:	48 89 04 24 	mov	qword ptr [rsp], rax
 105042f:	e8 dc 7e fb ff 	call	-295204 <_runtime.unlock>
 1050434:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1050439:	48 8d 88 48 01 00 00 	lea	rcx, [rax + 328]
 1050440:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1050444:	e8 27 80 fb ff 	call	-294873 <_runtime.notesleep>
 1050449:	90 	nop
 105044a:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 105044f:	48 c7 80 48 01 00 00 00 00 00 00 	mov	qword ptr [rax + 328], 0
 105045a:	eb a3 	jmp	-93 <_runtime.(*rwmutex).rlock.func1+0x4f>
 105045c:	e8 cf 06 00 00 	call	1743 <_runtime.morestack>
 1050461:	e9 4a ff ff ff 	jmp	-182 <_runtime.(*rwmutex).rlock.func1>
 1050466:	cc 	int3
 1050467:	cc 	int3
 1050468:	cc 	int3
 1050469:	cc 	int3
 105046a:	cc 	int3
 105046b:	cc 	int3
 105046c:	cc 	int3
 105046d:	cc 	int3
 105046e:	cc 	int3
 105046f:	cc 	int3

_runtime.callers.func1:
 1050470:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050479:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105047d:	0f 86 8f 00 00 00 	jbe	143 <_runtime.callers.func1+0xa2>
 1050483:	48 83 ec 68 	sub	rsp, 104
 1050487:	48 89 6c 24 60 	mov	qword ptr [rsp + 96], rbp
 105048c:	48 8d 6c 24 60 	lea	rbp, [rsp + 96]
 1050491:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 1050495:	48 8b 72 18 	mov	rsi, qword ptr [rdx + 24]
 1050499:	48 8b 7a 20 	mov	rdi, qword ptr [rdx + 32]
 105049d:	4c 8b 42 40 	mov	r8, qword ptr [rdx + 64]
 10504a1:	4c 8b 4a 08 	mov	r9, qword ptr [rdx + 8]
 10504a5:	4c 8b 52 28 	mov	r10, qword ptr [rdx + 40]
 10504a9:	48 8b 4a 30 	mov	rcx, qword ptr [rdx + 48]
 10504ad:	48 85 c9 	test	rcx, rcx
 10504b0:	76 58 	jbe	88 <_runtime.callers.func1+0x9a>
 10504b2:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 10504b7:	4c 89 0c 24 	mov	qword ptr [rsp], r9
 10504bb:	48 89 5c 24 08 	mov	qword ptr [rsp + 8], rbx
 10504c0:	48 c7 44 24 10 00 00 00 00 	mov	qword ptr [rsp + 16], 0
 10504c9:	48 89 74 24 18 	mov	qword ptr [rsp + 24], rsi
 10504ce:	48 89 7c 24 20 	mov	qword ptr [rsp + 32], rdi
 10504d3:	4c 89 54 24 28 	mov	qword ptr [rsp + 40], r10
 10504d8:	48 89 4c 24 30 	mov	qword ptr [rsp + 48], rcx
 10504dd:	0f 57 c0 	xorps	xmm0, xmm0
 10504e0:	0f 11 44 24 38 	movups	xmmword ptr [rsp + 56], xmm0
 10504e5:	48 c7 44 24 48 00 00 00 00 	mov	qword ptr [rsp + 72], 0
 10504ee:	e8 ad 6f ff ff 	call	-36947 <_runtime.gentraceback>
 10504f3:	48 8b 44 24 50 	mov	rax, qword ptr [rsp + 80]
 10504f8:	48 8b 4c 24 58 	mov	rcx, qword ptr [rsp + 88]
 10504fd:	48 89 01 	mov	qword ptr [rcx], rax
 1050500:	48 8b 6c 24 60 	mov	rbp, qword ptr [rsp + 96]
 1050505:	48 83 c4 68 	add	rsp, 104
 1050509:	c3 	ret
 105050a:	31 c0 	xor	eax, eax
 105050c:	e8 3f 2e 00 00 	call	11839 <_runtime.panicIndex>
 1050511:	90 	nop
 1050512:	e8 19 06 00 00 	call	1561 <_runtime.morestack>
 1050517:	e9 54 ff ff ff 	jmp	-172 <_runtime.callers.func1>
 105051c:	cc 	int3
 105051d:	cc 	int3
 105051e:	cc 	int3
 105051f:	cc 	int3

_runtime.tracebackHexdump.func1:
 1050520:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 1050524:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 1050528:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 105052d:	48 39 50 30 	cmp	qword ptr [rax + 48], rdx
 1050531:	74 1d 	je	29 <_runtime.tracebackHexdump.func1+0x30>
 1050533:	48 39 50 28 	cmp	qword ptr [rax + 40], rdx
 1050537:	74 11 	je	17 <_runtime.tracebackHexdump.func1+0x2a>
 1050539:	48 39 d1 	cmp	rcx, rdx
 105053c:	75 06 	jne	6 <_runtime.tracebackHexdump.func1+0x24>
 105053e:	c6 44 24 10 21 	mov	byte ptr [rsp + 16], 33
 1050543:	c3 	ret
 1050544:	c6 44 24 10 00 	mov	byte ptr [rsp + 16], 0
 1050549:	c3 	ret
 105054a:	c6 44 24 10 3c 	mov	byte ptr [rsp + 16], 60
 105054f:	c3 	ret
 1050550:	c6 44 24 10 3e 	mov	byte ptr [rsp + 16], 62
 1050555:	c3 	ret
 1050556:	cc 	int3
 1050557:	cc 	int3
 1050558:	cc 	int3
 1050559:	cc 	int3
 105055a:	cc 	int3
 105055b:	cc 	int3
 105055c:	cc 	int3
 105055d:	cc 	int3
 105055e:	cc 	int3
 105055f:	cc 	int3

_runtime.init:
 1050560:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050569:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105056d:	0f 86 b3 01 00 00 	jbe	435 <_runtime.init+0x1c6>
 1050573:	48 83 ec 20 	sub	rsp, 32
 1050577:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 105057c:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 1050581:	48 b8 00 00 00 00 00 00 f0 7f 	movabs	rax, 9218868437227405312
 105058b:	48 89 04 24 	mov	qword ptr [rsp], rax
 105058f:	e8 5c 68 fb ff 	call	-300964 <_runtime.float64frombits>
 1050594:	f2 0f 10 44 24 08 	movsd	xmm0, qword ptr [rsp + 8]
 105059a:	f2 0f 11 05 a6 72 0a 00 	movsd	qword ptr [rip + 684710], xmm0
 10505a2:	48 8d 05 d7 c2 07 00 	lea	rax, [rip + 508631]
 10505a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10505ad:	e8 de 88 fe ff 	call	-96034 <_runtime.efaceOf>
 10505b2:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10505b7:	48 8b 00 	mov	rax, qword ptr [rax]
 10505ba:	83 3d 3f 73 0a 00 00 	cmp	dword ptr [rip + 684863], 0
 10505c1:	0f 85 4e 01 00 00 	jne	334 <_runtime.init+0x1b5>
 10505c7:	48 89 05 d2 dc 07 00 	mov	qword ptr [rip + 515282], rax
 10505ce:	48 8d 05 bb c2 07 00 	lea	rax, [rip + 508603]
 10505d5:	48 89 04 24 	mov	qword ptr [rsp], rax
 10505d9:	e8 b2 88 fe ff 	call	-96078 <_runtime.efaceOf>
 10505de:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10505e3:	48 8b 00 	mov	rax, qword ptr [rax]
 10505e6:	83 3d 13 73 0a 00 00 	cmp	dword ptr [rip + 684819], 0
 10505ed:	0f 85 11 01 00 00 	jne	273 <_runtime.init+0x1a4>
 10505f3:	48 89 05 ae dc 07 00 	mov	qword ptr [rip + 515246], rax
 10505fa:	48 8d 05 9f c2 07 00 	lea	rax, [rip + 508575]
 1050601:	48 89 04 24 	mov	qword ptr [rsp], rax
 1050605:	e8 86 88 fe ff 	call	-96122 <_runtime.efaceOf>
 105060a:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105060f:	48 8b 00 	mov	rax, qword ptr [rax]
 1050612:	83 3d e7 72 0a 00 00 	cmp	dword ptr [rip + 684775], 0
 1050619:	0f 85 d4 00 00 00 	jne	212 <_runtime.init+0x193>
 105061f:	48 89 05 8a dc 07 00 	mov	qword ptr [rip + 515210], rax
 1050626:	48 8d 05 43 c2 07 00 	lea	rax, [rip + 508483]
 105062d:	48 89 04 24 	mov	qword ptr [rsp], rax
 1050631:	e8 5a 88 fe ff 	call	-96166 <_runtime.efaceOf>
 1050636:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105063b:	48 8b 00 	mov	rax, qword ptr [rax]
 105063e:	83 3d bb 72 0a 00 00 	cmp	dword ptr [rip + 684731], 0
 1050645:	0f 85 97 00 00 00 	jne	151 <_runtime.init+0x182>
 105064b:	48 89 05 2e dc 07 00 	mov	qword ptr [rip + 515118], rax
 1050652:	48 8d 05 07 c2 07 00 	lea	rax, [rip + 508423]
 1050659:	48 89 04 24 	mov	qword ptr [rsp], rax
 105065d:	e8 2e 88 fe ff 	call	-96210 <_runtime.efaceOf>
 1050662:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1050667:	48 8b 00 	mov	rax, qword ptr [rax]
 105066a:	83 3d 8f 72 0a 00 00 	cmp	dword ptr [rip + 684687], 0
 1050671:	75 61 	jne	97 <_runtime.init+0x174>
 1050673:	48 89 05 fe db 07 00 	mov	qword ptr [rip + 515070], rax
 105067a:	48 8d 05 3f 2f 01 00 	lea	rax, [rip + 77631]
 1050681:	48 89 04 24 	mov	qword ptr [rsp], rax
 1050685:	48 8d 05 fc 70 02 00 	lea	rax, [rip + 159996]
 105068c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1050691:	e8 7a b9 fd ff 	call	-149126 <_runtime.funcPC>
 1050696:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 105069b:	48 89 05 6e 71 0a 00 	mov	qword ptr [rip + 684398], rax
 10506a2:	48 8d 05 b7 2e 01 00 	lea	rax, [rip + 77495]
 10506a9:	48 89 04 24 	mov	qword ptr [rsp], rax
 10506ad:	48 8d 05 cc 70 02 00 	lea	rax, [rip + 159948]
 10506b4:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10506b9:	e8 52 b9 fd ff 	call	-149166 <_runtime.funcPC>
 10506be:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10506c3:	48 89 05 3e 71 0a 00 	mov	qword ptr [rip + 684350], rax
 10506ca:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10506cf:	48 83 c4 20 	add	rsp, 32
 10506d3:	c3 	ret
 10506d4:	48 8d 3d 9d db 07 00 	lea	rdi, [rip + 514973]
 10506db:	e8 00 23 00 00 	call	8960 <_runtime.gcWriteBarrier>
 10506e0:	eb 98 	jmp	-104 <_runtime.init+0x11a>
 10506e2:	48 8d 3d 97 db 07 00 	lea	rdi, [rip + 514967]
 10506e9:	e8 f2 22 00 00 	call	8946 <_runtime.gcWriteBarrier>
 10506ee:	e9 5f ff ff ff 	jmp	-161 <_runtime.init+0xf2>
 10506f3:	48 8d 3d b6 db 07 00 	lea	rdi, [rip + 514998]
 10506fa:	e8 e1 22 00 00 	call	8929 <_runtime.gcWriteBarrier>
 10506ff:	e9 22 ff ff ff 	jmp	-222 <_runtime.init+0xc6>
 1050704:	48 8d 3d 9d db 07 00 	lea	rdi, [rip + 514973]
 105070b:	e8 d0 22 00 00 	call	8912 <_runtime.gcWriteBarrier>
 1050710:	e9 e5 fe ff ff 	jmp	-283 <_runtime.init+0x9a>
 1050715:	48 8d 3d 84 db 07 00 	lea	rdi, [rip + 514948]
 105071c:	e8 bf 22 00 00 	call	8895 <_runtime.gcWriteBarrier>
 1050721:	e9 a8 fe ff ff 	jmp	-344 <_runtime.init+0x6e>
 1050726:	e8 a5 04 00 00 	call	1189 <_runtime.morestack_noctxt>
 105072b:	e9 30 fe ff ff 	jmp	-464 <_runtime.init>

_runtime.skipPleaseUseCallersFrames:
 1050730:	90 	nop
 1050731:	90 	nop
 1050732:	90 	nop
 1050733:	90 	nop
 1050734:	90 	nop
 1050735:	90 	nop
 1050736:	90 	nop
 1050737:	90 	nop
 1050738:	90 	nop
 1050739:	90 	nop
 105073a:	90 	nop
 105073b:	90 	nop
 105073c:	90 	nop
 105073d:	90 	nop
 105073e:	90 	nop
 105073f:	90 	nop
 1050740:	90 	nop
 1050741:	90 	nop
 1050742:	90 	nop
 1050743:	90 	nop
 1050744:	90 	nop
 1050745:	90 	nop
 1050746:	90 	nop
 1050747:	90 	nop
 1050748:	90 	nop
 1050749:	90 	nop
 105074a:	90 	nop
 105074b:	90 	nop
 105074c:	90 	nop
 105074d:	90 	nop
 105074e:	90 	nop
 105074f:	90 	nop
 1050750:	90 	nop
 1050751:	90 	nop
 1050752:	90 	nop
 1050753:	90 	nop
 1050754:	90 	nop
 1050755:	90 	nop
 1050756:	90 	nop
 1050757:	90 	nop
 1050758:	90 	nop
 1050759:	90 	nop
 105075a:	90 	nop
 105075b:	90 	nop
 105075c:	90 	nop
 105075d:	90 	nop
 105075e:	90 	nop
 105075f:	90 	nop
 1050760:	90 	nop
 1050761:	90 	nop
 1050762:	90 	nop
 1050763:	90 	nop
 1050764:	90 	nop
 1050765:	90 	nop
 1050766:	90 	nop
 1050767:	90 	nop
 1050768:	90 	nop
 1050769:	90 	nop
 105076a:	90 	nop
 105076b:	90 	nop
 105076c:	90 	nop
 105076d:	90 	nop
 105076e:	90 	nop
 105076f:	90 	nop
 1050770:	90 	nop
 1050771:	90 	nop
 1050772:	90 	nop
 1050773:	90 	nop
 1050774:	90 	nop
 1050775:	90 	nop
 1050776:	90 	nop
 1050777:	90 	nop
 1050778:	90 	nop
 1050779:	90 	nop
 105077a:	90 	nop
 105077b:	90 	nop
 105077c:	90 	nop
 105077d:	90 	nop
 105077e:	90 	nop
 105077f:	90 	nop
 1050780:	90 	nop
 1050781:	90 	nop
 1050782:	90 	nop
 1050783:	90 	nop
 1050784:	90 	nop
 1050785:	90 	nop
 1050786:	90 	nop
 1050787:	90 	nop
 1050788:	90 	nop
 1050789:	90 	nop
 105078a:	90 	nop
 105078b:	90 	nop
 105078c:	90 	nop
 105078d:	90 	nop
 105078e:	90 	nop
 105078f:	90 	nop
 1050790:	90 	nop
 1050791:	90 	nop
 1050792:	90 	nop
 1050793:	90 	nop
 1050794:	90 	nop
 1050795:	90 	nop
 1050796:	90 	nop
 1050797:	90 	nop
 1050798:	90 	nop
 1050799:	90 	nop
 105079a:	90 	nop
 105079b:	90 	nop
 105079c:	90 	nop
 105079d:	90 	nop
 105079e:	90 	nop
 105079f:	90 	nop
 10507a0:	90 	nop
 10507a1:	90 	nop
 10507a2:	90 	nop
 10507a3:	90 	nop
 10507a4:	90 	nop
 10507a5:	90 	nop
 10507a6:	90 	nop
 10507a7:	90 	nop
 10507a8:	90 	nop
 10507a9:	90 	nop
 10507aa:	90 	nop
 10507ab:	90 	nop
 10507ac:	90 	nop
 10507ad:	90 	nop
 10507ae:	90 	nop
 10507af:	90 	nop
 10507b0:	90 	nop
 10507b1:	90 	nop
 10507b2:	90 	nop
 10507b3:	90 	nop
 10507b4:	90 	nop
 10507b5:	90 	nop
 10507b6:	90 	nop
 10507b7:	90 	nop
 10507b8:	90 	nop
 10507b9:	90 	nop
 10507ba:	90 	nop
 10507bb:	90 	nop
 10507bc:	90 	nop
 10507bd:	90 	nop
 10507be:	90 	nop
 10507bf:	90 	nop
 10507c0:	90 	nop
 10507c1:	90 	nop
 10507c2:	90 	nop
 10507c3:	90 	nop
 10507c4:	90 	nop
 10507c5:	90 	nop
 10507c6:	90 	nop
 10507c7:	90 	nop
 10507c8:	90 	nop
 10507c9:	90 	nop
 10507ca:	90 	nop
 10507cb:	90 	nop
 10507cc:	90 	nop
 10507cd:	90 	nop
 10507ce:	90 	nop
 10507cf:	90 	nop
 10507d0:	90 	nop
 10507d1:	90 	nop
 10507d2:	90 	nop
 10507d3:	90 	nop
 10507d4:	90 	nop
 10507d5:	90 	nop
 10507d6:	90 	nop
 10507d7:	90 	nop
 10507d8:	90 	nop
 10507d9:	90 	nop
 10507da:	90 	nop
 10507db:	90 	nop
 10507dc:	90 	nop
 10507dd:	90 	nop
 10507de:	90 	nop
 10507df:	90 	nop
 10507e0:	90 	nop
 10507e1:	90 	nop
 10507e2:	90 	nop
 10507e3:	90 	nop
 10507e4:	90 	nop
 10507e5:	90 	nop
 10507e6:	90 	nop
 10507e7:	90 	nop
 10507e8:	90 	nop
 10507e9:	90 	nop
 10507ea:	90 	nop
 10507eb:	90 	nop
 10507ec:	90 	nop
 10507ed:	90 	nop
 10507ee:	90 	nop
 10507ef:	90 	nop
 10507f0:	90 	nop
 10507f1:	90 	nop
 10507f2:	90 	nop
 10507f3:	90 	nop
 10507f4:	90 	nop
 10507f5:	90 	nop
 10507f6:	90 	nop
 10507f7:	90 	nop
 10507f8:	90 	nop
 10507f9:	90 	nop
 10507fa:	90 	nop
 10507fb:	90 	nop
 10507fc:	90 	nop
 10507fd:	90 	nop
 10507fe:	90 	nop
 10507ff:	90 	nop
 1050800:	90 	nop
 1050801:	90 	nop
 1050802:	90 	nop
 1050803:	90 	nop
 1050804:	90 	nop
 1050805:	90 	nop
 1050806:	90 	nop
 1050807:	90 	nop
 1050808:	90 	nop
 1050809:	90 	nop
 105080a:	90 	nop
 105080b:	90 	nop
 105080c:	90 	nop
 105080d:	90 	nop
 105080e:	90 	nop
 105080f:	90 	nop
 1050810:	90 	nop
 1050811:	90 	nop
 1050812:	90 	nop
 1050813:	90 	nop
 1050814:	90 	nop
 1050815:	90 	nop
 1050816:	90 	nop
 1050817:	90 	nop
 1050818:	90 	nop
 1050819:	90 	nop
 105081a:	90 	nop
 105081b:	90 	nop
 105081c:	90 	nop
 105081d:	90 	nop
 105081e:	90 	nop
 105081f:	90 	nop
 1050820:	90 	nop
 1050821:	90 	nop
 1050822:	90 	nop
 1050823:	90 	nop
 1050824:	90 	nop
 1050825:	90 	nop
 1050826:	90 	nop
 1050827:	90 	nop
 1050828:	90 	nop
 1050829:	90 	nop
 105082a:	90 	nop
 105082b:	90 	nop
 105082c:	90 	nop
 105082d:	90 	nop
 105082e:	90 	nop
 105082f:	90 	nop

__rt0_amd64:
 1050830:	48 8b 3c 24 	mov	rdi, qword ptr [rsp]
 1050834:	48 8d 74 24 08 	lea	rsi, [rsp + 8]
 1050839:	e9 02 00 00 00 	jmp	2 <_runtime.rt0_go>
 105083e:	cc 	int3
 105083f:	cc 	int3

_runtime.rt0_go:
 1050840:	48 89 f8 	mov	rax, rdi
 1050843:	48 89 f3 	mov	rbx, rsi
 1050846:	48 83 ec 27 	sub	rsp, 39
 105084a:	48 83 e4 f0 	and	rsp, -16
 105084e:	48 89 44 24 10 	mov	qword ptr [rsp + 16], rax
 1050853:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 1050858:	48 8d 3d 61 df 07 00 	lea	rdi, [rip + 515937]
 105085f:	48 8d 9c 24 68 00 ff ff 	lea	rbx, [rsp - 65432]
 1050867:	48 89 5f 10 	mov	qword ptr [rdi + 16], rbx
 105086b:	48 89 5f 18 	mov	qword ptr [rdi + 24], rbx
 105086f:	48 89 1f 	mov	qword ptr [rdi], rbx
 1050872:	48 89 67 08 	mov	qword ptr [rdi + 8], rsp
 1050876:	b8 00 00 00 00 	mov	eax, 0
 105087b:	0f a2 	cpuid
 105087d:	89 c6 	mov	esi, eax
 105087f:	83 f8 00 	cmp	eax, 0
 1050882:	74 33 	je	51 <_runtime.rt0_go+0x77>
 1050884:	81 fb 47 65 6e 75 	cmp	ebx, 1970169159
 105088a:	75 1e 	jne	30 <_runtime.rt0_go+0x6a>
 105088c:	81 fa 69 6e 65 49 	cmp	edx, 1231384169
 1050892:	75 16 	jne	22 <_runtime.rt0_go+0x6a>
 1050894:	81 f9 6e 74 65 6c 	cmp	ecx, 1818588270
 105089a:	75 0e 	jne	14 <_runtime.rt0_go+0x6a>
 105089c:	c6 05 c5 6e 0a 00 01 	mov	byte ptr [rip + 683717], 1
 10508a3:	c6 05 c2 6e 0a 00 01 	mov	byte ptr [rip + 683714], 1
 10508aa:	b8 01 00 00 00 	mov	eax, 1
 10508af:	0f a2 	cpuid
 10508b1:	89 05 05 6f 0a 00 	mov	dword ptr [rip + 683781], eax
 10508b7:	48 8b 05 0a d9 07 00 	mov	rax, qword ptr [rip + 514314]
 10508be:	48 85 c0 	test	rax, rax
 10508c1:	74 60 	je	96 <_runtime.rt0_go+0xe3>
 10508c3:	48 8d 35 56 1a 00 00 	lea	rsi, [rip + 6742]
 10508ca:	48 c7 c2 00 00 00 00 	mov	rdx, 0
 10508d1:	48 c7 c1 00 00 00 00 	mov	rcx, 0
 10508d8:	ff d0 	call	rax
 10508da:	48 8d 0d df de 07 00 	lea	rcx, [rip + 515807]
 10508e1:	48 8b 01 	mov	rax, qword ptr [rcx]
 10508e4:	48 05 80 03 00 00 	add	rax, 896
 10508ea:	48 89 41 10 	mov	qword ptr [rcx + 16], rax
 10508ee:	48 89 41 18 	mov	qword ptr [rcx + 24], rax
 10508f2:	eb 2f 	jmp	47 <_runtime.rt0_go+0xe3>
 10508f4:	eb 2d 	jmp	45 <_runtime.rt0_go+0xe3>
 10508f6:	48 8d 3d ab e4 07 00 	lea	rdi, [rip + 517291]
 10508fd:	e8 ce 3e 00 00 	call	16078 <_runtime.settls>
 1050902:	65 48 c7 04 25 30 00 00 00 23 01 00 00 	mov	qword ptr gs:[48], 291
 105090f:	48 8b 05 92 e4 07 00 	mov	rax, qword ptr [rip + 517266]
 1050916:	48 3d 23 01 00 00 	cmp	rax, 291
 105091c:	74 05 	je	5 <_runtime.rt0_go+0xe3>
 105091e:	e8 0d 1a 00 00 	call	6669 <_runtime.abort>
 1050923:	48 8d 0d 96 de 07 00 	lea	rcx, [rip + 515734]
 105092a:	65 48 89 0c 25 30 00 00 00 	mov	qword ptr gs:[48], rcx
 1050933:	48 8d 05 e6 e3 07 00 	lea	rax, [rip + 517094]
 105093a:	48 89 08 	mov	qword ptr [rax], rcx
 105093d:	48 89 41 30 	mov	qword ptr [rcx + 48], rax
 1050941:	fc 	cld
 1050942:	e8 79 7c fe ff 	call	-99207 <_runtime.check>
 1050947:	8b 44 24 10 	mov	eax, dword ptr [rsp + 16]
 105094b:	89 04 24 	mov	dword ptr [rsp], eax
 105094e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1050953:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1050958:	e8 03 77 fe ff 	call	-100605 <_runtime.args>
 105095d:	e8 5e 59 fd ff 	call	-173730 <_runtime.osinit>
 1050962:	e8 19 bb fd ff 	call	-148711 <_runtime.schedinit>
 1050967:	48 8d 05 4a 2e 03 00 	lea	rax, [rip + 208458]
 105096e:	50 	push	rax
 105096f:	6a 00 	push	0
 1050971:	e8 7a 26 fe ff 	call	-121222 <_runtime.newproc>
 1050976:	58 	pop	rax
 1050977:	58 	pop	rax
 1050978:	e8 53 d1 fd ff 	call	-143021 <_runtime.mstart>
 105097d:	e8 ae 19 00 00 	call	6574 <_runtime.abort>
 1050982:	c3 	ret
 1050983:	48 8d 05 56 21 00 00 	lea	rax, [rip + 8534]
 105098a:	c3 	ret
 105098b:	cc 	int3
 105098c:	cc 	int3
 105098d:	cc 	int3
 105098e:	cc 	int3
 105098f:	cc 	int3

_runtime.asminit:
 1050990:	c3 	ret
 1050991:	cc 	int3
 1050992:	cc 	int3
 1050993:	cc 	int3
 1050994:	cc 	int3
 1050995:	cc 	int3
 1050996:	cc 	int3
 1050997:	cc 	int3
 1050998:	cc 	int3
 1050999:	cc 	int3
 105099a:	cc 	int3
 105099b:	cc 	int3
 105099c:	cc 	int3
 105099d:	cc 	int3
 105099e:	cc 	int3
 105099f:	cc 	int3

_runtime.gogo:
 10509a0:	48 83 ec 18 	sub	rsp, 24
 10509a4:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 10509a9:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 10509ae:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10509b3:	48 8b 53 10 	mov	rdx, qword ptr [rbx + 16]
 10509b7:	48 8b 0a 	mov	rcx, qword ptr [rdx]
 10509ba:	65 48 89 14 25 30 00 00 00 	mov	qword ptr gs:[48], rdx
 10509c3:	48 8b 23 	mov	rsp, qword ptr [rbx]
 10509c6:	48 8b 43 20 	mov	rax, qword ptr [rbx + 32]
 10509ca:	48 8b 53 18 	mov	rdx, qword ptr [rbx + 24]
 10509ce:	48 8b 6b 30 	mov	rbp, qword ptr [rbx + 48]
 10509d2:	48 c7 03 00 00 00 00 	mov	qword ptr [rbx], 0
 10509d9:	48 c7 43 20 00 00 00 00 	mov	qword ptr [rbx + 32], 0
 10509e1:	48 c7 43 18 00 00 00 00 	mov	qword ptr [rbx + 24], 0
 10509e9:	48 c7 43 30 00 00 00 00 	mov	qword ptr [rbx + 48], 0
 10509f1:	48 8b 5b 08 	mov	rbx, qword ptr [rbx + 8]
 10509f5:	ff e3 	jmp	rbx
 10509f7:	cc 	int3
 10509f8:	cc 	int3
 10509f9:	cc 	int3
 10509fa:	cc 	int3
 10509fb:	cc 	int3
 10509fc:	cc 	int3
 10509fd:	cc 	int3
 10509fe:	cc 	int3
 10509ff:	cc 	int3

_runtime.mcall:
 1050a00:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 1050a05:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1050a0e:	48 8b 1c 24 	mov	rbx, qword ptr [rsp]
 1050a12:	48 89 58 40 	mov	qword ptr [rax + 64], rbx
 1050a16:	48 8d 5c 24 08 	lea	rbx, [rsp + 8]
 1050a1b:	48 89 58 38 	mov	qword ptr [rax + 56], rbx
 1050a1f:	48 89 40 48 	mov	qword ptr [rax + 72], rax
 1050a23:	48 89 68 68 	mov	qword ptr [rax + 104], rbp
 1050a27:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1050a30:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1050a34:	48 8b 33 	mov	rsi, qword ptr [rbx]
 1050a37:	48 39 c6 	cmp	rsi, rax
 1050a3a:	75 09 	jne	9 <_runtime.mcall+0x45>
 1050a3c:	48 8d 05 dd b5 fd ff 	lea	rax, [rip - 150051]
 1050a43:	ff e0 	jmp	rax
 1050a45:	65 48 89 34 25 30 00 00 00 	mov	qword ptr gs:[48], rsi
 1050a4e:	48 8b 66 38 	mov	rsp, qword ptr [rsi + 56]
 1050a52:	50 	push	rax
 1050a53:	48 89 fa 	mov	rdx, rdi
 1050a56:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1050a59:	ff d7 	call	rdi
 1050a5b:	58 	pop	rax
 1050a5c:	48 8d 05 fd b5 fd ff 	lea	rax, [rip - 150019]
 1050a63:	ff e0 	jmp	rax
 1050a65:	c3 	ret
 1050a66:	cc 	int3
 1050a67:	cc 	int3
 1050a68:	cc 	int3
 1050a69:	cc 	int3
 1050a6a:	cc 	int3
 1050a6b:	cc 	int3
 1050a6c:	cc 	int3
 1050a6d:	cc 	int3
 1050a6e:	cc 	int3
 1050a6f:	cc 	int3

_runtime.systemstack_switch:
 1050a70:	c3 	ret
 1050a71:	cc 	int3
 1050a72:	cc 	int3
 1050a73:	cc 	int3
 1050a74:	cc 	int3
 1050a75:	cc 	int3
 1050a76:	cc 	int3
 1050a77:	cc 	int3
 1050a78:	cc 	int3
 1050a79:	cc 	int3
 1050a7a:	cc 	int3
 1050a7b:	cc 	int3
 1050a7c:	cc 	int3
 1050a7d:	cc 	int3
 1050a7e:	cc 	int3
 1050a7f:	cc 	int3

_runtime.systemstack:
 1050a80:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 1050a85:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1050a8e:	48 8b 58 30 	mov	rbx, qword ptr [rax + 48]
 1050a92:	48 3b 43 50 	cmp	rax, qword ptr [rbx + 80]
 1050a96:	74 78 	je	120 <_runtime.systemstack+0x90>
 1050a98:	48 8b 13 	mov	rdx, qword ptr [rbx]
 1050a9b:	48 39 d0 	cmp	rax, rdx
 1050a9e:	74 70 	je	112 <_runtime.systemstack+0x90>
 1050aa0:	48 3b 83 c0 00 00 00 	cmp	rax, qword ptr [rbx + 192]
 1050aa7:	75 6f 	jne	111 <_runtime.systemstack+0x98>
 1050aa9:	48 8d 35 c0 ff ff ff 	lea	rsi, [rip - 64]
 1050ab0:	48 89 70 40 	mov	qword ptr [rax + 64], rsi
 1050ab4:	48 89 60 38 	mov	qword ptr [rax + 56], rsp
 1050ab8:	48 89 40 48 	mov	qword ptr [rax + 72], rax
 1050abc:	48 89 68 68 	mov	qword ptr [rax + 104], rbp
 1050ac0:	65 48 89 14 25 30 00 00 00 	mov	qword ptr gs:[48], rdx
 1050ac9:	48 8b 5a 38 	mov	rbx, qword ptr [rdx + 56]
 1050acd:	48 83 eb 08 	sub	rbx, 8
 1050ad1:	48 8d 15 f8 cf fd ff 	lea	rdx, [rip - 143368]
 1050ad8:	48 89 13 	mov	qword ptr [rbx], rdx
 1050adb:	48 89 dc 	mov	rsp, rbx
 1050ade:	48 89 fa 	mov	rdx, rdi
 1050ae1:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1050ae4:	ff d7 	call	rdi
 1050ae6:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 1050aef:	48 8b 58 30 	mov	rbx, qword ptr [rax + 48]
 1050af3:	48 8b 83 c0 00 00 00 	mov	rax, qword ptr [rbx + 192]
 1050afa:	65 48 89 04 25 30 00 00 00 	mov	qword ptr gs:[48], rax
 1050b03:	48 8b 60 38 	mov	rsp, qword ptr [rax + 56]
 1050b07:	48 c7 40 38 00 00 00 00 	mov	qword ptr [rax + 56], 0
 1050b0f:	c3 	ret
 1050b10:	48 89 fa 	mov	rdx, rdi
 1050b13:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1050b16:	ff e7 	jmp	rdi
 1050b18:	48 8d 05 d1 05 ff ff 	lea	rax, [rip - 64047]
 1050b1f:	ff d0 	call	rax
 1050b21:	cd 03 	int	3
 1050b23:	cc 	int3
 1050b24:	cc 	int3
 1050b25:	cc 	int3
 1050b26:	cc 	int3
 1050b27:	cc 	int3
 1050b28:	cc 	int3
 1050b29:	cc 	int3
 1050b2a:	cc 	int3
 1050b2b:	cc 	int3
 1050b2c:	cc 	int3
 1050b2d:	cc 	int3
 1050b2e:	cc 	int3
 1050b2f:	cc 	int3

_runtime.morestack:
 1050b30:	65 48 8b 1c 25 30 00 00 00 	mov	rbx, qword ptr gs:[48]
 1050b39:	48 8b 5b 30 	mov	rbx, qword ptr [rbx + 48]
 1050b3d:	48 8b 33 	mov	rsi, qword ptr [rbx]
 1050b40:	65 48 39 34 25 30 00 00 00 	cmp	qword ptr gs:[48], rsi
 1050b49:	75 0a 	jne	10 <_runtime.morestack+0x25>
 1050b4b:	e8 a0 b5 fd ff 	call	-150112 <_runtime.badmorestackg0>
 1050b50:	e8 db 17 00 00 	call	6107 <_runtime.abort>
 1050b55:	48 8b 73 50 	mov	rsi, qword ptr [rbx + 80]
 1050b59:	65 48 39 34 25 30 00 00 00 	cmp	qword ptr gs:[48], rsi
 1050b62:	75 0a 	jne	10 <_runtime.morestack+0x3e>
 1050b64:	e8 c7 b5 fd ff 	call	-150073 <_runtime.badmorestackgsignal>
 1050b69:	e8 c2 17 00 00 	call	6082 <_runtime.abort>
 1050b6e:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1050b73:	48 89 43 10 	mov	qword ptr [rbx + 16], rax
 1050b77:	48 8d 44 24 10 	lea	rax, [rsp + 16]
 1050b7c:	48 89 43 08 	mov	qword ptr [rbx + 8], rax
 1050b80:	65 48 8b 34 25 30 00 00 00 	mov	rsi, qword ptr gs:[48]
 1050b89:	48 89 73 18 	mov	qword ptr [rbx + 24], rsi
 1050b8d:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 1050b91:	48 89 46 40 	mov	qword ptr [rsi + 64], rax
 1050b95:	48 89 76 48 	mov	qword ptr [rsi + 72], rsi
 1050b99:	48 8d 44 24 08 	lea	rax, [rsp + 8]
 1050b9e:	48 89 46 38 	mov	qword ptr [rsi + 56], rax
 1050ba2:	48 89 6e 68 	mov	qword ptr [rsi + 104], rbp
 1050ba6:	48 89 56 50 	mov	qword ptr [rsi + 80], rdx
 1050baa:	48 8b 1b 	mov	rbx, qword ptr [rbx]
 1050bad:	65 48 89 1c 25 30 00 00 00 	mov	qword ptr gs:[48], rbx
 1050bb6:	48 8b 63 38 	mov	rsp, qword ptr [rbx + 56]
 1050bba:	e8 21 e2 fe ff 	call	-73183 <_runtime.newstack>
 1050bbf:	e8 6c 17 00 00 	call	5996 <_runtime.abort>
 1050bc4:	c3 	ret
 1050bc5:	cc 	int3
 1050bc6:	cc 	int3
 1050bc7:	cc 	int3
 1050bc8:	cc 	int3
 1050bc9:	cc 	int3
 1050bca:	cc 	int3
 1050bcb:	cc 	int3
 1050bcc:	cc 	int3
 1050bcd:	cc 	int3
 1050bce:	cc 	int3
 1050bcf:	cc 	int3

_runtime.morestack_noctxt:
 1050bd0:	ba 00 00 00 00 	mov	edx, 0
 1050bd5:	e9 56 ff ff ff 	jmp	-170 <_runtime.morestack>
 1050bda:	cc 	int3
 1050bdb:	cc 	int3
 1050bdc:	cc 	int3
 1050bdd:	cc 	int3
 1050bde:	cc 	int3
 1050bdf:	cc 	int3

_runtime.reflectcall:
 1050be0:	8b 4c 24 20 	mov	ecx, dword ptr [rsp + 32]
 1050be4:	48 83 f9 20 	cmp	rcx, 32
 1050be8:	77 09 	ja	9 <_runtime.reflectcall+0x13>
 1050bea:	48 8d 05 ff 01 00 00 	lea	rax, [rip + 511]
 1050bf1:	ff e0 	jmp	rax
 1050bf3:	48 83 f9 40 	cmp	rcx, 64
 1050bf7:	77 09 	ja	9 <_runtime.reflectcall+0x22>
 1050bf9:	48 8d 05 70 02 00 00 	lea	rax, [rip + 624]
 1050c00:	ff e0 	jmp	rax
 1050c02:	48 81 f9 80 00 00 00 	cmp	rcx, 128
 1050c09:	77 09 	ja	9 <_runtime.reflectcall+0x34>
 1050c0b:	48 8d 05 de 02 00 00 	lea	rax, [rip + 734]
 1050c12:	ff e0 	jmp	rax
 1050c14:	48 81 f9 00 01 00 00 	cmp	rcx, 256
 1050c1b:	77 09 	ja	9 <_runtime.reflectcall+0x46>
 1050c1d:	48 8d 05 7c 03 00 00 	lea	rax, [rip + 892]
 1050c24:	ff e0 	jmp	rax
 1050c26:	48 81 f9 00 02 00 00 	cmp	rcx, 512
 1050c2d:	77 09 	ja	9 <_runtime.reflectcall+0x58>
 1050c2f:	48 8d 05 1a 04 00 00 	lea	rax, [rip + 1050]
 1050c36:	ff e0 	jmp	rax
 1050c38:	48 81 f9 00 04 00 00 	cmp	rcx, 1024
 1050c3f:	77 09 	ja	9 <_runtime.reflectcall+0x6a>
 1050c41:	48 8d 05 b8 04 00 00 	lea	rax, [rip + 1208]
 1050c48:	ff e0 	jmp	rax
 1050c4a:	48 81 f9 00 08 00 00 	cmp	rcx, 2048
 1050c51:	77 09 	ja	9 <_runtime.reflectcall+0x7c>
 1050c53:	48 8d 05 56 05 00 00 	lea	rax, [rip + 1366]
 1050c5a:	ff e0 	jmp	rax
 1050c5c:	48 81 f9 00 10 00 00 	cmp	rcx, 4096
 1050c63:	77 09 	ja	9 <_runtime.reflectcall+0x8e>
 1050c65:	48 8d 05 f4 05 00 00 	lea	rax, [rip + 1524]
 1050c6c:	ff e0 	jmp	rax
 1050c6e:	48 81 f9 00 20 00 00 	cmp	rcx, 8192
 1050c75:	77 09 	ja	9 <_runtime.reflectcall+0xa0>
 1050c77:	48 8d 05 b2 06 00 00 	lea	rax, [rip + 1714]
 1050c7e:	ff e0 	jmp	rax
 1050c80:	48 81 f9 00 40 00 00 	cmp	rcx, 16384
 1050c87:	77 09 	ja	9 <_runtime.reflectcall+0xb2>
 1050c89:	48 8d 05 70 07 00 00 	lea	rax, [rip + 1904]
 1050c90:	ff e0 	jmp	rax
 1050c92:	48 81 f9 00 80 00 00 	cmp	rcx, 32768
 1050c99:	77 09 	ja	9 <_runtime.reflectcall+0xc4>
 1050c9b:	48 8d 05 2e 08 00 00 	lea	rax, [rip + 2094]
 1050ca2:	ff e0 	jmp	rax
 1050ca4:	48 81 f9 00 00 01 00 	cmp	rcx, 65536
 1050cab:	77 09 	ja	9 <_runtime.reflectcall+0xd6>
 1050cad:	48 8d 05 ec 08 00 00 	lea	rax, [rip + 2284]
 1050cb4:	ff e0 	jmp	rax
 1050cb6:	48 81 f9 00 00 02 00 	cmp	rcx, 131072
 1050cbd:	77 09 	ja	9 <_runtime.reflectcall+0xe8>
 1050cbf:	48 8d 05 aa 09 00 00 	lea	rax, [rip + 2474]
 1050cc6:	ff e0 	jmp	rax
 1050cc8:	48 81 f9 00 00 04 00 	cmp	rcx, 262144
 1050ccf:	77 09 	ja	9 <_runtime.reflectcall+0xfa>
 1050cd1:	48 8d 05 68 0a 00 00 	lea	rax, [rip + 2664]
 1050cd8:	ff e0 	jmp	rax
 1050cda:	48 81 f9 00 00 08 00 	cmp	rcx, 524288
 1050ce1:	77 09 	ja	9 <_runtime.reflectcall+0x10c>
 1050ce3:	48 8d 05 26 0b 00 00 	lea	rax, [rip + 2854]
 1050cea:	ff e0 	jmp	rax
 1050cec:	48 81 f9 00 00 10 00 	cmp	rcx, 1048576
 1050cf3:	77 09 	ja	9 <_runtime.reflectcall+0x11e>
 1050cf5:	48 8d 05 e4 0b 00 00 	lea	rax, [rip + 3044]
 1050cfc:	ff e0 	jmp	rax
 1050cfe:	48 81 f9 00 00 20 00 	cmp	rcx, 2097152
 1050d05:	77 09 	ja	9 <_runtime.reflectcall+0x130>
 1050d07:	48 8d 05 a2 0c 00 00 	lea	rax, [rip + 3234]
 1050d0e:	ff e0 	jmp	rax
 1050d10:	48 81 f9 00 00 40 00 	cmp	rcx, 4194304
 1050d17:	77 09 	ja	9 <_runtime.reflectcall+0x142>
 1050d19:	48 8d 05 60 0d 00 00 	lea	rax, [rip + 3424]
 1050d20:	ff e0 	jmp	rax
 1050d22:	48 81 f9 00 00 80 00 	cmp	rcx, 8388608
 1050d29:	77 09 	ja	9 <_runtime.reflectcall+0x154>
 1050d2b:	48 8d 05 1e 0e 00 00 	lea	rax, [rip + 3614]
 1050d32:	ff e0 	jmp	rax
 1050d34:	48 81 f9 00 00 00 01 	cmp	rcx, 16777216
 1050d3b:	77 09 	ja	9 <_runtime.reflectcall+0x166>
 1050d3d:	48 8d 05 dc 0e 00 00 	lea	rax, [rip + 3804]
 1050d44:	ff e0 	jmp	rax
 1050d46:	48 81 f9 00 00 00 02 	cmp	rcx, 33554432
 1050d4d:	77 09 	ja	9 <_runtime.reflectcall+0x178>
 1050d4f:	48 8d 05 9a 0f 00 00 	lea	rax, [rip + 3994]
 1050d56:	ff e0 	jmp	rax
 1050d58:	48 81 f9 00 00 00 04 	cmp	rcx, 67108864
 1050d5f:	77 09 	ja	9 <_runtime.reflectcall+0x18a>
 1050d61:	48 8d 05 58 10 00 00 	lea	rax, [rip + 4184]
 1050d68:	ff e0 	jmp	rax
 1050d6a:	48 81 f9 00 00 00 08 	cmp	rcx, 134217728
 1050d71:	77 09 	ja	9 <_runtime.reflectcall+0x19c>
 1050d73:	48 8d 05 16 11 00 00 	lea	rax, [rip + 4374]
 1050d7a:	ff e0 	jmp	rax
 1050d7c:	48 81 f9 00 00 00 10 	cmp	rcx, 268435456
 1050d83:	77 09 	ja	9 <_runtime.reflectcall+0x1ae>
 1050d85:	48 8d 05 d4 11 00 00 	lea	rax, [rip + 4564]
 1050d8c:	ff e0 	jmp	rax
 1050d8e:	48 81 f9 00 00 00 20 	cmp	rcx, 536870912
 1050d95:	77 09 	ja	9 <_runtime.reflectcall+0x1c0>
 1050d97:	48 8d 05 92 12 00 00 	lea	rax, [rip + 4754]
 1050d9e:	ff e0 	jmp	rax
 1050da0:	48 81 f9 00 00 00 40 	cmp	rcx, 1073741824
 1050da7:	77 09 	ja	9 <_runtime.reflectcall+0x1d2>
 1050da9:	48 8d 05 50 13 00 00 	lea	rax, [rip + 4944]
 1050db0:	ff e0 	jmp	rax
 1050db2:	48 8d 05 e7 b2 fd ff 	lea	rax, [rip - 150809]
 1050db9:	ff e0 	jmp	rax
 1050dbb:	cc 	int3
 1050dbc:	cc 	int3
 1050dbd:	cc 	int3
 1050dbe:	cc 	int3
 1050dbf:	cc 	int3

_callRet:
 1050dc0:	48 83 ec 28 	sub	rsp, 40
 1050dc4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1050dc9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1050dce:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1050dd2:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1050dd7:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1050ddc:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1050de1:	e8 ba c3 fb ff 	call	-277574 <_runtime.reflectcallmove>
 1050de6:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1050deb:	48 83 c4 28 	add	rsp, 40
 1050def:	c3 	ret

_runtime.call32:
 1050df0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050df9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1050dfd:	76 59 	jbe	89 <_runtime.call32+0x68>
 1050dff:	48 83 ec 28 	sub	rsp, 40
 1050e03:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1050e08:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1050e0d:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1050e11:	48 85 db 	test	rbx, rbx
 1050e14:	75 49 	jne	73 <_runtime.call32+0x6f>
 1050e16:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 1050e1b:	8b 4c 24 48 	mov	ecx, dword ptr [rsp + 72]
 1050e1f:	48 89 e7 	mov	rdi, rsp
 1050e22:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1050e24:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1050e29:	ff 12 	call	qword ptr [rdx]
 1050e2b:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1050e30:	48 8b 7c 24 40 	mov	rdi, qword ptr [rsp + 64]
 1050e35:	8b 4c 24 48 	mov	ecx, dword ptr [rsp + 72]
 1050e39:	8b 5c 24 4c 	mov	ebx, dword ptr [rsp + 76]
 1050e3d:	48 89 e6 	mov	rsi, rsp
 1050e40:	48 01 df 	add	rdi, rbx
 1050e43:	48 01 de 	add	rsi, rbx
 1050e46:	48 29 d9 	sub	rcx, rbx
 1050e49:	e8 72 ff ff ff 	call	-142 <_callRet>
 1050e4e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1050e53:	48 83 c4 28 	add	rsp, 40
 1050e57:	c3 	ret
 1050e58:	e8 73 fd ff ff 	call	-653 <_runtime.morestack_noctxt>
 1050e5d:	eb 91 	jmp	-111 <_runtime.call32>
 1050e5f:	48 8d 7c 24 30 	lea	rdi, [rsp + 48]
 1050e64:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1050e67:	75 ad 	jne	-83 <_runtime.call32+0x26>
 1050e69:	48 89 23 	mov	qword ptr [rbx], rsp
 1050e6c:	eb a8 	jmp	-88 <_runtime.call32+0x26>
 1050e6e:	cc 	int3
 1050e6f:	cc 	int3

_runtime.call64:
 1050e70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050e79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1050e7d:	76 59 	jbe	89 <_runtime.call64+0x68>
 1050e7f:	48 83 ec 48 	sub	rsp, 72
 1050e83:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1050e88:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1050e8d:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1050e91:	48 85 db 	test	rbx, rbx
 1050e94:	75 49 	jne	73 <_runtime.call64+0x6f>
 1050e96:	48 8b 74 24 60 	mov	rsi, qword ptr [rsp + 96]
 1050e9b:	8b 4c 24 68 	mov	ecx, dword ptr [rsp + 104]
 1050e9f:	48 89 e7 	mov	rdi, rsp
 1050ea2:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1050ea4:	48 8b 54 24 58 	mov	rdx, qword ptr [rsp + 88]
 1050ea9:	ff 12 	call	qword ptr [rdx]
 1050eab:	48 8b 54 24 50 	mov	rdx, qword ptr [rsp + 80]
 1050eb0:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 1050eb5:	8b 4c 24 68 	mov	ecx, dword ptr [rsp + 104]
 1050eb9:	8b 5c 24 6c 	mov	ebx, dword ptr [rsp + 108]
 1050ebd:	48 89 e6 	mov	rsi, rsp
 1050ec0:	48 01 df 	add	rdi, rbx
 1050ec3:	48 01 de 	add	rsi, rbx
 1050ec6:	48 29 d9 	sub	rcx, rbx
 1050ec9:	e8 f2 fe ff ff 	call	-270 <_callRet>
 1050ece:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1050ed3:	48 83 c4 48 	add	rsp, 72
 1050ed7:	c3 	ret
 1050ed8:	e8 f3 fc ff ff 	call	-781 <_runtime.morestack_noctxt>
 1050edd:	eb 91 	jmp	-111 <_runtime.call64>
 1050edf:	48 8d 7c 24 50 	lea	rdi, [rsp + 80]
 1050ee4:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1050ee7:	75 ad 	jne	-83 <_runtime.call64+0x26>
 1050ee9:	48 89 23 	mov	qword ptr [rbx], rsp
 1050eec:	eb a8 	jmp	-88 <_runtime.call64+0x26>
 1050eee:	cc 	int3
 1050eef:	cc 	int3

_runtime.call128:
 1050ef0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050ef9:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 1050efe:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1050f02:	76 7d 	jbe	125 <_runtime.call128+0x91>
 1050f04:	48 81 ec 88 00 00 00 	sub	rsp, 136
 1050f0b:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1050f13:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 1050f1b:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1050f1f:	48 85 db 	test	rbx, rbx
 1050f22:	75 67 	jne	103 <_runtime.call128+0x9b>
 1050f24:	48 8b b4 24 a0 00 00 00 	mov	rsi, qword ptr [rsp + 160]
 1050f2c:	8b 8c 24 a8 00 00 00 	mov	ecx, dword ptr [rsp + 168]
 1050f33:	48 89 e7 	mov	rdi, rsp
 1050f36:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1050f38:	48 8b 94 24 98 00 00 00 	mov	rdx, qword ptr [rsp + 152]
 1050f40:	ff 12 	call	qword ptr [rdx]
 1050f42:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1050f4a:	48 8b bc 24 a0 00 00 00 	mov	rdi, qword ptr [rsp + 160]
 1050f52:	8b 8c 24 a8 00 00 00 	mov	ecx, dword ptr [rsp + 168]
 1050f59:	8b 9c 24 ac 00 00 00 	mov	ebx, dword ptr [rsp + 172]
 1050f60:	48 89 e6 	mov	rsi, rsp
 1050f63:	48 01 df 	add	rdi, rbx
 1050f66:	48 01 de 	add	rsi, rbx
 1050f69:	48 29 d9 	sub	rcx, rbx
 1050f6c:	e8 4f fe ff ff 	call	-433 <_callRet>
 1050f71:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1050f79:	48 81 c4 88 00 00 00 	add	rsp, 136
 1050f80:	c3 	ret
 1050f81:	e8 4a fc ff ff 	call	-950 <_runtime.morestack_noctxt>
 1050f86:	e9 65 ff ff ff 	jmp	-155 <_runtime.call128>
 1050f8b:	48 8d bc 24 90 00 00 00 	lea	rdi, [rsp + 144]
 1050f93:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1050f96:	75 8c 	jne	-116 <_runtime.call128+0x34>
 1050f98:	48 89 23 	mov	qword ptr [rbx], rsp
 1050f9b:	eb 87 	jmp	-121 <_runtime.call128+0x34>
 1050f9d:	cc 	int3
 1050f9e:	cc 	int3
 1050f9f:	cc 	int3

_runtime.call256:
 1050fa0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1050fa9:	48 8d 84 24 78 ff ff ff 	lea	rax, [rsp - 136]
 1050fb1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1050fb5:	76 7d 	jbe	125 <_runtime.call256+0x94>
 1050fb7:	48 81 ec 08 01 00 00 	sub	rsp, 264
 1050fbe:	48 89 ac 24 00 01 00 00 	mov	qword ptr [rsp + 256], rbp
 1050fc6:	48 8d ac 24 00 01 00 00 	lea	rbp, [rsp + 256]
 1050fce:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1050fd2:	48 85 db 	test	rbx, rbx
 1050fd5:	75 67 	jne	103 <_runtime.call256+0x9e>
 1050fd7:	48 8b b4 24 20 01 00 00 	mov	rsi, qword ptr [rsp + 288]
 1050fdf:	8b 8c 24 28 01 00 00 	mov	ecx, dword ptr [rsp + 296]
 1050fe6:	48 89 e7 	mov	rdi, rsp
 1050fe9:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1050feb:	48 8b 94 24 18 01 00 00 	mov	rdx, qword ptr [rsp + 280]
 1050ff3:	ff 12 	call	qword ptr [rdx]
 1050ff5:	48 8b 94 24 10 01 00 00 	mov	rdx, qword ptr [rsp + 272]
 1050ffd:	48 8b bc 24 20 01 00 00 	mov	rdi, qword ptr [rsp + 288]
 1051005:	8b 8c 24 28 01 00 00 	mov	ecx, dword ptr [rsp + 296]
 105100c:	8b 9c 24 2c 01 00 00 	mov	ebx, dword ptr [rsp + 300]
 1051013:	48 89 e6 	mov	rsi, rsp
 1051016:	48 01 df 	add	rdi, rbx
 1051019:	48 01 de 	add	rsi, rbx
 105101c:	48 29 d9 	sub	rcx, rbx
 105101f:	e8 9c fd ff ff 	call	-612 <_callRet>
 1051024:	48 8b ac 24 00 01 00 00 	mov	rbp, qword ptr [rsp + 256]
 105102c:	48 81 c4 08 01 00 00 	add	rsp, 264
 1051033:	c3 	ret
 1051034:	e8 97 fb ff ff 	call	-1129 <_runtime.morestack_noctxt>
 1051039:	e9 62 ff ff ff 	jmp	-158 <_runtime.call256>
 105103e:	48 8d bc 24 10 01 00 00 	lea	rdi, [rsp + 272]
 1051046:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051049:	75 8c 	jne	-116 <_runtime.call256+0x37>
 105104b:	48 89 23 	mov	qword ptr [rbx], rsp
 105104e:	eb 87 	jmp	-121 <_runtime.call256+0x37>

_runtime.call512:
 1051050:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051059:	48 8d 84 24 78 fe ff ff 	lea	rax, [rsp - 392]
 1051061:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1051065:	76 7d 	jbe	125 <_runtime.call512+0x94>
 1051067:	48 81 ec 08 02 00 00 	sub	rsp, 520
 105106e:	48 89 ac 24 00 02 00 00 	mov	qword ptr [rsp + 512], rbp
 1051076:	48 8d ac 24 00 02 00 00 	lea	rbp, [rsp + 512]
 105107e:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051082:	48 85 db 	test	rbx, rbx
 1051085:	75 67 	jne	103 <_runtime.call512+0x9e>
 1051087:	48 8b b4 24 20 02 00 00 	mov	rsi, qword ptr [rsp + 544]
 105108f:	8b 8c 24 28 02 00 00 	mov	ecx, dword ptr [rsp + 552]
 1051096:	48 89 e7 	mov	rdi, rsp
 1051099:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 105109b:	48 8b 94 24 18 02 00 00 	mov	rdx, qword ptr [rsp + 536]
 10510a3:	ff 12 	call	qword ptr [rdx]
 10510a5:	48 8b 94 24 10 02 00 00 	mov	rdx, qword ptr [rsp + 528]
 10510ad:	48 8b bc 24 20 02 00 00 	mov	rdi, qword ptr [rsp + 544]
 10510b5:	8b 8c 24 28 02 00 00 	mov	ecx, dword ptr [rsp + 552]
 10510bc:	8b 9c 24 2c 02 00 00 	mov	ebx, dword ptr [rsp + 556]
 10510c3:	48 89 e6 	mov	rsi, rsp
 10510c6:	48 01 df 	add	rdi, rbx
 10510c9:	48 01 de 	add	rsi, rbx
 10510cc:	48 29 d9 	sub	rcx, rbx
 10510cf:	e8 ec fc ff ff 	call	-788 <_callRet>
 10510d4:	48 8b ac 24 00 02 00 00 	mov	rbp, qword ptr [rsp + 512]
 10510dc:	48 81 c4 08 02 00 00 	add	rsp, 520
 10510e3:	c3 	ret
 10510e4:	e8 e7 fa ff ff 	call	-1305 <_runtime.morestack_noctxt>
 10510e9:	e9 62 ff ff ff 	jmp	-158 <_runtime.call512>
 10510ee:	48 8d bc 24 10 02 00 00 	lea	rdi, [rsp + 528]
 10510f6:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10510f9:	75 8c 	jne	-116 <_runtime.call512+0x37>
 10510fb:	48 89 23 	mov	qword ptr [rbx], rsp
 10510fe:	eb 87 	jmp	-121 <_runtime.call512+0x37>

_runtime.call1024:
 1051100:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051109:	48 8d 84 24 78 fc ff ff 	lea	rax, [rsp - 904]
 1051111:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1051115:	76 7d 	jbe	125 <_runtime.call1024+0x94>
 1051117:	48 81 ec 08 04 00 00 	sub	rsp, 1032
 105111e:	48 89 ac 24 00 04 00 00 	mov	qword ptr [rsp + 1024], rbp
 1051126:	48 8d ac 24 00 04 00 00 	lea	rbp, [rsp + 1024]
 105112e:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051132:	48 85 db 	test	rbx, rbx
 1051135:	75 67 	jne	103 <_runtime.call1024+0x9e>
 1051137:	48 8b b4 24 20 04 00 00 	mov	rsi, qword ptr [rsp + 1056]
 105113f:	8b 8c 24 28 04 00 00 	mov	ecx, dword ptr [rsp + 1064]
 1051146:	48 89 e7 	mov	rdi, rsp
 1051149:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 105114b:	48 8b 94 24 18 04 00 00 	mov	rdx, qword ptr [rsp + 1048]
 1051153:	ff 12 	call	qword ptr [rdx]
 1051155:	48 8b 94 24 10 04 00 00 	mov	rdx, qword ptr [rsp + 1040]
 105115d:	48 8b bc 24 20 04 00 00 	mov	rdi, qword ptr [rsp + 1056]
 1051165:	8b 8c 24 28 04 00 00 	mov	ecx, dword ptr [rsp + 1064]
 105116c:	8b 9c 24 2c 04 00 00 	mov	ebx, dword ptr [rsp + 1068]
 1051173:	48 89 e6 	mov	rsi, rsp
 1051176:	48 01 df 	add	rdi, rbx
 1051179:	48 01 de 	add	rsi, rbx
 105117c:	48 29 d9 	sub	rcx, rbx
 105117f:	e8 3c fc ff ff 	call	-964 <_callRet>
 1051184:	48 8b ac 24 00 04 00 00 	mov	rbp, qword ptr [rsp + 1024]
 105118c:	48 81 c4 08 04 00 00 	add	rsp, 1032
 1051193:	c3 	ret
 1051194:	e8 37 fa ff ff 	call	-1481 <_runtime.morestack_noctxt>
 1051199:	e9 62 ff ff ff 	jmp	-158 <_runtime.call1024>
 105119e:	48 8d bc 24 10 04 00 00 	lea	rdi, [rsp + 1040]
 10511a6:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10511a9:	75 8c 	jne	-116 <_runtime.call1024+0x37>
 10511ab:	48 89 23 	mov	qword ptr [rbx], rsp
 10511ae:	eb 87 	jmp	-121 <_runtime.call1024+0x37>

_runtime.call2048:
 10511b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10511b9:	48 8d 84 24 78 f8 ff ff 	lea	rax, [rsp - 1928]
 10511c1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 10511c5:	76 7d 	jbe	125 <_runtime.call2048+0x94>
 10511c7:	48 81 ec 08 08 00 00 	sub	rsp, 2056
 10511ce:	48 89 ac 24 00 08 00 00 	mov	qword ptr [rsp + 2048], rbp
 10511d6:	48 8d ac 24 00 08 00 00 	lea	rbp, [rsp + 2048]
 10511de:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10511e2:	48 85 db 	test	rbx, rbx
 10511e5:	75 67 	jne	103 <_runtime.call2048+0x9e>
 10511e7:	48 8b b4 24 20 08 00 00 	mov	rsi, qword ptr [rsp + 2080]
 10511ef:	8b 8c 24 28 08 00 00 	mov	ecx, dword ptr [rsp + 2088]
 10511f6:	48 89 e7 	mov	rdi, rsp
 10511f9:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 10511fb:	48 8b 94 24 18 08 00 00 	mov	rdx, qword ptr [rsp + 2072]
 1051203:	ff 12 	call	qword ptr [rdx]
 1051205:	48 8b 94 24 10 08 00 00 	mov	rdx, qword ptr [rsp + 2064]
 105120d:	48 8b bc 24 20 08 00 00 	mov	rdi, qword ptr [rsp + 2080]
 1051215:	8b 8c 24 28 08 00 00 	mov	ecx, dword ptr [rsp + 2088]
 105121c:	8b 9c 24 2c 08 00 00 	mov	ebx, dword ptr [rsp + 2092]
 1051223:	48 89 e6 	mov	rsi, rsp
 1051226:	48 01 df 	add	rdi, rbx
 1051229:	48 01 de 	add	rsi, rbx
 105122c:	48 29 d9 	sub	rcx, rbx
 105122f:	e8 8c fb ff ff 	call	-1140 <_callRet>
 1051234:	48 8b ac 24 00 08 00 00 	mov	rbp, qword ptr [rsp + 2048]
 105123c:	48 81 c4 08 08 00 00 	add	rsp, 2056
 1051243:	c3 	ret
 1051244:	e8 87 f9 ff ff 	call	-1657 <_runtime.morestack_noctxt>
 1051249:	e9 62 ff ff ff 	jmp	-158 <_runtime.call2048>
 105124e:	48 8d bc 24 10 08 00 00 	lea	rdi, [rsp + 2064]
 1051256:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051259:	75 8c 	jne	-116 <_runtime.call2048+0x37>
 105125b:	48 89 23 	mov	qword ptr [rbx], rsp
 105125e:	eb 87 	jmp	-121 <_runtime.call2048+0x37>

_runtime.call4096:
 1051260:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051269:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105126d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051274:	0f 84 90 00 00 00 	je	144 <_runtime.call4096+0xaa>
 105127a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051282:	48 29 f0 	sub	rax, rsi
 1051285:	48 3d 08 13 00 00 	cmp	rax, 4872
 105128b:	76 7d 	jbe	125 <_runtime.call4096+0xaa>
 105128d:	48 81 ec 08 10 00 00 	sub	rsp, 4104
 1051294:	48 89 ac 24 00 10 00 00 	mov	qword ptr [rsp + 4096], rbp
 105129c:	48 8d ac 24 00 10 00 00 	lea	rbp, [rsp + 4096]
 10512a4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10512a8:	48 85 db 	test	rbx, rbx
 10512ab:	75 67 	jne	103 <_runtime.call4096+0xb4>
 10512ad:	48 8b b4 24 20 10 00 00 	mov	rsi, qword ptr [rsp + 4128]
 10512b5:	8b 8c 24 28 10 00 00 	mov	ecx, dword ptr [rsp + 4136]
 10512bc:	48 89 e7 	mov	rdi, rsp
 10512bf:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 10512c1:	48 8b 94 24 18 10 00 00 	mov	rdx, qword ptr [rsp + 4120]
 10512c9:	ff 12 	call	qword ptr [rdx]
 10512cb:	48 8b 94 24 10 10 00 00 	mov	rdx, qword ptr [rsp + 4112]
 10512d3:	48 8b bc 24 20 10 00 00 	mov	rdi, qword ptr [rsp + 4128]
 10512db:	8b 8c 24 28 10 00 00 	mov	ecx, dword ptr [rsp + 4136]
 10512e2:	8b 9c 24 2c 10 00 00 	mov	ebx, dword ptr [rsp + 4140]
 10512e9:	48 89 e6 	mov	rsi, rsp
 10512ec:	48 01 df 	add	rdi, rbx
 10512ef:	48 01 de 	add	rsi, rbx
 10512f2:	48 29 d9 	sub	rcx, rbx
 10512f5:	e8 c6 fa ff ff 	call	-1338 <_callRet>
 10512fa:	48 8b ac 24 00 10 00 00 	mov	rbp, qword ptr [rsp + 4096]
 1051302:	48 81 c4 08 10 00 00 	add	rsp, 4104
 1051309:	c3 	ret
 105130a:	e8 c1 f8 ff ff 	call	-1855 <_runtime.morestack_noctxt>
 105130f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call4096>
 1051314:	48 8d bc 24 10 10 00 00 	lea	rdi, [rsp + 4112]
 105131c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105131f:	75 8c 	jne	-116 <_runtime.call4096+0x4d>
 1051321:	48 89 23 	mov	qword ptr [rbx], rsp
 1051324:	eb 87 	jmp	-121 <_runtime.call4096+0x4d>
 1051326:	cc 	int3
 1051327:	cc 	int3
 1051328:	cc 	int3
 1051329:	cc 	int3
 105132a:	cc 	int3
 105132b:	cc 	int3
 105132c:	cc 	int3
 105132d:	cc 	int3
 105132e:	cc 	int3
 105132f:	cc 	int3

_runtime.call8192:
 1051330:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051339:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105133d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051344:	0f 84 90 00 00 00 	je	144 <_runtime.call8192+0xaa>
 105134a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051352:	48 29 f0 	sub	rax, rsi
 1051355:	48 3d 08 23 00 00 	cmp	rax, 8968
 105135b:	76 7d 	jbe	125 <_runtime.call8192+0xaa>
 105135d:	48 81 ec 08 20 00 00 	sub	rsp, 8200
 1051364:	48 89 ac 24 00 20 00 00 	mov	qword ptr [rsp + 8192], rbp
 105136c:	48 8d ac 24 00 20 00 00 	lea	rbp, [rsp + 8192]
 1051374:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051378:	48 85 db 	test	rbx, rbx
 105137b:	75 67 	jne	103 <_runtime.call8192+0xb4>
 105137d:	48 8b b4 24 20 20 00 00 	mov	rsi, qword ptr [rsp + 8224]
 1051385:	8b 8c 24 28 20 00 00 	mov	ecx, dword ptr [rsp + 8232]
 105138c:	48 89 e7 	mov	rdi, rsp
 105138f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051391:	48 8b 94 24 18 20 00 00 	mov	rdx, qword ptr [rsp + 8216]
 1051399:	ff 12 	call	qword ptr [rdx]
 105139b:	48 8b 94 24 10 20 00 00 	mov	rdx, qword ptr [rsp + 8208]
 10513a3:	48 8b bc 24 20 20 00 00 	mov	rdi, qword ptr [rsp + 8224]
 10513ab:	8b 8c 24 28 20 00 00 	mov	ecx, dword ptr [rsp + 8232]
 10513b2:	8b 9c 24 2c 20 00 00 	mov	ebx, dword ptr [rsp + 8236]
 10513b9:	48 89 e6 	mov	rsi, rsp
 10513bc:	48 01 df 	add	rdi, rbx
 10513bf:	48 01 de 	add	rsi, rbx
 10513c2:	48 29 d9 	sub	rcx, rbx
 10513c5:	e8 f6 f9 ff ff 	call	-1546 <_callRet>
 10513ca:	48 8b ac 24 00 20 00 00 	mov	rbp, qword ptr [rsp + 8192]
 10513d2:	48 81 c4 08 20 00 00 	add	rsp, 8200
 10513d9:	c3 	ret
 10513da:	e8 f1 f7 ff ff 	call	-2063 <_runtime.morestack_noctxt>
 10513df:	e9 4c ff ff ff 	jmp	-180 <_runtime.call8192>
 10513e4:	48 8d bc 24 10 20 00 00 	lea	rdi, [rsp + 8208]
 10513ec:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10513ef:	75 8c 	jne	-116 <_runtime.call8192+0x4d>
 10513f1:	48 89 23 	mov	qword ptr [rbx], rsp
 10513f4:	eb 87 	jmp	-121 <_runtime.call8192+0x4d>
 10513f6:	cc 	int3
 10513f7:	cc 	int3
 10513f8:	cc 	int3
 10513f9:	cc 	int3
 10513fa:	cc 	int3
 10513fb:	cc 	int3
 10513fc:	cc 	int3
 10513fd:	cc 	int3
 10513fe:	cc 	int3
 10513ff:	cc 	int3

_runtime.call16384:
 1051400:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051409:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105140d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051414:	0f 84 90 00 00 00 	je	144 <_runtime.call16384+0xaa>
 105141a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051422:	48 29 f0 	sub	rax, rsi
 1051425:	48 3d 08 43 00 00 	cmp	rax, 17160
 105142b:	76 7d 	jbe	125 <_runtime.call16384+0xaa>
 105142d:	48 81 ec 08 40 00 00 	sub	rsp, 16392
 1051434:	48 89 ac 24 00 40 00 00 	mov	qword ptr [rsp + 16384], rbp
 105143c:	48 8d ac 24 00 40 00 00 	lea	rbp, [rsp + 16384]
 1051444:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051448:	48 85 db 	test	rbx, rbx
 105144b:	75 67 	jne	103 <_runtime.call16384+0xb4>
 105144d:	48 8b b4 24 20 40 00 00 	mov	rsi, qword ptr [rsp + 16416]
 1051455:	8b 8c 24 28 40 00 00 	mov	ecx, dword ptr [rsp + 16424]
 105145c:	48 89 e7 	mov	rdi, rsp
 105145f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051461:	48 8b 94 24 18 40 00 00 	mov	rdx, qword ptr [rsp + 16408]
 1051469:	ff 12 	call	qword ptr [rdx]
 105146b:	48 8b 94 24 10 40 00 00 	mov	rdx, qword ptr [rsp + 16400]
 1051473:	48 8b bc 24 20 40 00 00 	mov	rdi, qword ptr [rsp + 16416]
 105147b:	8b 8c 24 28 40 00 00 	mov	ecx, dword ptr [rsp + 16424]
 1051482:	8b 9c 24 2c 40 00 00 	mov	ebx, dword ptr [rsp + 16428]
 1051489:	48 89 e6 	mov	rsi, rsp
 105148c:	48 01 df 	add	rdi, rbx
 105148f:	48 01 de 	add	rsi, rbx
 1051492:	48 29 d9 	sub	rcx, rbx
 1051495:	e8 26 f9 ff ff 	call	-1754 <_callRet>
 105149a:	48 8b ac 24 00 40 00 00 	mov	rbp, qword ptr [rsp + 16384]
 10514a2:	48 81 c4 08 40 00 00 	add	rsp, 16392
 10514a9:	c3 	ret
 10514aa:	e8 21 f7 ff ff 	call	-2271 <_runtime.morestack_noctxt>
 10514af:	e9 4c ff ff ff 	jmp	-180 <_runtime.call16384>
 10514b4:	48 8d bc 24 10 40 00 00 	lea	rdi, [rsp + 16400]
 10514bc:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10514bf:	75 8c 	jne	-116 <_runtime.call16384+0x4d>
 10514c1:	48 89 23 	mov	qword ptr [rbx], rsp
 10514c4:	eb 87 	jmp	-121 <_runtime.call16384+0x4d>
 10514c6:	cc 	int3
 10514c7:	cc 	int3
 10514c8:	cc 	int3
 10514c9:	cc 	int3
 10514ca:	cc 	int3
 10514cb:	cc 	int3
 10514cc:	cc 	int3
 10514cd:	cc 	int3
 10514ce:	cc 	int3
 10514cf:	cc 	int3

_runtime.call32768:
 10514d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10514d9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 10514dd:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 10514e4:	0f 84 90 00 00 00 	je	144 <_runtime.call32768+0xaa>
 10514ea:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 10514f2:	48 29 f0 	sub	rax, rsi
 10514f5:	48 3d 08 83 00 00 	cmp	rax, 33544
 10514fb:	76 7d 	jbe	125 <_runtime.call32768+0xaa>
 10514fd:	48 81 ec 08 80 00 00 	sub	rsp, 32776
 1051504:	48 89 ac 24 00 80 00 00 	mov	qword ptr [rsp + 32768], rbp
 105150c:	48 8d ac 24 00 80 00 00 	lea	rbp, [rsp + 32768]
 1051514:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051518:	48 85 db 	test	rbx, rbx
 105151b:	75 67 	jne	103 <_runtime.call32768+0xb4>
 105151d:	48 8b b4 24 20 80 00 00 	mov	rsi, qword ptr [rsp + 32800]
 1051525:	8b 8c 24 28 80 00 00 	mov	ecx, dword ptr [rsp + 32808]
 105152c:	48 89 e7 	mov	rdi, rsp
 105152f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051531:	48 8b 94 24 18 80 00 00 	mov	rdx, qword ptr [rsp + 32792]
 1051539:	ff 12 	call	qword ptr [rdx]
 105153b:	48 8b 94 24 10 80 00 00 	mov	rdx, qword ptr [rsp + 32784]
 1051543:	48 8b bc 24 20 80 00 00 	mov	rdi, qword ptr [rsp + 32800]
 105154b:	8b 8c 24 28 80 00 00 	mov	ecx, dword ptr [rsp + 32808]
 1051552:	8b 9c 24 2c 80 00 00 	mov	ebx, dword ptr [rsp + 32812]
 1051559:	48 89 e6 	mov	rsi, rsp
 105155c:	48 01 df 	add	rdi, rbx
 105155f:	48 01 de 	add	rsi, rbx
 1051562:	48 29 d9 	sub	rcx, rbx
 1051565:	e8 56 f8 ff ff 	call	-1962 <_callRet>
 105156a:	48 8b ac 24 00 80 00 00 	mov	rbp, qword ptr [rsp + 32768]
 1051572:	48 81 c4 08 80 00 00 	add	rsp, 32776
 1051579:	c3 	ret
 105157a:	e8 51 f6 ff ff 	call	-2479 <_runtime.morestack_noctxt>
 105157f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call32768>
 1051584:	48 8d bc 24 10 80 00 00 	lea	rdi, [rsp + 32784]
 105158c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105158f:	75 8c 	jne	-116 <_runtime.call32768+0x4d>
 1051591:	48 89 23 	mov	qword ptr [rbx], rsp
 1051594:	eb 87 	jmp	-121 <_runtime.call32768+0x4d>
 1051596:	cc 	int3
 1051597:	cc 	int3
 1051598:	cc 	int3
 1051599:	cc 	int3
 105159a:	cc 	int3
 105159b:	cc 	int3
 105159c:	cc 	int3
 105159d:	cc 	int3
 105159e:	cc 	int3
 105159f:	cc 	int3

_runtime.call65536:
 10515a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10515a9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 10515ad:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 10515b4:	0f 84 90 00 00 00 	je	144 <_runtime.call65536+0xaa>
 10515ba:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 10515c2:	48 29 f0 	sub	rax, rsi
 10515c5:	48 3d 08 03 01 00 	cmp	rax, 66312
 10515cb:	76 7d 	jbe	125 <_runtime.call65536+0xaa>
 10515cd:	48 81 ec 08 00 01 00 	sub	rsp, 65544
 10515d4:	48 89 ac 24 00 00 01 00 	mov	qword ptr [rsp + 65536], rbp
 10515dc:	48 8d ac 24 00 00 01 00 	lea	rbp, [rsp + 65536]
 10515e4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10515e8:	48 85 db 	test	rbx, rbx
 10515eb:	75 67 	jne	103 <_runtime.call65536+0xb4>
 10515ed:	48 8b b4 24 20 00 01 00 	mov	rsi, qword ptr [rsp + 65568]
 10515f5:	8b 8c 24 28 00 01 00 	mov	ecx, dword ptr [rsp + 65576]
 10515fc:	48 89 e7 	mov	rdi, rsp
 10515ff:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051601:	48 8b 94 24 18 00 01 00 	mov	rdx, qword ptr [rsp + 65560]
 1051609:	ff 12 	call	qword ptr [rdx]
 105160b:	48 8b 94 24 10 00 01 00 	mov	rdx, qword ptr [rsp + 65552]
 1051613:	48 8b bc 24 20 00 01 00 	mov	rdi, qword ptr [rsp + 65568]
 105161b:	8b 8c 24 28 00 01 00 	mov	ecx, dword ptr [rsp + 65576]
 1051622:	8b 9c 24 2c 00 01 00 	mov	ebx, dword ptr [rsp + 65580]
 1051629:	48 89 e6 	mov	rsi, rsp
 105162c:	48 01 df 	add	rdi, rbx
 105162f:	48 01 de 	add	rsi, rbx
 1051632:	48 29 d9 	sub	rcx, rbx
 1051635:	e8 86 f7 ff ff 	call	-2170 <_callRet>
 105163a:	48 8b ac 24 00 00 01 00 	mov	rbp, qword ptr [rsp + 65536]
 1051642:	48 81 c4 08 00 01 00 	add	rsp, 65544
 1051649:	c3 	ret
 105164a:	e8 81 f5 ff ff 	call	-2687 <_runtime.morestack_noctxt>
 105164f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call65536>
 1051654:	48 8d bc 24 10 00 01 00 	lea	rdi, [rsp + 65552]
 105165c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105165f:	75 8c 	jne	-116 <_runtime.call65536+0x4d>
 1051661:	48 89 23 	mov	qword ptr [rbx], rsp
 1051664:	eb 87 	jmp	-121 <_runtime.call65536+0x4d>
 1051666:	cc 	int3
 1051667:	cc 	int3
 1051668:	cc 	int3
 1051669:	cc 	int3
 105166a:	cc 	int3
 105166b:	cc 	int3
 105166c:	cc 	int3
 105166d:	cc 	int3
 105166e:	cc 	int3
 105166f:	cc 	int3

_runtime.call131072:
 1051670:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051679:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105167d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051684:	0f 84 90 00 00 00 	je	144 <_runtime.call131072+0xaa>
 105168a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051692:	48 29 f0 	sub	rax, rsi
 1051695:	48 3d 08 03 02 00 	cmp	rax, 131848
 105169b:	76 7d 	jbe	125 <_runtime.call131072+0xaa>
 105169d:	48 81 ec 08 00 02 00 	sub	rsp, 131080
 10516a4:	48 89 ac 24 00 00 02 00 	mov	qword ptr [rsp + 131072], rbp
 10516ac:	48 8d ac 24 00 00 02 00 	lea	rbp, [rsp + 131072]
 10516b4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10516b8:	48 85 db 	test	rbx, rbx
 10516bb:	75 67 	jne	103 <_runtime.call131072+0xb4>
 10516bd:	48 8b b4 24 20 00 02 00 	mov	rsi, qword ptr [rsp + 131104]
 10516c5:	8b 8c 24 28 00 02 00 	mov	ecx, dword ptr [rsp + 131112]
 10516cc:	48 89 e7 	mov	rdi, rsp
 10516cf:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 10516d1:	48 8b 94 24 18 00 02 00 	mov	rdx, qword ptr [rsp + 131096]
 10516d9:	ff 12 	call	qword ptr [rdx]
 10516db:	48 8b 94 24 10 00 02 00 	mov	rdx, qword ptr [rsp + 131088]
 10516e3:	48 8b bc 24 20 00 02 00 	mov	rdi, qword ptr [rsp + 131104]
 10516eb:	8b 8c 24 28 00 02 00 	mov	ecx, dword ptr [rsp + 131112]
 10516f2:	8b 9c 24 2c 00 02 00 	mov	ebx, dword ptr [rsp + 131116]
 10516f9:	48 89 e6 	mov	rsi, rsp
 10516fc:	48 01 df 	add	rdi, rbx
 10516ff:	48 01 de 	add	rsi, rbx
 1051702:	48 29 d9 	sub	rcx, rbx
 1051705:	e8 b6 f6 ff ff 	call	-2378 <_callRet>
 105170a:	48 8b ac 24 00 00 02 00 	mov	rbp, qword ptr [rsp + 131072]
 1051712:	48 81 c4 08 00 02 00 	add	rsp, 131080
 1051719:	c3 	ret
 105171a:	e8 b1 f4 ff ff 	call	-2895 <_runtime.morestack_noctxt>
 105171f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call131072>
 1051724:	48 8d bc 24 10 00 02 00 	lea	rdi, [rsp + 131088]
 105172c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105172f:	75 8c 	jne	-116 <_runtime.call131072+0x4d>
 1051731:	48 89 23 	mov	qword ptr [rbx], rsp
 1051734:	eb 87 	jmp	-121 <_runtime.call131072+0x4d>
 1051736:	cc 	int3
 1051737:	cc 	int3
 1051738:	cc 	int3
 1051739:	cc 	int3
 105173a:	cc 	int3
 105173b:	cc 	int3
 105173c:	cc 	int3
 105173d:	cc 	int3
 105173e:	cc 	int3
 105173f:	cc 	int3

_runtime.call262144:
 1051740:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051749:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105174d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051754:	0f 84 90 00 00 00 	je	144 <_runtime.call262144+0xaa>
 105175a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051762:	48 29 f0 	sub	rax, rsi
 1051765:	48 3d 08 03 04 00 	cmp	rax, 262920
 105176b:	76 7d 	jbe	125 <_runtime.call262144+0xaa>
 105176d:	48 81 ec 08 00 04 00 	sub	rsp, 262152
 1051774:	48 89 ac 24 00 00 04 00 	mov	qword ptr [rsp + 262144], rbp
 105177c:	48 8d ac 24 00 00 04 00 	lea	rbp, [rsp + 262144]
 1051784:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051788:	48 85 db 	test	rbx, rbx
 105178b:	75 67 	jne	103 <_runtime.call262144+0xb4>
 105178d:	48 8b b4 24 20 00 04 00 	mov	rsi, qword ptr [rsp + 262176]
 1051795:	8b 8c 24 28 00 04 00 	mov	ecx, dword ptr [rsp + 262184]
 105179c:	48 89 e7 	mov	rdi, rsp
 105179f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 10517a1:	48 8b 94 24 18 00 04 00 	mov	rdx, qword ptr [rsp + 262168]
 10517a9:	ff 12 	call	qword ptr [rdx]
 10517ab:	48 8b 94 24 10 00 04 00 	mov	rdx, qword ptr [rsp + 262160]
 10517b3:	48 8b bc 24 20 00 04 00 	mov	rdi, qword ptr [rsp + 262176]
 10517bb:	8b 8c 24 28 00 04 00 	mov	ecx, dword ptr [rsp + 262184]
 10517c2:	8b 9c 24 2c 00 04 00 	mov	ebx, dword ptr [rsp + 262188]
 10517c9:	48 89 e6 	mov	rsi, rsp
 10517cc:	48 01 df 	add	rdi, rbx
 10517cf:	48 01 de 	add	rsi, rbx
 10517d2:	48 29 d9 	sub	rcx, rbx
 10517d5:	e8 e6 f5 ff ff 	call	-2586 <_callRet>
 10517da:	48 8b ac 24 00 00 04 00 	mov	rbp, qword ptr [rsp + 262144]
 10517e2:	48 81 c4 08 00 04 00 	add	rsp, 262152
 10517e9:	c3 	ret
 10517ea:	e8 e1 f3 ff ff 	call	-3103 <_runtime.morestack_noctxt>
 10517ef:	e9 4c ff ff ff 	jmp	-180 <_runtime.call262144>
 10517f4:	48 8d bc 24 10 00 04 00 	lea	rdi, [rsp + 262160]
 10517fc:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10517ff:	75 8c 	jne	-116 <_runtime.call262144+0x4d>
 1051801:	48 89 23 	mov	qword ptr [rbx], rsp
 1051804:	eb 87 	jmp	-121 <_runtime.call262144+0x4d>
 1051806:	cc 	int3
 1051807:	cc 	int3
 1051808:	cc 	int3
 1051809:	cc 	int3
 105180a:	cc 	int3
 105180b:	cc 	int3
 105180c:	cc 	int3
 105180d:	cc 	int3
 105180e:	cc 	int3
 105180f:	cc 	int3

_runtime.call524288:
 1051810:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051819:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105181d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051824:	0f 84 90 00 00 00 	je	144 <_runtime.call524288+0xaa>
 105182a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051832:	48 29 f0 	sub	rax, rsi
 1051835:	48 3d 08 03 08 00 	cmp	rax, 525064
 105183b:	76 7d 	jbe	125 <_runtime.call524288+0xaa>
 105183d:	48 81 ec 08 00 08 00 	sub	rsp, 524296
 1051844:	48 89 ac 24 00 00 08 00 	mov	qword ptr [rsp + 524288], rbp
 105184c:	48 8d ac 24 00 00 08 00 	lea	rbp, [rsp + 524288]
 1051854:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051858:	48 85 db 	test	rbx, rbx
 105185b:	75 67 	jne	103 <_runtime.call524288+0xb4>
 105185d:	48 8b b4 24 20 00 08 00 	mov	rsi, qword ptr [rsp + 524320]
 1051865:	8b 8c 24 28 00 08 00 	mov	ecx, dword ptr [rsp + 524328]
 105186c:	48 89 e7 	mov	rdi, rsp
 105186f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051871:	48 8b 94 24 18 00 08 00 	mov	rdx, qword ptr [rsp + 524312]
 1051879:	ff 12 	call	qword ptr [rdx]
 105187b:	48 8b 94 24 10 00 08 00 	mov	rdx, qword ptr [rsp + 524304]
 1051883:	48 8b bc 24 20 00 08 00 	mov	rdi, qword ptr [rsp + 524320]
 105188b:	8b 8c 24 28 00 08 00 	mov	ecx, dword ptr [rsp + 524328]
 1051892:	8b 9c 24 2c 00 08 00 	mov	ebx, dword ptr [rsp + 524332]
 1051899:	48 89 e6 	mov	rsi, rsp
 105189c:	48 01 df 	add	rdi, rbx
 105189f:	48 01 de 	add	rsi, rbx
 10518a2:	48 29 d9 	sub	rcx, rbx
 10518a5:	e8 16 f5 ff ff 	call	-2794 <_callRet>
 10518aa:	48 8b ac 24 00 00 08 00 	mov	rbp, qword ptr [rsp + 524288]
 10518b2:	48 81 c4 08 00 08 00 	add	rsp, 524296
 10518b9:	c3 	ret
 10518ba:	e8 11 f3 ff ff 	call	-3311 <_runtime.morestack_noctxt>
 10518bf:	e9 4c ff ff ff 	jmp	-180 <_runtime.call524288>
 10518c4:	48 8d bc 24 10 00 08 00 	lea	rdi, [rsp + 524304]
 10518cc:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10518cf:	75 8c 	jne	-116 <_runtime.call524288+0x4d>
 10518d1:	48 89 23 	mov	qword ptr [rbx], rsp
 10518d4:	eb 87 	jmp	-121 <_runtime.call524288+0x4d>
 10518d6:	cc 	int3
 10518d7:	cc 	int3
 10518d8:	cc 	int3
 10518d9:	cc 	int3
 10518da:	cc 	int3
 10518db:	cc 	int3
 10518dc:	cc 	int3
 10518dd:	cc 	int3
 10518de:	cc 	int3
 10518df:	cc 	int3

_runtime.call1048576:
 10518e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10518e9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 10518ed:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 10518f4:	0f 84 90 00 00 00 	je	144 <_runtime.call1048576+0xaa>
 10518fa:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051902:	48 29 f0 	sub	rax, rsi
 1051905:	48 3d 08 03 10 00 	cmp	rax, 1049352
 105190b:	76 7d 	jbe	125 <_runtime.call1048576+0xaa>
 105190d:	48 81 ec 08 00 10 00 	sub	rsp, 1048584
 1051914:	48 89 ac 24 00 00 10 00 	mov	qword ptr [rsp + 1048576], rbp
 105191c:	48 8d ac 24 00 00 10 00 	lea	rbp, [rsp + 1048576]
 1051924:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051928:	48 85 db 	test	rbx, rbx
 105192b:	75 67 	jne	103 <_runtime.call1048576+0xb4>
 105192d:	48 8b b4 24 20 00 10 00 	mov	rsi, qword ptr [rsp + 1048608]
 1051935:	8b 8c 24 28 00 10 00 	mov	ecx, dword ptr [rsp + 1048616]
 105193c:	48 89 e7 	mov	rdi, rsp
 105193f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051941:	48 8b 94 24 18 00 10 00 	mov	rdx, qword ptr [rsp + 1048600]
 1051949:	ff 12 	call	qword ptr [rdx]
 105194b:	48 8b 94 24 10 00 10 00 	mov	rdx, qword ptr [rsp + 1048592]
 1051953:	48 8b bc 24 20 00 10 00 	mov	rdi, qword ptr [rsp + 1048608]
 105195b:	8b 8c 24 28 00 10 00 	mov	ecx, dword ptr [rsp + 1048616]
 1051962:	8b 9c 24 2c 00 10 00 	mov	ebx, dword ptr [rsp + 1048620]
 1051969:	48 89 e6 	mov	rsi, rsp
 105196c:	48 01 df 	add	rdi, rbx
 105196f:	48 01 de 	add	rsi, rbx
 1051972:	48 29 d9 	sub	rcx, rbx
 1051975:	e8 46 f4 ff ff 	call	-3002 <_callRet>
 105197a:	48 8b ac 24 00 00 10 00 	mov	rbp, qword ptr [rsp + 1048576]
 1051982:	48 81 c4 08 00 10 00 	add	rsp, 1048584
 1051989:	c3 	ret
 105198a:	e8 41 f2 ff ff 	call	-3519 <_runtime.morestack_noctxt>
 105198f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call1048576>
 1051994:	48 8d bc 24 10 00 10 00 	lea	rdi, [rsp + 1048592]
 105199c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105199f:	75 8c 	jne	-116 <_runtime.call1048576+0x4d>
 10519a1:	48 89 23 	mov	qword ptr [rbx], rsp
 10519a4:	eb 87 	jmp	-121 <_runtime.call1048576+0x4d>
 10519a6:	cc 	int3
 10519a7:	cc 	int3
 10519a8:	cc 	int3
 10519a9:	cc 	int3
 10519aa:	cc 	int3
 10519ab:	cc 	int3
 10519ac:	cc 	int3
 10519ad:	cc 	int3
 10519ae:	cc 	int3
 10519af:	cc 	int3

_runtime.call2097152:
 10519b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10519b9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 10519bd:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 10519c4:	0f 84 90 00 00 00 	je	144 <_runtime.call2097152+0xaa>
 10519ca:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 10519d2:	48 29 f0 	sub	rax, rsi
 10519d5:	48 3d 08 03 20 00 	cmp	rax, 2097928
 10519db:	76 7d 	jbe	125 <_runtime.call2097152+0xaa>
 10519dd:	48 81 ec 08 00 20 00 	sub	rsp, 2097160
 10519e4:	48 89 ac 24 00 00 20 00 	mov	qword ptr [rsp + 2097152], rbp
 10519ec:	48 8d ac 24 00 00 20 00 	lea	rbp, [rsp + 2097152]
 10519f4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10519f8:	48 85 db 	test	rbx, rbx
 10519fb:	75 67 	jne	103 <_runtime.call2097152+0xb4>
 10519fd:	48 8b b4 24 20 00 20 00 	mov	rsi, qword ptr [rsp + 2097184]
 1051a05:	8b 8c 24 28 00 20 00 	mov	ecx, dword ptr [rsp + 2097192]
 1051a0c:	48 89 e7 	mov	rdi, rsp
 1051a0f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051a11:	48 8b 94 24 18 00 20 00 	mov	rdx, qword ptr [rsp + 2097176]
 1051a19:	ff 12 	call	qword ptr [rdx]
 1051a1b:	48 8b 94 24 10 00 20 00 	mov	rdx, qword ptr [rsp + 2097168]
 1051a23:	48 8b bc 24 20 00 20 00 	mov	rdi, qword ptr [rsp + 2097184]
 1051a2b:	8b 8c 24 28 00 20 00 	mov	ecx, dword ptr [rsp + 2097192]
 1051a32:	8b 9c 24 2c 00 20 00 	mov	ebx, dword ptr [rsp + 2097196]
 1051a39:	48 89 e6 	mov	rsi, rsp
 1051a3c:	48 01 df 	add	rdi, rbx
 1051a3f:	48 01 de 	add	rsi, rbx
 1051a42:	48 29 d9 	sub	rcx, rbx
 1051a45:	e8 76 f3 ff ff 	call	-3210 <_callRet>
 1051a4a:	48 8b ac 24 00 00 20 00 	mov	rbp, qword ptr [rsp + 2097152]
 1051a52:	48 81 c4 08 00 20 00 	add	rsp, 2097160
 1051a59:	c3 	ret
 1051a5a:	e8 71 f1 ff ff 	call	-3727 <_runtime.morestack_noctxt>
 1051a5f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call2097152>
 1051a64:	48 8d bc 24 10 00 20 00 	lea	rdi, [rsp + 2097168]
 1051a6c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051a6f:	75 8c 	jne	-116 <_runtime.call2097152+0x4d>
 1051a71:	48 89 23 	mov	qword ptr [rbx], rsp
 1051a74:	eb 87 	jmp	-121 <_runtime.call2097152+0x4d>
 1051a76:	cc 	int3
 1051a77:	cc 	int3
 1051a78:	cc 	int3
 1051a79:	cc 	int3
 1051a7a:	cc 	int3
 1051a7b:	cc 	int3
 1051a7c:	cc 	int3
 1051a7d:	cc 	int3
 1051a7e:	cc 	int3
 1051a7f:	cc 	int3

_runtime.call4194304:
 1051a80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051a89:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051a8d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051a94:	0f 84 90 00 00 00 	je	144 <_runtime.call4194304+0xaa>
 1051a9a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051aa2:	48 29 f0 	sub	rax, rsi
 1051aa5:	48 3d 08 03 40 00 	cmp	rax, 4195080
 1051aab:	76 7d 	jbe	125 <_runtime.call4194304+0xaa>
 1051aad:	48 81 ec 08 00 40 00 	sub	rsp, 4194312
 1051ab4:	48 89 ac 24 00 00 40 00 	mov	qword ptr [rsp + 4194304], rbp
 1051abc:	48 8d ac 24 00 00 40 00 	lea	rbp, [rsp + 4194304]
 1051ac4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051ac8:	48 85 db 	test	rbx, rbx
 1051acb:	75 67 	jne	103 <_runtime.call4194304+0xb4>
 1051acd:	48 8b b4 24 20 00 40 00 	mov	rsi, qword ptr [rsp + 4194336]
 1051ad5:	8b 8c 24 28 00 40 00 	mov	ecx, dword ptr [rsp + 4194344]
 1051adc:	48 89 e7 	mov	rdi, rsp
 1051adf:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051ae1:	48 8b 94 24 18 00 40 00 	mov	rdx, qword ptr [rsp + 4194328]
 1051ae9:	ff 12 	call	qword ptr [rdx]
 1051aeb:	48 8b 94 24 10 00 40 00 	mov	rdx, qword ptr [rsp + 4194320]
 1051af3:	48 8b bc 24 20 00 40 00 	mov	rdi, qword ptr [rsp + 4194336]
 1051afb:	8b 8c 24 28 00 40 00 	mov	ecx, dword ptr [rsp + 4194344]
 1051b02:	8b 9c 24 2c 00 40 00 	mov	ebx, dword ptr [rsp + 4194348]
 1051b09:	48 89 e6 	mov	rsi, rsp
 1051b0c:	48 01 df 	add	rdi, rbx
 1051b0f:	48 01 de 	add	rsi, rbx
 1051b12:	48 29 d9 	sub	rcx, rbx
 1051b15:	e8 a6 f2 ff ff 	call	-3418 <_callRet>
 1051b1a:	48 8b ac 24 00 00 40 00 	mov	rbp, qword ptr [rsp + 4194304]
 1051b22:	48 81 c4 08 00 40 00 	add	rsp, 4194312
 1051b29:	c3 	ret
 1051b2a:	e8 a1 f0 ff ff 	call	-3935 <_runtime.morestack_noctxt>
 1051b2f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call4194304>
 1051b34:	48 8d bc 24 10 00 40 00 	lea	rdi, [rsp + 4194320]
 1051b3c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051b3f:	75 8c 	jne	-116 <_runtime.call4194304+0x4d>
 1051b41:	48 89 23 	mov	qword ptr [rbx], rsp
 1051b44:	eb 87 	jmp	-121 <_runtime.call4194304+0x4d>
 1051b46:	cc 	int3
 1051b47:	cc 	int3
 1051b48:	cc 	int3
 1051b49:	cc 	int3
 1051b4a:	cc 	int3
 1051b4b:	cc 	int3
 1051b4c:	cc 	int3
 1051b4d:	cc 	int3
 1051b4e:	cc 	int3
 1051b4f:	cc 	int3

_runtime.call8388608:
 1051b50:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051b59:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051b5d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051b64:	0f 84 90 00 00 00 	je	144 <_runtime.call8388608+0xaa>
 1051b6a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051b72:	48 29 f0 	sub	rax, rsi
 1051b75:	48 3d 08 03 80 00 	cmp	rax, 8389384
 1051b7b:	76 7d 	jbe	125 <_runtime.call8388608+0xaa>
 1051b7d:	48 81 ec 08 00 80 00 	sub	rsp, 8388616
 1051b84:	48 89 ac 24 00 00 80 00 	mov	qword ptr [rsp + 8388608], rbp
 1051b8c:	48 8d ac 24 00 00 80 00 	lea	rbp, [rsp + 8388608]
 1051b94:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051b98:	48 85 db 	test	rbx, rbx
 1051b9b:	75 67 	jne	103 <_runtime.call8388608+0xb4>
 1051b9d:	48 8b b4 24 20 00 80 00 	mov	rsi, qword ptr [rsp + 8388640]
 1051ba5:	8b 8c 24 28 00 80 00 	mov	ecx, dword ptr [rsp + 8388648]
 1051bac:	48 89 e7 	mov	rdi, rsp
 1051baf:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051bb1:	48 8b 94 24 18 00 80 00 	mov	rdx, qword ptr [rsp + 8388632]
 1051bb9:	ff 12 	call	qword ptr [rdx]
 1051bbb:	48 8b 94 24 10 00 80 00 	mov	rdx, qword ptr [rsp + 8388624]
 1051bc3:	48 8b bc 24 20 00 80 00 	mov	rdi, qword ptr [rsp + 8388640]
 1051bcb:	8b 8c 24 28 00 80 00 	mov	ecx, dword ptr [rsp + 8388648]
 1051bd2:	8b 9c 24 2c 00 80 00 	mov	ebx, dword ptr [rsp + 8388652]
 1051bd9:	48 89 e6 	mov	rsi, rsp
 1051bdc:	48 01 df 	add	rdi, rbx
 1051bdf:	48 01 de 	add	rsi, rbx
 1051be2:	48 29 d9 	sub	rcx, rbx
 1051be5:	e8 d6 f1 ff ff 	call	-3626 <_callRet>
 1051bea:	48 8b ac 24 00 00 80 00 	mov	rbp, qword ptr [rsp + 8388608]
 1051bf2:	48 81 c4 08 00 80 00 	add	rsp, 8388616
 1051bf9:	c3 	ret
 1051bfa:	e8 d1 ef ff ff 	call	-4143 <_runtime.morestack_noctxt>
 1051bff:	e9 4c ff ff ff 	jmp	-180 <_runtime.call8388608>
 1051c04:	48 8d bc 24 10 00 80 00 	lea	rdi, [rsp + 8388624]
 1051c0c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051c0f:	75 8c 	jne	-116 <_runtime.call8388608+0x4d>
 1051c11:	48 89 23 	mov	qword ptr [rbx], rsp
 1051c14:	eb 87 	jmp	-121 <_runtime.call8388608+0x4d>
 1051c16:	cc 	int3
 1051c17:	cc 	int3
 1051c18:	cc 	int3
 1051c19:	cc 	int3
 1051c1a:	cc 	int3
 1051c1b:	cc 	int3
 1051c1c:	cc 	int3
 1051c1d:	cc 	int3
 1051c1e:	cc 	int3
 1051c1f:	cc 	int3

_runtime.call16777216:
 1051c20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051c29:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051c2d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051c34:	0f 84 90 00 00 00 	je	144 <_runtime.call16777216+0xaa>
 1051c3a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051c42:	48 29 f0 	sub	rax, rsi
 1051c45:	48 3d 08 03 00 01 	cmp	rax, 16777992
 1051c4b:	76 7d 	jbe	125 <_runtime.call16777216+0xaa>
 1051c4d:	48 81 ec 08 00 00 01 	sub	rsp, 16777224
 1051c54:	48 89 ac 24 00 00 00 01 	mov	qword ptr [rsp + 16777216], rbp
 1051c5c:	48 8d ac 24 00 00 00 01 	lea	rbp, [rsp + 16777216]
 1051c64:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051c68:	48 85 db 	test	rbx, rbx
 1051c6b:	75 67 	jne	103 <_runtime.call16777216+0xb4>
 1051c6d:	48 8b b4 24 20 00 00 01 	mov	rsi, qword ptr [rsp + 16777248]
 1051c75:	8b 8c 24 28 00 00 01 	mov	ecx, dword ptr [rsp + 16777256]
 1051c7c:	48 89 e7 	mov	rdi, rsp
 1051c7f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051c81:	48 8b 94 24 18 00 00 01 	mov	rdx, qword ptr [rsp + 16777240]
 1051c89:	ff 12 	call	qword ptr [rdx]
 1051c8b:	48 8b 94 24 10 00 00 01 	mov	rdx, qword ptr [rsp + 16777232]
 1051c93:	48 8b bc 24 20 00 00 01 	mov	rdi, qword ptr [rsp + 16777248]
 1051c9b:	8b 8c 24 28 00 00 01 	mov	ecx, dword ptr [rsp + 16777256]
 1051ca2:	8b 9c 24 2c 00 00 01 	mov	ebx, dword ptr [rsp + 16777260]
 1051ca9:	48 89 e6 	mov	rsi, rsp
 1051cac:	48 01 df 	add	rdi, rbx
 1051caf:	48 01 de 	add	rsi, rbx
 1051cb2:	48 29 d9 	sub	rcx, rbx
 1051cb5:	e8 06 f1 ff ff 	call	-3834 <_callRet>
 1051cba:	48 8b ac 24 00 00 00 01 	mov	rbp, qword ptr [rsp + 16777216]
 1051cc2:	48 81 c4 08 00 00 01 	add	rsp, 16777224
 1051cc9:	c3 	ret
 1051cca:	e8 01 ef ff ff 	call	-4351 <_runtime.morestack_noctxt>
 1051ccf:	e9 4c ff ff ff 	jmp	-180 <_runtime.call16777216>
 1051cd4:	48 8d bc 24 10 00 00 01 	lea	rdi, [rsp + 16777232]
 1051cdc:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051cdf:	75 8c 	jne	-116 <_runtime.call16777216+0x4d>
 1051ce1:	48 89 23 	mov	qword ptr [rbx], rsp
 1051ce4:	eb 87 	jmp	-121 <_runtime.call16777216+0x4d>
 1051ce6:	cc 	int3
 1051ce7:	cc 	int3
 1051ce8:	cc 	int3
 1051ce9:	cc 	int3
 1051cea:	cc 	int3
 1051ceb:	cc 	int3
 1051cec:	cc 	int3
 1051ced:	cc 	int3
 1051cee:	cc 	int3
 1051cef:	cc 	int3

_runtime.call33554432:
 1051cf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051cf9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051cfd:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051d04:	0f 84 90 00 00 00 	je	144 <_runtime.call33554432+0xaa>
 1051d0a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051d12:	48 29 f0 	sub	rax, rsi
 1051d15:	48 3d 08 03 00 02 	cmp	rax, 33555208
 1051d1b:	76 7d 	jbe	125 <_runtime.call33554432+0xaa>
 1051d1d:	48 81 ec 08 00 00 02 	sub	rsp, 33554440
 1051d24:	48 89 ac 24 00 00 00 02 	mov	qword ptr [rsp + 33554432], rbp
 1051d2c:	48 8d ac 24 00 00 00 02 	lea	rbp, [rsp + 33554432]
 1051d34:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051d38:	48 85 db 	test	rbx, rbx
 1051d3b:	75 67 	jne	103 <_runtime.call33554432+0xb4>
 1051d3d:	48 8b b4 24 20 00 00 02 	mov	rsi, qword ptr [rsp + 33554464]
 1051d45:	8b 8c 24 28 00 00 02 	mov	ecx, dword ptr [rsp + 33554472]
 1051d4c:	48 89 e7 	mov	rdi, rsp
 1051d4f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051d51:	48 8b 94 24 18 00 00 02 	mov	rdx, qword ptr [rsp + 33554456]
 1051d59:	ff 12 	call	qword ptr [rdx]
 1051d5b:	48 8b 94 24 10 00 00 02 	mov	rdx, qword ptr [rsp + 33554448]
 1051d63:	48 8b bc 24 20 00 00 02 	mov	rdi, qword ptr [rsp + 33554464]
 1051d6b:	8b 8c 24 28 00 00 02 	mov	ecx, dword ptr [rsp + 33554472]
 1051d72:	8b 9c 24 2c 00 00 02 	mov	ebx, dword ptr [rsp + 33554476]
 1051d79:	48 89 e6 	mov	rsi, rsp
 1051d7c:	48 01 df 	add	rdi, rbx
 1051d7f:	48 01 de 	add	rsi, rbx
 1051d82:	48 29 d9 	sub	rcx, rbx
 1051d85:	e8 36 f0 ff ff 	call	-4042 <_callRet>
 1051d8a:	48 8b ac 24 00 00 00 02 	mov	rbp, qword ptr [rsp + 33554432]
 1051d92:	48 81 c4 08 00 00 02 	add	rsp, 33554440
 1051d99:	c3 	ret
 1051d9a:	e8 31 ee ff ff 	call	-4559 <_runtime.morestack_noctxt>
 1051d9f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call33554432>
 1051da4:	48 8d bc 24 10 00 00 02 	lea	rdi, [rsp + 33554448]
 1051dac:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051daf:	75 8c 	jne	-116 <_runtime.call33554432+0x4d>
 1051db1:	48 89 23 	mov	qword ptr [rbx], rsp
 1051db4:	eb 87 	jmp	-121 <_runtime.call33554432+0x4d>
 1051db6:	cc 	int3
 1051db7:	cc 	int3
 1051db8:	cc 	int3
 1051db9:	cc 	int3
 1051dba:	cc 	int3
 1051dbb:	cc 	int3
 1051dbc:	cc 	int3
 1051dbd:	cc 	int3
 1051dbe:	cc 	int3
 1051dbf:	cc 	int3

_runtime.call67108864:
 1051dc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051dc9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051dcd:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051dd4:	0f 84 90 00 00 00 	je	144 <_runtime.call67108864+0xaa>
 1051dda:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051de2:	48 29 f0 	sub	rax, rsi
 1051de5:	48 3d 08 03 00 04 	cmp	rax, 67109640
 1051deb:	76 7d 	jbe	125 <_runtime.call67108864+0xaa>
 1051ded:	48 81 ec 08 00 00 04 	sub	rsp, 67108872
 1051df4:	48 89 ac 24 00 00 00 04 	mov	qword ptr [rsp + 67108864], rbp
 1051dfc:	48 8d ac 24 00 00 00 04 	lea	rbp, [rsp + 67108864]
 1051e04:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051e08:	48 85 db 	test	rbx, rbx
 1051e0b:	75 67 	jne	103 <_runtime.call67108864+0xb4>
 1051e0d:	48 8b b4 24 20 00 00 04 	mov	rsi, qword ptr [rsp + 67108896]
 1051e15:	8b 8c 24 28 00 00 04 	mov	ecx, dword ptr [rsp + 67108904]
 1051e1c:	48 89 e7 	mov	rdi, rsp
 1051e1f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051e21:	48 8b 94 24 18 00 00 04 	mov	rdx, qword ptr [rsp + 67108888]
 1051e29:	ff 12 	call	qword ptr [rdx]
 1051e2b:	48 8b 94 24 10 00 00 04 	mov	rdx, qword ptr [rsp + 67108880]
 1051e33:	48 8b bc 24 20 00 00 04 	mov	rdi, qword ptr [rsp + 67108896]
 1051e3b:	8b 8c 24 28 00 00 04 	mov	ecx, dword ptr [rsp + 67108904]
 1051e42:	8b 9c 24 2c 00 00 04 	mov	ebx, dword ptr [rsp + 67108908]
 1051e49:	48 89 e6 	mov	rsi, rsp
 1051e4c:	48 01 df 	add	rdi, rbx
 1051e4f:	48 01 de 	add	rsi, rbx
 1051e52:	48 29 d9 	sub	rcx, rbx
 1051e55:	e8 66 ef ff ff 	call	-4250 <_callRet>
 1051e5a:	48 8b ac 24 00 00 00 04 	mov	rbp, qword ptr [rsp + 67108864]
 1051e62:	48 81 c4 08 00 00 04 	add	rsp, 67108872
 1051e69:	c3 	ret
 1051e6a:	e8 61 ed ff ff 	call	-4767 <_runtime.morestack_noctxt>
 1051e6f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call67108864>
 1051e74:	48 8d bc 24 10 00 00 04 	lea	rdi, [rsp + 67108880]
 1051e7c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051e7f:	75 8c 	jne	-116 <_runtime.call67108864+0x4d>
 1051e81:	48 89 23 	mov	qword ptr [rbx], rsp
 1051e84:	eb 87 	jmp	-121 <_runtime.call67108864+0x4d>
 1051e86:	cc 	int3
 1051e87:	cc 	int3
 1051e88:	cc 	int3
 1051e89:	cc 	int3
 1051e8a:	cc 	int3
 1051e8b:	cc 	int3
 1051e8c:	cc 	int3
 1051e8d:	cc 	int3
 1051e8e:	cc 	int3
 1051e8f:	cc 	int3

_runtime.call134217728:
 1051e90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051e99:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051e9d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051ea4:	0f 84 90 00 00 00 	je	144 <_runtime.call134217728+0xaa>
 1051eaa:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051eb2:	48 29 f0 	sub	rax, rsi
 1051eb5:	48 3d 08 03 00 08 	cmp	rax, 134218504
 1051ebb:	76 7d 	jbe	125 <_runtime.call134217728+0xaa>
 1051ebd:	48 81 ec 08 00 00 08 	sub	rsp, 134217736
 1051ec4:	48 89 ac 24 00 00 00 08 	mov	qword ptr [rsp + 134217728], rbp
 1051ecc:	48 8d ac 24 00 00 00 08 	lea	rbp, [rsp + 134217728]
 1051ed4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051ed8:	48 85 db 	test	rbx, rbx
 1051edb:	75 67 	jne	103 <_runtime.call134217728+0xb4>
 1051edd:	48 8b b4 24 20 00 00 08 	mov	rsi, qword ptr [rsp + 134217760]
 1051ee5:	8b 8c 24 28 00 00 08 	mov	ecx, dword ptr [rsp + 134217768]
 1051eec:	48 89 e7 	mov	rdi, rsp
 1051eef:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051ef1:	48 8b 94 24 18 00 00 08 	mov	rdx, qword ptr [rsp + 134217752]
 1051ef9:	ff 12 	call	qword ptr [rdx]
 1051efb:	48 8b 94 24 10 00 00 08 	mov	rdx, qword ptr [rsp + 134217744]
 1051f03:	48 8b bc 24 20 00 00 08 	mov	rdi, qword ptr [rsp + 134217760]
 1051f0b:	8b 8c 24 28 00 00 08 	mov	ecx, dword ptr [rsp + 134217768]
 1051f12:	8b 9c 24 2c 00 00 08 	mov	ebx, dword ptr [rsp + 134217772]
 1051f19:	48 89 e6 	mov	rsi, rsp
 1051f1c:	48 01 df 	add	rdi, rbx
 1051f1f:	48 01 de 	add	rsi, rbx
 1051f22:	48 29 d9 	sub	rcx, rbx
 1051f25:	e8 96 ee ff ff 	call	-4458 <_callRet>
 1051f2a:	48 8b ac 24 00 00 00 08 	mov	rbp, qword ptr [rsp + 134217728]
 1051f32:	48 81 c4 08 00 00 08 	add	rsp, 134217736
 1051f39:	c3 	ret
 1051f3a:	e8 91 ec ff ff 	call	-4975 <_runtime.morestack_noctxt>
 1051f3f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call134217728>
 1051f44:	48 8d bc 24 10 00 00 08 	lea	rdi, [rsp + 134217744]
 1051f4c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1051f4f:	75 8c 	jne	-116 <_runtime.call134217728+0x4d>
 1051f51:	48 89 23 	mov	qword ptr [rbx], rsp
 1051f54:	eb 87 	jmp	-121 <_runtime.call134217728+0x4d>
 1051f56:	cc 	int3
 1051f57:	cc 	int3
 1051f58:	cc 	int3
 1051f59:	cc 	int3
 1051f5a:	cc 	int3
 1051f5b:	cc 	int3
 1051f5c:	cc 	int3
 1051f5d:	cc 	int3
 1051f5e:	cc 	int3
 1051f5f:	cc 	int3

_runtime.call268435456:
 1051f60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1051f69:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 1051f6d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1051f74:	0f 84 90 00 00 00 	je	144 <_runtime.call268435456+0xaa>
 1051f7a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1051f82:	48 29 f0 	sub	rax, rsi
 1051f85:	48 3d 08 03 00 10 	cmp	rax, 268436232
 1051f8b:	76 7d 	jbe	125 <_runtime.call268435456+0xaa>
 1051f8d:	48 81 ec 08 00 00 10 	sub	rsp, 268435464
 1051f94:	48 89 ac 24 00 00 00 10 	mov	qword ptr [rsp + 268435456], rbp
 1051f9c:	48 8d ac 24 00 00 00 10 	lea	rbp, [rsp + 268435456]
 1051fa4:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1051fa8:	48 85 db 	test	rbx, rbx
 1051fab:	75 67 	jne	103 <_runtime.call268435456+0xb4>
 1051fad:	48 8b b4 24 20 00 00 10 	mov	rsi, qword ptr [rsp + 268435488]
 1051fb5:	8b 8c 24 28 00 00 10 	mov	ecx, dword ptr [rsp + 268435496]
 1051fbc:	48 89 e7 	mov	rdi, rsp
 1051fbf:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1051fc1:	48 8b 94 24 18 00 00 10 	mov	rdx, qword ptr [rsp + 268435480]
 1051fc9:	ff 12 	call	qword ptr [rdx]
 1051fcb:	48 8b 94 24 10 00 00 10 	mov	rdx, qword ptr [rsp + 268435472]
 1051fd3:	48 8b bc 24 20 00 00 10 	mov	rdi, qword ptr [rsp + 268435488]
 1051fdb:	8b 8c 24 28 00 00 10 	mov	ecx, dword ptr [rsp + 268435496]
 1051fe2:	8b 9c 24 2c 00 00 10 	mov	ebx, dword ptr [rsp + 268435500]
 1051fe9:	48 89 e6 	mov	rsi, rsp
 1051fec:	48 01 df 	add	rdi, rbx
 1051fef:	48 01 de 	add	rsi, rbx
 1051ff2:	48 29 d9 	sub	rcx, rbx
 1051ff5:	e8 c6 ed ff ff 	call	-4666 <_callRet>
 1051ffa:	48 8b ac 24 00 00 00 10 	mov	rbp, qword ptr [rsp + 268435456]
 1052002:	48 81 c4 08 00 00 10 	add	rsp, 268435464
 1052009:	c3 	ret
 105200a:	e8 c1 eb ff ff 	call	-5183 <_runtime.morestack_noctxt>
 105200f:	e9 4c ff ff ff 	jmp	-180 <_runtime.call268435456>
 1052014:	48 8d bc 24 10 00 00 10 	lea	rdi, [rsp + 268435472]
 105201c:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105201f:	75 8c 	jne	-116 <_runtime.call268435456+0x4d>
 1052021:	48 89 23 	mov	qword ptr [rbx], rsp
 1052024:	eb 87 	jmp	-121 <_runtime.call268435456+0x4d>
 1052026:	cc 	int3
 1052027:	cc 	int3
 1052028:	cc 	int3
 1052029:	cc 	int3
 105202a:	cc 	int3
 105202b:	cc 	int3
 105202c:	cc 	int3
 105202d:	cc 	int3
 105202e:	cc 	int3
 105202f:	cc 	int3

_runtime.call536870912:
 1052030:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052039:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105203d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1052044:	0f 84 90 00 00 00 	je	144 <_runtime.call536870912+0xaa>
 105204a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1052052:	48 29 f0 	sub	rax, rsi
 1052055:	48 3d 08 03 00 20 	cmp	rax, 536871688
 105205b:	76 7d 	jbe	125 <_runtime.call536870912+0xaa>
 105205d:	48 81 ec 08 00 00 20 	sub	rsp, 536870920
 1052064:	48 89 ac 24 00 00 00 20 	mov	qword ptr [rsp + 536870912], rbp
 105206c:	48 8d ac 24 00 00 00 20 	lea	rbp, [rsp + 536870912]
 1052074:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052078:	48 85 db 	test	rbx, rbx
 105207b:	75 67 	jne	103 <_runtime.call536870912+0xb4>
 105207d:	48 8b b4 24 20 00 00 20 	mov	rsi, qword ptr [rsp + 536870944]
 1052085:	8b 8c 24 28 00 00 20 	mov	ecx, dword ptr [rsp + 536870952]
 105208c:	48 89 e7 	mov	rdi, rsp
 105208f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1052091:	48 8b 94 24 18 00 00 20 	mov	rdx, qword ptr [rsp + 536870936]
 1052099:	ff 12 	call	qword ptr [rdx]
 105209b:	48 8b 94 24 10 00 00 20 	mov	rdx, qword ptr [rsp + 536870928]
 10520a3:	48 8b bc 24 20 00 00 20 	mov	rdi, qword ptr [rsp + 536870944]
 10520ab:	8b 8c 24 28 00 00 20 	mov	ecx, dword ptr [rsp + 536870952]
 10520b2:	8b 9c 24 2c 00 00 20 	mov	ebx, dword ptr [rsp + 536870956]
 10520b9:	48 89 e6 	mov	rsi, rsp
 10520bc:	48 01 df 	add	rdi, rbx
 10520bf:	48 01 de 	add	rsi, rbx
 10520c2:	48 29 d9 	sub	rcx, rbx
 10520c5:	e8 f6 ec ff ff 	call	-4874 <_callRet>
 10520ca:	48 8b ac 24 00 00 00 20 	mov	rbp, qword ptr [rsp + 536870912]
 10520d2:	48 81 c4 08 00 00 20 	add	rsp, 536870920
 10520d9:	c3 	ret
 10520da:	e8 f1 ea ff ff 	call	-5391 <_runtime.morestack_noctxt>
 10520df:	e9 4c ff ff ff 	jmp	-180 <_runtime.call536870912>
 10520e4:	48 8d bc 24 10 00 00 20 	lea	rdi, [rsp + 536870928]
 10520ec:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10520ef:	75 8c 	jne	-116 <_runtime.call536870912+0x4d>
 10520f1:	48 89 23 	mov	qword ptr [rbx], rsp
 10520f4:	eb 87 	jmp	-121 <_runtime.call536870912+0x4d>
 10520f6:	cc 	int3
 10520f7:	cc 	int3
 10520f8:	cc 	int3
 10520f9:	cc 	int3
 10520fa:	cc 	int3
 10520fb:	cc 	int3
 10520fc:	cc 	int3
 10520fd:	cc 	int3
 10520fe:	cc 	int3
 10520ff:	cc 	int3

_runtime.call1073741824:
 1052100:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052109:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105210d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1052114:	0f 84 90 00 00 00 	je	144 <_runtime.call1073741824+0xaa>
 105211a:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 1052122:	48 29 f0 	sub	rax, rsi
 1052125:	48 3d 08 03 00 40 	cmp	rax, 1073742600
 105212b:	76 7d 	jbe	125 <_runtime.call1073741824+0xaa>
 105212d:	48 81 ec 08 00 00 40 	sub	rsp, 1073741832
 1052134:	48 89 ac 24 00 00 00 40 	mov	qword ptr [rsp + 1073741824], rbp
 105213c:	48 8d ac 24 00 00 00 40 	lea	rbp, [rsp + 1073741824]
 1052144:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052148:	48 85 db 	test	rbx, rbx
 105214b:	75 67 	jne	103 <_runtime.call1073741824+0xb4>
 105214d:	48 8b b4 24 20 00 00 40 	mov	rsi, qword ptr [rsp + 1073741856]
 1052155:	8b 8c 24 28 00 00 40 	mov	ecx, dword ptr [rsp + 1073741864]
 105215c:	48 89 e7 	mov	rdi, rsp
 105215f:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1052161:	48 8b 94 24 18 00 00 40 	mov	rdx, qword ptr [rsp + 1073741848]
 1052169:	ff 12 	call	qword ptr [rdx]
 105216b:	48 8b 94 24 10 00 00 40 	mov	rdx, qword ptr [rsp + 1073741840]
 1052173:	48 8b bc 24 20 00 00 40 	mov	rdi, qword ptr [rsp + 1073741856]
 105217b:	8b 8c 24 28 00 00 40 	mov	ecx, dword ptr [rsp + 1073741864]
 1052182:	8b 9c 24 2c 00 00 40 	mov	ebx, dword ptr [rsp + 1073741868]
 1052189:	48 89 e6 	mov	rsi, rsp
 105218c:	48 01 df 	add	rdi, rbx
 105218f:	48 01 de 	add	rsi, rbx
 1052192:	48 29 d9 	sub	rcx, rbx
 1052195:	e8 26 ec ff ff 	call	-5082 <_callRet>
 105219a:	48 8b ac 24 00 00 00 40 	mov	rbp, qword ptr [rsp + 1073741824]
 10521a2:	48 81 c4 08 00 00 40 	add	rsp, 1073741832
 10521a9:	c3 	ret
 10521aa:	e8 21 ea ff ff 	call	-5599 <_runtime.morestack_noctxt>
 10521af:	e9 4c ff ff ff 	jmp	-180 <_runtime.call1073741824>
 10521b4:	48 8d bc 24 10 00 00 40 	lea	rdi, [rsp + 1073741840]
 10521bc:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10521bf:	75 8c 	jne	-116 <_runtime.call1073741824+0x4d>
 10521c1:	48 89 23 	mov	qword ptr [rbx], rsp
 10521c4:	eb 87 	jmp	-121 <_runtime.call1073741824+0x4d>
 10521c6:	cc 	int3
 10521c7:	cc 	int3
 10521c8:	cc 	int3
 10521c9:	cc 	int3
 10521ca:	cc 	int3
 10521cb:	cc 	int3
 10521cc:	cc 	int3
 10521cd:	cc 	int3
 10521ce:	cc 	int3
 10521cf:	cc 	int3

_runtime.procyield:
 10521d0:	8b 44 24 08 	mov	eax, dword ptr [rsp + 8]
 10521d4:	f3 90 	pause
 10521d6:	83 e8 01 	sub	eax, 1
 10521d9:	75 f9 	jne	-7 <_runtime.procyield+0x4>
 10521db:	c3 	ret
 10521dc:	cc 	int3
 10521dd:	cc 	int3
 10521de:	cc 	int3
 10521df:	cc 	int3

_runtime.publicationBarrier:
 10521e0:	c3 	ret
 10521e1:	cc 	int3
 10521e2:	cc 	int3
 10521e3:	cc 	int3
 10521e4:	cc 	int3
 10521e5:	cc 	int3
 10521e6:	cc 	int3
 10521e7:	cc 	int3
 10521e8:	cc 	int3
 10521e9:	cc 	int3
 10521ea:	cc 	int3
 10521eb:	cc 	int3
 10521ec:	cc 	int3
 10521ed:	cc 	int3
 10521ee:	cc 	int3
 10521ef:	cc 	int3

_runtime.jmpdefer:
 10521f0:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 10521f5:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10521fa:	48 8d 63 f8 	lea	rsp, [rbx - 8]
 10521fe:	48 8b 6c 24 f8 	mov	rbp, qword ptr [rsp - 8]
 1052203:	48 83 2c 24 05 	sub	qword ptr [rsp], 5
 1052208:	48 8b 1a 	mov	rbx, qword ptr [rdx]
 105220b:	ff e3 	jmp	rbx
 105220d:	cc 	int3
 105220e:	cc 	int3
 105220f:	cc 	int3

_gosave:
 1052210:	65 4c 8b 04 25 30 00 00 00 	mov	r8, qword ptr gs:[48]
 1052219:	4c 8b 0c 24 	mov	r9, qword ptr [rsp]
 105221d:	4d 89 48 40 	mov	qword ptr [r8 + 64], r9
 1052221:	4c 8d 4c 24 08 	lea	r9, [rsp + 8]
 1052226:	4d 89 48 38 	mov	qword ptr [r8 + 56], r9
 105222a:	49 c7 40 58 00 00 00 00 	mov	qword ptr [r8 + 88], 0
 1052232:	49 89 68 68 	mov	qword ptr [r8 + 104], rbp
 1052236:	4d 8b 48 50 	mov	r9, qword ptr [r8 + 80]
 105223a:	4d 85 c9 	test	r9, r9
 105223d:	74 05 	je	5 <_gosave+0x34>
 105223f:	e8 2c 9f fd ff 	call	-155860 <_runtime.badctxt>
 1052244:	c3 	ret
 1052245:	cc 	int3
 1052246:	cc 	int3
 1052247:	cc 	int3
 1052248:	cc 	int3
 1052249:	cc 	int3
 105224a:	cc 	int3
 105224b:	cc 	int3
 105224c:	cc 	int3
 105224d:	cc 	int3
 105224e:	cc 	int3
 105224f:	cc 	int3

_runtime.asmcgocall:
 1052250:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1052255:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 105225a:	48 89 e2 	mov	rdx, rsp
 105225d:	65 4c 8b 04 25 30 00 00 00 	mov	r8, qword ptr gs:[48]
 1052266:	49 83 f8 00 	cmp	r8, 0
 105226a:	74 73 	je	115 <_runtime.asmcgocall+0x8f>
 105226c:	4d 8b 40 30 	mov	r8, qword ptr [r8 + 48]
 1052270:	49 8b 30 	mov	rsi, qword ptr [r8]
 1052273:	65 48 8b 3c 25 30 00 00 00 	mov	rdi, qword ptr gs:[48]
 105227c:	48 39 fe 	cmp	rsi, rdi
 105227f:	74 5e 	je	94 <_runtime.asmcgocall+0x8f>
 1052281:	49 8b 70 50 	mov	rsi, qword ptr [r8 + 80]
 1052285:	48 39 fe 	cmp	rsi, rdi
 1052288:	74 55 	je	85 <_runtime.asmcgocall+0x8f>
 105228a:	49 8b 30 	mov	rsi, qword ptr [r8]
 105228d:	e8 7e ff ff ff 	call	-130 <_gosave>
 1052292:	65 48 89 34 25 30 00 00 00 	mov	qword ptr gs:[48], rsi
 105229b:	48 8b 66 38 	mov	rsp, qword ptr [rsi + 56]
 105229f:	48 83 ec 40 	sub	rsp, 64
 10522a3:	48 83 e4 f0 	and	rsp, -16
 10522a7:	48 89 7c 24 30 	mov	qword ptr [rsp + 48], rdi
 10522ac:	48 8b 7f 08 	mov	rdi, qword ptr [rdi + 8]
 10522b0:	48 29 d7 	sub	rdi, rdx
 10522b3:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 10522b8:	48 89 df 	mov	rdi, rbx
 10522bb:	48 89 d9 	mov	rcx, rbx
 10522be:	ff d0 	call	rax
 10522c0:	48 8b 7c 24 30 	mov	rdi, qword ptr [rsp + 48]
 10522c5:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10522c9:	48 2b 74 24 28 	sub	rsi, qword ptr [rsp + 40]
 10522ce:	65 48 89 3c 25 30 00 00 00 	mov	qword ptr gs:[48], rdi
 10522d7:	48 89 f4 	mov	rsp, rsi
 10522da:	89 44 24 18 	mov	dword ptr [rsp + 24], eax
 10522de:	c3 	ret
 10522df:	48 83 ec 40 	sub	rsp, 64
 10522e3:	48 83 e4 f0 	and	rsp, -16
 10522e7:	48 c7 44 24 30 00 00 00 00 	mov	qword ptr [rsp + 48], 0
 10522f0:	48 89 54 24 28 	mov	qword ptr [rsp + 40], rdx
 10522f5:	48 89 df 	mov	rdi, rbx
 10522f8:	48 89 d9 	mov	rcx, rbx
 10522fb:	ff d0 	call	rax
 10522fd:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1052302:	48 89 f4 	mov	rsp, rsi
 1052305:	89 44 24 18 	mov	dword ptr [rsp + 24], eax
 1052309:	c3 	ret
 105230a:	cc 	int3
 105230b:	cc 	int3
 105230c:	cc 	int3
 105230d:	cc 	int3
 105230e:	cc 	int3
 105230f:	cc 	int3

_runtime.setg:
 1052310:	48 8b 5c 24 08 	mov	rbx, qword ptr [rsp + 8]
 1052315:	65 48 89 1c 25 30 00 00 00 	mov	qword ptr gs:[48], rbx
 105231e:	c3 	ret
 105231f:	cc 	int3

_setg_gcc:
 1052320:	65 48 89 3c 25 30 00 00 00 	mov	qword ptr gs:[48], rdi
 1052329:	c3 	ret
 105232a:	cc 	int3
 105232b:	cc 	int3
 105232c:	cc 	int3
 105232d:	cc 	int3
 105232e:	cc 	int3
 105232f:	cc 	int3

_runtime.abort:
 1052330:	cd 03 	int	3
 1052332:	eb fe 	jmp	-2 <_runtime.abort+0x2>
 1052334:	cc 	int3
 1052335:	cc 	int3
 1052336:	cc 	int3
 1052337:	cc 	int3
 1052338:	cc 	int3
 1052339:	cc 	int3
 105233a:	cc 	int3
 105233b:	cc 	int3
 105233c:	cc 	int3
 105233d:	cc 	int3
 105233e:	cc 	int3
 105233f:	cc 	int3

_runtime.cputicks:
 1052340:	80 3d 25 54 0a 00 01 	cmp	byte ptr [rip + 676901], 1
 1052347:	75 05 	jne	5 <_runtime.cputicks+0xe>
 1052349:	0f ae e8 	lfence
 105234c:	eb 03 	jmp	3 <_runtime.cputicks+0x11>
 105234e:	0f ae f0 	mfence
 1052351:	0f 31 	rdtsc
 1052353:	48 c1 e2 20 	shl	rdx, 32
 1052357:	48 01 d0 	add	rax, rdx
 105235a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 105235f:	c3 	ret

_runtime.memhash:
 1052360:	80 3d 0a 54 0a 00 00 	cmp	byte ptr [rip + 676874], 0
 1052367:	74 14 	je	20 <_runtime.memhash+0x1d>
 1052369:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105236e:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1052373:	48 8d 54 24 20 	lea	rdx, [rsp + 32]
 1052378:	e9 43 00 00 00 	jmp	67 <_aeshashbody>
 105237d:	e9 7e 4a fb ff 	jmp	-308610 <_runtime.memhashFallback>
 1052382:	cc 	int3
 1052383:	cc 	int3
 1052384:	cc 	int3
 1052385:	cc 	int3
 1052386:	cc 	int3
 1052387:	cc 	int3
 1052388:	cc 	int3
 1052389:	cc 	int3
 105238a:	cc 	int3
 105238b:	cc 	int3
 105238c:	cc 	int3
 105238d:	cc 	int3
 105238e:	cc 	int3
 105238f:	cc 	int3

_runtime.strhash:
 1052390:	80 3d da 53 0a 00 00 	cmp	byte ptr [rip + 676826], 0
 1052397:	74 16 	je	22 <_runtime.strhash+0x1f>
 1052399:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105239e:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 10523a2:	48 8b 00 	mov	rax, qword ptr [rax]
 10523a5:	48 8d 54 24 18 	lea	rdx, [rsp + 24]
 10523aa:	e9 11 00 00 00 	jmp	17 <_aeshashbody>
 10523af:	e9 7c 00 fb ff 	jmp	-327556 <_runtime.strhashFallback>
 10523b4:	cc 	int3
 10523b5:	cc 	int3
 10523b6:	cc 	int3
 10523b7:	cc 	int3
 10523b8:	cc 	int3
 10523b9:	cc 	int3
 10523ba:	cc 	int3
 10523bb:	cc 	int3
 10523bc:	cc 	int3
 10523bd:	cc 	int3
 10523be:	cc 	int3
 10523bf:	cc 	int3

_aeshashbody:
 10523c0:	f3 0f 7e 44 24 10 	movq	xmm0, qword ptr [rsp + 16]
 10523c6:	66 0f c4 c1 04 	pinsrw	xmm0, ecx, 4
 10523cb:	f3 0f 70 c0 00 	pshufhw	xmm0, xmm0, 0
 10523d0:	66 0f 6f c8 	movdqa	xmm1, xmm0
 10523d4:	66 0f ef 05 c4 56 0a 00 	pxor	xmm0, xmmword ptr [rip + 677572]
 10523dc:	66 0f 38 dc c0 	aesenc	xmm0, xmm0
 10523e1:	48 83 f9 10 	cmp	rcx, 16
 10523e5:	72 24 	jb	36 <_aeshashbody+0x4b>
 10523e7:	74 7f 	je	127 <_aeshashbody+0xa8>
 10523e9:	48 83 f9 20 	cmp	rcx, 32
 10523ed:	76 7f 	jbe	127 <_aeshashbody+0xae>
 10523ef:	48 83 f9 40 	cmp	rcx, 64
 10523f3:	0f 86 bb 00 00 00 	jbe	187 <_aeshashbody+0xf4>
 10523f9:	48 81 f9 80 00 00 00 	cmp	rcx, 128
 1052400:	0f 86 4f 01 00 00 	jbe	335 <_aeshashbody+0x195>
 1052406:	e9 d1 02 00 00 	jmp	721 <_aeshashbody+0x31c>
 105240b:	48 85 c9 	test	rcx, rcx
 105240e:	74 4e 	je	78 <_aeshashbody+0x9e>
 1052410:	48 83 c0 10 	add	rax, 16
 1052414:	66 a9 f0 0f 	test	ax, 4080
 1052418:	74 2c 	je	44 <_aeshashbody+0x86>
 105241a:	f3 0f 6f 48 f0 	movdqu	xmm1, xmmword ptr [rax - 16]
 105241f:	48 01 c9 	add	rcx, rcx
 1052422:	48 8d 05 37 29 03 00 	lea	rax, [rip + 207159]
 1052429:	66 0f db 0c c8 	pand	xmm1, xmmword ptr [rax + 8*rcx]
 105242e:	66 0f ef c8 	pxor	xmm1, xmm0
 1052432:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 1052437:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 105243c:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 1052441:	66 0f d6 0a 	movq	qword ptr [rdx], xmm1
 1052445:	c3 	ret
 1052446:	f3 0f 6f 4c 08 e0 	movdqu	xmm1, xmmword ptr [rax + rcx - 32]
 105244c:	48 01 c9 	add	rcx, rcx
 105244f:	48 8d 05 0a 2a 03 00 	lea	rax, [rip + 207370]
 1052456:	66 0f 38 00 0c c8 	pshufb	xmm1, xmmword ptr [rax + 8*rcx]
 105245c:	eb d0 	jmp	-48 <_aeshashbody+0x6e>
 105245e:	66 0f 38 dc c0 	aesenc	xmm0, xmm0
 1052463:	66 0f d6 02 	movq	qword ptr [rdx], xmm0
 1052467:	c3 	ret
 1052468:	f3 0f 6f 08 	movdqu	xmm1, xmmword ptr [rax]
 105246c:	eb c0 	jmp	-64 <_aeshashbody+0x6e>
 105246e:	66 0f ef 0d 3a 56 0a 00 	pxor	xmm1, xmmword ptr [rip + 677434]
 1052476:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 105247b:	f3 0f 6f 10 	movdqu	xmm2, xmmword ptr [rax]
 105247f:	f3 0f 6f 5c 08 f0 	movdqu	xmm3, xmmword ptr [rax + rcx - 16]
 1052485:	66 0f ef d0 	pxor	xmm2, xmm0
 1052489:	66 0f ef d9 	pxor	xmm3, xmm1
 105248d:	66 0f 38 dc d2 	aesenc	xmm2, xmm2
 1052492:	66 0f 38 dc db 	aesenc	xmm3, xmm3
 1052497:	66 0f 38 dc d2 	aesenc	xmm2, xmm2
 105249c:	66 0f 38 dc db 	aesenc	xmm3, xmm3
 10524a1:	66 0f 38 dc d2 	aesenc	xmm2, xmm2
 10524a6:	66 0f 38 dc db 	aesenc	xmm3, xmm3
 10524ab:	66 0f ef d3 	pxor	xmm2, xmm3
 10524af:	66 0f d6 12 	movq	qword ptr [rdx], xmm2
 10524b3:	c3 	ret
 10524b4:	66 0f 6f d1 	movdqa	xmm2, xmm1
 10524b8:	66 0f 6f d9 	movdqa	xmm3, xmm1
 10524bc:	66 0f ef 0d ec 55 0a 00 	pxor	xmm1, xmmword ptr [rip + 677356]
 10524c4:	66 0f ef 15 f4 55 0a 00 	pxor	xmm2, xmmword ptr [rip + 677364]
 10524cc:	66 0f ef 1d fc 55 0a 00 	pxor	xmm3, xmmword ptr [rip + 677372]
 10524d4:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 10524d9:	66 0f 38 dc d2 	aesenc	xmm2, xmm2
 10524de:	66 0f 38 dc db 	aesenc	xmm3, xmm3
 10524e3:	f3 0f 6f 20 	movdqu	xmm4, xmmword ptr [rax]
 10524e7:	f3 0f 6f 68 10 	movdqu	xmm5, xmmword ptr [rax + 16]
 10524ec:	f3 0f 6f 74 08 e0 	movdqu	xmm6, xmmword ptr [rax + rcx - 32]
 10524f2:	f3 0f 6f 7c 08 f0 	movdqu	xmm7, xmmword ptr [rax + rcx - 16]
 10524f8:	66 0f ef e0 	pxor	xmm4, xmm0
 10524fc:	66 0f ef e9 	pxor	xmm5, xmm1
 1052500:	66 0f ef f2 	pxor	xmm6, xmm2
 1052504:	66 0f ef fb 	pxor	xmm7, xmm3
 1052508:	66 0f 38 dc e4 	aesenc	xmm4, xmm4
 105250d:	66 0f 38 dc ed 	aesenc	xmm5, xmm5
 1052512:	66 0f 38 dc f6 	aesenc	xmm6, xmm6
 1052517:	66 0f 38 dc ff 	aesenc	xmm7, xmm7
 105251c:	66 0f 38 dc e4 	aesenc	xmm4, xmm4
 1052521:	66 0f 38 dc ed 	aesenc	xmm5, xmm5
 1052526:	66 0f 38 dc f6 	aesenc	xmm6, xmm6
 105252b:	66 0f 38 dc ff 	aesenc	xmm7, xmm7
 1052530:	66 0f 38 dc e4 	aesenc	xmm4, xmm4
 1052535:	66 0f 38 dc ed 	aesenc	xmm5, xmm5
 105253a:	66 0f 38 dc f6 	aesenc	xmm6, xmm6
 105253f:	66 0f 38 dc ff 	aesenc	xmm7, xmm7
 1052544:	66 0f ef e6 	pxor	xmm4, xmm6
 1052548:	66 0f ef ef 	pxor	xmm5, xmm7
 105254c:	66 0f ef e5 	pxor	xmm4, xmm5
 1052550:	66 0f d6 22 	movq	qword ptr [rdx], xmm4
 1052554:	c3 	ret
 1052555:	66 0f 6f d1 	movdqa	xmm2, xmm1
 1052559:	66 0f 6f d9 	movdqa	xmm3, xmm1
 105255d:	66 0f 6f e1 	movdqa	xmm4, xmm1
 1052561:	66 0f 6f e9 	movdqa	xmm5, xmm1
 1052565:	66 0f 6f f1 	movdqa	xmm6, xmm1
 1052569:	66 0f 6f f9 	movdqa	xmm7, xmm1
 105256d:	66 0f ef 0d 3b 55 0a 00 	pxor	xmm1, xmmword ptr [rip + 677179]
 1052575:	66 0f ef 15 43 55 0a 00 	pxor	xmm2, xmmword ptr [rip + 677187]
 105257d:	66 0f ef 1d 4b 55 0a 00 	pxor	xmm3, xmmword ptr [rip + 677195]
 1052585:	66 0f ef 25 53 55 0a 00 	pxor	xmm4, xmmword ptr [rip + 677203]
 105258d:	66 0f ef 2d 5b 55 0a 00 	pxor	xmm5, xmmword ptr [rip + 677211]
 1052595:	66 0f ef 35 63 55 0a 00 	pxor	xmm6, xmmword ptr [rip + 677219]
 105259d:	66 0f ef 3d 6b 55 0a 00 	pxor	xmm7, xmmword ptr [rip + 677227]
 10525a5:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 10525aa:	66 0f 38 dc d2 	aesenc	xmm2, xmm2
 10525af:	66 0f 38 dc db 	aesenc	xmm3, xmm3
 10525b4:	66 0f 38 dc e4 	aesenc	xmm4, xmm4
 10525b9:	66 0f 38 dc ed 	aesenc	xmm5, xmm5
 10525be:	66 0f 38 dc f6 	aesenc	xmm6, xmm6
 10525c3:	66 0f 38 dc ff 	aesenc	xmm7, xmm7
 10525c8:	f3 44 0f 6f 00 	movdqu	xmm8, xmmword ptr [rax]
 10525cd:	f3 44 0f 6f 48 10 	movdqu	xmm9, xmmword ptr [rax + 16]
 10525d3:	f3 44 0f 6f 50 20 	movdqu	xmm10, xmmword ptr [rax + 32]
 10525d9:	f3 44 0f 6f 58 30 	movdqu	xmm11, xmmword ptr [rax + 48]
 10525df:	f3 44 0f 6f 64 08 c0 	movdqu	xmm12, xmmword ptr [rax + rcx - 64]
 10525e6:	f3 44 0f 6f 6c 08 d0 	movdqu	xmm13, xmmword ptr [rax + rcx - 48]
 10525ed:	f3 44 0f 6f 74 08 e0 	movdqu	xmm14, xmmword ptr [rax + rcx - 32]
 10525f4:	f3 44 0f 6f 7c 08 f0 	movdqu	xmm15, xmmword ptr [rax + rcx - 16]
 10525fb:	66 44 0f ef c0 	pxor	xmm8, xmm0
 1052600:	66 44 0f ef c9 	pxor	xmm9, xmm1
 1052605:	66 44 0f ef d2 	pxor	xmm10, xmm2
 105260a:	66 44 0f ef db 	pxor	xmm11, xmm3
 105260f:	66 44 0f ef e4 	pxor	xmm12, xmm4
 1052614:	66 44 0f ef ed 	pxor	xmm13, xmm5
 1052619:	66 44 0f ef f6 	pxor	xmm14, xmm6
 105261e:	66 44 0f ef ff 	pxor	xmm15, xmm7
 1052623:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 1052629:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 105262f:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 1052635:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 105263b:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 1052641:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 1052647:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 105264d:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 1052653:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 1052659:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 105265f:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 1052665:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 105266b:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 1052671:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 1052677:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 105267d:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 1052683:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 1052689:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 105268f:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 1052695:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 105269b:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 10526a1:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 10526a7:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 10526ad:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 10526b3:	66 45 0f ef c4 	pxor	xmm8, xmm12
 10526b8:	66 45 0f ef cd 	pxor	xmm9, xmm13
 10526bd:	66 45 0f ef d6 	pxor	xmm10, xmm14
 10526c2:	66 45 0f ef df 	pxor	xmm11, xmm15
 10526c7:	66 45 0f ef c2 	pxor	xmm8, xmm10
 10526cc:	66 45 0f ef cb 	pxor	xmm9, xmm11
 10526d1:	66 45 0f ef c1 	pxor	xmm8, xmm9
 10526d6:	66 44 0f d6 02 	movq	qword ptr [rdx], xmm8
 10526db:	c3 	ret
 10526dc:	66 0f 6f d1 	movdqa	xmm2, xmm1
 10526e0:	66 0f 6f d9 	movdqa	xmm3, xmm1
 10526e4:	66 0f 6f e1 	movdqa	xmm4, xmm1
 10526e8:	66 0f 6f e9 	movdqa	xmm5, xmm1
 10526ec:	66 0f 6f f1 	movdqa	xmm6, xmm1
 10526f0:	66 0f 6f f9 	movdqa	xmm7, xmm1
 10526f4:	66 0f ef 0d b4 53 0a 00 	pxor	xmm1, xmmword ptr [rip + 676788]
 10526fc:	66 0f ef 15 bc 53 0a 00 	pxor	xmm2, xmmword ptr [rip + 676796]
 1052704:	66 0f ef 1d c4 53 0a 00 	pxor	xmm3, xmmword ptr [rip + 676804]
 105270c:	66 0f ef 25 cc 53 0a 00 	pxor	xmm4, xmmword ptr [rip + 676812]
 1052714:	66 0f ef 2d d4 53 0a 00 	pxor	xmm5, xmmword ptr [rip + 676820]
 105271c:	66 0f ef 35 dc 53 0a 00 	pxor	xmm6, xmmword ptr [rip + 676828]
 1052724:	66 0f ef 3d e4 53 0a 00 	pxor	xmm7, xmmword ptr [rip + 676836]
 105272c:	66 0f 38 dc c9 	aesenc	xmm1, xmm1
 1052731:	66 0f 38 dc d2 	aesenc	xmm2, xmm2
 1052736:	66 0f 38 dc db 	aesenc	xmm3, xmm3
 105273b:	66 0f 38 dc e4 	aesenc	xmm4, xmm4
 1052740:	66 0f 38 dc ed 	aesenc	xmm5, xmm5
 1052745:	66 0f 38 dc f6 	aesenc	xmm6, xmm6
 105274a:	66 0f 38 dc ff 	aesenc	xmm7, xmm7
 105274f:	f3 44 0f 6f 44 08 80 	movdqu	xmm8, xmmword ptr [rax + rcx - 128]
 1052756:	f3 44 0f 6f 4c 08 90 	movdqu	xmm9, xmmword ptr [rax + rcx - 112]
 105275d:	f3 44 0f 6f 54 08 a0 	movdqu	xmm10, xmmword ptr [rax + rcx - 96]
 1052764:	f3 44 0f 6f 5c 08 b0 	movdqu	xmm11, xmmword ptr [rax + rcx - 80]
 105276b:	f3 44 0f 6f 64 08 c0 	movdqu	xmm12, xmmword ptr [rax + rcx - 64]
 1052772:	f3 44 0f 6f 6c 08 d0 	movdqu	xmm13, xmmword ptr [rax + rcx - 48]
 1052779:	f3 44 0f 6f 74 08 e0 	movdqu	xmm14, xmmword ptr [rax + rcx - 32]
 1052780:	f3 44 0f 6f 7c 08 f0 	movdqu	xmm15, xmmword ptr [rax + rcx - 16]
 1052787:	66 44 0f ef c0 	pxor	xmm8, xmm0
 105278c:	66 44 0f ef c9 	pxor	xmm9, xmm1
 1052791:	66 44 0f ef d2 	pxor	xmm10, xmm2
 1052796:	66 44 0f ef db 	pxor	xmm11, xmm3
 105279b:	66 44 0f ef e4 	pxor	xmm12, xmm4
 10527a0:	66 44 0f ef ed 	pxor	xmm13, xmm5
 10527a5:	66 44 0f ef f6 	pxor	xmm14, xmm6
 10527aa:	66 44 0f ef ff 	pxor	xmm15, xmm7
 10527af:	48 ff c9 	dec	rcx
 10527b2:	48 c1 e9 07 	shr	rcx, 7
 10527b6:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 10527bc:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 10527c2:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 10527c8:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 10527ce:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 10527d4:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 10527da:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 10527e0:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 10527e6:	f3 0f 6f 00 	movdqu	xmm0, xmmword ptr [rax]
 10527ea:	f3 0f 6f 48 10 	movdqu	xmm1, xmmword ptr [rax + 16]
 10527ef:	f3 0f 6f 50 20 	movdqu	xmm2, xmmword ptr [rax + 32]
 10527f4:	f3 0f 6f 58 30 	movdqu	xmm3, xmmword ptr [rax + 48]
 10527f9:	66 44 0f 38 dc c0 	aesenc	xmm8, xmm0
 10527ff:	66 44 0f 38 dc c9 	aesenc	xmm9, xmm1
 1052805:	66 44 0f 38 dc d2 	aesenc	xmm10, xmm2
 105280b:	66 44 0f 38 dc db 	aesenc	xmm11, xmm3
 1052811:	f3 0f 6f 60 40 	movdqu	xmm4, xmmword ptr [rax + 64]
 1052816:	f3 0f 6f 68 50 	movdqu	xmm5, xmmword ptr [rax + 80]
 105281b:	f3 0f 6f 70 60 	movdqu	xmm6, xmmword ptr [rax + 96]
 1052820:	f3 0f 6f 78 70 	movdqu	xmm7, xmmword ptr [rax + 112]
 1052825:	66 44 0f 38 dc e4 	aesenc	xmm12, xmm4
 105282b:	66 44 0f 38 dc ed 	aesenc	xmm13, xmm5
 1052831:	66 44 0f 38 dc f6 	aesenc	xmm14, xmm6
 1052837:	66 44 0f 38 dc ff 	aesenc	xmm15, xmm7
 105283d:	48 05 80 00 00 00 	add	rax, 128
 1052843:	48 ff c9 	dec	rcx
 1052846:	0f 85 6a ff ff ff 	jne	-150 <_aeshashbody+0x3f6>
 105284c:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 1052852:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 1052858:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 105285e:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 1052864:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 105286a:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 1052870:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 1052876:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 105287c:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 1052882:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 1052888:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 105288e:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 1052894:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 105289a:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 10528a0:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 10528a6:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 10528ac:	66 45 0f 38 dc c0 	aesenc	xmm8, xmm8
 10528b2:	66 45 0f 38 dc c9 	aesenc	xmm9, xmm9
 10528b8:	66 45 0f 38 dc d2 	aesenc	xmm10, xmm10
 10528be:	66 45 0f 38 dc db 	aesenc	xmm11, xmm11
 10528c4:	66 45 0f 38 dc e4 	aesenc	xmm12, xmm12
 10528ca:	66 45 0f 38 dc ed 	aesenc	xmm13, xmm13
 10528d0:	66 45 0f 38 dc f6 	aesenc	xmm14, xmm14
 10528d6:	66 45 0f 38 dc ff 	aesenc	xmm15, xmm15
 10528dc:	66 45 0f ef c4 	pxor	xmm8, xmm12
 10528e1:	66 45 0f ef cd 	pxor	xmm9, xmm13
 10528e6:	66 45 0f ef d6 	pxor	xmm10, xmm14
 10528eb:	66 45 0f ef df 	pxor	xmm11, xmm15
 10528f0:	66 45 0f ef c2 	pxor	xmm8, xmm10
 10528f5:	66 45 0f ef cb 	pxor	xmm9, xmm11
 10528fa:	66 45 0f ef c1 	pxor	xmm8, xmm9
 10528ff:	66 44 0f d6 02 	movq	qword ptr [rdx], xmm8
 1052904:	c3 	ret
 1052905:	cc 	int3
 1052906:	cc 	int3
 1052907:	cc 	int3
 1052908:	cc 	int3
 1052909:	cc 	int3
 105290a:	cc 	int3
 105290b:	cc 	int3
 105290c:	cc 	int3
 105290d:	cc 	int3
 105290e:	cc 	int3
 105290f:	cc 	int3

_runtime.memhash32:
 1052910:	80 3d 5a 4e 0a 00 00 	cmp	byte ptr [rip + 675418], 0
 1052917:	74 33 	je	51 <_runtime.memhash32+0x3c>
 1052919:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105291e:	f3 0f 7e 44 24 10 	movq	xmm0, qword ptr [rsp + 16]
 1052924:	66 0f 3a 22 00 02 	pinsrd	xmm0, dword ptr [rax], 2
 105292a:	66 0f 38 dc 05 6d 51 0a 00 	aesenc	xmm0, xmmword ptr [rip + 676205]
 1052933:	66 0f 38 dc 05 74 51 0a 00 	aesenc	xmm0, xmmword ptr [rip + 676212]
 105293c:	66 0f 38 dc 05 7b 51 0a 00 	aesenc	xmm0, xmmword ptr [rip + 676219]
 1052945:	66 0f d6 44 24 18 	movq	qword ptr [rsp + 24], xmm0
 105294b:	c3 	ret
 105294c:	e9 1f 47 fb ff 	jmp	-309473 <_runtime.memhash32Fallback>
 1052951:	cc 	int3
 1052952:	cc 	int3
 1052953:	cc 	int3
 1052954:	cc 	int3
 1052955:	cc 	int3
 1052956:	cc 	int3
 1052957:	cc 	int3
 1052958:	cc 	int3
 1052959:	cc 	int3
 105295a:	cc 	int3
 105295b:	cc 	int3
 105295c:	cc 	int3
 105295d:	cc 	int3
 105295e:	cc 	int3
 105295f:	cc 	int3

_runtime.memhash64:
 1052960:	80 3d 0a 4e 0a 00 00 	cmp	byte ptr [rip + 675338], 0
 1052967:	74 34 	je	52 <_runtime.memhash64+0x3d>
 1052969:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 105296e:	f3 0f 7e 44 24 10 	movq	xmm0, qword ptr [rsp + 16]
 1052974:	66 48 0f 3a 22 00 01 	pinsrq	xmm0, qword ptr [rax], 1
 105297b:	66 0f 38 dc 05 1c 51 0a 00 	aesenc	xmm0, xmmword ptr [rip + 676124]
 1052984:	66 0f 38 dc 05 23 51 0a 00 	aesenc	xmm0, xmmword ptr [rip + 676131]
 105298d:	66 0f 38 dc 05 2a 51 0a 00 	aesenc	xmm0, xmmword ptr [rip + 676138]
 1052996:	66 0f d6 44 24 18 	movq	qword ptr [rsp + 24], xmm0
 105299c:	c3 	ret
 105299d:	e9 3e 47 fb ff 	jmp	-309442 <_runtime.memhash64Fallback>
 10529a2:	cc 	int3
 10529a3:	cc 	int3
 10529a4:	cc 	int3
 10529a5:	cc 	int3
 10529a6:	cc 	int3
 10529a7:	cc 	int3
 10529a8:	cc 	int3
 10529a9:	cc 	int3
 10529aa:	cc 	int3
 10529ab:	cc 	int3
 10529ac:	cc 	int3
 10529ad:	cc 	int3
 10529ae:	cc 	int3
 10529af:	cc 	int3

_runtime.checkASM:
 10529b0:	48 8d 05 a9 23 03 00 	lea	rax, [rip + 205737]
 10529b7:	48 8d 1d a2 24 03 00 	lea	rbx, [rip + 205986]
 10529be:	48 09 d8 	or	rax, rbx
 10529c1:	48 a9 0f 00 00 00 	test	rax, 15
 10529c7:	0f 94 44 24 08 	sete	byte ptr [rsp + 8]
 10529cc:	c3 	ret
 10529cd:	cc 	int3
 10529ce:	cc 	int3
 10529cf:	cc 	int3

_runtime.goexit:
 10529d0:	90 	nop
 10529d1:	e8 ca f4 fd ff 	call	-133942 <_runtime.goexit1>
 10529d6:	90 	nop
 10529d7:	cc 	int3
 10529d8:	cc 	int3
 10529d9:	cc 	int3
 10529da:	cc 	int3
 10529db:	cc 	int3
 10529dc:	cc 	int3
 10529dd:	cc 	int3
 10529de:	cc 	int3
 10529df:	cc 	int3

_runtime.gcWriteBarrier:
 10529e0:	48 83 c4 80 	add	rsp, -128
 10529e4:	48 89 6c 24 78 	mov	qword ptr [rsp + 120], rbp
 10529e9:	48 8d 6c 24 78 	lea	rbp, [rsp + 120]
 10529ee:	4c 89 74 24 68 	mov	qword ptr [rsp + 104], r14
 10529f3:	4c 89 6c 24 70 	mov	qword ptr [rsp + 112], r13
 10529f8:	65 4c 8b 2c 25 30 00 00 00 	mov	r13, qword ptr gs:[48]
 1052a01:	4d 8b 6d 30 	mov	r13, qword ptr [r13 + 48]
 1052a05:	4d 8b ad d0 00 00 00 	mov	r13, qword ptr [r13 + 208]
 1052a0c:	4d 8b b5 48 17 00 00 	mov	r14, qword ptr [r13 + 5960]
 1052a13:	4d 8d 76 10 	lea	r14, [r14 + 16]
 1052a17:	4d 89 b5 48 17 00 00 	mov	qword ptr [r13 + 5960], r14
 1052a1e:	4d 3b b5 50 17 00 00 	cmp	r14, qword ptr [r13 + 5968]
 1052a25:	49 89 46 f0 	mov	qword ptr [r14 - 16], rax
 1052a29:	4c 8b 2f 	mov	r13, qword ptr [rdi]
 1052a2c:	4d 89 6e f8 	mov	qword ptr [r14 - 8], r13
 1052a30:	74 17 	je	23 <_runtime.gcWriteBarrier+0x69>
 1052a32:	4c 8b 74 24 68 	mov	r14, qword ptr [rsp + 104]
 1052a37:	4c 8b 6c 24 70 	mov	r13, qword ptr [rsp + 112]
 1052a3c:	48 89 07 	mov	qword ptr [rdi], rax
 1052a3f:	48 8b 6c 24 78 	mov	rbp, qword ptr [rsp + 120]
 1052a44:	48 83 ec 80 	sub	rsp, -128
 1052a48:	c3 	ret
 1052a49:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1052a4d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1052a52:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1052a57:	48 89 4c 24 18 	mov	qword ptr [rsp + 24], rcx
 1052a5c:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1052a61:	48 89 74 24 28 	mov	qword ptr [rsp + 40], rsi
 1052a66:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 1052a6b:	4c 89 44 24 38 	mov	qword ptr [rsp + 56], r8
 1052a70:	4c 89 4c 24 40 	mov	qword ptr [rsp + 64], r9
 1052a75:	4c 89 54 24 48 	mov	qword ptr [rsp + 72], r10
 1052a7a:	4c 89 5c 24 50 	mov	qword ptr [rsp + 80], r11
 1052a7f:	4c 89 64 24 58 	mov	qword ptr [rsp + 88], r12
 1052a84:	4c 89 7c 24 60 	mov	qword ptr [rsp + 96], r15
 1052a89:	e8 e2 28 fd ff 	call	-186142 <_runtime.wbBufFlush>
 1052a8e:	48 8b 3c 24 	mov	rdi, qword ptr [rsp]
 1052a92:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1052a97:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 1052a9c:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1052aa1:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1052aa6:	48 8b 74 24 28 	mov	rsi, qword ptr [rsp + 40]
 1052aab:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1052ab0:	4c 8b 44 24 38 	mov	r8, qword ptr [rsp + 56]
 1052ab5:	4c 8b 4c 24 40 	mov	r9, qword ptr [rsp + 64]
 1052aba:	4c 8b 54 24 48 	mov	r10, qword ptr [rsp + 72]
 1052abf:	4c 8b 5c 24 50 	mov	r11, qword ptr [rsp + 80]
 1052ac4:	4c 8b 64 24 58 	mov	r12, qword ptr [rsp + 88]
 1052ac9:	4c 8b 7c 24 60 	mov	r15, qword ptr [rsp + 96]
 1052ace:	e9 5f ff ff ff 	jmp	-161 <_runtime.gcWriteBarrier+0x52>
 1052ad3:	cc 	int3
 1052ad4:	cc 	int3
 1052ad5:	cc 	int3
 1052ad6:	cc 	int3
 1052ad7:	cc 	int3
 1052ad8:	cc 	int3
 1052ad9:	cc 	int3
 1052ada:	cc 	int3
 1052adb:	cc 	int3
 1052adc:	cc 	int3
 1052add:	cc 	int3
 1052ade:	cc 	int3
 1052adf:	cc 	int3

_runtime.debugCallV1:
 1052ae0:	48 81 ec a0 00 00 00 	sub	rsp, 160
 1052ae7:	48 89 ac 24 98 00 00 00 	mov	qword ptr [rsp + 152], rbp
 1052aef:	48 8d ac 24 98 00 00 00 	lea	rbp, [rsp + 152]
 1052af7:	4c 89 7c 24 20 	mov	qword ptr [rsp + 32], r15
 1052afc:	4c 89 74 24 28 	mov	qword ptr [rsp + 40], r14
 1052b01:	4c 89 6c 24 30 	mov	qword ptr [rsp + 48], r13
 1052b06:	4c 89 64 24 38 	mov	qword ptr [rsp + 56], r12
 1052b0b:	4c 89 5c 24 40 	mov	qword ptr [rsp + 64], r11
 1052b10:	4c 89 54 24 48 	mov	qword ptr [rsp + 72], r10
 1052b15:	4c 89 4c 24 50 	mov	qword ptr [rsp + 80], r9
 1052b1a:	4c 89 44 24 58 	mov	qword ptr [rsp + 88], r8
 1052b1f:	48 89 7c 24 60 	mov	qword ptr [rsp + 96], rdi
 1052b24:	48 89 74 24 68 	mov	qword ptr [rsp + 104], rsi
 1052b29:	48 89 6c 24 70 	mov	qword ptr [rsp + 112], rbp
 1052b2e:	48 89 5c 24 78 	mov	qword ptr [rsp + 120], rbx
 1052b33:	48 89 94 24 80 00 00 00 	mov	qword ptr [rsp + 128], rdx
 1052b3b:	48 8b 94 24 90 00 00 00 	mov	rdx, qword ptr [rsp + 144]
 1052b43:	48 89 8c 24 88 00 00 00 	mov	qword ptr [rsp + 136], rcx
 1052b4b:	48 89 84 24 90 00 00 00 	mov	qword ptr [rsp + 144], rax
 1052b53:	48 89 54 24 18 	mov	qword ptr [rsp + 24], rdx
 1052b58:	48 8b 84 24 a0 00 00 00 	mov	rax, qword ptr [rsp + 160]
 1052b60:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052b64:	e8 a7 27 fb ff 	call	-317529 <_runtime.debugCallCheck>
 1052b69:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1052b6e:	48 85 c0 	test	rax, rax
 1052b71:	74 1b 	je	27 <_runtime.debugCallV1+0xae>
 1052b73:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052b77:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1052b7c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1052b81:	48 c7 c0 08 00 00 00 	mov	rax, 8
 1052b88:	cc 	int3
 1052b89:	e9 6f 01 00 00 	jmp	367 <_runtime.debugCallV1+0x21d>
 1052b8e:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1052b93:	48 83 f8 20 	cmp	rax, 32
 1052b97:	77 15 	ja	21 <_runtime.debugCallV1+0xce>
 1052b99:	48 8d 05 d0 01 00 00 	lea	rax, [rip + 464]
 1052ba0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052ba4:	e8 47 28 fb ff 	call	-317369 <_runtime.debugCallWrap>
 1052ba9:	e9 4f 01 00 00 	jmp	335 <_runtime.debugCallV1+0x21d>
 1052bae:	48 83 f8 40 	cmp	rax, 64
 1052bb2:	77 15 	ja	21 <_runtime.debugCallV1+0xe9>
 1052bb4:	48 8d 05 05 02 00 00 	lea	rax, [rip + 517]
 1052bbb:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052bbf:	e8 2c 28 fb ff 	call	-317396 <_runtime.debugCallWrap>
 1052bc4:	e9 34 01 00 00 	jmp	308 <_runtime.debugCallV1+0x21d>
 1052bc9:	48 3d 80 00 00 00 	cmp	rax, 128
 1052bcf:	77 15 	ja	21 <_runtime.debugCallV1+0x106>
 1052bd1:	48 8d 05 38 02 00 00 	lea	rax, [rip + 568]
 1052bd8:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052bdc:	e8 0f 28 fb ff 	call	-317425 <_runtime.debugCallWrap>
 1052be1:	e9 17 01 00 00 	jmp	279 <_runtime.debugCallV1+0x21d>
 1052be6:	48 3d 00 01 00 00 	cmp	rax, 256
 1052bec:	77 15 	ja	21 <_runtime.debugCallV1+0x123>
 1052bee:	48 8d 05 8b 02 00 00 	lea	rax, [rip + 651]
 1052bf5:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052bf9:	e8 f2 27 fb ff 	call	-317454 <_runtime.debugCallWrap>
 1052bfe:	e9 fa 00 00 00 	jmp	250 <_runtime.debugCallV1+0x21d>
 1052c03:	48 3d 00 02 00 00 	cmp	rax, 512
 1052c09:	77 15 	ja	21 <_runtime.debugCallV1+0x140>
 1052c0b:	48 8d 05 de 02 00 00 	lea	rax, [rip + 734]
 1052c12:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052c16:	e8 d5 27 fb ff 	call	-317483 <_runtime.debugCallWrap>
 1052c1b:	e9 dd 00 00 00 	jmp	221 <_runtime.debugCallV1+0x21d>
 1052c20:	48 3d 00 04 00 00 	cmp	rax, 1024
 1052c26:	77 15 	ja	21 <_runtime.debugCallV1+0x15d>
 1052c28:	48 8d 05 31 03 00 00 	lea	rax, [rip + 817]
 1052c2f:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052c33:	e8 b8 27 fb ff 	call	-317512 <_runtime.debugCallWrap>
 1052c38:	e9 c0 00 00 00 	jmp	192 <_runtime.debugCallV1+0x21d>
 1052c3d:	48 3d 00 08 00 00 	cmp	rax, 2048
 1052c43:	77 15 	ja	21 <_runtime.debugCallV1+0x17a>
 1052c45:	48 8d 05 84 03 00 00 	lea	rax, [rip + 900]
 1052c4c:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052c50:	e8 9b 27 fb ff 	call	-317541 <_runtime.debugCallWrap>
 1052c55:	e9 a3 00 00 00 	jmp	163 <_runtime.debugCallV1+0x21d>
 1052c5a:	48 3d 00 10 00 00 	cmp	rax, 4096
 1052c60:	77 15 	ja	21 <_runtime.debugCallV1+0x197>
 1052c62:	48 8d 05 d7 03 00 00 	lea	rax, [rip + 983]
 1052c69:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052c6d:	e8 7e 27 fb ff 	call	-317570 <_runtime.debugCallWrap>
 1052c72:	e9 86 00 00 00 	jmp	134 <_runtime.debugCallV1+0x21d>
 1052c77:	48 3d 00 20 00 00 	cmp	rax, 8192
 1052c7d:	77 12 	ja	18 <_runtime.debugCallV1+0x1b1>
 1052c7f:	48 8d 05 4a 04 00 00 	lea	rax, [rip + 1098]
 1052c86:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052c8a:	e8 61 27 fb ff 	call	-317599 <_runtime.debugCallWrap>
 1052c8f:	eb 6c 	jmp	108 <_runtime.debugCallV1+0x21d>
 1052c91:	48 3d 00 40 00 00 	cmp	rax, 16384
 1052c97:	77 12 	ja	18 <_runtime.debugCallV1+0x1cb>
 1052c99:	48 8d 05 c0 04 00 00 	lea	rax, [rip + 1216]
 1052ca0:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052ca4:	e8 47 27 fb ff 	call	-317625 <_runtime.debugCallWrap>
 1052ca9:	eb 52 	jmp	82 <_runtime.debugCallV1+0x21d>
 1052cab:	48 3d 00 80 00 00 	cmp	rax, 32768
 1052cb1:	77 12 	ja	18 <_runtime.debugCallV1+0x1e5>
 1052cb3:	48 8d 05 36 05 00 00 	lea	rax, [rip + 1334]
 1052cba:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052cbe:	e8 2d 27 fb ff 	call	-317651 <_runtime.debugCallWrap>
 1052cc3:	eb 38 	jmp	56 <_runtime.debugCallV1+0x21d>
 1052cc5:	48 3d 00 00 01 00 	cmp	rax, 65536
 1052ccb:	77 12 	ja	18 <_runtime.debugCallV1+0x1ff>
 1052ccd:	48 8d 05 ac 05 00 00 	lea	rax, [rip + 1452]
 1052cd4:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052cd8:	e8 13 27 fb ff 	call	-317677 <_runtime.debugCallWrap>
 1052cdd:	eb 1e 	jmp	30 <_runtime.debugCallV1+0x21d>
 1052cdf:	48 8d 05 ea 0d 03 00 	lea	rax, [rip + 200170]
 1052ce6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1052cea:	48 c7 44 24 08 14 00 00 00 	mov	qword ptr [rsp + 8], 20
 1052cf3:	48 c7 c0 08 00 00 00 	mov	rax, 8
 1052cfa:	cc 	int3
 1052cfb:	eb 00 	jmp	0 <_runtime.debugCallV1+0x21d>
 1052cfd:	48 c7 c0 10 00 00 00 	mov	rax, 16
 1052d04:	cc 	int3
 1052d05:	48 8b 84 24 90 00 00 00 	mov	rax, qword ptr [rsp + 144]
 1052d0d:	48 8b 8c 24 88 00 00 00 	mov	rcx, qword ptr [rsp + 136]
 1052d15:	48 8b 94 24 80 00 00 00 	mov	rdx, qword ptr [rsp + 128]
 1052d1d:	48 8b 5c 24 78 	mov	rbx, qword ptr [rsp + 120]
 1052d22:	48 8b 6c 24 70 	mov	rbp, qword ptr [rsp + 112]
 1052d27:	48 8b 74 24 68 	mov	rsi, qword ptr [rsp + 104]
 1052d2c:	48 8b 7c 24 60 	mov	rdi, qword ptr [rsp + 96]
 1052d31:	4c 8b 44 24 58 	mov	r8, qword ptr [rsp + 88]
 1052d36:	4c 8b 4c 24 50 	mov	r9, qword ptr [rsp + 80]
 1052d3b:	4c 8b 54 24 48 	mov	r10, qword ptr [rsp + 72]
 1052d40:	4c 8b 5c 24 40 	mov	r11, qword ptr [rsp + 64]
 1052d45:	4c 8b 64 24 38 	mov	r12, qword ptr [rsp + 56]
 1052d4a:	4c 8b 6c 24 30 	mov	r13, qword ptr [rsp + 48]
 1052d4f:	4c 8b 74 24 28 	mov	r14, qword ptr [rsp + 40]
 1052d54:	4c 8b 7c 24 20 	mov	r15, qword ptr [rsp + 32]
 1052d59:	48 8b ac 24 98 00 00 00 	mov	rbp, qword ptr [rsp + 152]
 1052d61:	48 81 c4 a0 00 00 00 	add	rsp, 160
 1052d68:	c3 	ret
 1052d69:	cc 	int3
 1052d6a:	cc 	int3
 1052d6b:	cc 	int3
 1052d6c:	cc 	int3
 1052d6d:	cc 	int3
 1052d6e:	cc 	int3
 1052d6f:	cc 	int3

_debugCall32:
 1052d70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052d79:	48 83 ec 28 	sub	rsp, 40
 1052d7d:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1052d82:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1052d87:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052d8b:	48 85 db 	test	rbx, rbx
 1052d8e:	75 1a 	jne	26 <_debugCall32+0x3a>
 1052d90:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1052d97:	cc 	int3
 1052d98:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1052d9f:	cc 	int3
 1052da0:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1052da5:	48 83 c4 28 	add	rsp, 40
 1052da9:	c3 	ret
 1052daa:	48 8d 7c 24 30 	lea	rdi, [rsp + 48]
 1052daf:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1052db2:	75 dc 	jne	-36 <_debugCall32+0x20>
 1052db4:	48 89 23 	mov	qword ptr [rbx], rsp
 1052db7:	eb d7 	jmp	-41 <_debugCall32+0x20>
 1052db9:	cc 	int3
 1052dba:	cc 	int3
 1052dbb:	cc 	int3
 1052dbc:	cc 	int3
 1052dbd:	cc 	int3
 1052dbe:	cc 	int3
 1052dbf:	cc 	int3

_debugCall64:
 1052dc0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052dc9:	48 83 ec 48 	sub	rsp, 72
 1052dcd:	48 89 6c 24 40 	mov	qword ptr [rsp + 64], rbp
 1052dd2:	48 8d 6c 24 40 	lea	rbp, [rsp + 64]
 1052dd7:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052ddb:	48 85 db 	test	rbx, rbx
 1052dde:	75 1a 	jne	26 <_debugCall64+0x3a>
 1052de0:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1052de7:	cc 	int3
 1052de8:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1052def:	cc 	int3
 1052df0:	48 8b 6c 24 40 	mov	rbp, qword ptr [rsp + 64]
 1052df5:	48 83 c4 48 	add	rsp, 72
 1052df9:	c3 	ret
 1052dfa:	48 8d 7c 24 50 	lea	rdi, [rsp + 80]
 1052dff:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1052e02:	75 dc 	jne	-36 <_debugCall64+0x20>
 1052e04:	48 89 23 	mov	qword ptr [rbx], rsp
 1052e07:	eb d7 	jmp	-41 <_debugCall64+0x20>
 1052e09:	cc 	int3
 1052e0a:	cc 	int3
 1052e0b:	cc 	int3
 1052e0c:	cc 	int3
 1052e0d:	cc 	int3
 1052e0e:	cc 	int3
 1052e0f:	cc 	int3

_debugCall128:
 1052e10:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052e19:	48 8d 44 24 f8 	lea	rax, [rsp - 8]
 1052e1e:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1052e22:	76 40 	jbe	64 <_debugCall128+0x54>
 1052e24:	48 81 ec 88 00 00 00 	sub	rsp, 136
 1052e2b:	48 89 ac 24 80 00 00 00 	mov	qword ptr [rsp + 128], rbp
 1052e33:	48 8d ac 24 80 00 00 00 	lea	rbp, [rsp + 128]
 1052e3b:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052e3f:	48 85 db 	test	rbx, rbx
 1052e42:	75 27 	jne	39 <_debugCall128+0x5b>
 1052e44:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1052e4b:	cc 	int3
 1052e4c:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1052e53:	cc 	int3
 1052e54:	48 8b ac 24 80 00 00 00 	mov	rbp, qword ptr [rsp + 128]
 1052e5c:	48 81 c4 88 00 00 00 	add	rsp, 136
 1052e63:	c3 	ret
 1052e64:	e8 67 dd ff ff 	call	-8857 <_runtime.morestack_noctxt>
 1052e69:	eb a5 	jmp	-91 <_debugCall128>
 1052e6b:	48 8d bc 24 90 00 00 00 	lea	rdi, [rsp + 144]
 1052e73:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1052e76:	75 cc 	jne	-52 <_debugCall128+0x34>
 1052e78:	48 89 23 	mov	qword ptr [rbx], rsp
 1052e7b:	eb c7 	jmp	-57 <_debugCall128+0x34>
 1052e7d:	cc 	int3
 1052e7e:	cc 	int3
 1052e7f:	cc 	int3

_debugCall256:
 1052e80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052e89:	48 8d 84 24 78 ff ff ff 	lea	rax, [rsp - 136]
 1052e91:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1052e95:	76 40 	jbe	64 <_debugCall256+0x57>
 1052e97:	48 81 ec 08 01 00 00 	sub	rsp, 264
 1052e9e:	48 89 ac 24 00 01 00 00 	mov	qword ptr [rsp + 256], rbp
 1052ea6:	48 8d ac 24 00 01 00 00 	lea	rbp, [rsp + 256]
 1052eae:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052eb2:	48 85 db 	test	rbx, rbx
 1052eb5:	75 27 	jne	39 <_debugCall256+0x5e>
 1052eb7:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1052ebe:	cc 	int3
 1052ebf:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1052ec6:	cc 	int3
 1052ec7:	48 8b ac 24 00 01 00 00 	mov	rbp, qword ptr [rsp + 256]
 1052ecf:	48 81 c4 08 01 00 00 	add	rsp, 264
 1052ed6:	c3 	ret
 1052ed7:	e8 f4 dc ff ff 	call	-8972 <_runtime.morestack_noctxt>
 1052edc:	eb a2 	jmp	-94 <_debugCall256>
 1052ede:	48 8d bc 24 10 01 00 00 	lea	rdi, [rsp + 272]
 1052ee6:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1052ee9:	75 cc 	jne	-52 <_debugCall256+0x37>
 1052eeb:	48 89 23 	mov	qword ptr [rbx], rsp
 1052eee:	eb c7 	jmp	-57 <_debugCall256+0x37>

_debugCall512:
 1052ef0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052ef9:	48 8d 84 24 78 fe ff ff 	lea	rax, [rsp - 392]
 1052f01:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1052f05:	76 40 	jbe	64 <_debugCall512+0x57>
 1052f07:	48 81 ec 08 02 00 00 	sub	rsp, 520
 1052f0e:	48 89 ac 24 00 02 00 00 	mov	qword ptr [rsp + 512], rbp
 1052f16:	48 8d ac 24 00 02 00 00 	lea	rbp, [rsp + 512]
 1052f1e:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052f22:	48 85 db 	test	rbx, rbx
 1052f25:	75 27 	jne	39 <_debugCall512+0x5e>
 1052f27:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1052f2e:	cc 	int3
 1052f2f:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1052f36:	cc 	int3
 1052f37:	48 8b ac 24 00 02 00 00 	mov	rbp, qword ptr [rsp + 512]
 1052f3f:	48 81 c4 08 02 00 00 	add	rsp, 520
 1052f46:	c3 	ret
 1052f47:	e8 84 dc ff ff 	call	-9084 <_runtime.morestack_noctxt>
 1052f4c:	eb a2 	jmp	-94 <_debugCall512>
 1052f4e:	48 8d bc 24 10 02 00 00 	lea	rdi, [rsp + 528]
 1052f56:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1052f59:	75 cc 	jne	-52 <_debugCall512+0x37>
 1052f5b:	48 89 23 	mov	qword ptr [rbx], rsp
 1052f5e:	eb c7 	jmp	-57 <_debugCall512+0x37>

_debugCall1024:
 1052f60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052f69:	48 8d 84 24 78 fc ff ff 	lea	rax, [rsp - 904]
 1052f71:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1052f75:	76 40 	jbe	64 <_debugCall1024+0x57>
 1052f77:	48 81 ec 08 04 00 00 	sub	rsp, 1032
 1052f7e:	48 89 ac 24 00 04 00 00 	mov	qword ptr [rsp + 1024], rbp
 1052f86:	48 8d ac 24 00 04 00 00 	lea	rbp, [rsp + 1024]
 1052f8e:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1052f92:	48 85 db 	test	rbx, rbx
 1052f95:	75 27 	jne	39 <_debugCall1024+0x5e>
 1052f97:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1052f9e:	cc 	int3
 1052f9f:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1052fa6:	cc 	int3
 1052fa7:	48 8b ac 24 00 04 00 00 	mov	rbp, qword ptr [rsp + 1024]
 1052faf:	48 81 c4 08 04 00 00 	add	rsp, 1032
 1052fb6:	c3 	ret
 1052fb7:	e8 14 dc ff ff 	call	-9196 <_runtime.morestack_noctxt>
 1052fbc:	eb a2 	jmp	-94 <_debugCall1024>
 1052fbe:	48 8d bc 24 10 04 00 00 	lea	rdi, [rsp + 1040]
 1052fc6:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1052fc9:	75 cc 	jne	-52 <_debugCall1024+0x37>
 1052fcb:	48 89 23 	mov	qword ptr [rbx], rsp
 1052fce:	eb c7 	jmp	-57 <_debugCall1024+0x37>

_debugCall2048:
 1052fd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1052fd9:	48 8d 84 24 78 f8 ff ff 	lea	rax, [rsp - 1928]
 1052fe1:	48 3b 41 10 	cmp	rax, qword ptr [rcx + 16]
 1052fe5:	76 40 	jbe	64 <_debugCall2048+0x57>
 1052fe7:	48 81 ec 08 08 00 00 	sub	rsp, 2056
 1052fee:	48 89 ac 24 00 08 00 00 	mov	qword ptr [rsp + 2048], rbp
 1052ff6:	48 8d ac 24 00 08 00 00 	lea	rbp, [rsp + 2048]
 1052ffe:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1053002:	48 85 db 	test	rbx, rbx
 1053005:	75 27 	jne	39 <_debugCall2048+0x5e>
 1053007:	48 c7 c0 00 00 00 00 	mov	rax, 0
 105300e:	cc 	int3
 105300f:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1053016:	cc 	int3
 1053017:	48 8b ac 24 00 08 00 00 	mov	rbp, qword ptr [rsp + 2048]
 105301f:	48 81 c4 08 08 00 00 	add	rsp, 2056
 1053026:	c3 	ret
 1053027:	e8 a4 db ff ff 	call	-9308 <_runtime.morestack_noctxt>
 105302c:	eb a2 	jmp	-94 <_debugCall2048>
 105302e:	48 8d bc 24 10 08 00 00 	lea	rdi, [rsp + 2064]
 1053036:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1053039:	75 cc 	jne	-52 <_debugCall2048+0x37>
 105303b:	48 89 23 	mov	qword ptr [rbx], rsp
 105303e:	eb c7 	jmp	-57 <_debugCall2048+0x37>

_debugCall4096:
 1053040:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1053049:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105304d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1053054:	74 53 	je	83 <_debugCall4096+0x69>
 1053056:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 105305e:	48 29 f0 	sub	rax, rsi
 1053061:	48 3d 08 13 00 00 	cmp	rax, 4872
 1053067:	76 40 	jbe	64 <_debugCall4096+0x69>
 1053069:	48 81 ec 08 10 00 00 	sub	rsp, 4104
 1053070:	48 89 ac 24 00 10 00 00 	mov	qword ptr [rsp + 4096], rbp
 1053078:	48 8d ac 24 00 10 00 00 	lea	rbp, [rsp + 4096]
 1053080:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1053084:	48 85 db 	test	rbx, rbx
 1053087:	75 27 	jne	39 <_debugCall4096+0x70>
 1053089:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1053090:	cc 	int3
 1053091:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1053098:	cc 	int3
 1053099:	48 8b ac 24 00 10 00 00 	mov	rbp, qword ptr [rsp + 4096]
 10530a1:	48 81 c4 08 10 00 00 	add	rsp, 4104
 10530a8:	c3 	ret
 10530a9:	e8 22 db ff ff 	call	-9438 <_runtime.morestack_noctxt>
 10530ae:	eb 90 	jmp	-112 <_debugCall4096>
 10530b0:	48 8d bc 24 10 10 00 00 	lea	rdi, [rsp + 4112]
 10530b8:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10530bb:	75 cc 	jne	-52 <_debugCall4096+0x49>
 10530bd:	48 89 23 	mov	qword ptr [rbx], rsp
 10530c0:	eb c7 	jmp	-57 <_debugCall4096+0x49>
 10530c2:	cc 	int3
 10530c3:	cc 	int3
 10530c4:	cc 	int3
 10530c5:	cc 	int3
 10530c6:	cc 	int3
 10530c7:	cc 	int3
 10530c8:	cc 	int3
 10530c9:	cc 	int3
 10530ca:	cc 	int3
 10530cb:	cc 	int3
 10530cc:	cc 	int3
 10530cd:	cc 	int3
 10530ce:	cc 	int3
 10530cf:	cc 	int3

_debugCall8192:
 10530d0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10530d9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 10530dd:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 10530e4:	74 53 	je	83 <_debugCall8192+0x69>
 10530e6:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 10530ee:	48 29 f0 	sub	rax, rsi
 10530f1:	48 3d 08 23 00 00 	cmp	rax, 8968
 10530f7:	76 40 	jbe	64 <_debugCall8192+0x69>
 10530f9:	48 81 ec 08 20 00 00 	sub	rsp, 8200
 1053100:	48 89 ac 24 00 20 00 00 	mov	qword ptr [rsp + 8192], rbp
 1053108:	48 8d ac 24 00 20 00 00 	lea	rbp, [rsp + 8192]
 1053110:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1053114:	48 85 db 	test	rbx, rbx
 1053117:	75 27 	jne	39 <_debugCall8192+0x70>
 1053119:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1053120:	cc 	int3
 1053121:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1053128:	cc 	int3
 1053129:	48 8b ac 24 00 20 00 00 	mov	rbp, qword ptr [rsp + 8192]
 1053131:	48 81 c4 08 20 00 00 	add	rsp, 8200
 1053138:	c3 	ret
 1053139:	e8 92 da ff ff 	call	-9582 <_runtime.morestack_noctxt>
 105313e:	eb 90 	jmp	-112 <_debugCall8192>
 1053140:	48 8d bc 24 10 20 00 00 	lea	rdi, [rsp + 8208]
 1053148:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105314b:	75 cc 	jne	-52 <_debugCall8192+0x49>
 105314d:	48 89 23 	mov	qword ptr [rbx], rsp
 1053150:	eb c7 	jmp	-57 <_debugCall8192+0x49>
 1053152:	cc 	int3
 1053153:	cc 	int3
 1053154:	cc 	int3
 1053155:	cc 	int3
 1053156:	cc 	int3
 1053157:	cc 	int3
 1053158:	cc 	int3
 1053159:	cc 	int3
 105315a:	cc 	int3
 105315b:	cc 	int3
 105315c:	cc 	int3
 105315d:	cc 	int3
 105315e:	cc 	int3
 105315f:	cc 	int3

_debugCall16384:
 1053160:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1053169:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105316d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1053174:	74 53 	je	83 <_debugCall16384+0x69>
 1053176:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 105317e:	48 29 f0 	sub	rax, rsi
 1053181:	48 3d 08 43 00 00 	cmp	rax, 17160
 1053187:	76 40 	jbe	64 <_debugCall16384+0x69>
 1053189:	48 81 ec 08 40 00 00 	sub	rsp, 16392
 1053190:	48 89 ac 24 00 40 00 00 	mov	qword ptr [rsp + 16384], rbp
 1053198:	48 8d ac 24 00 40 00 00 	lea	rbp, [rsp + 16384]
 10531a0:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10531a4:	48 85 db 	test	rbx, rbx
 10531a7:	75 27 	jne	39 <_debugCall16384+0x70>
 10531a9:	48 c7 c0 00 00 00 00 	mov	rax, 0
 10531b0:	cc 	int3
 10531b1:	48 c7 c0 01 00 00 00 	mov	rax, 1
 10531b8:	cc 	int3
 10531b9:	48 8b ac 24 00 40 00 00 	mov	rbp, qword ptr [rsp + 16384]
 10531c1:	48 81 c4 08 40 00 00 	add	rsp, 16392
 10531c8:	c3 	ret
 10531c9:	e8 02 da ff ff 	call	-9726 <_runtime.morestack_noctxt>
 10531ce:	eb 90 	jmp	-112 <_debugCall16384>
 10531d0:	48 8d bc 24 10 40 00 00 	lea	rdi, [rsp + 16400]
 10531d8:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10531db:	75 cc 	jne	-52 <_debugCall16384+0x49>
 10531dd:	48 89 23 	mov	qword ptr [rbx], rsp
 10531e0:	eb c7 	jmp	-57 <_debugCall16384+0x49>
 10531e2:	cc 	int3
 10531e3:	cc 	int3
 10531e4:	cc 	int3
 10531e5:	cc 	int3
 10531e6:	cc 	int3
 10531e7:	cc 	int3
 10531e8:	cc 	int3
 10531e9:	cc 	int3
 10531ea:	cc 	int3
 10531eb:	cc 	int3
 10531ec:	cc 	int3
 10531ed:	cc 	int3
 10531ee:	cc 	int3
 10531ef:	cc 	int3

_debugCall32768:
 10531f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10531f9:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 10531fd:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1053204:	74 53 	je	83 <_debugCall32768+0x69>
 1053206:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 105320e:	48 29 f0 	sub	rax, rsi
 1053211:	48 3d 08 83 00 00 	cmp	rax, 33544
 1053217:	76 40 	jbe	64 <_debugCall32768+0x69>
 1053219:	48 81 ec 08 80 00 00 	sub	rsp, 32776
 1053220:	48 89 ac 24 00 80 00 00 	mov	qword ptr [rsp + 32768], rbp
 1053228:	48 8d ac 24 00 80 00 00 	lea	rbp, [rsp + 32768]
 1053230:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1053234:	48 85 db 	test	rbx, rbx
 1053237:	75 27 	jne	39 <_debugCall32768+0x70>
 1053239:	48 c7 c0 00 00 00 00 	mov	rax, 0
 1053240:	cc 	int3
 1053241:	48 c7 c0 01 00 00 00 	mov	rax, 1
 1053248:	cc 	int3
 1053249:	48 8b ac 24 00 80 00 00 	mov	rbp, qword ptr [rsp + 32768]
 1053251:	48 81 c4 08 80 00 00 	add	rsp, 32776
 1053258:	c3 	ret
 1053259:	e8 72 d9 ff ff 	call	-9870 <_runtime.morestack_noctxt>
 105325e:	eb 90 	jmp	-112 <_debugCall32768>
 1053260:	48 8d bc 24 10 80 00 00 	lea	rdi, [rsp + 32784]
 1053268:	48 39 3b 	cmp	qword ptr [rbx], rdi
 105326b:	75 cc 	jne	-52 <_debugCall32768+0x49>
 105326d:	48 89 23 	mov	qword ptr [rbx], rsp
 1053270:	eb c7 	jmp	-57 <_debugCall32768+0x49>
 1053272:	cc 	int3
 1053273:	cc 	int3
 1053274:	cc 	int3
 1053275:	cc 	int3
 1053276:	cc 	int3
 1053277:	cc 	int3
 1053278:	cc 	int3
 1053279:	cc 	int3
 105327a:	cc 	int3
 105327b:	cc 	int3
 105327c:	cc 	int3
 105327d:	cc 	int3
 105327e:	cc 	int3
 105327f:	cc 	int3

_debugCall65536:
 1053280:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1053289:	48 8b 71 10 	mov	rsi, qword ptr [rcx + 16]
 105328d:	48 81 fe de fa ff ff 	cmp	rsi, -1314
 1053294:	74 53 	je	83 <_debugCall65536+0x69>
 1053296:	48 8d 84 24 80 03 00 00 	lea	rax, [rsp + 896]
 105329e:	48 29 f0 	sub	rax, rsi
 10532a1:	48 3d 08 03 01 00 	cmp	rax, 66312
 10532a7:	76 40 	jbe	64 <_debugCall65536+0x69>
 10532a9:	48 81 ec 08 00 01 00 	sub	rsp, 65544
 10532b0:	48 89 ac 24 00 00 01 00 	mov	qword ptr [rsp + 65536], rbp
 10532b8:	48 8d ac 24 00 00 01 00 	lea	rbp, [rsp + 65536]
 10532c0:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10532c4:	48 85 db 	test	rbx, rbx
 10532c7:	75 27 	jne	39 <_debugCall65536+0x70>
 10532c9:	48 c7 c0 00 00 00 00 	mov	rax, 0
 10532d0:	cc 	int3
 10532d1:	48 c7 c0 01 00 00 00 	mov	rax, 1
 10532d8:	cc 	int3
 10532d9:	48 8b ac 24 00 00 01 00 	mov	rbp, qword ptr [rsp + 65536]
 10532e1:	48 81 c4 08 00 01 00 	add	rsp, 65544
 10532e8:	c3 	ret
 10532e9:	e8 e2 d8 ff ff 	call	-10014 <_runtime.morestack_noctxt>
 10532ee:	eb 90 	jmp	-112 <_debugCall65536>
 10532f0:	48 8d bc 24 10 00 01 00 	lea	rdi, [rsp + 65552]
 10532f8:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10532fb:	75 cc 	jne	-52 <_debugCall65536+0x49>
 10532fd:	48 89 23 	mov	qword ptr [rbx], rsp
 1053300:	eb c7 	jmp	-57 <_debugCall65536+0x49>
 1053302:	cc 	int3
 1053303:	cc 	int3
 1053304:	cc 	int3
 1053305:	cc 	int3
 1053306:	cc 	int3
 1053307:	cc 	int3
 1053308:	cc 	int3
 1053309:	cc 	int3
 105330a:	cc 	int3
 105330b:	cc 	int3
 105330c:	cc 	int3
 105330d:	cc 	int3
 105330e:	cc 	int3
 105330f:	cc 	int3

_runtime.debugCallPanicked:
 1053310:	48 83 ec 18 	sub	rsp, 24
 1053314:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1053319:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 105331e:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1053323:	48 89 04 24 	mov	qword ptr [rsp], rax
 1053327:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 105332c:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1053331:	48 c7 c0 02 00 00 00 	mov	rax, 2
 1053338:	cc 	int3
 1053339:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 105333e:	48 83 c4 18 	add	rsp, 24
 1053342:	c3 	ret
 1053343:	cc 	int3
 1053344:	cc 	int3
 1053345:	cc 	int3
 1053346:	cc 	int3
 1053347:	cc 	int3
 1053348:	cc 	int3
 1053349:	cc 	int3
 105334a:	cc 	int3
 105334b:	cc 	int3
 105334c:	cc 	int3
 105334d:	cc 	int3
 105334e:	cc 	int3
 105334f:	cc 	int3

_runtime.panicIndex:
 1053350:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1053355:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 105335a:	e9 91 38 fd ff 	jmp	-182127 <_runtime.goPanicIndex>
 105335f:	cc 	int3

_runtime.panicIndexU:
 1053360:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1053365:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 105336a:	e9 31 39 fd ff 	jmp	-181967 <_runtime.goPanicIndexU>
 105336f:	cc 	int3

_runtime.panicSliceAlen:
 1053370:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1053375:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 105337a:	e9 d1 39 fd ff 	jmp	-181807 <_runtime.goPanicSliceAlen>
 105337f:	cc 	int3

_runtime.panicSliceAlenU:
 1053380:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1053385:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 105338a:	e9 71 3a fd ff 	jmp	-181647 <_runtime.goPanicSliceAlenU>
 105338f:	cc 	int3

_runtime.panicSliceAcap:
 1053390:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1053395:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 105339a:	e9 11 3b fd ff 	jmp	-181487 <_runtime.goPanicSliceAcap>
 105339f:	cc 	int3

_runtime.panicSliceAcapU:
 10533a0:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10533a5:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 10533aa:	e9 b1 3b fd ff 	jmp	-181327 <_runtime.goPanicSliceAcapU>
 10533af:	cc 	int3

_runtime.panicSliceB:
 10533b0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10533b5:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10533ba:	e9 51 3c fd ff 	jmp	-181167 <_runtime.goPanicSliceB>
 10533bf:	cc 	int3

_runtime.panicSliceBU:
 10533c0:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10533c5:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 10533ca:	e9 f1 3c fd ff 	jmp	-181007 <_runtime.goPanicSliceBU>
 10533cf:	cc 	int3

_runtime.panicSlice3Alen:
 10533d0:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10533d5:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 10533da:	e9 91 3d fd ff 	jmp	-180847 <_runtime.goPanicSlice3Alen>
 10533df:	cc 	int3

_runtime.panicSlice3AlenU:
 10533e0:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 10533e5:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 10533ea:	e9 31 3e fd ff 	jmp	-180687 <_runtime.goPanicSlice3AlenU>
 10533ef:	cc 	int3

_runtime.duffzero:
 10533f0:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10533f3:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 10533f7:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 10533fb:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 10533ff:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053403:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053406:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 105340a:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 105340e:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053412:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053416:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053419:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 105341d:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053421:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053425:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053429:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105342c:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 1053430:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053434:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053438:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 105343c:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105343f:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 1053443:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053447:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 105344b:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 105344f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053452:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 1053456:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 105345a:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 105345e:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053462:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053465:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 1053469:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 105346d:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053471:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053475:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053478:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 105347c:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053480:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053484:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053488:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105348b:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 105348f:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053493:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053497:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 105349b:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105349e:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 10534a2:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 10534a6:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 10534aa:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 10534ae:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10534b1:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 10534b5:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 10534b9:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 10534bd:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 10534c1:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10534c4:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 10534c8:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 10534cc:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 10534d0:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 10534d4:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10534d7:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 10534db:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 10534df:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 10534e3:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 10534e7:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10534ea:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 10534ee:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 10534f2:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 10534f6:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 10534fa:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10534fd:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 1053501:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053505:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 1053509:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 105350d:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053510:	0f 11 47 10 	movups	xmmword ptr [rdi + 16], xmm0
 1053514:	0f 11 47 20 	movups	xmmword ptr [rdi + 32], xmm0
 1053518:	0f 11 47 30 	movups	xmmword ptr [rdi + 48], xmm0
 105351c:	48 8d 7f 40 	lea	rdi, [rdi + 64]
 1053520:	c3 	ret
 1053521:	cc 	int3
 1053522:	cc 	int3
 1053523:	cc 	int3
 1053524:	cc 	int3
 1053525:	cc 	int3
 1053526:	cc 	int3
 1053527:	cc 	int3
 1053528:	cc 	int3
 1053529:	cc 	int3
 105352a:	cc 	int3
 105352b:	cc 	int3
 105352c:	cc 	int3
 105352d:	cc 	int3
 105352e:	cc 	int3
 105352f:	cc 	int3

_runtime.duffcopy:
 1053530:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053533:	48 83 c6 10 	add	rsi, 16
 1053537:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105353a:	48 83 c7 10 	add	rdi, 16
 105353e:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053541:	48 83 c6 10 	add	rsi, 16
 1053545:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053548:	48 83 c7 10 	add	rdi, 16
 105354c:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105354f:	48 83 c6 10 	add	rsi, 16
 1053553:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053556:	48 83 c7 10 	add	rdi, 16
 105355a:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105355d:	48 83 c6 10 	add	rsi, 16
 1053561:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053564:	48 83 c7 10 	add	rdi, 16
 1053568:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105356b:	48 83 c6 10 	add	rsi, 16
 105356f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053572:	48 83 c7 10 	add	rdi, 16
 1053576:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053579:	48 83 c6 10 	add	rsi, 16
 105357d:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053580:	48 83 c7 10 	add	rdi, 16
 1053584:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053587:	48 83 c6 10 	add	rsi, 16
 105358b:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105358e:	48 83 c7 10 	add	rdi, 16
 1053592:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053595:	48 83 c6 10 	add	rsi, 16
 1053599:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105359c:	48 83 c7 10 	add	rdi, 16
 10535a0:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535a3:	48 83 c6 10 	add	rsi, 16
 10535a7:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535aa:	48 83 c7 10 	add	rdi, 16
 10535ae:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535b1:	48 83 c6 10 	add	rsi, 16
 10535b5:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535b8:	48 83 c7 10 	add	rdi, 16
 10535bc:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535bf:	48 83 c6 10 	add	rsi, 16
 10535c3:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535c6:	48 83 c7 10 	add	rdi, 16
 10535ca:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535cd:	48 83 c6 10 	add	rsi, 16
 10535d1:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535d4:	48 83 c7 10 	add	rdi, 16
 10535d8:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535db:	48 83 c6 10 	add	rsi, 16
 10535df:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535e2:	48 83 c7 10 	add	rdi, 16
 10535e6:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535e9:	48 83 c6 10 	add	rsi, 16
 10535ed:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535f0:	48 83 c7 10 	add	rdi, 16
 10535f4:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10535f7:	48 83 c6 10 	add	rsi, 16
 10535fb:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10535fe:	48 83 c7 10 	add	rdi, 16
 1053602:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053605:	48 83 c6 10 	add	rsi, 16
 1053609:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105360c:	48 83 c7 10 	add	rdi, 16
 1053610:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053613:	48 83 c6 10 	add	rsi, 16
 1053617:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105361a:	48 83 c7 10 	add	rdi, 16
 105361e:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053621:	48 83 c6 10 	add	rsi, 16
 1053625:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053628:	48 83 c7 10 	add	rdi, 16
 105362c:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105362f:	48 83 c6 10 	add	rsi, 16
 1053633:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053636:	48 83 c7 10 	add	rdi, 16
 105363a:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105363d:	48 83 c6 10 	add	rsi, 16
 1053641:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053644:	48 83 c7 10 	add	rdi, 16
 1053648:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105364b:	48 83 c6 10 	add	rsi, 16
 105364f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053652:	48 83 c7 10 	add	rdi, 16
 1053656:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053659:	48 83 c6 10 	add	rsi, 16
 105365d:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053660:	48 83 c7 10 	add	rdi, 16
 1053664:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053667:	48 83 c6 10 	add	rsi, 16
 105366b:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105366e:	48 83 c7 10 	add	rdi, 16
 1053672:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053675:	48 83 c6 10 	add	rsi, 16
 1053679:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105367c:	48 83 c7 10 	add	rdi, 16
 1053680:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053683:	48 83 c6 10 	add	rsi, 16
 1053687:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105368a:	48 83 c7 10 	add	rdi, 16
 105368e:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053691:	48 83 c6 10 	add	rsi, 16
 1053695:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053698:	48 83 c7 10 	add	rdi, 16
 105369c:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105369f:	48 83 c6 10 	add	rsi, 16
 10536a3:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536a6:	48 83 c7 10 	add	rdi, 16
 10536aa:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10536ad:	48 83 c6 10 	add	rsi, 16
 10536b1:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536b4:	48 83 c7 10 	add	rdi, 16
 10536b8:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10536bb:	48 83 c6 10 	add	rsi, 16
 10536bf:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536c2:	48 83 c7 10 	add	rdi, 16
 10536c6:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10536c9:	48 83 c6 10 	add	rsi, 16
 10536cd:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536d0:	48 83 c7 10 	add	rdi, 16
 10536d4:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10536d7:	48 83 c6 10 	add	rsi, 16
 10536db:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536de:	48 83 c7 10 	add	rdi, 16
 10536e2:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10536e5:	48 83 c6 10 	add	rsi, 16
 10536e9:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536ec:	48 83 c7 10 	add	rdi, 16
 10536f0:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10536f3:	48 83 c6 10 	add	rsi, 16
 10536f7:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10536fa:	48 83 c7 10 	add	rdi, 16
 10536fe:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053701:	48 83 c6 10 	add	rsi, 16
 1053705:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053708:	48 83 c7 10 	add	rdi, 16
 105370c:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105370f:	48 83 c6 10 	add	rsi, 16
 1053713:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053716:	48 83 c7 10 	add	rdi, 16
 105371a:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105371d:	48 83 c6 10 	add	rsi, 16
 1053721:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053724:	48 83 c7 10 	add	rdi, 16
 1053728:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105372b:	48 83 c6 10 	add	rsi, 16
 105372f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053732:	48 83 c7 10 	add	rdi, 16
 1053736:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053739:	48 83 c6 10 	add	rsi, 16
 105373d:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053740:	48 83 c7 10 	add	rdi, 16
 1053744:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053747:	48 83 c6 10 	add	rsi, 16
 105374b:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105374e:	48 83 c7 10 	add	rdi, 16
 1053752:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053755:	48 83 c6 10 	add	rsi, 16
 1053759:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105375c:	48 83 c7 10 	add	rdi, 16
 1053760:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053763:	48 83 c6 10 	add	rsi, 16
 1053767:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105376a:	48 83 c7 10 	add	rdi, 16
 105376e:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053771:	48 83 c6 10 	add	rsi, 16
 1053775:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053778:	48 83 c7 10 	add	rdi, 16
 105377c:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105377f:	48 83 c6 10 	add	rsi, 16
 1053783:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053786:	48 83 c7 10 	add	rdi, 16
 105378a:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105378d:	48 83 c6 10 	add	rsi, 16
 1053791:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053794:	48 83 c7 10 	add	rdi, 16
 1053798:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105379b:	48 83 c6 10 	add	rsi, 16
 105379f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537a2:	48 83 c7 10 	add	rdi, 16
 10537a6:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537a9:	48 83 c6 10 	add	rsi, 16
 10537ad:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537b0:	48 83 c7 10 	add	rdi, 16
 10537b4:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537b7:	48 83 c6 10 	add	rsi, 16
 10537bb:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537be:	48 83 c7 10 	add	rdi, 16
 10537c2:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537c5:	48 83 c6 10 	add	rsi, 16
 10537c9:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537cc:	48 83 c7 10 	add	rdi, 16
 10537d0:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537d3:	48 83 c6 10 	add	rsi, 16
 10537d7:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537da:	48 83 c7 10 	add	rdi, 16
 10537de:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537e1:	48 83 c6 10 	add	rsi, 16
 10537e5:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537e8:	48 83 c7 10 	add	rdi, 16
 10537ec:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537ef:	48 83 c6 10 	add	rsi, 16
 10537f3:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10537f6:	48 83 c7 10 	add	rdi, 16
 10537fa:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10537fd:	48 83 c6 10 	add	rsi, 16
 1053801:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053804:	48 83 c7 10 	add	rdi, 16
 1053808:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105380b:	48 83 c6 10 	add	rsi, 16
 105380f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053812:	48 83 c7 10 	add	rdi, 16
 1053816:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053819:	48 83 c6 10 	add	rsi, 16
 105381d:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053820:	48 83 c7 10 	add	rdi, 16
 1053824:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053827:	48 83 c6 10 	add	rsi, 16
 105382b:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105382e:	48 83 c7 10 	add	rdi, 16
 1053832:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053835:	48 83 c6 10 	add	rsi, 16
 1053839:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105383c:	48 83 c7 10 	add	rdi, 16
 1053840:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053843:	48 83 c6 10 	add	rsi, 16
 1053847:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105384a:	48 83 c7 10 	add	rdi, 16
 105384e:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053851:	48 83 c6 10 	add	rsi, 16
 1053855:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053858:	48 83 c7 10 	add	rdi, 16
 105385c:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105385f:	48 83 c6 10 	add	rsi, 16
 1053863:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053866:	48 83 c7 10 	add	rdi, 16
 105386a:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105386d:	48 83 c6 10 	add	rsi, 16
 1053871:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053874:	48 83 c7 10 	add	rdi, 16
 1053878:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 105387b:	48 83 c6 10 	add	rsi, 16
 105387f:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053882:	48 83 c7 10 	add	rdi, 16
 1053886:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053889:	48 83 c6 10 	add	rsi, 16
 105388d:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 1053890:	48 83 c7 10 	add	rdi, 16
 1053894:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 1053897:	48 83 c6 10 	add	rsi, 16
 105389b:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 105389e:	48 83 c7 10 	add	rdi, 16
 10538a2:	0f 10 06 	movups	xmm0, xmmword ptr [rsi]
 10538a5:	48 83 c6 10 	add	rsi, 16
 10538a9:	0f 11 07 	movups	xmmword ptr [rdi], xmm0
 10538ac:	48 83 c7 10 	add	rdi, 16
 10538b0:	c3 	ret
 10538b1:	cc 	int3
 10538b2:	cc 	int3
 10538b3:	cc 	int3
 10538b4:	cc 	int3
 10538b5:	cc 	int3
 10538b6:	cc 	int3
 10538b7:	cc 	int3
 10538b8:	cc 	int3
 10538b9:	cc 	int3
 10538ba:	cc 	int3
 10538bb:	cc 	int3
 10538bc:	cc 	int3
 10538bd:	cc 	int3
 10538be:	cc 	int3
 10538bf:	cc 	int3

_runtime.memclrNoHeapPointers:
 10538c0:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 10538c5:	48 8b 5c 24 10 	mov	rbx, qword ptr [rsp + 16]
 10538ca:	48 31 c0 	xor	rax, rax
 10538cd:	48 85 db 	test	rbx, rbx
 10538d0:	0f 84 a8 01 00 00 	je	424 <_runtime.memclrNoHeapPointers+0x1be>
 10538d6:	48 83 fb 02 	cmp	rbx, 2
 10538da:	0f 86 97 01 00 00 	jbe	407 <_runtime.memclrNoHeapPointers+0x1b7>
 10538e0:	48 83 fb 04 	cmp	rbx, 4
 10538e4:	0f 86 95 01 00 00 	jbe	405 <_runtime.memclrNoHeapPointers+0x1bf>
 10538ea:	48 83 fb 08 	cmp	rbx, 8
 10538ee:	0f 82 94 01 00 00 	jb	404 <_runtime.memclrNoHeapPointers+0x1c8>
 10538f4:	0f 84 95 01 00 00 	je	405 <_runtime.memclrNoHeapPointers+0x1cf>
 10538fa:	48 83 fb 10 	cmp	rbx, 16
 10538fe:	0f 86 8f 01 00 00 	jbe	399 <_runtime.memclrNoHeapPointers+0x1d3>
 1053904:	66 0f ef c0 	pxor	xmm0, xmm0
 1053908:	48 83 fb 20 	cmp	rbx, 32
 105390c:	0f 86 8a 01 00 00 	jbe	394 <_runtime.memclrNoHeapPointers+0x1dc>
 1053912:	48 83 fb 40 	cmp	rbx, 64
 1053916:	0f 86 8b 01 00 00 	jbe	395 <_runtime.memclrNoHeapPointers+0x1e7>
 105391c:	48 81 fb 80 00 00 00 	cmp	rbx, 128
 1053923:	0f 86 94 01 00 00 	jbe	404 <_runtime.memclrNoHeapPointers+0x1fd>
 1053929:	48 81 fb 00 01 00 00 	cmp	rbx, 256
 1053930:	0f 86 b3 01 00 00 	jbe	435 <_runtime.memclrNoHeapPointers+0x229>
 1053936:	80 3d 46 43 0a 00 01 	cmp	byte ptr [rip + 672582], 1
 105393d:	0f 84 83 00 00 00 	je	131 <_runtime.memclrNoHeapPointers+0x106>
 1053943:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053947:	f3 0f 7f 47 10 	movdqu	xmmword ptr [rdi + 16], xmm0
 105394c:	f3 0f 7f 47 20 	movdqu	xmmword ptr [rdi + 32], xmm0
 1053951:	f3 0f 7f 47 30 	movdqu	xmmword ptr [rdi + 48], xmm0
 1053956:	f3 0f 7f 47 40 	movdqu	xmmword ptr [rdi + 64], xmm0
 105395b:	f3 0f 7f 47 50 	movdqu	xmmword ptr [rdi + 80], xmm0
 1053960:	f3 0f 7f 47 60 	movdqu	xmmword ptr [rdi + 96], xmm0
 1053965:	f3 0f 7f 47 70 	movdqu	xmmword ptr [rdi + 112], xmm0
 105396a:	f3 0f 7f 87 80 00 00 00 	movdqu	xmmword ptr [rdi + 128], xmm0
 1053972:	f3 0f 7f 87 90 00 00 00 	movdqu	xmmword ptr [rdi + 144], xmm0
 105397a:	f3 0f 7f 87 a0 00 00 00 	movdqu	xmmword ptr [rdi + 160], xmm0
 1053982:	f3 0f 7f 87 b0 00 00 00 	movdqu	xmmword ptr [rdi + 176], xmm0
 105398a:	f3 0f 7f 87 c0 00 00 00 	movdqu	xmmword ptr [rdi + 192], xmm0
 1053992:	f3 0f 7f 87 d0 00 00 00 	movdqu	xmmword ptr [rdi + 208], xmm0
 105399a:	f3 0f 7f 87 e0 00 00 00 	movdqu	xmmword ptr [rdi + 224], xmm0
 10539a2:	f3 0f 7f 87 f0 00 00 00 	movdqu	xmmword ptr [rdi + 240], xmm0
 10539aa:	48 81 eb 00 01 00 00 	sub	rbx, 256
 10539b1:	48 81 c7 00 01 00 00 	add	rdi, 256
 10539b8:	48 81 fb 00 01 00 00 	cmp	rbx, 256
 10539bf:	73 82 	jae	-126 <_runtime.memclrNoHeapPointers+0x83>
 10539c1:	e9 07 ff ff ff 	jmp	-249 <_runtime.memclrNoHeapPointers+0xd>
 10539c6:	c5 fd ef c0 	vpxor	ymm0, ymm0, ymm0
 10539ca:	48 81 fb 00 00 00 02 	cmp	rbx, 33554432
 10539d1:	73 46 	jae	70 <_runtime.memclrNoHeapPointers+0x159>
 10539d3:	c5 fe 7f 07 	vmovdqu	ymmword ptr [rdi], ymm0
 10539d7:	c5 fe 7f 47 20 	vmovdqu	ymmword ptr [rdi + 32], ymm0
 10539dc:	c5 fe 7f 47 40 	vmovdqu	ymmword ptr [rdi + 64], ymm0
 10539e1:	c5 fe 7f 47 60 	vmovdqu	ymmword ptr [rdi + 96], ymm0
 10539e6:	48 81 eb 80 00 00 00 	sub	rbx, 128
 10539ed:	48 81 c7 80 00 00 00 	add	rdi, 128
 10539f4:	48 81 fb 80 00 00 00 	cmp	rbx, 128
 10539fb:	73 d6 	jae	-42 <_runtime.memclrNoHeapPointers+0x113>
 10539fd:	c5 fe 7f 44 1f e0 	vmovdqu	ymmword ptr [rdi + rbx - 32], ymm0
 1053a03:	c5 fe 7f 44 1f c0 	vmovdqu	ymmword ptr [rdi + rbx - 64], ymm0
 1053a09:	c5 fe 7f 44 1f a0 	vmovdqu	ymmword ptr [rdi + rbx - 96], ymm0
 1053a0f:	c5 fe 7f 44 1f 80 	vmovdqu	ymmword ptr [rdi + rbx - 128], ymm0
 1053a15:	c5 f8 77 	vzeroupper
 1053a18:	c3 	ret
 1053a19:	c5 fe 7f 07 	vmovdqu	ymmword ptr [rdi], ymm0
 1053a1d:	48 89 fe 	mov	rsi, rdi
 1053a20:	48 83 c7 20 	add	rdi, 32
 1053a24:	48 83 e7 e0 	and	rdi, -32
 1053a28:	48 29 fe 	sub	rsi, rdi
 1053a2b:	48 01 f3 	add	rbx, rsi
 1053a2e:	c5 fd e7 07 	vmovntdq	ymmword ptr [rdi], ymm0
 1053a32:	c5 fd e7 47 20 	vmovntdq	ymmword ptr [rdi + 32], ymm0
 1053a37:	c5 fd e7 47 40 	vmovntdq	ymmword ptr [rdi + 64], ymm0
 1053a3c:	c5 fd e7 47 60 	vmovntdq	ymmword ptr [rdi + 96], ymm0
 1053a41:	48 81 eb 80 00 00 00 	sub	rbx, 128
 1053a48:	48 81 c7 80 00 00 00 	add	rdi, 128
 1053a4f:	48 81 fb 80 00 00 00 	cmp	rbx, 128
 1053a56:	73 d6 	jae	-42 <_runtime.memclrNoHeapPointers+0x16e>
 1053a58:	0f ae f8 	sfence
 1053a5b:	c5 fe 7f 44 1f e0 	vmovdqu	ymmword ptr [rdi + rbx - 32], ymm0
 1053a61:	c5 fe 7f 44 1f c0 	vmovdqu	ymmword ptr [rdi + rbx - 64], ymm0
 1053a67:	c5 fe 7f 44 1f a0 	vmovdqu	ymmword ptr [rdi + rbx - 96], ymm0
 1053a6d:	c5 fe 7f 44 1f 80 	vmovdqu	ymmword ptr [rdi + rbx - 128], ymm0
 1053a73:	c5 f8 77 	vzeroupper
 1053a76:	c3 	ret
 1053a77:	88 07 	mov	byte ptr [rdi], al
 1053a79:	88 44 1f ff 	mov	byte ptr [rdi + rbx - 1], al
 1053a7d:	c3 	ret
 1053a7e:	c3 	ret
 1053a7f:	66 89 07 	mov	word ptr [rdi], ax
 1053a82:	66 89 44 1f fe 	mov	word ptr [rdi + rbx - 2], ax
 1053a87:	c3 	ret
 1053a88:	89 07 	mov	dword ptr [rdi], eax
 1053a8a:	89 44 1f fc 	mov	dword ptr [rdi + rbx - 4], eax
 1053a8e:	c3 	ret
 1053a8f:	48 89 07 	mov	qword ptr [rdi], rax
 1053a92:	c3 	ret
 1053a93:	48 89 07 	mov	qword ptr [rdi], rax
 1053a96:	48 89 44 1f f8 	mov	qword ptr [rdi + rbx - 8], rax
 1053a9b:	c3 	ret
 1053a9c:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053aa0:	f3 0f 7f 44 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm0
 1053aa6:	c3 	ret
 1053aa7:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053aab:	f3 0f 7f 47 10 	movdqu	xmmword ptr [rdi + 16], xmm0
 1053ab0:	f3 0f 7f 44 1f e0 	movdqu	xmmword ptr [rdi + rbx - 32], xmm0
 1053ab6:	f3 0f 7f 44 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm0
 1053abc:	c3 	ret
 1053abd:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053ac1:	f3 0f 7f 47 10 	movdqu	xmmword ptr [rdi + 16], xmm0
 1053ac6:	f3 0f 7f 47 20 	movdqu	xmmword ptr [rdi + 32], xmm0
 1053acb:	f3 0f 7f 47 30 	movdqu	xmmword ptr [rdi + 48], xmm0
 1053ad0:	f3 0f 7f 44 1f c0 	movdqu	xmmword ptr [rdi + rbx - 64], xmm0
 1053ad6:	f3 0f 7f 44 1f d0 	movdqu	xmmword ptr [rdi + rbx - 48], xmm0
 1053adc:	f3 0f 7f 44 1f e0 	movdqu	xmmword ptr [rdi + rbx - 32], xmm0
 1053ae2:	f3 0f 7f 44 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm0
 1053ae8:	c3 	ret
 1053ae9:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053aed:	f3 0f 7f 47 10 	movdqu	xmmword ptr [rdi + 16], xmm0
 1053af2:	f3 0f 7f 47 20 	movdqu	xmmword ptr [rdi + 32], xmm0
 1053af7:	f3 0f 7f 47 30 	movdqu	xmmword ptr [rdi + 48], xmm0
 1053afc:	f3 0f 7f 47 40 	movdqu	xmmword ptr [rdi + 64], xmm0
 1053b01:	f3 0f 7f 47 50 	movdqu	xmmword ptr [rdi + 80], xmm0
 1053b06:	f3 0f 7f 47 60 	movdqu	xmmword ptr [rdi + 96], xmm0
 1053b0b:	f3 0f 7f 47 70 	movdqu	xmmword ptr [rdi + 112], xmm0
 1053b10:	f3 0f 7f 44 1f 80 	movdqu	xmmword ptr [rdi + rbx - 128], xmm0
 1053b16:	f3 0f 7f 44 1f 90 	movdqu	xmmword ptr [rdi + rbx - 112], xmm0
 1053b1c:	f3 0f 7f 44 1f a0 	movdqu	xmmword ptr [rdi + rbx - 96], xmm0
 1053b22:	f3 0f 7f 44 1f b0 	movdqu	xmmword ptr [rdi + rbx - 80], xmm0
 1053b28:	f3 0f 7f 44 1f c0 	movdqu	xmmword ptr [rdi + rbx - 64], xmm0
 1053b2e:	f3 0f 7f 44 1f d0 	movdqu	xmmword ptr [rdi + rbx - 48], xmm0
 1053b34:	f3 0f 7f 44 1f e0 	movdqu	xmmword ptr [rdi + rbx - 32], xmm0
 1053b3a:	f3 0f 7f 44 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm0
 1053b40:	c3 	ret
 1053b41:	cc 	int3
 1053b42:	cc 	int3
 1053b43:	cc 	int3
 1053b44:	cc 	int3
 1053b45:	cc 	int3
 1053b46:	cc 	int3
 1053b47:	cc 	int3
 1053b48:	cc 	int3
 1053b49:	cc 	int3
 1053b4a:	cc 	int3
 1053b4b:	cc 	int3
 1053b4c:	cc 	int3
 1053b4d:	cc 	int3
 1053b4e:	cc 	int3
 1053b4f:	cc 	int3

_runtime.memmove:
 1053b50:	48 8b 7c 24 08 	mov	rdi, qword ptr [rsp + 8]
 1053b55:	48 8b 74 24 10 	mov	rsi, qword ptr [rsp + 16]
 1053b5a:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 1053b5f:	48 85 db 	test	rbx, rbx
 1053b62:	0f 84 f7 00 00 00 	je	247 <_runtime.memmove+0x10f>
 1053b68:	48 83 fb 02 	cmp	rbx, 2
 1053b6c:	0f 86 e0 00 00 00 	jbe	224 <_runtime.memmove+0x102>
 1053b72:	48 83 fb 04 	cmp	rbx, 4
 1053b76:	0f 82 e9 00 00 00 	jb	233 <_runtime.memmove+0x115>
 1053b7c:	0f 86 de 00 00 00 	jbe	222 <_runtime.memmove+0x110>
 1053b82:	48 83 fb 08 	cmp	rbx, 8
 1053b86:	0f 82 e6 00 00 00 	jb	230 <_runtime.memmove+0x122>
 1053b8c:	0f 84 ed 00 00 00 	je	237 <_runtime.memmove+0x12f>
 1053b92:	48 83 fb 10 	cmp	rbx, 16
 1053b96:	0f 86 ea 00 00 00 	jbe	234 <_runtime.memmove+0x136>
 1053b9c:	48 83 fb 20 	cmp	rbx, 32
 1053ba0:	0f 86 f1 00 00 00 	jbe	241 <_runtime.memmove+0x147>
 1053ba6:	48 83 fb 40 	cmp	rbx, 64
 1053baa:	0f 86 fc 00 00 00 	jbe	252 <_runtime.memmove+0x15c>
 1053bb0:	48 81 fb 80 00 00 00 	cmp	rbx, 128
 1053bb7:	0f 86 1a 01 00 00 	jbe	282 <_runtime.memmove+0x187>
 1053bbd:	48 81 fb 00 01 00 00 	cmp	rbx, 256
 1053bc4:	0f 86 64 01 00 00 	jbe	356 <_runtime.memmove+0x1de>
 1053bca:	f6 05 9f 3b 0a 00 01 	test	byte ptr [rip + 670623], 1
 1053bd1:	0f 85 1b 03 00 00 	jne	795 <_runtime.memmove+0x3a2>
 1053bd7:	48 39 fe 	cmp	rsi, rdi
 1053bda:	76 3a 	jbe	58 <_runtime.memmove+0xc6>
 1053bdc:	48 81 fb 00 08 00 00 	cmp	rbx, 2048
 1053be3:	0f 86 04 02 00 00 	jbe	516 <_runtime.memmove+0x29d>
 1053be9:	80 3d 96 40 0a 00 01 	cmp	byte ptr [rip + 671894], 1
 1053bf0:	75 11 	jne	17 <_runtime.memmove+0xb3>
 1053bf2:	89 f0 	mov	eax, esi
 1053bf4:	09 f8 	or	eax, edi
 1053bf6:	a9 07 00 00 00 	test	eax, 7
 1053bfb:	74 06 	je	6 <_runtime.memmove+0xb3>
 1053bfd:	48 89 d9 	mov	rcx, rbx
 1053c00:	f3 a4 	rep		movsb	byte ptr es:[rdi], byte ptr [rsi]
 1053c02:	c3 	ret
 1053c03:	48 89 d9 	mov	rcx, rbx
 1053c06:	48 c1 e9 03 	shr	rcx, 3
 1053c0a:	48 83 e3 07 	and	rbx, 7
 1053c0e:	f3 48 a5 	rep		movsq	qword ptr es:[rdi], qword ptr [rsi]
 1053c11:	e9 49 ff ff ff 	jmp	-183 <_runtime.memmove+0xf>
 1053c16:	48 89 f1 	mov	rcx, rsi
 1053c19:	48 01 d9 	add	rcx, rbx
 1053c1c:	48 39 f9 	cmp	rcx, rdi
 1053c1f:	76 bb 	jbe	-69 <_runtime.memmove+0x8c>
 1053c21:	48 01 df 	add	rdi, rbx
 1053c24:	48 01 de 	add	rsi, rbx
 1053c27:	fd 	std
 1053c28:	48 89 d9 	mov	rcx, rbx
 1053c2b:	48 c1 e9 03 	shr	rcx, 3
 1053c2f:	48 83 e3 07 	and	rbx, 7
 1053c33:	48 83 ef 08 	sub	rdi, 8
 1053c37:	48 83 ee 08 	sub	rsi, 8
 1053c3b:	f3 48 a5 	rep		movsq	qword ptr es:[rdi], qword ptr [rsi]
 1053c3e:	fc 	cld
 1053c3f:	48 83 c7 08 	add	rdi, 8
 1053c43:	48 83 c6 08 	add	rsi, 8
 1053c47:	48 29 df 	sub	rdi, rbx
 1053c4a:	48 29 de 	sub	rsi, rbx
 1053c4d:	e9 0d ff ff ff 	jmp	-243 <_runtime.memmove+0xf>
 1053c52:	8a 06 	mov	al, byte ptr [rsi]
 1053c54:	8a 4c 1e ff 	mov	cl, byte ptr [rsi + rbx - 1]
 1053c58:	88 07 	mov	byte ptr [rdi], al
 1053c5a:	88 4c 1f ff 	mov	byte ptr [rdi + rbx - 1], cl
 1053c5e:	c3 	ret
 1053c5f:	c3 	ret
 1053c60:	8b 06 	mov	eax, dword ptr [rsi]
 1053c62:	89 07 	mov	dword ptr [rdi], eax
 1053c64:	c3 	ret
 1053c65:	66 8b 06 	mov	ax, word ptr [rsi]
 1053c68:	8a 4e 02 	mov	cl, byte ptr [rsi + 2]
 1053c6b:	66 89 07 	mov	word ptr [rdi], ax
 1053c6e:	88 4f 02 	mov	byte ptr [rdi + 2], cl
 1053c71:	c3 	ret
 1053c72:	8b 06 	mov	eax, dword ptr [rsi]
 1053c74:	8b 4c 1e fc 	mov	ecx, dword ptr [rsi + rbx - 4]
 1053c78:	89 07 	mov	dword ptr [rdi], eax
 1053c7a:	89 4c 1f fc 	mov	dword ptr [rdi + rbx - 4], ecx
 1053c7e:	c3 	ret
 1053c7f:	48 8b 06 	mov	rax, qword ptr [rsi]
 1053c82:	48 89 07 	mov	qword ptr [rdi], rax
 1053c85:	c3 	ret
 1053c86:	48 8b 06 	mov	rax, qword ptr [rsi]
 1053c89:	48 8b 4c 1e f8 	mov	rcx, qword ptr [rsi + rbx - 8]
 1053c8e:	48 89 07 	mov	qword ptr [rdi], rax
 1053c91:	48 89 4c 1f f8 	mov	qword ptr [rdi + rbx - 8], rcx
 1053c96:	c3 	ret
 1053c97:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1053c9b:	f3 0f 6f 4c 1e f0 	movdqu	xmm1, xmmword ptr [rsi + rbx - 16]
 1053ca1:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053ca5:	f3 0f 7f 4c 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm1
 1053cab:	c3 	ret
 1053cac:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1053cb0:	f3 0f 6f 4e 10 	movdqu	xmm1, xmmword ptr [rsi + 16]
 1053cb5:	f3 0f 6f 54 1e e0 	movdqu	xmm2, xmmword ptr [rsi + rbx - 32]
 1053cbb:	f3 0f 6f 5c 1e f0 	movdqu	xmm3, xmmword ptr [rsi + rbx - 16]
 1053cc1:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053cc5:	f3 0f 7f 4f 10 	movdqu	xmmword ptr [rdi + 16], xmm1
 1053cca:	f3 0f 7f 54 1f e0 	movdqu	xmmword ptr [rdi + rbx - 32], xmm2
 1053cd0:	f3 0f 7f 5c 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm3
 1053cd6:	c3 	ret
 1053cd7:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1053cdb:	f3 0f 6f 4e 10 	movdqu	xmm1, xmmword ptr [rsi + 16]
 1053ce0:	f3 0f 6f 56 20 	movdqu	xmm2, xmmword ptr [rsi + 32]
 1053ce5:	f3 0f 6f 5e 30 	movdqu	xmm3, xmmword ptr [rsi + 48]
 1053cea:	f3 0f 6f 64 1e c0 	movdqu	xmm4, xmmword ptr [rsi + rbx - 64]
 1053cf0:	f3 0f 6f 6c 1e d0 	movdqu	xmm5, xmmword ptr [rsi + rbx - 48]
 1053cf6:	f3 0f 6f 74 1e e0 	movdqu	xmm6, xmmword ptr [rsi + rbx - 32]
 1053cfc:	f3 0f 6f 7c 1e f0 	movdqu	xmm7, xmmword ptr [rsi + rbx - 16]
 1053d02:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053d06:	f3 0f 7f 4f 10 	movdqu	xmmword ptr [rdi + 16], xmm1
 1053d0b:	f3 0f 7f 57 20 	movdqu	xmmword ptr [rdi + 32], xmm2
 1053d10:	f3 0f 7f 5f 30 	movdqu	xmmword ptr [rdi + 48], xmm3
 1053d15:	f3 0f 7f 64 1f c0 	movdqu	xmmword ptr [rdi + rbx - 64], xmm4
 1053d1b:	f3 0f 7f 6c 1f d0 	movdqu	xmmword ptr [rdi + rbx - 48], xmm5
 1053d21:	f3 0f 7f 74 1f e0 	movdqu	xmmword ptr [rdi + rbx - 32], xmm6
 1053d27:	f3 0f 7f 7c 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm7
 1053d2d:	c3 	ret
 1053d2e:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1053d32:	f3 0f 6f 4e 10 	movdqu	xmm1, xmmword ptr [rsi + 16]
 1053d37:	f3 0f 6f 56 20 	movdqu	xmm2, xmmword ptr [rsi + 32]
 1053d3c:	f3 0f 6f 5e 30 	movdqu	xmm3, xmmword ptr [rsi + 48]
 1053d41:	f3 0f 6f 66 40 	movdqu	xmm4, xmmword ptr [rsi + 64]
 1053d46:	f3 0f 6f 6e 50 	movdqu	xmm5, xmmword ptr [rsi + 80]
 1053d4b:	f3 0f 6f 76 60 	movdqu	xmm6, xmmword ptr [rsi + 96]
 1053d50:	f3 0f 6f 7e 70 	movdqu	xmm7, xmmword ptr [rsi + 112]
 1053d55:	f3 44 0f 6f 44 1e 80 	movdqu	xmm8, xmmword ptr [rsi + rbx - 128]
 1053d5c:	f3 44 0f 6f 4c 1e 90 	movdqu	xmm9, xmmword ptr [rsi + rbx - 112]
 1053d63:	f3 44 0f 6f 54 1e a0 	movdqu	xmm10, xmmword ptr [rsi + rbx - 96]
 1053d6a:	f3 44 0f 6f 5c 1e b0 	movdqu	xmm11, xmmword ptr [rsi + rbx - 80]
 1053d71:	f3 44 0f 6f 64 1e c0 	movdqu	xmm12, xmmword ptr [rsi + rbx - 64]
 1053d78:	f3 44 0f 6f 6c 1e d0 	movdqu	xmm13, xmmword ptr [rsi + rbx - 48]
 1053d7f:	f3 44 0f 6f 74 1e e0 	movdqu	xmm14, xmmword ptr [rsi + rbx - 32]
 1053d86:	f3 44 0f 6f 7c 1e f0 	movdqu	xmm15, xmmword ptr [rsi + rbx - 16]
 1053d8d:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053d91:	f3 0f 7f 4f 10 	movdqu	xmmword ptr [rdi + 16], xmm1
 1053d96:	f3 0f 7f 57 20 	movdqu	xmmword ptr [rdi + 32], xmm2
 1053d9b:	f3 0f 7f 5f 30 	movdqu	xmmword ptr [rdi + 48], xmm3
 1053da0:	f3 0f 7f 67 40 	movdqu	xmmword ptr [rdi + 64], xmm4
 1053da5:	f3 0f 7f 6f 50 	movdqu	xmmword ptr [rdi + 80], xmm5
 1053daa:	f3 0f 7f 77 60 	movdqu	xmmword ptr [rdi + 96], xmm6
 1053daf:	f3 0f 7f 7f 70 	movdqu	xmmword ptr [rdi + 112], xmm7
 1053db4:	f3 44 0f 7f 44 1f 80 	movdqu	xmmword ptr [rdi + rbx - 128], xmm8
 1053dbb:	f3 44 0f 7f 4c 1f 90 	movdqu	xmmword ptr [rdi + rbx - 112], xmm9
 1053dc2:	f3 44 0f 7f 54 1f a0 	movdqu	xmmword ptr [rdi + rbx - 96], xmm10
 1053dc9:	f3 44 0f 7f 5c 1f b0 	movdqu	xmmword ptr [rdi + rbx - 80], xmm11
 1053dd0:	f3 44 0f 7f 64 1f c0 	movdqu	xmmword ptr [rdi + rbx - 64], xmm12
 1053dd7:	f3 44 0f 7f 6c 1f d0 	movdqu	xmmword ptr [rdi + rbx - 48], xmm13
 1053dde:	f3 44 0f 7f 74 1f e0 	movdqu	xmmword ptr [rdi + rbx - 32], xmm14
 1053de5:	f3 44 0f 7f 7c 1f f0 	movdqu	xmmword ptr [rdi + rbx - 16], xmm15
 1053dec:	c3 	ret
 1053ded:	48 81 eb 00 01 00 00 	sub	rbx, 256
 1053df4:	f3 0f 6f 06 	movdqu	xmm0, xmmword ptr [rsi]
 1053df8:	f3 0f 6f 4e 10 	movdqu	xmm1, xmmword ptr [rsi + 16]
 1053dfd:	f3 0f 6f 56 20 	movdqu	xmm2, xmmword ptr [rsi + 32]
 1053e02:	f3 0f 6f 5e 30 	movdqu	xmm3, xmmword ptr [rsi + 48]
 1053e07:	f3 0f 6f 66 40 	movdqu	xmm4, xmmword ptr [rsi + 64]
 1053e0c:	f3 0f 6f 6e 50 	movdqu	xmm5, xmmword ptr [rsi + 80]
 1053e11:	f3 0f 6f 76 60 	movdqu	xmm6, xmmword ptr [rsi + 96]
 1053e16:	f3 0f 6f 7e 70 	movdqu	xmm7, xmmword ptr [rsi + 112]
 1053e1b:	f3 44 0f 6f 86 80 00 00 00 	movdqu	xmm8, xmmword ptr [rsi + 128]
 1053e24:	f3 44 0f 6f 8e 90 00 00 00 	movdqu	xmm9, xmmword ptr [rsi + 144]
 1053e2d:	f3 44 0f 6f 96 a0 00 00 00 	movdqu	xmm10, xmmword ptr [rsi + 160]
 1053e36:	f3 44 0f 6f 9e b0 00 00 00 	movdqu	xmm11, xmmword ptr [rsi + 176]
 1053e3f:	f3 44 0f 6f a6 c0 00 00 00 	movdqu	xmm12, xmmword ptr [rsi + 192]
 1053e48:	f3 44 0f 6f ae d0 00 00 00 	movdqu	xmm13, xmmword ptr [rsi + 208]
 1053e51:	f3 44 0f 6f b6 e0 00 00 00 	movdqu	xmm14, xmmword ptr [rsi + 224]
 1053e5a:	f3 44 0f 6f be f0 00 00 00 	movdqu	xmm15, xmmword ptr [rsi + 240]
 1053e63:	f3 0f 7f 07 	movdqu	xmmword ptr [rdi], xmm0
 1053e67:	f3 0f 7f 4f 10 	movdqu	xmmword ptr [rdi + 16], xmm1
 1053e6c:	f3 0f 7f 57 20 	movdqu	xmmword ptr [rdi + 32], xmm2
 1053e71:	f3 0f 7f 5f 30 	movdqu	xmmword ptr [rdi + 48], xmm3
 1053e76:	f3 0f 7f 67 40 	movdqu	xmmword ptr [rdi + 64], xmm4
 1053e7b:	f3 0f 7f 6f 50 	movdqu	xmmword ptr [rdi + 80], xmm5
 1053e80:	f3 0f 7f 77 60 	movdqu	xmmword ptr [rdi + 96], xmm6
 1053e85:	f3 0f 7f 7f 70 	movdqu	xmmword ptr [rdi + 112], xmm7
 1053e8a:	f3 44 0f 7f 87 80 00 00 00 	movdqu	xmmword ptr [rdi + 128], xmm8
 1053e93:	f3 44 0f 7f 8f 90 00 00 00 	movdqu	xmmword ptr [rdi + 144], xmm9
 1053e9c:	f3 44 0f 7f 97 a0 00 00 00 	movdqu	xmmword ptr [rdi + 160], xmm10
 1053ea5:	f3 44 0f 7f 9f b0 00 00 00 	movdqu	xmmword ptr [rdi + 176], xmm11
 1053eae:	f3 44 0f 7f a7 c0 00 00 00 	movdqu	xmmword ptr [rdi + 192], xmm12
 1053eb7:	f3 44 0f 7f af d0 00 00 00 	movdqu	xmmword ptr [rdi + 208], xmm13
 1053ec0:	f3 44 0f 7f b7 e0 00 00 00 	movdqu	xmmword ptr [rdi + 224], xmm14
 1053ec9:	f3 44 0f 7f bf f0 00 00 00 	movdqu	xmmword ptr [rdi + 240], xmm15
 1053ed2:	48 81 fb 00 01 00 00 	cmp	rbx, 256
 1053ed9:	48 8d b6 00 01 00 00 	lea	rsi, [rsi + 256]
 1053ee0:	48 8d bf 00 01 00 00 	lea	rdi, [rdi + 256]
 1053ee7:	0f 8d 00 ff ff ff 	jge	-256 <_runtime.memmove+0x29d>
 1053eed:	e9 6d fc ff ff 	jmp	-915 <_runtime.memmove+0xf>
 1053ef2:	48 89 f9 	mov	rcx, rdi
 1053ef5:	48 29 f1 	sub	rcx, rsi
 1053ef8:	48 39 d9 	cmp	rcx, rbx
 1053efb:	0f 82 ac 01 00 00 	jb	428 <_runtime.memmove+0x55d>
 1053f01:	48 81 fb 00 00 10 00 	cmp	rbx, 1048576
 1053f08:	0f 83 c3 00 00 00 	jae	195 <_runtime.memmove+0x481>
 1053f0e:	48 8d 0c 1e 	lea	rcx, [rsi + rbx]
 1053f12:	49 89 fa 	mov	r10, rdi
 1053f15:	f3 0f 6f 69 80 	movdqu	xmm5, xmmword ptr [rcx - 128]
 1053f1a:	f3 0f 6f 71 90 	movdqu	xmm6, xmmword ptr [rcx - 112]
 1053f1f:	48 c7 c0 80 00 00 00 	mov	rax, 128
 1053f26:	48 83 e7 e0 	and	rdi, -32
 1053f2a:	48 83 c7 20 	add	rdi, 32
 1053f2e:	f3 0f 6f 79 a0 	movdqu	xmm7, xmmword ptr [rcx - 96]
 1053f33:	f3 44 0f 6f 41 b0 	movdqu	xmm8, xmmword ptr [rcx - 80]
 1053f39:	49 89 fb 	mov	r11, rdi
 1053f3c:	4d 29 d3 	sub	r11, r10
 1053f3f:	f3 44 0f 6f 49 c0 	movdqu	xmm9, xmmword ptr [rcx - 64]
 1053f45:	f3 44 0f 6f 51 d0 	movdqu	xmm10, xmmword ptr [rcx - 48]
 1053f4b:	4c 29 db 	sub	rbx, r11
 1053f4e:	f3 44 0f 6f 59 e0 	movdqu	xmm11, xmmword ptr [rcx - 32]
 1053f54:	f3 44 0f 6f 61 f0 	movdqu	xmm12, xmmword ptr [rcx - 16]
 1053f5a:	c5 fe 6f 26 	vmovdqu	ymm4, ymmword ptr [rsi]
 1053f5e:	4c 01 de 	add	rsi, r11
 1053f61:	48 29 c3 	sub	rbx, rax
 1053f64:	c5 fe 6f 06 	vmovdqu	ymm0, ymmword ptr [rsi]
 1053f68:	c5 fe 6f 4e 20 	vmovdqu	ymm1, ymmword ptr [rsi + 32]
 1053f6d:	c5 fe 6f 56 40 	vmovdqu	ymm2, ymmword ptr [rsi + 64]
 1053f72:	c5 fe 6f 5e 60 	vmovdqu	ymm3, ymmword ptr [rsi + 96]
 1053f77:	48 01 c6 	add	rsi, rax
 1053f7a:	c5 fd 7f 07 	vmovdqa	ymmword ptr [rdi], ymm0
 1053f7e:	c5 fd 7f 4f 20 	vmovdqa	ymmword ptr [rdi + 32], ymm1
 1053f83:	c5 fd 7f 57 40 	vmovdqa	ymmword ptr [rdi + 64], ymm2
 1053f88:	c5 fd 7f 5f 60 	vmovdqa	ymmword ptr [rdi + 96], ymm3
 1053f8d:	48 01 c7 	add	rdi, rax
 1053f90:	48 29 c3 	sub	rbx, rax
 1053f93:	77 cf 	ja	-49 <_runtime.memmove+0x414>
 1053f95:	48 01 c3 	add	rbx, rax
 1053f98:	48 01 fb 	add	rbx, rdi
 1053f9b:	c4 c1 7e 7f 22 	vmovdqu	ymmword ptr [r10], ymm4
 1053fa0:	c5 f8 77 	vzeroupper
 1053fa3:	f3 0f 7f 6b 80 	movdqu	xmmword ptr [rbx - 128], xmm5
 1053fa8:	f3 0f 7f 73 90 	movdqu	xmmword ptr [rbx - 112], xmm6
 1053fad:	f3 0f 7f 7b a0 	movdqu	xmmword ptr [rbx - 96], xmm7
 1053fb2:	f3 44 0f 7f 43 b0 	movdqu	xmmword ptr [rbx - 80], xmm8
 1053fb8:	f3 44 0f 7f 4b c0 	movdqu	xmmword ptr [rbx - 64], xmm9
 1053fbe:	f3 44 0f 7f 53 d0 	movdqu	xmmword ptr [rbx - 48], xmm10
 1053fc4:	f3 44 0f 7f 5b e0 	movdqu	xmmword ptr [rbx - 32], xmm11
 1053fca:	f3 44 0f 7f 63 f0 	movdqu	xmmword ptr [rbx - 16], xmm12
 1053fd0:	c3 	ret
 1053fd1:	48 8d 0c 1e 	lea	rcx, [rsi + rbx]
 1053fd5:	f3 0f 6f 6c 1e 80 	movdqu	xmm5, xmmword ptr [rsi + rbx - 128]
 1053fdb:	f3 0f 6f 71 90 	movdqu	xmm6, xmmword ptr [rcx - 112]
 1053fe0:	f3 0f 6f 79 a0 	movdqu	xmm7, xmmword ptr [rcx - 96]
 1053fe5:	f3 44 0f 6f 41 b0 	movdqu	xmm8, xmmword ptr [rcx - 80]
 1053feb:	f3 44 0f 6f 49 c0 	movdqu	xmm9, xmmword ptr [rcx - 64]
 1053ff1:	f3 44 0f 6f 51 d0 	movdqu	xmm10, xmmword ptr [rcx - 48]
 1053ff7:	f3 44 0f 6f 59 e0 	movdqu	xmm11, xmmword ptr [rcx - 32]
 1053ffd:	f3 44 0f 6f 61 f0 	movdqu	xmm12, xmmword ptr [rcx - 16]
 1054003:	c5 fe 6f 26 	vmovdqu	ymm4, ymmword ptr [rsi]
 1054007:	49 89 f8 	mov	r8, rdi
 105400a:	48 83 e7 e0 	and	rdi, -32
 105400e:	48 83 c7 20 	add	rdi, 32
 1054012:	49 89 fa 	mov	r10, rdi
 1054015:	4d 29 c2 	sub	r10, r8
 1054018:	4c 29 d3 	sub	rbx, r10
 105401b:	4c 01 d6 	add	rsi, r10
 105401e:	48 8d 0c 1f 	lea	rcx, [rdi + rbx]
 1054022:	48 81 eb 80 00 00 00 	sub	rbx, 128
 1054029:	0f 18 86 c0 01 00 00 	prefetchnta	byte ptr [rsi + 448]
 1054030:	0f 18 86 80 02 00 00 	prefetchnta	byte ptr [rsi + 640]
 1054037:	c5 fe 6f 06 	vmovdqu	ymm0, ymmword ptr [rsi]
 105403b:	c5 fe 6f 4e 20 	vmovdqu	ymm1, ymmword ptr [rsi + 32]
 1054040:	c5 fe 6f 56 40 	vmovdqu	ymm2, ymmword ptr [rsi + 64]
 1054045:	c5 fe 6f 5e 60 	vmovdqu	ymm3, ymmword ptr [rsi + 96]
 105404a:	48 81 c6 80 00 00 00 	add	rsi, 128
 1054051:	c5 fd e7 07 	vmovntdq	ymmword ptr [rdi], ymm0
 1054055:	c5 fd e7 4f 20 	vmovntdq	ymmword ptr [rdi + 32], ymm1
 105405a:	c5 fd e7 57 40 	vmovntdq	ymmword ptr [rdi + 64], ymm2
 105405f:	c5 fd e7 5f 60 	vmovntdq	ymmword ptr [rdi + 96], ymm3
 1054064:	48 81 c7 80 00 00 00 	add	rdi, 128
 105406b:	48 81 eb 80 00 00 00 	sub	rbx, 128
 1054072:	77 b5 	ja	-75 <_runtime.memmove+0x4d9>
 1054074:	0f ae f8 	sfence
 1054077:	c4 c1 7e 7f 20 	vmovdqu	ymmword ptr [r8], ymm4
 105407c:	c5 f8 77 	vzeroupper
 105407f:	f3 0f 7f 69 80 	movdqu	xmmword ptr [rcx - 128], xmm5
 1054084:	f3 0f 7f 71 90 	movdqu	xmmword ptr [rcx - 112], xmm6
 1054089:	f3 0f 7f 79 a0 	movdqu	xmmword ptr [rcx - 96], xmm7
 105408e:	f3 44 0f 7f 41 b0 	movdqu	xmmword ptr [rcx - 80], xmm8
 1054094:	f3 44 0f 7f 49 c0 	movdqu	xmmword ptr [rcx - 64], xmm9
 105409a:	f3 44 0f 7f 51 d0 	movdqu	xmmword ptr [rcx - 48], xmm10
 10540a0:	f3 44 0f 7f 59 e0 	movdqu	xmmword ptr [rcx - 32], xmm11
 10540a6:	f3 44 0f 7f 61 f0 	movdqu	xmmword ptr [rcx - 16], xmm12
 10540ac:	c3 	ret
 10540ad:	48 89 f8 	mov	rax, rdi
 10540b0:	f3 0f 6f 2e 	movdqu	xmm5, xmmword ptr [rsi]
 10540b4:	f3 0f 6f 76 10 	movdqu	xmm6, xmmword ptr [rsi + 16]
 10540b9:	48 01 df 	add	rdi, rbx
 10540bc:	f3 0f 6f 7e 20 	movdqu	xmm7, xmmword ptr [rsi + 32]
 10540c1:	f3 44 0f 6f 46 30 	movdqu	xmm8, xmmword ptr [rsi + 48]
 10540c7:	4c 8d 57 e0 	lea	r10, [rdi - 32]
 10540cb:	49 89 fb 	mov	r11, rdi
 10540ce:	f3 44 0f 6f 4e 40 	movdqu	xmm9, xmmword ptr [rsi + 64]
 10540d4:	f3 44 0f 6f 56 50 	movdqu	xmm10, xmmword ptr [rsi + 80]
 10540da:	49 83 e3 1f 	and	r11, 31
 10540de:	f3 44 0f 6f 5e 60 	movdqu	xmm11, xmmword ptr [rsi + 96]
 10540e4:	f3 44 0f 6f 66 70 	movdqu	xmm12, xmmword ptr [rsi + 112]
 10540ea:	4c 31 df 	xor	rdi, r11
 10540ed:	48 01 de 	add	rsi, rbx
 10540f0:	c5 fe 6f 66 e0 	vmovdqu	ymm4, ymmword ptr [rsi - 32]
 10540f5:	4c 29 de 	sub	rsi, r11
 10540f8:	4c 29 db 	sub	rbx, r11
 10540fb:	48 81 fb 00 00 10 00 	cmp	rbx, 1048576
 1054102:	77 7b 	ja	123 <_runtime.memmove+0x62f>
 1054104:	48 81 eb 80 00 00 00 	sub	rbx, 128
 105410b:	c5 fe 6f 46 e0 	vmovdqu	ymm0, ymmword ptr [rsi - 32]
 1054110:	c5 fe 6f 4e c0 	vmovdqu	ymm1, ymmword ptr [rsi - 64]
 1054115:	c5 fe 6f 56 a0 	vmovdqu	ymm2, ymmword ptr [rsi - 96]
 105411a:	c5 fe 6f 5e 80 	vmovdqu	ymm3, ymmword ptr [rsi - 128]
 105411f:	48 81 ee 80 00 00 00 	sub	rsi, 128
 1054126:	c5 fd 7f 47 e0 	vmovdqa	ymmword ptr [rdi - 32], ymm0
 105412b:	c5 fd 7f 4f c0 	vmovdqa	ymmword ptr [rdi - 64], ymm1
 1054130:	c5 fd 7f 57 a0 	vmovdqa	ymmword ptr [rdi - 96], ymm2
 1054135:	c5 fd 7f 5f 80 	vmovdqa	ymmword ptr [rdi - 128], ymm3
 105413a:	48 81 ef 80 00 00 00 	sub	rdi, 128
 1054141:	48 81 eb 80 00 00 00 	sub	rbx, 128
 1054148:	77 c1 	ja	-63 <_runtime.memmove+0x5bb>
 105414a:	c4 c1 7e 7f 22 	vmovdqu	ymmword ptr [r10], ymm4
 105414f:	c5 f8 77 	vzeroupper
 1054152:	f3 0f 7f 28 	movdqu	xmmword ptr [rax], xmm5
 1054156:	f3 0f 7f 70 10 	movdqu	xmmword ptr [rax + 16], xmm6
 105415b:	f3 0f 7f 78 20 	movdqu	xmmword ptr [rax + 32], xmm7
 1054160:	f3 44 0f 7f 40 30 	movdqu	xmmword ptr [rax + 48], xmm8
 1054166:	f3 44 0f 7f 48 40 	movdqu	xmmword ptr [rax + 64], xmm9
 105416c:	f3 44 0f 7f 50 50 	movdqu	xmmword ptr [rax + 80], xmm10
 1054172:	f3 44 0f 7f 58 60 	movdqu	xmmword ptr [rax + 96], xmm11
 1054178:	f3 44 0f 7f 60 70 	movdqu	xmmword ptr [rax + 112], xmm12
 105417e:	c3 	ret
 105417f:	48 81 eb 80 00 00 00 	sub	rbx, 128
 1054186:	0f 18 86 40 fe ff ff 	prefetchnta	byte ptr [rsi - 448]
 105418d:	0f 18 86 80 fd ff ff 	prefetchnta	byte ptr [rsi - 640]
 1054194:	c5 fe 6f 46 e0 	vmovdqu	ymm0, ymmword ptr [rsi - 32]
 1054199:	c5 fe 6f 4e c0 	vmovdqu	ymm1, ymmword ptr [rsi - 64]
 105419e:	c5 fe 6f 56 a0 	vmovdqu	ymm2, ymmword ptr [rsi - 96]
 10541a3:	c5 fe 6f 5e 80 	vmovdqu	ymm3, ymmword ptr [rsi - 128]
 10541a8:	48 81 ee 80 00 00 00 	sub	rsi, 128
 10541af:	c5 fd e7 47 e0 	vmovntdq	ymmword ptr [rdi - 32], ymm0
 10541b4:	c5 fd e7 4f c0 	vmovntdq	ymmword ptr [rdi - 64], ymm1
 10541b9:	c5 fd e7 57 a0 	vmovntdq	ymmword ptr [rdi - 96], ymm2
 10541be:	c5 fd e7 5f 80 	vmovntdq	ymmword ptr [rdi - 128], ymm3
 10541c3:	48 81 ef 80 00 00 00 	sub	rdi, 128
 10541ca:	48 81 eb 80 00 00 00 	sub	rbx, 128
 10541d1:	77 b3 	ja	-77 <_runtime.memmove+0x636>
 10541d3:	0f ae f8 	sfence
 10541d6:	c4 c1 7e 7f 22 	vmovdqu	ymmword ptr [r10], ymm4
 10541db:	c5 f8 77 	vzeroupper
 10541de:	f3 0f 7f 28 	movdqu	xmmword ptr [rax], xmm5
 10541e2:	f3 0f 7f 70 10 	movdqu	xmmword ptr [rax + 16], xmm6
 10541e7:	f3 0f 7f 78 20 	movdqu	xmmword ptr [rax + 32], xmm7
 10541ec:	f3 44 0f 7f 40 30 	movdqu	xmmword ptr [rax + 48], xmm8
 10541f2:	f3 44 0f 7f 48 40 	movdqu	xmmword ptr [rax + 64], xmm9
 10541f8:	f3 44 0f 7f 50 50 	movdqu	xmmword ptr [rax + 80], xmm10
 10541fe:	f3 44 0f 7f 58 60 	movdqu	xmmword ptr [rax + 96], xmm11
 1054204:	f3 44 0f 7f 60 70 	movdqu	xmmword ptr [rax + 112], xmm12
 105420a:	c3 	ret
 105420b:	cc 	int3
 105420c:	cc 	int3
 105420d:	cc 	int3
 105420e:	cc 	int3
 105420f:	cc 	int3

_runtime.asyncPreempt:
 1054210:	55 	push	rbp
 1054211:	48 89 e5 	mov	rbp, rsp
 1054214:	9c 	pushfq
 1054215:	48 81 ec 70 01 00 00 	sub	rsp, 368
 105421c:	80 3d 5f 3a 0a 00 00 	cmp	byte ptr [rip + 670303], 0
 1054223:	74 03 	je	3 <_runtime.asyncPreempt+0x18>
 1054225:	c5 f8 77 	vzeroupper
 1054228:	48 89 04 24 	mov	qword ptr [rsp], rax
 105422c:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1054231:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1054236:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 105423b:	48 89 74 24 20 	mov	qword ptr [rsp + 32], rsi
 1054240:	48 89 7c 24 28 	mov	qword ptr [rsp + 40], rdi
 1054245:	4c 89 44 24 30 	mov	qword ptr [rsp + 48], r8
 105424a:	4c 89 4c 24 38 	mov	qword ptr [rsp + 56], r9
 105424f:	4c 89 54 24 40 	mov	qword ptr [rsp + 64], r10
 1054254:	4c 89 5c 24 48 	mov	qword ptr [rsp + 72], r11
 1054259:	4c 89 64 24 50 	mov	qword ptr [rsp + 80], r12
 105425e:	4c 89 6c 24 58 	mov	qword ptr [rsp + 88], r13
 1054263:	4c 89 74 24 60 	mov	qword ptr [rsp + 96], r14
 1054268:	4c 89 7c 24 68 	mov	qword ptr [rsp + 104], r15
 105426d:	0f 11 44 24 70 	movups	xmmword ptr [rsp + 112], xmm0
 1054272:	0f 11 8c 24 80 00 00 00 	movups	xmmword ptr [rsp + 128], xmm1
 105427a:	0f 11 94 24 90 00 00 00 	movups	xmmword ptr [rsp + 144], xmm2
 1054282:	0f 11 9c 24 a0 00 00 00 	movups	xmmword ptr [rsp + 160], xmm3
 105428a:	0f 11 a4 24 b0 00 00 00 	movups	xmmword ptr [rsp + 176], xmm4
 1054292:	0f 11 ac 24 c0 00 00 00 	movups	xmmword ptr [rsp + 192], xmm5
 105429a:	0f 11 b4 24 d0 00 00 00 	movups	xmmword ptr [rsp + 208], xmm6
 10542a2:	0f 11 bc 24 e0 00 00 00 	movups	xmmword ptr [rsp + 224], xmm7
 10542aa:	44 0f 11 84 24 f0 00 00 00 	movups	xmmword ptr [rsp + 240], xmm8
 10542b3:	44 0f 11 8c 24 00 01 00 00 	movups	xmmword ptr [rsp + 256], xmm9
 10542bc:	44 0f 11 94 24 10 01 00 00 	movups	xmmword ptr [rsp + 272], xmm10
 10542c5:	44 0f 11 9c 24 20 01 00 00 	movups	xmmword ptr [rsp + 288], xmm11
 10542ce:	44 0f 11 a4 24 30 01 00 00 	movups	xmmword ptr [rsp + 304], xmm12
 10542d7:	44 0f 11 ac 24 40 01 00 00 	movups	xmmword ptr [rsp + 320], xmm13
 10542e0:	44 0f 11 b4 24 50 01 00 00 	movups	xmmword ptr [rsp + 336], xmm14
 10542e9:	44 0f 11 bc 24 60 01 00 00 	movups	xmmword ptr [rsp + 352], xmm15
 10542f2:	e8 49 5b fd ff 	call	-173239 <_runtime.asyncPreempt2>
 10542f7:	44 0f 10 bc 24 60 01 00 00 	movups	xmm15, xmmword ptr [rsp + 352]
 1054300:	44 0f 10 b4 24 50 01 00 00 	movups	xmm14, xmmword ptr [rsp + 336]
 1054309:	44 0f 10 ac 24 40 01 00 00 	movups	xmm13, xmmword ptr [rsp + 320]
 1054312:	44 0f 10 a4 24 30 01 00 00 	movups	xmm12, xmmword ptr [rsp + 304]
 105431b:	44 0f 10 9c 24 20 01 00 00 	movups	xmm11, xmmword ptr [rsp + 288]
 1054324:	44 0f 10 94 24 10 01 00 00 	movups	xmm10, xmmword ptr [rsp + 272]
 105432d:	44 0f 10 8c 24 00 01 00 00 	movups	xmm9, xmmword ptr [rsp + 256]
 1054336:	44 0f 10 84 24 f0 00 00 00 	movups	xmm8, xmmword ptr [rsp + 240]
 105433f:	0f 10 bc 24 e0 00 00 00 	movups	xmm7, xmmword ptr [rsp + 224]
 1054347:	0f 10 b4 24 d0 00 00 00 	movups	xmm6, xmmword ptr [rsp + 208]
 105434f:	0f 10 ac 24 c0 00 00 00 	movups	xmm5, xmmword ptr [rsp + 192]
 1054357:	0f 10 a4 24 b0 00 00 00 	movups	xmm4, xmmword ptr [rsp + 176]
 105435f:	0f 10 9c 24 a0 00 00 00 	movups	xmm3, xmmword ptr [rsp + 160]
 1054367:	0f 10 94 24 90 00 00 00 	movups	xmm2, xmmword ptr [rsp + 144]
 105436f:	0f 10 8c 24 80 00 00 00 	movups	xmm1, xmmword ptr [rsp + 128]
 1054377:	0f 10 44 24 70 	movups	xmm0, xmmword ptr [rsp + 112]
 105437c:	4c 8b 7c 24 68 	mov	r15, qword ptr [rsp + 104]
 1054381:	4c 8b 74 24 60 	mov	r14, qword ptr [rsp + 96]
 1054386:	4c 8b 6c 24 58 	mov	r13, qword ptr [rsp + 88]
 105438b:	4c 8b 64 24 50 	mov	r12, qword ptr [rsp + 80]
 1054390:	4c 8b 5c 24 48 	mov	r11, qword ptr [rsp + 72]
 1054395:	4c 8b 54 24 40 	mov	r10, qword ptr [rsp + 64]
 105439a:	4c 8b 4c 24 38 	mov	r9, qword ptr [rsp + 56]
 105439f:	4c 8b 44 24 30 	mov	r8, qword ptr [rsp + 48]
 10543a4:	48 8b 7c 24 28 	mov	rdi, qword ptr [rsp + 40]
 10543a9:	48 8b 74 24 20 	mov	rsi, qword ptr [rsp + 32]
 10543ae:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 10543b3:	48 8b 54 24 10 	mov	rdx, qword ptr [rsp + 16]
 10543b8:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 10543bd:	48 8b 04 24 	mov	rax, qword ptr [rsp]
 10543c1:	48 81 c4 70 01 00 00 	add	rsp, 368
 10543c8:	9d 	popfq
 10543c9:	5d 	pop	rbp
 10543ca:	c3 	ret
 10543cb:	cc 	int3
 10543cc:	cc 	int3
 10543cd:	cc 	int3
 10543ce:	cc 	int3
 10543cf:	cc 	int3

__rt0_amd64_darwin:
 10543d0:	e9 5b c4 ff ff 	jmp	-15269 <__rt0_amd64>
 10543d5:	cc 	int3
 10543d6:	cc 	int3
 10543d7:	cc 	int3
 10543d8:	cc 	int3
 10543d9:	cc 	int3
 10543da:	cc 	int3
 10543db:	cc 	int3
 10543dc:	cc 	int3
 10543dd:	cc 	int3
 10543de:	cc 	int3
 10543df:	cc 	int3

_runtime.exit_trampoline:
 10543e0:	55 	push	rbp
 10543e1:	48 89 e5 	mov	rbp, rsp
 10543e4:	8b 3f 	mov	edi, dword ptr [rdi]
 10543e6:	e8 15 14 03 00 	call	201749 <_write+0x1085800>
 10543eb:	c7 04 25 f1 00 00 00 f1 00 00 00 	mov	dword ptr [241], 241
 10543f6:	5d 	pop	rbp
 10543f7:	c3 	ret
 10543f8:	cc 	int3
 10543f9:	cc 	int3
 10543fa:	cc 	int3
 10543fb:	cc 	int3
 10543fc:	cc 	int3
 10543fd:	cc 	int3
 10543fe:	cc 	int3
 10543ff:	cc 	int3

_runtime.open_trampoline:
 1054400:	55 	push	rbp
 1054401:	48 89 e5 	mov	rbp, rsp
 1054404:	8b 77 08 	mov	esi, dword ptr [rdi + 8]
 1054407:	8b 57 0c 	mov	edx, dword ptr [rdi + 12]
 105440a:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105440d:	31 c0 	xor	eax, eax
 105440f:	e8 f2 13 03 00 	call	201714 <_write+0x1085806>
 1054414:	5d 	pop	rbp
 1054415:	c3 	ret
 1054416:	cc 	int3
 1054417:	cc 	int3
 1054418:	cc 	int3
 1054419:	cc 	int3
 105441a:	cc 	int3
 105441b:	cc 	int3
 105441c:	cc 	int3
 105441d:	cc 	int3
 105441e:	cc 	int3
 105441f:	cc 	int3

_runtime.close_trampoline:
 1054420:	55 	push	rbp
 1054421:	48 89 e5 	mov	rbp, rsp
 1054424:	8b 3f 	mov	edi, dword ptr [rdi]
 1054426:	e8 e1 13 03 00 	call	201697 <_write+0x108580c>
 105442b:	5d 	pop	rbp
 105442c:	c3 	ret
 105442d:	cc 	int3
 105442e:	cc 	int3
 105442f:	cc 	int3

_runtime.read_trampoline:
 1054430:	55 	push	rbp
 1054431:	48 89 e5 	mov	rbp, rsp
 1054434:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054438:	8b 57 10 	mov	edx, dword ptr [rdi + 16]
 105443b:	8b 3f 	mov	edi, dword ptr [rdi]
 105443d:	e8 d0 13 03 00 	call	201680 <_write+0x1085812>
 1054442:	85 c0 	test	eax, eax
 1054444:	7d 09 	jge	9 <_runtime.read_trampoline+0x1f>
 1054446:	e8 cd 13 03 00 	call	201677 <_write+0x1085818>
 105444b:	8b 00 	mov	eax, dword ptr [rax]
 105444d:	f7 d8 	neg	eax
 105444f:	5d 	pop	rbp
 1054450:	c3 	ret
 1054451:	cc 	int3
 1054452:	cc 	int3
 1054453:	cc 	int3
 1054454:	cc 	int3
 1054455:	cc 	int3
 1054456:	cc 	int3
 1054457:	cc 	int3
 1054458:	cc 	int3
 1054459:	cc 	int3
 105445a:	cc 	int3
 105445b:	cc 	int3
 105445c:	cc 	int3
 105445d:	cc 	int3
 105445e:	cc 	int3
 105445f:	cc 	int3

_runtime.write_trampoline:
 1054460:	55 	push	rbp
 1054461:	48 89 e5 	mov	rbp, rsp
 1054464:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054468:	8b 57 10 	mov	edx, dword ptr [rdi + 16]
 105446b:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105446e:	e8 ab 13 03 00 	call	201643 <_write+0x108581e>
 1054473:	85 c0 	test	eax, eax
 1054475:	7d 09 	jge	9 <_runtime.write_trampoline+0x20>
 1054477:	e8 9c 13 03 00 	call	201628 <_write+0x1085818>
 105447c:	8b 00 	mov	eax, dword ptr [rax]
 105447e:	f7 d8 	neg	eax
 1054480:	5d 	pop	rbp
 1054481:	c3 	ret
 1054482:	cc 	int3
 1054483:	cc 	int3
 1054484:	cc 	int3
 1054485:	cc 	int3
 1054486:	cc 	int3
 1054487:	cc 	int3
 1054488:	cc 	int3
 1054489:	cc 	int3
 105448a:	cc 	int3
 105448b:	cc 	int3
 105448c:	cc 	int3
 105448d:	cc 	int3
 105448e:	cc 	int3
 105448f:	cc 	int3

_runtime.pipe_trampoline:
 1054490:	55 	push	rbp
 1054491:	48 89 e5 	mov	rbp, rsp
 1054494:	e8 8b 13 03 00 	call	201611 <_write+0x1085824>
 1054499:	85 c0 	test	eax, eax
 105449b:	74 07 	je	7 <_runtime.pipe_trampoline+0x14>
 105449d:	e8 76 13 03 00 	call	201590 <_write+0x1085818>
 10544a2:	f7 d8 	neg	eax
 10544a4:	5d 	pop	rbp
 10544a5:	c3 	ret
 10544a6:	cc 	int3
 10544a7:	cc 	int3
 10544a8:	cc 	int3
 10544a9:	cc 	int3
 10544aa:	cc 	int3
 10544ab:	cc 	int3
 10544ac:	cc 	int3
 10544ad:	cc 	int3
 10544ae:	cc 	int3
 10544af:	cc 	int3

_runtime.setitimer_trampoline:
 10544b0:	55 	push	rbp
 10544b1:	48 89 e5 	mov	rbp, rsp
 10544b4:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10544b8:	48 8b 57 10 	mov	rdx, qword ptr [rdi + 16]
 10544bc:	8b 3f 	mov	edi, dword ptr [rdi]
 10544be:	e8 67 13 03 00 	call	201575 <_write+0x108582a>
 10544c3:	5d 	pop	rbp
 10544c4:	c3 	ret
 10544c5:	cc 	int3
 10544c6:	cc 	int3
 10544c7:	cc 	int3
 10544c8:	cc 	int3
 10544c9:	cc 	int3
 10544ca:	cc 	int3
 10544cb:	cc 	int3
 10544cc:	cc 	int3
 10544cd:	cc 	int3
 10544ce:	cc 	int3
 10544cf:	cc 	int3

_runtime.madvise_trampoline:
 10544d0:	55 	push	rbp
 10544d1:	48 89 e5 	mov	rbp, rsp
 10544d4:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10544d8:	8b 57 10 	mov	edx, dword ptr [rdi + 16]
 10544db:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10544de:	e8 4d 13 03 00 	call	201549 <_write+0x1085830>
 10544e3:	5d 	pop	rbp
 10544e4:	c3 	ret
 10544e5:	cc 	int3
 10544e6:	cc 	int3
 10544e7:	cc 	int3
 10544e8:	cc 	int3
 10544e9:	cc 	int3
 10544ea:	cc 	int3
 10544eb:	cc 	int3
 10544ec:	cc 	int3
 10544ed:	cc 	int3
 10544ee:	cc 	int3
 10544ef:	cc 	int3

_runtime.nanotime_trampoline:
 10544f0:	55 	push	rbp
 10544f1:	48 89 e5 	mov	rbp, rsp
 10544f4:	48 89 fb 	mov	rbx, rdi
 10544f7:	e8 3a 13 03 00 	call	201530 <_write+0x1085836>
 10544fc:	48 89 03 	mov	qword ptr [rbx], rax
 10544ff:	8b 35 eb 33 0a 00 	mov	esi, dword ptr [rip + 668651]
 1054505:	8b 3d e9 33 0a 00 	mov	edi, dword ptr [rip + 668649]
 105450b:	85 ff 	test	edi, edi
 105450d:	75 25 	jne	37 <_runtime.nanotime_trampoline+0x44>
 105450f:	48 83 ec 10 	sub	rsp, 16
 1054513:	48 89 e7 	mov	rdi, rsp
 1054516:	e8 21 13 03 00 	call	201505 <_write+0x108583c>
 105451b:	8b 34 24 	mov	esi, dword ptr [rsp]
 105451e:	8b 7c 24 04 	mov	edi, dword ptr [rsp + 4]
 1054522:	48 83 c4 10 	add	rsp, 16
 1054526:	89 35 c4 33 0a 00 	mov	dword ptr [rip + 668612], esi
 105452c:	89 f8 	mov	eax, edi
 105452e:	87 05 c0 33 0a 00 	xchg	dword ptr [rip + 668608], eax
 1054534:	89 73 08 	mov	dword ptr [rbx + 8], esi
 1054537:	89 7b 0c 	mov	dword ptr [rbx + 12], edi
 105453a:	48 89 ec 	mov	rsp, rbp
 105453d:	5d 	pop	rbp
 105453e:	c3 	ret
 105453f:	cc 	int3

_runtime.walltime_trampoline:
 1054540:	55 	push	rbp
 1054541:	48 89 e5 	mov	rbp, rsp
 1054544:	31 f6 	xor	esi, esi
 1054546:	e8 f7 12 03 00 	call	201463 <_write+0x1085842>
 105454b:	5d 	pop	rbp
 105454c:	c3 	ret
 105454d:	cc 	int3
 105454e:	cc 	int3
 105454f:	cc 	int3

_runtime.sigaction_trampoline:
 1054550:	55 	push	rbp
 1054551:	48 89 e5 	mov	rbp, rsp
 1054554:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054558:	48 8b 57 10 	mov	rdx, qword ptr [rdi + 16]
 105455c:	8b 3f 	mov	edi, dword ptr [rdi]
 105455e:	e8 e5 12 03 00 	call	201445 <_write+0x1085848>
 1054563:	85 c0 	test	eax, eax
 1054565:	74 0b 	je	11 <_runtime.sigaction_trampoline+0x22>
 1054567:	c7 04 25 f1 00 00 00 f1 00 00 00 	mov	dword ptr [241], 241
 1054572:	5d 	pop	rbp
 1054573:	c3 	ret
 1054574:	cc 	int3
 1054575:	cc 	int3
 1054576:	cc 	int3
 1054577:	cc 	int3
 1054578:	cc 	int3
 1054579:	cc 	int3
 105457a:	cc 	int3
 105457b:	cc 	int3
 105457c:	cc 	int3
 105457d:	cc 	int3
 105457e:	cc 	int3
 105457f:	cc 	int3

_runtime.sigprocmask_trampoline:
 1054580:	55 	push	rbp
 1054581:	48 89 e5 	mov	rbp, rsp
 1054584:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054588:	48 8b 57 10 	mov	rdx, qword ptr [rdi + 16]
 105458c:	8b 3f 	mov	edi, dword ptr [rdi]
 105458e:	e8 bb 12 03 00 	call	201403 <_write+0x108584e>
 1054593:	85 c0 	test	eax, eax
 1054595:	74 0b 	je	11 <_runtime.sigprocmask_trampoline+0x22>
 1054597:	c7 04 25 f1 00 00 00 f1 00 00 00 	mov	dword ptr [241], 241
 10545a2:	5d 	pop	rbp
 10545a3:	c3 	ret
 10545a4:	cc 	int3
 10545a5:	cc 	int3
 10545a6:	cc 	int3
 10545a7:	cc 	int3
 10545a8:	cc 	int3
 10545a9:	cc 	int3
 10545aa:	cc 	int3
 10545ab:	cc 	int3
 10545ac:	cc 	int3
 10545ad:	cc 	int3
 10545ae:	cc 	int3
 10545af:	cc 	int3

_runtime.sigaltstack_trampoline:
 10545b0:	55 	push	rbp
 10545b1:	48 89 e5 	mov	rbp, rsp
 10545b4:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10545b8:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10545bb:	e8 94 12 03 00 	call	201364 <_write+0x1085854>
 10545c0:	48 85 c0 	test	rax, rax
 10545c3:	74 0b 	je	11 <_runtime.sigaltstack_trampoline+0x20>
 10545c5:	c7 04 25 f1 00 00 00 f1 00 00 00 	mov	dword ptr [241], 241
 10545d0:	5d 	pop	rbp
 10545d1:	c3 	ret
 10545d2:	cc 	int3
 10545d3:	cc 	int3
 10545d4:	cc 	int3
 10545d5:	cc 	int3
 10545d6:	cc 	int3
 10545d7:	cc 	int3
 10545d8:	cc 	int3
 10545d9:	cc 	int3
 10545da:	cc 	int3
 10545db:	cc 	int3
 10545dc:	cc 	int3
 10545dd:	cc 	int3
 10545de:	cc 	int3
 10545df:	cc 	int3

_runtime.raiseproc_trampoline:
 10545e0:	55 	push	rbp
 10545e1:	48 89 e5 	mov	rbp, rsp
 10545e4:	8b 1f 	mov	ebx, dword ptr [rdi]
 10545e6:	e8 6f 12 03 00 	call	201327 <_write+0x108585a>
 10545eb:	89 c7 	mov	edi, eax
 10545ed:	89 de 	mov	esi, ebx
 10545ef:	e8 6c 12 03 00 	call	201324 <_write+0x1085860>
 10545f4:	5d 	pop	rbp
 10545f5:	c3 	ret
 10545f6:	cc 	int3
 10545f7:	cc 	int3
 10545f8:	cc 	int3
 10545f9:	cc 	int3
 10545fa:	cc 	int3
 10545fb:	cc 	int3
 10545fc:	cc 	int3
 10545fd:	cc 	int3
 10545fe:	cc 	int3
 10545ff:	cc 	int3

_runtime.sigfwd:
 1054600:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1054605:	8b 7c 24 10 	mov	edi, dword ptr [rsp + 16]
 1054609:	48 8b 74 24 18 	mov	rsi, qword ptr [rsp + 24]
 105460e:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 1054613:	55 	push	rbp
 1054614:	48 89 e5 	mov	rbp, rsp
 1054617:	48 83 e4 f0 	and	rsp, -16
 105461b:	ff d0 	call	rax
 105461d:	48 89 ec 	mov	rsp, rbp
 1054620:	5d 	pop	rbp
 1054621:	c3 	ret
 1054622:	cc 	int3
 1054623:	cc 	int3
 1054624:	cc 	int3
 1054625:	cc 	int3
 1054626:	cc 	int3
 1054627:	cc 	int3
 1054628:	cc 	int3
 1054629:	cc 	int3
 105462a:	cc 	int3
 105462b:	cc 	int3
 105462c:	cc 	int3
 105462d:	cc 	int3
 105462e:	cc 	int3
 105462f:	cc 	int3

_runtime.sigtramp:
 1054630:	55 	push	rbp
 1054631:	48 89 e5 	mov	rbp, rsp
 1054634:	48 83 ec 40 	sub	rsp, 64
 1054638:	48 89 5c 24 18 	mov	qword ptr [rsp + 24], rbx
 105463d:	4c 89 64 24 20 	mov	qword ptr [rsp + 32], r12
 1054642:	4c 89 6c 24 28 	mov	qword ptr [rsp + 40], r13
 1054647:	4c 89 74 24 30 	mov	qword ptr [rsp + 48], r14
 105464c:	4c 89 7c 24 38 	mov	qword ptr [rsp + 56], r15
 1054651:	89 3c 24 	mov	dword ptr [rsp], edi
 1054654:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1054659:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 105465e:	e8 3d 68 fe ff 	call	-104387 <_runtime.sigtrampgo>
 1054663:	48 8b 5c 24 18 	mov	rbx, qword ptr [rsp + 24]
 1054668:	4c 8b 64 24 20 	mov	r12, qword ptr [rsp + 32]
 105466d:	4c 8b 6c 24 28 	mov	r13, qword ptr [rsp + 40]
 1054672:	4c 8b 74 24 30 	mov	r14, qword ptr [rsp + 48]
 1054677:	4c 8b 7c 24 38 	mov	r15, qword ptr [rsp + 56]
 105467c:	48 89 ec 	mov	rsp, rbp
 105467f:	5d 	pop	rbp
 1054680:	c3 	ret
 1054681:	cc 	int3
 1054682:	cc 	int3
 1054683:	cc 	int3
 1054684:	cc 	int3
 1054685:	cc 	int3
 1054686:	cc 	int3
 1054687:	cc 	int3
 1054688:	cc 	int3
 1054689:	cc 	int3
 105468a:	cc 	int3
 105468b:	cc 	int3
 105468c:	cc 	int3
 105468d:	cc 	int3
 105468e:	cc 	int3
 105468f:	cc 	int3

_runtime.cgoSigtramp:
 1054690:	48 8b 05 91 9b 07 00 	mov	rax, qword ptr [rip + 498577]
 1054697:	48 85 c0 	test	rax, rax
 105469a:	74 6f 	je	111 <_runtime.cgoSigtramp+0x7b>
 105469c:	48 8b 05 1d 9b 07 00 	mov	rax, qword ptr [rip + 498461]
 10546a3:	48 85 c0 	test	rax, rax
 10546a6:	74 63 	je	99 <_runtime.cgoSigtramp+0x7b>
 10546a8:	65 48 8b 04 25 30 00 00 00 	mov	rax, qword ptr gs:[48]
 10546b1:	48 85 c0 	test	rax, rax
 10546b4:	74 5a 	je	90 <_runtime.cgoSigtramp+0x80>
 10546b6:	48 8b 40 30 	mov	rax, qword ptr [rax + 48]
 10546ba:	48 85 c0 	test	rax, rax
 10546bd:	74 4c 	je	76 <_runtime.cgoSigtramp+0x7b>
 10546bf:	8b 88 38 01 00 00 	mov	ecx, dword ptr [rax + 312]
 10546c5:	85 c9 	test	ecx, ecx
 10546c7:	74 42 	je	66 <_runtime.cgoSigtramp+0x7b>
 10546c9:	48 8b 88 c0 00 00 00 	mov	rcx, qword ptr [rax + 192]
 10546d0:	48 85 c9 	test	rcx, rcx
 10546d3:	74 36 	je	54 <_runtime.cgoSigtramp+0x7b>
 10546d5:	48 8b 49 70 	mov	rcx, qword ptr [rcx + 112]
 10546d9:	48 85 c9 	test	rcx, rcx
 10546dc:	74 2d 	je	45 <_runtime.cgoSigtramp+0x7b>
 10546de:	4c 8b 80 40 01 00 00 	mov	r8, qword ptr [rax + 320]
 10546e5:	4d 85 c0 	test	r8, r8
 10546e8:	74 21 	je	33 <_runtime.cgoSigtramp+0x7b>
 10546ea:	8b 88 3c 01 00 00 	mov	ecx, dword ptr [rax + 316]
 10546f0:	85 c9 	test	ecx, ecx
 10546f2:	75 17 	jne	23 <_runtime.cgoSigtramp+0x7b>
 10546f4:	48 8b 0d 2d 9b 07 00 	mov	rcx, qword ptr [rip + 498477]
 10546fb:	4c 8d 0d 2e ff ff ff 	lea	r9, [rip - 210]
 1054702:	48 8b 05 b7 9a 07 00 	mov	rax, qword ptr [rip + 498359]
 1054709:	ff e0 	jmp	rax
 105470b:	e9 20 ff ff ff 	jmp	-224 <_runtime.sigtramp>
 1054710:	83 ff 1b 	cmp	edi, 27
 1054713:	75 f6 	jne	-10 <_runtime.cgoSigtramp+0x7b>
 1054715:	b8 00 00 00 00 	mov	eax, 0
 105471a:	b9 01 00 00 00 	mov	ecx, 1
 105471f:	4c 8d 1d a2 30 0a 00 	lea	r11, [rip + 667810]
 1054726:	f0 	lock
 1054727:	41 0f b1 0b 	cmpxchg	dword ptr [r11], ecx
 105472b:	75 de 	jne	-34 <_runtime.cgoSigtramp+0x7b>
 105472d:	48 8b 0d f4 9a 07 00 	mov	rcx, qword ptr [rip + 498420]
 1054734:	4c 8d 05 e5 37 0a 00 	lea	r8, [rip + 669669]
 105473b:	4c 8d 0d 1e fc fd ff 	lea	r9, [rip - 132066]
 1054742:	48 8b 05 77 9a 07 00 	mov	rax, qword ptr [rip + 498295]
 1054749:	ff e0 	jmp	rax
 105474b:	cc 	int3
 105474c:	cc 	int3
 105474d:	cc 	int3
 105474e:	cc 	int3
 105474f:	cc 	int3

_runtime.mmap_trampoline:
 1054750:	55 	push	rbp
 1054751:	48 89 e5 	mov	rbp, rsp
 1054754:	48 89 fb 	mov	rbx, rdi
 1054757:	48 8b 3b 	mov	rdi, qword ptr [rbx]
 105475a:	48 8b 73 08 	mov	rsi, qword ptr [rbx + 8]
 105475e:	8b 53 10 	mov	edx, dword ptr [rbx + 16]
 1054761:	8b 4b 14 	mov	ecx, dword ptr [rbx + 20]
 1054764:	44 8b 43 18 	mov	r8d, dword ptr [rbx + 24]
 1054768:	44 8b 4b 1c 	mov	r9d, dword ptr [rbx + 28]
 105476c:	e8 f5 10 03 00 	call	200949 <_write+0x1085866>
 1054771:	31 d2 	xor	edx, edx
 1054773:	48 83 f8 ff 	cmp	rax, -1
 1054777:	75 0a 	jne	10 <_runtime.mmap_trampoline+0x33>
 1054779:	e8 9a 10 03 00 	call	200858 <_write+0x1085818>
 105477e:	48 63 10 	movsxd	rdx, dword ptr [rax]
 1054781:	31 c0 	xor	eax, eax
 1054783:	48 89 43 20 	mov	qword ptr [rbx + 32], rax
 1054787:	48 89 53 28 	mov	qword ptr [rbx + 40], rdx
 105478b:	5d 	pop	rbp
 105478c:	c3 	ret
 105478d:	cc 	int3
 105478e:	cc 	int3
 105478f:	cc 	int3

_runtime.munmap_trampoline:
 1054790:	55 	push	rbp
 1054791:	48 89 e5 	mov	rbp, rsp
 1054794:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054798:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105479b:	e8 cc 10 03 00 	call	200908 <_write+0x108586c>
 10547a0:	48 85 c0 	test	rax, rax
 10547a3:	74 0b 	je	11 <_runtime.munmap_trampoline+0x20>
 10547a5:	c7 04 25 f1 00 00 00 f1 00 00 00 	mov	dword ptr [241], 241
 10547b0:	5d 	pop	rbp
 10547b1:	c3 	ret
 10547b2:	cc 	int3
 10547b3:	cc 	int3
 10547b4:	cc 	int3
 10547b5:	cc 	int3
 10547b6:	cc 	int3
 10547b7:	cc 	int3
 10547b8:	cc 	int3
 10547b9:	cc 	int3
 10547ba:	cc 	int3
 10547bb:	cc 	int3
 10547bc:	cc 	int3
 10547bd:	cc 	int3
 10547be:	cc 	int3
 10547bf:	cc 	int3

_runtime.usleep_trampoline:
 10547c0:	55 	push	rbp
 10547c1:	48 89 e5 	mov	rbp, rsp
 10547c4:	8b 3f 	mov	edi, dword ptr [rdi]
 10547c6:	e8 a7 10 03 00 	call	200871 <_write+0x1085872>
 10547cb:	5d 	pop	rbp
 10547cc:	c3 	ret
 10547cd:	cc 	int3
 10547ce:	cc 	int3
 10547cf:	cc 	int3

_runtime.settls:
 10547d0:	48 83 ec 28 	sub	rsp, 40
 10547d4:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10547d9:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10547de:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10547e3:	48 83 c4 28 	add	rsp, 40
 10547e7:	c3 	ret
 10547e8:	cc 	int3
 10547e9:	cc 	int3
 10547ea:	cc 	int3
 10547eb:	cc 	int3
 10547ec:	cc 	int3
 10547ed:	cc 	int3
 10547ee:	cc 	int3
 10547ef:	cc 	int3

_runtime.sysctl_trampoline:
 10547f0:	55 	push	rbp
 10547f1:	48 89 e5 	mov	rbp, rsp
 10547f4:	8b 77 08 	mov	esi, dword ptr [rdi + 8]
 10547f7:	48 8b 57 10 	mov	rdx, qword ptr [rdi + 16]
 10547fb:	48 8b 4f 18 	mov	rcx, qword ptr [rdi + 24]
 10547ff:	4c 8b 47 20 	mov	r8, qword ptr [rdi + 32]
 1054803:	4c 8b 4f 28 	mov	r9, qword ptr [rdi + 40]
 1054807:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105480a:	e8 69 10 03 00 	call	200809 <_write+0x1085878>
 105480f:	5d 	pop	rbp
 1054810:	c3 	ret
 1054811:	cc 	int3
 1054812:	cc 	int3
 1054813:	cc 	int3
 1054814:	cc 	int3
 1054815:	cc 	int3
 1054816:	cc 	int3
 1054817:	cc 	int3
 1054818:	cc 	int3
 1054819:	cc 	int3
 105481a:	cc 	int3
 105481b:	cc 	int3
 105481c:	cc 	int3
 105481d:	cc 	int3
 105481e:	cc 	int3
 105481f:	cc 	int3

_runtime.kqueue_trampoline:
 1054820:	55 	push	rbp
 1054821:	48 89 e5 	mov	rbp, rsp
 1054824:	e8 55 10 03 00 	call	200789 <_write+0x108587e>
 1054829:	5d 	pop	rbp
 105482a:	c3 	ret
 105482b:	cc 	int3
 105482c:	cc 	int3
 105482d:	cc 	int3
 105482e:	cc 	int3
 105482f:	cc 	int3

_runtime.kevent_trampoline:
 1054830:	55 	push	rbp
 1054831:	48 89 e5 	mov	rbp, rsp
 1054834:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054838:	8b 57 10 	mov	edx, dword ptr [rdi + 16]
 105483b:	48 8b 4f 18 	mov	rcx, qword ptr [rdi + 24]
 105483f:	44 8b 47 20 	mov	r8d, dword ptr [rdi + 32]
 1054843:	4c 8b 4f 28 	mov	r9, qword ptr [rdi + 40]
 1054847:	8b 3f 	mov	edi, dword ptr [rdi]
 1054849:	e8 36 10 03 00 	call	200758 <_write+0x1085884>
 105484e:	83 f8 ff 	cmp	eax, -1
 1054851:	75 0b 	jne	11 <_runtime.kevent_trampoline+0x2e>
 1054853:	e8 c0 0f 03 00 	call	200640 <_write+0x1085818>
 1054858:	48 63 00 	movsxd	rax, dword ptr [rax]
 105485b:	48 f7 d8 	neg	rax
 105485e:	5d 	pop	rbp
 105485f:	c3 	ret

_runtime.fcntl_trampoline:
 1054860:	55 	push	rbp
 1054861:	48 89 e5 	mov	rbp, rsp
 1054864:	8b 77 04 	mov	esi, dword ptr [rdi + 4]
 1054867:	8b 57 08 	mov	edx, dword ptr [rdi + 8]
 105486a:	8b 3f 	mov	edi, dword ptr [rdi]
 105486c:	31 c0 	xor	eax, eax
 105486e:	e8 17 10 03 00 	call	200727 <_write+0x108588a>
 1054873:	5d 	pop	rbp
 1054874:	c3 	ret
 1054875:	cc 	int3
 1054876:	cc 	int3
 1054877:	cc 	int3
 1054878:	cc 	int3
 1054879:	cc 	int3
 105487a:	cc 	int3
 105487b:	cc 	int3
 105487c:	cc 	int3
 105487d:	cc 	int3
 105487e:	cc 	int3
 105487f:	cc 	int3

_runtime.mstart_stub:
 1054880:	48 83 ec 28 	sub	rsp, 40
 1054884:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1054888:	4c 89 64 24 08 	mov	qword ptr [rsp + 8], r12
 105488d:	4c 89 6c 24 10 	mov	qword ptr [rsp + 16], r13
 1054892:	4c 89 74 24 18 	mov	qword ptr [rsp + 24], r14
 1054897:	4c 89 7c 24 20 	mov	qword ptr [rsp + 32], r15
 105489c:	48 8b 17 	mov	rdx, qword ptr [rdi]
 105489f:	65 48 89 14 25 30 00 00 00 	mov	qword ptr gs:[48], rdx
 10548a8:	fc 	cld
 10548a9:	e8 22 92 fd ff 	call	-159198 <_runtime.mstart>
 10548ae:	48 8b 1c 24 	mov	rbx, qword ptr [rsp]
 10548b2:	4c 8b 64 24 08 	mov	r12, qword ptr [rsp + 8]
 10548b7:	4c 8b 6c 24 10 	mov	r13, qword ptr [rsp + 16]
 10548bc:	4c 8b 74 24 18 	mov	r14, qword ptr [rsp + 24]
 10548c1:	4c 8b 7c 24 20 	mov	r15, qword ptr [rsp + 32]
 10548c6:	31 c0 	xor	eax, eax
 10548c8:	48 83 c4 28 	add	rsp, 40
 10548cc:	c3 	ret
 10548cd:	cc 	int3
 10548ce:	cc 	int3
 10548cf:	cc 	int3

_runtime.pthread_attr_init_trampoline:
 10548d0:	55 	push	rbp
 10548d1:	48 89 e5 	mov	rbp, rsp
 10548d4:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10548d7:	e8 b4 0f 03 00 	call	200628 <_write+0x1085890>
 10548dc:	5d 	pop	rbp
 10548dd:	c3 	ret
 10548de:	cc 	int3
 10548df:	cc 	int3

_runtime.pthread_attr_getstacksize_trampoline:
 10548e0:	55 	push	rbp
 10548e1:	48 89 e5 	mov	rbp, rsp
 10548e4:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10548e8:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10548eb:	e8 a6 0f 03 00 	call	200614 <_write+0x1085896>
 10548f0:	5d 	pop	rbp
 10548f1:	c3 	ret
 10548f2:	cc 	int3
 10548f3:	cc 	int3
 10548f4:	cc 	int3
 10548f5:	cc 	int3
 10548f6:	cc 	int3
 10548f7:	cc 	int3
 10548f8:	cc 	int3
 10548f9:	cc 	int3
 10548fa:	cc 	int3
 10548fb:	cc 	int3
 10548fc:	cc 	int3
 10548fd:	cc 	int3
 10548fe:	cc 	int3
 10548ff:	cc 	int3

_runtime.pthread_attr_setdetachstate_trampoline:
 1054900:	55 	push	rbp
 1054901:	48 89 e5 	mov	rbp, rsp
 1054904:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054908:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105490b:	e8 8c 0f 03 00 	call	200588 <_write+0x108589c>
 1054910:	5d 	pop	rbp
 1054911:	c3 	ret
 1054912:	cc 	int3
 1054913:	cc 	int3
 1054914:	cc 	int3
 1054915:	cc 	int3
 1054916:	cc 	int3
 1054917:	cc 	int3
 1054918:	cc 	int3
 1054919:	cc 	int3
 105491a:	cc 	int3
 105491b:	cc 	int3
 105491c:	cc 	int3
 105491d:	cc 	int3
 105491e:	cc 	int3
 105491f:	cc 	int3

_runtime.pthread_create_trampoline:
 1054920:	55 	push	rbp
 1054921:	48 89 e5 	mov	rbp, rsp
 1054924:	48 83 ec 10 	sub	rsp, 16
 1054928:	48 8b 37 	mov	rsi, qword ptr [rdi]
 105492b:	48 8b 57 08 	mov	rdx, qword ptr [rdi + 8]
 105492f:	48 8b 4f 10 	mov	rcx, qword ptr [rdi + 16]
 1054933:	48 89 e7 	mov	rdi, rsp
 1054936:	e8 67 0f 03 00 	call	200551 <_write+0x10858a2>
 105493b:	48 89 ec 	mov	rsp, rbp
 105493e:	5d 	pop	rbp
 105493f:	c3 	ret

_runtime.raise_trampoline:
 1054940:	55 	push	rbp
 1054941:	48 89 e5 	mov	rbp, rsp
 1054944:	8b 3f 	mov	edi, dword ptr [rdi]
 1054946:	e8 5d 0f 03 00 	call	200541 <_write+0x10858a8>
 105494b:	5d 	pop	rbp
 105494c:	c3 	ret
 105494d:	cc 	int3
 105494e:	cc 	int3
 105494f:	cc 	int3

_runtime.pthread_mutex_init_trampoline:
 1054950:	55 	push	rbp
 1054951:	48 89 e5 	mov	rbp, rsp
 1054954:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054958:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105495b:	e8 4e 0f 03 00 	call	200526 <_write+0x10858ae>
 1054960:	5d 	pop	rbp
 1054961:	c3 	ret
 1054962:	cc 	int3
 1054963:	cc 	int3
 1054964:	cc 	int3
 1054965:	cc 	int3
 1054966:	cc 	int3
 1054967:	cc 	int3
 1054968:	cc 	int3
 1054969:	cc 	int3
 105496a:	cc 	int3
 105496b:	cc 	int3
 105496c:	cc 	int3
 105496d:	cc 	int3
 105496e:	cc 	int3
 105496f:	cc 	int3

_runtime.pthread_mutex_lock_trampoline:
 1054970:	55 	push	rbp
 1054971:	48 89 e5 	mov	rbp, rsp
 1054974:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1054977:	e8 38 0f 03 00 	call	200504 <_write+0x10858b4>
 105497c:	5d 	pop	rbp
 105497d:	c3 	ret
 105497e:	cc 	int3
 105497f:	cc 	int3

_runtime.pthread_mutex_unlock_trampoline:
 1054980:	55 	push	rbp
 1054981:	48 89 e5 	mov	rbp, rsp
 1054984:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1054987:	e8 2e 0f 03 00 	call	200494 <_write+0x10858ba>
 105498c:	5d 	pop	rbp
 105498d:	c3 	ret
 105498e:	cc 	int3
 105498f:	cc 	int3

_runtime.pthread_cond_init_trampoline:
 1054990:	55 	push	rbp
 1054991:	48 89 e5 	mov	rbp, rsp
 1054994:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054998:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 105499b:	e8 20 0f 03 00 	call	200480 <_write+0x10858c0>
 10549a0:	5d 	pop	rbp
 10549a1:	c3 	ret
 10549a2:	cc 	int3
 10549a3:	cc 	int3
 10549a4:	cc 	int3
 10549a5:	cc 	int3
 10549a6:	cc 	int3
 10549a7:	cc 	int3
 10549a8:	cc 	int3
 10549a9:	cc 	int3
 10549aa:	cc 	int3
 10549ab:	cc 	int3
 10549ac:	cc 	int3
 10549ad:	cc 	int3
 10549ae:	cc 	int3
 10549af:	cc 	int3

_runtime.pthread_cond_wait_trampoline:
 10549b0:	55 	push	rbp
 10549b1:	48 89 e5 	mov	rbp, rsp
 10549b4:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10549b8:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10549bb:	e8 06 0f 03 00 	call	200454 <_write+0x10858c6>
 10549c0:	5d 	pop	rbp
 10549c1:	c3 	ret
 10549c2:	cc 	int3
 10549c3:	cc 	int3
 10549c4:	cc 	int3
 10549c5:	cc 	int3
 10549c6:	cc 	int3
 10549c7:	cc 	int3
 10549c8:	cc 	int3
 10549c9:	cc 	int3
 10549ca:	cc 	int3
 10549cb:	cc 	int3
 10549cc:	cc 	int3
 10549cd:	cc 	int3
 10549ce:	cc 	int3
 10549cf:	cc 	int3

_runtime.pthread_cond_timedwait_relative_np_trampoline:
 10549d0:	55 	push	rbp
 10549d1:	48 89 e5 	mov	rbp, rsp
 10549d4:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 10549d8:	48 8b 57 10 	mov	rdx, qword ptr [rdi + 16]
 10549dc:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10549df:	e8 e8 0e 03 00 	call	200424 <_write+0x10858cc>
 10549e4:	5d 	pop	rbp
 10549e5:	c3 	ret
 10549e6:	cc 	int3
 10549e7:	cc 	int3
 10549e8:	cc 	int3
 10549e9:	cc 	int3
 10549ea:	cc 	int3
 10549eb:	cc 	int3
 10549ec:	cc 	int3
 10549ed:	cc 	int3
 10549ee:	cc 	int3
 10549ef:	cc 	int3

_runtime.pthread_cond_signal_trampoline:
 10549f0:	55 	push	rbp
 10549f1:	48 89 e5 	mov	rbp, rsp
 10549f4:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 10549f7:	e8 d6 0e 03 00 	call	200406 <_write+0x10858d2>
 10549fc:	5d 	pop	rbp
 10549fd:	c3 	ret
 10549fe:	cc 	int3
 10549ff:	cc 	int3

_runtime.pthread_self_trampoline:
 1054a00:	55 	push	rbp
 1054a01:	48 89 e5 	mov	rbp, rsp
 1054a04:	48 89 fb 	mov	rbx, rdi
 1054a07:	e8 cc 0e 03 00 	call	200396 <_write+0x10858d8>
 1054a0c:	48 89 03 	mov	qword ptr [rbx], rax
 1054a0f:	5d 	pop	rbp
 1054a10:	c3 	ret
 1054a11:	cc 	int3
 1054a12:	cc 	int3
 1054a13:	cc 	int3
 1054a14:	cc 	int3
 1054a15:	cc 	int3
 1054a16:	cc 	int3
 1054a17:	cc 	int3
 1054a18:	cc 	int3
 1054a19:	cc 	int3
 1054a1a:	cc 	int3
 1054a1b:	cc 	int3
 1054a1c:	cc 	int3
 1054a1d:	cc 	int3
 1054a1e:	cc 	int3
 1054a1f:	cc 	int3

_runtime.pthread_kill_trampoline:
 1054a20:	55 	push	rbp
 1054a21:	48 89 e5 	mov	rbp, rsp
 1054a24:	48 8b 77 08 	mov	rsi, qword ptr [rdi + 8]
 1054a28:	48 8b 3f 	mov	rdi, qword ptr [rdi]
 1054a2b:	e8 ae 0e 03 00 	call	200366 <_write+0x10858de>
 1054a30:	5d 	pop	rbp
 1054a31:	c3 	ret
 1054a32:	cc 	int3
 1054a33:	cc 	int3
 1054a34:	cc 	int3
 1054a35:	cc 	int3
 1054a36:	cc 	int3
 1054a37:	cc 	int3
 1054a38:	cc 	int3
 1054a39:	cc 	int3
 1054a3a:	cc 	int3
 1054a3b:	cc 	int3
 1054a3c:	cc 	int3
 1054a3d:	cc 	int3
 1054a3e:	cc 	int3
 1054a3f:	cc 	int3

_type..eq.runtime._panic:
 1054a40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054a49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054a4d:	0f 86 96 00 00 00 	jbe	150 <_type..eq.runtime._panic+0xa9>
 1054a53:	48 83 ec 28 	sub	rsp, 40
 1054a57:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054a5c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054a61:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054a66:	48 8b 08 	mov	rcx, qword ptr [rax]
 1054a69:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1054a6e:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1054a71:	75 72 	jne	114 <_type..eq.runtime._panic+0xa5>
 1054a73:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 1054a77:	48 8b 58 10 	mov	rbx, qword ptr [rax + 16]
 1054a7b:	48 8b 72 08 	mov	rsi, qword ptr [rdx + 8]
 1054a7f:	48 39 70 08 	cmp	qword ptr [rax + 8], rsi
 1054a83:	74 3c 	je	60 <_type..eq.runtime._panic+0x81>
 1054a85:	31 c9 	xor	ecx, ecx
 1054a87:	84 c9 	test	cl, cl
 1054a89:	75 10 	jne	16 <_type..eq.runtime._panic+0x5b>
 1054a8b:	31 c0 	xor	eax, eax
 1054a8d:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054a91:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054a96:	48 83 c4 28 	add	rsp, 40
 1054a9a:	c3 	ret
 1054a9b:	48 8d 4a 18 	lea	rcx, [rdx + 24]
 1054a9f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1054aa3:	48 83 c0 18 	add	rax, 24
 1054aa7:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054aac:	48 c7 44 24 10 1b 00 00 00 	mov	qword ptr [rsp + 16], 27
 1054ab5:	e8 36 d6 fa ff 	call	-338378 <_runtime.memequal>
 1054aba:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054abf:	eb cc 	jmp	-52 <_type..eq.runtime._panic+0x4d>
 1054ac1:	48 89 34 24 	mov	qword ptr [rsp], rsi
 1054ac5:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1054aca:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1054acf:	e8 ac dc fa ff 	call	-336724 <_runtime.efaceeq>
 1054ad4:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1054ad9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054ade:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1054ae3:	eb a2 	jmp	-94 <_type..eq.runtime._panic+0x47>
 1054ae5:	31 c9 	xor	ecx, ecx
 1054ae7:	eb 9e 	jmp	-98 <_type..eq.runtime._panic+0x47>
 1054ae9:	e8 e2 c0 ff ff 	call	-16158 <_runtime.morestack_noctxt>
 1054aee:	e9 4d ff ff ff 	jmp	-179 <_type..eq.runtime._panic>
 1054af3:	cc 	int3
 1054af4:	cc 	int3
 1054af5:	cc 	int3
 1054af6:	cc 	int3
 1054af7:	cc 	int3
 1054af8:	cc 	int3
 1054af9:	cc 	int3
 1054afa:	cc 	int3
 1054afb:	cc 	int3
 1054afc:	cc 	int3
 1054afd:	cc 	int3
 1054afe:	cc 	int3
 1054aff:	cc 	int3

_type..eq.runtime._defer:
 1054b00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054b09:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054b0d:	76 76 	jbe	118 <_type..eq.runtime._defer+0x85>
 1054b0f:	48 83 ec 28 	sub	rsp, 40
 1054b13:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054b18:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054b1d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054b22:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054b26:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1054b2b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1054b30:	48 c7 44 24 10 07 00 00 00 	mov	qword ptr [rsp + 16], 7
 1054b39:	e8 b2 d5 fa ff 	call	-338510 <_runtime.memequal>
 1054b3e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1054b43:	75 10 	jne	16 <_type..eq.runtime._defer+0x55>
 1054b45:	31 c0 	xor	eax, eax
 1054b47:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054b4b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054b50:	48 83 c4 28 	add	rsp, 40
 1054b54:	c3 	ret
 1054b55:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054b5a:	48 83 c0 08 	add	rax, 8
 1054b5e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054b62:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054b67:	48 83 c0 08 	add	rax, 8
 1054b6b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054b70:	48 c7 44 24 10 40 00 00 00 	mov	qword ptr [rsp + 16], 64
 1054b79:	e8 72 d5 fa ff 	call	-338574 <_runtime.memequal>
 1054b7e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054b83:	eb c2 	jmp	-62 <_type..eq.runtime._defer+0x47>
 1054b85:	e8 46 c0 ff ff 	call	-16314 <_runtime.morestack_noctxt>
 1054b8a:	e9 71 ff ff ff 	jmp	-143 <_type..eq.runtime._defer>
 1054b8f:	cc 	int3

_type..eq.runtime.sysmontick:
 1054b90:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1054b95:	8b 08 	mov	ecx, dword ptr [rax]
 1054b97:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1054b9c:	39 0a 	cmp	dword ptr [rdx], ecx
 1054b9e:	75 22 	jne	34 <_type..eq.runtime.sysmontick+0x32>
 1054ba0:	48 8b 4a 08 	mov	rcx, qword ptr [rdx + 8]
 1054ba4:	48 39 48 08 	cmp	qword ptr [rax + 8], rcx
 1054ba8:	75 18 	jne	24 <_type..eq.runtime.sysmontick+0x32>
 1054baa:	8b 48 10 	mov	ecx, dword ptr [rax + 16]
 1054bad:	39 4a 10 	cmp	dword ptr [rdx + 16], ecx
 1054bb0:	75 10 	jne	16 <_type..eq.runtime.sysmontick+0x32>
 1054bb2:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 1054bb6:	48 39 48 18 	cmp	qword ptr [rax + 24], rcx
 1054bba:	0f 94 c0 	sete	al
 1054bbd:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1054bc1:	c3 	ret
 1054bc2:	31 c0 	xor	eax, eax
 1054bc4:	eb f7 	jmp	-9 <_type..eq.runtime.sysmontick+0x2d>
 1054bc6:	cc 	int3
 1054bc7:	cc 	int3
 1054bc8:	cc 	int3
 1054bc9:	cc 	int3
 1054bca:	cc 	int3
 1054bcb:	cc 	int3
 1054bcc:	cc 	int3
 1054bcd:	cc 	int3
 1054bce:	cc 	int3
 1054bcf:	cc 	int3

_type..eq.runtime.special:
 1054bd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054bd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054bdd:	76 42 	jbe	66 <_type..eq.runtime.special+0x51>
 1054bdf:	48 83 ec 28 	sub	rsp, 40
 1054be3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054be8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054bed:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054bf2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054bf6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054bfb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054c00:	48 c7 44 24 10 0b 00 00 00 	mov	qword ptr [rsp + 16], 11
 1054c09:	e8 e2 d4 fa ff 	call	-338718 <_runtime.memequal>
 1054c0e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054c13:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054c17:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054c1c:	48 83 c4 28 	add	rsp, 40
 1054c20:	c3 	ret
 1054c21:	e8 aa bf ff ff 	call	-16470 <_runtime.morestack_noctxt>
 1054c26:	eb a8 	jmp	-88 <_type..eq.runtime.special>
 1054c28:	cc 	int3
 1054c29:	cc 	int3
 1054c2a:	cc 	int3
 1054c2b:	cc 	int3
 1054c2c:	cc 	int3
 1054c2d:	cc 	int3
 1054c2e:	cc 	int3
 1054c2f:	cc 	int3

_type..eq.runtime.mspan:
 1054c30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054c39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054c3d:	76 76 	jbe	118 <_type..eq.runtime.mspan+0x85>
 1054c3f:	48 83 ec 28 	sub	rsp, 40
 1054c43:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054c48:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054c4d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054c52:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054c56:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1054c5b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1054c60:	48 c7 44 24 10 67 00 00 00 	mov	qword ptr [rsp + 16], 103
 1054c69:	e8 82 d4 fa ff 	call	-338814 <_runtime.memequal>
 1054c6e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1054c73:	75 10 	jne	16 <_type..eq.runtime.mspan+0x55>
 1054c75:	31 c0 	xor	eax, eax
 1054c77:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054c7b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054c80:	48 83 c4 28 	add	rsp, 40
 1054c84:	c3 	ret
 1054c85:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054c8a:	48 83 c0 68 	add	rax, 104
 1054c8e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054c92:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054c97:	48 83 c0 68 	add	rax, 104
 1054c9b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054ca0:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 1054ca9:	e8 42 d4 fa ff 	call	-338878 <_runtime.memequal>
 1054cae:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054cb3:	eb c2 	jmp	-62 <_type..eq.runtime.mspan+0x47>
 1054cb5:	e8 16 bf ff ff 	call	-16618 <_runtime.morestack_noctxt>
 1054cba:	e9 71 ff ff ff 	jmp	-143 <_type..eq.runtime.mspan>
 1054cbf:	cc 	int3

_type..eq.runtime.markBits:
 1054cc0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1054cc5:	48 8b 08 	mov	rcx, qword ptr [rax]
 1054cc8:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1054ccd:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1054cd0:	75 19 	jne	25 <_type..eq.runtime.markBits+0x2b>
 1054cd2:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 1054cd6:	38 4a 08 	cmp	byte ptr [rdx + 8], cl
 1054cd9:	75 10 	jne	16 <_type..eq.runtime.markBits+0x2b>
 1054cdb:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 1054cdf:	48 39 42 10 	cmp	qword ptr [rdx + 16], rax
 1054ce3:	0f 94 c0 	sete	al
 1054ce6:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1054cea:	c3 	ret
 1054ceb:	31 c0 	xor	eax, eax
 1054ced:	eb f7 	jmp	-9 <_type..eq.runtime.markBits+0x26>
 1054cef:	cc 	int3

_type..eq.runtime.mcache:
 1054cf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054cf9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054cfd:	76 42 	jbe	66 <_type..eq.runtime.mcache+0x51>
 1054cff:	48 83 ec 28 	sub	rsp, 40
 1054d03:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054d08:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054d0d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054d12:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054d16:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054d1b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054d20:	48 c7 44 24 10 c4 06 00 00 	mov	qword ptr [rsp + 16], 1732
 1054d29:	e8 c2 d3 fa ff 	call	-339006 <_runtime.memequal>
 1054d2e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054d33:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054d37:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054d3c:	48 83 c4 28 	add	rsp, 40
 1054d40:	c3 	ret
 1054d41:	e8 8a be ff ff 	call	-16758 <_runtime.morestack_noctxt>
 1054d46:	eb a8 	jmp	-88 <_type..eq.runtime.mcache>
 1054d48:	cc 	int3
 1054d49:	cc 	int3
 1054d4a:	cc 	int3
 1054d4b:	cc 	int3
 1054d4c:	cc 	int3
 1054d4d:	cc 	int3
 1054d4e:	cc 	int3
 1054d4f:	cc 	int3

_type..eq.struct { runtime.gList; runtime.n int32 }:
 1054d50:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1054d55:	48 8b 08 	mov	rcx, qword ptr [rax]
 1054d58:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1054d5d:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1054d60:	75 0e 	jne	14 <_type..eq.struct { runtime.gList; runtime.n int32 }+0x20>
 1054d62:	8b 40 08 	mov	eax, dword ptr [rax + 8]
 1054d65:	39 42 08 	cmp	dword ptr [rdx + 8], eax
 1054d68:	0f 94 c0 	sete	al
 1054d6b:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1054d6f:	c3 	ret
 1054d70:	31 c0 	xor	eax, eax
 1054d72:	eb f7 	jmp	-9 <_type..eq.struct { runtime.gList; runtime.n int32 }+0x1b>
 1054d74:	cc 	int3
 1054d75:	cc 	int3
 1054d76:	cc 	int3
 1054d77:	cc 	int3
 1054d78:	cc 	int3
 1054d79:	cc 	int3
 1054d7a:	cc 	int3
 1054d7b:	cc 	int3
 1054d7c:	cc 	int3
 1054d7d:	cc 	int3
 1054d7e:	cc 	int3
 1054d7f:	cc 	int3

_type..eq.runtime.gcWork:
 1054d80:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054d89:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054d8d:	0f 86 8e 00 00 00 	jbe	142 <_type..eq.runtime.gcWork+0xa1>
 1054d93:	48 83 ec 28 	sub	rsp, 40
 1054d97:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054d9c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054da1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054da6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054daa:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1054daf:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1054db4:	48 c7 44 24 10 21 00 00 00 	mov	qword ptr [rsp + 16], 33
 1054dbd:	e8 2e d3 fa ff 	call	-339154 <_runtime.memequal>
 1054dc2:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1054dc7:	74 54 	je	84 <_type..eq.runtime.gcWork+0x9d>
 1054dc9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054dce:	8b 48 24 	mov	ecx, dword ptr [rax + 36]
 1054dd1:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1054dd6:	39 4a 24 	cmp	dword ptr [rdx + 36], ecx
 1054dd9:	75 3e 	jne	62 <_type..eq.runtime.gcWork+0x99>
 1054ddb:	8b 48 28 	mov	ecx, dword ptr [rax + 40]
 1054dde:	39 4a 28 	cmp	dword ptr [rdx + 40], ecx
 1054de1:	74 10 	je	16 <_type..eq.runtime.gcWork+0x73>
 1054de3:	31 c0 	xor	eax, eax
 1054de5:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054de9:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054dee:	48 83 c4 28 	add	rsp, 40
 1054df2:	c3 	ret
 1054df3:	48 8d 4a 30 	lea	rcx, [rdx + 48]
 1054df7:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1054dfb:	48 83 c0 30 	add	rax, 48
 1054dff:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054e04:	48 c7 44 24 10 80 00 00 00 	mov	qword ptr [rsp + 16], 128
 1054e0d:	e8 de d2 fa ff 	call	-339234 <_runtime.memequal>
 1054e12:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054e17:	eb cc 	jmp	-52 <_type..eq.runtime.gcWork+0x65>
 1054e19:	31 c0 	xor	eax, eax
 1054e1b:	eb c8 	jmp	-56 <_type..eq.runtime.gcWork+0x65>
 1054e1d:	31 c0 	xor	eax, eax
 1054e1f:	eb c4 	jmp	-60 <_type..eq.runtime.gcWork+0x65>
 1054e21:	e8 aa bd ff ff 	call	-16982 <_runtime.morestack_noctxt>
 1054e26:	e9 55 ff ff ff 	jmp	-171 <_type..eq.runtime.gcWork>
 1054e2b:	cc 	int3
 1054e2c:	cc 	int3
 1054e2d:	cc 	int3
 1054e2e:	cc 	int3
 1054e2f:	cc 	int3

_type..eq.runtime.wbBuf:
 1054e30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054e39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054e3d:	76 42 	jbe	66 <_type..eq.runtime.wbBuf+0x51>
 1054e3f:	48 83 ec 28 	sub	rsp, 40
 1054e43:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054e48:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054e4d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1054e52:	48 89 04 24 	mov	qword ptr [rsp], rax
 1054e56:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054e5b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054e60:	48 c7 44 24 10 14 10 00 00 	mov	qword ptr [rsp + 16], 4116
 1054e69:	e8 82 d2 fa ff 	call	-339326 <_runtime.memequal>
 1054e6e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054e73:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054e77:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054e7c:	48 83 c4 28 	add	rsp, 40
 1054e80:	c3 	ret
 1054e81:	e8 4a bd ff ff 	call	-17078 <_runtime.morestack_noctxt>
 1054e86:	eb a8 	jmp	-88 <_type..eq.runtime.wbBuf>
 1054e88:	cc 	int3
 1054e89:	cc 	int3
 1054e8a:	cc 	int3
 1054e8b:	cc 	int3
 1054e8c:	cc 	int3
 1054e8d:	cc 	int3
 1054e8e:	cc 	int3
 1054e8f:	cc 	int3

_type..eq.runtime.mOS:
 1054e90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054e99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054e9d:	76 55 	jbe	85 <_type..eq.runtime.mOS+0x64>
 1054e9f:	48 83 ec 28 	sub	rsp, 40
 1054ea3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054ea8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054ead:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054eb2:	0f b6 08 	movzx	ecx, byte ptr [rax]
 1054eb5:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1054eba:	38 0a 	cmp	byte ptr [rdx], cl
 1054ebc:	74 10 	je	16 <_type..eq.runtime.mOS+0x3e>
 1054ebe:	31 c0 	xor	eax, eax
 1054ec0:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054ec4:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054ec9:	48 83 c4 28 	add	rsp, 40
 1054ecd:	c3 	ret
 1054ece:	48 8d 4a 08 	lea	rcx, [rdx + 8]
 1054ed2:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1054ed6:	48 83 c0 08 	add	rax, 8
 1054eda:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054edf:	48 c7 44 24 10 78 00 00 00 	mov	qword ptr [rsp + 16], 120
 1054ee8:	e8 03 d2 fa ff 	call	-339453 <_runtime.memequal>
 1054eed:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1054ef2:	eb cc 	jmp	-52 <_type..eq.runtime.mOS+0x30>
 1054ef4:	e8 d7 bc ff ff 	call	-17193 <_runtime.morestack_noctxt>
 1054ef9:	eb 95 	jmp	-107 <_type..eq.runtime.mOS>
 1054efb:	cc 	int3
 1054efc:	cc 	int3
 1054efd:	cc 	int3
 1054efe:	cc 	int3
 1054eff:	cc 	int3

_runtime.(*waitReason).String:
 1054f00:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054f09:	48 83 ec 08 	sub	rsp, 8
 1054f0d:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 1054f11:	48 8d 2c 24 	lea	rbp, [rsp]
 1054f15:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1054f19:	48 85 db 	test	rbx, rbx
 1054f1c:	75 54 	jne	84 <_runtime.(*waitReason).String+0x72>
 1054f1e:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1054f23:	48 85 c0 	test	rax, rax
 1054f26:	74 44 	je	68 <_runtime.(*waitReason).String+0x6c>
 1054f28:	0f b6 00 	movzx	eax, byte ptr [rax]
 1054f2b:	84 c0 	test	al, al
 1054f2d:	73 1f 	jae	31 <_runtime.(*waitReason).String+0x4e>
 1054f2f:	48 8d 05 bf f1 01 00 	lea	rax, [rip + 127423]
 1054f36:	b9 13 00 00 00 	mov	ecx, 19
 1054f3b:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1054f40:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1054f45:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 1054f49:	48 83 c4 08 	add	rsp, 8
 1054f4d:	c3 	ret
 1054f4e:	80 f8 1a 	cmp	al, 26
 1054f51:	73 dc 	jae	-36 <_runtime.(*waitReason).String+0x2f>
 1054f53:	48 c1 e0 04 	shl	rax, 4
 1054f57:	48 8d 15 e2 7b 07 00 	lea	rdx, [rip + 490466]
 1054f5e:	48 8b 1c 02 	mov	rbx, qword ptr [rdx + rax]
 1054f62:	48 8b 4c 02 08 	mov	rcx, qword ptr [rdx + rax + 8]
 1054f67:	48 89 d8 	mov	rax, rbx
 1054f6a:	eb cf 	jmp	-49 <_runtime.(*waitReason).String+0x3b>
 1054f6c:	e8 1f 1a fb ff 	call	-320993 <_runtime.panicwrap>
 1054f71:	90 	nop
 1054f72:	48 8d 7c 24 10 	lea	rdi, [rsp + 16]
 1054f77:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1054f7a:	75 a2 	jne	-94 <_runtime.(*waitReason).String+0x1e>
 1054f7c:	48 89 23 	mov	qword ptr [rbx], rsp
 1054f7f:	eb 9d 	jmp	-99 <_runtime.(*waitReason).String+0x1e>
 1054f81:	cc 	int3
 1054f82:	cc 	int3
 1054f83:	cc 	int3
 1054f84:	cc 	int3
 1054f85:	cc 	int3
 1054f86:	cc 	int3
 1054f87:	cc 	int3
 1054f88:	cc 	int3
 1054f89:	cc 	int3
 1054f8a:	cc 	int3
 1054f8b:	cc 	int3
 1054f8c:	cc 	int3
 1054f8d:	cc 	int3
 1054f8e:	cc 	int3
 1054f8f:	cc 	int3

_type..eq.runtime.sudog:
 1054f90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1054f99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1054f9d:	0f 86 99 00 00 00 	jbe	153 <_type..eq.runtime.sudog+0xac>
 1054fa3:	48 83 ec 28 	sub	rsp, 40
 1054fa7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1054fac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1054fb1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1054fb6:	48 8b 08 	mov	rcx, qword ptr [rax]
 1054fb9:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1054fbe:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1054fc1:	75 75 	jne	117 <_type..eq.runtime.sudog+0xa8>
 1054fc3:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 1054fc7:	38 4a 08 	cmp	byte ptr [rdx + 8], cl
 1054fca:	74 3c 	je	60 <_type..eq.runtime.sudog+0x78>
 1054fcc:	31 c9 	xor	ecx, ecx
 1054fce:	84 c9 	test	cl, cl
 1054fd0:	75 10 	jne	16 <_type..eq.runtime.sudog+0x52>
 1054fd2:	31 c0 	xor	eax, eax
 1054fd4:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1054fd8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1054fdd:	48 83 c4 28 	add	rsp, 40
 1054fe1:	c3 	ret
 1054fe2:	48 8d 4a 40 	lea	rcx, [rdx + 64]
 1054fe6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1054fea:	48 83 c0 40 	add	rax, 64
 1054fee:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1054ff3:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 1054ffc:	e8 ef d0 fa ff 	call	-339729 <_runtime.memequal>
 1055001:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055006:	eb cc 	jmp	-52 <_type..eq.runtime.sudog+0x44>
 1055008:	48 8d 4a 10 	lea	rcx, [rdx + 16]
 105500c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1055010:	48 8d 48 10 	lea	rcx, [rax + 16]
 1055014:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055019:	48 c7 44 24 10 2c 00 00 00 	mov	qword ptr [rsp + 16], 44
 1055022:	e8 c9 d0 fa ff 	call	-339767 <_runtime.memequal>
 1055027:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 105502c:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055031:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1055036:	eb 96 	jmp	-106 <_type..eq.runtime.sudog+0x3e>
 1055038:	31 c9 	xor	ecx, ecx
 105503a:	eb 92 	jmp	-110 <_type..eq.runtime.sudog+0x3e>
 105503c:	e8 8f bb ff ff 	call	-17521 <_runtime.morestack_noctxt>
 1055041:	e9 4a ff ff ff 	jmp	-182 <_type..eq.runtime.sudog>
 1055046:	cc 	int3
 1055047:	cc 	int3
 1055048:	cc 	int3
 1055049:	cc 	int3
 105504a:	cc 	int3
 105504b:	cc 	int3
 105504c:	cc 	int3
 105504d:	cc 	int3
 105504e:	cc 	int3
 105504f:	cc 	int3

_type..eq.runtime.hchan:
 1055050:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055059:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105505d:	76 76 	jbe	118 <_type..eq.runtime.hchan+0x85>
 105505f:	48 83 ec 28 	sub	rsp, 40
 1055063:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055068:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105506d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055072:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055076:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105507b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055080:	48 c7 44 24 10 1a 00 00 00 	mov	qword ptr [rsp + 16], 26
 1055089:	e8 62 d0 fa ff 	call	-339870 <_runtime.memequal>
 105508e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055093:	75 10 	jne	16 <_type..eq.runtime.hchan+0x55>
 1055095:	31 c0 	xor	eax, eax
 1055097:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 105509b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10550a0:	48 83 c4 28 	add	rsp, 40
 10550a4:	c3 	ret
 10550a5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10550aa:	48 83 c0 1c 	add	rax, 28
 10550ae:	48 89 04 24 	mov	qword ptr [rsp], rax
 10550b2:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10550b7:	48 83 c0 1c 	add	rax, 28
 10550bb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10550c0:	48 c7 44 24 10 44 00 00 00 	mov	qword ptr [rsp + 16], 68
 10550c9:	e8 22 d0 fa ff 	call	-339934 <_runtime.memequal>
 10550ce:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 10550d3:	eb c2 	jmp	-62 <_type..eq.runtime.hchan+0x47>
 10550d5:	e8 f6 ba ff ff 	call	-17674 <_runtime.morestack_noctxt>
 10550da:	e9 71 ff ff ff 	jmp	-143 <_type..eq.runtime.hchan>
 10550df:	cc 	int3

_type..eq.[6]string:
 10550e0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10550e9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10550ed:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[6]string+0xa8>
 10550f3:	48 83 ec 30 	sub	rsp, 48
 10550f7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10550fc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1055101:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055106:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 105510b:	31 d2 	xor	edx, edx
 105510d:	eb 19 	jmp	25 <_type..eq.[6]string+0x48>
 105510f:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1055114:	48 8d 53 01 	lea	rdx, [rbx + 1]
 1055118:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 105511d:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 1055122:	48 89 d8 	mov	rax, rbx
 1055125:	48 89 f1 	mov	rcx, rsi
 1055128:	48 83 fa 06 	cmp	rdx, 6
 105512c:	7d 4b 	jge	75 <_type..eq.[6]string+0x99>
 105512e:	48 89 d3 	mov	rbx, rdx
 1055131:	48 c1 e2 04 	shl	rdx, 4
 1055135:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 105513a:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 105513e:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 1055142:	48 01 ca 	add	rdx, rcx
 1055145:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 1055149:	75 1f 	jne	31 <_type..eq.[6]string+0x8a>
 105514b:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1055150:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1055154:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1055159:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 105515e:	e8 8d cf fa ff 	call	-340083 <_runtime.memequal>
 1055163:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055168:	75 a5 	jne	-91 <_type..eq.[6]string+0x2f>
 105516a:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 105516f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055174:	48 83 c4 30 	add	rsp, 48
 1055178:	c3 	ret
 1055179:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 105517e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055183:	48 83 c4 30 	add	rsp, 48
 1055187:	c3 	ret
 1055188:	e8 43 ba ff ff 	call	-17853 <_runtime.morestack_noctxt>
 105518d:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[6]string>
 1055192:	cc 	int3
 1055193:	cc 	int3
 1055194:	cc 	int3
 1055195:	cc 	int3
 1055196:	cc 	int3
 1055197:	cc 	int3
 1055198:	cc 	int3
 1055199:	cc 	int3
 105519a:	cc 	int3
 105519b:	cc 	int3
 105519c:	cc 	int3
 105519d:	cc 	int3
 105519e:	cc 	int3
 105519f:	cc 	int3

_type..eq.[9]string:
 10551a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10551a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10551ad:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[9]string+0xa8>
 10551b3:	48 83 ec 30 	sub	rsp, 48
 10551b7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10551bc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10551c1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10551c6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10551cb:	31 d2 	xor	edx, edx
 10551cd:	eb 19 	jmp	25 <_type..eq.[9]string+0x48>
 10551cf:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10551d4:	48 8d 53 01 	lea	rdx, [rbx + 1]
 10551d8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10551dd:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10551e2:	48 89 d8 	mov	rax, rbx
 10551e5:	48 89 f1 	mov	rcx, rsi
 10551e8:	48 83 fa 09 	cmp	rdx, 9
 10551ec:	7d 4b 	jge	75 <_type..eq.[9]string+0x99>
 10551ee:	48 89 d3 	mov	rbx, rdx
 10551f1:	48 c1 e2 04 	shl	rdx, 4
 10551f5:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 10551fa:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 10551fe:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 1055202:	48 01 ca 	add	rdx, rcx
 1055205:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 1055209:	75 1f 	jne	31 <_type..eq.[9]string+0x8a>
 105520b:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1055210:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1055214:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1055219:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 105521e:	e8 cd ce fa ff 	call	-340275 <_runtime.memequal>
 1055223:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055228:	75 a5 	jne	-91 <_type..eq.[9]string+0x2f>
 105522a:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 105522f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055234:	48 83 c4 30 	add	rsp, 48
 1055238:	c3 	ret
 1055239:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 105523e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055243:	48 83 c4 30 	add	rsp, 48
 1055247:	c3 	ret
 1055248:	e8 83 b9 ff ff 	call	-18045 <_runtime.morestack_noctxt>
 105524d:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[9]string>
 1055252:	cc 	int3
 1055253:	cc 	int3
 1055254:	cc 	int3
 1055255:	cc 	int3
 1055256:	cc 	int3
 1055257:	cc 	int3
 1055258:	cc 	int3
 1055259:	cc 	int3
 105525a:	cc 	int3
 105525b:	cc 	int3
 105525c:	cc 	int3
 105525d:	cc 	int3
 105525e:	cc 	int3
 105525f:	cc 	int3

_type..eq.runtime.bitvector:
 1055260:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1055265:	8b 08 	mov	ecx, dword ptr [rax]
 1055267:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 105526c:	39 0a 	cmp	dword ptr [rdx], ecx
 105526e:	75 10 	jne	16 <_type..eq.runtime.bitvector+0x20>
 1055270:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1055274:	48 39 42 08 	cmp	qword ptr [rdx + 8], rax
 1055278:	0f 94 c0 	sete	al
 105527b:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 105527f:	c3 	ret
 1055280:	31 c0 	xor	eax, eax
 1055282:	eb f7 	jmp	-9 <_type..eq.runtime.bitvector+0x1b>
 1055284:	cc 	int3
 1055285:	cc 	int3
 1055286:	cc 	int3
 1055287:	cc 	int3
 1055288:	cc 	int3
 1055289:	cc 	int3
 105528a:	cc 	int3
 105528b:	cc 	int3
 105528c:	cc 	int3
 105528d:	cc 	int3
 105528e:	cc 	int3
 105528f:	cc 	int3

_type..eq.runtime.itab:
 1055290:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055299:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105529d:	76 5d 	jbe	93 <_type..eq.runtime.itab+0x6c>
 105529f:	48 83 ec 28 	sub	rsp, 40
 10552a3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10552a8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10552ad:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10552b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10552b6:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 10552bb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10552c0:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 10552c9:	e8 22 ce fa ff 	call	-340446 <_runtime.memequal>
 10552ce:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10552d3:	74 23 	je	35 <_type..eq.runtime.itab+0x68>
 10552d5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10552da:	48 8b 40 18 	mov	rax, qword ptr [rax + 24]
 10552de:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10552e3:	48 39 41 18 	cmp	qword ptr [rcx + 24], rax
 10552e7:	0f 94 c0 	sete	al
 10552ea:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10552ee:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10552f3:	48 83 c4 28 	add	rsp, 40
 10552f7:	c3 	ret
 10552f8:	31 c0 	xor	eax, eax
 10552fa:	eb ee 	jmp	-18 <_type..eq.runtime.itab+0x5a>
 10552fc:	e8 cf b8 ff ff 	call	-18225 <_runtime.morestack_noctxt>
 1055301:	eb 8d 	jmp	-115 <_type..eq.runtime.itab>
 1055303:	cc 	int3
 1055304:	cc 	int3
 1055305:	cc 	int3
 1055306:	cc 	int3
 1055307:	cc 	int3
 1055308:	cc 	int3
 1055309:	cc 	int3
 105530a:	cc 	int3
 105530b:	cc 	int3
 105530c:	cc 	int3
 105530d:	cc 	int3
 105530e:	cc 	int3
 105530f:	cc 	int3

_type..eq.runtime._func:
 1055310:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055319:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105531d:	76 5c 	jbe	92 <_type..eq.runtime._func+0x6b>
 105531f:	48 83 ec 28 	sub	rsp, 40
 1055323:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055328:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105532d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055332:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055336:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105533b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055340:	48 c7 44 24 10 25 00 00 00 	mov	qword ptr [rsp + 16], 37
 1055349:	e8 a2 cd fa ff 	call	-340574 <_runtime.memequal>
 105534e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055353:	74 22 	je	34 <_type..eq.runtime._func+0x67>
 1055355:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 105535a:	0f b6 40 27 	movzx	eax, byte ptr [rax + 39]
 105535e:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1055363:	38 41 27 	cmp	byte ptr [rcx + 39], al
 1055366:	0f 94 c0 	sete	al
 1055369:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 105536d:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055372:	48 83 c4 28 	add	rsp, 40
 1055376:	c3 	ret
 1055377:	31 c0 	xor	eax, eax
 1055379:	eb ee 	jmp	-18 <_type..eq.runtime._func+0x59>
 105537b:	e8 50 b8 ff ff 	call	-18352 <_runtime.morestack_noctxt>
 1055380:	eb 8e 	jmp	-114 <_type..eq.runtime._func>
 1055382:	cc 	int3
 1055383:	cc 	int3
 1055384:	cc 	int3
 1055385:	cc 	int3
 1055386:	cc 	int3
 1055387:	cc 	int3
 1055388:	cc 	int3
 1055389:	cc 	int3
 105538a:	cc 	int3
 105538b:	cc 	int3
 105538c:	cc 	int3
 105538d:	cc 	int3
 105538e:	cc 	int3
 105538f:	cc 	int3

_type..eq.runtime.modulehash:
 1055390:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055399:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105539d:	0f 86 b2 00 00 00 	jbe	178 <_type..eq.runtime.modulehash+0xc5>
 10553a3:	48 83 ec 28 	sub	rsp, 40
 10553a7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10553ac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10553b1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10553b6:	48 8b 08 	mov	rcx, qword ptr [rax]
 10553b9:	48 8b 50 08 	mov	rdx, qword ptr [rax + 8]
 10553bd:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10553c2:	48 8b 33 	mov	rsi, qword ptr [rbx]
 10553c5:	48 39 53 08 	cmp	qword ptr [rbx + 8], rdx
 10553c9:	74 63 	je	99 <_type..eq.runtime.modulehash+0x9e>
 10553cb:	31 c9 	xor	ecx, ecx
 10553cd:	84 c9 	test	cl, cl
 10553cf:	74 59 	je	89 <_type..eq.runtime.modulehash+0x9a>
 10553d1:	48 8b 4b 10 	mov	rcx, qword ptr [rbx + 16]
 10553d5:	48 8b 50 18 	mov	rdx, qword ptr [rax + 24]
 10553d9:	48 8b 70 10 	mov	rsi, qword ptr [rax + 16]
 10553dd:	48 39 53 18 	cmp	qword ptr [rbx + 24], rdx
 10553e1:	74 23 	je	35 <_type..eq.runtime.modulehash+0x76>
 10553e3:	31 c9 	xor	ecx, ecx
 10553e5:	84 c9 	test	cl, cl
 10553e7:	74 19 	je	25 <_type..eq.runtime.modulehash+0x72>
 10553e9:	48 8b 4b 20 	mov	rcx, qword ptr [rbx + 32]
 10553ed:	48 39 48 20 	cmp	qword ptr [rax + 32], rcx
 10553f1:	0f 94 c0 	sete	al
 10553f4:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10553f8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10553fd:	48 83 c4 28 	add	rsp, 40
 1055401:	c3 	ret
 1055402:	31 c0 	xor	eax, eax
 1055404:	eb ee 	jmp	-18 <_type..eq.runtime.modulehash+0x64>
 1055406:	48 89 34 24 	mov	qword ptr [rsp], rsi
 105540a:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 105540f:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 1055414:	e8 d7 cc fa ff 	call	-340777 <_runtime.memequal>
 1055419:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 105541e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055423:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1055428:	eb bb 	jmp	-69 <_type..eq.runtime.modulehash+0x55>
 105542a:	31 c9 	xor	ecx, ecx
 105542c:	eb b7 	jmp	-73 <_type..eq.runtime.modulehash+0x55>
 105542e:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1055432:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1055437:	48 89 54 24 10 	mov	qword ptr [rsp + 16], rdx
 105543c:	e8 af cc fa ff 	call	-340817 <_runtime.memequal>
 1055441:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1055446:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 105544b:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1055450:	e9 78 ff ff ff 	jmp	-136 <_type..eq.runtime.modulehash+0x3d>
 1055455:	e8 76 b7 ff ff 	call	-18570 <_runtime.morestack_noctxt>
 105545a:	e9 31 ff ff ff 	jmp	-207 <_type..eq.runtime.modulehash>
 105545f:	cc 	int3

_type..eq.runtime.stackScanState:
 1055460:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055469:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105546d:	76 7a 	jbe	122 <_type..eq.runtime.stackScanState+0x89>
 105546f:	48 83 ec 28 	sub	rsp, 40
 1055473:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055478:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105547d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055482:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055486:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105548b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055490:	48 c7 44 24 10 11 01 00 00 	mov	qword ptr [rsp + 16], 273
 1055499:	e8 52 cc fa ff 	call	-340910 <_runtime.memequal>
 105549e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10554a3:	75 10 	jne	16 <_type..eq.runtime.stackScanState+0x55>
 10554a5:	31 c0 	xor	eax, eax
 10554a7:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10554ab:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10554b0:	48 83 c4 28 	add	rsp, 40
 10554b4:	c3 	ret
 10554b5:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10554ba:	48 05 18 01 00 00 	add	rax, 280
 10554c0:	48 89 04 24 	mov	qword ptr [rsp], rax
 10554c4:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10554c9:	48 05 18 01 00 00 	add	rax, 280
 10554cf:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10554d4:	48 c7 44 24 10 38 00 00 00 	mov	qword ptr [rsp + 16], 56
 10554dd:	e8 0e cc fa ff 	call	-340978 <_runtime.memequal>
 10554e2:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 10554e7:	eb be 	jmp	-66 <_type..eq.runtime.stackScanState+0x47>
 10554e9:	e8 e2 b6 ff ff 	call	-18718 <_runtime.morestack_noctxt>
 10554ee:	e9 6d ff ff ff 	jmp	-147 <_type..eq.runtime.stackScanState>
 10554f3:	cc 	int3
 10554f4:	cc 	int3
 10554f5:	cc 	int3
 10554f6:	cc 	int3
 10554f7:	cc 	int3
 10554f8:	cc 	int3
 10554f9:	cc 	int3
 10554fa:	cc 	int3
 10554fb:	cc 	int3
 10554fc:	cc 	int3
 10554fd:	cc 	int3
 10554fe:	cc 	int3
 10554ff:	cc 	int3

_type..eq.runtime.gcSweepBuf:
 1055500:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055509:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105550d:	76 42 	jbe	66 <_type..eq.runtime.gcSweepBuf+0x51>
 105550f:	48 83 ec 28 	sub	rsp, 40
 1055513:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055518:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105551d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055522:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055526:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 105552b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055530:	48 c7 44 24 10 24 00 00 00 	mov	qword ptr [rsp + 16], 36
 1055539:	e8 b2 cb fa ff 	call	-341070 <_runtime.memequal>
 105553e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055543:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055547:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105554c:	48 83 c4 28 	add	rsp, 40
 1055550:	c3 	ret
 1055551:	e8 7a b6 ff ff 	call	-18822 <_runtime.morestack_noctxt>
 1055556:	eb a8 	jmp	-88 <_type..eq.runtime.gcSweepBuf>
 1055558:	cc 	int3
 1055559:	cc 	int3
 105555a:	cc 	int3
 105555b:	cc 	int3
 105555c:	cc 	int3
 105555d:	cc 	int3
 105555e:	cc 	int3
 105555f:	cc 	int3

_type..eq.[2]runtime.gcSweepBuf:
 1055560:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055569:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105556d:	76 6f 	jbe	111 <_type..eq.[2]runtime.gcSweepBuf+0x7e>
 105556f:	48 83 ec 28 	sub	rsp, 40
 1055573:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055578:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105557d:	31 c0 	xor	eax, eax
 105557f:	eb 09 	jmp	9 <_type..eq.[2]runtime.gcSweepBuf+0x2a>
 1055581:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1055586:	48 8d 41 01 	lea	rax, [rcx + 1]
 105558a:	48 83 f8 02 	cmp	rax, 2
 105558e:	7d 3f 	jge	63 <_type..eq.[2]runtime.gcSweepBuf+0x6f>
 1055590:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1055595:	48 8d 0c 80 	lea	rcx, [rax + 4*rax]
 1055599:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 105559e:	48 8d 1c ca 	lea	rbx, [rdx + 8*rcx]
 10555a2:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10555a6:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10555ab:	48 8d 0c cb 	lea	rcx, [rbx + 8*rcx]
 10555af:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10555b4:	e8 47 ff ff ff 	call	-185 <_type..eq.runtime.gcSweepBuf>
 10555b9:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 10555be:	75 c1 	jne	-63 <_type..eq.[2]runtime.gcSweepBuf+0x21>
 10555c0:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 10555c5:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10555ca:	48 83 c4 28 	add	rsp, 40
 10555ce:	c3 	ret
 10555cf:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 10555d4:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10555d9:	48 83 c4 28 	add	rsp, 40
 10555dd:	c3 	ret
 10555de:	e8 ed b5 ff ff 	call	-18963 <_runtime.morestack_noctxt>
 10555e3:	e9 78 ff ff ff 	jmp	-136 <_type..eq.[2]runtime.gcSweepBuf>
 10555e8:	cc 	int3
 10555e9:	cc 	int3
 10555ea:	cc 	int3
 10555eb:	cc 	int3
 10555ec:	cc 	int3
 10555ed:	cc 	int3
 10555ee:	cc 	int3
 10555ef:	cc 	int3

_type..eq.runtime.arenaHint:
 10555f0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10555f5:	48 8b 08 	mov	rcx, qword ptr [rax]
 10555f8:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 10555fd:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1055600:	75 19 	jne	25 <_type..eq.runtime.arenaHint+0x2b>
 1055602:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 1055606:	38 4a 08 	cmp	byte ptr [rdx + 8], cl
 1055609:	75 10 	jne	16 <_type..eq.runtime.arenaHint+0x2b>
 105560b:	48 8b 40 10 	mov	rax, qword ptr [rax + 16]
 105560f:	48 39 42 10 	cmp	qword ptr [rdx + 16], rax
 1055613:	0f 94 c0 	sete	al
 1055616:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 105561a:	c3 	ret
 105561b:	31 c0 	xor	eax, eax
 105561d:	eb f7 	jmp	-9 <_type..eq.runtime.arenaHint+0x26>
 105561f:	cc 	int3

_type..eq.runtime.mcentral:
 1055620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105562d:	76 63 	jbe	99 <_type..eq.runtime.mcentral+0x72>
 105562f:	48 83 ec 28 	sub	rsp, 40
 1055633:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055638:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105563d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055642:	48 8b 08 	mov	rcx, qword ptr [rax]
 1055645:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 105564a:	48 39 0a 	cmp	qword ptr [rdx], rcx
 105564d:	75 3f 	jne	63 <_type..eq.runtime.mcentral+0x6e>
 105564f:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 1055653:	38 4a 08 	cmp	byte ptr [rdx + 8], cl
 1055656:	74 10 	je	16 <_type..eq.runtime.mcentral+0x48>
 1055658:	31 c0 	xor	eax, eax
 105565a:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 105565e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055663:	48 83 c4 28 	add	rsp, 40
 1055667:	c3 	ret
 1055668:	48 8d 4a 10 	lea	rcx, [rdx + 16]
 105566c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1055670:	48 83 c0 10 	add	rax, 16
 1055674:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055679:	48 c7 44 24 10 28 00 00 00 	mov	qword ptr [rsp + 16], 40
 1055682:	e8 69 ca fa ff 	call	-341399 <_runtime.memequal>
 1055687:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 105568c:	eb cc 	jmp	-52 <_type..eq.runtime.mcentral+0x3a>
 105568e:	31 c0 	xor	eax, eax
 1055690:	eb c8 	jmp	-56 <_type..eq.runtime.mcentral+0x3a>
 1055692:	e8 39 b5 ff ff 	call	-19143 <_runtime.morestack_noctxt>
 1055697:	eb 87 	jmp	-121 <_type..eq.runtime.mcentral>
 1055699:	cc 	int3
 105569a:	cc 	int3
 105569b:	cc 	int3
 105569c:	cc 	int3
 105569d:	cc 	int3
 105569e:	cc 	int3
 105569f:	cc 	int3

_type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }:
 10556a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10556a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10556ad:	76 54 	jbe	84 <_type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x63>
 10556af:	48 83 ec 20 	sub	rsp, 32
 10556b3:	48 89 6c 24 18 	mov	qword ptr [rsp + 24], rbp
 10556b8:	48 8d 6c 24 18 	lea	rbp, [rsp + 24]
 10556bd:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 10556c2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10556c6:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 10556cb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10556d0:	e8 4b ff ff ff 	call	-181 <_type..eq.runtime.mcentral>
 10556d5:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 10556da:	74 23 	je	35 <_type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x5f>
 10556dc:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10556e1:	48 8b 40 38 	mov	rax, qword ptr [rax + 56]
 10556e5:	48 8b 4c 24 28 	mov	rcx, qword ptr [rsp + 40]
 10556ea:	48 39 41 38 	cmp	qword ptr [rcx + 56], rax
 10556ee:	0f 94 c0 	sete	al
 10556f1:	88 44 24 38 	mov	byte ptr [rsp + 56], al
 10556f5:	48 8b 6c 24 18 	mov	rbp, qword ptr [rsp + 24]
 10556fa:	48 83 c4 20 	add	rsp, 32
 10556fe:	c3 	ret
 10556ff:	31 c0 	xor	eax, eax
 1055701:	eb ee 	jmp	-18 <_type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x51>
 1055703:	e8 c8 b4 ff ff 	call	-19256 <_runtime.morestack_noctxt>
 1055708:	eb 96 	jmp	-106 <_type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }>
 105570a:	cc 	int3
 105570b:	cc 	int3
 105570c:	cc 	int3
 105570d:	cc 	int3
 105570e:	cc 	int3
 105570f:	cc 	int3

_type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }:
 1055710:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055719:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105571d:	76 70 	jbe	112 <_type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x7f>
 105571f:	48 83 ec 28 	sub	rsp, 40
 1055723:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055728:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105572d:	31 c0 	xor	eax, eax
 105572f:	eb 09 	jmp	9 <_type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x2a>
 1055731:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 1055736:	48 8d 41 01 	lea	rax, [rcx + 1]
 105573a:	48 3d 86 00 00 00 	cmp	rax, 134
 1055740:	7d 3e 	jge	62 <_type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x70>
 1055742:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1055747:	48 c1 e0 06 	shl	rax, 6
 105574b:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1055750:	48 8d 1c 10 	lea	rbx, [rax + rdx]
 1055754:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 1055758:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 105575d:	48 01 d8 	add	rax, rbx
 1055760:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055765:	e8 36 ff ff ff 	call	-202 <_type..eq.struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }>
 105576a:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 105576f:	75 c0 	jne	-64 <_type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }+0x21>
 1055771:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 1055776:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105577b:	48 83 c4 28 	add	rsp, 40
 105577f:	c3 	ret
 1055780:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 1055785:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105578a:	48 83 c4 28 	add	rsp, 40
 105578e:	c3 	ret
 105578f:	e8 3c b4 ff ff 	call	-19396 <_runtime.morestack_noctxt>
 1055794:	e9 77 ff ff ff 	jmp	-137 <_type..eq.[134]struct { runtime.mcentral runtime.mcentral; runtime.pad [8]uint8 }>
 1055799:	cc 	int3
 105579a:	cc 	int3
 105579b:	cc 	int3
 105579c:	cc 	int3
 105579d:	cc 	int3
 105579e:	cc 	int3
 105579f:	cc 	int3

_type..eq.runtime.specialfinalizer:
 10557a0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10557a9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10557ad:	76 71 	jbe	113 <_type..eq.runtime.specialfinalizer+0x80>
 10557af:	48 83 ec 28 	sub	rsp, 40
 10557b3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10557b8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10557bd:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10557c2:	48 8b 08 	mov	rcx, qword ptr [rax]
 10557c5:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10557ca:	48 39 0a 	cmp	qword ptr [rdx], rcx
 10557cd:	75 4d 	jne	77 <_type..eq.runtime.specialfinalizer+0x7c>
 10557cf:	0f b7 48 08 	movzx	ecx, word ptr [rax + 8]
 10557d3:	66 39 4a 08 	cmp	word ptr [rdx + 8], cx
 10557d7:	75 3f 	jne	63 <_type..eq.runtime.specialfinalizer+0x78>
 10557d9:	0f b6 48 0a 	movzx	ecx, byte ptr [rax + 10]
 10557dd:	38 4a 0a 	cmp	byte ptr [rdx + 10], cl
 10557e0:	74 10 	je	16 <_type..eq.runtime.specialfinalizer+0x52>
 10557e2:	31 c0 	xor	eax, eax
 10557e4:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10557e8:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10557ed:	48 83 c4 28 	add	rsp, 40
 10557f1:	c3 	ret
 10557f2:	48 8d 4a 10 	lea	rcx, [rdx + 16]
 10557f6:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 10557fa:	48 83 c0 10 	add	rax, 16
 10557fe:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055803:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 105580c:	e8 df c8 fa ff 	call	-341793 <_runtime.memequal>
 1055811:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055816:	eb cc 	jmp	-52 <_type..eq.runtime.specialfinalizer+0x44>
 1055818:	31 c0 	xor	eax, eax
 105581a:	eb c8 	jmp	-56 <_type..eq.runtime.specialfinalizer+0x44>
 105581c:	31 c0 	xor	eax, eax
 105581e:	eb c4 	jmp	-60 <_type..eq.runtime.specialfinalizer+0x44>
 1055820:	e8 ab b3 ff ff 	call	-19541 <_runtime.morestack_noctxt>
 1055825:	e9 76 ff ff ff 	jmp	-138 <_type..eq.runtime.specialfinalizer>
 105582a:	cc 	int3
 105582b:	cc 	int3
 105582c:	cc 	int3
 105582d:	cc 	int3
 105582e:	cc 	int3
 105582f:	cc 	int3

_type..eq.runtime.rwmutex:
 1055830:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055839:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105583d:	76 76 	jbe	118 <_type..eq.runtime.rwmutex+0x85>
 105583f:	48 83 ec 28 	sub	rsp, 40
 1055843:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055848:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105584d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055852:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055856:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105585b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055860:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 1055869:	e8 82 c8 fa ff 	call	-341886 <_runtime.memequal>
 105586e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055873:	75 10 	jne	16 <_type..eq.runtime.rwmutex+0x55>
 1055875:	31 c0 	xor	eax, eax
 1055877:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 105587b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055880:	48 83 c4 28 	add	rsp, 40
 1055884:	c3 	ret
 1055885:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 105588a:	48 83 c0 18 	add	rax, 24
 105588e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055892:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055897:	48 83 c0 18 	add	rax, 24
 105589b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10558a0:	48 c7 44 24 10 18 00 00 00 	mov	qword ptr [rsp + 16], 24
 10558a9:	e8 42 c8 fa ff 	call	-341950 <_runtime.memequal>
 10558ae:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 10558b3:	eb c2 	jmp	-62 <_type..eq.runtime.rwmutex+0x47>
 10558b5:	e8 16 b3 ff ff 	call	-19690 <_runtime.morestack_noctxt>
 10558ba:	e9 71 ff ff ff 	jmp	-143 <_type..eq.runtime.rwmutex>
 10558bf:	cc 	int3

_type..eq.[2]string:
 10558c0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10558c9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10558cd:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[2]string+0xa8>
 10558d3:	48 83 ec 30 	sub	rsp, 48
 10558d7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10558dc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10558e1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10558e6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10558eb:	31 d2 	xor	edx, edx
 10558ed:	eb 19 	jmp	25 <_type..eq.[2]string+0x48>
 10558ef:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10558f4:	48 8d 53 01 	lea	rdx, [rbx + 1]
 10558f8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10558fd:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 1055902:	48 89 d8 	mov	rax, rbx
 1055905:	48 89 f1 	mov	rcx, rsi
 1055908:	48 83 fa 02 	cmp	rdx, 2
 105590c:	7d 4b 	jge	75 <_type..eq.[2]string+0x99>
 105590e:	48 89 d3 	mov	rbx, rdx
 1055911:	48 c1 e2 04 	shl	rdx, 4
 1055915:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 105591a:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 105591e:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 1055922:	48 01 ca 	add	rdx, rcx
 1055925:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 1055929:	75 1f 	jne	31 <_type..eq.[2]string+0x8a>
 105592b:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1055930:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1055934:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1055939:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 105593e:	e8 ad c7 fa ff 	call	-342099 <_runtime.memequal>
 1055943:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055948:	75 a5 	jne	-91 <_type..eq.[2]string+0x2f>
 105594a:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 105594f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055954:	48 83 c4 30 	add	rsp, 48
 1055958:	c3 	ret
 1055959:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 105595e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055963:	48 83 c4 30 	add	rsp, 48
 1055967:	c3 	ret
 1055968:	e8 63 b2 ff ff 	call	-19869 <_runtime.morestack_noctxt>
 105596d:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[2]string>
 1055972:	cc 	int3
 1055973:	cc 	int3
 1055974:	cc 	int3
 1055975:	cc 	int3
 1055976:	cc 	int3
 1055977:	cc 	int3
 1055978:	cc 	int3
 1055979:	cc 	int3
 105597a:	cc 	int3
 105597b:	cc 	int3
 105597c:	cc 	int3
 105597d:	cc 	int3
 105597e:	cc 	int3
 105597f:	cc 	int3

_type..eq.[4]string:
 1055980:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055989:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105598d:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[4]string+0xa8>
 1055993:	48 83 ec 30 	sub	rsp, 48
 1055997:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 105599c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10559a1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10559a6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10559ab:	31 d2 	xor	edx, edx
 10559ad:	eb 19 	jmp	25 <_type..eq.[4]string+0x48>
 10559af:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10559b4:	48 8d 53 01 	lea	rdx, [rbx + 1]
 10559b8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10559bd:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10559c2:	48 89 d8 	mov	rax, rbx
 10559c5:	48 89 f1 	mov	rcx, rsi
 10559c8:	48 83 fa 04 	cmp	rdx, 4
 10559cc:	7d 4b 	jge	75 <_type..eq.[4]string+0x99>
 10559ce:	48 89 d3 	mov	rbx, rdx
 10559d1:	48 c1 e2 04 	shl	rdx, 4
 10559d5:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 10559da:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 10559de:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 10559e2:	48 01 ca 	add	rdx, rcx
 10559e5:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 10559e9:	75 1f 	jne	31 <_type..eq.[4]string+0x8a>
 10559eb:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 10559f0:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10559f4:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 10559f9:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10559fe:	e8 ed c6 fa ff 	call	-342291 <_runtime.memequal>
 1055a03:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055a08:	75 a5 	jne	-91 <_type..eq.[4]string+0x2f>
 1055a0a:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 1055a0f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055a14:	48 83 c4 30 	add	rsp, 48
 1055a18:	c3 	ret
 1055a19:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 1055a1e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055a23:	48 83 c4 30 	add	rsp, 48
 1055a27:	c3 	ret
 1055a28:	e8 a3 b1 ff ff 	call	-20061 <_runtime.morestack_noctxt>
 1055a2d:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[4]string>
 1055a32:	cc 	int3
 1055a33:	cc 	int3
 1055a34:	cc 	int3
 1055a35:	cc 	int3
 1055a36:	cc 	int3
 1055a37:	cc 	int3
 1055a38:	cc 	int3
 1055a39:	cc 	int3
 1055a3a:	cc 	int3
 1055a3b:	cc 	int3
 1055a3c:	cc 	int3
 1055a3d:	cc 	int3
 1055a3e:	cc 	int3
 1055a3f:	cc 	int3

_runtime.(*itabTableType).add-fm:
 1055a40:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055a49:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055a4d:	76 2f 	jbe	47 <_runtime.(*itabTableType).add-fm+0x3e>
 1055a4f:	48 83 ec 18 	sub	rsp, 24
 1055a53:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1055a58:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1055a5d:	48 8b 42 08 	mov	rax, qword ptr [rdx + 8]
 1055a61:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055a65:	48 8b 44 24 20 	mov	rax, qword ptr [rsp + 32]
 1055a6a:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055a6f:	e8 1c 1c fb ff 	call	-320484 <_runtime.(*itabTableType).add>
 1055a74:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1055a79:	48 83 c4 18 	add	rsp, 24
 1055a7d:	c3 	ret
 1055a7e:	e8 ad b0 ff ff 	call	-20307 <_runtime.morestack>
 1055a83:	eb bb 	jmp	-69 <_runtime.(*itabTableType).add-fm>
 1055a85:	cc 	int3
 1055a86:	cc 	int3
 1055a87:	cc 	int3
 1055a88:	cc 	int3
 1055a89:	cc 	int3
 1055a8a:	cc 	int3
 1055a8b:	cc 	int3
 1055a8c:	cc 	int3
 1055a8d:	cc 	int3
 1055a8e:	cc 	int3
 1055a8f:	cc 	int3

_type..eq.runtime.TypeAssertionError:
 1055a90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055a99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055a9d:	0f 86 80 00 00 00 	jbe	128 <_type..eq.runtime.TypeAssertionError+0x93>
 1055aa3:	48 83 ec 28 	sub	rsp, 40
 1055aa7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055aac:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055ab1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055ab6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055aba:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1055abf:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055ac4:	48 c7 44 24 10 18 00 00 00 	mov	qword ptr [rsp + 16], 24
 1055acd:	e8 1e c6 fa ff 	call	-342498 <_runtime.memequal>
 1055ad2:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055ad7:	74 46 	je	70 <_type..eq.runtime.TypeAssertionError+0x8f>
 1055ad9:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055ade:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 1055ae2:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1055ae7:	48 8b 5a 20 	mov	rbx, qword ptr [rdx + 32]
 1055aeb:	48 8b 52 18 	mov	rdx, qword ptr [rdx + 24]
 1055aef:	48 39 58 20 	cmp	qword ptr [rax + 32], rbx
 1055af3:	74 10 	je	16 <_type..eq.runtime.TypeAssertionError+0x75>
 1055af5:	31 c0 	xor	eax, eax
 1055af7:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055afb:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055b00:	48 83 c4 28 	add	rsp, 40
 1055b04:	c3 	ret
 1055b05:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1055b09:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055b0e:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1055b13:	e8 d8 c5 fa ff 	call	-342568 <_runtime.memequal>
 1055b18:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055b1d:	eb d8 	jmp	-40 <_type..eq.runtime.TypeAssertionError+0x67>
 1055b1f:	31 c0 	xor	eax, eax
 1055b21:	eb d4 	jmp	-44 <_type..eq.runtime.TypeAssertionError+0x67>
 1055b23:	e8 a8 b0 ff ff 	call	-20312 <_runtime.morestack_noctxt>
 1055b28:	e9 63 ff ff ff 	jmp	-157 <_type..eq.runtime.TypeAssertionError>
 1055b2d:	cc 	int3
 1055b2e:	cc 	int3
 1055b2f:	cc 	int3

_type..eq.runtime.boundsError:
 1055b30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055b39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055b3d:	76 42 	jbe	66 <_type..eq.runtime.boundsError+0x51>
 1055b3f:	48 83 ec 28 	sub	rsp, 40
 1055b43:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055b48:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055b4d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055b52:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055b56:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055b5b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055b60:	48 c7 44 24 10 12 00 00 00 	mov	qword ptr [rsp + 16], 18
 1055b69:	e8 82 c5 fa ff 	call	-342654 <_runtime.memequal>
 1055b6e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055b73:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055b77:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055b7c:	48 83 c4 28 	add	rsp, 40
 1055b80:	c3 	ret
 1055b81:	e8 4a b0 ff ff 	call	-20406 <_runtime.morestack_noctxt>
 1055b86:	eb a8 	jmp	-88 <_type..eq.runtime.boundsError>
 1055b88:	cc 	int3
 1055b89:	cc 	int3
 1055b8a:	cc 	int3
 1055b8b:	cc 	int3
 1055b8c:	cc 	int3
 1055b8d:	cc 	int3
 1055b8e:	cc 	int3
 1055b8f:	cc 	int3

_runtime.(*boundsError).Error:
 1055b90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055b99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055b9d:	76 6a 	jbe	106 <_runtime.(*boundsError).Error+0x79>
 1055b9f:	48 83 ec 30 	sub	rsp, 48
 1055ba3:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 1055ba8:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1055bad:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1055bb1:	48 85 db 	test	rbx, rbx
 1055bb4:	75 5a 	jne	90 <_runtime.(*boundsError).Error+0x80>
 1055bb6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055bbb:	48 85 c0 	test	rax, rax
 1055bbe:	74 43 	je	67 <_runtime.(*boundsError).Error+0x73>
 1055bc0:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1055bc4:	48 8b 10 	mov	rdx, qword ptr [rax]
 1055bc7:	0f b6 58 10 	movzx	ebx, byte ptr [rax + 16]
 1055bcb:	0f b6 40 11 	movzx	eax, byte ptr [rax + 17]
 1055bcf:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1055bd3:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055bd8:	88 5c 24 10 	mov	byte ptr [rsp + 16], bl
 1055bdc:	88 44 24 11 	mov	byte ptr [rsp + 17], al
 1055be0:	e8 8b 02 fb ff 	call	-327029 <_runtime.boundsError.Error>
 1055be5:	48 8b 44 24 18 	mov	rax, qword ptr [rsp + 24]
 1055bea:	48 8b 4c 24 20 	mov	rcx, qword ptr [rsp + 32]
 1055bef:	48 89 44 24 40 	mov	qword ptr [rsp + 64], rax
 1055bf4:	48 89 4c 24 48 	mov	qword ptr [rsp + 72], rcx
 1055bf9:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1055bfe:	48 83 c4 30 	add	rsp, 48
 1055c02:	c3 	ret
 1055c03:	e8 88 0d fb ff 	call	-324216 <_runtime.panicwrap>
 1055c08:	90 	nop
 1055c09:	e8 c2 af ff ff 	call	-20542 <_runtime.morestack_noctxt>
 1055c0e:	eb 80 	jmp	-128 <_runtime.(*boundsError).Error>
 1055c10:	48 8d 7c 24 38 	lea	rdi, [rsp + 56]
 1055c15:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1055c18:	75 9c 	jne	-100 <_runtime.(*boundsError).Error+0x26>
 1055c1a:	48 89 23 	mov	qword ptr [rbx], rsp
 1055c1d:	eb 97 	jmp	-105 <_runtime.(*boundsError).Error+0x26>
 1055c1f:	cc 	int3

_type..eq.runtime.cpuProfile:
 1055c20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055c29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055c2d:	76 63 	jbe	99 <_type..eq.runtime.cpuProfile+0x72>
 1055c2f:	48 83 ec 28 	sub	rsp, 40
 1055c33:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055c38:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055c3d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055c42:	48 8b 08 	mov	rcx, qword ptr [rax]
 1055c45:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1055c4a:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1055c4d:	75 3f 	jne	63 <_type..eq.runtime.cpuProfile+0x6e>
 1055c4f:	0f b6 48 08 	movzx	ecx, byte ptr [rax + 8]
 1055c53:	38 4a 08 	cmp	byte ptr [rdx + 8], cl
 1055c56:	74 10 	je	16 <_type..eq.runtime.cpuProfile+0x48>
 1055c58:	31 c0 	xor	eax, eax
 1055c5a:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055c5e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055c63:	48 83 c4 28 	add	rsp, 40
 1055c67:	c3 	ret
 1055c68:	48 8d 4a 10 	lea	rcx, [rdx + 16]
 1055c6c:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1055c70:	48 83 c0 10 	add	rax, 16
 1055c74:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055c79:	48 c7 44 24 10 60 1f 00 00 	mov	qword ptr [rsp + 16], 8032
 1055c82:	e8 69 c4 fa ff 	call	-342935 <_runtime.memequal>
 1055c87:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055c8c:	eb cc 	jmp	-52 <_type..eq.runtime.cpuProfile+0x3a>
 1055c8e:	31 c0 	xor	eax, eax
 1055c90:	eb c8 	jmp	-56 <_type..eq.runtime.cpuProfile+0x3a>
 1055c92:	e8 39 af ff ff 	call	-20679 <_runtime.morestack_noctxt>
 1055c97:	eb 87 	jmp	-121 <_type..eq.runtime.cpuProfile>
 1055c99:	cc 	int3
 1055c9a:	cc 	int3
 1055c9b:	cc 	int3
 1055c9c:	cc 	int3
 1055c9d:	cc 	int3
 1055c9e:	cc 	int3
 1055c9f:	cc 	int3

_type..eq.runtime.dbgVar:
 1055ca0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055ca9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055cad:	76 6f 	jbe	111 <_type..eq.runtime.dbgVar+0x7e>
 1055caf:	48 83 ec 28 	sub	rsp, 40
 1055cb3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055cb8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055cbd:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055cc2:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1055cc6:	48 8b 10 	mov	rdx, qword ptr [rax]
 1055cc9:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1055cce:	48 8b 33 	mov	rsi, qword ptr [rbx]
 1055cd1:	48 39 4b 08 	cmp	qword ptr [rbx + 8], rcx
 1055cd5:	74 23 	je	35 <_type..eq.runtime.dbgVar+0x5a>
 1055cd7:	31 c9 	xor	ecx, ecx
 1055cd9:	84 c9 	test	cl, cl
 1055cdb:	74 19 	je	25 <_type..eq.runtime.dbgVar+0x56>
 1055cdd:	48 8b 4b 10 	mov	rcx, qword ptr [rbx + 16]
 1055ce1:	48 39 48 10 	cmp	qword ptr [rax + 16], rcx
 1055ce5:	0f 94 c0 	sete	al
 1055ce8:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055cec:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055cf1:	48 83 c4 28 	add	rsp, 40
 1055cf5:	c3 	ret
 1055cf6:	31 c0 	xor	eax, eax
 1055cf8:	eb ee 	jmp	-18 <_type..eq.runtime.dbgVar+0x48>
 1055cfa:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1055cfe:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 1055d03:	48 89 4c 24 10 	mov	qword ptr [rsp + 16], rcx
 1055d08:	e8 e3 c3 fa ff 	call	-343069 <_runtime.memequal>
 1055d0d:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1055d12:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055d17:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 1055d1c:	eb bb 	jmp	-69 <_type..eq.runtime.dbgVar+0x39>
 1055d1e:	e8 ad ae ff ff 	call	-20819 <_runtime.morestack_noctxt>
 1055d23:	e9 78 ff ff ff 	jmp	-136 <_type..eq.runtime.dbgVar>
 1055d28:	cc 	int3
 1055d29:	cc 	int3
 1055d2a:	cc 	int3
 1055d2b:	cc 	int3
 1055d2c:	cc 	int3
 1055d2d:	cc 	int3
 1055d2e:	cc 	int3
 1055d2f:	cc 	int3

_runtime.(*errorString).Error:
 1055d30:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055d39:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055d3d:	76 78 	jbe	120 <_runtime.(*errorString).Error+0x87>
 1055d3f:	48 83 ec 40 	sub	rsp, 64
 1055d43:	48 89 6c 24 38 	mov	qword ptr [rsp + 56], rbp
 1055d48:	48 8d 6c 24 38 	lea	rbp, [rsp + 56]
 1055d4d:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 1055d51:	48 85 db 	test	rbx, rbx
 1055d54:	75 6b 	jne	107 <_runtime.(*errorString).Error+0x91>
 1055d56:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1055d5b:	48 85 c0 	test	rax, rax
 1055d5e:	74 51 	je	81 <_runtime.(*errorString).Error+0x81>
 1055d60:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1055d64:	48 8b 00 	mov	rax, qword ptr [rax]
 1055d67:	48 c7 04 24 00 00 00 00 	mov	qword ptr [rsp], 0
 1055d6f:	48 8d 15 44 dc 01 00 	lea	rdx, [rip + 121924]
 1055d76:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1055d7b:	48 c7 44 24 10 0f 00 00 00 	mov	qword ptr [rsp + 16], 15
 1055d84:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 1055d89:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 1055d8e:	e8 7d ac fe ff 	call	-86915 <_runtime.concatstring2>
 1055d93:	48 8b 44 24 28 	mov	rax, qword ptr [rsp + 40]
 1055d98:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1055d9d:	48 89 44 24 50 	mov	qword ptr [rsp + 80], rax
 1055da2:	48 89 4c 24 58 	mov	qword ptr [rsp + 88], rcx
 1055da7:	48 8b 6c 24 38 	mov	rbp, qword ptr [rsp + 56]
 1055dac:	48 83 c4 40 	add	rsp, 64
 1055db0:	c3 	ret
 1055db1:	e8 da 0b fb ff 	call	-324646 <_runtime.panicwrap>
 1055db6:	90 	nop
 1055db7:	e8 14 ae ff ff 	call	-20972 <_runtime.morestack_noctxt>
 1055dbc:	e9 6f ff ff ff 	jmp	-145 <_runtime.(*errorString).Error>
 1055dc1:	48 8d 7c 24 48 	lea	rdi, [rsp + 72]
 1055dc6:	48 39 3b 	cmp	qword ptr [rbx], rdi
 1055dc9:	75 8b 	jne	-117 <_runtime.(*errorString).Error+0x26>
 1055dcb:	48 89 23 	mov	qword ptr [rbx], rsp
 1055dce:	eb 86 	jmp	-122 <_runtime.(*errorString).Error+0x26>

_type..eq.runtime.finblock:
 1055dd0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055dd9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055ddd:	76 76 	jbe	118 <_type..eq.runtime.finblock+0x85>
 1055ddf:	48 83 ec 28 	sub	rsp, 40
 1055de3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055de8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055ded:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055df2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055df6:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1055dfb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055e00:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 1055e09:	e8 e2 c2 fa ff 	call	-343326 <_runtime.memequal>
 1055e0e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055e13:	75 10 	jne	16 <_type..eq.runtime.finblock+0x55>
 1055e15:	31 c0 	xor	eax, eax
 1055e17:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055e1b:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055e20:	48 83 c4 28 	add	rsp, 40
 1055e24:	c3 	ret
 1055e25:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055e2a:	48 83 c0 18 	add	rax, 24
 1055e2e:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055e32:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055e37:	48 83 c0 18 	add	rax, 24
 1055e3b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055e40:	48 c7 44 24 10 c8 0f 00 00 	mov	qword ptr [rsp + 16], 4040
 1055e49:	e8 a2 c2 fa ff 	call	-343390 <_runtime.memequal>
 1055e4e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055e53:	eb c2 	jmp	-62 <_type..eq.runtime.finblock+0x47>
 1055e55:	e8 76 ad ff ff 	call	-21130 <_runtime.morestack_noctxt>
 1055e5a:	e9 71 ff ff ff 	jmp	-143 <_type..eq.runtime.finblock>
 1055e5f:	cc 	int3

_type..eq.runtime.forcegcstate:
 1055e60:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055e69:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055e6d:	76 42 	jbe	66 <_type..eq.runtime.forcegcstate+0x51>
 1055e6f:	48 83 ec 28 	sub	rsp, 40
 1055e73:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055e78:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055e7d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055e82:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055e86:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1055e8b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1055e90:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 1055e99:	e8 52 c2 fa ff 	call	-343470 <_runtime.memequal>
 1055e9e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1055ea3:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1055ea7:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055eac:	48 83 c4 28 	add	rsp, 40
 1055eb0:	c3 	ret
 1055eb1:	e8 1a ad ff ff 	call	-21222 <_runtime.morestack_noctxt>
 1055eb6:	eb a8 	jmp	-88 <_type..eq.runtime.forcegcstate>
 1055eb8:	cc 	int3
 1055eb9:	cc 	int3
 1055eba:	cc 	int3
 1055ebb:	cc 	int3
 1055ebc:	cc 	int3
 1055ebd:	cc 	int3
 1055ebe:	cc 	int3
 1055ebf:	cc 	int3

_type..eq.runtime.gcControllerState:
 1055ec0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055ec9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055ecd:	0f 86 8c 00 00 00 	jbe	140 <_type..eq.runtime.gcControllerState+0x9f>
 1055ed3:	48 83 ec 28 	sub	rsp, 40
 1055ed7:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1055edc:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1055ee1:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055ee6:	48 89 04 24 	mov	qword ptr [rsp], rax
 1055eea:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1055eef:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1055ef4:	48 c7 44 24 10 40 00 00 00 	mov	qword ptr [rsp + 16], 64
 1055efd:	e8 ee c1 fa ff 	call	-343570 <_runtime.memequal>
 1055f02:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1055f07:	74 52 	je	82 <_type..eq.runtime.gcControllerState+0x9b>
 1055f09:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1055f0e:	f2 0f 10 40 40 	movsd	xmm0, qword ptr [rax + 64]
 1055f13:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1055f18:	f2 0f 10 49 40 	movsd	xmm1, qword ptr [rcx + 64]
 1055f1d:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 1055f21:	75 38 	jne	56 <_type..eq.runtime.gcControllerState+0x9b>
 1055f23:	7a 36 	jp	54 <_type..eq.runtime.gcControllerState+0x9b>
 1055f25:	f2 0f 10 40 48 	movsd	xmm0, qword ptr [rax + 72]
 1055f2a:	f2 0f 10 49 48 	movsd	xmm1, qword ptr [rcx + 72]
 1055f2f:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 1055f33:	75 26 	jne	38 <_type..eq.runtime.gcControllerState+0x9b>
 1055f35:	7a 24 	jp	36 <_type..eq.runtime.gcControllerState+0x9b>
 1055f37:	f2 0f 10 40 50 	movsd	xmm0, qword ptr [rax + 80]
 1055f3c:	f2 0f 10 49 50 	movsd	xmm1, qword ptr [rcx + 80]
 1055f41:	66 0f 2e c8 	ucomisd	xmm1, xmm0
 1055f45:	0f 94 c1 	sete	cl
 1055f48:	0f 9b c0 	setnp	al
 1055f4b:	21 c1 	and	ecx, eax
 1055f4d:	88 4c 24 40 	mov	byte ptr [rsp + 64], cl
 1055f51:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1055f56:	48 83 c4 28 	add	rsp, 40
 1055f5a:	c3 	ret
 1055f5b:	31 c9 	xor	ecx, ecx
 1055f5d:	eb ee 	jmp	-18 <_type..eq.runtime.gcControllerState+0x8d>
 1055f5f:	e8 6c ac ff ff 	call	-21396 <_runtime.morestack_noctxt>
 1055f64:	e9 57 ff ff ff 	jmp	-169 <_type..eq.runtime.gcControllerState>
 1055f69:	cc 	int3
 1055f6a:	cc 	int3
 1055f6b:	cc 	int3
 1055f6c:	cc 	int3
 1055f6d:	cc 	int3
 1055f6e:	cc 	int3
 1055f6f:	cc 	int3

_type..eq.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }:
 1055f70:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1055f75:	8b 08 	mov	ecx, dword ptr [rax]
 1055f77:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1055f7c:	39 0a 	cmp	dword ptr [rdx], ecx
 1055f7e:	75 1a 	jne	26 <_type..eq.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x2a>
 1055f80:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1055f84:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 1055f88:	75 10 	jne	16 <_type..eq.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x2a>
 1055f8a:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 1055f8e:	48 39 48 10 	cmp	qword ptr [rax + 16], rcx
 1055f92:	0f 94 c0 	sete	al
 1055f95:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1055f99:	c3 	ret
 1055f9a:	31 c0 	xor	eax, eax
 1055f9c:	eb f7 	jmp	-9 <_type..eq.struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x25>
 1055f9e:	cc 	int3
 1055f9f:	cc 	int3

_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }:
 1055fa0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1055fa5:	48 8b 4c 24 08 	mov	rcx, qword ptr [rsp + 8]
 1055faa:	31 d2 	xor	edx, edx
 1055fac:	eb 03 	jmp	3 <_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x11>
 1055fae:	48 ff c2 	inc	rdx
 1055fb1:	48 83 fa 43 	cmp	rdx, 67
 1055fb5:	7d 32 	jge	50 <_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x49>
 1055fb7:	48 8d 1c 52 	lea	rbx, [rdx + 2*rdx]
 1055fbb:	8b 34 d9 	mov	esi, dword ptr [rcx + 8*rbx]
 1055fbe:	8b 3c d8 	mov	edi, dword ptr [rax + 8*rbx]
 1055fc1:	39 fe 	cmp	esi, edi
 1055fc3:	75 1e 	jne	30 <_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x43>
 1055fc5:	48 8b 74 d9 08 	mov	rsi, qword ptr [rcx + 8*rbx + 8]
 1055fca:	48 8b 7c d8 08 	mov	rdi, qword ptr [rax + 8*rbx + 8]
 1055fcf:	48 39 fe 	cmp	rsi, rdi
 1055fd2:	75 0f 	jne	15 <_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0x43>
 1055fd4:	48 8b 74 d9 10 	mov	rsi, qword ptr [rcx + 8*rbx + 16]
 1055fd9:	48 8b 5c d8 10 	mov	rbx, qword ptr [rax + 8*rbx + 16]
 1055fde:	48 39 f3 	cmp	rbx, rsi
 1055fe1:	74 cb 	je	-53 <_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }+0xe>
 1055fe3:	c6 44 24 18 00 	mov	byte ptr [rsp + 24], 0
 1055fe8:	c3 	ret
 1055fe9:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 1055fee:	c3 	ret
 1055fef:	cc 	int3

_type..eq.runtime.mstats:
 1055ff0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1055ff9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1055ffd:	0f 86 75 01 00 00 	jbe	373 <_type..eq.runtime.mstats+0x188>
 1056003:	48 83 ec 28 	sub	rsp, 40
 1056007:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 105600c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1056011:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056016:	48 89 04 24 	mov	qword ptr [rsp], rax
 105601a:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105601f:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056024:	48 c7 44 24 10 c8 10 00 00 	mov	qword ptr [rsp + 16], 4296
 105602d:	e8 be c0 fa ff 	call	-343874 <_runtime.memequal>
 1056032:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1056037:	0f 84 2a 01 00 00 	je	298 <_type..eq.runtime.mstats+0x177>
 105603d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056042:	f2 0f 10 80 c8 10 00 00 	movsd	xmm0, qword ptr [rax + 4296]
 105604a:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105604f:	f2 0f 10 89 c8 10 00 00 	movsd	xmm1, qword ptr [rcx + 4296]
 1056057:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 105605b:	0f 85 ff 00 00 00 	jne	255 <_type..eq.runtime.mstats+0x170>
 1056061:	0f 8a f9 00 00 00 	jp	249 <_type..eq.runtime.mstats+0x170>
 1056067:	0f b6 90 d0 10 00 00 	movzx	edx, byte ptr [rax + 4304]
 105606e:	38 91 d0 10 00 00 	cmp	byte ptr [rcx + 4304], dl
 1056074:	0f 85 df 00 00 00 	jne	223 <_type..eq.runtime.mstats+0x169>
 105607a:	0f b6 90 d1 10 00 00 	movzx	edx, byte ptr [rax + 4305]
 1056081:	38 91 d1 10 00 00 	cmp	byte ptr [rcx + 4305], dl
 1056087:	0f 84 9c 00 00 00 	je	156 <_type..eq.runtime.mstats+0x139>
 105608d:	31 d2 	xor	edx, edx
 105608f:	84 d2 	test	dl, dl
 1056091:	75 5d 	jne	93 <_type..eq.runtime.mstats+0x100>
 1056093:	31 d2 	xor	edx, edx
 1056095:	84 d2 	test	dl, dl
 1056097:	74 53 	je	83 <_type..eq.runtime.mstats+0xfc>
 1056099:	f2 0f 10 80 40 17 00 00 	movsd	xmm0, qword ptr [rax + 5952]
 10560a1:	f2 0f 10 89 40 17 00 00 	movsd	xmm1, qword ptr [rcx + 5952]
 10560a9:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 10560ad:	75 02 	jne	2 <_type..eq.runtime.mstats+0xc1>
 10560af:	7b 10 	jnp	16 <_type..eq.runtime.mstats+0xd1>
 10560b1:	31 c0 	xor	eax, eax
 10560b3:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10560b7:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10560bc:	48 83 c4 28 	add	rsp, 40
 10560c0:	c3 	ret
 10560c1:	48 05 48 17 00 00 	add	rax, 5960
 10560c7:	48 89 04 24 	mov	qword ptr [rsp], rax
 10560cb:	48 8d 81 48 17 00 00 	lea	rax, [rcx + 5960]
 10560d2:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10560d7:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 10560e0:	e8 0b c0 fa ff 	call	-344053 <_runtime.memequal>
 10560e5:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 10560ea:	eb c7 	jmp	-57 <_type..eq.runtime.mstats+0xc3>
 10560ec:	31 c0 	xor	eax, eax
 10560ee:	eb c3 	jmp	-61 <_type..eq.runtime.mstats+0xc3>
 10560f0:	48 8d 90 20 17 00 00 	lea	rdx, [rax + 5920]
 10560f7:	48 89 14 24 	mov	qword ptr [rsp], rdx
 10560fb:	48 8d 91 20 17 00 00 	lea	rdx, [rcx + 5920]
 1056102:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1056107:	48 c7 44 24 10 20 00 00 00 	mov	qword ptr [rsp + 16], 32
 1056110:	e8 db bf fa ff 	call	-344101 <_runtime.memequal>
 1056115:	0f b6 54 24 18 	movzx	edx, byte ptr [rsp + 24]
 105611a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 105611f:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1056124:	e9 6c ff ff ff 	jmp	-148 <_type..eq.runtime.mstats+0xa5>
 1056129:	48 8d 90 d8 10 00 00 	lea	rdx, [rax + 4312]
 1056130:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1056134:	48 8d 91 d8 10 00 00 	lea	rdx, [rcx + 4312]
 105613b:	48 89 54 24 08 	mov	qword ptr [rsp + 8], rdx
 1056140:	e8 5b fe ff ff 	call	-421 <_type..eq.[67]struct { runtime.size uint32; runtime.nmalloc uint64; runtime.nfree uint64 }>
 1056145:	0f b6 54 24 10 	movzx	edx, byte ptr [rsp + 16]
 105614a:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 105614f:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1056154:	e9 36 ff ff ff 	jmp	-202 <_type..eq.runtime.mstats+0x9f>
 1056159:	31 d2 	xor	edx, edx
 105615b:	e9 2f ff ff ff 	jmp	-209 <_type..eq.runtime.mstats+0x9f>
 1056160:	31 d2 	xor	edx, edx
 1056162:	e9 28 ff ff ff 	jmp	-216 <_type..eq.runtime.mstats+0x9f>
 1056167:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 105616c:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1056171:	31 d2 	xor	edx, edx
 1056173:	e9 17 ff ff ff 	jmp	-233 <_type..eq.runtime.mstats+0x9f>
 1056178:	e8 53 aa ff ff 	call	-21933 <_runtime.morestack_noctxt>
 105617d:	e9 6e fe ff ff 	jmp	-402 <_type..eq.runtime.mstats>
 1056182:	cc 	int3
 1056183:	cc 	int3
 1056184:	cc 	int3
 1056185:	cc 	int3
 1056186:	cc 	int3
 1056187:	cc 	int3
 1056188:	cc 	int3
 1056189:	cc 	int3
 105618a:	cc 	int3
 105618b:	cc 	int3
 105618c:	cc 	int3
 105618d:	cc 	int3
 105618e:	cc 	int3
 105618f:	cc 	int3

_runtime.(*plainError).Error:
 1056190:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056199:	48 83 ec 08 	sub	rsp, 8
 105619d:	48 89 2c 24 	mov	qword ptr [rsp], rbp
 10561a1:	48 8d 2c 24 	lea	rbp, [rsp]
 10561a5:	48 8b 59 20 	mov	rbx, qword ptr [rcx + 32]
 10561a9:	48 85 db 	test	rbx, rbx
 10561ac:	75 2a 	jne	42 <_runtime.(*plainError).Error+0x48>
 10561ae:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10561b3:	48 85 c0 	test	rax, rax
 10561b6:	74 1a 	je	26 <_runtime.(*plainError).Error+0x42>
 10561b8:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 10561bc:	48 8b 00 	mov	rax, qword ptr [rax]
 10561bf:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10561c4:	48 89 4c 24 20 	mov	qword ptr [rsp + 32], rcx
 10561c9:	48 8b 2c 24 	mov	rbp, qword ptr [rsp]
 10561cd:	48 83 c4 08 	add	rsp, 8
 10561d1:	c3 	ret
 10561d2:	e8 b9 07 fb ff 	call	-325703 <_runtime.panicwrap>
 10561d7:	90 	nop
 10561d8:	48 8d 7c 24 10 	lea	rdi, [rsp + 16]
 10561dd:	48 39 3b 	cmp	qword ptr [rbx], rdi
 10561e0:	75 cc 	jne	-52 <_runtime.(*plainError).Error+0x1e>
 10561e2:	48 89 23 	mov	qword ptr [rbx], rsp
 10561e5:	eb c7 	jmp	-57 <_runtime.(*plainError).Error+0x1e>
 10561e7:	cc 	int3
 10561e8:	cc 	int3
 10561e9:	cc 	int3
 10561ea:	cc 	int3
 10561eb:	cc 	int3
 10561ec:	cc 	int3
 10561ed:	cc 	int3
 10561ee:	cc 	int3
 10561ef:	cc 	int3

_type..eq.struct { runtime.user bool; runtime.runnable runtime.gQueue; runtime.n int32 }:
 10561f0:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 10561f5:	0f b6 08 	movzx	ecx, byte ptr [rax]
 10561f8:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 10561fd:	38 0a 	cmp	byte ptr [rdx], cl
 10561ff:	75 22 	jne	34 <_type..eq.struct { runtime.user bool; runtime.runnable runtime.gQueue; runtime.n int32 }+0x33>
 1056201:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1056205:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 1056209:	75 18 	jne	24 <_type..eq.struct { runtime.user bool; runtime.runnable runtime.gQueue; runtime.n int32 }+0x33>
 105620b:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 105620f:	48 39 4a 10 	cmp	qword ptr [rdx + 16], rcx
 1056213:	75 0e 	jne	14 <_type..eq.struct { runtime.user bool; runtime.runnable runtime.gQueue; runtime.n int32 }+0x33>
 1056215:	8b 40 18 	mov	eax, dword ptr [rax + 24]
 1056218:	39 42 18 	cmp	dword ptr [rdx + 24], eax
 105621b:	0f 94 c0 	sete	al
 105621e:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1056222:	c3 	ret
 1056223:	31 c0 	xor	eax, eax
 1056225:	eb f7 	jmp	-9 <_type..eq.struct { runtime.user bool; runtime.runnable runtime.gQueue; runtime.n int32 }+0x2e>
 1056227:	cc 	int3
 1056228:	cc 	int3
 1056229:	cc 	int3
 105622a:	cc 	int3
 105622b:	cc 	int3
 105622c:	cc 	int3
 105622d:	cc 	int3
 105622e:	cc 	int3
 105622f:	cc 	int3

_type..eq.struct { runtime.lock runtime.mutex; runtime.stack runtime.gList; runtime.noStack runtime.gList; runtime.n int32 }:
 1056230:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056239:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105623d:	76 42 	jbe	66 <_type..eq.struct { runtime.lock runtime.mutex; runtime.stack runtime.gList; runtime.noStack runtime.gList; runtime.n int32 }+0x51>
 105623f:	48 83 ec 28 	sub	rsp, 40
 1056243:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056248:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105624d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056252:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056256:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 105625b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1056260:	48 c7 44 24 10 1c 00 00 00 	mov	qword ptr [rsp + 16], 28
 1056269:	e8 82 be fa ff 	call	-344446 <_runtime.memequal>
 105626e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1056273:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056277:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105627c:	48 83 c4 28 	add	rsp, 40
 1056280:	c3 	ret
 1056281:	e8 4a a9 ff ff 	call	-22198 <_runtime.morestack_noctxt>
 1056286:	eb a8 	jmp	-88 <_type..eq.struct { runtime.lock runtime.mutex; runtime.stack runtime.gList; runtime.noStack runtime.gList; runtime.n int32 }>
 1056288:	cc 	int3
 1056289:	cc 	int3
 105628a:	cc 	int3
 105628b:	cc 	int3
 105628c:	cc 	int3
 105628d:	cc 	int3
 105628e:	cc 	int3
 105628f:	cc 	int3

_type..eq.runtime.semaRoot:
 1056290:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056299:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105629d:	76 42 	jbe	66 <_type..eq.runtime.semaRoot+0x51>
 105629f:	48 83 ec 28 	sub	rsp, 40
 10562a3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10562a8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10562ad:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 10562b2:	48 89 04 24 	mov	qword ptr [rsp], rax
 10562b6:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10562bb:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 10562c0:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 10562c9:	e8 22 be fa ff 	call	-344542 <_runtime.memequal>
 10562ce:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 10562d3:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10562d7:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10562dc:	48 83 c4 28 	add	rsp, 40
 10562e0:	c3 	ret
 10562e1:	e8 ea a8 ff ff 	call	-22294 <_runtime.morestack_noctxt>
 10562e6:	eb a8 	jmp	-88 <_type..eq.runtime.semaRoot>
 10562e8:	cc 	int3
 10562e9:	cc 	int3
 10562ea:	cc 	int3
 10562eb:	cc 	int3
 10562ec:	cc 	int3
 10562ed:	cc 	int3
 10562ee:	cc 	int3
 10562ef:	cc 	int3

_type..eq.runtime.sigTabT:
 10562f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10562f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10562fd:	76 5e 	jbe	94 <_type..eq.runtime.sigTabT+0x6d>
 10562ff:	48 83 ec 28 	sub	rsp, 40
 1056303:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056308:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105630d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056312:	8b 08 	mov	ecx, dword ptr [rax]
 1056314:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1056319:	39 0a 	cmp	dword ptr [rdx], ecx
 105631b:	75 3c 	jne	60 <_type..eq.runtime.sigTabT+0x69>
 105631d:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1056321:	48 8b 5a 10 	mov	rbx, qword ptr [rdx + 16]
 1056325:	48 8b 52 08 	mov	rdx, qword ptr [rdx + 8]
 1056329:	48 39 58 10 	cmp	qword ptr [rax + 16], rbx
 105632d:	74 10 	je	16 <_type..eq.runtime.sigTabT+0x4f>
 105632f:	31 c0 	xor	eax, eax
 1056331:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056335:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105633a:	48 83 c4 28 	add	rsp, 40
 105633e:	c3 	ret
 105633f:	48 89 14 24 	mov	qword ptr [rsp], rdx
 1056343:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056348:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 105634d:	e8 9e bd fa ff 	call	-344674 <_runtime.memequal>
 1056352:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1056357:	eb d8 	jmp	-40 <_type..eq.runtime.sigTabT+0x41>
 1056359:	31 c0 	xor	eax, eax
 105635b:	eb d4 	jmp	-44 <_type..eq.runtime.sigTabT+0x41>
 105635d:	e8 6e a8 ff ff 	call	-22418 <_runtime.morestack_noctxt>
 1056362:	eb 8c 	jmp	-116 <_type..eq.runtime.sigTabT>
 1056364:	cc 	int3
 1056365:	cc 	int3
 1056366:	cc 	int3
 1056367:	cc 	int3
 1056368:	cc 	int3
 1056369:	cc 	int3
 105636a:	cc 	int3
 105636b:	cc 	int3
 105636c:	cc 	int3
 105636d:	cc 	int3
 105636e:	cc 	int3
 105636f:	cc 	int3

_type..eq.runtime.sweepdata:
 1056370:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056379:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105637d:	76 63 	jbe	99 <_type..eq.runtime.sweepdata+0x72>
 105637f:	48 83 ec 28 	sub	rsp, 40
 1056383:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056388:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105638d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056392:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056396:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 105639b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 10563a0:	48 c7 44 24 10 12 00 00 00 	mov	qword ptr [rsp + 16], 18
 10563a9:	e8 42 bd fa ff 	call	-344766 <_runtime.memequal>
 10563ae:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10563b3:	74 29 	je	41 <_type..eq.runtime.sweepdata+0x6e>
 10563b5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10563ba:	8b 48 14 	mov	ecx, dword ptr [rax + 20]
 10563bd:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10563c2:	39 4a 14 	cmp	dword ptr [rdx + 20], ecx
 10563c5:	75 17 	jne	23 <_type..eq.runtime.sweepdata+0x6e>
 10563c7:	8b 4a 18 	mov	ecx, dword ptr [rdx + 24]
 10563ca:	39 48 18 	cmp	dword ptr [rax + 24], ecx
 10563cd:	0f 94 c0 	sete	al
 10563d0:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 10563d4:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 10563d9:	48 83 c4 28 	add	rsp, 40
 10563dd:	c3 	ret
 10563de:	31 c0 	xor	eax, eax
 10563e0:	eb ee 	jmp	-18 <_type..eq.runtime.sweepdata+0x60>
 10563e2:	e8 e9 a7 ff ff 	call	-22551 <_runtime.morestack_noctxt>
 10563e7:	eb 87 	jmp	-121 <_type..eq.runtime.sweepdata>
 10563e9:	cc 	int3
 10563ea:	cc 	int3
 10563eb:	cc 	int3
 10563ec:	cc 	int3
 10563ed:	cc 	int3
 10563ee:	cc 	int3
 10563ef:	cc 	int3

_type..eq.runtime.traceStackTable:
 10563f0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10563f9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10563fd:	76 7e 	jbe	126 <_type..eq.runtime.traceStackTable+0x8d>
 10563ff:	48 83 ec 28 	sub	rsp, 40
 1056403:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056408:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105640d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056412:	48 8b 08 	mov	rcx, qword ptr [rax]
 1056415:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 105641a:	48 39 0a 	cmp	qword ptr [rdx], rcx
 105641d:	75 5a 	jne	90 <_type..eq.runtime.traceStackTable+0x89>
 105641f:	8b 48 08 	mov	ecx, dword ptr [rax + 8]
 1056422:	39 4a 08 	cmp	dword ptr [rdx + 8], ecx
 1056425:	75 4e 	jne	78 <_type..eq.runtime.traceStackTable+0x85>
 1056427:	48 8b 48 10 	mov	rcx, qword ptr [rax + 16]
 105642b:	48 39 4a 10 	cmp	qword ptr [rdx + 16], rcx
 105642f:	75 40 	jne	64 <_type..eq.runtime.traceStackTable+0x81>
 1056431:	48 8b 4a 18 	mov	rcx, qword ptr [rdx + 24]
 1056435:	48 39 48 18 	cmp	qword ptr [rax + 24], rcx
 1056439:	74 10 	je	16 <_type..eq.runtime.traceStackTable+0x5b>
 105643b:	31 c0 	xor	eax, eax
 105643d:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056441:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1056446:	48 83 c4 28 	add	rsp, 40
 105644a:	c3 	ret
 105644b:	48 8d 4a 20 	lea	rcx, [rdx + 32]
 105644f:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1056453:	48 83 c0 20 	add	rax, 32
 1056457:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 105645c:	48 c7 44 24 10 00 00 01 00 	mov	qword ptr [rsp + 16], 65536
 1056465:	e8 86 bc fa ff 	call	-344954 <_runtime.memequal>
 105646a:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 105646f:	eb cc 	jmp	-52 <_type..eq.runtime.traceStackTable+0x4d>
 1056471:	31 c0 	xor	eax, eax
 1056473:	eb c8 	jmp	-56 <_type..eq.runtime.traceStackTable+0x4d>
 1056475:	31 c0 	xor	eax, eax
 1056477:	eb c4 	jmp	-60 <_type..eq.runtime.traceStackTable+0x4d>
 1056479:	31 c0 	xor	eax, eax
 105647b:	eb c0 	jmp	-64 <_type..eq.runtime.traceStackTable+0x4d>
 105647d:	e8 4e a7 ff ff 	call	-22706 <_runtime.morestack_noctxt>
 1056482:	e9 69 ff ff ff 	jmp	-151 <_type..eq.runtime.traceStackTable>
 1056487:	cc 	int3
 1056488:	cc 	int3
 1056489:	cc 	int3
 105648a:	cc 	int3
 105648b:	cc 	int3
 105648c:	cc 	int3
 105648d:	cc 	int3
 105648e:	cc 	int3
 105648f:	cc 	int3

_type..eq.[10]string:
 1056490:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056499:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105649d:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[10]string+0xa8>
 10564a3:	48 83 ec 30 	sub	rsp, 48
 10564a7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10564ac:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10564b1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10564b6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10564bb:	31 d2 	xor	edx, edx
 10564bd:	eb 19 	jmp	25 <_type..eq.[10]string+0x48>
 10564bf:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10564c4:	48 8d 53 01 	lea	rdx, [rbx + 1]
 10564c8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10564cd:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10564d2:	48 89 d8 	mov	rax, rbx
 10564d5:	48 89 f1 	mov	rcx, rsi
 10564d8:	48 83 fa 0a 	cmp	rdx, 10
 10564dc:	7d 4b 	jge	75 <_type..eq.[10]string+0x99>
 10564de:	48 89 d3 	mov	rbx, rdx
 10564e1:	48 c1 e2 04 	shl	rdx, 4
 10564e5:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 10564ea:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 10564ee:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 10564f2:	48 01 ca 	add	rdx, rcx
 10564f5:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 10564f9:	75 1f 	jne	31 <_type..eq.[10]string+0x8a>
 10564fb:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1056500:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1056504:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1056509:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 105650e:	e8 dd bb fa ff 	call	-345123 <_runtime.memequal>
 1056513:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1056518:	75 a5 	jne	-91 <_type..eq.[10]string+0x2f>
 105651a:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 105651f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1056524:	48 83 c4 30 	add	rsp, 48
 1056528:	c3 	ret
 1056529:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 105652e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1056533:	48 83 c4 30 	add	rsp, 48
 1056537:	c3 	ret
 1056538:	e8 93 a6 ff ff 	call	-22893 <_runtime.morestack_noctxt>
 105653d:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[10]string>
 1056542:	cc 	int3
 1056543:	cc 	int3
 1056544:	cc 	int3
 1056545:	cc 	int3
 1056546:	cc 	int3
 1056547:	cc 	int3
 1056548:	cc 	int3
 1056549:	cc 	int3
 105654a:	cc 	int3
 105654b:	cc 	int3
 105654c:	cc 	int3
 105654d:	cc 	int3
 105654e:	cc 	int3
 105654f:	cc 	int3

_type..eq.[18]runtime.dbgVar:
 1056550:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056559:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105655d:	0f 86 b2 00 00 00 	jbe	178 <_type..eq.[18]runtime.dbgVar+0xc5>
 1056563:	48 83 ec 38 	sub	rsp, 56
 1056567:	48 89 6c 24 30 	mov	qword ptr [rsp + 48], rbp
 105656c:	48 8d 6c 24 30 	lea	rbp, [rsp + 48]
 1056571:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 1056576:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 105657b:	31 d2 	xor	edx, edx
 105657d:	eb 03 	jmp	3 <_type..eq.[18]runtime.dbgVar+0x32>
 105657f:	48 ff c2 	inc	rdx
 1056582:	48 83 fa 12 	cmp	rdx, 18
 1056586:	7d 7e 	jge	126 <_type..eq.[18]runtime.dbgVar+0xb6>
 1056588:	48 8d 1c 52 	lea	rbx, [rdx + 2*rdx]
 105658c:	48 8b 34 d8 	mov	rsi, qword ptr [rax + 8*rbx]
 1056590:	48 8b 7c d9 08 	mov	rdi, qword ptr [rcx + 8*rbx + 8]
 1056595:	4c 8b 04 d9 	mov	r8, qword ptr [rcx + 8*rbx]
 1056599:	4c 8d 0c d8 	lea	r9, [rax + 8*rbx]
 105659d:	49 39 79 08 	cmp	qword ptr [r9 + 8], rdi
 10565a1:	74 28 	je	40 <_type..eq.[18]runtime.dbgVar+0x7b>
 10565a3:	be 01 00 00 00 	mov	esi, 1
 10565a8:	40 84 f6 	test	sil, sil
 10565ab:	75 0f 	jne	15 <_type..eq.[18]runtime.dbgVar+0x6c>
 10565ad:	48 8b 74 d9 10 	mov	rsi, qword ptr [rcx + 8*rbx + 16]
 10565b2:	48 8b 5c d8 10 	mov	rbx, qword ptr [rax + 8*rbx + 16]
 10565b7:	48 39 de 	cmp	rsi, rbx
 10565ba:	74 c3 	je	-61 <_type..eq.[18]runtime.dbgVar+0x2f>
 10565bc:	c6 44 24 50 00 	mov	byte ptr [rsp + 80], 0
 10565c1:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 10565c6:	48 83 c4 38 	add	rsp, 56
 10565ca:	c3 	ret
 10565cb:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 10565d0:	48 89 5c 24 28 	mov	qword ptr [rsp + 40], rbx
 10565d5:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10565d9:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 10565de:	48 89 7c 24 10 	mov	qword ptr [rsp + 16], rdi
 10565e3:	e8 08 bb fa ff 	call	-345336 <_runtime.memequal>
 10565e8:	0f b6 74 24 18 	movzx	esi, byte ptr [rsp + 24]
 10565ed:	83 f6 01 	xor	esi, 1
 10565f0:	48 8b 44 24 48 	mov	rax, qword ptr [rsp + 72]
 10565f5:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10565fa:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10565ff:	48 8b 5c 24 28 	mov	rbx, qword ptr [rsp + 40]
 1056604:	eb a2 	jmp	-94 <_type..eq.[18]runtime.dbgVar+0x58>
 1056606:	c6 44 24 50 01 	mov	byte ptr [rsp + 80], 1
 105660b:	48 8b 6c 24 30 	mov	rbp, qword ptr [rsp + 48]
 1056610:	48 83 c4 38 	add	rsp, 56
 1056614:	c3 	ret
 1056615:	e8 b6 a5 ff ff 	call	-23114 <_runtime.morestack_noctxt>
 105661a:	e9 31 ff ff ff 	jmp	-207 <_type..eq.[18]runtime.dbgVar>
 105661f:	cc 	int3

_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }:
 1056620:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056629:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105662d:	76 70 	jbe	112 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x7f>
 105662f:	48 83 ec 28 	sub	rsp, 40
 1056633:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056638:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 105663d:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056642:	48 8b 08 	mov	rcx, qword ptr [rax]
 1056645:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 105664a:	48 39 0a 	cmp	qword ptr [rdx], rcx
 105664d:	75 4c 	jne	76 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x7b>
 105664f:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1056653:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 1056657:	75 3e 	jne	62 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x77>
 1056659:	8b 48 10 	mov	ecx, dword ptr [rax + 16]
 105665c:	39 4a 10 	cmp	dword ptr [rdx + 16], ecx
 105665f:	74 10 	je	16 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x51>
 1056661:	31 c0 	xor	eax, eax
 1056663:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056667:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105666c:	48 83 c4 28 	add	rsp, 40
 1056670:	c3 	ret
 1056671:	48 8d 4a 18 	lea	rcx, [rdx + 24]
 1056675:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1056679:	48 83 c0 18 	add	rax, 24
 105667d:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1056682:	48 c7 44 24 10 28 00 00 00 	mov	qword ptr [rsp + 16], 40
 105668b:	e8 60 ba fa ff 	call	-345504 <_runtime.memequal>
 1056690:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1056695:	eb cc 	jmp	-52 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x43>
 1056697:	31 c0 	xor	eax, eax
 1056699:	eb c8 	jmp	-56 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x43>
 105669b:	31 c0 	xor	eax, eax
 105669d:	eb c4 	jmp	-60 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x43>
 105669f:	e8 2c a5 ff ff 	call	-23252 <_runtime.morestack_noctxt>
 10566a4:	e9 77 ff ff ff 	jmp	-137 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }>
 10566a9:	cc 	int3
 10566aa:	cc 	int3
 10566ab:	cc 	int3
 10566ac:	cc 	int3
 10566ad:	cc 	int3
 10566ae:	cc 	int3
 10566af:	cc 	int3

_type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }:
 10566b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10566b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10566bd:	76 70 	jbe	112 <_type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x7f>
 10566bf:	48 83 ec 28 	sub	rsp, 40
 10566c3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 10566c8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 10566cd:	31 c0 	xor	eax, eax
 10566cf:	eb 09 	jmp	9 <_type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x2a>
 10566d1:	48 8b 4c 24 18 	mov	rcx, qword ptr [rsp + 24]
 10566d6:	48 8d 41 01 	lea	rax, [rcx + 1]
 10566da:	48 3d fb 00 00 00 	cmp	rax, 251
 10566e0:	7d 3e 	jge	62 <_type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x70>
 10566e2:	48 89 44 24 18 	mov	qword ptr [rsp + 24], rax
 10566e7:	48 c1 e0 06 	shl	rax, 6
 10566eb:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 10566f0:	48 8d 1c 10 	lea	rbx, [rax + rdx]
 10566f4:	48 89 1c 24 	mov	qword ptr [rsp], rbx
 10566f8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10566fd:	48 01 d8 	add	rax, rbx
 1056700:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1056705:	e8 16 ff ff ff 	call	-234 <_type..eq.struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }>
 105670a:	80 7c 24 10 00 	cmp	byte ptr [rsp + 16], 0
 105670f:	75 c0 	jne	-64 <_type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }+0x21>
 1056711:	c6 44 24 40 00 	mov	byte ptr [rsp + 64], 0
 1056716:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105671b:	48 83 c4 28 	add	rsp, 40
 105671f:	c3 	ret
 1056720:	c6 44 24 40 01 	mov	byte ptr [rsp + 64], 1
 1056725:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 105672a:	48 83 c4 28 	add	rsp, 40
 105672e:	c3 	ret
 105672f:	e8 9c a4 ff ff 	call	-23396 <_runtime.morestack_noctxt>
 1056734:	e9 77 ff ff ff 	jmp	-137 <_type..eq.[251]struct { runtime.root runtime.semaRoot; runtime.pad [40]uint8 }>
 1056739:	cc 	int3
 105673a:	cc 	int3
 105673b:	cc 	int3
 105673c:	cc 	int3
 105673d:	cc 	int3
 105673e:	cc 	int3
 105673f:	cc 	int3

_type..eq.[26]string:
 1056740:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056749:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105674d:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[26]string+0xa8>
 1056753:	48 83 ec 30 	sub	rsp, 48
 1056757:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 105675c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1056761:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056766:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 105676b:	31 d2 	xor	edx, edx
 105676d:	eb 19 	jmp	25 <_type..eq.[26]string+0x48>
 105676f:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 1056774:	48 8d 53 01 	lea	rdx, [rbx + 1]
 1056778:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 105677d:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 1056782:	48 89 d8 	mov	rax, rbx
 1056785:	48 89 f1 	mov	rcx, rsi
 1056788:	48 83 fa 1a 	cmp	rdx, 26
 105678c:	7d 4b 	jge	75 <_type..eq.[26]string+0x99>
 105678e:	48 89 d3 	mov	rbx, rdx
 1056791:	48 c1 e2 04 	shl	rdx, 4
 1056795:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 105679a:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 105679e:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 10567a2:	48 01 ca 	add	rdx, rcx
 10567a5:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 10567a9:	75 1f 	jne	31 <_type..eq.[26]string+0x8a>
 10567ab:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 10567b0:	4c 89 04 24 	mov	qword ptr [rsp], r8
 10567b4:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 10567b9:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 10567be:	e8 2d b9 fa ff 	call	-345811 <_runtime.memequal>
 10567c3:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 10567c8:	75 a5 	jne	-91 <_type..eq.[26]string+0x2f>
 10567ca:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 10567cf:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10567d4:	48 83 c4 30 	add	rsp, 48
 10567d8:	c3 	ret
 10567d9:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 10567de:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10567e3:	48 83 c4 30 	add	rsp, 48
 10567e7:	c3 	ret
 10567e8:	e8 e3 a3 ff ff 	call	-23581 <_runtime.morestack_noctxt>
 10567ed:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[26]string>
 10567f2:	cc 	int3
 10567f3:	cc 	int3
 10567f4:	cc 	int3
 10567f5:	cc 	int3
 10567f6:	cc 	int3
 10567f7:	cc 	int3
 10567f8:	cc 	int3
 10567f9:	cc 	int3
 10567fa:	cc 	int3
 10567fb:	cc 	int3
 10567fc:	cc 	int3
 10567fd:	cc 	int3
 10567fe:	cc 	int3
 10567ff:	cc 	int3

_type..eq.[32]runtime.sigTabT:
 1056800:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056809:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 105680d:	0f 86 ab 00 00 00 	jbe	171 <_type..eq.[32]runtime.sigTabT+0xbe>
 1056813:	48 83 ec 30 	sub	rsp, 48
 1056817:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 105681c:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 1056821:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056826:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 105682b:	31 d2 	xor	edx, edx
 105682d:	eb 03 	jmp	3 <_type..eq.[32]runtime.sigTabT+0x32>
 105682f:	48 ff c2 	inc	rdx
 1056832:	48 83 fa 20 	cmp	rdx, 32
 1056836:	7d 77 	jge	119 <_type..eq.[32]runtime.sigTabT+0xaf>
 1056838:	48 8d 1c 52 	lea	rbx, [rdx + 2*rdx]
 105683c:	8b 34 d8 	mov	esi, dword ptr [rax + 8*rbx]
 105683f:	8b 3c d9 	mov	edi, dword ptr [rcx + 8*rbx]
 1056842:	4c 8d 04 d9 	lea	r8, [rcx + 8*rbx]
 1056846:	39 fe 	cmp	esi, edi
 1056848:	74 18 	je	24 <_type..eq.[32]runtime.sigTabT+0x62>
 105684a:	bb 01 00 00 00 	mov	ebx, 1
 105684f:	84 db 	test	bl, bl
 1056851:	74 dc 	je	-36 <_type..eq.[32]runtime.sigTabT+0x2f>
 1056853:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 1056858:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 105685d:	48 83 c4 30 	add	rsp, 48
 1056861:	c3 	ret
 1056862:	48 8b 74 d9 08 	mov	rsi, qword ptr [rcx + 8*rbx + 8]
 1056867:	48 8b 7c d8 08 	mov	rdi, qword ptr [rax + 8*rbx + 8]
 105686c:	48 8b 5c d8 10 	mov	rbx, qword ptr [rax + 8*rbx + 16]
 1056871:	49 39 58 10 	cmp	qword ptr [r8 + 16], rbx
 1056875:	74 07 	je	7 <_type..eq.[32]runtime.sigTabT+0x7e>
 1056877:	bb 01 00 00 00 	mov	ebx, 1
 105687c:	eb d1 	jmp	-47 <_type..eq.[32]runtime.sigTabT+0x4f>
 105687e:	48 89 54 24 20 	mov	qword ptr [rsp + 32], rdx
 1056883:	48 89 3c 24 	mov	qword ptr [rsp], rdi
 1056887:	48 89 74 24 08 	mov	qword ptr [rsp + 8], rsi
 105688c:	48 89 5c 24 10 	mov	qword ptr [rsp + 16], rbx
 1056891:	e8 5a b8 fa ff 	call	-346022 <_runtime.memequal>
 1056896:	0f b6 5c 24 18 	movzx	ebx, byte ptr [rsp + 24]
 105689b:	83 f3 01 	xor	ebx, 1
 105689e:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10568a3:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10568a8:	48 8b 54 24 20 	mov	rdx, qword ptr [rsp + 32]
 10568ad:	eb a0 	jmp	-96 <_type..eq.[32]runtime.sigTabT+0x4f>
 10568af:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 10568b4:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 10568b9:	48 83 c4 30 	add	rsp, 48
 10568bd:	c3 	ret
 10568be:	e8 0d a3 ff ff 	call	-23795 <_runtime.morestack_noctxt>
 10568c3:	e9 38 ff ff ff 	jmp	-200 <_type..eq.[32]runtime.sigTabT>
 10568c8:	cc 	int3
 10568c9:	cc 	int3
 10568ca:	cc 	int3
 10568cb:	cc 	int3
 10568cc:	cc 	int3
 10568cd:	cc 	int3
 10568ce:	cc 	int3
 10568cf:	cc 	int3

_type..eq.[33]float64:
 10568d0:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 10568d5:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 10568da:	31 d2 	xor	edx, edx
 10568dc:	eb 03 	jmp	3 <_type..eq.[33]float64+0x11>
 10568de:	48 ff c2 	inc	rdx
 10568e1:	48 83 fa 21 	cmp	rdx, 33
 10568e5:	7d 18 	jge	24 <_type..eq.[33]float64+0x2f>
 10568e7:	f2 0f 10 04 d0 	movsd	xmm0, qword ptr [rax + 8*rdx]
 10568ec:	f2 0f 10 0c d1 	movsd	xmm1, qword ptr [rcx + 8*rdx]
 10568f1:	66 0f 2e c1 	ucomisd	xmm0, xmm1
 10568f5:	75 02 	jne	2 <_type..eq.[33]float64+0x29>
 10568f7:	7b e5 	jnp	-27 <_type..eq.[33]float64+0xe>
 10568f9:	c6 44 24 18 00 	mov	byte ptr [rsp + 24], 0
 10568fe:	c3 	ret
 10568ff:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 1056904:	c3 	ret
 1056905:	cc 	int3
 1056906:	cc 	int3
 1056907:	cc 	int3
 1056908:	cc 	int3
 1056909:	cc 	int3
 105690a:	cc 	int3
 105690b:	cc 	int3
 105690c:	cc 	int3
 105690d:	cc 	int3
 105690e:	cc 	int3
 105690f:	cc 	int3

_type..eq.struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }:
 1056910:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1056915:	48 8b 08 	mov	rcx, qword ptr [rax]
 1056918:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 105691d:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1056920:	75 1e 	jne	30 <_type..eq.struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x30>
 1056922:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1056926:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 105692a:	75 10 	jne	16 <_type..eq.struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x2c>
 105692c:	48 8b 4a 10 	mov	rcx, qword ptr [rdx + 16]
 1056930:	48 39 48 10 	cmp	qword ptr [rax + 16], rcx
 1056934:	0f 94 c0 	sete	al
 1056937:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 105693b:	c3 	ret
 105693c:	31 c0 	xor	eax, eax
 105693e:	eb f7 	jmp	-9 <_type..eq.struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x27>
 1056940:	31 c0 	xor	eax, eax
 1056942:	eb f3 	jmp	-13 <_type..eq.struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x27>
 1056944:	cc 	int3
 1056945:	cc 	int3
 1056946:	cc 	int3
 1056947:	cc 	int3
 1056948:	cc 	int3
 1056949:	cc 	int3
 105694a:	cc 	int3
 105694b:	cc 	int3
 105694c:	cc 	int3
 105694d:	cc 	int3
 105694e:	cc 	int3
 105694f:	cc 	int3

_type..eq.[4]struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }:
 1056950:	48 8b 44 24 08 	mov	rax, qword ptr [rsp + 8]
 1056955:	48 8b 4c 24 10 	mov	rcx, qword ptr [rsp + 16]
 105695a:	31 d2 	xor	edx, edx
 105695c:	eb 04 	jmp	4 <_type..eq.[4]struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x12>
 105695e:	48 8d 53 01 	lea	rdx, [rbx + 1]
 1056962:	48 83 fa 04 	cmp	rdx, 4
 1056966:	7d 38 	jge	56 <_type..eq.[4]struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x50>
 1056968:	48 89 d3 	mov	rbx, rdx
 105696b:	48 c1 e2 06 	shl	rdx, 6
 105696f:	48 8b 34 02 	mov	rsi, qword ptr [rdx + rax]
 1056973:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 1056977:	48 39 fe 	cmp	rsi, rdi
 105697a:	75 1e 	jne	30 <_type..eq.[4]struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x4a>
 105697c:	48 8b 74 02 08 	mov	rsi, qword ptr [rdx + rax + 8]
 1056981:	48 8b 7c 0a 08 	mov	rdi, qword ptr [rdx + rcx + 8]
 1056986:	48 39 fe 	cmp	rsi, rdi
 1056989:	75 0f 	jne	15 <_type..eq.[4]struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0x4a>
 105698b:	48 8b 74 02 10 	mov	rsi, qword ptr [rdx + rax + 16]
 1056990:	48 8b 54 0a 10 	mov	rdx, qword ptr [rdx + rcx + 16]
 1056995:	48 39 f2 	cmp	rdx, rsi
 1056998:	74 c4 	je	-60 <_type..eq.[4]struct { runtime.item runtime.stackpoolItem; _ [40]uint8 }+0xe>
 105699a:	c6 44 24 18 00 	mov	byte ptr [rsp + 24], 0
 105699f:	c3 	ret
 10569a0:	c6 44 24 18 01 	mov	byte ptr [rsp + 24], 1
 10569a5:	c3 	ret
 10569a6:	cc 	int3
 10569a7:	cc 	int3
 10569a8:	cc 	int3
 10569a9:	cc 	int3
 10569aa:	cc 	int3
 10569ab:	cc 	int3
 10569ac:	cc 	int3
 10569ad:	cc 	int3
 10569ae:	cc 	int3
 10569af:	cc 	int3

_type..eq.[8]string:
 10569b0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 10569b9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 10569bd:	0f 86 95 00 00 00 	jbe	149 <_type..eq.[8]string+0xa8>
 10569c3:	48 83 ec 30 	sub	rsp, 48
 10569c7:	48 89 6c 24 28 	mov	qword ptr [rsp + 40], rbp
 10569cc:	48 8d 6c 24 28 	lea	rbp, [rsp + 40]
 10569d1:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 10569d6:	48 8b 4c 24 40 	mov	rcx, qword ptr [rsp + 64]
 10569db:	31 d2 	xor	edx, edx
 10569dd:	eb 19 	jmp	25 <_type..eq.[8]string+0x48>
 10569df:	48 8b 5c 24 20 	mov	rbx, qword ptr [rsp + 32]
 10569e4:	48 8d 53 01 	lea	rdx, [rbx + 1]
 10569e8:	48 8b 5c 24 38 	mov	rbx, qword ptr [rsp + 56]
 10569ed:	48 8b 74 24 40 	mov	rsi, qword ptr [rsp + 64]
 10569f2:	48 89 d8 	mov	rax, rbx
 10569f5:	48 89 f1 	mov	rcx, rsi
 10569f8:	48 83 fa 08 	cmp	rdx, 8
 10569fc:	7d 4b 	jge	75 <_type..eq.[8]string+0x99>
 10569fe:	48 89 d3 	mov	rbx, rdx
 1056a01:	48 c1 e2 04 	shl	rdx, 4
 1056a05:	48 8b 74 10 08 	mov	rsi, qword ptr [rax + rdx + 8]
 1056a0a:	48 8b 3c 0a 	mov	rdi, qword ptr [rdx + rcx]
 1056a0e:	4c 8b 04 02 	mov	r8, qword ptr [rdx + rax]
 1056a12:	48 01 ca 	add	rdx, rcx
 1056a15:	48 39 72 08 	cmp	qword ptr [rdx + 8], rsi
 1056a19:	75 1f 	jne	31 <_type..eq.[8]string+0x8a>
 1056a1b:	48 89 5c 24 20 	mov	qword ptr [rsp + 32], rbx
 1056a20:	4c 89 04 24 	mov	qword ptr [rsp], r8
 1056a24:	48 89 7c 24 08 	mov	qword ptr [rsp + 8], rdi
 1056a29:	48 89 74 24 10 	mov	qword ptr [rsp + 16], rsi
 1056a2e:	e8 bd b6 fa ff 	call	-346435 <_runtime.memequal>
 1056a33:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1056a38:	75 a5 	jne	-91 <_type..eq.[8]string+0x2f>
 1056a3a:	c6 44 24 48 00 	mov	byte ptr [rsp + 72], 0
 1056a3f:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1056a44:	48 83 c4 30 	add	rsp, 48
 1056a48:	c3 	ret
 1056a49:	c6 44 24 48 01 	mov	byte ptr [rsp + 72], 1
 1056a4e:	48 8b 6c 24 28 	mov	rbp, qword ptr [rsp + 40]
 1056a53:	48 83 c4 30 	add	rsp, 48
 1056a57:	c3 	ret
 1056a58:	e8 73 a1 ff ff 	call	-24205 <_runtime.morestack_noctxt>
 1056a5d:	e9 4e ff ff ff 	jmp	-178 <_type..eq.[8]string>
 1056a62:	cc 	int3
 1056a63:	cc 	int3
 1056a64:	cc 	int3
 1056a65:	cc 	int3
 1056a66:	cc 	int3
 1056a67:	cc 	int3
 1056a68:	cc 	int3
 1056a69:	cc 	int3
 1056a6a:	cc 	int3
 1056a6b:	cc 	int3
 1056a6c:	cc 	int3
 1056a6d:	cc 	int3
 1056a6e:	cc 	int3
 1056a6f:	cc 	int3

_type..eq.struct { runtime.cycle uint32; runtime.flushed bool }:
 1056a70:	48 8b 44 24 10 	mov	rax, qword ptr [rsp + 16]
 1056a75:	8b 08 	mov	ecx, dword ptr [rax]
 1056a77:	48 8b 54 24 08 	mov	rdx, qword ptr [rsp + 8]
 1056a7c:	39 0a 	cmp	dword ptr [rdx], ecx
 1056a7e:	75 0f 	jne	15 <_type..eq.struct { runtime.cycle uint32; runtime.flushed bool }+0x1f>
 1056a80:	0f b6 40 04 	movzx	eax, byte ptr [rax + 4]
 1056a84:	38 42 04 	cmp	byte ptr [rdx + 4], al
 1056a87:	0f 94 c0 	sete	al
 1056a8a:	88 44 24 18 	mov	byte ptr [rsp + 24], al
 1056a8e:	c3 	ret
 1056a8f:	31 c0 	xor	eax, eax
 1056a91:	eb f7 	jmp	-9 <_type..eq.struct { runtime.cycle uint32; runtime.flushed bool }+0x1a>
 1056a93:	cc 	int3
 1056a94:	cc 	int3
 1056a95:	cc 	int3
 1056a96:	cc 	int3
 1056a97:	cc 	int3
 1056a98:	cc 	int3
 1056a99:	cc 	int3
 1056a9a:	cc 	int3
 1056a9b:	cc 	int3
 1056a9c:	cc 	int3
 1056a9d:	cc 	int3
 1056a9e:	cc 	int3
 1056a9f:	cc 	int3

_type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }:
 1056aa0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056aa9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1056aad:	76 5d 	jbe	93 <_type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }+0x6c>
 1056aaf:	48 83 ec 28 	sub	rsp, 40
 1056ab3:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056ab8:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1056abd:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056ac2:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056ac6:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1056acb:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056ad0:	48 c7 44 24 10 06 00 00 00 	mov	qword ptr [rsp + 16], 6
 1056ad9:	e8 12 b6 fa ff 	call	-346606 <_runtime.memequal>
 1056ade:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1056ae3:	74 23 	je	35 <_type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }+0x68>
 1056ae5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056aea:	48 8b 40 08 	mov	rax, qword ptr [rax + 8]
 1056aee:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1056af3:	48 39 41 08 	cmp	qword ptr [rcx + 8], rax
 1056af7:	0f 94 c0 	sete	al
 1056afa:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056afe:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1056b03:	48 83 c4 28 	add	rsp, 40
 1056b07:	c3 	ret
 1056b08:	31 c0 	xor	eax, eax
 1056b0a:	eb ee 	jmp	-18 <_type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }+0x5a>
 1056b0c:	e8 bf a0 ff ff 	call	-24385 <_runtime.morestack_noctxt>
 1056b11:	eb 8d 	jmp	-115 <_type..eq.struct { runtime.enabled bool; runtime.pad [3]uint8; runtime.needed bool; runtime.cgo bool; runtime.alignme uint64 }>
 1056b13:	cc 	int3
 1056b14:	cc 	int3
 1056b15:	cc 	int3
 1056b16:	cc 	int3
 1056b17:	cc 	int3
 1056b18:	cc 	int3
 1056b19:	cc 	int3
 1056b1a:	cc 	int3
 1056b1b:	cc 	int3
 1056b1c:	cc 	int3
 1056b1d:	cc 	int3
 1056b1e:	cc 	int3
 1056b1f:	cc 	int3

_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }:
 1056b20:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056b29:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1056b2d:	0f 86 ab 01 00 00 	jbe	427 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x1be>
 1056b33:	48 83 ec 28 	sub	rsp, 40
 1056b37:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056b3c:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1056b41:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056b46:	48 8b 08 	mov	rcx, qword ptr [rax]
 1056b49:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1056b4e:	48 39 0a 	cmp	qword ptr [rdx], rcx
 1056b51:	0f 85 80 01 00 00 	jne	384 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x1b7>
 1056b57:	48 8b 48 08 	mov	rcx, qword ptr [rax + 8]
 1056b5b:	48 39 4a 08 	cmp	qword ptr [rdx + 8], rcx
 1056b5f:	0f 85 72 01 00 00 	jne	370 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x1b7>
 1056b65:	b9 01 00 00 00 	mov	ecx, 1
 1056b6a:	84 c9 	test	cl, cl
 1056b6c:	0f 85 32 01 00 00 	jne	306 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x184>
 1056b72:	31 c9 	xor	ecx, ecx
 1056b74:	84 c9 	test	cl, cl
 1056b76:	0f 85 ef 00 00 00 	jne	239 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x14b>
 1056b7c:	31 c9 	xor	ecx, ecx
 1056b7e:	84 c9 	test	cl, cl
 1056b80:	0f 85 ac 00 00 00 	jne	172 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x112>
 1056b86:	31 c9 	xor	ecx, ecx
 1056b88:	84 c9 	test	cl, cl
 1056b8a:	0f 84 9e 00 00 00 	je	158 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x10e>
 1056b90:	48 8b 8a e8 00 00 00 	mov	rcx, qword ptr [rdx + 232]
 1056b97:	48 39 88 e8 00 00 00 	cmp	qword ptr [rax + 232], rcx
 1056b9e:	0f 85 86 00 00 00 	jne	134 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x10a>
 1056ba4:	0f b6 8a f0 00 00 00 	movzx	ecx, byte ptr [rdx + 240]
 1056bab:	38 88 f0 00 00 00 	cmp	byte ptr [rax + 240], cl
 1056bb1:	74 41 	je	65 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0xd4>
 1056bb3:	31 c9 	xor	ecx, ecx
 1056bb5:	84 c9 	test	cl, cl
 1056bb7:	75 10 	jne	16 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0xa9>
 1056bb9:	31 c0 	xor	eax, eax
 1056bbb:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056bbf:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1056bc4:	48 83 c4 28 	add	rsp, 40
 1056bc8:	c3 	ret
 1056bc9:	48 05 40 01 00 00 	add	rax, 320
 1056bcf:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056bd3:	48 8d 82 40 01 00 00 	lea	rax, [rdx + 320]
 1056bda:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1056bdf:	48 c7 44 24 10 50 00 00 00 	mov	qword ptr [rsp + 16], 80
 1056be8:	e8 03 b5 fa ff 	call	-346877 <_runtime.memequal>
 1056bed:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1056bf2:	eb c7 	jmp	-57 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x9b>
 1056bf4:	48 8d 88 f8 00 00 00 	lea	rcx, [rax + 248]
 1056bfb:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1056bff:	48 8d 8a f8 00 00 00 	lea	rcx, [rdx + 248]
 1056c06:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056c0b:	48 c7 44 24 10 44 00 00 00 	mov	qword ptr [rsp + 16], 68
 1056c14:	e8 d7 b4 fa ff 	call	-346921 <_runtime.memequal>
 1056c19:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1056c1e:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056c23:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1056c28:	eb 8b 	jmp	-117 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x95>
 1056c2a:	31 c9 	xor	ecx, ecx
 1056c2c:	eb 87 	jmp	-121 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x95>
 1056c2e:	31 c9 	xor	ecx, ecx
 1056c30:	eb 83 	jmp	-125 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x95>
 1056c32:	48 8d 88 98 00 00 00 	lea	rcx, [rax + 152]
 1056c39:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1056c3d:	48 8d 8a 98 00 00 00 	lea	rcx, [rdx + 152]
 1056c44:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056c49:	48 c7 44 24 10 4c 00 00 00 	mov	qword ptr [rsp + 16], 76
 1056c52:	e8 99 b4 fa ff 	call	-346983 <_runtime.memequal>
 1056c57:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1056c5c:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056c61:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1056c66:	e9 1d ff ff ff 	jmp	-227 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x68>
 1056c6b:	48 8d 88 80 00 00 00 	lea	rcx, [rax + 128]
 1056c72:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1056c76:	48 8d 8a 80 00 00 00 	lea	rcx, [rdx + 128]
 1056c7d:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056c82:	48 c7 44 24 10 14 00 00 00 	mov	qword ptr [rsp + 16], 20
 1056c8b:	e8 60 b4 fa ff 	call	-347040 <_runtime.memequal>
 1056c90:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1056c95:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056c9a:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1056c9f:	e9 da fe ff ff 	jmp	-294 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x5e>
 1056ca4:	48 8d 48 50 	lea	rcx, [rax + 80]
 1056ca8:	48 89 0c 24 	mov	qword ptr [rsp], rcx
 1056cac:	48 8d 4a 50 	lea	rcx, [rdx + 80]
 1056cb0:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056cb5:	48 c7 44 24 10 28 00 00 00 	mov	qword ptr [rsp + 16], 40
 1056cbe:	e8 2d b4 fa ff 	call	-347091 <_runtime.memequal>
 1056cc3:	0f b6 4c 24 18 	movzx	ecx, byte ptr [rsp + 24]
 1056cc8:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056ccd:	48 8b 54 24 38 	mov	rdx, qword ptr [rsp + 56]
 1056cd2:	e9 9d fe ff ff 	jmp	-355 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x54>
 1056cd7:	31 c9 	xor	ecx, ecx
 1056cd9:	e9 8c fe ff ff 	jmp	-372 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }+0x4a>
 1056cde:	e8 ed 9e ff ff 	call	-24851 <_runtime.morestack_noctxt>
 1056ce3:	e9 38 fe ff ff 	jmp	-456 <_type..eq.struct { runtime.full runtime.lfstack; runtime.empty runtime.lfstack; runtime.pad0 internal/cpu.CacheLinePad; runtime.wbufSpans struct { runtime.lock runtime.mutex; runtime.free runtime.mSpanList; runtime.busy runtime.mSpanList }; _ uint32; runtime.bytesMarked uint64; runtime.markrootNext uint32; runtime.markrootJobs uint32; runtime.nproc uint32; runtime.tstart int64; runtime.nwait uint32; runtime.ndone uint32; runtime.nFlushCacheRoots int; runtime.nDataRoots int; runtime.nBSSRoots int; runtime.nSpanRoots int; runtime.nStackRoots int; runtime.startSema uint32; runtime.markDoneSema uint32; runtime.bgMarkReady runtime.note; runtime.bgMarkDone uint32; runtime.mode runtime.gcMode; runtime.userForced bool; runtime.totaltime int64; runtime.initialHeapLive uint64; runtime.assistQueue struct { runtime.lock runtime.mutex; runtime.q runtime.gQueue }; runtime.sweepWaiters struct { runtime.lock runtime.mutex; runtime.list runtime.gList }; runtime.cycles uint32; runtime.stwprocs int32; runtime.maxprocs int32; runtime.tSweepTerm int64; runtime.tMark int64; runtime.tMarkTerm int64; runtime.tEnd int64; runtime.pauseNS int64; runtime.pauseStart int64; runtime.heap0 uint64; runtime.heap1 uint64; runtime.heap2 uint64; runtime.heapGoal uint64 }>
 1056ce8:	cc 	int3
 1056ce9:	cc 	int3
 1056cea:	cc 	int3
 1056ceb:	cc 	int3
 1056cec:	cc 	int3
 1056ced:	cc 	int3
 1056cee:	cc 	int3
 1056cef:	cc 	int3

_type..eq.struct { runtime.lock runtime.mutex; runtime.g *runtime.g; runtime.parked bool; runtime.timer *runtime.timer }:
 1056cf0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056cf9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1056cfd:	76 5d 	jbe	93 <_type..eq.struct { runtime.lock runtime.mutex; runtime.g *runtime.g; runtime.parked bool; runtime.timer *runtime.timer }+0x6c>
 1056cff:	48 83 ec 28 	sub	rsp, 40
 1056d03:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056d08:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1056d0d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056d12:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056d16:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1056d1b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056d20:	48 c7 44 24 10 11 00 00 00 	mov	qword ptr [rsp + 16], 17
 1056d29:	e8 c2 b3 fa ff 	call	-347198 <_runtime.memequal>
 1056d2e:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1056d33:	74 23 	je	35 <_type..eq.struct { runtime.lock runtime.mutex; runtime.g *runtime.g; runtime.parked bool; runtime.timer *runtime.timer }+0x68>
 1056d35:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056d3a:	48 8b 40 18 	mov	rax, qword ptr [rax + 24]
 1056d3e:	48 8b 4c 24 30 	mov	rcx, qword ptr [rsp + 48]
 1056d43:	48 39 41 18 	cmp	qword ptr [rcx + 24], rax
 1056d47:	0f 94 c0 	sete	al
 1056d4a:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056d4e:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1056d53:	48 83 c4 28 	add	rsp, 40
 1056d57:	c3 	ret
 1056d58:	31 c0 	xor	eax, eax
 1056d5a:	eb ee 	jmp	-18 <_type..eq.struct { runtime.lock runtime.mutex; runtime.g *runtime.g; runtime.parked bool; runtime.timer *runtime.timer }+0x5a>
 1056d5c:	e8 6f 9e ff ff 	call	-24977 <_runtime.morestack_noctxt>
 1056d61:	eb 8d 	jmp	-115 <_type..eq.struct { runtime.lock runtime.mutex; runtime.g *runtime.g; runtime.parked bool; runtime.timer *runtime.timer }>
 1056d63:	cc 	int3
 1056d64:	cc 	int3
 1056d65:	cc 	int3
 1056d66:	cc 	int3
 1056d67:	cc 	int3
 1056d68:	cc 	int3
 1056d69:	cc 	int3
 1056d6a:	cc 	int3
 1056d6b:	cc 	int3
 1056d6c:	cc 	int3
 1056d6d:	cc 	int3
 1056d6e:	cc 	int3
 1056d6f:	cc 	int3

_type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }:
 1056d70:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056d79:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1056d7d:	76 65 	jbe	101 <_type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }+0x74>
 1056d7f:	48 83 ec 28 	sub	rsp, 40
 1056d83:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056d88:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1056d8d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056d92:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056d96:	48 8b 4c 24 38 	mov	rcx, qword ptr [rsp + 56]
 1056d9b:	48 89 4c 24 08 	mov	qword ptr [rsp + 8], rcx
 1056da0:	48 c7 44 24 10 11 00 00 00 	mov	qword ptr [rsp + 16], 17
 1056da9:	e8 42 b3 fa ff 	call	-347326 <_runtime.memequal>
 1056dae:	80 7c 24 18 00 	cmp	byte ptr [rsp + 24], 0
 1056db3:	74 2b 	je	43 <_type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }+0x70>
 1056db5:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056dba:	48 8b 48 18 	mov	rcx, qword ptr [rax + 24]
 1056dbe:	48 8b 54 24 30 	mov	rdx, qword ptr [rsp + 48]
 1056dc3:	48 39 4a 18 	cmp	qword ptr [rdx + 24], rcx
 1056dc7:	75 17 	jne	23 <_type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }+0x70>
 1056dc9:	8b 40 20 	mov	eax, dword ptr [rax + 32]
 1056dcc:	39 42 20 	cmp	dword ptr [rdx + 32], eax
 1056dcf:	0f 94 c0 	sete	al
 1056dd2:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056dd6:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1056ddb:	48 83 c4 28 	add	rsp, 40
 1056ddf:	c3 	ret
 1056de0:	31 c0 	xor	eax, eax
 1056de2:	eb ee 	jmp	-18 <_type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }+0x62>
 1056de4:	e8 e7 9d ff ff 	call	-25113 <_runtime.morestack_noctxt>
 1056de9:	eb 85 	jmp	-123 <_type..eq.struct { runtime.lock runtime.mutex; runtime.newm runtime.muintptr; runtime.waiting bool; runtime.wake runtime.note; runtime.haveTemplateThread uint32 }>
 1056deb:	cc 	int3
 1056dec:	cc 	int3
 1056ded:	cc 	int3
 1056dee:	cc 	int3
 1056def:	cc 	int3

_type..eq.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }:
 1056df0:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056df9:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1056dfd:	76 42 	jbe	66 <_type..eq.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }+0x51>
 1056dff:	48 83 ec 28 	sub	rsp, 40
 1056e03:	48 89 6c 24 20 	mov	qword ptr [rsp + 32], rbp
 1056e08:	48 8d 6c 24 20 	lea	rbp, [rsp + 32]
 1056e0d:	48 8b 44 24 30 	mov	rax, qword ptr [rsp + 48]
 1056e12:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056e16:	48 8b 44 24 38 	mov	rax, qword ptr [rsp + 56]
 1056e1b:	48 89 44 24 08 	mov	qword ptr [rsp + 8], rax
 1056e20:	48 c7 44 24 10 21 00 00 00 	mov	qword ptr [rsp + 16], 33
 1056e29:	e8 c2 b2 fa ff 	call	-347454 <_runtime.memequal>
 1056e2e:	0f b6 44 24 18 	movzx	eax, byte ptr [rsp + 24]
 1056e33:	88 44 24 40 	mov	byte ptr [rsp + 64], al
 1056e37:	48 8b 6c 24 20 	mov	rbp, qword ptr [rsp + 32]
 1056e3c:	48 83 c4 28 	add	rsp, 40
 1056e40:	c3 	ret
 1056e41:	e8 8a 9d ff ff 	call	-25206 <_runtime.morestack_noctxt>
 1056e46:	eb a8 	jmp	-88 <_type..eq.struct { runtime.note runtime.note; runtime.mask [1]uint32; runtime.wanted [1]uint32; runtime.ignored [1]uint32; runtime.recv [1]uint32; runtime.state uint32; runtime.delivering uint32; runtime.inuse bool }>
 1056e48:	cc 	int3
 1056e49:	cc 	int3
 1056e4a:	cc 	int3
 1056e4b:	cc 	int3
 1056e4c:	cc 	int3
 1056e4d:	cc 	int3
 1056e4e:	cc 	int3
 1056e4f:	cc 	int3

_main.add:
 1056e50:	48 83 ec 10 	sub	rsp, 16
 1056e54:	48 89 6c 24 08 	mov	qword ptr [rsp + 8], rbp
 1056e59:	48 8d 6c 24 08 	lea	rbp, [rsp + 8]
 1056e5e:	c7 44 24 20 00 00 00 00 	mov	dword ptr [rsp + 32], 0
 1056e66:	c7 44 24 04 00 00 00 00 	mov	dword ptr [rsp + 4], 0
 1056e6e:	8b 44 24 18 	mov	eax, dword ptr [rsp + 24]
 1056e72:	03 44 24 1c 	add	eax, dword ptr [rsp + 28]
 1056e76:	89 44 24 04 	mov	dword ptr [rsp + 4], eax
 1056e7a:	89 44 24 20 	mov	dword ptr [rsp + 32], eax
 1056e7e:	48 8b 6c 24 08 	mov	rbp, qword ptr [rsp + 8]
 1056e83:	48 83 c4 10 	add	rsp, 16
 1056e87:	c3 	ret
 1056e88:	cc 	int3
 1056e89:	cc 	int3
 1056e8a:	cc 	int3
 1056e8b:	cc 	int3
 1056e8c:	cc 	int3
 1056e8d:	cc 	int3
 1056e8e:	cc 	int3
 1056e8f:	cc 	int3

_main.main:
 1056e90:	65 48 8b 0c 25 30 00 00 00 	mov	rcx, qword ptr gs:[48]
 1056e99:	48 3b 61 10 	cmp	rsp, qword ptr [rcx + 16]
 1056e9d:	76 2b 	jbe	43 <_main.main+0x3a>
 1056e9f:	48 83 ec 18 	sub	rsp, 24
 1056ea3:	48 89 6c 24 10 	mov	qword ptr [rsp + 16], rbp
 1056ea8:	48 8d 6c 24 10 	lea	rbp, [rsp + 16]
 1056ead:	48 b8 01 00 00 00 02 00 00 00 	movabs	rax, 8589934593
 1056eb7:	48 89 04 24 	mov	qword ptr [rsp], rax
 1056ebb:	e8 90 ff ff ff 	call	-112 <_main.add>
 1056ec0:	48 8b 6c 24 10 	mov	rbp, qword ptr [rsp + 16]
 1056ec5:	48 83 c4 18 	add	rsp, 24
 1056ec9:	c3 	ret
 1056eca:	e8 01 9d ff ff 	call	-25343 <_runtime.morestack_noctxt>
 1056ecf:	eb bf 	jmp	-65 <_main.main>
Disassembly of section __TEXT,__symbol_stub1:
__symbol_stub1:
 1085800:	ff 25 1a 58 04 00 	jmp	qword ptr [rip + 284698]
 1085806:	ff 25 1c 58 04 00 	jmp	qword ptr [rip + 284700]
 108580c:	ff 25 1e 58 04 00 	jmp	qword ptr [rip + 284702]
 1085812:	ff 25 20 58 04 00 	jmp	qword ptr [rip + 284704]
 1085818:	ff 25 22 58 04 00 	jmp	qword ptr [rip + 284706]
 108581e:	ff 25 24 58 04 00 	jmp	qword ptr [rip + 284708]
 1085824:	ff 25 26 58 04 00 	jmp	qword ptr [rip + 284710]
 108582a:	ff 25 28 58 04 00 	jmp	qword ptr [rip + 284712]
 1085830:	ff 25 2a 58 04 00 	jmp	qword ptr [rip + 284714]
 1085836:	ff 25 2c 58 04 00 	jmp	qword ptr [rip + 284716]
 108583c:	ff 25 2e 58 04 00 	jmp	qword ptr [rip + 284718]
 1085842:	ff 25 30 58 04 00 	jmp	qword ptr [rip + 284720]
 1085848:	ff 25 32 58 04 00 	jmp	qword ptr [rip + 284722]
 108584e:	ff 25 34 58 04 00 	jmp	qword ptr [rip + 284724]
 1085854:	ff 25 36 58 04 00 	jmp	qword ptr [rip + 284726]
 108585a:	ff 25 38 58 04 00 	jmp	qword ptr [rip + 284728]
 1085860:	ff 25 3a 58 04 00 	jmp	qword ptr [rip + 284730]
 1085866:	ff 25 3c 58 04 00 	jmp	qword ptr [rip + 284732]
 108586c:	ff 25 3e 58 04 00 	jmp	qword ptr [rip + 284734]
 1085872:	ff 25 40 58 04 00 	jmp	qword ptr [rip + 284736]
 1085878:	ff 25 42 58 04 00 	jmp	qword ptr [rip + 284738]
 108587e:	ff 25 44 58 04 00 	jmp	qword ptr [rip + 284740]
 1085884:	ff 25 46 58 04 00 	jmp	qword ptr [rip + 284742]
 108588a:	ff 25 48 58 04 00 	jmp	qword ptr [rip + 284744]
 1085890:	ff 25 4a 58 04 00 	jmp	qword ptr [rip + 284746]
 1085896:	ff 25 4c 58 04 00 	jmp	qword ptr [rip + 284748]
 108589c:	ff 25 4e 58 04 00 	jmp	qword ptr [rip + 284750]
 10858a2:	ff 25 50 58 04 00 	jmp	qword ptr [rip + 284752]
 10858a8:	ff 25 52 58 04 00 	jmp	qword ptr [rip + 284754]
 10858ae:	ff 25 54 58 04 00 	jmp	qword ptr [rip + 284756]
 10858b4:	ff 25 56 58 04 00 	jmp	qword ptr [rip + 284758]
 10858ba:	ff 25 58 58 04 00 	jmp	qword ptr [rip + 284760]
 10858c0:	ff 25 5a 58 04 00 	jmp	qword ptr [rip + 284762]
 10858c6:	ff 25 5c 58 04 00 	jmp	qword ptr [rip + 284764]
 10858cc:	ff 25 5e 58 04 00 	jmp	qword ptr [rip + 284766]
 10858d2:	ff 25 60 58 04 00 	jmp	qword ptr [rip + 284768]
 10858d8:	ff 25 62 58 04 00 	jmp	qword ptr [rip + 284770]
 10858de:	ff 25 64 58 04 00 	jmp	qword ptr [rip + 284772]
